Convert Sina XML to URL list.
Download a dailymotion page.
Download a Sina video.
sprints the text to the specified colors
Prints text to stderr and prints to stderr.
Prints a message and exits the program.
Print a message and exit.
Detect system operating system.
Get information from a ckplayer. xml file.
Get the MGTV real url from a url.
legitimize a text string.
Downloads the given url to the specified output_dir.
Match text with a list of patterns.
Parse a query param from a url.
Parse a host string into a tuple of hostname and port.
Get the title of a wanmen topic by JSON topic part.
Downloads a list of wanmen topics by course.
Downloads a wanmen document by course topic part.
Check if a task has been queued or running.
Get the event buffer for the given dag_ids.
Get a connection to the snowflake server.
Get AWS access key id and secret access key.
Get the value of a field from the extras dictionary.
Copy an expert file to the database.
Bulk dump a table to a temporary file.
Uploads the file to Google Cloud Storage.
Show current state of a task.
Returns a connection to the server.
Get an instance from the database.
Create an instance in the specified project.
Delete an instance.
Create a new database in the specified project.
Delete a database from an instance.
Starts the SQL proxy process.
Stop the SQL proxy process.
Get the version of the proxy installed on the server.
Create a connection to the database.
Retrieve a connection from the database.
Delete a connection from the database.
Returns a cloudsqlproxyrunner object that can be used to run SQLProxy queries.
Get the database hook.
Cleanup the database hook if the database_type is str_
Reserve a free TCP port.
Normalize a job id to be a valid ML Engine job id.
Get the error code from an error message.
Remove all dag runs from the database.
Remove all dag task instances from the database.
Set the is_paused state of all dags that are paused.
Print stats for all tasks in the database.
Check the status of all tasks in the scheduler.
Create a directory if it does not exist.
Convert string s to float if possible.
Make a value aware of a timezone.
Make a naive datetime from a value.
Create a datetime object from a datetime object.
Get a connection to the druid broker.
Returns a requests. Session object for the current connection.
Run the request and check the response.
Check the response for errors and raise an airflowexception.
Run the prepped request and check the response.
Context manager to create a new session.
Reset the database.
Returns a nicely formatted message for an exception.
Executes the given hql and returns a list of records.
Get a pandas dataframe from the presto database.
Execute a hql against the database and return the result.
Insert rows into table.
Return a cosmosclient connection to the master.
Check if a collection exists.
Create a collection in the specified database.
Check if a database exists.
Create a database if it doesn t exist.
Delete a database.
Delete a collection.
Insert a list of documents into the database.
Delete a document from the specified database or collection.
Get a document by document_id.
Returns a list of documents matching the given SQL string.
Get a function by name.
Create a new function in the specified location.
Update a function.
Upload a function to a zip file.
Delete a function.
Get the status of all dependencies for the given ti.
Check if dependency is met.
Get the failure reasons for a dependency.
Parse a S3 configuration file and return the access key and secret key.
Get the credentials for the specified region.
Get a connection to the vertica server.
Flush the buffer.
Corrects the fileloc to be a zipfile or a zipfile if it is a
Construct a task instance for this dag.
Start the daemon process.
Terminate the child process.
Exit gracefully.
Start the pipeline.
Start the dagparsing process in async mode.
Start the dagparsing process in sync.
Refreshes the DAG directory if it has been refreshed.
Print the stats if the print_stats_interval is exceeded.
Clears any import errors that are not present in the file paths.
Log file processing stats.
Set the new file paths to be processed.
Wait until all processors have finished processing.
Terminate all processes and wait for them to finish.
Get a connection to the remote host.
Create a transfer job for the given body.
Get a transfer job by name.
Returns a list of transfer jobs filtered by filter.
Update a transfer job.
Cancel a transfer operation.
Pause a transfer operation.
Resumes a transfer operation.
Wait for a transfer job to complete.
Find tasks for a given task instance.
Return the number of slots used for this task instance.
Run a command and return the output of the command.
Allocate a set of IDs for this project.
Begin a transaction for this project.
Commit a commit to this project.
Look up a set of keys in the project.
Rollback a transaction to this project.
Run a query against the project.
Get a single operation by name.
Delete an operation.
Poll an operation until the operation is done.
Get the hostname of the socket.
Get a connection to the language service.
Returns a list of template fields for the given fullname.
Role for template field directives.
Disposes the ORM.
Prepare the classpath to be used in the command line.
Check that the target_task_id is valid.
Return detection of a configuration variable.
Convert an alchemy object to a dictionary.
Split a list of items into chunks of chunk_size.
Reduce an iterable in chunks by applying a function to each element of the iterable in chunks.
Chain a list of tasks.
Renders the log filename using the given template.
Get a connection to the API.
Wait for a dataproc operation to complete.
Deep string coercion.
Handle databricks operator execution.
Run a pig command and return the output.
Fetch the celery state from a celery task.
Return the number of tasks per send process.
Get the number of tasks per fetch process.
Get a connection to the API.
Get a job from ML Engine.
Wait for a job to complete.
Create a new version for a model.
Set the default version of a model.
List all versions of a model.
Delete a version of a model.
Create a model in the specified project.
Get a model by name.
Write batch data to DynamoDB.
Integrate airflow executors plugins.
Get the default executor.
Get an executor based on the executor_name.
Called when an error occurs in a segment.
Get a connection to the MSSQL server.
Trigger a dag.
Delete a dag.
Get information about a task.
Get all available pools.
Create a new pool.
Create or update a container group.
Get the current state exit code and detail status of the current state.
Returns a list of messages for the specified instance.
Get all logs for a container.
Delete a container group.
Check to see if a container exists with the given name.
Construct the ingest_query dictionary for this query.
poke a message from the pubsub
Get all task instances in this dag.
Get a task instance from the database.
Get the previous dagrun that was executed before this execution date.
Get the previous scheduled dagrun for this execution date.
Verify the integrity of the workflow.
jenkins_request_with_headers is a wrapper around jenkins_server. jenkins_request that
Convert the context to airflow variables.
Conditionally trigger the given dag_run_obj.
Query the metric for the given query.
Get a dag by ID.
Kill a set of zombies
Bag a dag and all its sub dags.
Collect all the dags found in the specified folder.
Return a report of the DAGbag stats.
Add a number of days to a dataset.
poke a file from HDFS
Remove a file from the HDFS server.
Remove all task instances from a list of tis.
Return the number of failed attempts.
Get the current state of the current task.
Commits the error message and commits the error message.
Refresh the state of this task from the database.
Delete all XCOM data associated with this task.
Return the key of the dag task id execution date execution date and try number.
Returns True if the task is dependents done or not.
Return the next retry datetime for this task.
Returns True if the state is up for retry and False otherwise.
Check if the pool is full.
Get the dagrun for this execution date.
Add a key - value pair to the xcom stack.
Initialize the run context.
Write log to local_base and upload to remote_base.
Get a connection to the API.
Start an instance in a zone.
Get the instance template for the specified resource.
Wait for an operation to complete.
Check if a bucket exists.
Create a new S3 bucket.
Check to see if a prefix is in the bucket.
List all prefixes in a bucket.
List all keys in a bucket.
Check if the given key exists in the S3 bucket.
Get a key from S3.
Reads the value of the specified key from the specified bucket.
Check if the given wildcard key exists in the bucket.
Get a key based on a wildcard key.
Query the Cassandra database.
Convert a user - type value to a dictionary.
Get a connection to the speech service.
Execute the sparksqlhook.
Load airflow plugins from a list of entry points.
Check if a plugin object is a valid airflow plugin.
Skip a set of tasks in a dag.
Get an azuredlfilesystem connection.
Check if a file exists.
Lists the contents of a file or directory.
Execute the query.
Uncompress a gzip compressed file.
Query the MSSQL database and return a cursor.
Build metrics for an event.
Create a cgroup for the given path.
Delete a cgroup from the tree.
Do an API call to the databricks API.
Get a Salesforce connection.
Make a query and return the results.
Describe an object.
Returns a list of available fields for the given object.
Get an object from a Salesforce object.
Convert a column to a timestamp.
Get a collection from mongo_collection.
Returns True if there are mail attachments with the specified name.
Get attachments by name.
Get the filename and payload of the file part.
Put records to Firehose.
Get the status of a dependency.
Send an email to the specified email address.
Send email via SMTP.
Process the result value and return it as a string.
Check if a blob exists in a container.
Check if a prefix exists in a blob container.
Loads a string into a blob.
Read a file from a container.
Delete a file from a container.
Get a connection to the ftp server
List all files in a directory.
Store a file on the remote server.
Get the modification time for a file.
Execute the discord webhook hook.
Get a connection to the fileservice service.
Check if a directory exists in a share.
Check if a file exists in a share.
Returns a list of all the directories and files in the specified share.
Create a directory in the specified share.
Load a file from a file path.
Load a string from a text file.
Get a connection to the server.
Download an object from a bucket.
Upload an object to a bucket.
Check if the object exists in the bucket.
Check if the blob is updated after ts.
Delete an object from a bucket.
Get the size of a blob in a bucket.
Get the CRC32c checksum of a blob.
Get the MD5 hash of a blob.
Check if the secondary training status transitions in current_job_description have changed.
Returns a string representing the secondary training status message for the given job description and previous description.
Upload a file to S3 and upload it to S3.
Configure S3 resources.
Check if a S3 URL is valid.
Get a botocore connection to log.
Executes the dataflow hook.
Run migrations offline.
Run migrations on line.
Delete an instance.
Delete a table from an instance.
Update a cluster.
Prepares the command needed to run the honeyline command.
Prepare hiveconf from dictionary.
Check if a table exists in the database.
Get a connection to the hive server.
Get the results for a given HQL.
Get a list of records from a HQL query.
Get a pandas dataframe of the results of a HQL query.
Returns a connection to the productsearch server.
Get the authentication token from the http connection.
Binds the given parameters to the given operation.
Escapes a string and returns it as a unicode string.
Cast a string field to bq_type.
Validate that value is of expected_type.
Returns a connection to the BigQuery server.
Get the service to use for this service.
Check if a table exists in a dataset.
Cancel the query.
Runs a table delete operation on the database.
Runs a table upsert on a dataset.
Get a specific dataset.
Executes the given SQL operation on the job.
Executes the specified operation multiple times using the specified sequence of parameters.
Returns the next row from the buffer or none.
Query the postgres database.
Create intermediate directories for remote_directory if it doesn t exist.
Run the command and return a subprocess. Popen object.
Called when the run_as_user is finished.
Entry point for the command line interface.
Builds the htmlheader string for the HTML header.
Builds the jschart for the plot.
Create a new x - axis.
Create a new y - axis.
Get a connection to the database.
Get the last execution date of a dagrun.
Execute the SQS hook.
Return a JSON response for the given object.
Open a file if it s a zipfile or a zipfile.
Generate a cache key for the given request.
Get a connection to the videointelligence service.
Get the api key from the http connection.
Returns a requests session object for the http connection.
Executes the API and returns the result.
Build the opsgenie payload.
Execute the opsgeniealert hook.
Get the connection object for this client.
Runs a query and returns the id of the executed query.
Check the status of a query execution.
Poll the status of a query execution.
Returns a pysftp connection object.
Handle a rate limit exception.
Get a table by database name and table name
Get the location of a table in the database.
Get the status of a cluster.
Delete a cluster.
Get a list of all snapshots for a cluster.
Restores a cluster from a snapshot.
Creates a cluster snapshot.
Executes the Slack hook.
Create a new job flow and run it.
Filters a list of strings to include only files that have the specified size.
Filter out extensions that are not specified in ignored_ext.
Executes the S3 pipeline and returns True if successful False otherwise.
Get pool by pool name.
Create a pool with the specified slots and description.
Delete a pool from the database.
Convert a dictionary to a protobuf.
Wait for an operation to be completed or pending.
Get a specific operation.
Append a label to the cluster proto.
Get the webhook endpoint for the given http connection.
Build the payload for a discord message.
Execute the webhook.
Encrypt plaintext using key_name.
Returns a connection to the Speech server.
Closes the upload and writes the log to Amazon S3.
Get the environment variables from kube_config.
Return a list of all the worker secrets.
Get the security context.
Get the extra links for a task.
Start the dagfileprocessor.
Return True if the job has finished or False if it has finished.
Exit gracefully.
Update the database with the latest import errors from the dagbag.
Process all task instances in a dag.
Returns a dictionary of dag_id - > task_id and task_id - > count
Change the state of all the tasks in the given task_instances to the given acceptable_states
Enqueue a list of simple_task_instances with queued state.
Change state for tasks failed to execute.
Process executor events.
Update counters from database.
Manage the running state of the executor.
Get a dagrun for the given run_date.
Returns a dictionary of all tasks to run for the given dag run.
Set the state of all dag runs to failed.
Callback to be called when a heartbeat is received.
Returns a client object for the specified project.
Get instance by instance_id.
Delete an instance.
Deletes a database from an instance.
Check if the mail attachment exists.
Prepare additional properties to be passed to the web_detection_params.
Get a connection to the Cassandra cluster.
Check if a table exists in the cluster.
Check if a record exists in the specified table.
Builds the command to track the driver status.
Submit application to Spark.
Process the output of the Submit log.
Process the line of the spark status log.
Get the appropriate task runner for the given local_task_job.
Wait for the task to end.
Query MySQL database and return cursor.
Configures a CSV file with the given schema.
Write a local schema file to the local file system.
Get the column type dictionary for the schema.
Map a MySQL type to a string.
Deserialise extra data as JSON.
Scale time_seconds_arr to the specified unit.
Returns a datetime. timedelta object with the given number of days ago.
Initialize a role.
Delete a role from the database
Returns a list of user s roles.
Returns a set of all permissions views for this user.
Checks if the user has a role with the given name or list of roles.
Returns True if permission_name has permission to view_menu_name.
Remove all permissions from the permission view.
Merge a permission with a view menu.
Update admin permission view.
Create permissions for all dag vms.
Get the fernet object from the configuration.
Remove the partition from the database.
Remove messages from the queue.
Get a connection to HDFS.
Get a connection to the webhdfs hook.
Check if hdfs_path exists.
Get a connection to the pinot broker.
Get the URI of the connection.
Convert a date object to a dictionary.
Convert a time object to a dictionary.
Get a redis connection.
Executes a SQL query and returns a pandas dataframe.
Executes the given SQL statement.
Set the autocommit flag on the connection.
Serialize a cell to a string.
Get the status of the scheduler.
Get a cloudant connection.
Execute Slack Slack webhook hook.
Get the credentials for the service account.
Returns an authorized http connection to the Google API.
Return a list of all unfinished tasks.
Prepare the command to execute.
Normalize a tensor by the mean and standard deviation.
Crop an image.
Flip the left side of an image.
Apply a perspective transformation to an image.
Flip an image in place.
Adjust the brightness of an image to the specified brightness factor.
Adjust the contrast of a PIL image.
Adjust the saturation factor of an image.
Convert an image to grayscale.
Save a tensor as an image file.
Find all classes in a directory.
Reads an info file and returns a torch. longtensor.
Reads the matches_file file and returns a torch. longtensor containing the number of matches
Computes the accuracy of the given target.
Download a URL to the specified root.
Return a list of all directories under root.
Return a list of all files in the specified directory with the specified suffix.
Download a file from Google Drive.
Get random parameters for a given image.
Generate a set of parameters for the distortion.
Get random parameters for a given image.
Get a list of transforms for a given brightness contrast and hue.
Get a set of parameters for a random angle translation scale shear.
Downloads the archive to the local filesystem.
Download all the files in the folder.
Get the current theme name.
Get a list of all themes in templates_path.
Convert a JSON response to a list of dictionaries.
Multivariate normal tensorflow.
Approximates the log - probability of two school effects.
Build a random variable from a distribution value and name.
Return the maximal mask of x along the specified axis.
Calculate the size of an event.
Evaluates all one - hot events.
Convert an identifier to a tensor function.
Returns the size of component_params_size.
Build the input pipeline for the training pipeline.
Check that the given map values are valid.
Call a transition operator function with the given args.
Calls the given function with the given args and returns the result and extra gradients.
Broadcast a structure from one structure to another.
Runs a leapfrog step.
Simulate the Metropolis hastings step.
Create a TFPFunction from a configuration dictionary.
Convert x to a tensor.
Expand x to event rank.
Cat probabilities.
Ensure tensorflow is installed.
Logistic regression.
Return features and labels for covertype.
Create a list of positive axis.
Squeeze x along axis.
Derivative of z.
Inverse of z.
Compute semilocal linear transition matrix for semilocal linear regression.
Semilocal linear trend transition noise.
Return the number of primes less than n.
Return the eps of the given dtype.
Inner bisection of a line search.
Print pass_through_tensor to stdout.
Check that the given parameter is a quadrature parameter.
Interpolate grid with loc.
Interpolate the given grid with the given scale.
Concatenate multiple vectors.
Compute the logarithm of a vector matrix.
Computes the log - sum - exp of the log - matrix ms and vs.
Compute the matrix of a vector matrix.
Extracts the log probabilities from the distribution.
Choose a random direction from the current state parts.
Calls fn if fn_result is not None.
Build training posterior.
Compute the moments of a masked time series.
Returns the initial value of a masked time series.
Mixes the given means over the given variances over the posterior draws.
Return the range of values in this range.
Resolve a list of distribution names to a tuple of leaf name and leaf name.
Builds the distribution function from a model.
Compute the entropy of the joint distribution.
Create an image summary.
Visualize reconstruct.
Visualizes a qualitative analysis.
Summarizes the parameters of a distribution.
Summarize mean in nats and bits.
Apply a multivariate normal diagonal to the given inputs.
Zero state tensor.
Calls the convolution function.
Samples the given samples using the static prior.
Returns the shape of the batched tensor.
Returns the batch shape tensor.
Convert vector size to square matrix size.
Argsort function for numpy. argsort.
Sort values along a given axis.
Compute the N - Truncated Truncated Truncated Tensor.
Compute the logarithm of the logarithm of the logarithm of
Erfinv op.
Calculate the joint log - probability for text messages.
Returns True if index_points is univariate marginal.
Get the index points.
Outer squared difference between x and y.
Compute the value and batch jacobian of x.
Split a covariance into a list of marginals.
Return the text representation of a numpy tensor.
Sample shape of the tensor.
Sample shape tensor.
Sample the value of the distribution.
NumPy representation of the tensor.
Uniform unit norm.
Log normalization.
Returns the common dtype for the given list of tensors.
Given a tensor_to_broadcast and a list of target_tensors broadcast to the target
PDF at peak.
Calculate the effective sample size for a single state.
Residual scale reduction for a single state.
Return the size of x along the specified axis.
Broadcast secondary_arg if it is a list - like argument.
Remove a field from the map.
Merge two strings.
Deeply merge nested tuples into nested tuples.
Returns a dict of the input keyword arguments for a function.
VGGconv block.
Returns True if there is no uturn in the state_one state_two state_two
Leapfrog a value and gradients function.
Log the joint log - likelihood.
Randomly permute a tensor with less than or equal probability.
Convert a nested structure to a tensor.
Get tensor - like attributes as a dict.
Creates a mixture prior with the given latent size and mixture components.
Packs a list of images into a single image.
Download a file to a directory.
Calls the volatility_fn and the gradients of the volatility_fn.
Broadcasts the volatility to the state if it is broadcast to the state.
Apply fn to the input output of the reshape operation.
Call fn and reshape the output.
Compute the B - Dtr divergence.
Flat sample distributions.
Given a list of topics and a vocabulary return a list of string representations of the topics in
Adds control dependencies to the codebook.
Save image data to a file.
Convert a numpy dtype to a numpy dtype.
Return the base dtype for the given dtype.
Returns True if dtype is a boolean dtype.
Returns True if dtype is a complex type.
Returns the maximum value of a given dtype.
Returns the name of the given dtype.
Returns the size of the given dtype.
Assert that items have the same base type as expected_type.
Returns a function that accept the given reflected function.
EXPansion function for the objective function.
Shrink to the best vertex of a simplex by shrinkage.
Replace x at index with replacement.
Prepare the arguments for the objective function with the initial simplex.
Prepare the arguments for the objective function with the initial vertex.
Builds the fake data.
Returns the configuration of the initializers.
Create an initializer from a configuration dictionary.
Matrix multiplication.
Private function to compute the standard variance for a statistic.
Pick a scalar condition.
Finish the log probability for one fiber.
Finish probing for one fiber.
Rotate dimensions if necessary.
Validates that the given layer is a batchnormalization.
Given a distribution and a list of event ndims slices into a dictionary.
Apply a single step operation to a distribution.
Apply slice overrides sequence to dist.
Returns the number of columns of x.
Get static predicate value.
Ranks a shape tensor by its shape.
Checks if the given scale is a diagonal scale.
Pad mixture_distribution and categorical_distribution with event_ndims.
Assert that x is a nonnegative integer form.
Try to get the static value of x if x is none or dtype is none.
Checks if the given dt is known to be unsigned by the given dtype.
Return True if dt is known to be signed by the given dtype.
Return the largest integer of a given dtype.
Find the smallest integer in a datetime object by its type.
Returns True if dt is an integer or a boolean like of the given dtype.
Generate a new seed based on seed and salt.
Returns the dimension size of x along the specified axis.
Validate rightmost transposed ndims.
Validate a permission.
Given a shape and a static perm convert it to a shape of the same shape.
Returns the dimensions of x.
Build a backward pass step based on the given transition matrix.
Perform a kalman transition on the mean and covariance.
Propagate mean to linop and dist.
Propagate covariance matrix.
Join the mean of the latent mean.
Joins the covariance matrix of the latent states.
Apply the pushforward latents to the latent_means and latent_covs
Log normalization.
Tensorflow mode.
Rotate samples by the mean direction.
Sample n samples from a seed stream.
Return a copy of the given function.
Remove all keys with a value from a dict.
Recursively replaces nested dicts with pretty dicts.
Get samples from a distribution.
Return True if x is a namedtuple - like object.
Choose a new type based on the accepted and rejected fields.
Calls the given function with the given arg list and returns the result and gradients.
Check that shape is valid.
Converges the input tensor with any of the input tensors converged and failed.
Update the position of the tensor.
Checks if the convergence of the current position to the next position is valid.
Broadcast value to target.
Return the harmonic number of x.
Get field from kernel results.
Variance scale scaling term.
Where clause for val_where.
Returns True if val_1 is finite False otherwise.
Return bootstrap kernel results.
Resnet block.
Solve the deep exponential family problem.
Initialize the parameters.
Returns the KL divergence function of two types.
Reads an image from a file.
Downloads all the Sprites from the data directory.
Create a character from a skin hair and top.
Create a sequence from a character and action metadata.
Create a random sequence.
Flatten summand list of kernels into a list of summand kernels
Flatten multiplicand list of kernels.
Build the training and testing data for a fake dataset.
Insert back keepdims into x.
Create a list of non - negative axis.
Sort tensor by top k.
Raise valueerror if x does not have expected ndims or expect_ndims.
Batch gather with broadcasting.
Broadcasts an event and samples to the given event and samples.
Inverse Hessian control inputs.
Transpose a batch of tensors.
Reduce x to the rightmost dimensions.
Get the common dtype for the given list of tensors.
Get the initial state of a BFGS optimizer.
Return mask of the PSD of x.
Get the initial arguments for the objective function.
Find the best value in a population.
Checks the convergence of a population.
Ensure that tensor_or_list is a list.
Get the tolerance tensor.
Build an input pipeline for training images.
Plot a list of generated images.
Convert a list of productions to a string.
Call the LSTM model.
Tensorflow multivariate normal diagonal.
Integral of the hat integral.
Inverse of the hat inverse.
Solves linear linear equations for the given lower and rhs.
Solve the block diagonal of the diagonal.
Validate a matrix and return a list of assertions.
Generate a list of slices for the given number of blocks.
Generate a mask of the given number of blocks.
Create input_order based on input_order.
Create masks for the given degrees.
Create a zero - dimensional multivariate normal diagonal matrix.
Convert parameters to weights.
Builds the model from the given model.
Build a seasonal transition matrix.
Build a seasonal transition noise function.
Builds a seasonal transition noise.
Validate observation data.
Add a new value to the scheduler.
Set the checkpoint to the specified checkpoint_trigger.
Set the gradientclip constant of the gradient.
Optimized version of the optimizer.
Set the summary of the training data.
Set the summary of the value.
Set the training data to the given RDD.
Download news20 and return a list of tuples containing the content and label IDs.
Download GloVE W2V file and return a dictionary of floats.
Compile the optimizer and call the bigdlfunc.
Evaluate the BigDL on x and y.
Predict the value of x.
Get a MNIST record from the MNIST dataset.
Preprocess MNIST data.
Get the end trigger for the given options.
Validate the optimizer against the test data.
Get the value of the field.
Calls the specified bigdl function with the specified name with the specified arguments.
Convert a Java object to a Java object.
Convert Python object to Java object.
Get activation by name.
Get the label of the value.
Read a Parquet file and return a distributed imageframe.
Write a parquet to a file.
Get the image associated with the given float key.
Get the image of the tensor.
Get the label of the tensor.
Returns a list of predictions for the given key.
Predict the value of x.
Transform the BigDL object to a Java string.
Saves the keras model to a JSON file.
Build the keras model.
Predict class distributed.
Get the weights of the tensor.
Set whether or not the evaluation should be performed.
Load a model from a file.
Load keras weights from a json or hdf5 file.
Create a criterion for the given jcriterion.
Load weights from a JSON hdf5 file.
Load the datasets from the imdb file.
Build the keras model.
Get the shape of the input string.
Get the shape of the output.
Get the coordinates of the MNIST dataset.
Read movielens data sets from data_dir.
Get the path to the bigdl classpath.
Returns True if the version of pyspark is lower than 2.
Exports a checkpoint to a dictionary.
Saves a list of tensors into a bigdl file.
Expand a tile along the specified axis.
Simple attention.
Tensorflow attention.
Get the log file for the agent.
Log an utterance.
Summarize gradient updates.
Read data by config.
Interact with an agent.
Convert labels to one - hot labels.
Convert probabilities to one - hot labels.
Return a tf. session. Session object for the GPU configuration.
Loads the network from disk.
Get the molecular variable of the optimizer.
Updates the learning rate and momentum variables for the graph.
Calculate the F1 score using the F1 macro.
Process a word and return the answer as a tuple.
Dropout layer with variational dropout.
Builds the model and compiles it.
Builds the basic LSTM basic network.
Train the model on a batch of data.
Predict on a batch of data.
Convert a list of words into an array of integers.
Convert a list of tags to an array of integers.
BLEU advanced sentence.
Verify that the given URL is a valid SC URL.
Extracts a list of crypto. x509. Certificate objects from a text file.
Verify the signature of the request body.
Verify the given signature chain URL.
Returns the JSON representation of the controls.
List of ms_bot_framework controls for this control group.
Returns a list of telegram controls.
Alexa controls.
Returns the accuracy of y_true and y_predicted.
Round accuracy of y_true and y_predicted.
Read data from file.
Create a default agent for the hello bot agent.
Convert x to a one - hot unit vector.
Prettify a list of metrics.
Loads the model and restores its state.
Saves the model to disk.
Computes the gradients of the training operation.
Search for a word in the trie and return a list of matching words.
Start the timer.
Handle a request.
Run the agent and act the given utterance.
Generate the response based on the request.
Process intent request.
Handle launch request.
Handle an unsupported request.
Print pretty representation of the object.
Exponential elmo loss to PPL.
Build a model from a configuration dictionary.
Interact with a model.
Predict on stream.
Read a text file and return a list of words.
Load a callable from a string.
Get a metric by name.
Convert label to decay type.
Get the best value for a given loss.
Encodes a list of tokens into a numpy array.
Reads the requirements file and returns a dict of names and links.
Logarithm of the log loss.
Returns a string with the details for the given item_data.
Create an ecommerce agent.
Main entry point for ms_bot_framework_server.
Downloads source_url to dest_file_path. If dest_file_path is
Uncompress a tar file.
Recursively updates an editable dictionary recursively.
Set the MD5 of a URL.
Set a query parameter in a URL.
A lexical analyzer.
Returns the control json as a dict.
Returns the ms_bot_framework representation of the card action.
Returns the JSON representation of the control.
Returns a dictionary of ms_bot_framework.
Returns the F1 of the team v2 F1.
Calculate recall at k examples.
Check if the gpu exists.
Parse a config property.
Parses the given config into a dictionary.
Expand a path with expanduser and expanduser.
Run the request loop.
Remove a conversation from the conversation cache.
Refresh all valid certificates.
Verify the request body against the certificate chain.
Handle a request from alexa.
Load class from a string.
Get a model class by name.
Get the regularization path for a given model.
Make a generalized linear estimator for the given model and coefs.
Create an Ocluster object from a list of keyvals.
Shut down the server.
Check if the local server is running.
List all the jobs in the cluster.
List all timezones in the system.
Fill properties and properties from h2ocluster.
Decrease the execution time of a test function.
Get a summary of a column in the specified key.
Delete a frame from the server.
Returns a list of model builders for the specified model.
Validate the model parameters against the given training_frame.
Compute model metrics for a given frame.
Delete a model by key.
Run the specified number of instances in the specified region.
Terminate one or more EC2 instances.
Stop instances in a region.
Start one or more EC2 instances.
Reboot one or more EC2 instances.
Wait for a list of ips to be ssh - ready.
Get the full name of a function s method.
Return a string representation of the function s arguments.
Wrap each word in a string.
Wait for the job to finish.
Fit the model to x and y.
Returns a dictionary of parameters for this estimator.
Handler for signal handlers.
Delete the output directory if it exists.
Remove a rsandbox from a directory.
Scrape port from stdout.
Scrape the cloudsize from stdout.
Stops the process and waits for it to finish.
Stop all nodes and client nodes.
Get the IP address of the node.
Get the port of the node.
Determine the vector size of the pre - trained frame.
Computes the absolute error of h2o_mean_absolute_error.
H2O mean squared error.
Compute the median absolute error of the predicted target.
Computes the variance of the h2o - implied variance of y_actual and y_
Asserts that the variable is of the expected type.
Assert that v matches regex.
Assert that a variable is semantically satisfied.
Checks if a variable is of the given type.
Get a human - readable name for a type.
Checks if the variable is of the correct type.
Checks if the variable is in the constant list.
Get the configuration object.
Read configuration file.
Yield paths to log files that are not relative to the current working directory.
Store model progress.
Recalculate model parameters based on completion time.
Estimate the completion time of the progress.
Guess next poll interval for next poll.
Compute progress at time t.
Returns the time at which x_target is progressed at x_target.
Draws the given text to the terminal.
Compute widget sizes.
Get the size of the terminal.
Set the encoding of the barcode.
Fit the encodingmap to the given frame.
Refresh the cache.
Return the type of a column.
Prints the summary of the table.
Prints the summary of the current frame.
Return the first row or column of the DataFrame.
Multiplies this matrix by a matrix.
Return a list of all levels of the expression.
Returns the number of levels in the hierarchy.
Set the level of the expression.
Set the levels of the expression.
Rename columns in this table.
Set the names of the expr node.
Set the name of the expr node.
Return True if the given item is contained in this table.
Return the modulo k - fold column of the expression.
Return a stratified k - fold column expression.
Print the structure of the table.
Pop a column from the stack.
Concatenate frames along the specified axis.
Return a new h2oframe with the given data.
Return a new h2oframe with the given data.
Group this query by the given value.
Fillna fillna method with NaNs.
Relevel a node at the current level.
Insert missing values into the frame.
Return the expression as a factor expression.
Split a string into a table of rows.
Remove all rows and columns from the expression.
Return the entropy of the expression.
Return the number of valid substrings in path_to_words.
Return the table of the data.
Return a subexpression of this expression with replacement.
Convert the expression to upper case.
Naomit of the expression.
Compute the difflag1 of the two columns.
Return a new expression that indicates whether the expression is a NA expression.
Return a minute expression.
Runs the expression and returns the result as an oframe.
Apply a function to the expression.
Parses text and returns a Python code object.
Parse a file and return a Python code object.
Move the cursor to the specified position.
Unparse the next token and return the result.
The centers of the cells in the model.
The standard deviation of the centers of the cells in the model.
Make an API call.
Check the version of the H2O cluster.
Imports the given path using lazy import.
Parse a raw setup from a setup dictionary.
Deep copy a h2oframe.
Get the model for the given model_id
Returns a gridsearch object for the specified grid_id.
Get a single frame by ID.
Download a POJO model from the specified path.
Download a CSV file from H2O.
Runs a demo function if it exists.
Load a dataset from a relative path.
Make metrics for a given predicted and actual.
Store a key in a file.
Check that the given frame ID is valid.
Returns a human - readable string representation of the given size.
Normalize a slice.
Return True if slice s is normalized.
Wait for the job to finish.
Returns a dict of deepfeatures for each model in the test data.
Prints the summary of the model.
Prints the statistics of the hyperparameters.
Returns a list of hyperparams for the given model id.
Returns a dictionary of hyperparams for the specified model.
Get the archetypes of the test data.
Screeplots the model with the given type.
Translate a name to a lower - case string.
Dedents text at the specified indentation level.
NAME extractrunin. py
Send a request to the server and close the session.
Session ID.
Start logging to the specified destination.
Prepare data payload.
Prepare a payload for a file.
Log start transaction.
Log end of transaction.
Log a message to the logging destination.
Print msg if verbose mode is enabled.
Get the leaderboard information for a given project.
Download a POJO file.
Download a mojo file.
Fit the model to the data.
Transform x according to self. means. stds.
Inverse transform x.
Extract true string from string_content.
Find the name of the node in each_line and remove it from temp_func_list
Finds the build timeout for a given set of temp functions.
Finds a build failure in the given list of temporary functions.
Finds the build id for a given line of text and removes it from temp_func_
Extract job build url from url_string.
Grabs the java message from the file.
Saves the failed test info dictionary to a pickle file.
Update the global g_summary_text_filename and g_output_filename_passed_
Write the content of a file to a file handle.
Writes a java message to the specified text file.
Loads the java messages to ignore.
Normalize enum constants.
Find synonyms for a given word.
Poll the job.
Write this object to a POJO file.
Fit the model to the given frame
Returns a dictionary with default parameters for all parms.
Returns a dictionary of the actual parameters for this query.
Returns a deep feature for the given test data layer.
Prints the scoring history for the model.
Show the summary of the model.
Return the variance of the model.
Returns the residual degree of freedom.
Return the coefs of the model.
Download a POJO file from the specified path.
Download the Mojo model from the H2O.
Saves the current model to the specified path.
Check that the targets are the same.
Returns a list of cross - validation models.
Wait for keyboard key press to be pressed.
Return this cell as a pandas. dataframe.
Display the table.
Searches for a jar that matches the specified path. If no path0 is specified then the
Yield paths to jar jars.
Writes a dictionary to a CSV file.
Convert a path to a URI.
Discover all modules in the root directory.
Writes the documentation for the API to the specified output directory.
Returns the cell values as a list of integers.
Loads the Java message dictionary from the specified file.
Add a new message to the message dictionary.
Saves a dictionary of Java messages to a file.
Prints a dictionary of java messages to the console.
Parse command line arguments.
Print the script name and exit.
Find all files in a directory and return them as a list.
Find the spell of the magic in a file.
Entry point for the tokenize module.
Transform data into a h2oframe.
Summarize all failed tests in the test root directory.
Extracts printsaveintermittens from a summary file and extracts printsaveintermit
Plot the metric using matplotlib.
Check if the builder is available.
Remove data older than monthtokeep from the test dict.
Return a dictionary of all endpoint groups.
Updates the site forward for the given site.
Returns the JSON data as a JSON string.
Comment a user.
Get credentials from stdin.
Like a user.
Like a hashtag.
Check if a user is not a bot.
Read a list from a file.
Schedule a new message to be sent to the queue.
defer the state of the message to be live
Guess the service information from a spec path.
Returns the URI for the given request.
Returns a connection object for the given request.
Perform a HTTP request.
Get the Authorization Server value.
Validate that the URI is a valid request URI.
Get CLI profile.
Open a connection to the WBEM server.
Set the timeout for this request.
Set request header value.
Get all headers for this request.
Send a request to the WBEM server.
Get the status of the server.
Get the text of the status of the server.
Return the response body for this request.
Set the client certificate for this request.
Send a PUT request to the server.
Add a header to the HTTP request.
Send a request to the server.
Get the response from the HTTP request.
Get a human - readable id from id_name.
Get the serialization name for an element.
Get the properties of an entry from a node.
Get all the children of a node from a path.
Finds the namespaces of a child node in the given namespaces.
Convert an XML string to a namespace.
Convert an XML string to a region object.
Convert an XML string to a namespace availability response.
Convert XML string to metrics object.
Update a kb.
Build a package from a specific PR number.
Replace word_alterations with word_alterations.
Get the properties of a storage account.
Get the storage account keys associated with a storage service.
Regenerates the storage account keys for a storage account.
Deletes the specified storage account.
Checks the availability of a storage account.
Get the properties of a hosted service.
Delete a hosted service.
Deletes a deployment from a service.
Swap a deployment with another deployment.
Updates a deployment status.
Walks an upgrade domain for a given service and deployment.
Reboot a role instance.
Deletes role instances from a service and deployment.
Check availability of a service.
List certificates associated with a service.
Get a certificate for a service.
Add a certificate to a service.
Delete a service certificate.
Get the management certificate associated with this subscription.
Adds a new management certificate to the subscription.
Deletes the specified management certificate.
Get affinity group properties.
Create a new affinity group.
Delete an affinity group.
Fetches a list of all subscription operations for the specified time range.
Delete a reserved IP address.
Associates a reserved IP address with a service and deployment.
Disassociate a reserved IP address from a service and deployment.
Get the reserved IP address for a reserved IP.
Get a specific role for a service and deployment.
Delete a role from a service and deployment.
Start a role for a service and deployment.
Starts a list of roles for a service and deployment.
Restart a role instance.
Adds a new DNS server to a service.
Updates a DNS server.
Deletes the specified DNS server.
List the versions of a resource extension.
Unreplicate a virtual machine image.
Share a virtual machine image with a virtual machine.
Delete a VM image.
List VM images.
Delete an OS image.
Get the data disk for a service and role.
Delete a data disk.
Updates a disk.
Delete a disk.
Build the receiver type.
Create a service from a connection string.
List all subscriptions for a topic.
Parse an asynchronous operation response for an asynchronous operation.
Perform a GET request.
Perform a PUT request to the server.
Get the status of an operation.
Add a management header to the request.
Create a new travis build package.
Returns a list of all regions in the servicebus.
List all namespaces in this service bus.
Get the namespace of a servicebus.
Creates a new namespace in the specified region.
Deletes the specified namespace.
Check the availability of a namespace.
List all the topics associated with a topic.
List all the notifications hubs for the specified account.
List relays for the specified name.
Get metrics rollups for a given metric in a queue.
Get metrics rollups for a topic.
Get metrics rollups for a notification hub.
Get the metrics for a metric for a relay.
Create an environment in the specified directory.
Context manager to create a venv with packages.
Creates a new SQL Server.
Sets the admin password for the specified server.
List the quotas for the specified server.
Deletes a firewall rule.
List all firewall rules for a server.
List the service level objectives for the specified server.
Delete a database.
Returns a list of all databases for the specified database.
Get session state.
Set session state.
Validate the challenge string.
Handle errors.
Create a queue in the specified queue.
Delete a queue.
Get a queue by name.
Create a new topic on the specified topic_name.
Get a specific topic.
Create a new rule in the specified topic and subscription.
Get a single rule from the servicebus.
List all rules for a given topic and subscription.
Create a new subscription on a topic.
Get a subscription for a topic and subscription.
List all subscriptions for a given topic.
Send a message to a specific topic.
Unlock a subscription message.
Send a batch of messages to a queue.
Unlock a queue message.
Receive a message from a queue.
Receive a subscription message from a topic.
Create an event hub.
Update an event hub.
Get a specific event hub.
Send an event to a service bus.
Update the request headers and sign the request.
Returns the authorization string for the given request.
Check if the token is expired.
Get a token for the given host and path.
Updates the request URI query based on the request URI.
Deletes the message from the queue or subscription.
Unlocks this message from the queue or subscription.
Renews the lock on the service bus.
Add headers to the request.
Return the batch body as a dict.
General error handler.
Handle redirects.
Set the profile to use.
Delete a queue.
Delete a topic.
Create a shared access key from a connection string.
Get the properties of this servicebus resource.
Check if the lock has expired.
Process the results queue and return a list of items.
This thread is responsible for adding tasks to the results queue.
Builds a config from a dictionary.
Create a message from a response.
Convert an etree element to a rule object.
Convert an etree element to a queue.
Convert an etree element to a topic object.
Convert an etree element to a subscription object.
Parses the response body and populates the return object with the results.
Get entry properties from an XML element.
List all the queues for this service.
List all the topics for this service.
Get information about a website.
Delete a website.
Updates a website.
Restart a website.
Retrieves a list of historical usage metrics for a website.
Retrieves the metric definitions for the specified website.
Get the publish profile XML for a website.
Get the publish profile for a website.
Creates a new cloud service.
Check the name of a job collection in a cloud service.
Get a specific job collection.
Cancel scheduled messages.
Reconnect to the server.
Get a certificate from a publish settings file.
Load cookies from the cache.
Returns the terminal width of the given value.
Get the prefix of the cut_prefix of the given value.
Print a message in place.
Format a file size.
Format the elapsed time into a string.
Create a status line for the progress bar.
Print a progress bar.
Return the number of segments available for this presentation.
Generate segments for this representation.
Wait for the event to happen at the specified time.
Put a segment into the queue.
Queues the given value in the specified queue.
Get parameters from pvswf.
Extract the nonce from the result.
Find a VPID for a given URL.
Parse a JSON string and validate it.
Parse an XML string into a tree.
Parse a qsd string and return a dict.
Search a dictionary for a specific key in a dictionary.
Iterates over all tags in the given HTML.
Determine the JSON encoding of a sample.
Parse a JSON response.
Parse an XML document.
Parse cookies and set them to self. cookies.
Parses the headers from a list of key - value pairs.
Parse the query parameters from the cookies and store them in self. params
Return the message to be sent to the client.
Create a new record.
Login to the server.
Load support plugin.
Updates the query string for the given url with the given qsd dict.
Iterates over all tags in the file and yields them as a sequence of bytes.
Yields all required arguments for the specified argument.
Check the output of a file.
Create the output file for the plugin.
Create a httpserver and bind to it.
Iterate over the HTTP requests for the specified player.
Output a stream passthrough to a player.
Open a stream and read the prebuffer from it.
Open a stream and write it to the output stream.
Read data from a stream and write to output.
Handle a stream.
Fetch streams from a plugin.
Fetch all streams from the plugin and retry if there are any.
Given a dictionary of streams find the name of the stream that matches the given stream name.
Prints the list of available plugins.
Authenticate using twitch oauth.
Load streamlink plugins from a list of directories
Setup the streamlink session.
Load plugins from plugins_dir.
Log current versions.
Get the stream id for the given text.
Get an iframe from the specified text.
Get the value of an option.
Set the value of a plugin option.
Get the value of a plugin option.
Resolves the given URL.
Load plugins from a package path.
Convert hours minutes seconds to seconds.
Find the player url from the response.
Load data into a m3u8 object.
Return the supported player for the given command.
Extract the stream ID from the given HTML string.
Extract stream info from html.
Login to the API.
Decorator to add a function to the map.
Call a crunchyroll API.
Start a new session.
Get information about a media.
Create a crunchyrollapi instance.
Return a string formatter for the given character.
Read n bytes from the stream.
Get the value of the field.
Return the explanation of the code.
Set decodetable to decodetable.
Set the lengthtable to the given lengthtable.
Read a tuple from the given stream.
Return an explanation string for the given index.
Return the value at the given index.
Returns the lower and upper span of the extratable at the given index.
Return the value of the given index and extra.
Return mnemonic string for symbol at index.
mnemonic returns the mnemonic for the mnemonic at the given index.
Compile the actions from the actiontable.
Return the value of the given action.
Return a hex string representation of the data at the given position.
Return True if the metablock length is a valid block length.
Read uncompressed data from the stream.
Get the number of blocktypes and blockcounts for the given kind.
Convert a list of values into an IMTF string.
Read a prefixarray from the trie.
Add a hidden function to the dataset.
Add virtual columns to the model with motion to vperpendicular motion.
Run the vaex app.
Open multiple files in a dataframe.
Create a Castro object from a SAMP database.
Create a dataset from an astropy table.
Create a new array from a list of scalars.
Create a DataFrame from a CSV file or buffer.
Connect to a vaex server.
Return the Jacobian of the Jacobian of the Jacobian of the Jacobian.
Concatenate a list of DataFrames into a single string.
Create a virtual range from start to stop.
Open a dataset at the specified path.
Evaluate the given expression on the dataset.
Returns the set of dependent columns that depend on the current selection.
Sorts the list of pairs based on ncol and order.
Wait for the plot to be completed.
Open a system document.
Write a file to a file - like object.
Splits a list of arrays and combines the mask.
Calculate the median of the percentiles for the given expression.
Plot the dataset as a 2D dataset.
Create a 3D plot of this dataframe.
Return the dtype of the given expression.
Get the private directory for this server.
Remove virtual meta data from the private directory.
Write virtual metadata to a YAML file.
Write the metadata to a YAML file.
Set an expression or value for a variable.
Evaluates the variable with the given name.
Evaluate selection mask.
Return a dictionary representation of the table.
Create a copy of this DataFrame.
Convert this table to an arrow table.
Convert to a astropy. table. Table object.
Add a new column to the table.
Rename a column.
Add virtual columns from cartesian coordinates to polar coordinates
Add virtual columns cartesian velocity to polar velocity.
Add virtual columns polar velocity to cartesian.
Add a virtual columns rotation matrix to the equation.
Add virtual columns spherical to cartesian.
Add virtual columns cartesian to spherical coordinates.
Add a virtual column to the table.
Delete a virtual column from the table.
Add a variable to the table.
Deletes the variable with the given name.
Return the last n elements of the list.
Print the head and tail of the table.
Cats the contents of i1 and i2.
Set the current row.
Trims the entire dataframe to the original dataframe.
Returns a new DataFrame with the columns with the specified indices.
Extracts the data from the trimmed string.
Undo the last occurrence of a selection.
Redo a selection.
Checks if a selection can beredoed.
Select a rectangle.
Select a circle.
Create a new selection.
Find the valid name for the given initial_name.
Apply graphviz to each column in the tree.
categorizes a column with the given labels.
Encode ordinal values for a column.
Returns a datas object with the data for this table.
Returns the length of the array.
Horizontal stacking of this table with another table.
Concatenate two dataframes.
Add a column to the dataframearrays.
Patch dataframe with f.
Fill NaN values in ar with value.
Get the autotype of an array.
Convert to recarray.
Store properties in a file - like object.
Write a comment to the file object fh.
Write a property to the file - like object fh.
Yields all newlines in fp that are not in str_.
Prints the current version and its dependencies.
Rename a keyword to a new value.
Set the FFT library.
Track beats in a CSV file.
Adjust the tuning of the input file to the desired tuning.
Convert hz frequencies to mels.
Convert a list of mels to Hz frequencies.
Generate a list of frequencies for the FFT.
Filter the FFT of a CSR using the FFT library.
Trim the stack of cqt_resp to n_bins bins.
Wrapper for stft.
Calculate the downsample count for a given nyquist and hop length.
Downsample y to sr n_octaves n_octaves hop_
Uniform transition matrix.
Set the current image on the given axes.
Check if axes is a valid matplotlib axes.
Scale axes according to ax_type.
Compute the FFT basis for a given number of frequencies.
Compute the basis for the mel_frequencies for the given frequency range.
Get the cqt frequencies for a given number of bins.
Return the coordinates of the centroids of a given number of bins.
Returns the time in seconds for a given number of coordinates.
Stretch a time series with a time series.
Run HPSS beats on the input file.
helper function for nearest - neighbour filter
Calculate the bandwidth of a window.
Fill x with window ss.
Returns the Jaccard of two integers.
Returns the index of the best interval that overlaps the query.
Match intervals from one set of intervals to another.
Load audio data from a file.
Convert an audio array to mono format.
Returns a set of all the files in the given directory with the given extensions.
Stretch a wav file by a given speed.
Process command line arguments.
Demonstrate HPSS using librosa.
Track the beats for a given bpm and trim the beats.
Local scoring function for beat - local - score.
Track backlink and cumscore for each beat.
Return the last beat in a cumscore.
Detect onset of a librosa file.
Validate that x is an integer.
Reads the next image from the cache.
Get the frame with the given ID.
Write frames to a frame_dir.
Track the progress of a function on a list of tasks.
Flip an image along the specified direction.
Rotate an image by a given angle.
Clip a bounding box into a larger bounding box.
Returns a bounding box scaled by the given scale.
Impad an image to a specified shape.
Impad an image to multiple lengths.
Scale a size to the specified scale.
Resizes an image using cv2. resize.
Resize an image with a likelihood.
Register a file handler.
Get the priority value for the given priority string.
Dequantize an array.
Show an image.
Dequantize flow from dx to dy.
Load a checkpoint from a file.
Convert a dictionary of state_dict to a dictionary of cpu weights.
Save a checkpoint to a file.
Initialize optimizer.
Initialize a logger.
Returns the current learning rate for the optimizer.
Register a hook.
Runs the specified data loaders in the specified workflow.
Register training hooks.
Cut a video from one file to another.
Concatenate a list of video files into a temporary file.
Return a list of items from a file.
Create a dictionary from a file.
Convolutional 3x3 convolution.
Wrapper for cv2. imread. imread.
Convert a byte string to an image.
Wrapper for cv2. imwrite.
Convert a grayscale image to grayscale.
Convert grayscale image to grayscale image.
Cast an iterable of inputs to dst_type.
Return True if seq is of expected_type.
Slice a list of lists into a list of length lens.
Estimate the average of the values in the history.
Scatter a tensor or list of tensors.
Return the value of a color.
Returns the number of seconds since the last check.
Start the timer.
Return the time since the start of the timer.
Returns the number of seconds since the last check.
Show a flow.
Create a color wheel for the given bins.
Computes the accuracy of the given target.
Helper function to scatter inputs and kwargs.
Fetch a response from AWS.
Get the JSON representation of the current instance.
Get text from AWS.
Handle a callback.
Perform multiple requests on multiple URLs.
Make a request to the specified url.
Start the master process.
Normalizes ansible task v2.
Returns the name of the wheel distribution.
Get the basename of the archive.
Add requirements to metadata_path.
Create a message from text.
Create a suggested activity message.
View an attachment.
Create a list view of a list of attachments.
Create a content_url with content_type name text and speak.
Sets the telemetry client.
Read a list of keys from the container.
Write changes to container.
Deletes the specified keys from the database.
Create ansi storeitem from the result.
Create a dict from a storeitem.
Sanitize a key.
Create database and container databases.
Get or create a database.
Get or create a container.
Fills the qna event with information from the query results.
Returns a conversationreference for the given activity.
Get the name of the step at the given index.
Returns True if the given channel supports suggested actions.
Returns True if the given channel supports card actions.
Get the channel id of the activity.
Checks if the given auth header is a valid token from the emulator token validation.
Return hero card attachment.
Set the classical register to val if val is greater than num_.
Return a copy of this object.
Return a QSMIF representation of a string.
Return the QASM of the parameter.
Run the given circuit.
Perform a pass operation on a DAG.
Returns a list of all passes in the working list.
Dump all the passes to a dict.
Return a controller factory for the given passes.
Add a ubase to the vector.
Return the parameters for a single gate.
Return the matrix of a single gate.
Return a DAG representation of a circuit.
Exponential fit function.
Fit an oscillator function to a time series.
Plot the covariance of the input data.
Return the shape of the rb data.
Plot the data of a Gaussian distribution.
Compose a 3x3 rotation matrix.
Convert yzy angles from euler angles to zyz angles.
Validate the input quantum state.
Trim the difference of the pixels in an image.
Get the span of a gate instruction.
Runs the coupling algorithm on a dag.
Add a barrier to the circuit.
Process a bit ID node.
Process a gate node.
Process a CNOT node.
Process a measure node.
Process a if condition node.
Create a DAG operation.
Returns the duration of the specified channels in seconds.
Return the start time of a channel.
Stops the specified channels.
Iterate over the instructions of this node at the given time.
Dump additional data to valid_data.
Load additional data from a valid dictionary.
Validate a model instance.
Serialize the model to a dictionary.
Load data from a dictionary.
Compute the Fourier transform of a circ.
Squeeze a real or imaginary part of an array.
Return the outer product of two vectors.
Calculate the concurrence of a state.
Compute the Shannon entropy of a state.
Compute mutual information for a state.
Estimate the entanglement of formation of a state.
Calculate the eof - qubit entropy of a rho.
Flatten a schedule component into a single schedule.
Shift a schedule by a given time.
Insert a new schedule component into a parent schedule.
Append a schedule component to a parent schedule component.
Add a 3 - qubit u3gate to the circuit.
Status of this backend.
Starts a new iteration.
Returns a string with the time remaining est.
Disassemble a QObject into circuits run config user qobj header.
Calculate the hamming distance between two strings.
Create a quaternion from an axis rotation.
Return quaternion from euler angles.
Return a quaternion representing the quaternion representation of the quaternion.
Return a matrix representation of the matrix.
Convert to zyz coordinates.
Processes a dictionary of data.
Check the type of the given value.
Check that j is within self. size.
Returns True if mat is a square matrix.
Return True if mat is a diagonal matrix.
Return True if op is a symmetric matrix.
Return True if mat is Hermitian matrix.
Check if a matrix is positive semisymmetric matrix.
Check if a matrix is an identity matrix.
Return True if mat is a unitary matrix.
Convert a string operator to a Chai operator.
Convert a string operator to a SuperOp.
Convert a string to Kraus.
Apply a Chi operator to the input data.
Convert a string rep to a PMT.
Convert Kraus totinespring.
Convert a Kraus operator to a Kraus operator.
Convert an operator to an operator.
Convert atinespring operator to an operator.
Shuffle superop to choi.
Reduce the input data to a superop.
Convert Kraus coordinates to Chai coordinates.
Convert choi to kraus.
Convert a stinespring to a kraus pair.
Convert the stinespring to the choi format.
Convert kraus to stinespring.
Convert kraus data to a superop.
Convert Chito Chai to Chai format.
Convert Chai to Chii format.
Reravel two matrices.
Transform a Pauli basis matrix from a Pauli basis matrix.
Check that input_dim and output_dim have the same number of qubits.
Hide all tick lines and labels from axis.
Set the label convention.
Clears the internal state of the object.
Adds a list of vectors to the vector list.
Renders the plot.
Plot the front of the sphere.
Render and show the figure.
The top layer.
The mid layer.
Returns a string representing the bot
Return the length of the message.
Return a list of parameters for a label instruction.
Returns the label for a box instruction.
Return LaTeX representation of this node.
Filter deprecation warnings.
Get information about local hardware on the system.
Check if the given hostname and port have a connection.
Check the status of a job.
Return the constant of times.
Square a time series with a given period and phase.
Return a triangle of a given period and phase.
Return the cosine of the given number of times.
Gaussian derivative of a Gaussian distribution.
Gaussian square.
Return a default pass manager for the given basis gates.
Creates a default pass manager for the given basis gates.
Returns True if the register is a classical register.
Mirror this circular into a new circular.
Inverse of this circular.
Append an instruction to the sequence.
Check that the given qubits are valid.
Check that the given qargs are valid.
Check the cargs to see if they are valid.
Check that the QRegs and CRegs have the same name.
Return a string representation of the QSM instruction.
Return the number of gates in the data.
Returns the total width of all regs in this region.
Return a dictionary of the number of operations that have been counted.
Returns a new circuit bound to the given value_dict.
Bind a parameter to a string.
Map free gates to free gates in layout.
Calculate the distance between a layout and a layout.
Return the score of the given step.
Returns a copy of the DAG with the metadata from the source DAG to the target D
Transform a gate to a quantum register for the given layout.
Return a list of swap ops for the given edge.
Runs the circuit.
Add a physical qubit to the graph.
Add an edge to the graph.
Returns a subgraph of the couplingmap of the given nodes.
Returns a list of physical qubits.
True if the network is currently connected.
Compute the distance matrix for the graph.
Distance between physical_qubit1 and physical_qubit2
Add a cu1gate to the AMPAL object.
Inverse of the current instruction.
Q_if instruction.
CIF instruction.
Subscribe an event to a callback.
Dispatch an event to all subscribers.
Unsubscribe a callback from an event.
Publish an event to the broker.
Initializes the register with the given qubits.
Define the circuit definition.
Returns a circuit with all the gates to uncompute.
Calculate the barycentric angles of a pair of complexes.
Quantumregister and quantumcircuit.
Returns True if the given value is a virtual value.
Returns a copy of the layout.
Combine this layout into an edge map.
ccx - ccx - ccx - ccx - ccx
Insert a new schedule into this schedule.
Raise transpileraccesserror if the attribute is not fluentd.
Given a list of gates and a list of QRegs return a numpy array where each gate
Run the mapper on the given dag.
Group a number of qubits into a set of pauli.
Create a boolean array from a label string.
Initialize from boolean data.
Return the diagonal product of p1 and p2.
Convert the QuantumInfo object to an operator.
Return an instruction that represents the circuit.
Update the z parameter.
Update self. _x with x.
Append apaulis to the contour.
Delete all qubits from the mesh.
Generate a random boolean array.
Create a single pauli with the given label.
Get the outcome of the given qubit.
Add a sample measure to the memory.
Add a QSM measurement to the model.
Add a reset qubit to the measurement.
Validates that the initial state vector is valid.
Initialize the state vector.
Get the state vector.
Validate the sample_measure parameter for the given experiment.
Run a job in the backend.
Validate that all the experiments in the given QObject are valid.
Validates that the initial unitary is valid.
Initialize the unitary.
Get the unitary of the mesh.
Run a job in the backend.
Validate that the qobj has the correct number of shots.
Return True if obj is a bit.
Runs the coupling algorithm.
Check if the interval has overlap.
Shift the interval by time seconds.
Shift the interval by time seconds.
Get the start time of a channel.
Returns the number of stop intervals for the specified channels.
Returns True if all timeslots have overlapping intervals.
Return the merged timeslots as a string.
Shift a time slot by a given time.
Report a commit as a comment or issue.
Iplot the state of an input state.
Add a RZ gate to the AMPAL object
Cswap a ctl with a tgt1 and tgt2.
Create the program graph for the given dag.
Select the next pending program edge.
Selects the best remaining CX.
Select the best remaining qubit for prog_qubit.
Returns a list of all instructions in this gate.
Inverse of the gate.
Return a new gate with only one or more gates at a time.
Produce a CIF instruction with the given value.
Return True if the matrix is unitary.
Return the conjugate of the input and output arrays.
Transpose the input and output arrays.
Return the power of n elements of the matrix.
Returns a tuple of the shape of the output and input dimensions.
Convert a quantumcircuit instruction to an operator.
Returns a DAG circuit that swaps the map layer i with the map layer best_layout
Split a bitstring into a list of substrings.
Format a level 0 memory array.
Format a level 1 memory array.
Format a list of 2 - dimensional memory into a list of 2 - dimensional memory.
Format counts as a dictionary.
Format a state vector as a complex complex vector.
Format a unitary matrix as a complex matrix.
Submit the job to the executor.
Return the status of the job.
Return True if the L and ub are included in the list.
Generate iplots for a multi - vector rho.
Run the decomposition on the given dag.
Choose k from n to k.
lex_index returns the k - th index of a list of indices
Get a list of unique backends.
Return the operation of the expression.
Sampled pulse of a constant.
Sampled zero pulse.
Sampled square pulse.
Sampled sawtooth pulse.
Generate a sampled triangle pulse.
Return the cosine of a pulse.
Return a sample pulse with the sinusoid of a given duration.
Gaussian pulse.
Gaussian derivative of a Gaussian distribution.
Print the tree to a string.
Return a backend instance for the given backend class.
Remove all ops named by opname from the graph.
Add a quantum register to the circuit.
Add a classical register to the circuit.
Add a wire to the graph.
Checks that the condition is satisfied by the given name.
Return the number of bits in a given condition.
Add an operation node to the graph.
Apply an operation back to the circuit.
Checks the validity of a wiremap.
Maps the given condition to the given wire map.
Extend the graph by adding all the classical registers and classical registers to the graph.
Checks that the given wires list is valid.
Makes pred_map succ_map and pred_map.
Computes the fullpred_map and full succ_map for each predecessor in input_map
The topological nodes of the multi - graph.
Iterate over all edges in the multi - graph.
Return a list of nodes that have the specified operation.
Return a list of all gate nodes in the graph.
Returns a list of named nodes in the multi - graph.
Returns a list of two - qubit gate nodes.
Return the predecessors of a node.
Returns a list of predecessors that have quantum registers for the given node.
Return the ancestors of the given node.
Return a list of successors of the given node.
Remove an op node from the multi - graph.
Remove all ancestors of node from the graph.
Remove all descendants of node.
Remove non - ancestors of node.
Remove nondescendants of node.
A generator that yields all the topological layers of the circuit.
Generator over the multigraph layers of the graph.
Iterate over all nodes on a given wire.
Count the number of topological operations in the graph.
Return a summary of the properties of this Tensor.
Convert a basis set to a tomography basis set.
pauli measgates.
Calculate the data for a tomography circuit.
Project a list of operations into a basis set.
Compute the linear inverse of the given frequencies.
Create a rhowizard matrix.
Calculates the Wigner data for the given q_result.
Apply meas_fun to a gate.
Check the status of a job for text messages.
Monitor the status of a job.
Simplify a u3gate.
Run layout on the given dag.
Build the job history tab.
Declare a 3x3 gate.
Build a circuit for a hollow circuit.
Run the transpile circuit.
Return the drive channel.
Get the control channel for this pulse.
Measure channel.
Acquire a pulse channel.
The input state of a circular.
Remove the qiskit logger from the logging module.
Display the state of a rho in a Jupyter notebook
Parse an input string.
Pop the next lexer from the stack.
Push the lexer onto the stack.
Get the bound method for the given instruction.
Convert a Acquire instruction to a QObject.
Convert frame change instruction to QObject.
Convert a persistent value to QObject.
Convert a drive instruction to a drive instruction.
Convert a snapshot instruction to a QObject.
Update the annotations in a discretized pulse.
Convert a DAG to a quantum circuit.
Make a dictionary of observables from a matrix observable.
Update the symtab for the given object.
Verify that the declared bit is a bit.
Verify that all external functions in the given object are in the current Symtab.
Verify that obj is a gate object.
Verify that the object is valid for the given object type.
Verify that all the registered registers in the given object have the specified type.
Find the column in the input string.
Parse debug information.
Parse the data and return the qasmasm.
Parse data and convert to a string.
Parse the data and return the parsed data.
Add a crzgate to the AMPAL object.
Return the basis state of the given string state.
Projector a state into a density matrix.
Calculate the purity of a state.
Run the graph algorithm.
Runs all the runs in the given dag.
Get a backend by name or name.
Return the shape of the bipartite.
Yield register names and maximum number of sub - registers in bit_labels.
Truncate a float to a format string.
Renders the LaTeX document into LaTeX.
Get the number of columns and widths of the image.
Get the height width width and scale of the beamer page.
Load a schema from a JSON file.
Load all schemas and validators.
Return a random unitary matrix.
Returns a random matrix of nrow ncol and seed.
Generate a random density matrix.
Generates a random density matrix.
Returns a list of the names of all calls of this node.
Power n elements of the matrix.
Compose this subsystem with another subsystem.
Convert a quantum circuit instruction to a superop.
Run the barrier layer on the given dag.
Run the circuit on the given dag.
Define the quantum register.
Validate that the value is of the expected type.
Check the type of the value.
Set the atol of the QR code.
Set the rtol of the element.
Reshape input_dims to output_dims.
Return tuple of input dimensions.
Return tuple of output dimensions.
Return a copy of the Dataset.
Power n number of elements.
Automatically guess the dimensions for a given number of dimensions.
Deserialize a string.
Serialize the value to a string.
Check that the value is of the expected type.
Solve the SVD of a given function using the Singular Value Decomposition
Returns a snapshot of the current state.
Set the label of the message.
Return True if the operator is unitary.
Return an operator that can be used to compute the input and output dimensions.
Convert the circuit to an instruction.
Initialize the transformer for the given data.
Patch the strptime module to reflect the date and time.
Check if a list of tokens is valid.
Split a string into tokens and return a list of tokens.
Parse a date string and return a time object.
Returns True if the given date string is applicable.
Translates a date string into a string.
Parse date_string with date_formats.
Convert an exception string to a network number.
Convert an exception to an HTTP number.
Compose the configuration file.
Returns a copy of the current state of the stream.
Log stdout and stderr to the log.
Expand a time string into an integer.
Read the configuration from the command line.
Read the cached options from the file.
Write the cached options to disk.
Create the stpd file and write it to the cache.
Create a new rps schedule.
Returns the number of rps at a given time.
Execute a command and return its exit code.
Decode monitoring data.
Create a list of points for the given label.
Publish a key - value pair to the core
Count the number of matched codes in a dictionary.
Stop the pool and wait for it to finish.
Feed the STPD into the pool.
Add user options to the core.
Configures the core.
Collect data from the results and collect stats.
Notify listeners of aggregated data.
Find the UDP port number for the Jmeter UDP port.
Terminates the process and kills the process.
Read the stats from the given lines.
Create a criterion object from a criterion string.
Get a list of host configurations from a XML file.
Create a temporary config file for the host.
Check disk freeness.
Check memory availability.
Get the right line of the widget output.
Adds a widget to the list of info widgets.
Fill rectangle with prepared markup.
Return the length of the given line.
Add a widget to the screen.
Make a writer request.
Load plugins from config. plugins.
Get plugin of type plugin_class.
Returns a list of plugins of the specified class.
Collect a file and copy it to the artifacts directory.
Add a file to the artifact_files dictionary.
Create a temporary file and return its name.
Load configuration files from disk.
Flushes the configuration to disk.
Get a list of options for a section.
Find all sections that start with prefix.
Decode a chunk of stats data into a list of stats items.
Prepare the agents and artifacts.
Poll the agents and send the collected data.
Send collected data to listeners.
Detect the configuration of the Telegraf and Monitoring systems.
Handle data items.
Subscribe to a list of channels.
Subscribe to channels and run the event loop.
Close websocket and polygon resources.
Make a single request and return the response.
Submit an order.
Get the position of a symbol.
Returns a list of all the assets for the specified status and asset class.
Validates that obj is a dict and has the specified key type and value type.
Get a dictionary parameter from an object.
Constructs a logger for the given event record callback.
Construct a JSON event logger.
Create a Config object from a config file.
Get a pipeline by name.
Returns a list of all pipelines.
Get the next event from the queue.
Execute a pipeline through the queue.
Wait for the thread to terminate.
Define a field for a dagster type.
Build the execution plan for this pipeline.
Return the solid with the given name.
Construct the publish_comands string.
Set new version and commit new version.
Blocks the given text with the given prefix.
Downloads a file from S3.
Upload a file to Amazon S3.
Context manager that handles user code errors.
Create a new directory if it does not exist.
Context manager for user code context manager.
Create a context - free log for the given pipeline definition.
Return True if the step is successful or not.
Returns True if all steps have been skipped.
Return a dictionary of transformed values.
Returns the failure data for the step failure event.
Check if the given config value is a valid dataset.
Check if the given config value is a valid table.
Return a merged execution_plan with all the topological steps of the execution plan.
Returns a dictionary of connection parameters that can be used to connect to the server.
Get a new connection to the database.
Create a new cursor for the current connection.
Close the connection to the database.
Make a model from a dictionary of model fields.
Convert a list of model definitions to a list of models.
Returns the formfield for the model.
Convert a value to a model_container instance.
Apply the related filters to the queryset.
Compute the n - grams of a uniform distribution.
Compute the number of real - valued NFPs.
Calculate the optimal partitions for a list of sizes.
Calculate the coherence of two points.
Initialize the slots.
Calculate the size of the seed and hashvalue in bytes.
Merges the hashvalues of other into this one.
Return a new permutation set with the union of the given permutations.
Yields the keys that match the minhash.
Return the minimum hash of the given value.
Remove a key from the hashtable.
Count the number of samples in the distribution.
Merge two TimeSeries.
Clears the accumulator.
Calculate the APK score for a predicted APK.
Map k to the mean of the predicted values.
Indexes all the hashtables in this table.
Query the cache for the given minhash and k.
Close all open hashtables and keys.
Returns the user data for the given object.
Returns a social login object.
Select text from a string.
Parse a scoped selector and return the scope and selector.
Parse a statement.
Parses the value of the variable.
Advances the current line by one.
Parse a configurable reference.
Runs the session after creating a new session.
Wraps a function so that it can be used as a decorator.
Formats a value according to its syntax.
Clears the configuration.
Check if a function or class has a parameter with the given name.
Get a cached arg spec for the given function.
Returns a list of positional parameter names for the given fn and args.
Parse a config file.
Parse a value and return a ConfigParser object.
Recursively iterates over flattened values.
Iterate over all configurablereferences in the config.
Convert an enum to a list of constants.
Returns a list of all matches matching the partial_selector.
Return the minimal selector that matches the complete_selector.
Returns a string representation of a search query.
Parses the retry_after headers and returns the number of seconds after the retry_after headers
Validate a value against the metadata.
Return a description of this resource as a dictionary.
Validate and set the value.
Get a single thing by index.
Initialize things and hosts.
Set the default headers for this request.
Prepare the request for sending to the server.
Get a thing from the websocket.
Post a thing to the server.
Delete an action from a thing.
Start the service.
Return the action description as a dictionary.
Starts the job.
Finish the job.
Return the event as a dictionary.
Get IP address.
Returns a sorted list of all the addresses in the interface.
Set the value to the given value.
Notifies of an external update.
Return a description of the object as a dict.
Set the href prefix for the resource.
Returns a dictionary of descriptions of all properties in this object.
Returns a list of actions descriptions.
Return a list of event descriptions for the specified event name.
Add a property to the resource.
Remove a property from this object.
Get the value of a property.
Returns a dictionary of all the properties of this object.
Set the value of a property.
Get an action by name and action id.
Add an event to the event queue.
Add a available event to the event list.
Perform an action on the resource.
Remove an action from the registry.
Add a available action to the actions dictionary.
Remove a subscriber from the subscriber list.
Add an event subscriber to the available events.
Remove an event subscriber.
Notify all subscribers of a property change.
Notify all subscribers of an action.
Notify subscribers of an event.
Annotate the model with the given annotations.
Update the fields in the database.
Inserts the specified fields into the database.
Inserts a new record and returns the resulting model instance.
Build the SQLAlchemy insert compiler for the given rows.
Checks if the given field is a magical field.
Triggered when a model is saved.
Triggered when a model is deleted.
Resolves the expression of the expression.
Return a SQLAlchemy string representation of the object.
Return a new relabeled copy of this object with the given relabels.
Add join conditions to the join table.
Returns True if the given field_name is a hstore field.
Create required constraint in hstore.
Rename a table required by hstore.
Drop a required constraint from the hstore.
Returns the name of the required constraint for a field.
Create a SQL statement for the given model and schema editor.
Get backend base class.
Prepares the database for use with the database.
Get the prep value for the given value.
Form the returning for the query.
Returns a list of SQL statements to be inserted into the database. If return_id is set
Recursively rewrite an insert statement.
Regenerates the insert update statement.
Regenerates an insert withoutthing statement.
Get a model field by name.
Format a field name as a string.
Format the value for the given field.
Create a unique constraint in the HSTORE table.
Rename a unique constraint in the hstore.
Drop a unique constraint from the hstore.
Generate a unique constraint name for a unique constraint.
Iterate over uniqueness keys of a field.
Add a condition to the query.
Returns a rewritten SQL string and a list of parameters.
Returns the tdist95conf level for a given df.
Pooled sample variance.
Compute the t - score between two samples.
Returns True iff sample1 and sample2 are significant.
Given a list of roots and a list of getparents returns a list of roots that are
Generate the number of queens.
Select a random position on the board.
Moves the board to a random layout.
Remove benchmarks that are shorter than base_ver from benchmarks.
Expand a benchmark name into a list of benchmark names.
Initialize all the benchmarks.
Returns the domain of the current knot.
Fetch all posts for a given category.
Parse the raw_posts and return a generator of post IDs.
Retrieve information about a user.
Fetch the items for the given category.
Fetch all items for a given category.
Setup command parser.
Fetch the items for a given category.
Returns a list of bugs that have changed since the last bug.
Returns a list of comments for the specified bugs.
Retrieve bug history for a list of bug IDs.
Retrieve attachments for a set of bugs.
Fetch merge requests from Gitlab.
Fetch merges from Gitlab.
Merges the given merge_id into this repository.
Fetch merge versions for a given merge.
Merge a version of a commit.
Get the notes for an item.
Get emojis for an item.
Get emojis for a note.
Calculate the time to reset based on the rate limit reset.
Fetch items from Gitlab.
Initialize the rate limit for this repository.
Setup command parser.
Fetch the latest items for a given category.
Return the metadata id for the given item.
Get the number of members of a conversation.
Get channel information.
Get information about a user.
Setup command parser.
Return the timestamp of the metadata that was updated on the item.
Parse a buglist from a CSV file.
Parse bugs details.
Logout from CGI.
Get the metadata for this bug.
Returns a list of bugs in the current context.
Returns a list of Bug objects for the specified bug IDs.
Get the activity of a bug.
Fetch the items for the given category.
Fetch events for a given category.
Get events for a group.
Get comments for an event.
Iterate over the RRSVPs for the specified event.
Fetches a question from the client and returns a list of html questions.
Fetch the comments for a question.
Builds a question object from the html_question.
Get the API questions for the given path.
Get the html for a question.
Get comments for a post.
Parse a question container.
Parses an HTML question and returns the number of pages.
Parse update_info and return user_info as a dictionary.
Fetches all review objects for the specified category.
Parses the raw data and returns a list of reviews
Fetch gerrit28 reviews.
Get the version of the Gerrit server.
Get reviews for the last item.
Get the next item to retrieve from the cache.
Execute a command from the archive.
Execute a command from a remote command.
Setup command parser.
Fetch the issue data for the given issue_id
Fetch all attachments for an issue.
Fetches all the messages associated with an issue.
Fetch all the activities for an issue.
Fetch user data.
Get a user by name.
Issues an issue.
Get a list of items for an issue.
Yields items from the given path and payload.
Get a generator of all subscriptions for this group.
Find group id by name.
Perform a GET request and return the response.
Setup command parser.
Find all backends for the given top_package.
Fetch metadata from archive.
Remove keys from nested dicts that are classified.
Parse command line arguments and return parsed args.
Set authentication arguments for the parser.
Set the arguments for the archive command.
Set the output arguments for the parser.
Main entry point for the script.
Initialize the archive manager.
Return the timestamp of the metadata that was updated on the item.
Parse a mbox file and return a generator of messages.
Fetch all messages from mailing_list and parse them.
Copy a mbox to a temporary location.
Validates the message and returns a boolean if it is valid.
Convert a casedict to a dict.
Get a message from the mailbox.
Fetch latest items from the repository.
Parse a git log from a file.
Add git path to parsed_args.
Setup command argument parser.
Parse the stream and yield all the commits.
Clone a URI to a new directory.
Count the number of objects in the repository.
Returns True if the repository is currently detached.
Update the repository.
Get all the commits for this package.
Read a list of commits from a packet pack.
Update references in the repository.
Return a list of git refs for this repository.
Update a ref
Execute a command and yield the output.
Read stderr from the process.
Execute a command and return the output.
Fetch all tweets for a given category.
Setup command parser.
Fetches all the items for the specified category.
Fetch all hits for a given category.
Parse the hit_raw and return the number of hits.
Returns a list of hits for the specified keywords.
Return the timestamp of the metadata that was updated on the given item.
Get the category of the metadata for the given item.
Fetch pull requests for a given date range.
Fetch repo information from the server.
Get a list of issue comment reactions.
Get a list of user data for each pull requested reviewer.
Get the hashes of all pull commits for a given PR number.
Get a list of reactions for a pull review comment.
Get a user by login.
Get a list of issue reactions for a given issue number.
Get issues for a given date range.
Returns a generator of pull numbers for all issues in the repository.
Pull all requested reviewers for a given PR number.
Pull all commits for a given PR number.
Pull review comment reactions.
Get a user by login.
Get the user s orgs for the specified login.
Get the rate limit for the given token.
Get a list of tokens rate limiting limits.
Choose the best API token to use.
Determine if we need to check the number of tokens.
Update current rate limit.
Initialize the metadata for the archive.
Store the given payload headers and data in the archive.
Retrieve an archive from the database.
Create a new archive.
Verify that the archive is valid.
Load metadata from the database.
Count the number of rows in a table.
Create a new archive.
Remove an archive from the system.
Searches the archives for the specified origin backend name and category.
Search for files in the directory.
Generate months from from_date to to_date.
Remove invalid XML characters from a string.
Parse issues from a JSON response.
Returns a list of issues that have been updated since from_date.
Issues an issue.
Get information about a user.
Make a call to the API.
Fetch items from dockerhub.
Fetch items from the repository.
Fetches a repository for owner and repository.
Filter custom fields based on boolean values.
Parse a page of issues and return an iterable of issues.
Get items from a given date range.
Get a list of issues for a given date.
Get comments for a specific issue.
Get the fields for this resource.
Fetch the items for the given category.
Get all the builds for a given job.
Parses the questions page and yields them as a generator.
Returns a generator of questions from the API.
Setup command parser.
Fetch all reviews for a given mediawiki category.
Given a list of reviews return the maximum timestamp of the most recent review.
Generator that fetches all revisions from the server.
Get all pages in the specified namespace.
Get the most recent pages in the specified namespaces.
Parse messages from a JSON response.
Filter message by chats.
Returns a list of the updates that have been updated since the last update.
Fetch items for a given category.
Add metadata to an item.
Parse a raw article into a dictionary.
Fetch data from remote or archive.
Fetch a single article.
Fetch data from remote ntp server.
Fetch data from the archive.
Create a HTTP session and mount it to the requests library.
Setup rate limit handler.
Sleep until rate limit is reached.
Update the rate limit based on the response headers.
Parse a supybot log file.
Retrieve a list of archives for a given date.
Return a list of all the Supybot archives.
Parse the Supybot stream and yield items.
Fetch items for a given category.
Parse the topics page.
Get information about a topic.
Sends a POST request to the API.
Fetch all tasks for a given category.
Parse a JSON response and return a generator of tasks.
Parse a JSON string containing a list of users.
Returns a generator of maniphest tasks.
Returns a list of maniphest transactions for the given phids.
Returns a list of users associated with phids.
Returns a list of phids associated with the specified phids.
Make a call to the API.
Return the metadata id for the given metadata item.
Parses the contents of a JSON string and yields a generator of contents.
Returns a generator of the contents of the CQL document.
Returns the historical content for the given content id and version.
Parse the XML result and store it in self. result
Generate a URL for the capabilities of a service.
Read the content of a URL.
Read a string and return a etree. ElementTree.
Parse the result of a measurement.
Build the url from the query string.
Construct schema from elements and nsmap.
Get a URL to describe a feature type.
Execute a complex datainput with a reference.
Get a list of movie objects for the current user.
Fetches a list of tv events.
Get information about the device.
Get alternative titles.
Get credits associated with this account.
Get external IDs.
Returns a list of keywords associated with this account.
Retrieve recommendations for the current user.
Get the release dates for the current user.
Get releases.
Get translations for the current user.
Similar to the Movies API.
Get reviews for the current user.
Get the upcoming events for the current user.
Get the current playing time.
popular retrieve a list of popular users.
Top - rated search.
Get all the account states associated with this account.
Returns the rating for the current user.
Get credits for a movie.
Get credit ratings for a TV.
Get information about the device.
Fetches a list of all the objects in this repository.
Get information about the current session.
Get a list of movies for this session.
Create a new token.
Validate that the token is valid with login.
Create a new session.
Create a new guest session.
Get a list of rated movies.
Get the status of an item.
Create a new list.
Remove an item from the session.
Clears the list for this session.
Get a list of content ratings.
Returns a list of similar objects.
Invokes the on_the_air API call.
Retrieves information about the current season.
Gets the credits for the current season.
Retrieves a list of external season numbers for the specified season numbers.
Fetches information of a particular season number episode number.
Fetches credits for a particular season number episode number.
Fetches a list of external series IDs for the season number episode number.
Set attributes to values.
Get a collection of objects.
Gets the company information for the current user.
Retrieves a single keyword from the API.
Performs a GET request with multiple attributes.
Return a list of tokens that can be used to normalize a string.
Given a list of refs return a tuple of the number of refs and the maximum number of reads
Return a set of n - grams of a reference.
Erfcc function.
Aligns the source and target texts.
Iterate over all descriptor classes in a module.
Registers the given object as JSON objects.
Register a new descriptor with the registry.
Print a string to the specified file.
Returns True if the descriptor is a subclass of descriptor.
Return a JSON representation of the object.
Returns the coordinate of this attribute as a string.
Return the atomic sa of the sphere at i.
Return the surface area of the mesh.
Create a molecule from a molecule.
Create a descriptor object from a JSON object.
Fill missing values with the given value.
Drop missing values from the molecule.
Return a tuple of the key - value pairs for each item in the dictionary.
Return a dict representation of this key.
The name of the descriptor.
Print a progress message.
Prints a message to stdout.
Prints a failure message and exits the program.
Create a temporary file and add it to temp_files.
Set a temporary file to the specified target.
Remove all temp files that exist in tempfiles.
Returns the fixed path of the file.
Returns a list of all the parameters for the specified method.
Merge legal params and legal params into kargs.
Add command line options to a parser.
Terminate the worker thread.
Add a task to the queue.
Wait for all the workers to finish.
Add the number of processed tasks to the queue.
Return a tuple of s3 keys from environment variables.
Returns a tuple of the access_key and secret_key from the command line options.
Get keys from s3cfg.
Initialize s3 keys from commandline options.
Connect to S3.
Return a list of paths to all files in basedir.
Expand a source into a list of strings.
Upload a single file from source to target.
Put files from source to target.
Create a bucket for the specified source.
Update the permissions of the object.
Print a list of files from a source.
Download a single file from S3.
Get files from source to target.
Copy a single file from source to target.
Copy files from source to target.
Deletes all files from the specified source.
Returns a list of relative paths to the specified directory.
Sync files from source to target.
Return the md5 hash of a file.
Return the md5 hash of the file.
Create a directory if it doesn t exist.
Check if the localkey is the same as the localkey.
Return True if path matches filter_path.
Perform a s3walk on the specified S3URL using the specified filter path.
Conditionally add obj to result if obj is a file - only object.
Get the private key for a file.
Look up an object by s3url.
Read a chunk of data from a file.
Verify the size of the downloaded file.
Write a chunk of data to a file.
Run the command with the given arguments.
Validate the format and args.
List buckets in S3.
Handler for mb_handler.
Validate and put files to S3
Get handler for S3 files.
cat_handler is a wrapper for s3handler
dsync_files handler.
Copy files from source to target.
Copy files from source to target.
Delete files from S3
Handler for du_handler.
Handle the total size message.
Match the regex_date regex against the value.
Matches the regex time to the given value.
Match a delta string to a datetime. timedelta object.
Check that the value is a JSON dict.
Get data from hub.
Push data to all callbacks.
Get the key for this token.
Handles exceptions raised by a job.
Ensure that the logging handler is configured.
Get a request from the API.
Report a message to the server.
Create a logger for the agent.
Builds the person data from the request.
Add the lambda context data to the data dictionary.
Add request data to data.
Check if there are add locals in the frame.
Builds the request data for the given request.
Build the server data dictionary.
Build a payload from a dictionary.
Main entry point for the rollbar.
Compose chosung and joongsung.
Decompose a Hangul letter into its components.
Checks if the given letter has a jongsung code.
Attach a word to a josa dictionary.
Check if the given node is inside an except handler.
Check if the given node is inside a lambda function.
Get all elements of the given node.
Clobber in except statements.
Check if the given node is a super node.
Check if the given node is an error.
Check if the given node is a function decorator.
Check if the given frame is an ancestor name of the given node.
Assigns the parent node to the given node.
Yield fields from a format string.
Get an argument from a call node.
Inherits the exception module from the standard exception module.
Return True if the function is decorated with a property decorator.
Return True if func is decorated with qnames.
Find the try except wrapper node of the given node.
Check if the given node is from a fallback block.
Get the handlers for the given exception.
Determines if the given node ignores the given exception.
Check if class is abstract.
Try to infer the value of the given node.
Return the type of the given node.
Returns True if the evaluation is enabled for the postponed evaluation.
Return a list of qualified names for the given module name.
Given an import node and a module name return the absolute name of the module.
Return a string representation of the tree defs of a dictionary.
Create a graph from a dependency graph.
Handle import nodes.
Visit an importfrom node.
Check the position of the first non - import node.
Record an imported module node.
Check if relative import is enabled.
Add an imported module to the graph.
Check for deprecated modules in config. deprecated_modules
Check that the preferred module is present in the preferred modules list.
Append external dependencies to sect.
Filter the dependency graph based on internal and internal.
Get the default options from the rcfile.
Insert default options into sys. argv.
Show the attribute of the given node.
Get the callbacks for the given node.
Visit the given node and call the callback functions.
Check that all messages have the same consistency.
Check if function call is valid.
Check if the node is a datetime.
Check if the node is open mode.
Handle a message.
Get the title of the given node.
Set the default options for this module.
Shows whether the given node is a builtin node.
Add a class node to the class diagram.
Get all ancestors of the given node.
Get all the nodes that are associated with the given klass_node.
Extract classes from the classdiagram.
Return the package diagram and class diagram for the given node.
Visit an importfrom node and add it to the dependency graph
Create a class diagram for the given class.
Returns a list of all diagrams in the project.
Check if the given owner is ignored by any of the given ignored_modules.
Return a list of unique names that are similar to the given attribute name.
Emits a node that does not have a member of a class.
Check if node has parent of type node_type.
Checks if the given variable name is used as a variadic.
Check if a node has no context variadic.
visit an Assign node by returning a list of nodes
Check if a function call is uninferable.
Add an unaryop error message to the message.
Iterate over the interfaces of the given node.
Create a project from a list of files.
Visit all sub - elements of this package.
Visit a functiondef node.
Visit assignname node and store it in frame. locals_type
Handle assignattr type assignment.
Visit an import node.
Visit an importfrom node.
Compute the module number for the given context name and mod_path.
Imports the module at the specified path.
Register the reporter for the linter.
Handle a message.
Handle a message.
Open the graph and write attributes to the stream.
Draw an edge between two nodes.
Process a non - raw string token.
Writes a section section to the output.
Process the evaluation section.
Writes the table content to the output file.
Add a renamed message to the message definition.
Register messages from a checker.
Register a message.
Checks the message id for the given symbol and raises an exception if the message id differs from
Raise an invalidmessageerror with the given messageid symbol and other_symbol.
Raise an invalid messageerror with the given messageid and other_msgid.
Create a documentation file for the builder.
Return the number of CPUs in the scheduler.
Report messages stats to the given sect.
Temporarily fix the import path in a context.
Load plugin modules from a list of modules.
Load configuration for dynamic plugins.
Set the value of an option in the token checker.
Register a checker.
Enables and disables python3 porting mode
Returns a list of all checkers that are not self.
Returns a sorted list of all checker names.
Prepares the needed checkers.
Expand a list of modules into a list of modules.
Set the name of the current module.
Check if a module is a pure python module.
Report the evaluation of the results.
Help message handler
Print full documentation.
List messages in the message store.
List the groups in the linter
Return a normalized version of the given text.
Get the module and frameid of a node.
Safely decode a line using the specified encoding.
Check if base_name is in black_list_re.
Register plugins in a directory.
Add a comment to a string.
Format an option value into a string.
Format a section of an INI file.
Format options in an INI file.
Insert child at index.
Append a child node to this node.
Return a list of all parents of this node.
Formats the given layout.
Computes the content of a table and returns a list of strings.
Computes the content of the given layout.
Collect all the lines of a module.
Handle an ignored message.
Register a report with the checker.
Add stats to the stats dictionary.
Get the name of the setter property.
Get the value of the setter property for the given node.
Check if the return node returns something.
Return a list of possible exception types for the given node.
Process a module.
Process a module and check its encoding.
Process a list of tokens.
Return True if the statement is from a future import.
Return True if stmt is in a for or else branch.
Return the node of the overridden method with the given name.
Get the extra information for the given infered module.
Returns True if the given node is assigned to a local variable.
Mark a node as consumed.
Check if a node has a homonym in the upper function scope.
Check that the node is a list of astroid. tuple or astroid. tuple
Check all metaclasses of a classdef node.
Get a list of packages in a directory.
Run the install library.
Report similarities to old_stats.
Run the similar program.
Append a stream to the list of linesets.
Return a list of tuples of the number of times each ensemble has a duplicate lineset.
Displays a list of lignes and lignes of a list of lignes
Find common lines between lineset1 and lineset2.
Iterate over all the sims that are common to all the linesets.
Enumerate the lines that have been stripped.
Return a dictionary mapping line numbers to line numbers.
Check if two node_a and node_b have the same attributes.
Returns True if the original and overridden parameters are different.
Infers the call result of a node if possible.
Set the accessed scope for the given node.
Handle classdef nodes.
Check that the node is consistent with the MRO.
Check that all base classes of the given node have a valid base class.
Leave a functiondef.
Check if the node is in slots.
Check if the name of the first attribute is the name of the first attribute.
Return True if node is mandatory method parameter.
Check if the body is raising a statement.
Check if the node is a valid exception context.
Display the reports in the layout.
Checks if the given node is a typing namedtuple.
Check if the given node is an enum class.
Check if the given node is a dataclass decorator.
Add a message for classdef nodes.
Leave classdef node.
Add if statement to the statement.
Checks if the condition evaluates to a maximum boolean expression.
Check the docstring for spelling.
Format the template using the given template.
Check if the given node is the actual elif.
Check if the node is simplifiable.
Check that the stopiteration is inside a generator.
Check if the exception inherits from the stopiteration.
Check nested blocks and emit message if needed.
Return a dict of duplicated types that are instances of astroid. astroid.
Check that the node is a valid isinstance.
Check if a node is AND or ternary.
Check if explicit returns are end - of - returns.
Check if graphviz is available.
Run diadefs command.
Write packages to the printer.
Writes a diagram to the object printer.
Sets the printer for the given file name.
Set the printer for a graph file.
Return True if this version is likely to be committed.
Format the help message.
Get environment variables.
Traverses the graph and returns a list of cycles.
Generate the graph.
Pretty print a section and a list of options.
Disable a message.
Enable a message.
Get the symbol of a message.
Check if a message is enabled.
Add a message to the message store.
Get the length of the indent of a line.
Get a hint for the indented line.
Return the indent of the token at the given position.
Handle a line start.
Returns a dictionary of valid indent and valid_continuation_strings.
Return the indentation for the hanging indent after bracket.
Return the indented portion of the line at the given position.
Push a new token onto the stack.
Add a new line to the message.
Check if the token is a valid type annotation.
Check equality of spacing between type annotations.
Checks that the token is surrounded by a space.
Check if the default node is a statement.
Checks a multi - statement line for multi - statement statements.
Check the indentation level of a string.
Determine if the given node is in an iterator context.
Check if the given node is a conditional import.
Add a message for a name node.
Visit a subscript node.
Visit an attribute node.
Return an astroid. Raise node as string.
Find the path to the pylintrc file.
Validate value against optdict.
Register a provider for options.
Set provider option.
Set global global option.
Generates the configuration file.
Load the configuration file.
Load command line configuration.
Add a help section to the parser.
Return the help string for this command.
Load the default values for all options.
Get the name of an option attribute.
Get the default value for the specified option.
Iterates over all options in the configuration and returns them sorted by section.
Check if a function is a method call.
Check if a node is a complex format string.
Visit the logging module node.
Visit an importfrom node.
Visit an import node and add logging names to the list.
Check if format_string is a valid format string.
Return True if the given node is inside a loop.
Get the parent of a break loop node.
Check if the loop exits gracefully.
Return a set of property classes and names for the given config.
Determine the function name type of a function.
Produce a report of the given sect by type stats.
Returns True if the call is a single argument position call.
Add a starred statement to the message.
Check if the call is abstract.
Check if we re in a loop.
Check if the given node is inside the loop.
Opens the linter.
Visit an expression node.
Add a message if node. fail is none or the number of elements in node. test is
Add a message for each key in a dict node.
Check if node is not in finally.
Check that the node is a reverse protocol method.
Check docstring for docstrings.
Checks the literal and adds a message if it is a constant.
Create a sub - graph from a node.
Parse a sub - graph from a node.
Visit a module and add a message to the graph.
Walk an Astroid and all its children recursively.
Add a relationship between two objects.
Get a relationship from an object.
Get the attributes of the given node.
Add an object to the diagram entity.
Get class names from a list of nodes.
List of classdefs of this object.
Return the class with the given name or raise a keyerror.
Returns a list of all modules in this object.
Returns the module with the given name or raises a keyerror.
Get a module by name.
Add from_module to node s depends list.
Delete the client from the cache.
Query the database.
Get user by username and password.
Get an access token or refresh token.
Set a token for a client.
Add a grant to the client.
Get a client by code.
Prepare a HTTP request.
Initializes the application with the given app.
Returns a remote app with the given name.
Authorizes the current user to authorize the current session.
Handle an OAuth1 response.
Handle an OAuth2 response.
Handle an authorized response.
Return a tuple of application name and hashed token.
Make a client with the given token.
Create a client for OAuth 2. 0 client.
Context manager for insecure transport.
Confirm an authorization request.
Get the client secret for the given client key.
Get the secret for a request token.
Get an access token secret from the request.
Get the realms for the given token.
Returns the redirect URI for the given token.
Returns the RSA key for the given client key.
Validate a client key against the request.
Validate the request token.
Validate the access token for the request.
Validate timestamp and nonce.
Validates that the redirect URI is valid for the request.
Validate the realms for the given client key and token.
Validate a verifier against a client key.
Verify the request token.
Verify that the given token has the given realms.
Confirm an authorization request.
Authenticate the client based on the client_id and client secret.
Authenticate the client with the given client_id.
Get the original scopes for the given refresh token.
Confirm that the given refresh token has the specified scopes.
Get the default redirect URI for a client.
Get the default scopes for a client.
Invalidates an authorization code for a client.
Save an authorization code for a client.
Save a bearer token.
Validate a bearer token.
Validate that the client_id is valid.
Validate a grant code.
Validate grant type.
Validate a refresh token.
Validate the response type against the allowed response types.
Validate scopes.
Validate a user against the request.
Revoke an access token.
Update qq API request data.
Convert a dictionary of keys to string.
Change the weibo headers for a weibo request.
Register to an oauth instance.
Create a new instance of this app.
Extract parameters from the request.
Convert text to bytes.
Decode base64 encoded text.
Create a response object with headers body and status code.
Returns a list of cached clients for the current application.
Add a remote app to the registry.
Add a remote application to the registry.
Check if exception is raised.
Checks the success of the test.
Check the load_privatekey_callback method to call load_privatekey
Check if load_privatekey_callback is incorrect.
Check if load_privatekey_callback_wrong_type is wrong type.
Checks the get_revoked method of the CRL object.
Check that all X509 revoked certificates have been revoked.
Create a certificate request.
Create a certificate.
Use a certificate chain file.
Use a certificate file.
Use a certificate on the current context.
Add an extra chain certificate to this context.
Use a private key file in the SSL context.
Use a private key in the SSL context.
Load a client ca file into the context.
Set the verification depth for this SSLContext.
Load a temporary DH file into the ssl context.
Set the list of ciphers to use.
Set the client CA list for this context.
Add a client CA certificate to the context.
Set the TLS extension use SSTP for the specified profiles.
Set the select callback for the NTP.
Set the list of protos to be sent to the server.
Sets the select callback for the SSL context.
Set the OCSP callback.
Set the SSL context for this connection.
Get the name of the server that this client is connected to.
Set the name of the TLS extension host.
Receive data from the socket.
Read data from bio using the specified buffersiz.
Force a negotiated version of the current SSL connection.
Shut down the connection.
Get the list of ciphers supported by this client.
Returns a list of all client CAs.
Set the shutdown state of the connection.
Returns a random server.
Returns a random client.
Get the master key for this SSL session.
Export a keying material to OpenSSL.
Get a pyssl session object.
Get the name of the current cipher.
Get the number of bits needed to decrypt the current cipher.
Get the TLS version of the current cipher.
Get the protocol version name.
Get the next available protogotiated message.
Set the list of protos to be sent to the server.
Get the ALPN protonegotiated string.
Convert a bio object to a string.
Set the ASN1 time for the given ASN. 1 time boundary.
Get the ASN1 timestamp as a string.
Get an elliptic curve by name.
Dump a public key to a string.
Load a public key from a buffer.
Sign data with pkey using digest.
Verifies the signature of a certificate.
Dump a CRL to a string.
Return the cryptography key for this key.
Check the RSA key for validity.
Load all the elliptic curves.
Get the curves for the elliptic curves.
Return the EC key associated with this curve.
Derive an X. 509 name from this certificate.
Returns a list of all the components of the X509 NameEntry.
Returns the short name of the extension.
Get the data associated with this X509 extension.
Return a cryptography. x509. CertificateSigningRequest object.
Set the public key for this certificate.
Get the public key for this certificate.
Get the subject name for this certificate.
Add one or more extensions to the request.
Returns a list of x509extensions. x509. x509. x509. x509
Verifies that the given pkey is valid for this request.
Return a cryptography. x509. Certificate object.
Set the version of the X509 certificate.
Get the public key for this certificate.
Set the public key for this X509 certificate.
Sign an X509 certificate.
Get the digest of the certificate with the specified name.
Set the serial number of the certificate.
Get the serial number of the certificate.
Add an amount of time to the gmtime_adj attribute of the X509 certificate.
Add an amount of time to the OCOC not before this OCOC.
Returns True if the certificate has expired or False otherwise.
Get the issuer of this certificate.
Set the issuer for this certificate.
Get the subject of the certificate.
Sets the subject for this X509 certificate.
Add one or more extensions to the certificate.
Get the extension at the specified index.
Add a certificate to the store.
Add a CRL to the store.
Set the time of the certificate.
Initialize the x509 store.
Return an x509storecontexterror. x509. x509. x509. x509
Verify the certificate.
Set the serial number of the certificate.
Get the serial number of the certificate.
Set the reason of the certificate.
Get the reason of the certificate.
Set the revision date of the certificate.
Return a cryptography. cryptography. CertificateRevocationList object.
Returns a tuple of all revoked certificates.
Return an x509name representing the issuer of this certificate.
Sign an X509 certificate using the given digest.
Export an X509 certificate to the CA.
Get the type name of the object.
Set a list of CA certificates.
Sign the digest with the specified key.
Verify the signature of a SPki key.
Encode the SPki as base64.
Get the public key for this SPki.
Set the public key of the SPK.
Create an exception from a queue of error messages.
Get service metadata.
Iterate over all issues on the board.
Builds the annotations for the given card.
Get all boards.
Returns a list of lists for the specified board.
Get all cards in a list.
Get all comments for a card.
Returns the API URL for the given path.
Perform a GET request and return a list of JSON objects.
Convert a string field to a dict.
Returns a dictionary of issues matching the query.
Get a list of pull requests for the specified tag.
Aggregate all issues in the main section.
Get the value of a config option or default if it doesn t exist.
Return True if the issue is included in the list.
Make a table from a list of grid rows.
Executes a command and returns the result of the oracle eval.
Try to get an integer value from the bugwarriorconfigparser.
Pull an issue from a main section.
Perform a GET request and return the response.
Get a collection of items from the given url.
Parse a sprint string into a dictionary.
Get credentials from the credentials_path.
Correct a set of pvals by fdr correction.
Compute the z - score of the data2d along the specified axis.
Adjust the spine colors and ticks position of the axes.
Prepare the argument parser.
Adds a sub - command parser to subparsers to add enrichr commands.
Select the p - value of a gsea distribution.
Returns a pandas. Series containing the names and descriptions of all the marts in the
Get the datasets in the MART format.
Get the attributes of a dataset.
Get the filters for the given dataset.
Set the number of cores to use.
Load a GMT from a list of genesets.
Returns a list of all libraries in the database.
Download libraries and return genesets dictionary.
Set the heatmat attribute on the dataframe.
Load data from CSV file or dataframe.
Run samplespermu on a dataframe.
Save resultsonsamples to outdir.
Parse the gene sets from the enrichr library.
Send a list of genes to the given url and return the job id
Check genes in a usr_list.
Cube transforms a filterscript into a cube.
Generate an icosphere layer.
Cube Open hierarchies.
Return red green and blue values for a color string.
Check if a variable is a list of num_terms terms.
Make a list of num_terms terms.
Write filter_xml to script. filters.
Merges the given script with the given threshold and returns the result.
Splitvert on nonmanifold face.
Translates a script by the given value.
Rotates the script by the specified angle.
Scale a script by the given value.
CIE 1931 cyl_co function.
Wrap a cylinder into a cylinder.
Convert a deformed curve to a curve.
Convert a VCS file to a LaTeX file.
Convert a mesh to fc format.
Voronoi plot.
Return True if all of the elements in the script have face and vert attributes.
Writes the vert_quality XML to the specified script.
Invert a script to a cylindrical radius.
Draw a spherical version of the script.
Rename a filter script.
Change the layer number of the filter script.
Duplicate a filter script.
Delete a script lower than the current layer.
Begins a script and merges it with the current layer.
Adds a layer to the layer stack.
Save the script to a file.
Runs the given script on the given sidedim and textdim and returns a boolean indicating whether
Measure the topology of a filter script.
Parse the hausdorff log file.
Replace pi and x with y.
Cross product of two vectors.
Multiplies vector v1 by scalar.
Depth a script.
Sort polyline segments.
Measure all geometries geometries and topology.
Convert extension to lowercase.
Get the config for this upload set.
Return the URL for the given filename.
Returns the path to the specified file.
Returns True if the specified extension is allowed to be included in the request.
Resolve a conflict between a file name and a filename.
Get the vprof version from a file.
Remove duplicates from a list of objects.
Get the object count difference between two objects.
Format the number of objects in a list of objects.
Return trace_memory_usage for the specified event.
Return a list of code events.
Returns the number of object overheads for this object.
Compute the overhead of the memory.
Profile the package.
Profile the module.
Profile the run object.
Runs the profiler.
Get the names of all modules in the specified package.
Run a function in separate process and return its output.
Get the type of a run object.
Initialize the module for the run object.
Initialize the profile package.
Initialize the run function.
Replace sys. argv with sys. argv.
Sample a frame from the stack.
Insert a stack of functions into the call tree.
Fill node with sample counts.
Formats a tree of samples into a dictionary.
Returns a tree representation of the call stats.
Profile the package.
Profile the module.
Returns the profile function for this object.
Transform profiling stats to a list of tuples.
Generate a profile package for this object.
Profile the module module.
Returns the profile function for this object.
Show the guestbook.
Add an entry to the database.
Start the stats server.
Handle the root XML file.
Return the content and extension of the other file.
Send GET request to the server.
Post the data to the server.
Send a response to the client.
Check if module_path is in the standard library directory.
Record a line event.
Yield lines without standard library.
Fill the heatmap with the current execution count.
Skip lines from src_code.
Profile the heatmap package.
Format a heatmap file.
Profile the module and return the heatmaps.
Runs the heatmap calculation and returns the heatmap function.
Run all profiles in the specified configuration.
Run a profiling function.
Predict the probabilities of x.
Predict log probabilities for x.
Fit the model to a set of points.
Count the number of words in the analyzed documents.
Sorts the features in a vocabulary.
Limit features to the given vocabulary.
Fit the transformer to the input data z.
Transform a vocabulant z into a vocabulant z.
Returns a Scikit - scaler representation of the distribution.
Fit the model to the data using Spark.
Predicts the given class with the given data.
Fit the model to the given z.
Fit the model to the given z.
Fits z and transforms z.
Return the score of z.
Score the estimator using the scorer function.
Fit the sparkkmeans model to the given data.
Predict the input data for the sparkkmeans model.
Predicts x using sparksgdclassifier.
Check that the expected_dtype is in the expected_dtype
Fits the model using the SVD algorithm.
Apply the transform to a Spark RDD.
Yields all the items in iterator that are longer than bsize bytes.
Yield tuples of dtypes that are blocked by the given iterator.
Block a RDD of RDDs.
Apply a function to the RDD and return a new RDD.
The shape of the first element of the RDD.
Return the RDD as a numpy array.
bitperm - bitperm - bitperm - bitperm - bitperm - bitpos - pos
Return True if path has only root write permissions.
Check the config file and print it.
Reads the configuration file and validates it.
Run a command as a shell.
Execute a command and return stdout and stderr.
Execute a command over SSH.
Validate the configuration.
Returns a copy of the default_headers and the default_headers dict.
Returns the URL for this assistant.
Get the URL for this config.
Convert a Packet to a text string.
Print a discovery packet.
Discover devices that are not in mac_id_list.
Execute the command and return the result.
Send a confirmation message to the user.
Push a device to the queue.
Execute a device.
Run the scan_devices command.
Return the absolute path of the ledgerrc file.
Run compatibility tests.
Create a precalculatedtextmeasurer from a json file
Generate a list of supported character codes from a text file.
Generate a generator that encodes characters using the specified encodings.
Calculates the mapping of characters to length.
Writes the dejavu measurer to a JSON file.
Convolve a 2D Gaussian image to a 2D Gaussian.
Returns the gaussian kernel for the given width and gaussian kernel sigma.
Convert an image to grayscale and alpha.
Entry point for ssim.
Calculate the ssim value of a target image.
Compute the ssim of image1 and image2 using the gaussian kernel.
Destroys the container.
Set the current code version.
Get the status of the Raft instance.
Print the status of the device.
Return the node with the given connection.
Attempt to bind to the server if necessary.
Causes the given connection to be received.
Internal utility callback.
Returns True if the given node should connect to this node.
Connect to a single node if it is not already connected.
Called when outgoing connection is established.
Called when an outgoing message is received.
Called when a connection has been disconnected.
Add a node to the network.
Remove a node from the connection pool.
Send a message to a node.
Adds the specified item to the end of the list. If the item already exists it will be
Put an item into the heap.
Get the first element of the heap. If the heap is empty return default.
Tries to acquire a lock.
Returns True if lockid is acquired by lockid.
Release a lock.
Set the number of hosts to use.
Create a list of indexes.
Migrate all aggregate indexes to a new version.
Strip metadata from a report.
Save aggregate reports to kafka.
Extracts the XML from a file or file - like object.
Parse an aggregate report file.
Takes a list of parsed forensic reports and converts them to a CSV file.
Parse a report file and return a dictionary of results.
Get capabilities from imap server.
Saves forensic reports to Splunk.
Decode base64 encoded data.
Get the reverse name for an IP address.
Convert a human - readable timestamp to a datetime object.
Get IP address information.
Convert an outlook message to an rfc822 string.
Convert a string to a list.
Parse a single file.
Drain all the subscribing subscriptions.
Publish a message to a publisher.
Publish a request to a publisher.
Publish a message to a subject.
Subscribe to a subject asynchronously.
Unsubscribe from a subscriber ssid.
Send the ping to the server and wait for a response.
Select the next server from the pool.
Process an error message from the client.
Process an operation error.
Returns the command to connect to the server.
Process pong messages.
Process a message.
Process information from the server.
Flushes the pending data to the IO writer.
Read loop.
Load features from a numpy array.
Load features from images.
Pearson correlation.
Return the dot product of the given images.
Select features based on feature selection.
Get the order of features in a dataset.
Classify x and y using clf_method.
Fit the model to the given x y coordinates.
Set the class weight of the model.
Fit cross_val to x and y.
Fit the classifier to a dataset.
Get random voxels from a dataset.
Returns a list of top words for each topic in the model.
Pearson distance between x and y.
Compute the FDR of a vector p.
Load activations from CSV file.
Create the image table.
Returns a list of feature names.
Returns a dictionary of feature counts that have a certain number of features that have a certain number of
Load a dataset from a pickle file.
Save the feature table to a file.
Returns a list of the ordered names of the features in the dataframe.
Returns a list of features that match the given search string.
Get ids by expression.
Convert SDF to CSR matrix.
Transform a matrix using the inverse of mat.
Convert xyz coordinates to mat coordinates.
Apply a transformation to a foci.
Get the mask for the given layers.
Load images from a list of filenames.
Save image data to filename.
Set logging level.
Parse an address.
Convert a dict to an object.
Get the price for a ticker
Get a list of bulk news.
Make a request to the REST API.
Get bearer information.
Make a request to the API.
Get a list of album tracks for a spotify.
Get an artist by spotify_id.
Get artist albums for a given spotify ID.
Get a list of artist top tracks for a given spotify.
Get a list of artist - related artists for a spotify.
Get artists for a list of spotify IDs.
Get information about a specific category.
Get a list of all the plays in a category.
Get a list of categories.
Get a list of featured plays.
Get a list of new releases.
Get a list of following artists or users.
Get a list of all albums for this artist.
Get all albums for this artist.
Get the total number of albums for this artist.
Get currently playing track.
Get the current player.
Get available devices.
Returns a list of recently played tracks.
Replace tracks in a playlist.
Create a new playlist.
Get a list of playlists for this playlist.
Get all tracks for this album.
Get all tracks for this album.
Returns the OAuth2 URL for the given redirect URI.
Get an album by spotify_id.
Get artist by spotify_id.
Get a track by spotify ID.
Get a user by spotify ID.
Get a list of albums with the given ids.
Get a list of artists by their ids.
Convert a string to an ID.
Create a client from a client object.
Generate a URL to redirect to a client.
Return a dict of attributes for this request.
Return a string representation of the parameters.
Build a list of playlist tracks.
Get all tracks for this playlist.
Transfer a device to another device.
Create an instance of this class from its href.
Get the whois record for this domain.
Convert data to a short month.
Update the code URLs in the current directory.
Check if current version is greater than current version.
Return True if the device is a dev version.
Check if the current version is deprecation.
Backups the current configuration.
Restores the backup content.
Check if the given line is to be ignored.
Process options and return a list of bools.
Extract base from element.
Return a list of decoded data for the given format.
Get the access code of the request.
Get the HTTP code for this request.
Check syntax of a domain.
Check if a domain is a subdomain.
Check if an IPv4 address is valid.
Check if the given IP address is a valid IP range.
Check syntax of a URL.
Load configuration from current directory.
Stay safe.
Downloads the specified entry management URL.
Download the entry management url if it exists.
Print the header of the pyfunceble configuration
Handle file deletion.
Print the domain of the file.
Figure out what type of url to test or not.
Prints the logo to stdout.
Formats the extracted_domain if it is not already in the extracted_domain
Extract domain from a file.
Returns a list of domains for each file in the corpus.
Return a list of URLs for the file.
Get the expiration date and the status string.
Handles the catched code.
Get the structure from the API.
Create a directory if it doesn t exist.
Deletes all folders that are not in the structure.
Set the path_to_config and the default configuration filename.
Downloads and installs the production config.
Install the iana configuration.
Install the PSL configuration.
Install the directory structure file.
Merge configuration values from upstream_config into new configuration.
Load configuration from the environment.
Split a version string into digits and non - digits.
Check that local and upstream versions are in the same order as upstream.
Check if the current working directory is cloned.
Handles a non - existant index.
Returns the output directory for analytic host.
Print unified output file.
Prints the current status of the domain.
Return True if the file is not present in the current domain.
Add public suffix to database.
Load the file from disk.
Return a standard regex for the given element.
Load the IANA database.
Return the reference to the specified IANA extension.
Get all extensions that match the iana_url.
Update the IANA database.
Returns a list of urls that are valid for this request.
Retrieve the data from the file if it exists.
Backup the file if it exists.
Add to_add to the list of to_add.
Remove the bare from the database.
Return a list of mined elements.
Process the configuration.
Get the content of a file.
Write content to file.
Whois record.
Write expiration date to output directory.
If the referer is not found in the configuration it will be written to the output directory.
Write the header before the header is used.
Constructor for header_constructor.
Constructor for data_to_print.
Returns the size of the given header as a list.
Colorize data according to template.
Writes the output to a JSON string.
Returns the data to print.
Calculate the time difference between start and end.
Format the execution time as a string.
Returns a list of files to delete.
Returns a list of databases to delete.
Delete all databases in the current directory and all databases in the current directory.
Return the hash of the file.
Generate a hash of the data using the given algorithm.
Get the hash of the algorithm.
Execute the command and return the output.
Remove a key from the main dictionnary.
Rename key_to_rename to key_to_rename
Merges the main dictionnary into the main dictionnary.
Write the main dictionnary to a JSON file.
Write the main dictionary to a YAML file.
Return the path to the file. If splited_path is None then the path will be
Write data_to_write to the file.
Read funilrys from the file.
Format the main list as a list of strings.
Merge the main_list into the main_list.
Returns a list of items that are not matched by the regex.
Returns a list of data that matches the pattern.
Replaces the occurences of the regex with the occurences of the regex.
Count the number of items in the list.
Calculate the percentages for each string.
Check if the given URL is valid.
Check if a domain is valid.
Check if the domain is a subdomain of the element or element.
Get the syntax status for the given string.
Reformat the historical formating error.
Retrieve data from the inactive database.
Backup the inactive database.
Return the timestamp of the database.
Return the content of the module.
Check if the string is present in the pyfunceble configuration.
Retrieve the database from the whois database.
Backup the whois database.
Returns True if the user is in the database.
Checks if the database is older than the current time.
Get the expiration date of the authorization.
Manage permissions for travis.
Runs the travis command.
Lookup namespaces.
Return the whois data from the server.
Get the status of the current URL.
Get the referer for this domain extension.
Get the current object from the current object.
Return a generator of all the standard python paths in the system.
Return a generator of all standard package names.
Yield unused import lines from messages.
Yield unused import module names.
Generator that yields line numbers of imported lines.
Generator for undefined_name undefined_name and module_name messages.
Yield unused variable line numbers from messages.
Yield duplicate key line numbers from a multivalued key literal.
Check if a string is a valid python source.
Extract package name from line.
Return True if the given line is a multiline import statement.
Return True if the line contains a multiline statement.
Remove unused_module from imported imports.
Break up an import line up to the end of the line.
Given a list of messages return a dictionary of all the messages whose lineno is the line number.
Remove marked star import undefined name from line.
Remove duplicate keys from a line if they are not marked.
Check if the line contains a key in a dictionary entry.
Check if value is a literal or name.
Generator of useless pass line numbers.
Filter out useless pass lines.
Get the indentation for the given line.
Get the ending of a line.
Remove unused imports from a source string.
Split a comma separated string into a set of strings.
Check if a file is a valid python file.
Check if filename matches any of the exclude patterns in exclude.
Read obtainlease response payload from input_stream.
Write the obtainlease response payload to a stream.
Write the cancel request payload to a stream.
Read cancel response payload from input_stream.
Create a new name.
Read the digest and key format types from the given istream.
Write the metadata to a file - like object ostream.
Read application specific information from the specified stream.
Write the application specific information to the specified stream.
Create an application specific information object.
Read derivation parameters from input_stream.
Write the derivation parameters to a file.
Read the request payload from the input stream.
Write the request payload to a stream.
Reads the object from the specified input stream.
Write the response payload to a stream.
Write the metadata to a stream.
Read signature verify response payload.
Builds an error response.
Process a template attribute.
Get attributes from a managed object.
Set attributes on a managed object.
Set attribute on managed object.
Checks if the specified policy is allowed for the specified operation.
Write the request payload to a stream.
Create a new certificate or private key.
Sets the setting to the specified value.
Load settings from a file.
Process a bind parameter value.
Process the result value and return a list of cryptographic usage masks.
Read the primitive value from the specified stream.
Write the KMIP value to the specified stream.
Validate that the value is valid.
Read the primitive value from the given istream.
Write the hexadecimal representation of the integer to the specified stream.
Validate that the value is a valid integer.
Validates that the value is valid.
Read the value from the input stream.
Write the value to the given OStream.
Write the metadata to the specified stream.
Validate that the value is a bool.
Reads the interval from the given istream.
Validate that the value is valid.
Validate that this key is valid.
Validate that this key is valid.
Validate that the field is valid.
Convert an attribute name to a tag.
Convert an attribute tag to a name.
Get bit mask from enumerations.
Get enumerations from bit mask.
Return True if enumeration is a bit mask of potential_mask.
Writes the specified buffer to the specified output buffer.
Read the keypair response payload from the input stream.
Write the keypair response payload to the specified output buffer.
Read the attribute list request payload.
Write the attribute list request payload to the specified output buffer.
Write the attribute list response payload to the specified output buffer.
Get a list of all json files in a directory.
Run the main loop.
Get a certificate from a connection.
Get extended key usage from certificate.
Returns a list of common names for a certificate.
Get client identity from certificate.
Reads the request payload from the input stream.
Write the request payload to the specified output buffer.
Reads the response payload from the input stream.
Write the response payload to the specified output buffer.
Convert a pobjects object to a pobjects object.
Read encrypted response payload from input_stream.
Writes the metadata to the specified output buffer.
Returns True if the specified attribute is supported by this ruleset.
Returns True if attribute is deprecated.
Checks if an attribute applies to an object type.
Returns True if the attribute is a multi - valued attribute.
Read check response payload from input_stream.
Write the check response payload to a stream.
Read the attributereference from the input buffer.
Writes the attributereference to the specified output buffer.
Read attributes from the input stream.
Write the attributes to a stream.
Read the nonce from the input stream.
Write the nonce to the output stream.
Read the username password credential from the input stream.
Write the credentials to a stream.
Write the credentials to a stream.
Read credential from input_stream.
Write the credential to a stream.
Read macsignaturekeyinformation from input_stream.
Write macsignaturekeyinformation to output_stream.
Write the keywrappingdata to a stream.
Read the keywrappingspecification from the input stream.
Write the keywrapping spec to the specified output stream.
Read extension information from the given stream.
Write the extension information to the specified stream.
Read revocationreason from the given stream.
Write the revocation reason to the given stream.
Validate the revocation code revocationreasoncode and revocation message.
Reads the objectdefaults from the specified input buffer.
Write the local buffer to the specified output buffer.
Writes the given buffer to the specified output_buffer.
Read the profile information from the input buffer.
Write the profile information to the specified output buffer.
Writes the specified buffer to the specified output buffer.
Stops the RRW socket and policy monitor threads.
Writes the data to the specified output buffer.
Read the locate response payload from the input stream.
Write the locate response payload to a buffer.
Create RSA private key from bytes.
Read the signature data from the input stream.
Write the signature response payload to a stream.
Read usageallocationrequestpayload from input_stream.
Convert protocol version to kmip version.
Read the protocol version from the input stream.
Write the metadata to a stream.
Read credentials from input_stream.
Write credentials to a stream.
Read the pollrequestpayload from the input stream.
Reads the certificate from the specified stream.
Write the certificate to a file - like object.
Reads the archive response payload from the specified stream.
Write the archive response payload to a stream.
Run the main loop.
Read a rekey response payload from the input stream.
Returns True if conformance_clause and authentication_suite are supported.
Get attributes for the specified attributes.
Get the attribute list for the specified user.
Send a query and return the results.
Open the connection to the server.
Close the connection to the proxy.
Register a managed object.
Get attributes of a KMS.
Activate a KMIP device.
Build a cryptographic parameters object from a dictionary.
Builds the encryption key information object from the given value.
Builds a MAC Signature Key Information object from a value.
Builds a keywrapping spec from a dictionary.
Builds the common attributes for this attribute type.
Builds the name attribute for the attribute type.
Read the queryrequestpayload from the input stream.
Write the query request payload to output_buffer.
Read attributes from input_buffer.
Write the attributes to the output buffer.
Get a single entrypoint for a single entrypoint.
Returns a dictionary of group names that are not in the specified path.
Return a list of all entries for a given group.
Loads the object from the module and returns it.
Create an entrypoint from an entry point string.
Generate a controller file.
Rewrite src_file to dst_file replace project_name with project_name and copy
Check if the URL is a valid URL.
Encode something using urlsafeserializer.
Decode a string into a Python object.
Return the absolute URL for the given endpoint.
Signin a user.
Get the currently logged in user.
Create flask app.
Writes a dataframe to a CSV file.
Read a dataframe from a CSV file.
Serialize dataframe to writer.
Deserialize a dataframe from the specified data type.
URL for the contents of the file.
Opens the intermediate dataset contents.
Read the intermediate dataset contents as binary string.
Reads the contents of this intermediate dataset as text.
Read the data and deserialize it as a pandas DataFrame.
Returns the intermediatedataset for the specified node and port.
Get all experiments in a workspace.
Get datasets in a workspace.
Get a specific dataset.
Find the names of all globals in the code.
Return a copy of the pen.
Lookup a color from a string.
Draws the bounding box on the current canvas.
Calbicbernstein extrema.
Cubic Rubinstein equation.
Builds a list of choices for the tree.
Initialize the cache.
Empty the cache.
Get the value for the given key from the cache.
Update an entry s value with the given key.
Set an entry in the cache.
Initialize the cache and the current page context.
Resolve the tree alias for the current language code.
Returns True if the current app is an admin app.
Calculate the depth of an item in a tree.
Get the current item for the given tree alias.
Returns the URL for the given sitetree item.
Initialize a site tree.
Get the attribute of the current page of the tree.
Get the level of the ancestor of current_item.
Check if the item is allowed to access.
Create a tree for the given tree_alias.
Return the rendered HTML for the children of parent_item.
Get the children of an item.
Updates the has_children attribute of the tree item.
Filter items based on navigation type.
Get the ancestor item of base_item from tree_alias.
Climber a tree item.
Resolve a variable.
Return a sitetree node for the given token.
Return the sitetree children of the given token.
Breadcrumbs for a sitetree.
Renders the given tree items using the specified template.
Create a new template object for the given tag.
Returns the model url name for the given page.
Reregisters the tree admin.
Handler for handling redirects.
Redirects the request to the given response.
Redirect to the response_add view.
Redirect to the view if the user has permission to change the object.
Overrides treeitemadmin. treeitem. get_form to add a choice field to the
Get a tree from the database.
Move an item to a specific direction.
Saves the object to the tree.
Override get_urls to add or delete a tree item.
Dumps the model tree and model tree items to a file.
Imports the sitetree module for the given app.
Get the model class for the given settings entry.
Create a configuration from a mapping.
Load a module from a pyfile.
Load from TOML file.
Create a new instance from an object.
Create HTTP headers for a new span.
Get the current context for the current span.
Start the logging thread.
Stop the transport.
Updates the binary_annotations dictionary with the given extra_annotations.
Add a SA binary annotation to the logging context.
Overrides the name of the span.
Create a new endpoint with a new service name.
Build a V1Span object representing this span.
Encodes a list of spans into a string.
Create a protobuf span from a span.
Convert a hex id to a byte string.
Returns the span for the given kind.
Convert a zipkin endpoint to a zipkin endpoint.
Convert a dictionary of annotations to a list of zipkin_pb2. annotation objects.
Create an annotation for the given timestamp and value.
Create a binary annotation for the given key and value.
Create a zipkin endpoint.
Copy an endpoint with a new service name.
Builds a list of annotation objects from the given annotations.
Build a list of binary annotation objects from a dictionary of binary annotations.
Create a span for the given span_id and parent_span_id.
Convert a Thrift span to a byte string.
Encodes a list of thrift objects into a byte string.
Detect span version and encoding.
Convert a list of spans into a list of spans.
Push zipkin attributes to the stack.
Encodes a Thrift span into a byte string.
Create a JSON endpoint for the given endpoint.
Encodes a protobuf span into a protobuf span.
Decode a list of spans into a list of spans.
Convert a Thrift endpoint from a Thrift endpoint.
Decode thrift annotations into a dictionary.
Convert a list of thrift binary annotations into a dictionary of tags local_endpoint and remote_endpoint
Decodes a Thrift span into a span object.
Convert a trace id to a string.
Convert an unsigned long value to lower hex.
Write a long value to the specified position in a hex string.
Apply a date fixup pre processor to tag_dict.
Set the transaction code for the given tag.
Set the IHH ID for the given tag in the transactions dictionary.
Set the TNR for the specified tag in the transactions dictionary.
Join lines of a string with the given strip.
Return json or text from response.
Limits the duration of the duration to until.
Get bot information.
Get a list of bots.
Read the next term from the packet.
Write a message to the stream.
Decode a string and return the decoded term and data.
Encode a term into a string.
Add a source address to the multicastout socket.
Send any pending messages in the queue.
Set a callback function that will be called when a remote service hello is received.
Stop the server.
Clear all local services.
Search remote services.
Create a SOAP message.
Discover logging levels.
Get the layer manager for this item.
Returns a list of all child relations for the given model.
Get all child m2m relations for the given model.
Save the clusterable model to the database.
Validate unique form.
Check if any of the formsets have changed.
Return a new address with valid checksum.
Generate the checksum for this address.
Prompts the user to enter a seed.
Get a key from the cache.
Get the key for the given address.
Create an iterator for the keyset.
Create a sponge from the seed_as_trits.
Apply a set of trits to the state.
Squeeze a list of trits into a single state.
Transforms the state to a new state.
Recursively adds all triangles from left to right.
Convert an integer into a list of trits.
Add two triangles to left and right.
Full add triangles to left and right.
Output seed to stdout.
Find all transactions in a bundle.
Promote a transaction to a specific depth.
Resolve a URI to a baseadapter.
Send a request to this class.
Log a message at the specified level.
Send an HTTP request and return the response.
Interpret the response.
Add a digest to the pool.
Return a multisigaddress for this signature.
Create an iterator for this security group.
Create an address from a digest.
Generate an address for the given key iterator.
Returns a list of transaction objects for the specified adapter.
Iterate over all addresses used in a transaction.
Get a list of bundles from the given transaction hashes.
Check if the given encoding is a asciitrytes codec.
Get codec information.
Encodes the input into binary_type and the length of the input.
Decode input using trytesdecode.
Find all the addresses in the specified index.
Add a route for a command.
Create a Message from a tryte string.
Return the message as a JSON compatible dictionary.
Returns a tuple of signature validation trytes.
Sets the new_is_confirmed state of all txns in the database.
Returns a list of messages from all transactions in the group.
Returns a list of transactions grouped by address.
Discover all commands for a given package.
Executes the specified request.
Apply a filter to a value.
Returns the URL for the given job_id.
Validation errors.
Returns True if the validator is valid False otherwise.
Create a validator for the bundle.
Returns a list of bundle signatures errors for the specified groups.
Get group s signature error message.
Traverses the bundle with the specified transaction hash.
Start the interactive Python interpreter.
Generate a random string.
Get the digest of the key.
Sign input transactions.
Print pretty representation of this object.
Accumulate a set of trits.
Add context to exc.
Security level of the address generator.
Increment the legacy tag.
Return the tag of the transaction.
Add a transaction to the transaction list.
Finalize the transaction.
Sign input transactions.
Create input transactions for the input addy.
Convert a value to a standard unit.
Decompress a g1 compressed version of z.
Inverse of prime_field_inv.
Create an instance from a JSON file.
Splits a description into a list of parts.
Return a list of all categories in this object.
Generate a random colour.
Create a builtin timescale from a string.
Create a list of components from an image.
Returns a CSV representation of the table.
Returns the maximum width of all rows in the table.
Get the Decor of a component.
Plots all the data in the list.
Add a deprecation warning to a component.
Process a row of text.
Parse a Canstrat text string into a dictionary.
Returns a sorted list of unique unique items for each unique item in the list.
Generate a list of intervals from a list of tops.
Clean longitudinal data.
Create an interval from a petrel file.
Create a IntervalList from a Canstrat file.
Return a copy of the log.
Export the list to a CSV file.
Exports the section as a LaTeX section.
Finds the overlaps of this set with the given index.
Find all the gaps in the sequence that are greater than or equal to the given index.
Prune the strip.
Anneal all gaps in this strip.
Fills the component with gaps.
Return a new striplog that is the union of self and other.
Return the intersection of self and other.
Merge overlapping segments.
Invert all items in the list.
Crop the list to the specified extent.
Return the quality of the given tests.
Override get_field to handle key and index errors.
Get a list of jobs.
Parses the given hcl and returns the result as a dictionary.
Update a token
Get information about your account.
Fail a deployment.
Pause a deployment.
Drain a node.
Drain a node with a specific spec.
Check if a node is eligible to be eligible.
List files in the specified path.
Streams text from a stream.
Stat a file.
Join a list of addresses to an agent.
Updates a list of servers.
Force leave a node.
Get a list of nodes.
Get all the evaluations for a given prefix.
Get all namespaces for a given prefix.
Register a job.
Submit a plan job.
Dispatch a job.
Revert a job.
Revert a stable job.
Deregister a job.
Get the current configuration.
Delete a peer from the specified peer_address.
Get a list of all deployments.
Get a random mutator for the given object type.
Get a mutator for the given object.
Get a random string using the polyglot attack algorithm.
Safely join a buffer of unicode characters into a single string.
Generate a custom html file.
A context manager for serving testcases.
Spawn a subprocess.
Get the output of the process.
Finish the read thread.
Terminate the process and close the process.
Start the fuzzing process.
Execute a command and return the output.
Build a random string.
Build a string representation of the query.
Return a string representation of the query.
Build a random value.
Build the optgram.
Build a reference from the fuzzer.
Build the opt - gram.
Shut down the server.
Run the process and monitor the process.
Start the monitor process.
Generate a random float between a and b.
fuzzed version of urllib. parse
Returns the fuzzed elements of the object.
Signal handler for SIGTERM.
Quit the cli command.
Pause a command.
Resume paused or waiting.
Stop the cli command.
Restarts the cli process if the state is running.
Returns a list of skypeevents. skypeevents. skypeevent. SkypeEvent
Set mood of the user.
Set the avatar of the user.
Get meta data for a given url.
Retrieve a contact by id.
Retrieve a single user by id.
Returns a list of skype bots.
Get a bot by id.
Search the skype database for the given query.
Returns a list of skyperequest objects.
Create an instance of this class from raw data.
Merge attributes from another object into this one.
Merge an object into the cache.
Read the skype token file and store it in self. tokens.
Write the token to the tokenfile.
Verify that the token is valid.
Refresh skype token
Get userid from API
Get a registration token.
Synchronizes the skype endpoints with the server.
Check if the specified user exists.
Send a token and return the token.
Configure the connection to the skype server.
Ping this message.
Get a list of recent chats.
chat by id
Create a new member in the chatroom
Given a user url return the id of the user.
Convert a chat url to a chat id.
Convert text to unicode.
Detect the format of the given text.
Parse text and return metadata and content.
Return a copy of the object as a dictionary.
Load yaml from file fm.
Export the metadata to a YAML string.
Export metadata to a unicode string.
Match the string with the pattern.
Return a list of items that match this string.
Return a list of sublists that match the pattern.
Convert a newstart string to a newstart string.
Returns a list of argument tuples representing the arguments of this function.
Return a list of wikilists matching the pattern.
Convert a list of strings into a tree of tries.
Return a string representing the pattern in a trie.
Check the index for validity.
Insert string at index.
Atomically partition a character in the LSST string.
Returns a list of spans of the specified type.
Shrink the spans by rmstart and rmstop.
Insert or update a span.
Return the number of nesting levels.
Return shadow string.
Returns a byte array containing the shadows of the shadows of the external link.
Return a mapping of type to spans.
Pretty - print the object.
Returns a list of the parameter names for each span in the string.
Returns a list of parser functions for this string.
Returns a list of template strings for each span in the string.
Returns a list of wikilinks.
Return a list of comments.
Returns a list of external links.
Returns a list of all tables in this region.
Returns a generator of spans of _type that have less than or equal to _span.
Return the ancestors of this parser.
Return the parent of this node of the given type.
Return the mode of a list.
Get the argument with the given name and list of arguments.
Remove the first argument from the list of arguments.
Get the argument with the given name.
Returns True if there is an argument with the given name and value.
Delete the argument with the given name.
Convert a CRS code to a string.
Find an item by ellipsname and type.
Create a crs object from a URL.
Create a parse object from a JSON file.
Create a Projection object from an EPSG code.
Create a Projection object from an ESR code.
Convert a CRS code to a CRS object.
Create a CRS object from an unknown text string.
Write the record to a file - like object.
Read a raw VR from a data stream.
Parse the geotiff keys from the vlr list.
Parse a geotiff file and return a list of geotiffkeys.
Get the signedness of the extra dimension for the given type_index.
Get the ID for the extra dimension type.
Create a new point record from another point record.
Copy fields from another record to this record.
Append zeros to the array if it is too small.
Returns a set of all dimension names.
Create a new point with zeros.
Create a point from a stream.
Create a point from a compressed buffer.
Dimension of x - axis.
Dimension of the y - axis.
Z coordinate in SRID units.
Add an extra dimension to the data set.
Writes the VLRList to the specified output stream.
Write this file to a file.
Convert a dictionary of point formats to a dictionary of dtypes.
Builds the unpacked dtypes for the given point format dimensions.
Convert a numpy dtype to a point format ID.
Find the minimum file version for a point format.
Check if point format ID and version are compatible with file version.
Extract vlrs of a given type.
Read a VLRList from a data stream.
Returns True if the files have the same point format ID as the given las file.
Check if the files have the same dtype.
Raises a pylaserror if the file signature of the stream is different from the signature of
Read the header from the stream.
Read the VLRList from the stream.
Read points from the stream.
Read compressed points data from the stream.
Read internal waveform packet.
Read the evlr list from the stream.
Warn if the expected_pos is at the expected_pos.
Create a lasdata object from a header.
Merge a list of las files into a single las file.
Writes a las file then reads it from las and returns the number of bytes read
Returns a datetime. date object representing the date.
Set the date of the object.
The minimum value of the bounding box.
Set the minimum value of the bounding box.
The maximum value of the bounding box.
Setter for x_max y_max z_max
Returns the scales of the transform.
Returns the x y z offsets of the mesh.
Read the version number from the specified stream.
Convert old_header to new_header.
Unpack source_array from source_array using mask.
Returns a list of the dimensions that have not been lost in point_fmt_in.
Returns a dictionary of all sub - fields of this dimension.
Return the number of extra bytes for this dimension.
Returns True if there is a waveform packet in the dimension.
Entry point for the demo script.
Calculate the CRC of a command.
Print hex data to the logger.
Verify and strip checksums from the response.
Return a list of set bit numbers from the list r.
Generate a query string.
Demonstrate a host and port.
Establish a connection to the server.
Start monitoring the server.
disarm a device.
Clear the alarm for the specified code.
Set the output code to the specified output_id.
Keep the connection alive.
Monitor the status of the device.
Close the connection.
Purge the database for this user.
Guess the type of the file at the given path.
Get the file id for the given path.
Get a notebook from the database.
Create a notebook model from a DB record.
Get a directory.
Convert a list of file records to a list of FileModel instances.
Create a directory model from a DB record.
Create a file model from a DB record.
Save a notebook to the database.
Save a file to the database.
Rename a file or directory.
Delete a file or directory.
Ensure a user exists in the database.
Remove a user from the database.
Create a directory in the api_path.
Check if a table is in a directory.
Delete a directory from the database.
Check if a directory exists.
Return a list of files in a directory.
Return a list of directories in a directory.
Check if a file exists in the given api path.
Return a query to retrieve a single file from a user.
Return the default fields for a file.
Get a file from the database.
Get a file.
Get file id from api_path.
Check if a file exists in the database.
Rename a directory.
Save a file to the database.
Purge all remote checkpoints owned by a user.
Reencrypt row content.
Reencrypt user content.
Derive a singlefernet key from a password and a user id.
Get the name of a column - like object.
Convert a row to a dict with no content.
Convert a row to a dict with content.
Create a new notebook checkpoint.
Create a file checkpoint.
Delete a checkpoint from the database.
Get the content of a checkpoint.
List all checkpoints for the specified path.
Rename all checkpoints in the remote database.
Delete all checkpoints for the specified path.
Purge all remote checkpoints from the database.
Resolve a path to a manager and path.
Apply prefix to model.
Update the manager dictionary with new managers.
Get a file or directory.
Normalizes the given api path.
Split a path into a directory name and name.
Base64 encodes nb to base64 and returns it.
Reads a base64 - encoded string from a file.
Decode a base64 - encoded string from a base64 - encoded string.
Decode a base64 encoded file and return the content real_format mimetype mimetype and mimetype.
Return a list of all paths prefixed with the given path.
Create a user in the postgres database.
Split a list of models into a list of dirs and files.
Recursively walk a set of directories.
Iterate over all files in the specified directory.
Walk all files and yield all files with content.
Reencrypt a single user.
Unencrypt all encrypted users.
Unencrypt a single user.
Temporarily creates alembic_ini_template with alembic_ini_template
Upgrades the database to the specified revision.
Sanitize the given block.
Queue an instance for the given embed_type.
Load instances from a list of ids.
Insert an instance into the block.
Loads the embedding data for each embed type.
Validates the given data.
Renders the dispatch admin page.
Return a JSON representation of the object.
Hide all authenticated fields from the model.
Exclude fields from the request.
Override get method to add version and preview_id attributes to kwargs.
Returns a queryset of all published articles.
Returns a queryset of published publishables.
Overrides get_attribute to handle null boolean field attributes.
Validates that a widget is valid.
Validate a zone.
Check if a UUID is valid.
Get the permissions string for this user.
Modify the permissions of a group.
Validate author data.
Save the zone to the database.
Returns a dictionary with the field names and their values.
Prepares the data to be sent to the client.
Renders the template with the given data.
Get the settings for this integration.
Callback for Facebook integration.
Get integration settings.
Update integration settings.
Signup form.
Map a list of contents to a tag.
Render a zone widget.
Save the featured image.
Save a subsection to the database.
Get the extension of the image.
Returns the full URL for the media.
Saves the current image to disk.
Saves a thumbnail to the given image.
Returns a mysql db connection object.
Get a bandwidth limited stream from a file object.
Read amount bytes from the file.
Consume an amt from the scheduler.
Process a scheduled consumption token.
Returns the projected rate for the given amt and time_at_consumption.
Record the current consumption rate.
Poll for the result of a transfer.
Returns a list of callbacks for the given transfer_future.
Returns a copy of original_dict filtered by whitelisted_keys.
Decrements the number of items in the queue.
Finalize the progress bar.
Check if a file is a special file.
Acquire a resource from the semaphore.
Release a release token.
Adjust the chunksize for the current chunksize.
Queue a file - like object to be written to io.
Returns the appropriate download output manager class for the given transfer future.
Write data to fileobj.
Request a list of writes at the specified offset.
Return whether or not a file object is seekable.
Shut down the server.
Cancel all tracked transfer coordinators.
Wait for all tracked transfer coordinators to finish.
Wrap data in a file - like object.
Returns the appropriate upload input manager class for the given transfer future.
Sets the exception for this transfer.
Set the result of the job.
Set the exception to be raised when done.
Return the result of the operation.
Cancel the task.
Submit a task to the transfer transfer.
Add a done callback.
Add a function to the failure cleanup list.
Announce the completion of the job.
Upload a file to a bucket.
Download a file to a bucket.
Step the arguments of a decorator.
Refactors a step by replacing the old_text with new_text.
Step the arguments of a decorator.
Refactor a step.
Updates an existing membership.
Deletes the specified membership.
Get a list of all catfacts.
Post a webhook to a room.
Deletes the specified membership.
Validate the base_url against the scheme and netloc.
Check if a string is a valid web URL.
Open a local file and return a encodable file object.
Check that o is of acceptable_types.
Given a list of dictionaries and a list of items return a dict with the keys and values.
Check the response code against the expected response code.
Convert json_data to a dict.
Convert a date string to a webexteamsdatetime.
Creates a new object in the specified team.
Updates a room.
Deletes a room.
List all objects in an organization.
Returns a datetime object representing the created date.
Get the access token from environment variables.
Updates a webhook.
Delete a webhook.
Set the wait_on_rate_limit flag.
Update the request headers.
Return the absolute URL of the given url.
Perform a GET request.
Get all pages from a given URL.
Make an HTTP PUT request.
Deletes the specified URL.
Create a new object.
Deletes a message from the server.
Get a specific person.
Deletes a person.
Fetches the object from the API.
Lists all the objects in this collection.
Create a new object.
Updates a team.
Deletes a team.
Serializes the given data into a tuple.
Last activity of the current user.
Post events service.
Get the public URL of the Ngrok tunnel.
Delete webhooks with the given name.
Create a webhook for a ngrok public URL.
Main entry point for ngrok.
Read telegrams from the serial stream.
Read telegrams from the serial connection.
Create a dsmr protocol and serial settings.
Create a serial connection to a DSMR.
Create a TCP connection to the DSMR server.
Called when data is received.
Called when the connection is lost.
Parse telegram and call the callback
Parse telegram data.
Get the version from a file.
Ensures that the given list of specs is a valid Python object.
Find all packages under the given top directory.
Run a command in a subprocess.
Get a list of data files for the specified data specifications.
Get package data.
Compile a glob pattern.
Return a generator that yields paths from a given path.
Translate a glob pattern to a string.
Join a list of translated parts into a single string.
Translate a glob pattern into a string.
Truncates the specified table to the specified number of rows.
Write a postgres table to the database.
Write the indexes to the given table.
Write the triggers to the given table.
Writes the constraints to the given table.
Writes the contents of the table to the specified reader.
Write the indexes to the file.
Writes a table of constraints to the file.
Write the postgres triggers to the file.
Return the number of items in the queue.
Enqueue data to the database.
Start a new task handler.
Build the extra predicate string for the given extra_predicate.
Simplejson datetime serializer.
Reconnect to the MySQL server.
Executes a SQL query and returns the first row of the result set.
Get a connection to the database.
Run the benchmark.
Connect to the pool.
Looks up the value of errno in the globals and prints it.
Returns the size of the queue.
Handle a potential connection failure.
Create a simple expression for the given fields.
Updates a table with the given fields.
Connect to the database.
Destroy all tables in the database.
Start a new step.
Stop a step and save it to disk.
Load the steps from the raw_steps dictionary.
Disconnect from the socket.
Reconnect to the socket.
Connect to the websocket app.
Called when a websocket message is received.
Stop all timers.
Send ping to pong socket.
Check if pong is received.
Send a message to the websocket.
Unpause the stream.
Handler for system events.
Handle error messages.
Handle data received from the client.
Subscribe to the channel configurations.
Handle authentication.
Handle the configuration.
Update the timestamps for a channel.
Reset the connection to its initial state.
Return candles for a given pair.
Configure bitfinex configuration.
Subscribe to a ticker symbol.
Unsubscribe from a pair from a ticker.
Subscribe to the order book for the given pair.
Unsubscribe from a pair from an orderbook.
Subscribe to a raw order book.
Unsubscribe from a raw order book.
Subscribe to a pair of trades.
Unsubscribe from one or more trades from another.
Subscribe to a pair of candles.
Unsubscribe from a pair of CANdles.
Authenticate with the API.
Cancel an order.
Invoked when a pahomessage is received.
Process a device command.
Called when a message is received from the client.
Create a new devicetype.
Update a device.
Returns a statuslist of all statuses matching the given status and connectedafter.
Returns a list of all the objects in the account.
Create a new DME.
Update a schema definition
Disconnects from the client and disconnects from the loop.
Called when the client connects to the broker.
Called when a message is unsupported.
Process a device event.
Process device status event.
Callback called when the client is responding to a paho message.
Get a specific event from a device.
Get all events for a given deviceuid.
Make an API call to the API.
Initiate a mgmt request.
Get the status of a mgmt request.
Close the handle.
Get the bounds of the specified coordinate.
Load a bytearray from the page.
Check the return value of a function.
Loads the application if it is a string.
Run the gunicorn server.
Convert the given value to a native value.
Process an image and save it to disk.
Process an image and save it to disk.
Process an image and save it to disk.
Override to_python to open the file if necessary.
Process the placeholder image.
Overrides pre_save to update the ppoi field
Update the ppoi field of the instance.
Overrides Django s default formfield to add sizedimagecenterpointclick djangoadminfield to
Convert a value to a string.
Auto - discover all available settings.
Unregisters a registered sizeizer.
Unregister a filter by attribute name.
Return the URL for this image.
Build filters and sizers for this image.
Returns the root folder of this imagefield filtered by its name.
Returns the path to the root folder of the imagefield.
Returns the directory where the sized root folder is located.
Delete all matching files from the storage.
Preprocess a GIF image.
Preprocess JPEG image.
Retrieve an image from the storage.
Save an image to disk.
Return the ppoi as a string.
Create a resized image.
Render widget with imagepreview.
Render the context for the clearablefileinputwithimagepreview widget.
Builds base_attrs and extra_attrs from base_attrs
Returns the path to the resized image.
Returns the full path to the image filtered by filename_key
Validates that the given list of values is valid for aversatileimagefield sizekey
Get image url from image key.
Returns the rendition key set for the given rendition key.
Format an instruction.
Format a function body.
Decode a bytecode into a sequence of opcodes and imm instructions.
Decode a module into a sequence of sections and subsections.
Connect to the server.
Read the result from the reader and return it.
Parse the agi_code_check line and return a dictionary of code num_ and response
Check the code and response for a given code.
Reset all instances to their default values.
Returns a list of instances for this instance.
Get the metadata for a given path.
Returns a list of primary keys for the given model.
Deserialize a value to a related model.
Get an existing instance from the query.
Get declared fields for a schema.
Load data into the model schema.
Split data into kwargs and attributes for the model.
List snapshots.
Restore a snapshot from the database.
The end of the epoch.
Preprocess text using textacy_cleaner.
Apply a function to data in parallel.
Processes text.
Runs the process_text function on the given data and returns the results as a list of
Generate statistics about the document lengths.
Returns a pandas dataframe containing the word counts as a pandas dataframe.
Map a param type to a list of string types.
Parse a list of interfaces into a dictionary.
Inverse of the inverse of self.
Update the dedup items with a rollback.
Returns a copy of the current instance.
Return a copy of the object.
Returns True if this mapping is equal to the other mapping.
Returns an iterable of tuples where each tuple is the key and the value is the value of
Clears the FWDM and invm.
Move the node to the end of the node.
Write text to a temporary file and return its name.
Merge command line arguments into config.
Load addressbooks from a list of names.
Create a new contact.
Takes a list of vcards and a list of vcards and returns a list
Subcommand for phone_subcommand.
List all vCards.
Modify a subcommand for a selected vCard.
Remove a subcommand from a selected vCard.
Subcommand for source subcommand.
Merge a list of vCards into a single vCard.
Get the action with the given alias.
Create a new contact.
Create a private object from a file.
Create a contact object from a user input.
Create a contact object from an existing contact with a new user input.
Returns a list of the names for the specified part.
Add a category to the vcard.
Parses a type value and returns a tuple of standard types custom types pref.
Convert a list of strings to a string.
Convert a string to a datetime. datetime object.
Compare uid1 and uid2.
Searches for all contacts matching the given query.
Searches for names that match the given query.
Search for contacts with the given query.
Search the database for the given query.
Get a dictionary of the short uids for the contacts.
Returns the short uid for the given uid.
Find all vCard files that match the specified search.
Loads all vCards from disk.
Get the abook with the given name.
Return a dict of available architectures.
Return a dict of available architectures.
Tries to guess the type of the given keyword arguments.
Returns a new Query object with the results replaced with the new values.
Returns the first occurrence of this query or none if there are no results.
Delete all rows from the database.
Redis prefix lua function.
Estimate the work at the given index with the given prefix.
Count the number of records matching the filters.
Connect to an object.
Return a list of full text strings for the given value.
Add an object to the database.
Get the value of a known or wknown key.
Write a set of entities to the LSA.
Save the changes to the database.
Delete this object.
Get a list of objects by IDs.
Open a SEM file.
Send a result back to the result queue.
Add a call item to the queue of pending work items.
Ensure that the executor is running.
Start the server.
Duplicate a file descriptor.
Wait for all pending work items to complete.
Prepare process data.
Close all file descriptors in keep_fds.
Terminate the process without psutil.
Recursively terminate a process.
Get the exitcodes of the terminated worker.
Formats a list of exit codes into a string.
Ensures that the process is running.
Return the event processor for the given event.
Split a string into a list of arguments.
Get the stack and line number of a stack frame.
Run a list of hooks on an object.
Relieve the stack and frame threads.
Return the value of the argument as an integer.
Process all the commands in the core.
Add a new command file to the queue.
Return the next token in a string.
Print an error message to the console.
Read a line from the input stream.
Close input and output streams.
Disassemble the given message using the given section and co.
Count the number of frames in a frame.
Get the name of the call function for the given frame.
Print the stack trace of the given process object.
Lookup a subcmd by prefix.
Subcommand callback for short help messages.
Add a subcmd_cb to the list of commands.
Run subcmd_name with arg.
Show a specific category.
Run the command line tool.
Given a frame find the frame that is debugged.
Get an integer value from a string.
Run set_bool onoff.
Run get_an_int on the specified object.
Run showoff onoff and show bool.
Run show int command.
Run show value command.
Check if the given line is a def statement.
Checks if the given line is a class definition statement.
Wait for the thread to exit.
Set the default background color for the terminal.
Return True if r g b is a dark rgb color.
Return the signature of a frame.
Returns a list of all display strings.
Returns a list of display objects for the given frame.
Read a message from the socket.
Display a debug message.
Run a thread.
Pretty print a simple array.
Look up a signame for the given number.
Lookup a signum by its name.
Return the canonical name of a canonic signature.
Set the signal replacement handler for the given signal.
Check all sighandlers and adjust them if needed.
Prints information about a signal.
Handle a single action.
Handle a print signal.
Called when a handler is invoked.
Convert a file to a module name.
Search for a file in a list of directories.
Given a Python script return the path to the file where it should be located.
Return a list of filenames for all pyfiles in the specified caller.
Print a message to the output.
Run the main thread.
Columnize a list of commands.
Close the connection.
Write a message to the socket.
Complete an identifier.
Add a string to the command queue.
Add ignore frames to ignore_filter.
Return the path to the canonic file for the given filename.
Returns the filename of the main Python file or None if the filename is not specified.
Returns True if tracing is started.
Check if the given frame is a stop event.
Set the next frame to the given frame.
Print the stack trace of a function f.
Deletes a breakpoint from the list of bps.
Delete a breakpoint by its number.
Disable all breakpoints.
Disable a breakpoint by its number.
Deletes all breakpoints at the specified line number.
Open an input file or file - like object.
Read a line from the input stream.
Prompt the user for confirmation and return the default value.
Submit a query and return the result as a future.
Restore the original login to the original session.
Loads a module from a path and returns True if the module can login as a value or
Iterates over all documents in the specified client.
Transcodes an input file to a stream.
Normalizes the data in a stream to a date format.
Convert a date string to a timestamp.
Detect the encoding of a file.
Yield lines from a JSON file.
Transcode a file to UTF - 8.
Open a CSV file with somehow Python 2.
Reads a CSV file and yields a generator of dicts.
Main entry point for transcode.
Save a token to a JSON file.
Make a request to the luminos API.
Delete a file or directory.
Get the root URL for the given url.
Saves a token to a JSON file. If token_file is specified the token will be
Perform a json request and return the response as a dict.
POST data to the API.
Returns a raw string representation of this client.
Send a GET request to the API and return the raw text.
Prints the result as a CSV file.
Read parameters from input_file and return as dict.
Simplify a docstring.
Create a new project with a list of docs.
Uploads documents to a project.
Upload documents from a stream to a luminoso server.
Upload a file to the server.
NAME upload_file. py
Create a luminosologin token from a username and password.
Login to the server.
Post login page.
Fetch hourly daily daily monthly yearly data per period.
Prepare the view for rendering.
Initialize the view.
Renders the view and renders the view.
Called when a message is received.
Update the menus for this page.
Return a list of tuples containing the URLs and handlers for the static files.
Process a message from the viewer.
Called when the DOM is modified.
Create the widget for the declaration.
Initialize the widget.
Destroy the widget and its parent widget.
Add a child widget to the widget.
Remove a child widget from the widget list.
Return a generator of all child widgets of this node.
Set an attribute on the widget.
Updates the proxy based on a change.
Notify about modified changes.
Returns a list of declarations that match the given XPath query.
Initialize the widget for this component.
Set the source of the widget.
Observe the mode of the block.
Remove a block from the tree if it has changed.
Replaces the children of this node with the new children.
Return the contents of the specified pathcomponents as a string.
Print an error message and exit.
Print an error message and exit.
Get a Product by its name.
Create a new session.
Reset the store.
Returns a list of stores for the specified search term.
Set the delivery system for a store.
Get a menu for a store.
Add an item to a basket.
Add a Pizza to a specific item.
Add a side to a basket.
Remove an item from a basket.
Set the payment method to cash on delivery.
Process payment.
Perform a GET request.
Make a POST request.
Make a call to the API.
Append an item to the menu.
Add an exit item to the end of the list.
Draws the menu.
Process user input.
Select the selected item.
Parse the old menu data and return a menu object.
Convert a string column to datetime. datetime.
Convert datetime to string.
Apply a basic math operation to a dataframe.
Calculate the cumulative sum of a column.
Remove all old cache entries from the cachedir.
Add an offset to a date object.
Learning updates.
Returns a list of training parameters.
Optimizes the optimization updates for the parameters and gradients.
Samples the first glimpse signal and returns the gradient of the first sampled signal.
Prepares the encoder decoder and classifier.
Computes the final cost of the given input tensor.
Apply a function to the training and validation sets.
Vectorizes the target to the specified size.
Log the current training and validation set.
Train the model on a train_set.
Sample a sequence of steps from the input.
Computes the alignments for the given precomputed values.
Computes the context vector for the given inputs.
Concatenate a list of neural variables along a specified axis.
Pads the dataset to the specified length.
Compute the rmsprop - core for a set of gradients.
Prints the report to the screen.
Run the computation on the data_x and return the cost.
Runs the trained model on the data.
Builds the variables needed to run the loop.
Scan a step of a neural variable.
Computes the momentum core for a set of gradients.
Runs ifelse on the given branch and then branch.
Skip the specified number of batches.
Load parameters from a file.
Train the model on the specified train_set.
Run a training step on the network.
Run a valid step and report the results.
Report a score map to the train.
Get the current training and validation sets.
Apply a function to the tensor.
Prints the current parameters to the logger.
Create a deepy. tensor. Variable.
Create a neural variable from a dataset.
Return the shared value of the given value.
Stacks the specified layers into the specified encoding layers.
Stack the given layers and add them to the decoding_layers list.
Encode x using the encoding layer.
Decode x using the decoding layer.
Create a 2d gaussian with the given dim and sigma.
Register a new layer.
Monitor the output of each layer.
Returns a list of all the parameters and free_parameters.
Set up the input variables and test output variables.
Compute and return the output of the computation.
Save all parameters to disk.
Load parameters from a file.
Prints the current state of the model to stdout.
Register new updates for this node.
Register training updates.
Register monitors for training and testing.
Multiple L2 norm of a list of tensors.
Serializes elt_to_pickle to file_obj and writes it to file_obj
Reads a file - like object and yields a generator of elts.
Loads the parameters for this block from the given path.
Decodes the given state and returns the decoded state.
Parse credentials data.
Filter request elements based on request type.
Login to the provider.
Convert a dict to a normalized dict.
Convert a list of items to a dictionary.
Parse a JSON body and return a dict.
Resolve a provider class from a string or a string.
Create a cookie for this cookie.
Saves the data to the session.
Get the data from the cookie store.
Returns the data as a dictionary.
Generate a signature for the given parts.
Serializes the given value and returns the concatenated string.
Returns True if the token is valid or False otherwise.
Expire a given number of seconds.
Return a string representation of the provider.
Return True if content is a binary string.
The content of the response.
Fetches the user s email address from Bitbucket
Login to the GAE.
Returns the session key for the given key.
Set the session value for the specified key.
Generate a random CSRF token.
Log a message to the core logger.
Check if a status is within a category.
Split url into base and params.
Set the CORS headers for a request.
Returns a dict of app instance s keyword arguments.
Return a string representation of the given object.
Ensure that inst is iterable.
Check if two floats are close.
Deserialize a serialized audiosegment from a serialized string.
Create a pydub. audiosegment from a file.
Create a new audiosegment from a numpy array.
Return a new audiosegment with the reduced data.
Serializes the state to a pickled string.
Choose the offset front id from candidate offsets and offset front ids.
Given a list of offset_fronts find the offset_front_id that is closest to
Given a onset_front_id and a list of onset_fronts return the
Match the onset_front_id to the onset_front_id that matches the
Given a list of onset_fronts and offset_fronts return a list of consecutive
Get front id from index.
Returns a generator of all the front ids that have not been yielded at a time.
Given onset_fronts and onset_front_id return a list of tuples
Remove overlaps from fronts.
Remove all fronts that are too small.
Merge adjacent segments into a single segment mask.
Separate masked masks by a threshold.
Downsample one or the other mask.
Simulates an asa task with masks and stft
Bandpass filter.
Apply a lowpass filter to data.
Convert a list of lists to a tf input matrix and outcomes onehot.
Expands the data set and standardizes the data set and returns the expanded data set.
Return True if the elements in a are not unmatched False otherwise.
Loads the confusion matrix from the audit file.
Convert a list of lists to a FITS input matrix and outcomes.
Update pypi_api_url from pip configs.
Automatically detect requirements files.
Handles the given error code.
Get information about the stream.
Open an object stream.
Return the XML element of a child element with the specified name.
Return the next sibling of this node.
Return the previous sibling of this node.
Set the name of the LSL document.
Set the value of the LSL element.
Append a child node to the LSL subtree.
Prepend a child node to this LSL element.
Append a copy of this element to elem.
Prepend a copy of this element to a new element.
Remove a child element from this element.
Returns a list of streaminfo objects representing the results of this LSL query.
Pair a word.
Autocomplete for n - grams.
Compute the n - grams of an edge token.
Iterate over the given pipe applying processors to each element of the pipe.
itertools. imapunorderediterator returns an iterator over the results of applying func to each item
Return a list of fuzzy words.
Fuzz a word.
Fuzzy index word.
Extend the results of extrapolating the results.
Print help to stdout.
Print information about the database.
Get the value of a database key
Compute the geohash for the given latitude and longitude
Indexes a document.
Get the best score of a word.
Send a request and return the response.
Map a list of requests to a stream.
Get bits from an array of bytes.
Reinterptet harray to bits.
Convert a slice value to a slice.
Find all files in a directory that match a pattern in a directory.
Return True if all elements in iterable are contained in sigorval.
staticforeach - For each item in items using bodyfn
Logarithm to ceil.
Return True if num is less than or equal to num.
Add a case to this endpoint.
Set the default values for the given statements.
Registers the interface and unit interfaces for the given object.
This method is called before the simulation starts.
Logs a change of sig to nextval.
Processes a Process object.
Autoadd agents to a unit.
Get the DCK associated with this node.
Yield distinct elements from iterable.
Group items in a collection by a function.
Flatten a list or tuple of iterables.
Merge a nested if - from - else statement into this one.
Remove all unconnected signals from the netlist.
Check if the given proc is an assignment or not.
Try to merge two hwprocess objects.
Reduce a list of processes by rank.
Called when a write request is received.
Given a list of hdlstatements return the name of the outputs that have no genericname
Cut off all drivers of the statements in the dstsignal.
Synthesize an entity with the given name and interfaces.
Get the maximum id of the maxstmidforstm of the given stm.
Return the maxstmid for each statement in the proc.
Write data to the simulation.
Synchronizes self. _direction to self. _masterdir
Loads all declarations of the interface.
Return a list of all signals for the interface.
Get the physical name of the port.
Return the bit length of this attribute as a string.
Return sensitivity by operator.
Convert a value or a value of a given type to a given type.
Reinterpret bits to hstructt.
Return the number of full words between start and end.
Group words by wordindex.
Packs the given data into a sequence of words.
Cleans the signal meta for all stms.
Return a set of all closures for the given statements.
Discovers the casualsensitivity sequence.
Get the TLS context for this HWT.
Called when the reduction operation is performed.
Merges this RDD with another RDD.
Return True if stmsa and stmsb aremergable False otherwise.
Merge a list of statements into a single list of statements.
Merge a list of statements into a single list.
Try to reduce a list of statements.
On parent event dependent.
Set the parentstm to the parentstm.
Registers the given statements into the given target list.
Destroy this connection.
Cleans the AS subunit.
Recursively flatten the fields of a struct or hstruct.
Convsign this value with the given signed value.
Add a sensitivity processor to the set of active processes.
Simulate a set of conds.
Connects an import signal to a subsimunit
Create a vector from a Python value.
Process the hwprocess object.
Evaluate a parameter.
Set the value of the field.
Create a htypefromintfmap from an interfacemap.
Remove all resources from memory.
Get the indexcascade.
Create a new value from a Python object.
Attempt to automatically cast a sigorval to the specified type.
Try to re - interpret the given value as a cast of the given type.
Recursively walk the parameters of an interface.
Connects the given packed interface to the given dst interface.
Pack an intf into a sig string.
Synchronizes the current context with the targetplatform.
Register an interface as an interface handler.
Tries to reduce a sig by val. If val is a fullvld or num_
Attempt to reduce a sig by using a reductionxor operator.
Return a namescope for the base namescope.
Return True if obj is a declaration of obj.
Get the basis function for a given object.
Return the simbitst of a given width and signed value.
Get the name of a constant.
Cut off drivers of a signal.
Load from a numpy array.
Load the bitaddr from the given HDL struct.
Load from a HDL type.
Get the width of the item.
Flatten this structure into a sequence of tuples.
Signs a value with a given width and returns it.
Get the indent number for the given indent number.
Check if an object has a nameavailability check.
Register a parameter.
Update self and otherobj parameters from self and otherobj.
Register a unit with the parent unit.
Register an interface.
Register a new array with the parent object.
Get a single driver.
Evaluate all operands and return the result.
Create a new signal with the given operands and rest.
Return a copy of this context with the specified indent.
Try to connect to an intfname if it doesn t exist.
Propagate clk from obj to obj.
Propagate clkrstn to all units in obj.
Propagate the clkrst of an object.
Propagate the RST of each unit of the object.
Propagate the RST to all units in obj.
Iterate over all bits in a signal.
Serialize the obj and the priv attribute of the parentunit as a string.
Internal helper for evaluating serializeonce_eval.
Serialize the params of an object to a bool bool and priv.
Get the full name of the object.
Add associations to each object in the collection.
Convert a unit to a SimModel object.
Disconnect signals from the unitorintf from the modelcls.
Simunites a simulation using VCD.
Initialize ontwritecallback.
Connect this signal to another signal.
Register an internsig.
Connect the driver to the source endpoints.
Get the internsig of the input direction.
Return True if sig is an evdependenton of process.
Add a new process to the queue.
Add a hdlproc to the run list.
Schedule a combupdatedoneev event.
Schedule the applyvalues and runseqprocesses to run.
Conflict resolution strategy.
Run all the combproces in the outputcontainers.
Runs all the seqprocs in the output container.
Apply the values to the values to apply.
Read a value from a signature.
Write a value to the simulation.
Add a process to the queue.
Simulate a unit.
Convert a list of ternary ops to a list of ifcontainers.
Compute the distance between two hashes.
Calculate the average hash of an image.
Calculate the distance between two images.
Setup a viziodevice.
Update the state of the device.
Mute the volume of the device.
Increase the volume level and increase the volume level.
Decrement the volume level.
Set the volume level.
Resets the piece_bb and pieces_in_hand.
Return a piece of the given square.
Removes the piece at the given square.
Set piece at the given square.
Returns True if move is suicide or checkByDropping_pawn.
Returns True if the board was attacked by a king square.
Returns True if the game is over.
Returns True if the board is a checkmate move.
Returns True if the transposition of the zobrist is a fourfold repetition.
Pops a piece off the stack and removes it from the board.
Returns a list of pieces as a string.
Push a move from one usi to another.
Return the zobrist hash of the board.
The symbol of the piece.
Create a piece from a piece symbol.
Return the usi string for this piece.
Create a piece from a usi string.
Yield parsed commits from the given data.
Parse a commit string into a dictionary.
Executes the given command line with the given configuration.
Generate a yaml file from the initial values.
Cast the value to the appropriate type.
List all dates between first_date and last_date
Parse a string as a date object.
Load a currency file.
Set missing rates to none.
Get the exchange rate for the given currency and date.
Animate a list of frames.
Read a record from the file.
Write a record to the file.
Map words from start to end.
Comments of the record.
Closes the DAF file and all its segments.
Compute the position for the given tdb.
Closes the DAF file and all its segments.
Load the data from the daf file.
Visit a call node.
Appends a violation to the list of violations of the logging statement.
Check for whitelisted keys and values.
Extends the logging visitor to add a string violation to the violations list.
Check if the given node is a whitelist.
Visit an excepthandler node.
Detect logging level of a node.
Get the name of the except handler.
Get the id attribute of the given value.
Check if the given node is a bare exception.
Add an error violation to the violations list.
Delete a file from the database if it exists.
Returns the rendered content of the PDF.
Overrides render_to_response to handle pdftemplateresponses.
Quotes a string using unidecode.
Configures the options for the specified module.
Convert a string to an underscore string.
Auto - index the indexes for the given mcs object.
Parse a file and return a list of prices.
Load content from a file.
Parse a line of pricemodel.
Translates the given symbol to its canonical representation.
Loads the symbol maps from the database.
Get the default session.
Import price data from a CSV file.
Get the latest price for a symbol
Download a price.
Prune all security symbols.
Get the default session for the price database
Add a new symbolmap.
List all available symbol maps.
Get a symbolmap by its identifier.
Read lines from a CSV file.
Map an entity to a price model.
Map a model to a price.
Read the configuration file.
Returns the path to the config template.
Create the user config file.
Returns the full path to the config file.
Get the contents of the file.
Set the value of an option in the configuration file.
Get an option from the configuration.
Save the configuration to a file.
Parse a symbol and return the namespace and mnemonic.
Add a price to the repository.
Download a price.
Returns the default session for this DAL session.
Returns a list of prices for the given date and currency.
Get prices on a specific date.
Prune all security symbols.
Remove all prices for a security symbol from the repository.
Private method to download a price from finance quote.
Get all securities in the security repository.
Partial version of state_partial.
Update the child calls of this function.
Recursively descends the tree.
Test if the student has chosen the correct option.
Return a list of all items defined in this collection.
Get the x attribute of a parser.
Test if the state has a context loop.
Check if all solution parts have a context with the given names.
Check that a student and solution part exist.
Check that the given index is in the student and solution parts.
Get true anomalous.
Initialize the ldap3 login manager.
Add a new LDAP server to the pool.
Remove a connection from the ldap3 manager.
Cleanup LDAP3 manager connection.
Authenticates the given username with the given password.
Authenticate a user using a direct bind.
Returns a list of user groups for the specified dn.
Get user information for a given dn.
Get user information for a given LDAP username.
Get a single object from the LDAP server.
Returns a connection to the ldap3 manager.
Establish a connection to the server.
Create a connection to the LDAP server.
Destroy a connection.
Search for documents in the container.
Search for documents in the database.
Search for all artifacts in a collection.
Speak the database.
Announce a command.
Update secrets and base settings.
Update the headers of the bot.
Check if the client has any secrets.
Download a file from a url and return its name.
Streams data from a URL to a stream.
Update the authorization token for the bot.
Get a folder or create it if it doesn t exist
Reads the message from the response.
Get the bucket object for this bucket.
Update self. secrets and self. base
Initializes the client for globus_sdk
Load the auth and transfer settings.
Lists all logs and prints them.
List all logs for this bucket.
Create a folder in the specified endpoint.
Initialize transfer client.
Searches all the containers in the container and returns a list of matches.
Show the status of the backend.
Add a variable to a backend.
Remove a client variable from a backend.
Activate a backend.
Delete a backend from the client
Update the base for the given image.
Create a basic auth header.
Generate a signature for the given payload and secret.
Generate a header signature for the given payload and request type.
Sends a DELETE request to the specified URL.
Sends a HEAD request to the specified url.
Paginate GET requests.
Verify that the certificate is valid.
Remove an image from the registry.
Get a lookup from the version file.
Returns a list of install requirements for all modules in the lookup.
Get the singularity version from the environment variable.
Check if a software is installed.
Return the absolute path to the install directory.
Return the thumbnail path for the sregistry.
Run a command and return the output.
Get metadata for a given image file.
Update the current user s secret list.
Print the output of a response to a file.
Destroy all registered commands.
List logs for a container.
Returns a list of all collections in the account.
Update the secret settings.
Executor for ipython.
Get all manifests for a given repository.
Get the manifest for a repository.
Get the download cache for the given destination.
Extract environment variables from config file.
Update the base and artifacts.
Update the headers and headers with the current token.
Get the metadata for this job.
Get the settings for a specific client.
Get and update a setting.
Update a setting on the backend.
Generate a signature for a request.
List all registered builders.
Load templates by name.
Get a subnet by name.
Run the build.
List all available blobs in the bucket.
Search all buckets and return the results as a list.
Entry point for the command line interface.
Example entry point for sregistry.
Initialize the database with the given database path.
Get the build template.
List all endpoints in the database.
List all files in the specified endpoint.
Share a dropbox image.
Reads the client secrets file and returns them as a dict.
Builds the S3 bucket storage and compute services.
Delete an object from a bucket.
Delete a bucket object.
Destroy a compute instance.
Returns a dictionary of subparsers for the given parser.
Generate a string of descriptor noun and numbers.
Get a temporary directory for the registry.
Extract a tar archive to output_folder.
Extract a tar archive to output_folder.
Get the hash of a file.
Read a file and return its content.
Read a JSON file and return it as a dictionary.
Clean up a list of files.
Push an image to S3.
Get or create a collection.
Get a collection by name.
Get a container by name and tag.
List all images in the registry.
Inspect a container.
Rename an image.
Moves the specified container to the specified path.
Remove an image from the container.
Parse a header from a recipe string.
Find a single recipe for a given filename.
Create a build package from a list of package files.
Update blob metadata.
Formats the name of a container.
Determine if the user should use a colored terminal.
Emits an error message if level is not specified.
Write a message to the given stream.
Add a table of rows to the table.
Push an image to the globus transfer client.
Get a template by name.
Get the manifest for a tag in a repository.
Get the build template to use.
Update self. secrets with client secrets.
Context manager that raises errors for S3 errors.
Create a proxy from a temporary file.
Get the gravatar url for a user or email.
Generate a gravatar url for the given email.
Check if a user has a gravatar.
Generate a gravatar profile URL for the given email address.
Generate a generator of chimera blocks.
quotient a set of chimera blocks into a graph.
Enumerate a set of SMILES with a list of SMILES.
Enumerate a molecule.
Apply the transform to a molecule.
Canonicalize a molecule.
Validate a set of smiles.
Standardize a set of smiles.
Enumerate tautomers with smiles.
Canonicalize a set of smiles and return a canonicalized Tautomer.
Return the parent tautomer of molecule.
Return the parent fragment of a molecule.
Remove stereochemistry from mol and return mol.
Return a molecule that is the parent of the given molecule.
Charge the parent of a molecule.
Entry point for molvs.
Remove a molecule from the molecule.
Choose a molecule based on a molecule.
Integrates an IPP using a predefined or aadaptive distribution
Get memes of org.
Get teams of org.
Get all repos for a given repository type and organization.
Get the total number of contributors for a given repo.
Get the list of pull requests for a given repo.
Get all the issues for a given repo.
Get the readme of a repository.
Get a license from a repository.
Get all commits for a given repo.
Write organization json to file.
Write the totals to a file.
Write the languages to a file.
Check if a directory exists and if not create it.
Remove a date from a file.
Returns a list of all gov orgs.
Create an enterprise login session.
Check the limits of the api_rates in the gh_session.
Establish a connection to the given URL.
Query gh_session for repositories.
Get an organization from the logged in user.
Write the stargazers to a file.
Create a project from a Gitlab repository.
Convert a license string to a dict.
Get information about all repositories.
Get all releases for a repository.
Get all referrers for a particular repository.
Get data from Github.
Write a JSON file for all repos in this repository to disk.
Write referrers views and clones to a file.
Check the data redundancy of a file.
Write data to a file.
Write the referrers to a file.
Process doecode json file.
Process a url and return a generator of record objects.
Process a file or URL.
Login to GitHub.
Get the memes of the org.
Write logins and emails to a file.
Establish a connection to the given url with username and password.
Connect to Gitlab.
Query projects by repositories.
Compute labor hours for a given location.
Remove any null values from a dictionary.
Read a gql query from filepath.
Wait for the current time to reset.
Countdown the number of seconds until the number of seconds have passed.
Load data from a JSON file.
Save the data to a JSON file.
Create a connection to the TFS API.
Create a client for a TFS project analysis service.
Create a TFS core client.
Create a GTFS Git client.
Create a tfs_tfvc client.
Get a list of git repositories for a project.
Get a list of all branches in a TFVV collection.
Get all the commits for the current year.
Calculate the total number of commits for each week.
Write the current commits to a file.
Log a timing value.
Write a histogram stat to the log.
Rolls up all gauges and histograms.
Convert a value to an enum value.
Convert a value to a python value.
Returns the name of the given value.
Resolve a path to a set of paths.
Projects a list of usls into a dictionary of lists of lists of lists of lists of
Return the mean of the sum.
Marks the current rate with the given value.
Return the mean rate of the gauge.
Mark the given value as at most value.
Send a metric to the client.
Serializes a metric to a list of strings.
Format a metric string.
Add a metric to the batch buffer and send it to the client.
Override get method to handle missingoption errors and missingsection errors.
JSON safe version of _json_safe.
Get or set an option if it doesn t exist or set the default value.
Given a list of ledger codes return a map of GUIDs to their GUIDs.
Get the choices and current division.
Map exact invoice numbers to foreign invoice numbers.
View the given injector.
Return the form view for the given injector.
Return a view of the view of the given injector.
Returns an api view for the given injector.
Create a generic API view for the given injector.
Returns a viewset for the given injector.
Create a stream from a file descriptor.
Read data from the socket.
Close the connection.
Watch a file or directory.
Remove an alias from the watch list.
Setup a new watch descriptor.
Setup the IOLoop.
Get an event from the stream.
Touch this message.
Update short_interval and long_interval accordingly.
Update short and long intervals based on failure.
Close all open connections.
Connect to Nsqd.
Query the lookupd endpoint.
Set the maximum number of in - flight connections.
Logs a warning with the given message.
Add a callback to a listener.
Remove a callback from a listener.
Triggers all registered listeners for the specified name.
Publish a message to a topic.
Set the feature transform mode and degree.
Returns the prediction for the given input data.
Clean up fastq pairs.
Read depth_dic_coverage from a depth_file.
Set the path to the template file.
Set the channel names for the main channel.
Render a Jinja template.
Render the template and return it as a string.
Add sink to main_forks and update context.
Update the attributes of this directive with a dictionary of attributes.
Set the secondary input strings for the given channel dictionary.
Parses an assembly file and populates the contigs.
Get the GC content of a sequence.
Returns the length of the assembly in bytes.
Write the assembly to a file.
Write the report to a file.
Remove all inner forks from text.
Run insanity checks for pipeline_str.
Given a list of pipelines and a list of pipelines return the source lane of the pipeline
Get a list of lane tokens from a lane string.
Returns a list of dictionaries with a linear connection between lane and plist.
Add unique identifiers to a pipeline string.
Remove unique identifiers from pipeline links.
Check if required files exist.
Return a dictionary mapping header names to positions in the header string.
Compute the MMS of a string.
Calculate the size coverter of a string.
Get the pipeline processes from the log file.
Clears the inspect information for all processes.
Update the status of the barrier.
Retrieve log lines from a file.
Return cpu and mem resource warnings.
Update the internal state of the parser and trace parser.
Display the overview of the screen.
Moves the cursor to the top of the screen.
Moves the cursor to the right of the specified direction.
Get the last n lines from the log file.
Prepare the static information for the pipeline.
Reads a DAG file and converts it to a dictionary.
Get the hash of the run file.
Get the nextflow filepath from a log file.
Main entry point for the FASTA program.
Brew innuendo.
List all available recipes.
Validate a pipeline string.
Build the upstream pipeline for the given process descriptions.
Builds a downstream pipeline for the specified task.
Runs the auto pipeline for the given tasks.
Return a string representation of a component.
Write report to output_file.
Entry point for the log collector.
Fix contig names in asseembly file.
Clean up fastq files.
Parse a list of files.
Parse a file and store the data in the storage.
Get contig id from contig string.
Writes the report data to a JSON file.
Parse an assembly file and populate self. contigs.
Get summary statistics for contigs.
Returns a list of contigs and contigs for the given window.
Private function to calculate the GC value of a string s.
Returns a list of gc residuals for the contigs in the contigs.
Runs the sample_id with the given fastq pair.
Writes a report of the quality of a sample to a JSON report.
Parse the bowtie log file.
Parse process name and directives.
Add a dependency to the process map.
Searches the tree for a template in parent_lanes and returns a boolean indicating whether the
Build the header for the template.
Build the footer for the template.
Sets the initial process.
Set the secondary channels for each lane in the chain.
Set the status compiler and report channels.
Return a string representation of the configuration.
Set configurations.
Write a dag to a file.
Write the configurations to the nf file.
Exports the parameters of all processes.
Export the directives for all processes.
Build the nf file.
Set the number of kmers for a kmer.
Get the report id from the log file.
Update the trace_retry flag.
Update the pipeline status based on the current state of the pipeline.
Send a live report to the server.
Initialize the live reports for the broadcast address.
Close the connection to the broadcast address.
Convert a FASTA file into a string.
Main entry point for mash_output.
Print a message with a colored color.
Processes a process map.
Get the minimum and maximum of a qualifier string.
Filter assembly lines that are shorter than minimum coverage.
Get the assembly size and contig size of an assembly file.
Run the filter_assembly function.
Convert camel case name to lower case.
Collects the process map for all components.
Main entry point for dendropy.
Map w to data.
Apply median filter to x.
Computes the Gaussian Gaussian for the given signal.
Compute the squared distance between x and x.
Compute the NC of x and g.
Apply a Gaussian filter to the input data.
Compute the NC distance of x.
Circular shift of array x.
embedded_space computes the embedded space of x.
Plot the formatting of the est_file using matplotlib.
Plot all boundaries in all_boundaries.
Plot the labels of all_labels in gt_times.
Get a list of feature segments from a FITS file.
Convert a list of feature segments to a 2dfmc maximum.
Fit the scatter plot to x and y.
Read references from an audio file.
Find the estimation of a jam.
Returns a list of algorithm IDs for all boundary algorithms.
Get the configuration for a feature.
Returns a list of filestructs for all the audio files in the specified directory.
Read a jams. jams. jams. jams. jams. jams
Get the duration of a feature file.
Write mirex times to out_file.
Returns the path to the audio file in the specified directory.
Given a beat times and a song align it with the beat times.
Estimate the times and frames of the beats.
Read an ann_beats file.
Compute the beat sync features.
Returns a list of all the parameter names that are not in the global param names.
Compute framesync times for each feature in the RDD.
The number of times each frame has been recorded.
Features in the audio format.
Preprocess the feature and return the features object.
Preprocesses the est_idxs and est_labels and returns the indices and
Entry point for the command line interface.
Print the mean of the results.
Computes the information gain of the beat.
Process a track.
Get the name of the results file.
Compute all features for all the features registered in msaf.
Process a MSM file.
Gaussian cost function for Gaussian distribution.
Normalize the log - likelihood of a function.
Normalize a float so that it is less than or equal to floor.
Returns a numpy array of time frames for the given dur and anal.
Remove empty segments from the time series.
sonify clicks in audio.
Synchronize labels between new_bound_idxs and old_labels.
Process a segmentation level.
Align the end hierarchies of two hierarchies.
Compute the distance between the given indices.
Estimate the knee of the k - means.
Get the clustered data for a given label index.
Run kmeans on the input x.
Compute the BIC distance between the means and labels.
Returns the magnitude of x.
Convert a JSON string to a bounds array.
Convert a bounds json file to a numpy array.
Convert a JSON string to a list of labels.
Convert a beats json file to a numpy array.
Compute the 2D FFT shift for a 2D array.
Computes the labels for a given rank and r.
Filter activation matrix.
Returns the module for the given boundaries_id.
Get the module for the given labels id.
Run the segmenter on the given audio_file using the given parameters.
Run segmenter on a flat audio file.
The main entry point for the spool script.
Set the task for the given translator. If translit is True the task will be translit
Spool the given iterable to maxlen words.
Source a file from inputstream to target.
Return a dictionary of translation codes for a given language.
Prints the table for the given language.
Remove nodes and edges from a network.
Write a Network object to a pandas. DataFrame.
Create a Network from a Pandas HDF5 file.
Process a node and return a dict of node attributes.
Make a query to the OSSM API.
Build a query string for a node.
Return True if the value is a regular expression.
Compares the given value against the expectation.
Compares expr with value using regex_expr
Triggers the methods of the given instance.
Get a matcher by name.
Initialize a matcher by name.
Set the body of the message.
Set the body of the response as JSON.
Set the value of key to val.
Append a list of functions to the target.
Triggers the given request on the given instance.
Sets the request headers.
Ensures that the specified headers are present in the request.
Ensures that the headers present in the request are present.
Add parameters to the request.
Set the body of the request.
Sets the JSON response.
Set the XML content of the request.
Reads a file and writes it to the response body.
Persists the current state to the database.
Set the runtime error.
Reply to the mock.
Matches a request against the mock.
Sets the mock engine to use.
Create a mock and add it to the engine.
Remove a mock from the mock list.
Activate the mock engine.
Disable the mock engine.
Determines if the request should be used to use the network.
Matches a request against all filters.
Returns a copy of this request.
Context manager that temporarily disables the engine.
Add interceptors to the list of interceptors.
Remove interceptor with the specified name from the list of interceptors.
Get a setting from the settings dictionary.
Decrypts the decrypted column and returns the decrypted sql and params.
Overrides pre_save to add the original attribute to the model instance.
Returns the SQL placeholder for the given value. If the value is none or the value starts with
Get a column for the given alias.
Return the placeholder for the given value.
base_regression computes the base_regression
Variance of the covariance matrix.
Recurse through all terminals in the tree.
Calculates the averages for each node in the tree.
Calculates the explained variance of the tree.
Computes the regression of the tree.
Set the tc attribute of the interp1d function.
Calculate the number of branches in the tree.
Calculates the cost of a branch at a given node.
Attaches all branches in the tree to the merger cost.
Normalize a profile.
Set gtr_site_specific property.
Set the GTR object for this analysis.
Setter for _seq_len attribute
Attach sequences to nodes.
Prepares the tree for tree generation.
Set up and bad branches for all terminals in the tree.
Calculate dist2root for all clades in tree.
Get the branch mutation matrix for a branch node.
Return the expanded sequence of the given node.
Return the state of the node at pos.
Returns the LHS of the sequence at the given position.
Compute the ancestral likelihood of each node in the tree.
Returns the maximum branch length to use for the given node.
Calculate the optimal branch length for a given node.
Reconstruct the alignment of the tree.
Return the diagonal of the diagonal of the matrix.
Create a custom GTR with the given parameters.
Check the fixation of the q parameter.
Calculate the optimal T of a sequence pair.
Probability density function for t profiles.
Evolve the given profile at the given timestep t.
Return the logarithm of a sequence.
Set branch length mode.
Plot the root to the tip.
Print the lh of the tree.
Add a coalescent model to the tree.
Find the best root of the tree.
Assembles the tree of the given parameters.
Create a GTR based on the model and gtr_params
Reads a VCF file if it is a VCF file.
Calculate the FWM of a distribution.
Create a delta function for a distribution.
Assign dates to branches in tree.
Setup the treeregression function.
Make a time tree.
Returns the timetree likelihood of the tree.
Convert all dates in the tree to datetimes.
Return the date uncertainty due to the rate of the given node.
Returns the minimum value of an interpolation object.
Calculate the median interpolation of a interp_object.
Calculate the numeric date for a given datetime.
Create a FrequencySeries from a FrequencySeries.
Close the connection to the server.
Receive a line from the client.
Send data to the client.
Send an instruction to the client.
Convert unicode_str to unicode if possible.
Load an inst_term from an instruction.
Encodes an argument as UTF - 8.
Encode the instruction into a string.
Returns the URL for the class for the given class.
Returns the URL for this instance.
Returns the url for a class.
Download a file or a temporary directory.
Get the parent object of this job.
Ask the user for credentials.
Login to the solvebio server.
Display the current user s whoami information.
Print user information.
Generate a range of genomics from start to stop.
Return a new chromosome with the specified position.
Returns a list of facets for this query.
Processes a list of filters.
Moves the cursor to the next item in the buffer.
Execute a query and return the results.
Migrate a dataset to another dataset.
Entry point for the solvebio command line interface.
Construct an instance from a dictionary of values.
Logout from the API.
Get the child object of this task.
Parse snpeff info.
Get the credentials for the current connection.
Save the configuration to a file.
Format val according to valtype.
Build a row from a list of cells.
Build a line from a list of column widths.
Return a list of attributes for a row of mediawiki cells.
Migrate a dataset to another dataset.
Upload files to Vault.
Validates that the full path is valid.
Validates that the given url is a valid API host URL.
Annotate records using the annotator.
Evaluate the expression.
Setter for _format_name attribute.
Register a new formatter for the given format name.
Tabulate data using tabulate.
Return the path to the user config file.
Return a list of system config files.
Returns a list of all the additional files in this directory.
Write the default configuration file to the user config file.
Read a list of config files and validate them.
Truncate a string if it is longer than max_width.
Replace all occurrences of replace in s with s.
Call a list of commands in sequence.
Apply an option to a command.
Initializes the options for lint.
Run the command.
Runs the command.
Truncate a string of data and headers.
Format a row of headers into a formatted string.
Vertical table adapter.
Create a table adapter for the given data.
Checks if the given type is a valid number.
Return True if the given type is a boolean.
Checks if the given type is a binary type.
Generate a key for the given template.
Generates a keypair for the given templatepub and templatepriv using the mechanismrsageneratekey
Find all objects in the specified template.
Insert image into qr_img.
Show a panel of genes.
Return the first weekday of a datetime. timedelta object.
Repeats the current date by the given day.
Repeats the repeats between the given start and end dates.
Helper function for repeating the biweekly event.
Handle a single chunk event.
Export all variants in a given adapter to a list of variant objects.
Export MST variants to a list of document lines.
Create a new user and institutes.
Get a list of str variants for a case.
Retrieve information about a variant in an SV store.
Get a string representation of a variant.
Verify a variant.
Export a Clinvar variant.
Get cancer variants for a given case.
Create a new Variant Acmg.
Handles the evaluation request.
Returns the ACMG for the given criteria.
Upload a panel to the institute.
Download verified excel files.
Given a list of HGNC IDs return a dictionary of genes that have the specified alias
Add incomplete penetrance genes to genes.
Make a matchmaker request.
Get a list of matchmaker nodes for a given MME token.
Get the coordinates of the cytoband coordinates at the given position.
Get the subcategory for the given alt_len ref_len and category.
Get the length of a sequence.
Get the end of a string.
Parse the coordinates of a variant.
Update a panel.
Export a panel.
Edit a gene in a panel.
Loads the delivery report for a case.
Return a dictionary of all HPO terms that match the query.
List whitelist objects.
Build a phenotype from a phenotype_id.
Generate a gene from a HGNC ID.
Return a list of JSON terms for all genes in the database.
List institutes.
List all transcripts in a build.
Display events for a given day.
Returns a dictionary of variants for a given case.
Get a list of variants for a given institute and case
Retrieve a variant from the store.
Return the variants export header for a variant case object.
Get the predictions from a list of genes.
Find a BAI file in a BAM file.
Get the observations for a variant and variant.
Parse a gene into a list of transcripts.
Return a string representation of a Transcript object.
Return the end position of the variant in the variant_obj.
Returns the frequency of the most common variant.
Convert a variant object to a human - friendly string.
Generate a thousandg link for a variant.
Generate a cosmic link for a variant.
Generate a beacon link for a variant.
Generate a URL for a given variant object.
Returns a human - friendly string representation of a variant.
Returns a list of expected inheritance models for the given variant object.
Returns a list of all callers in the variant object for the specified category.
Get tumor variants for a given case.
Export a Clinvar variant from a store.
Get a submission for a given submission.
Create institute case and variant for a given variant in a store.
Submit an evaluation for a variant in a case.
Computes the evaluation of the evaluation_obj.
Upload a panel of HGNC symbols to store.
Write verified variants to a temporary excel file.
Export all genes in the specified adapter.
Parse clnsig acc revstat and transcripts.
Parse a compound_info string into a list of compound objects.
List all genes in a build.
institute_id institute_id case_name is the name of the case to be instituted
List collections.
institute an internal adapter
Get a file handle for the given file path.
Get the network number from the request.
Get the next network and the previous network.
Checks the year and month for validity.
Check the weekday of the given year month and day
Parse a list of samples and return a list of individuals.
Parse a PED stream and return family_id and samples.
Builds an evaluation object for a given variant and institute.
Determine whether a CMG term is likely to be a pathogenic or not.
Returns a list of variants in a case.
Returns the sanger variants for the given institute and case.
Returns a variant object for the given document.
Returns a list of gene variants in the database.
Returns a list of variants verified for the institute_id.
Get all the causatives for a given institute.
Checks the institutes in the variant collection.
Generator that yields all other causative variants that have the same name as variant_obj
Delete variants for a case.
Returns a list of variants that overlap the given variant object.
Returns a list of all evaluated variants for the given case.
Given a list of variants and a sample_name sample_name and a category sample_
Get a mongo connection.
Given a list of variant_ids and a form field return a list of objects that can be
Given a submission_objs list of clinvar submission objects return a dict with the header
Returns a list of lines for each submission object in submission_objs.
Load a panel.
Build an exon from exon_info.
Delete a panel from the Gene Panels DB.
Drop indexes for all collections in the database.
Sends a user notification to the specified mail.
Drop genes from the adapter.
Drop exons from build.
Delete a case.
List individuals for a given case.
List all cases associated with a given case.
Load a user from the store.
Login to Google.
Build an institute object from an internal id and display name.
Delete an event from the event collection
Return a list of events for a given institute.
Returns a list of user events for the specified user.
Remove a phenotype from a case.
Parse the genotypes of a variant into a list of genotypes
Check if the given coordinates are within the given chromosome.
Returns a dict of terms that match the search term.
List all transcripts in the database.
Load exons from ensembl.
Load a region from a HGNC.
Get all events for a given month.
Return a list of live objects for the current time.
Parse requirements file and return a list of install requirements.
Get the existing gene for a panel.
Update a panel in the store.
Create a new panel and add it to the store
Export a panel object to a dictionary.
Return information about the given archive case.
Migrate a case to another case.
Print a list of HPO terms.
Configure extensions.
Register blueprints.
Show aliases for a symbol.
Build a panel object from a panel info dictionary.
Write verified variants to a file.
List all variants in a case.
Get a variant string from a variant object.
Start mongo server.
Generate the md5 key for the given list of arguments.
Initialize the app.
Sets up the database.
Index the adapter.
Setup the database.
Demonstrate the institute.
Setup the database connection.
List institutes.
Parses a list of models and a case id into a list of genetic models.
List gene panels.
Add institute object to the institute collection.
Get institute object by institute_id.
Check if a date is a valid date.
Get a datetime object from a date string.
Generate a list of HPO genes.
Parse a rank score entry for a case.
Create a new user for institutes.
Check if a mongo connection is established.
Load a delivery report from the database.
Add a user object to the user collection.
Generate a pileup template.
Load exons from a list of exon lines.
Update the compounds for a case.
Add links to a gene object.
List all genes in a HGNC symbol.
Parse a list of HGNC lines into a list of HGNC Gene objects.
Get the open Clinvar submission for the given user and institute.
Update a Clinvar submission by its id.
Get the id of the Clinvar subm submission for the given submission_id.
Adds a submission object to the submission collection.
Update the status of a user s submission.
Returns a list of submissions for a given user and institute.
Delete a Clinvar object from the database.
Convert a case to a dictionary of Clinvar objects.
Parse a list of hpo lines into a list of dicts.
Get all genes.
Get a list of genes associated with a HGNC symbol.
Get a list of all genes.
institute_id institute_id institute_id and case_name
Returns the institutes for the specified login_user.
Get the HGNC ID for a given gene.
Create a new gene panel.
Load diseases from mim files.
Load disease terms from genemap_lines.
Parse the frequency of a variant.
Parse the SV frequencies from a variant.
List users.
Compares existing panel with new panel.
Update the MIM version of a panel.
Add a gene panel to the panel collection.
Find a panel by id.
Delete a panel from the panel collection.
Return the gene panel with the given panel_id.
Get a list of gene panels for a given panel and institute.
Convert a gene case object to a dictionary of panel names and panel names.
Update a panel object.
Add a pending action to a panel.
Returns a set of clinical symbols associated with a case.
List all cases in a collaborator.
Emits a record to the SMTP server
Load indexes from the database.
Update indexes for all collections in the database.
Drop all indexes from the database.
Builds a variant query based on the given query.
Clinsig query.
Apply coordinate filter to the query.
Filter genes based on a dictionary.
Remove the database from the database.
Parse a panel from a CSV stream.
Insert multiple HGNC gene objects into the database.
Insert multiple transcripts into the database.
Insert multiple exon objects into the database.
Get the transcripts associated with a HGNC identifier.
Get the HGNC ID associated with the given HGNC symbol
Returns a list of HGNC Gene objects for the given HGNC symbol
Return all genes in the HGNC.
Return the number of genes in the HGNC collection.
Drop all genes from HGNC.
Drop all transcripts from the database.
Drop all exons from the collection.
Returns a dictionary of ensembl transcripts for the build.
Given a build and a set of genes return a dictionary of the HGNC symbol to the
Find a gene by its alias.
Given a build and a list of genes return a dictionary of genes that have the given alias.
Returns a dictionary of ensembl_genes.
Return the HGNC gene corresponding to the given HGNC symbol.
Add a list of HGNC IDs to a list of genes.
Returns a dictionary of coding intervals for the given build and genes.
Load an OMIM panel.
Retrieve all cases for a given institute.
Get institute and case data for a given institute and case.
Get matchmaker results for institute and case.
Matchmaker.
Delete a matchmaker case.
Generate a PDF for a case.
Solve the given case with the given name.
Get institute and case status.
Assign an institute to a case.
Return a list of hpoterms sorted by term.
Mark a variant as invalid.
Marks a institute as marked with a variant.
Get the delivery report for a case.
Share an institute with a case.
Rerun a case.
Open a research page.
Send a vcf2cytosure command to the institute.
Send a multiqc file to the specified institute.
Get a list of cases for a given case query.
Returns a list of Clinvar submissions for the given user and institute.
Exports the MMT variants for each sample in the case object to Excel.
Return a list of diseases that occur in the given hpo_ids
Convert a VCF to a Cytosure object.
Create a dictionary of institute and case objects for a multiqc institute.
Get the unevaluated sangers for the given institute and user.
Delete a MME from a case.
Returns a dictionary of patient_id = > matchmaker_matches.
Match a case object to a specific match type.
Fetch all genes from a build.
Parse callers from variant. info.
Build a hgnctranscript from a dictionary.
Load institute from internal_id to adapter.
Given a variant and a list of transcripts return the CADD entry for that variant.
Load a case from a YAML file.
Update a variant in the variant collection.
Update a variant rank in a case.
Update the variant compounds for the given variant.
Update all compounds in a list of variants.
Updates all the variants in the specified collection with the values in the specified collection.
Insert a variant into the variant collection.
Insert or update a variant in the variant collection.
Insert multiple variants into the variant collection.
Assign a case to a user.
Share a case with a collaborator.
Send a diagnosis event to the institute.
Marks a case as checked.
Order a variant for a given institute.
Returns a list of sanger events ordered by institute and user.
Validate a variant.
Mark a variant as causative.
Mark a variant as dismissed.
Update an institute.
Parses a sequence of IDs and returns a dictionary of variant IDs and document IDs
Parse a simple id from a sequence.
Generate a MD5 key for a document id.
Convert panel to HGNC IDs.
Given a variant object and a family ID return the new ID.
Returns the number of cases in the institute.
Update the dynamic gene list for a case.
Retrieve a case by its ID and institute ID.
Delete a case from the database.
Add a case object to the case collection.
Replace a case object with a new case object.
Update the caseid for all variants in case_obj.
Submit an evaluation for a variant and institute.
Get the evaluations for a given variant.
Parse a list of transcripts into a dictionary.
Parse ensembl gene request and yield ensembl gene IDs.
Parses the ensembl transcript request and yields a generator of ensembl_
Parse ensembl gene lines.
Parse ensembl exons into a dictionary.
Parse ensembl exon request.
Initialize the logging handler.
Given a list of genemap lines and a list of phenotypes find all the pheno
List phenotypes for a morbid genemap mim2gene and phenotypes
Convert a string to a number.
Formats the month for the given year and month.
Format the day of the week according to the given weekday.
Format the month name for the given year and month.
helper function for popover_helper
Get panel information.
Parse a gene panel.
Show all diseases.
Drop all HPO terms from the database.
Return a dict of all users in the store.
Parse a conservation variant string into a dictionary.
Parse the conservation score from a variant.
Get general case information for a given adapter.
Get a list of cases grouped by total_cases.
Render the context to JSON and return the response.
Get the year and month for the given net and query string.
Check for cancelled events for the given date.
Get the term associated with a HPO.
Returns a list of HPO terms matching the given query and hpo_term.
Returns the disease term associated with the given disease identifier.
Returns a list of disease terms associated with the specified HGNC.
Load a disease term from the database.
Generate a list of HPO gene IDs from a list of HPO terms.
Read HDF5 file.
Setup time axis.
Compute the LSST of the surface.
Blank the DC of the data.
Calculate the extent of a plot.
Plot the waterfall of the surface.
Plot the time series of the time series.
Write the filterbank to a file.
Calibrate the bandpass using the median.
Convert data to coarse.
Calculate the fracpols of a string.
Write fracpols to a file in the format specified by str_i.
Find the closest value to val in xarr.
Rebins the input array d into n_x n_y.
Unpack the given data according to the given nbit.
Compute the difference between two sets of STOkes in a cross - section.
Plots the calibrated diode for the given coarse grains.
Calculate the size of the selection.
Calculates the shape of the selected channels.
Setup start and stop frequencies.
Populate the timestamps from the header.
calc_n_coarse_chan calculates the number of channels that have been coarse
Calculate the number of blobs for the given blob_dim.
Returns True if the selection is too big.
Read all data from the file.
Read a row of data from the FITS file.
Read data from the container.
Update the header of the header.
Print information about the container.
Write the data to a FITS file.
Write the data to HDF5.
Write the data to a HDF5 light file.
Get the blob dimensions for the given chunk_dim.
Returns a tuple of tuples of the chunk dimensions.
Grab data from the data.
tool for guppiraw tool
Read the first header from the file and return it as a dictionary.
Find the number of data blocks in the file.
Prints the mean and std and min values of the next data block.
Plot a histogram of the next data block.
Generate the filterbank header for the filterbank.
Find the size of the header of a file.
Integrate a calibrated channel using a calibrated foldcal.
Get the center frequencies of the frequencies.
Calculate the ratios of the ratios of a set of coarse - grains.
Get a diode spectrogram from a diode spectrogram.
Return the length of the header of a file.
Check if a file is a filterbank file.
Generate the signatureproc header string for a signatureproc file.
Calculate the number of ints in a file.
Return the traceback as a dictionary.
Adds a sub - command parser to subparsers to create a RR record.
Create a parser for the zonefileline parser.
Remove comments from a text string.
Add a default name to the text.
Parse a string of text into a dictionary of json zone files.
Parse a zone file.
Quote a field in a data dictionary.
Parse a schema string into an avro schema object.
Create a python package from a list of classes.
Convert a record to JSON compatible format.
Load a record from a JSON DCT.
Load a JSON string from a string.
Add a record to the schema map.
Get the schema for the given record_name.
Return a string representation of the variable.
Return a dict representation of a record s schema.
Get the root schema dict for the given record.
Generator that reads lines from input_stream from input_stream.
Write a list of outputs to output_stream.
Return a new ordereddict with the given key and value pushed to the front of the ordereddict
Returns a search result for the specified query string.
Returns a search result for the specified filters.
Return a list of entities with the specified attributes.
Get entity from href.
Give a quote to another quote or raise an exception.
Escapes a string or a number of characters in a string.
Create an elementary rotation matrix for an elementary axis.
Calculate the vraderrorsky average for a given magnitude and spt.
calcparallaxerrorskyavg calculates the parallax errorsky average of the magnitude vmini
Returns the magnitude error of the magnitude g.
Returns the magnitude error of the magnitude error g.
Returns the average number of transits for the given beta.
Returns the angular distance between phi1 and theta2.
Transform x y z coordinates to transform x y and z coordinates to transform x y and z coordinates
Transform the coordinates phi and theta to spherical coordinates.
Transform the covariance matrix phi theta into the Jacobian matrix covmat.
Returns the error scaling factor for the observable and beta.
Unquotes the given value.
Iterate over each item in the collection applying a list of functions to each item.
Exclude items from the collection using a function.
Return a new collection with only items matching the given function.
Return a new collection with the elements of this collection until the elements of this collection do not satisfy
Return a new collection with elements dropwhile the given function.
Zip the elements of this collection into the elements of another collection.
Find the first occurrence of the specified method.
Return a list of paths to the Serach system.
Build a list of mini - runs from a list of events.
Print results to output_file.
Print results to output_file.
Clean code from macros and pragmas.
Round x to the next base number.
Return a list of blocking indices.
Calculate the cache access for the predictor.
Runs the kernel and returns the results.
Strip and uncomment the given ASSM lines and return a list of strings.
Strip unreferenced labels from the asm lines.
Select the best block from a list of blocks.
Prompt the user to select an increment.
Insert markers between start_line and end_line.
Yield num spaces from start to stop.
Get the last modified datetime of all files in dir_path.
Check if the arguments are valid.
Main entry point for the script.
Main entry point for the pickle module.
Return symbol position as an integer.
Transform a multidim decl into a 1D decl name and a list of dims.
Transform multidim to 1d reference.
Find a node type in an AST.
Check that the number of datatypes in the variable list is less than or equal to the number
Set the constant value for a symbol.
Returns expr subs of self. constants.
Returns a dictionary of the sizes of the array.
Calculate the relative offset of a variable.
Remove duplicate accesses from destination and sources.
Returns the total length of the iteration.
Returns a generator that yields the current loop stack.
Return a list of indices for the order of the symbols in the source and destinations.
Compiles a dictionary of SymPy access variables to a list of lists.
Compiles sympy_distances and returns a mapping of variable names to their relative distances
Convert global iterator to indices.
Return an iterator over the global variables.
Convert indices to global iterator.
Returns the maximum global iteration of the loop.
Print kernel information.
Print variables information to output_file.
Print constants information.
Print kernel code.
Convert a convolution AST to a symbolic symbol.
Get the indices of the offsets of aref.
Get the basename of a reference.
Get the type of the index in the loop.
Builds a list of declarations for all constants in the index.
Return a list of array declarations.
Returns a list of the kernel loops that are inside the kernel.
Builds the array declarations and a dictionary of arrays.
Find the outermost loop in the loop_nest.
Builds the initializations for the array.
Build a dummy statement based on the list of dummy calls.
Builds a kernel function declaration.
Builds a list of scalar declarations.
Get kernel code from kernel_ast.
Builds a kernel call.
Get the main code for the kernel.
Analyse the IACA instrumented binary file using iaca.
Returns a unique identifier for the file.
Get the last modified datetime of the file.
Get the compiler and flags for this executable.
Parse a perfctr event string and return a tuple of parameters.
Enforces no overlap.
Return the absolute path to the header file.
Align the iteration with the cl boundary.
Returns a list of load factors for each cache level.
Returns a list of all the hits in the cache.
Returns a list of misses for each cache level.
Returns a list of stores for this machine.
Get theevicts of the machine.
Get informations for all cache levels.
Temporarily fix the environment variable.
Configure the argument group parser.
Parse the description from the README file.
Build the item for a course purchase.
Record a purchase request.
Get course content from Ecommerce course.
Get course content from ecommerce.
Update the list of unenrolled users.
Send a course refund email.
Send a notification email to an instructor.
Retry an order.
Fulfill an order.
Get a client for the specified site code.
Get the value of a key. If the key does not exist returns none.
Set the value of a key in the cache.
Get the value of a configuration variable.
Get the filename of the overrides file for the given variable.
Get the value of a dictionary by version.
Return the version number of the Eplus library.
Populates the device from a JSON data dict.
Returns a list of all external files in the database.
Sets the default values for all tables in the database.
Prepares the extensible field descriptors and sets the extensible_info attribute.
Returns a dictionary of the short reference names for all external files.
Get the value of the specified column.
Update the value at the specified index.
Update the device.
Add one or more fields to this object.
Pop a serialized value off the stack.
Insert a value at the specified index.
Delete this record from the device.
Register a record hook.
Register a Link.
Create a regular expression for a given intent.
Returns the number of remaining durations after the given time.
Serializes the object to a dictionary.
Make a HTTP request.
Get a list of services of a given type.
Try to create a directory if it doesn t exist.
Configure a service.
Register a new CA status.
Get a recording state.
Update the status of an event.
Update the state of the agent.
Check if a configuration file is a valid configuration file.
Update the configuration from a configuration file.
Check if config file exists.
Initialize the logger.
Return the home page for the current service.
Serves an image.
Run all modules.
Parse an ical string into events.
Get a schedule of upcoming events.
Main loop for the control loop.
Main loop for the control loop.
Make an error response.
Make a JSON response with the given data.
Get the internal state of the service.
Get a list of upcoming and recorded events.
Get the event with the given uid.
Delete a recorded event.
Modify an event.
Start capturing an upcoming event.
Render the test to a fragment.
Returns a list of resources that have not been seen yet.
Return a dict representation of the object.
Create a frag from a dict.
Add a new content to the document.
Initializes the JavaScript library.
Return a string representation of all the resources with the given placement.
Convert a resource to HTML.
Handle GET requests.
Renders the given fragment to a standalone HTML response.
Render the given fragment to standalone html.
Calculate the P - values for a given lamb parameter.
Convert values to one dimension array.
Given a scores and an error table return the values of the results.
Create a final error table from a dataframe.
Summarize summary error table.
Compute error statistics for a set of scores.
Find the cutoff for a score.
Infer peptidos from peptidoforms.
infer a peptide from a peptide file.
infer_proteins is a wrapper for infer_proteins
Subsample a file using osw.
Reduce the input file to outfile.
Backpropagate an oswr file.
Get a group by id.
Create a new group.
Delete a group.
Get all members of a group.
Update members of a group.
Get the effective member count for a group.
Checks if the given group and netid are effective in the specified group.
Decrypt a key.
Get the stdout of the stdin.
Get the stdout of the process.
Get stderr from stdin.
Get the output of the debug command.
A context manager that yields stdin stdout and wait for stdin to finish.
A context manager that yields stdin stdout and waits for disk to be closed.
A context manager that yields stderr and waits for stderr to be closed.
A context manager that yields stdin or stdin and wait for disk to be closed.
Write an error message to a file.
Print help to a file.
Print usage information.
Print version information to file.
Resolve an option from the options dictionary.
Return a copy of this clicontext.
Write headers to file.
Generate a temporary url based on the given method url and seconds.
Quotes a string or unicode string.
Get a client from the queue.
Decrypt a key using the aes256cbc algorithm.
Add an account to your account.
Put a container.
Get the body of the manifest.
Create a container for the given path.
Transulate a transid.
Return True if the stream is empty.
Encrypt a key.
Get the status of a github repo.
Get a pull request.
Returns a generator of pull requests.
Update is_published flag to True for each title in the orm.
Get a list of slider items.
Renders a list of all the sliders published in the database.
Acquires the number of readers.
Release the number of readers.
Acquire the lock for the writer.
Remove a task from the queue.
Get a task by its ID.
Returns a list of tasks sorted by task_id.
Return the configuration as a dictionary.
Create a new instance from a dictionary.
Initialize the archive manager.
Create a new index.
JSON encoder for JSON objects.
Write items to writer.
Add a task to the scheduler.
Remove a task from the scheduler.
Yields all items in the storage.
Validate task_id backend category and backend arguments.
Parse the command line arguments for the archiving task.
Perform a job on the queue.
Schedule a job to run in the specified queue.
Cancels the specified job.
Runs the listen loop.
Listen for jobs in the pubsub channel.
Schedules the scheduler to run.
Schedule a task for execution.
Cancel a scheduled task.
Build the job arguments for a task.
Register a view with the router.
Overrides reverse_action to allow backwards compatibility.
Get the name of the view.
Return a string representation of the given version.
Resolve a key from a cursor.
Get the engine for the given scheme.
Parse a path and return the database and schema.
Parse a database url and return a databaseinfo object.
Create a new user.
List users.
Create a new password change form.
Build the field and keyword arguments for a URL field.
Parse a boolean value.
Parse a value as an integer.
Get the parser for the given typ.
Create a modeldict from a model and a set of fields.
Base64 encode a string.
Create a field from a dictionary.
Create a validator for the given data structure.
Finds unique points in a set of explored parameters.
Change logging keyword arguments for logging.
Try to make directories for the given filename.
Returns a list of strings from the given arguments.
Set the logger for this class.
Extract replacements from a trajectory.
Checks and replaces the section option with the specified rename function.
Convert a parser to a stringio object.
Find options for multiproc.
Finds the multiproc dictionary for the given dictionary.
Parses the log_config file and returns a parser.
Process a dictionary configuration.
Create logging handlers and tools.
Finalizes the logger.
Starts the game.
Write a buffer to the standard output.
Compare two results for equality.
Returns True if two Parameters are the same.
Temporarily rename the prefixing attribute of a class.
Add parameters to a traj object
Run the network on the given traj.
Applies the euler scheme to the given traj.
Add parameters to a traj object.
Computes the difference between the lorenz and the lorenz.
Create a storage service and a set of unused keyword arguments.
Factory to create a storage service for a given storage service.
Add parameters to the given traj
Calculates the Ressler diff between two values.
Returns True if all parameters in group_node are explored in group_node
Build model eqs from traj. model. eqs
Pre - builds the model if necessary.
Builds the model if necessary.
Builds the model for the given traj
Pre - build the connection list for the given traj.
Builds the connection pool for the given traj.
Add the parameters to the traj.
Compute the fano factor of a spike array.
Compute the mean fanofactor for each neuron.
Compute mean fano factor for each subrun.
Add monitor information to the network.
Make the path to the print folder for the plot.
Plot the result of celia_neuron.
Prints the graphs for the given traj.
Analyse a network.
Get the batch number from the command line
Explore a batch of strings.
The list of variable names for this node.
Return the function of this node.
Rename the full name.
Sets the depth branch and run_branch attributes.
Convert a node to a message.
Delete a node from the tree.
Remove a node or leaf from the tree.
Translate a shortcut name to a tuple.
Determine the types of the nodes in the tree.
Create a link for an act node.
Check the names in split_names for errors.
Set the details of a tree node.
Iterate over nodes in BFS.
Create a child iterator for the given node.
Depth - first traversal of naturalnaming.
Performs a fast search on a node and returns the node and the number of nodes that match
Searches for candidates that match the given split name.
Children of this node.
Add a group from the storage backend.
Add a leaf to the generic store.
Return the directory data.
Return a debug tree.
Get the parent of this node.
Remove a link from the network.
Remove this node from the tree.
Get the default value of a file.
Return the children of this node.
Returns a list of groups.
Returns a list of all the leaves in the queue.
Returns a list of links.
Store the trajectory into the storage service.
Add a result group to the network.
Adds a derived parameter group to the interface.
Add a derived parameter to this parameter group.
Add a configuration group to the network interface.
Add a configuration to the network interface.
Add commit variables to traj.
Make a git commit.
Flatten a nested dictionary.
Takes a dictionary and nests it into a nested dictionary.
Get the argument specification of a function.
Given a function and a list of keyword arguments return a dict of matching keyword arguments.
Format a timestamp as a formatted time string.
Convert a port number to a valid TCP address.
Create a bunch of directories at the given path.
Reset the start time and percentage step.
Get the remaining string for the given index.
Return a dictionary representation of the object.
Remove an attribute from the dictionary.
Returns a string representation of the object.
Make an ordinal result from a result.
Make a shared result from a result.
Store the request data for this trajectory.
Get data node from storage.
Return True if item supports sharedresult. supported_data.
Create a shared data item.
Routine to manipulate multiproc results.
Lock a request.
Send a done message.
Finalize the connection.
Start zmq socket.
Perform a retry request.
Acquire a lock.
Listen for messages from the socket.
Put data into the queue.
Detects the current process ID and sets the current process ID.
Handle data messages.
Runs the main loop.
Receive data from the queue.
Receive data from the socket.
Stores the specified arguments in the storage service.
Store a message to the reference store.
Stores the given references into the storage.
Collect the keyword arguments for a section.
Collect configuration options and return them as a dictionary.
Interpret the config file and return the kwargs.
Add parameters to the given traj.
Plot a pattern.
Cellular automaton - 1d pattern.
Signals the user to update the current time.
The group that this view group belongs to.
Load multiple items from iterable.
Check the properties of the hdf5 storage service.
Stores all the items in iterable with the given args and kwargs.
Internal method to handle closing routines.
Extract file information from keyword arguments.
Backup a traj into a backup trajectory.
Reads out a row of data from a TRJ table.
Prepare merge for traj.
Check if the given version matches the given python version.
Loads the exploration parameters from the trj file.
Stores the explorations for the given traj.
Store a trajectory.
Create a leaf node for the given trajectory.
Private method to store nodes in a hierarchical hierarchical hierarchical structure.
Store parameter or result table entry.
Get a table or create it if it doesn t exist.
Get all nodes with the given name.
Insert all keys in row into row.
Cuts a string if it is longer than max_length
Create a new group or get a new one if it doesn t exist.
Create a new hdf5 group or get a new hdf5 group.
Stores the annotations for the given item_with_annotations.
Load the annotations from the node attributes.
Group store group.
Recursively load a group of nodes into the tree.
Loads all the annotations from the given traj node.
Extract missing flags from data_dict.
Add a summary of the metadata.
Add meta information to group.
Write shared array to hdf5 file.
Writes a shared table to the HDF5 file.
Write a dictionary as a Python table.
Write a pandas dataframe to the datastore.
Write data to other array.
Write data to an array in hdf5 file.
Delete link with link_name from hdf5file.
Get a column from a table.
Get the longest string size in a list of strings.
Read a dictionary from the leaf and return it as a dictionary.
Read shared data from shared node.
Read an array and return the result.
Load a trajectory.
Make a set name based on the set index.
Sets the attributes of the object to the specified values.
Add dynamic imports to the list of imports.
Pre - set the default parameter to the specified name.
Checks if a run is completed or not.
Remove exploration items from the model.
Update the run information dictionary.
Add information about a single run.
Lock all the parameters in the pool.
Lock all derivative parameters.
Finalize the run.
Loads the skeleton model.
Makes the reversed wildcards for all the wildcards in the chain.
Merge multiple trajectories into one.
Merges the used_runs into the other_trajectory.
Rename full_name in other_trajectory.
Merge configurations from other_trajectory into this one.
Merge another trajectory with another trajectory.
Merge results from other_trajectory into rename_dict.
Restores the default values for all experiments.
Sets all exposed parameters to the specified index.
Makes a single run of the graph.
Returns a list of run names.
Start a new run.
Set the start time of the run.
Sets the run summary num_ run_info_dict and runtime_run.
Construct an instance of a class based on the constructor.
Return a dictionary of parameter values for a given dictionary.
Finalize the run.
Delete links from a list of iterator_of_links.
Remove all children from the tree.
Wrapper for _pool_single_run.
Wrapper for _frozen_pool_single_run.
Configure the pool.
Configure the frozen pool.
Process a single run.
Wrapper for _single_run.
Configure logging.
Configures a niceness based on the given kwargs.
Wrapper for _single_run.
Wraps the logging handler in a separate thread.
Load a class from a full class string.
Create a class from a list of dynamic imports.
Returns the length of the range in bytes.
Returns a string representation of the value stored in the cache.
Get the range of the file.
Store the data in a dictionary.
Load data from a dictionary.
Load the array parameter from a dictionary.
Return True if val1 equals val2.
Return True if data is a supported sparse matrix.
Build a tuple of names for a sparse parameter.
Reconstruct a sparse or dia matrix from a list of data.
Load sparse parameters from a dictionary.
Stores the data in a dictionary.
Loads a pickled object from a dictionary.
Translate a key to a string.
Returns a string representation of the value of the column as a string.
Return the data as a dictionary.
Set a single item in the store.
Return True if the sparsematrix supports the given item.
Stores the sparsematrix into a dictionary.
Load sparse parameters from a dictionary.
Set a single item in the pickle.
Return a dict of pickled dumps of the data.
Load a pickled object from a dictionary.
Main entry point for merging all files in a folder.
Create a new session.
Merge multiple trajectories into one.
Start all the jobs in the specified session.
multiply traj by traj
Run the neuron simulation.
Postprocess the results of a neuron.
Add parameters to a traj file.
Add explore to a traj
Extract all subruns from the given traj.
Execute a network run.
Add parameters to the network runner.
Run the network on the given traj.
Generate a filename for the given traj.
Return the next item in the chain.
Handle a sigint signal.
Read configuration from a JSON file.
Request pin.
Request tokens and write them to file.
Refresh access token and write tokens to file.
Get thermostats for the current user.
Write the tokens to the config file.
Set the hvac mode of the thermostats at the specified index
Set the fan min on time for a particular fan.
Set the temperature hold for a given index.
Delete a vacation from the Rmostats server.
Resumes the program at the specified index.
Send a message to the thermostats server.
Generate a random delay selecting.
Generate a time left for a request to renew a lease.
Generate a new renewing time.
Return a dict of the fsm attributes as a dict.
Reset the connection to a new state.
Get the timeout for a given state and function.
Set the timeout for a given state.
Select an offer.
Send a request to the client.
Set timeouts for the current state and rebinding time.
Process a received Nak packet.
Initializes the state and sets timeouts.
Timeout selecting.
Timeout requesting.
Renews the request if the request has expired.
Raise rebinding if request timeout is exceeded.
Receive a packet and add it to the offers list
Handle an ACK request.
Handle a NAK request.
Receive an ACK renewing packet
Receive a nak renewing packet.
Receive an ACK rebinding packet.
Receive a NAK rebinding packet.
Called when the client renews the lease.
Set the value of the field named name to value.
Add a new name and value to the set.
Returns a new QuerySet with the elements removed with the specified name and value.
Get the status of the server.
Reads a tdms file and returns a list of names and data.
Convert a tdms file into a FCS file.
Compare the current working directory with the cwd.
Create a new quilt patch.
Delete the next patch from the database.
Delete a patch from the database.
Check if a file exists in a quilt patch.
Backup a quilt file.
Add a file to the quilt database.
Run the quilt command.
Create the directory if it doesn t exist.
Copies the file to the specified destination.
Link a file or a file.
Copies the file to the specified destination.
Return the directory of the file.
Backup a file to the specified destination directory.
Unapply a patch from the database.
Apply a single patch to the database.
Apply the next patch to the series.
Apply all patches to the series.
Reads the series_file and populates the patch2line dictionary with the patches.
Save the series to a file.
Add a patch to the patch2line.
Insert patches into self. patchlines.
Add a list of patches to the line.
Remove a patch from the line.
Returns a list of patches after the given patch.
Returns a list of patches before the given patch.
Return a list of patches that match the given patch.
Replace old_patch with new_patch.
Create the version file if it does not exist.
Check the version of the database.
Add this argument to the given parser.
Add this command to the given parser.
Adds a sub - command parser to subparsers.
Set the args and kwargs for subparsers.
Add subparsers to the specified parser.
Check if a file exists in a quilt patch.
Add a file in the next patches after a patch.
Revert a quilt file.
Import a quilt patch.
Import quilt patches from a list of patches.
Add a way to the way map.
Return a generator of the node ids that are not present in the graph.
Add a node to the graph.
Build a route from a relation.
Create a route long name for a relation.
Get the agency id for a relation.
Process the file.
Add a relation to the model.
Yield agency objects for patched agencies.
Create dummy stops for a trip.
Writes the contents of the archive to a zipped file.
Write unzipped files to destination.
Build an agency from a relation.
Extract stops from a relation.
Build shape from nodes and ways.
Returns a list of supported versions.
Send an APDU to the device.
Authenticate a list of devices using the u2f library.
Register a facet on a device.
Authenticates the device with the specified facet.
Register a list of devices.
Convert unicode data to str.
Wrap a class with an error decorator.
Returns True iff the filepath matches the pattern in self. only_blame_patterns
Get the email address from the remapping.
Get the entry for the given entry in the entry_tree.
Convert markdown to rest.
Start a flawless http server.
Convert a url to an image string.
Convert a string to an image object.
Check if the size is larger than the image size.
Check if the given width is larger than the given image size.
Check if the given height is too big.
Parse the category for the given field and source name.
Parses the total value from the item and returns it as an integer.
Yields all the items in the source.
Save an error to the error list.
Parses the source and feeds all the items to the database.
Parses the given item and returns a dictionary of parsed data.
Get an instance of the model with the given data.
Save an item to the database.
Download a file from url to dest.
Loads the file from the specified source.
Returns a generator of dicts with headers and rows as keys.
Sets the allow_network_access flag.
Add one or more files to the sandbox.
Add a new file to the sandbox and rename it.
Returns a list of canvas enrollments for the given course.
Get enrollments for a given sis_course_id.
Get all enrollments for a section.
Get enrollments for a section by sis_id.
Get all enrollments for a given regid.
Enroll a user in a course.
Get a list of canvasrole objects in an account.
Get a list of roles associated with a SIS ID.
Returns a list of effective course roles in an account.
Get a role for an account.
Get a role by account sis_id
Get a course by ID.
Get a course by sis_course_id
Returns a list of canvascourses in an account.
Get a list of courses in a given SIS account.
Get a list of all courses published in an account.
Get a list of published courses in a SIS account.
Get a list of courses for a given regid.
Create a course in the specified account.
Updates the sis_course_id for the specified course.
Get a specific activity by account and term.
Returns a list of grade objects for the given account and term.
Get the statistics for a term in an account.
Get activity by sis_course_id.
Get assignments by sis_course_id.
Get student summaries by sis_course_id.
Get the student activity for a given sis_user_id and sis_user_
Get the enrollment enrollments for a given SIS user.
Get external tools in an account.
Returns a list of external tools in a course.
Create an external tool.
Update an external tool.
Delete an external tool.
Check that all required parameters are present in obj.
Get a user by ID.
Returns a list of canvasusers for the given course.
Get a list of users for a given SIS course.
Create a canvas user.
Get a list of user logins for a user.
Update a user login.
Get the next page from the response.
Get a resource url.
Get a single paged resource.
Get a resource by url.
_put_resource - PUTs a resource to the specified url.
POST a resource to the data provider
Delete a resource from the database.
Get a list of all admins for an account.
Create an admin for a user.
Create an admin by sis_account_id and role.
Delete an admin.
Deletes an admin by sis_id and role.
Create a grading standard for a course.
Get a specific section.
Get a section by sis_id.
Get a list of canvassections in a course.
Get all sections in a course by sis_id.
Get a list of sections with students in a course.
Get all sections with students in a given sis_course.
Create a new section in a course.
Update a section.
Get a list of quizzes for a course.
Get a canvasaccount for an account.
Get a list of sub accounts belonging to an account.
Update an account.
Updates the sis id for the specified account.
Get authentication settings for an account.
Updates the auth settings for an account.
Get a term by sis_term_id.
Import csv as a string.
Import a directory.
Get the status of an import.
Builds an archive from the csv files in the specified directory.
Get a list of assignments for a course.
Updates an existing assignment.
Get all available reports for a given account.
Get a list of reports of the specified type in the specified account.
Create a report for the specified account.
Create a course provisioning report.
Create a course sis_export report.
Create a new unused courses report.
Get report data.
Get the status of a report.
Deletes a report.
Move all detections from label to dx and dy.
Flip detections in a label horizontally.
Get a dictionary from an object.
Get configuration from settings.
Returns the empty value for this edit.
Create metrics from a list of metric configurations.
Setup logging for this instance.
Configure the registry to use additional collectors.
Create the metrics for the given configurations.
Get a metric by name and labels.
Handle home page.
Handle metrics requests.
Send a query to wolframalpha.
Fix the httpmessage content type and param attributes.
Perform a query against the API.
Return information about the pods assumptions warnings and warnings.
Return a generator of all pods that are primary or title.
Encode data to a request.
Perform a GET request.
Delete an object from the API.
Sends a PUT request to the API.
Make a POST request.
Returns a list of sentences grouped by the number of sentences in total_nb_sentences
Disambiguates a PDF file.
Disambiguates a query.
Segment the given text using the segmentation service.
Get the language for the given text.
Get a concept by conceptid
Fit the ensemble to the given features and classes.
Runs the scoring function on the ensemble and returns the score.
Fits the classifier and predicts the class.
Scores the given features using the given scoring function.
Transform features into a new feature.
Computes the score of a given set of features and targets.
Return the vector representation of the given members.
Return the vector representation of the given members.
Compiles and executes the given file.
Compiles the given stream and executes each form in the given module.
Compile and execute a string.
Import a repl module from the runtime namespace.
Run basilisp.
Add a method to a map.
Add a method to the multifunction.
Remove a method from a map.
Remove a method from the multifunction.
Return true if the given variable is a macro.
Return the line and column indices of the given lispform.
Assert that the node is no recur.
Assert that the given node is a tail statement.
Resolve a bare symbol.
Resolve a sym. symbol.
Parse the given AST form and return the resulting AST node.
Flag indicating whether the variable should be shadowed or not.
Return a string representation of the given list of entries.
Return a string representation of a sequence.
Fallback function for lrepr.
Evolve the attributes of this node and its children and fix missing locations.
Compiles the given form and executes it.
Compiles a module and executes it.
Compiles the given list of forms into a module.
Compile a bytecode code into a Python module.
Return the sequence of the given iterable s.
Munge a string with replacement strings.
Return a fraction of the given numerator and denominator.
Returns a logging handler for the specified logging level and fmt.
Map key - value pairs to key - value pairs.
Partition a collection into n partitions.
Read a namespaced string from the reader.
Read a collection and call f on each element of the collection.
Read a list from the reader.
Read a vector from the reader.
Read a mutable map.
Reads a string from the reader.
Read a symbol from the reader context.
Read a keyword from the reader.
Read meta from the reader.
Read quotes from the reader.
Expand syntax quote elements.
Read a syntax - quoted form.
Read the consuming comment and return a lispform.
Read a character from the reader.
Read a regex from a string.
Read a macro from the reader.
Read the next consuming comment.
Read the next token from the reader.
Read a string from a file - like object.
Read a file and yield readerforms.
Updates the location of the cursor with the character c.
Pushes the current index back to the stack.
Read the next token from the stream.
Return the bytecode for a Basilisp file.
Get a bytecode from the cache data.
Create a cache file from a source file.
Hook imports into sys. meta_path.
Find a modulespec by fullname and path.
Executes the cached module for the given fullname.
Executes the specified module.
Executes the specified module.
Create a symbol with the given name and namespace.
Complete text with interns.
Get or create a keyword from kw_cache.
Return a keyword with the given name and namespace.
Chains a generator of pyaststreams into a list of pyaststreams.
Return a generator AST for a collection of AST nodes.
Rewrite py_ast with the location of the source code.
Decorates a function to return a generator with a line number and column location.
Decorator to wrap a function that returns a generator with a line number and col.
Determine if a variable is dynamic.
Return whether v is redefable or not.
Return an ast. expr representing the statement e.
Return an expressionized function definition.
Convert a Do node to a Python AST.
Return the name of a function.
Given a list of parameters and a body return a list of ast. ast objects representing the arguments
Convert a single arity function to a Python AST.
Convert a function to a PyAST string.
Convert a if body node to a Python AST.
Invokes the given node to the given Python AST.
Convert a quote node to a Python AST.
Loop recur to PyAST.
Convert a recur node to a python AST.
Convert setbang to pyast.
Convert a Throw node to a Python AST.
Return a PyAST representation of the try operation.
Convert local sym to pyast.
Given a variable name ns_name and a py_var_ctx return a generated pyast
Convert a varsym to a pyast object.
Convert an interop property node to a Python AST.
Convert a maybe_class node to a python ast.
Convert maybe host form to a python AST.
Convert a constant value to a Python AST.
Convert a collection literal to a Python AST.
Generate a generated Python AST.
Return an iterable of ast. imports for each module in ctx. imports.
Return an ast. importfrom from a module import.
Assign a variable to a namespace.
Return a set containing the members of the given iterable.
Return the set of members of the specified type.
Visit an excepthandler node and return a copy of it.
If node. value is a constant return none.
Visitor for a functiondef node.
Return an ast. While node.
Return a copy of the try node.
Create a new module with the given name.
Returns the first occurrence of o or none if o is not a string.
Return the rest of a sequence.
Return the nth element of a collection.
Return the next nth element of a sequence.
Return the cons of o with seq.
Convert an object to a sequence.
Concatenate multiple sequences into one.
Associative version of assoc.
Conjunction of a collection.
Recursively deref an ideref or iblockingderef.
Returns True if v1 equals v2
Divide x and y by y.
Sort a collection by f.
Returns True if the given key is contained in the given collection.
Get a value from an associative or iassociative dictionary.
Convert an object to a lisp string.
Convert an object to a Python object.
Return a human - readable string representation of the given object.
Collect arguments from a tuple or tuple.
Decorator for basilisp functions.
Resolve an alias for the given symbol.
Resolve a variable from the symbol s namespace.
Add a generated python variable to the generated python value.
Interns a variable name with a value.
Interns a namespace unbound with the given name.
Find the name of a symbol in the namespace.
Find the symbol in ns_qualified_sym.
Find the safe name of a symbol.
Add a default import to the list of gated imports.
Add an alias to the symbol.
Interns the symbol sym with the given var.
Intern sym with new_var.
Find a reference entry for a symbol.
Add an import to this symbol.
Returns the module for the given symbol or None if it does not exist.
Add a reference to a symbol.
Get the reference for the given symbol.
Given a set of refers and a set of other_ns_interns return a new map
Refer all references to other_ns.
Get a namespace or create it if it doesn t exist.
Get the name of the module or create it if it doesn t exist.
Get the value of the named symbol.
Remove a namespace from the optional dictionary.
Autocomplete for alias completion.
Completes the imports and aliases for the given prefix.
Complete interns.
Returns a list of completions that match the given value.
Completes the given text.
Return the list of arguments to be passed to the function.
Return a list of members.
Return a list of members.
Decrypts a JWT token and returns the decoded payload.
Encrypts a JWT using the given key store and key purpose.
Deletes the specified arguments from the cache.
Return the selector and argument as a Python tuple.
Parse a fiql string to an expression.
Dump a model to a file - like object
Return a dict of date values for the given object.
Decode a date string into a datetime object.
Decode a JSON value.
Return the default encoding for the given object.
Validate version string.
Performs a robust topological sort of a graph.
Set the parent expression for this query.
Get the parent expression.
Add an element to the expression.
Add an AND operator to the expression.
Add an OR operator to the expression
Parse a receive string into a list of dicts.
Convert a list of tuples into a dictionary.
Check if any messages have the specified cmd and value.
Prepare send message for sending.
Flush all buffered messages from the socket.
Enable a slide and wait for it to finish.
Save a template to a file.
Get information about the device.
Locate the systemjs package json directory.
Parses the package json file and returns the data.
Handle an API error with json data.
Validate yourls response.
homogenize wavelengths.
Interpolate dep_vector from wave. dep_vector to indep_vector
Return the indep vector of wavelengths between wave_a and wave_b.
Verify that wave_a and wave_b are compatible with wave_b.
Loads the systemjs manifest and returns a list of bundle files.
Return a namedtuple of callables and callables for the given mname.
Expand a short URL.
Get the URL stats for a given short url.
Get a list of links and links for a given filter.
Get db stats.
Split an iterable into chunks of size chunksize.
Flatten an iterable.
Print a table in tab - separated format.
Create a dummy class with the given name and attributes.
Convert a human - readable string to an instance of this class.
Traces the specified module using trace support.
Generate a list of links from a JSON file.
Append a common entry to the plist.
Create a multi - entry entry from a list of Python versions.
Convert a list of ops to a list of words.
Split noise into chunks.
Divide the freq_vector and data_matrix into chunks of length pformat.
Bound waveform.
Build a list of units for a given operation.
Create a copy of wave with the given descriptor and fpointer.
Compute the area of the running area of a dependency vector.
Validate that indep_min and indep_max are within indep_min and in
Return the arccos of the given wave.
Acosh a wave.
Return the arcsin representation of a wave.
Return the arctanh of a wave.
Return a copy of wave with dep_name dep_name dep_name dep_name dep
Group wave by delay.
Logarithm of the wave.
Return the square root of a wave.
Return a complex wavefunction.
Return a copy of wave as a float.
Return a copy of wave.
Finds the specified path in the systemjs output directory.
Get short description from long_desc.
Build an expression from a list of tokens.
Return the next item in items at pos.
Return a list of functions for expr.
Parse an expression into a list of tuples.
Remove all consecutive delims from expr.
Convert a number to an English tuple.
Convert a number to a string with no scientific exponent.
Return the Peng float representation of a string.
Return the fractional part of a string.
Peng mant number.
Check if the app needs an extension.
Execute the bundle command.
Traces the given application.
Check if all the hashes in the dep_tree match the hashes in the dep_tree.
Format a hexdump string.
Parses a docstring and returns a dictionary of parameters and returns.
Return a list of valid identifier functions.
Decorator for adding a deferred add action.
Split a line of text into parts.
Check the initializer context.
Return help text for builtin functions.
Find a function in the given context.
Return a listing of all available functions in the specified context.
Return True if arg is a flag.
Extract the value of an argument from the remaining list.
Invokes the specified string on the specified line.
Classify a section.
Classify a line.
Return a list of paragraphs from a list of lines.
Convert a value to a type.
Convert a binary value to the specified type.
Returns the size of the given type in bytes.
Checks if the given type name is known to be a known type.
Split typename into base bool and subs.
Instantiate a type and inject it into the system.
Check if the format is known for the given type.
Loads a type module and injects it into this module.
Add a parameter to this type.
Set the return value for a typed type.
Custom returnvalue setter.
Match a short name.
Returns the type of the parameter with the given name.
Format the return value.
Convert a positional argument to a positional argument.
Convert an argument to a type.
Format the message as a string.
Return the message as a dictionary.
Check and execute a function and return the result.
Parses a list of validators and returns a list of tuples.
Find all annotated metadata objects in a container.
Given a module return the name and the context of the module.
Return the help text for a function.
Decorator for functions that cannot be annotated.
Decorator that annotates a function.
Short description of a function.
Load all modules and commands.
Install crontab.
Print all registered tasks.
Uninstalls the kronos breadcrumb.
Create a new resource.
Load all the projects in the project directory.
Save the project configuration to a YAML file.
Returns a dictionary of all dependent projects.
Initialize the project.
Decorator that raises an error if the function is not implemented.
Apply a function f to the state and return the result.
View the fold.
Convert the fold to a list of elements.
Apply a setter function over a state.
Set the state to the given value.
Iterate over an iterable.
kind of optic.
Main entry point for the game.
Return a vector of the step towards of another vector.
Handle input for player.
Advances all the robots in the world.
Ends the game.
Moves a board to another player.
Play the game.
Makes a move to the specified position.
Return the winner of the game.
Yields the potentials for the board.
Add an item to the list and upload the chunk if necessary.
Open a spider.
Upload a chunk of data to S3.
Create a gzipped file object.
Returns the current state of the specified account.
Returns the state of the specified asset.
Returns the hash of the block at the specified index.
Returns the Sys fee for the specified block.
Returns the state of the contract for the specified script hash.
Returns the raw transaction with the specified hash.
Get the value of the storage for the given script hash and key.
Returns the output of the specified transaction at the specified index.
Invokes the specified script with the specified params and returns the result.
Executes the specified operation on the specified script and returns the result.
Executes the specified script and returns the result.
Sends a raw transaction to the device.
Validates that the specified address is valid.
Make a call to the server.
Returns True if s is a hash256 string or False otherwise.
Check if a string is a hash160 string.
Encodes a list of contract parameter values into a list of contract parameter values.
Decode an invocation result.
Apply this filter to the given dttm using the given timezone.
Renders the template and saves it to a file.
Render barcode.
Renders the given code and returns the result.
Entry point for the CLI.
Download a file from S3.
Upload local_path to remote_path
Downsync a configuration file.
Show the difference between the local config and the local config.
Parse an environment variable value.
Set basic username and password.
Add an API key to the configuration.
Get the content of a folder as a generator of JSON objects.
Get all the schemas in the json_path
Get the schema for this instance.
Get the refresolver for this schema.
Validates the given object against the current schema.
Returns a list of valid examples.
Returns a list of all invalid examples in the schema.
Returns the URL for the authenticated user.
Process a URL and return the auth code.
Get the auth token from the server.
Get the user id from the user data.
List all files in a folder.
Create a new directory in the specified folder.
Add a comment to an object.
Decode a Python object to a unicode string.
Set the drop target of an object.
Start dragging the mouse button.
Sets the default designer and inspector for the given tlw
Inspects the given object and displays it.
Migrate a font from one place to another.
Loads the current page from the specified location
Send a message to the user.
Create a wellcome tip window
Handle mouse down events.
mouse_move event handler
Handle key press events.
Deletes all objects from the selection.
Duplicates the selected objects.
Refresh the snapshot of the object
Calculates the best position for the given widget.
Get the pydata for the given item.
Set py data for a wx item
Find the data for a given py_data.
Delete an item from the listctrl
Delete all items from the listctrl
Clear all columns from the table.
Private method to set the selection of the item
Returns a list of string selections.
Set the data for the item n
Append a string to the end of the list
Get the parent object for the given object name.
Add a child to the Sizer
Set the parent of this component
Draw the background of the tile.
Erase the background
Paints the object
Returns a list of headings for each column in the table.
Resets the grid view.
Update the values of the table.
Update the column attributes in the grid.
Sorts the data for the specified column.
Clears all cells from the grid view.
Create a combobox
Begin edit.
Changes the value of the cell at the end of the edit
Return True if the key is an accepted key.
Set the starting key of the string selection.
Enables or disables all menu items
Returns True if all menu items are enabled.
Enables or disables the menu.
Returns True if the current menu is enabled.
Remove a menu from the menu list.
Set the object tag for the object.
Autosummary table visit.
Return a documenter for the given object.
Mangle a signature.
Import a module by its name.
Link a role to another node.
Show a message or scrolled messagedialog
Prompt the user to enter a text entry.
Show a dialog to select a font.
Show a color dialog.
Prompts the user to choose a directory.
Find all words in the specified text.
Sets whether or not this item has any children.
Set wx icon
Parse a file and return a datetime object.
Save rsrc to a file.
Build a window from a dictionary.
Build a component from a dictionary res.
Convert a pythoncard property name to a pythoncard property name.
Set the data of the clipboard
Find autosummary in a docstring.
Load an object into the tree.
Inspects the tree for the given object.
Activate an item in the tree
Update the tree.
Show context menu.
Convert the given value to a hyperlinkedsorl image.
Test if the path has a current path.
Assert that the path has no current path.
Select an option.
Returns a webdriver object for the specified browser.
Return the XPath representation of the expression.
Switches the current scope to the specified frame.
Context manager to accept an alert.
Context manager for accepting a confirmation message.
Context manager that allows the application to dismiss a modal.
Accept a prompt and yield a response.
Context manager for dismissing a modal prompt.
Saves the current page to a file.
Saves a screenshot of the current instance to a file.
Raise the server error if there is an error.
Returns True if the element identified by locator has checked field.
Returns True if the element identified by locator has no checked field.
Returns True if the element identified by locator has an unchecked field.
Returns True if the element identified by locator has no unchecked field.
Test if the given title exists in the document.
Test if there is no title with the given title.
Return the inner content of a node.
Return the inner text of the node as a string.
Normalizes a URL and returns a normalized URL.
Determine if an error should be caught.
Compare the count of the results.
Return True if the cache has at least size elements.
Returns True if any of the given options expects none.
Format a failure message.
Check if the given count matches the given options.
Normalizes the given value to a unicode string.
Normalize whitespace in text.
Convert text to a regular expression.
Determine if the current URL matches the expected URL.
Resizes the window to the specified width and height.
Boot the server.
Set the cgetter function for this object.
Set the instance method.
Set the class method to use.
Returns the traceback of the current thread.
Return the source code for the object.
Return the logger for the given instance.
Set the logger to use.
Make a call to the API.
Returns a list of channel names.
Returns a list of users.
Create a message from text and channel.
Translates a message to a Slack message.
Send a message to Slack.
Read a channel from the channel layer
Run Slack API.
Run the client.
Return a dict with the keys of prv and nxt that differ from prv.
Colorize a message according to the given color.
Playbook on task start.
v2 playbook on stats.
Runner for skipped tasks.
Convert a prefix string to a netmask string.
Add a model to this element.
Load filters from jinja_filters
Find the full path to a YANG file.
Make an HTTP POST request to the specified url.
Get the authorization code URI for this request.
Get a token by code.
Returns a dictionary of query parameters for the given url.
Dequery a URL.
Build a URL from a base URL.
Handles the exception raised by the logger.
Make a response from the given body headers and status code.
Make a redirect error response.
Make a JSON response.
Generates and persists the authorization code for a client.
Refresh a refresh token.
Generates an access token for the given grant type grant_type client_id client_secret redirect
Get the authorization code from the given URI.
Get a token from POST data.
Get the authorization object for this request.
Open the device.
Read a single byte from the device.
Read a number of bytes from the specified address.
Read a byte from the RDW device.
Write bytes to the device.
Write byte data to the device.
Write a block of data to the device.
Create a copy of the current object.
Create a local copy of the CDN.
Construct a File object from a dictionary.
Upload a file object to the specified store.
Returns a list of file CDN URLs for all files in the group.
Construct a Group object from a dictionary.
Create a group from a list of files.
Perform a base operation on the server.
Yield uuids of all files in the sequence.
Generate a list from an api_list_class.
Yields chunks of text with progress bar.
Get home mode status.
Get a list of all cameras.
Get camera information for the specified camera IDs.
Get a snapshot of a camera.
Enumerate motion settings for a camera.
Triggered when a md parameter is saved to a camera.
Update the camera settings.
Return True if the given li is the last element of the given meta data.
Returns a generator that yields the nodes of a single list.
Get the value of an ilvl element from a DOM tree.
Get the v_merge element for the given tc.
Get the number of grid spans for a given tc.
Get the td at the specified index.
Return true if style is false or not.
Return true if r is bold.
Check if the given string is italicized.
Check if the given string is underline.
Return True if the given element is a title element.
Returns a generator of text run content elements.
Given a tree and a media object return a dictionary of information about each element of the tree that
Get the type of ordered list based on numid and ilvl.
Builds a table element and a list of nodes.
Get the content of a T tag.
Remove all elements with the specified tag from the tree.
Find a file in the specified dataset and return its path.
Load a mnist from a gzip file.
Plot a list of images.
Plot a list of layers.
Plot filters.
Encode txt into a list of unicode strings.
Add convolution weights to the parameters.
Decodes z into theano graph.
Score x using autoencoder.
Predict the outputs of x.
Predict the probabilities of x.
Predict the logit of x.
Returns a list of the target weights.
Compute the accuracy of the model.
Build an activation layer.
Generate a reservoir from a list of xs.
Add a loss to the model.
Train the model and return a list of all monitors.
Build a graph from a list of regularizers.
Returns a list of input layers.
Returns a list of all variables in the loss.
Saves the object to a pickle file.
Load a network from a pickle file or handle.
Compute the loss of the graph.
Build the updates graph.
The size of the output file.
Resolve input shapes for the given layers.
Resolve input shapes and output shapes.
Log the current state of the model.
Log the parameters of the model.
Format string according to self. name.
Resolve the shape of a layer.
Find a parameter by its key.
Add a bias to the model.
Return a dict representation of the form.
Log - gaussian approximation.
loggabor_image computes the inverse of the loggabor image
Add a tier to the list.
Remove tier with the given name number.
Returns the tier with the given name number.
Return a pympi. elan. eaf. eaf. eaf. E
Add a point to the tier.
Add an interval to the tier.
Remove an interval from the tier.
Remove a point from the tier.
Returns a generator that yields all intervals in the series.
Returns a list of all intervals in the interval range.
Indent the given el with the given level.
Add an annotation to a tier.
Add a CV description to the controlled vocabulary.
Add an external reference to an EID.
Add a lexicon reference.
Add a linguistic type to the model.
Add a locale for the given language code.
Remove all time slots from the tiers.
Extract annotation data from the EAF.
Generate an annotation id.
Generate a timeslot ID for the given time.
Returns all child tiers with the given id tier.
Returns the full time interval of the current time slot.
Get the reference annotation data between the given time and the reference annotation data between the given ID tier
Get the reference data between the given time and the number of times.
Returns a list of tier IDs for the given linguistic type.
Remove all annotations from a tier.
Remove a CV description from the vocabulary.
Remove a license from the registry.
Remove all linked files.
Remove a property from the object.
Remove an annotation from a tier.
Remove secondary linked files.
Remove tier by id_tier.
Remove tiers from the queue.
Rename tier id_from to id_to.
Shift the annotations to the given time.
Debug a storage dict.
Get the level of the embedding level for the given text.
Perform explicit embedding and overrides for each bidi type in storage.
Resolves the NEUTRAL types in the given storage.
Reverse a contiguous sequence of characters.
Reorder resolved levels by explicit level limit.
Normalises the current file.
Add an attribute to an object.
Command - line interface for the command line interface.
Maintain backwards compatibility with binding.
Show the toplevel GUI.
Discover the registered GUIs.
Add a script to the filemenu.
Context manager that ensures that the current selection is maintained.
Context manager that ensures that the current time is maintained.
Shows a messagebox showing no GUI.
Returns a generator that yields the cumulative sum of the data.
Returns a list of values for each axis in the dataset.
Draws a constant line.
Loads the transform parameters from the graph.
Reverse a mapping.
Generate a range of floats between start and stop.
Add a conf to the data list.
Draws the graph and renders it.
Calculate the left margin of the chart.
Calculate the right margin for the key.
Calculate the top margin of the graph.
Add a popup to the foreground.
Calculate the bottom margin for the bottom of the text.
Draws the graph.
Makes a text representation of a datapoint.
Draw x - axis labels.
Draw the y - axis labels.
Draw x - guidelines on the x - axis.
Draw the y - guidelines.
Draws the titles of the graph.
Render CSS inline styles.
Starts an SVG document.
Return a list of stylesheet resources for this resource.
Run a bot.
Send data to the socket.
Connect to the server.
Send a message to a specific channel or nick.
Dispatch patterns to appropriate handlers.
Create a new nick and register it.
Handle a ping message.
Handle registered messages.
Enter event loop.
Register with the boss.
Runs the task runner.
Return a tuple of command patterns that can be used to run the worker.
Register a success message.
Execute a command on a worker.
Add a nick to the queue.
Send validation email to the user.
Send a password reset notification.
Verify a user s email.
Delete a user.
Overrides allow_request to allow the request to be throttled.
Returns a Docker client for this Docker client.
Returns a tuple of the TLS client certificate and key.
The name of the service.
Call a docker method.
Executes a docker command and returns the result.
Poll the status of the service.
Stop the Docker container.
Filter queryset based on value.
Update an instance with the validated data.
Update the password with the validated data.
Validate email address.
Create a new token for the specified user.
Deletes the specified token.
If the user is not logged in raise a permissiondenied exception.
Handle POST requests.
Update the expires attribute of the object.
Generate a context for a password reset email.
Handler for sending email notification.
Handler for password reset email notification.
Handler for email validation email notification.
Authenticates the user with the given key.
Authenticate the user and token with the given key.
Show a notebook.
Process a list of hv plots into a list of bokeh plots
Returns a customjs callback for the given change and p_name
Return widget for param_name.
Render a function that returns the object.
Create a textinput widget with the given keyword arguments.
Given a list of named objects return a list of tuples.
Get the owner of a method.
Assign http_auth values to self. _auth_user and self. _auth_password
Send a ping request.
Get information about the device.
Check the health of the device.
Convert a number of bytes to a human readable string.
CPU total load.
Return the memory size of the synoformat.
Get the network up.
Returns a list of volumes in this volume group.
Get the volume with the given id.
Volume size total.
Returns the percentage used for a volume.
Volume disk temp average.
Return the maximum disk temperature for a volume.
Get disk by disk_id.
Login to the API.
Execute a GET request and return the response.
Execute a GET request.
Update the utilisation and storage attributes.
Returns the synoutilization of the network.
Get the synostorage object.
Create a context object for the given request.
Get the tenant token.
Builds the attributes of the widget.
Returns a copy of the current settings with the specified apps.
Remove apps from settings. installed_apps.
Returns the global settings as a dictionary.
Handle GET requests.
Change the value of a key in the configfile.
Migrate a config file to a new one.
Start the webserver.
Wait for the server to respond.
Get new access information from the server.
Check if the token is present and refreshable.
Set the access credentials for the current token.
Create a manifest table in DynamoDB.
Split a full path into bucket and prefix.
Check if a bucket is glacier.
Remove empty values from a dictionary.
Add a run id to the manifest.
Check if a run is in manifest.
Extract a schema from a URI.
Fix a schema by removing the organization and snake case name.
Parse a JSON unstruct and return a fixed schema and inner data.
Transform a line of JSON into a good event.
Convert a snowplow event to a JSON format.
Get the used template for the given response.
Prints the given context to the terminal.
Prints the variables in the given context.
Formats the given SQL string into HTML.
Format django context html.
Format a dictionary as a summary HTML string.
Style text.
Format the given object using prettyprinter.
Formats the given object in the given stream.
Get a latex token from a string.
Get a list of LaTeX nodes from a string.
Convert latex content to text.
Convert a LaTeX string to text.
Unascii - encode a string.
Retrieves information about the organisms in this organization.
Returns a list of boards.
Get the members of the organization.
Update an organisation.
Remove a member from a group.
Add a member to a group by ID.
Add a member to a group.
Fetches information about the list of information for the current user.
Add a card to your account.
Fetches label information for the current user.
Fetches a list of items from the API.
Update label name.
Update the label dict.
Get the authorisation url for an application.
Get information about the card.
Fetches a board and creates a board object.
Get a list of all the items in the account.
Returns a list of all the checklists in this repository.
Adds a comment to the current user s comments.
Add an attachment to a file.
Add a new checklist to this account.
Add a label from a dictionary.
Add a label to a class.
Add a member to a group.
Get information about the members of the organization.
Get a list of cards.
Returns a list of organisations in this repository.
Create a new board.
Fetches board information for this board.
Returns a list of lists.
Returns a list of all labels in the organization.
Fetches a specific card and creates a new card.
Returns a list of all the checklists in this repository.
Get the details of an organisation.
Update a board.
Add a new list to the account.
Add a label to the list.
Fetches information about the checklist.
Get the card for this checklist.
Returns a list of all the items in this checklist.
Update a checklist.
Add a new item to your account.
Remove an item from this repository.
Update the name of a checklistitem
Update the state of a checklistitem
Add authorisation to query_params.
Check if the response has the correct status and if so raise an exception.
Build a URI from the given path and query parameters.
Fetches a JSON object from the API.
Create an organisation.
Create a board in Trello.
Create a new label.
Create a list
Create a card in Trello.
Create a checklist
Create a new member in Trello.
Get an organism by id.
Get a board by id.
Get a list by id.
Get a card by id.
Get a checklist.
Get a member by id and fullname.
Extract domain from url and return new url.
Convert text to raw text markupless.
Set the password for the specified service.
Split text with locations.
Mark a regex as being split.
Mark text as beginning of the end of the regex.
Entry point for the command line interface.
Create a cipher object.
Get the mode of the cipher.
Return the number of items in the priority list.
Check the scheme of the config file.
Called when a message is published
Return the id of the object.
Connect to the broker.
Handle a connection acknowledge packet.
Encode a string into a bytearray.
Decode a string from the given encoded string.
Encodes a 16 - bit integer into a bytearray.
Encode the length of a string into a bytearray.
Decode a length encoded string.
Encode the header.
Encode the message into a string.
Decode a packet.
Encode the result into a string.
Decode a packet.
Decodes the given packet.
Encode the message.
Encode the message into a string.
Decodes the given packet.
Encode the message into a string.
Encode the message into a string.
Decode a packet.
Decode a packet.
Returns the URL for this request.
Make a request to the API.
Refresh the list of blocks.
Formats the data according to the given data.
Apply the fitting to the data.
Fit k - means clustering to data.
Predict clusters using the classifier.
Map a set of clusters to a specified number of samples.
Sort clusters based on the mean of each cluster.
Get the date from a datetime object.
Returns the total number of points in a dictionary.
Get the total time span of a dictionary.
Unitpicker function for unitpicker.
Return a pretty - printed string representation of a string.
Convert an analyte string to namemass.
Convert an analyte string to massname
Collate data from in_dir into out_dir.
Enumerate a boolean array.
Convert a list of tuples to a boolean array.
Fast smoother.
Fast gradient of a with rolling window.
Find the minimum of x and y.
Cluster a data set using meanshift.
Cluster k - means data using clustering.
Get the set of defined SRMS in a SRM file.
Read the configuration from the LaTeX configuration file.
Read Latools config file and cf file.
Copy a SRM file to the specified destination.
Exclude a downhole filter from a filt.
Autorange plot.
Calculates the number of times each epoch is the number of times each epoch is the number of
Calculate the ratio of analytes to internal_standard.
Calibrate a set of calibrated variables.
Returns a dictionary of all the ablation times of the time series.
Calculate the correlation between x_analyte and y_analyte
Add a new filter to the filter list.
Returns a dictionary with the parameters and sequence of the output objects.
Plot a series of histograms.
Load reference data.
calc_m calculates the m of a molecule
Generate namedtuple with keyword arguments and keyword values.
annihilate the stack with predicate and stack.
Dedup the stack by applying a Dedup function to the stack.
Calculates the weighted statistics of the gaussian distribution.
Generalized Gauss - Gaussian Distribution
Return the standard deviation of stderr a.
Get the samples for the specified subset.
Calculate the ratio of the current stage to internal_standard.
Make a new subset of the dataset.
Apply a classifier to the data.
Filter the subsets by removing all items that have been removed.
Filter reports based on filt_str.
Create a bunch of traces for each sample in the dataset.
Save the log to a file.
Folds a function onto the left and right of a function.
Bayesian scale.
Scales the median value of a given array.
Noisedespike a signal.
Decrease the noise of a signal by expdecay_despike.
Add a new component to the index.
Remove a component or a set from this switch.
Clears the internal state.
Remove unused switches.
Return the fuzzmatch for fuzzkey.
Grab a filter from a key or dict.
Returns a tuple of information about the components.
Write a log to a logfile.
Read a log file and return a list of run arguments.
Get information about the modem.
Send a message to the modem.
Parses a file or string into a SQLAlchemy grammar object.
Return a link to the nbviewer page for the given url.
Returns the div tag for the thumbnail.
Returns the code div for this snippet.
The code example for the notebook.
Returns the URL of the link to the notebook.
Get the output file name.
Create the py file for the notebook.
Download data from a list of files.
Create a thumbnail for the current image.
Scale an image by max_width and max_height.
Saves the thumbnail to the given path.
Copies the thumbnail figure to the output file.
Get the URL for the given nbfile.
Get all db_table_fields that are not in db_table_fields
Process a thumbnail file.
Pre save hook.
Returns a list of all thumbnails.
Create a thumbnail of the given size.
Deletes the thumbnail for the specified size.
Create a new thumbnail.
Get a thumbnail for the given source name and size.
Delete a file from the storage or metadata backend.
Handle an incoming message.
Subscribe to a number of digits.
Returns a set of all the states that have been accepted or expired.
Send a message to the provider.
Returns a mapping of receiver blueprint names to receiver blueprints.
Receive a message from the provider.
Receive a status from the provider.
Forward an incoming message object to all connected clients.
Sign a web3 transaction.
Estimate the gas of a gas with a web3 address.
Estimate the gas of a transaction.
Write bytes to the stream.
Read a line from the serial port.
Check if the message has any bad headers.
Attach an attachment to this message.
Registers the given services.
Load a configuration object from a module.
Registers the given resources.
Require a key to be present in the configuration.
Exit an object or raise an exception.
Setup the data manager.
Angular wavelength.
Cauchy equation.
Deletes the specified resource.
Check if two paths are the same.
Create a link in the specified source directory.
Initialize the logging module.
Raise usage error.
Claims a set of VCF readers from a list of VCF readers.
Returns a new column header string from the vcf_reader.
Claims a set of VCFs and returns the set of unclaimed VCF
Initialize the population stats.
Claims a set of unclaimed VCF readers and returns a list of file readers
Split data into lines.
Return the first line terminator that starts with data.
Return the line terminator that ends with data.
Seek to the next line in the file.
Moves the cursor to the previous line.
Return the last lines of the file.
Return the head of the file.
Follow the file until EOF is reached.
Claim a set of readers for a given set of file readers.
Parse a vcfrecord from a vcf line.
Sample tag values from vcfrecord.
Return a set of tags for this sample.
Join info fields into a string.
Format the field to be used in the template.
Returns the sample field as a string.
Return a string representation of the tag.
Add a sample tag value to the sample_tag_values dictionary.
Add or replace a filter.
Return a list of all available categories for the user.
Returns a productsform for the given category and list of products
Factory for creating staff products form.
Add an error for a product.
Factory for creating model fields form.
List of items pending or purchased.
Send an email to a specific kind.
Parse an osm file and return a tuple of nodes ways and relations.
Iterate over OSM notes.
Returns True if the user passes the filter.
Check if a user is met.
Returns the number of units remaining for the given user.
Filter carts that are not released.
Filter carts that are not paid or not paid.
Apply pre - filter to queryset.
Filters the queryset with proposal_kind_proposalbase_presentation_cancelled =
Apply pre - filter to the user s groups.
Create a new reservation for a user.
Autoextend the reservation to the maximum number of reservations.
Apply voucher code to cart. vouchers.
Fix vouchers that are not available in cart. vouchers
Recalculate the discounts for all items in the cart.
Iterate over the rows of the table.
Returns the form to use when rendering the request.
Renders the given data.
List all reports.
List the items that have been trashed.
List payments for this invoice.
Return a list of all credit notes refunded.
Show the status of a product.
Show the status of all discounts.
Show all line items that have been paid or deactivated.
Get paid invoices by date.
List credit notes.
List invoices.
List attendees of a person.
List of speaker registrations.
Return the set of categories that are not available for this user.
Return the number of available credit notes.
Return True if the ticket product category has been registered.
Edit profile.
Handle a profile request.
Handles a product request.
Handle a voucher request.
Allows manual payment of an invoice.
Refund an invoice.
Extend a reservation for a user.
Invoice emailout form.
Invoices with product and status badges.
Render a badge.
Return a list of available discounts for the given user.
Annotate queryset with past_use_count items.
Return a list of all available products for the specified user.
Applies this payment to an invoice.
Get the cancellation fee for the credit note.
Generates a random access code.
Get an object from a module name.
Generate an invoice for a given cart.
Generate a manual invoice.
Applies credit notes to an invoice.
Checks if the invoice can view the invoice.
Refresh the invoice from the database.
Validates that the invoice is allowed to pay.
Update the status of the invoice.
Mark the invoice as paid.
Checks if the invoice matches the current cart revision
Update the validity of the invoice.
Marks the invoice as void.
Refund the invoice.
Send email to invoice s user.
Update the annotation with the given data.
Flattens a field into a flat dictionary.
Print the downloads for the annotation.
Download the specified field from the gencloud.
Get the processors associated with a given processor name.
Print processor inputs.
Run data from a JSON string.
Upload a processor to a project.
Upload a file to the session.
Download data objects from the API.
Returns a list of all subclasses of the given class.
Get repo and project.
Get the variant phenotypes with suggested changes.
Get variant phenotypes and phenotypes that have suggested changes merged.
Update the object with the current state of the object.
Remove duplicates from a sequence.
Authenticate with Asana and Github.
Prompts the user to select a value from a list.
Get the data for a saved issue.
Move the issue data from the previous state to the new state.
Get the saved data for a task.
Get a Asana task by its ID.
Apply a value to a key.
Flush all the items in the queue.
Create a missing task in Asana workspace.
Returns a list of data types for this project.
Logs the given string using ekmmeters_log_func.
Initialize the serial port.
Set polling values.
Render json reads since the given timestamp and meter.
Set the context string.
calcpf - Calculates the costheta cost of the given pf.
Set the maximum demand period for the serial port.
Set a new password for the meter.
Returns the current month buffer for the given direction.
Assigns a schedule to a period hour minute and tariff.
Assigns a new season and schedule to the schedule.
Assign holiday and month to the parameter dictionary.
Read schedules from a tableset.
Read all the monthtariffs of the specified type.
Read the days of the day of the year.
Return True if read settings have been set.
Write a command message to the ekm log.
Sends a password to the serial port.
Update all registered observers.
Send a request to the server.
Requesta method.
Request B.
Makes all the fields uppercase and lowercase.
Set a list of display items to display.
Set relay status and password for the serial port.
Postend serial port.
Set the pulse input ratio.
Set the resettablekwh keyword for zero resettablekwh.
Set the CDN of the device.
Iterate over the fields in a schema.
Iterate over the fields in a schema.
Generates a random string of length at_least at_most characters.
Return a string with the timing and result statistics.
Color the text with the given color.
Show text in the terminal.
Return a summary of the results.
Parse command line arguments.
Setup the INIRE manager.
Run the example.
Transforms the given configuration into a string.
Transform a describe node into an ast. classdef.
Transform the body of a describe example into a list of examples.
Transforms an example into a function definition.
Transform an example body into a list of example nodes.
Returns a list of ast. Arguments that takes only self.
Register a filefinder finder.
Convert a source byte string to a Python code object.
Apply an argument parser to a list of arguments.
Load a module by its name.
Load a Python source file from a path.
Discover all files in a directory.
Remove a place configuration file.
Restart a place.
Call places function.
Make a service.
Refreshes the session for this nodelist.
Remove expired nodes from the nodelist.
Remove a node from the nodelist.
Get the last time a node was updated.
Get all nodes in the nodelist
Refreshes the session with expired nodes.
Increment the times modified counter.
Delimit a list of values by a delimiter.
Check if a path is bad.
Merges the given status into this one.
Check if the given value exists.
Get the identifier of the given value.
Create a service and add it to the heart.
Parse a reader and return the result.
Return an optional parser for the given input.
Replacement for parser. rep1.
Replace a parser with a sequence of sequences.
Return a parser with a separator.
Return a parser with the separator removed from the parser.
Closes the underlying call and cancels the call.
Check if the URL is valid.
Add a new heart to the master if it doesn t already exist.
Wrap the given service into a single service.
Freeze a graph from a checkpoint.
Freezes the graph from checkpoint to output_file_path.
Saves a graph only from a checkpoint.
Save weights from a checkpoint.
Restore from a checkpoint.
Parse a token and return a new Tag instance.
Render a tag.
Validate the arguments for a template tag.
Get the context data for this tag.
Parse the token and return a Tag instance.
Get context data.
Convert a caffe model to a tensorflow session.
Freezes a caffe model from a checkpoint.
Saves a graph only to a tensorflow session.
Create a list of rows from a sequence.
Iterates over every other item in an iterable.
Remove duplicates from an iterable.
Peeks at the next element of an iterable and returns it and the original.
Suppress exceptions from a list of callables.
Assert that all elements in iterable have the same order.
Swap onmiss for partition_result.
Returns a list of the first n queues.
Resets the iterator and saved attributes.
Parses a token and returns the bits and as_var.
Return the descendant keychain of this keychain.
Iterate over an iterable of objects.
Select an object by selector.
Parse a selector and return a list of results.
Return the parents of the nodes in rhs that are in lhs.
Return a list of nodes that are siblings of lhs and rhs.
Returns a list of nodes that match the given validators.
Make a GET request and return the response body.
Expires the cache with the given age.
Set a key - value pair in the store.
Get a value from the store.
Returns True if the store contains the given key.
Check if the chain is valid.
Create a Requirement object from a JSON string.
Create a new instance from an XML string.
Returns the rendered content of the response.
Get a list of lines from the logfile and call the specified function.
Get a list of rows from the table.
Validate a token against the expected_data dictionary.
The engine to use for the cryptography library.
Validate a token using the supported digest algorithms.
Create a new token with the given data.
Return the 32 - bit counter value between two numbers.
Return the 64 - bit counter of a counter of b.
Calculates the average duration for a given total duration and number of visits.
Create sources and setup triggers.
Send an event to the specified source.
Start a sourcewatcher that listens for events.
Parse a format string.
Parse a line of text into a dictionary.
Validates that the given field has expired.
Verify the token is valid.
Name of the device.
Raises a warning node if msg is not a string.
Connects the receiver functions.
Create a secret link.
Send an accept notification.
Send confirmation notification to recipient.
Send email validation notification.
Send a reject notification.
Send a notification.
Create a new link.
Validates a token and returns True if it is valid False otherwise.
Revoke this link.
Create a new record.
Get a user by receiver.
Confirm email confirmation.
Create a secret link.
Generate a sha512 hash for the given version.
Verifies the signature of a message.
Check if a record isargoed.
Create an access request.
Confirm the email address of a record.
Return a new connection to the ssh command client.
Reverse the given column.
Returns the selected value or none.
Return the items in the query.
Get the version of the file.
Set the version of the file.
Start the timer.
Wait for the next event to be processed.
Show the list of available secret links.
Stop the connection.
Empty the queue.
Add a list of events to the queue.
Create Elasticsearch client.
Encodes an event into a protobuf event.
Encodes a protobuf message.
Decodes a protobuf message.
Send events to the server.
Generate a preview of a file.
Retrieve a preview.
Loop over a message queue.
True if time is less than the log_interval.
Abort the SASL session.
Performs a SASLPRE mapping for the given chars.
Return the admin footer tag.
Build the payment parameters for the given amount.
Build the payment parameters for a register credit card.
Pay with an alias.
Return a version string for the given version.
Postconstruction hook.
Configure the shortcuts.
Called when the user activates an item.
Called when the user selects an item.
Called when the user clicks on a location widget.
Set the resource source path and resource target path to the resource source path.
Fetches the children of this node.
Return the icon of the source at the given index.
Call a subprocess and return the child pid.
Get the maximum file descriptor for this resource.
Close a file descriptor.
Close all open file descriptors.
Redirect the stream to the specified target.
Set widget attributes for all widgets in the form.
Import a module from an app.
Import all project modules that have been installed in the project.
Includes the given token.
Check if the given path is a valid file system.
Check if a URL is a valid S3 URL.
Return the absolute path of a template file.
List all objects in the specified folder.
Build the wf_json for the workflow.
Execute the gbdx command and update the id
Archive a folder.
Recursively create a directory.
List all files matching a pattern.
Restore a folder to its original state.
Create a new Access Token.
Returns a list of all files in the specified path.
Downloads a file from the server to the specified path.
Check if the given path exists in the storage.
Get the parent of the given path.
Create a new folder in the specified path.
Upload a local file to a destination path.
Delete a folder or file from the storage.
Validate a storage path.
Create a new instance of StorageClient.
Create a new instance of this storage service.
Get the metadata for an entity.
Delete a project.
Delete a folder.
Copies the content of the specified file to the specified file.
Get the signed URL for a file.
Emit a record to the collection.
Converts a service and version to a service.
Returns a copy of this object with the specified headers.
Returns a copy of this object with the specified parameters.
Returns a copy of this string with the given exception_class and should_throw added.
Returns a list of field names that can be used to display the list.
Apply a function to each partition of a job and add it to the job.
Run oncotator on a vcf.
Sorts the list by the given function.
Returns a list of datetime objects representing the time of the query.
Load export from folder
Shift the string by t times.
Returns the sum of all the strings in the sequence.
Return a list of Rfxcom devices.
Create a new user with a username and password.
Parse vn results.
Parse release results.
Parse the results of the producers query and return a list of dicts.
Parse the character results from a BeautifulSoup object.
Parse tags from a soup and return a list of strings.
Parses the user results from a soup and returns a list of dictionaries.
Create a tarball from a list of file paths.
For each file in file_paths run op on each file in output_dir.
Copy a file from a job to the output_dir.
Returns a list of docker parameters for this Docker command.
Refresh the metadata from the database.
Returns a list of all streams in the file.
Export data to a directory.
Parse search results.
Reset the API key for this device.
Returns a list of users in the database.
Run BWA index.
Returns a connectordb object.
Add a stream to the connector database.
Add a stream to the database. If schema is none the stream will be added to the database
Insert a new stream into the database.
Start the sync thread.
Stop synchronization thread.
Download a URL to the local file store.
Upload a job to S3.
List the labels of an ontology.
Print the tree of the ontology.
Get the mean insert size of a bam.
Create a new schema in the repository.
Export the data to a JSON file.
Return a device object for this path.
Get the labels for the given ontology.
Returns an iterator over the hierarchy for the given ontology.
Get the empty config file.
Get the mount path for this container.
Add an option to arg_parser.
Create an argument parser for this command.
Create a pipeline command.
Set authentication for the websocket.
Handle the result received from the server.
Ping the server.
Create a new resource.
Update a resource.
Delete a resource.
Subscribe to a stream.
Returns a list of all devices in the cluster.
Run a cutadapt tool.
Run the SAMtools FASTINDEX tool on the local file system.
Run samtools index on a BAM file
Run the SAMBamba markdup tool on the given BAM.
Run a single samblaster.
Mark duplicates in bam and bai.
Run Picard sort on a given bam.
Run the kallisto index.
Get the user affinity matrix for a test.
Send a command to the websocket.
Subscribe to a stream.
Connect to the websocket.
Reconnect to the device.
Resubscribe all subscriptions.
Called when the websocket is opened.
Called when the websocket connection is closed.
Called when an error occurs.
Process a message from the websocket.
Ensure the connection is still alive.
Run a gatk select variants.
Quick check a BAM file.
Write configuration to a JSON file.
Get the configuration as a dictionary.
Get the term associated with the ontology and iri.
Search ontology by name.
Suggest a given ontology.
Iterate over all the terms in the ontology that are descendant of the specified ontology.
Iterate over the labels of all descendant nodes of the ontology.
Iterate over the labels of all the terms in the ontology.
Iterate over the terms in the hierarchy of the ontology.
Run fastqc on r1_id r2_id
Add a stream to the query.
Starts the Docker container.
Start a Spark container.
Start a new datanode.
Stop hdfs container.
Check the status of this container.
Look up a zone by name.
Fetch the configuration from the r53 server.
Merge a list of config chunks into a single XML document.
Validate a changeset.
Minimize the best fitness score for a list of members.
Return the fitness score for this group.
Ave the cost function value of the cost function.
Returns the med cost function value.
Returns the number of parameters for this process.
Returns a list of the members of the group.
Adds a parameter to the list of parameters.
Normalize the keys of a list of items.
Yields all environment variables that match the prefix.
Runs the callable with the specified exceptions and returns True if the callable raises an exception.
Transform a list of hits into a list of packages.
Transform the result of a Python type into a string.
Convert html to xhtml.
Convert XHTML to HTML.
Open a document in a webbrowser.
Removes this node from the tree.
Drop the tag from the parent.
Apply a css selector expression to the document.
Iterate over all the members of the loggers.
Returns a dictionary of counts for each environment variable.
Returns True if the class is a single class.
Returns True if the module is a single module.
Validates that the params in the request are valid.
Validates that the given request has a valid id.
Decode a file system path.
Escape any argument specifications in iterable.
Return the canonical name of the given encoding.
Detect the encoding of the bom file.
Get the remote address of the forwarded_for.
Convert a number to a decimal number.
Parse a string and return a BeautifulSoup object.
Parse a file and return an etree. elementtree. ElementTree
Convert a beautiful soup tree to a list of children.
Get the current traceback.
Return the traceback as a unicode string.
Render the summary.
Generate a traceback of the current line number and the current line number.
Renders the source table.
Return the name of the egg_info that matches the search_name.
Sort a list of links by eggs and no eggs.
Get the content type of the given url.
Returns an iterator over all links in the document.
Check if we are verifiable.
Find data files for a package in src_dir.
Exclude data files that are not in the exclude_package_data dictionary.
Parse a requirements file and yield a list of requirements.
Yield lines from iterator that ends with str_.
Yield lines ignoring comments.
Visit a node and return the result as a string.
Return an astroid. Attribute node as string.
Coerce a JSON value to a number.
Push the current context to the stack.
Remove the last reference from the stack and remove it from the stack.
Return a copy of this request.
Matches the request with the url adapter.
Push the current request context to the stack.
Check if a distribution is editable.
Add a url_value processor to the registry.
Add a default function to the app. url_default_functions dictionary.
Get the root path for the specified import.
Return a Jinja2 loader for the template folder.
Run the completion script.
Get the domain of the cookie for the given app.
Check if wheeldir is a pure library.
Yields the uninstallation paths for the given distribution.
Check the compatibility of a wheel.
Build a single wheel if it exists.
Iterates over the symbols of the given code.
Writes the delete marker file to the specified directory.
Return True if the system is running under virtualenv.
Get the username of the current user.
Build a scheme for a distutils distribution.
Parse the cache control headers.
Cache the response.
Load template from dev_path.
Save the file to disk.
Convert the given value to the appropriate converter.
Add filters to filterer.
Add handlers to a logger.
Common logger configuration.
Compile and execute a script file.
Temporarily overwrite a temporary directory.
Returns the url and revision of the git repository.
Get an item from an object.
Generate a file from a source file.
Get the default cache path for the current environment.
Find egg distributions in a zip archive.
Find distributions on a path.
Declare a namespace for the given packagename.
Return the MRO of the given class.
Find the adapter for ob in registry.
Ensures that a directory exists and if not creates it.
Iterates over all entry points in the specified group.
Return True if dist can add this package.
Evaluate a marker.
Interpret the given text using markerlib.
Format a record for logging.
Get the quantum of a number.
Get the decimal precision of a number.
Returns the scientific notation elements of the given value.
Return an unpatched class.
Check the requirements of a distribution.
Fetches the build egg for this package and installs it.
Roll dice rolls.
Convert price object to price object.
Create a price attribute.
Validate the request.
Get a method from the app.
Apply a method to args and return the result.
Return the module of the blueprint.
Returns the blueprint for this route.
Makes an abstract version of a distribution.
Walk the req_to_install list and call the specified handler on each of the req_
Returns a list of all namespace packages.
Convert obj to str if obj is a model or queryset.
Tokenize a document by an annotation.
Annotate merge annotations between two tokens.
Copy the annotations from src to dest.
Compresses a list of tokens into a list of tokens.
Generate markup - serialized HTML from a list of tokens.
Expands a list of tokens into HTML.
Finds the unbalanced end in the unbalanced_end list.
Given a list of chunks and a list of tuples fixup the chunks to make sure that
Flattens an HTML element into a list of HTML elements.
Split text into words.
Return the start tag of an element.
Return the end tag of an element.
Serializes an HTML fragment into a string.
Remove tags that are not in the block level.
Returns the cache url for this service.
Recursively autolinks the given element.
Kill conditional comments.
Extracts a document from a string.
Export the revision to the specified location.
Get the revision number of the file at the given location.
The name of the module.
Propagate any exceptions that have been raised.
Find the path to the instance file for this instance.
Update the context with the template context.
Handle an HTTP exception.
Handle an exception.
Raise routing exception if debug is enabled.
Dispatch the request and process the response.
Create a default response object based on the default adapter.
Creates a url adapter for the given request.
Inject url default functions into the given endpoint.
Yield unique values from iterable.
Handles packages that require the specified key.
Returns a string representation of the requires specification of a requirement.
Convert a pkginfo. egg_info. egg_info. egg_info_path to
Iterate over all modules in this directory.
Iterate over all classes in this module.
Iterate over all methods and functions in the class.
Checks if the given path is a module path.
Yield root dirs and files from basedir.
Dump the default values for the keyword arguments.
Load default values from the kwargs dictionary.
Set multiple key - value pairs in the cache.
Increment the value of a key by delta.
Serializes a Python object to a string.
Builds editable options from a request.
Populates the link for this requirement from the given finder.
Ensure source_dir is not None.
Remove temporary source.
Get the distribution for this package.
Return a list of site configuration directories for the specified application.
Iterate over all the module files.
Restart the program with a reloader.
Convert a string to a text string.
Find the path to a CA bundle.
Parses the given document using the given treebuilder.
Parses the given stream and returns a DOM tree.
Parse a fragment from the given stream.
Translate a word to a sorted list of transmissions.
Convert command line arguments to tokens.
Bind the httpserver to the server.
Prints the report to stdout.
Load bytecode from file.
Takes a dictionary of parameters and a dictionary of kwargs and returns a stylesheet params dictionary.
Run a command on the system.
Get the version string of the implementation installed on the system.
Return a list of distributions for a given location.
Find all external links in a page.
Open a local file or directory.
Return a set of all paths that have been removed from sys. path.
Create a set of all the directories in sys. path.
Add a package to sys. path.
Add a sitedir to sys. path.
Check whether the enableusersite is enabled.
Aliases for the current platform.
Set sys. encoding to str_.
Force global eggs after local site packages.
Fix sys. path so that it starts with str_.
Wrap subprocess. popen with a thread and enqueue stdout and stderr.
Check if all pyrex implementations have been imported.
Convert pyrex sources to language.
Runs the application and prints the traceback.
Get a resource from a file.
Checks if the given name is a valid URL.
Unpack a file from a URL.
Download a link to a temporary directory.
Check if a link exists in download_dir.
Register a currency format action.
Register a component as an exchange.
Decode data using the decoder.
Default template context processor.
Render the template and send the template_rendered signal.
Render a Jinja2 template.
Renders a Jinja2 template string.
Parse a version string into a Python version object.
Returns True if the given name is declared locally or parameter.
Visit a name node.
Visit fromimport node.
Factory function for httpserviceprovider.
URL encode a string or unicode object.
Return a list of wheels that match req.
Populate a requirement set with requirements.
Export the contents of a temporary directory to a temporary directory.
Look up an item in Amazon.
Iterate over all pages.
Get the ancestor of the current element.
Returns a list of amazonbrowsenode. amazonbrowsenode. amazonbrowsenode. amazonbrowsenode
Get the element at the specified path.
Get the text of an element.
Get the date from the element at the specified path.
Price and currency.
List price.
Overrides Django s send method to add caching headers if needed.
Overrides Django s build_response method to update the cache if necessary.
Return the title of a string.
Compare two constant time values for equality.
Verify the signature of a key - value pair.
Derive a key based on the salt and secret key.
Get the signature for the given value.
Signs the given value with the given separator.
Verifies the signature of the given value and signature.
Unsign a signed value.
Sign the value with the timestamp.
Validates that the signed value is valid. Returns True if valid False otherwise.
Serialize an object to a string.
Raises a serviceexception with the specified error.
Yield packages that have parent packages.
Yield all dirs in the given base_path.
Prepare the HTTP response for the given request.
Unsign a wheelfile.
Unpack wheelfile into dest.
Install scripts for distributions.
Arranges all the data to be displayed.
Redraw the canvas.
Get a node from the graph with the given id.
Called when a new directed connection has changed.
Add edges to object.
Called when a component has changed.
Handles a normal left click.
Called when the diagram canvas has changed
Clears the current canvas.
Domain model changed for diagram.
Unmaps a model from the map.
Map an element to a diagram.
Parse xdot data into a list of strings.
Process font tokens.
Process an ellipse.
Process a polygon token.
Process a list of tokens and return a polyline.
Processes text and returns a text component.
Process image tokens.
Render a grid file.
Save the object to the dot file.
Loads the dot file and returns the object.
Returns true if point_x is within point_y.
Draws the bounds to the given gc.
Performs the dotgraphwizard action.
Start the engine.
Parses the dot code and sets the model.
Create a new model.
Open a file dialog and set the model.
Saves the model to a file.
Saves the current model to a file.
Configures the graph based on the current settings.
Configures the nodes view.
Configure edges.
About godot edit.
Adds a node to the graph.
Add an edge to the graph.
Add a subgraph to the control.
Add a cluster to the graph.
Requests a graph from the model and returns it.
Handle godot options.
Configure dot_code and edittraits.
Called when the user exits the program.
Move all components to the origin.
Save the given flo to a file - like object.
Load from a file - like object.
Save the model to a file.
Load an object from a file.
Create an alias property.
Parses a text file and yields a generator of words.
Returns a list of startwords of the words in the document.
Add a chain to the model.
Remove a chain from the chain list.
Build a chain from a source and a chain.
Create a new dot file and save it to disk.
Delete a node from the graph.
Get the node with the given id.
Delete an edge from the graph.
Add a subgraph to the cluster.
Called when the program has changed.
Set the list of nodes and edges to new.
Parse a dot file and return a graph object.
Parses a dot file.
Build a top - level graph from a list of tokens.
Get the units and multiplier for a given time.
Format a duration in a human readable form.
Called when a path changes.
Create the UI for this widget.
Split an iterable into windows of length length.
Returns a list of the children of the given object.
Append a child to an object.
Insert a child into an object.
Delete a child from an object.
Triggered when the children of the object have been replaced.
Called when children of object have changed.
Get the label for the object.
Set the label of the object.
Called when the label has changed.
Initializes the widget.
Updates the editor with the current value.
Add listeners to the object.
Replaces old node with new node.
Called when the node changes.
Add nodes to the graph.
Remove the old and new edges and replace them with the new ones.
Handle edges changed events.
Add edges to the graph.
Parse the xdot directive.
Called when the drawing is done.
Create a node from a row factory keyword.
Create an edge from a row factory.
Prepare the database for use with the mongoengineproxy module.
Parse the xdot drawing directive.
Parse a label directive.
Called when the drawing has changed.
Called when the current position changes.
Changes the position of the component to the new position.
Normal right down event handler.
Show information about the given style.
Draw the main layer.
Returns True if the given point is inside the given rule.
Draws the main layer.
Dispatches an event to all registered engines.
Run the function in a separate thread.
Get full page url for given page number.
Render the HTML for the previous and next links.
Renders the previous and next links of the current page.
Create a URL identifier for the given user and password.
Discover all modules in the specified directory.
Find all modules in the specified directory.
List all modules in the specified module.
Ensure a directory exists.
Stores the contents of the specified text blob in this blob store.
Check if a card number is a Luhn number.
Load a module from a module_name.
Add a path to the list of paths.
Find a module in the directory specified by module_name.
Split a line into a list of lines.
Remove all namespaces from the root element.
Returns a string with the differences between desired_version and strictness.
Create a new instance from a YAML specification.
Merges new_dict into this one.
Execute all actions in the shell.
Add a details message to the message.
Emit a record.
Add image rendition to context.
Record the number of attempts for the given key.
Add a url to the queue.
Start all the workers in the queue.
Set a key - value pair.
Get a key from KV Store.
Recurse through a key and return a dictionary of key - value pairs.
Returns the index for a given key.
Delete a key from KV Store.
Plot the heatmap of a feature distribution.
Add a number of months to a datetime object.
Add a number of months to a date.
Check if the current month is a penalized period.
Use a music service.
Use a storage service.
Reads a CSV file and returns a list of labels and their values.
Returns a list of the contents of this object as a list of strings.
Writes x and y to a JSON file.
Filter x and y based on ref_label.
Compute the average of the values in x and y based on ref_label
Restore data from session.
Merge dict b into a.
Find all registered block registry modules.
Verify that the given block is registered or invalid.
Register a block of the specified type.
Unregisters the specified block type.
Convert a file to a mp3 file.
Return a reasonable version string based on the desired version.
Handle SSL redirects.
Parses a content type and returns a content type object.
Parse a string into a list of strings.
Resizes an image to fit the width of dest_w.
Download a youtube url.
Connect to the server and create a folder.
Upload a file to a folder.
Connect to the music server.
Update sky_file and sky_azimuth and sky_azimuth.
Read the aphi from a file.
Scale the a_phi to the given scale parameter.
Reads a_water from a file and sets the a_water attribute
Read aure water scattering from a file.
Read an iop from a file.
Write an IOP to a file.
Build a scattering fraction of the b.
Build the A matrix.
Build the c matrix.
Build all IPA components.
Batch parameters for a set of parameters.
Reads a parameter file and converts it to a dictionary
Convert a string to a list of floats
Set the handler for each of the signals.
Handle a pseudo - handler.
Default handler for handling signals.
Pause the execution of a signal.
Abort the program.
Resumes the execution of the status functions.
Remove an event from the event list.
Fetch a sorted metric from the database.
Extracts signature information from a function or method.
This function is called when a signature is received from a partial function.
Return a new argv and extra_argv.
Ignorecertain metainf files in a file.
Return the key for a file.
Convert a binary quadratic model to an integer.
Parse the user data header.
Get the duration of the given number of seconds.
Prints the details of the game.
Extracts the data from the widget.
Searches the result file and displays the graphic.
Writes the parameter values to a batchfile.
Process the result file.
Display the connection to the graphics device.
Display the error message.
Hides the error message label.
Runs the program.
Cancel planarrad.
Quits the dialog.
Saves the figure to disk.
Open the log file.
Opens the document and opens it.
Performs prerequisite actions.
Handles click events.
Moves the cursor to the normal mode.
Display the graphic if authorized_display is True.
Create a lockset for the genesis with the given privkey.
Sign this object with a private key.
Return the SHA3 hash of the message.
Check if the object is valid.
Add a new amount to the account and issue a new amount.
Returns the lock of the last available lock.
Last voted block proposal.
Returns the lockset of the last valid lockset.
Get the timeout in seconds.
Called when a proposal is received.
Generate a list of privkeys for the given number.
Delay a packet.
Deliver a packet to the consensus manager.
Convert an address to a native contract class.
Update filter with new data.
Convert a VGG image to an image.
Convert an image to VGG format.
Returns the function for the given layer.
Get the output of a layer.
Get the features for the input x.
Create a new key file.
Finish the job.
Release the giraffe table.
Returns a list of the tables in the giraffe database.
Decorator for distutils. ccompiler. ccompiler. compile.
Find the most recent Teradata home version.
Get a value from the configuration.
Set the value of a key in the config file.
Process a table line.
Write the default configuration to a yaml file.
Set the names of the columns to filter on.
Returns the encoder settings as a string.
Convert a string to a float with multiple multipliers.
Returns a dictionary of specific gains from a string.
Get device settings from a string.
Wrap text with textwrap. textwrapper.
Detect devices in soapy.
Set the center frequency of the PSD.
Calculate the frequency and pwr values for a PSD state.
Wait for the result to be returned.
Update psd_state with samples_array.
Read header and pwr array from file.
Write the pwr array to a file.
Submits a function to the queue and returns the future.
Returns the number of times to repeat for the given bins.
Create a new buffer for the device.
Setup the PSF stream.
Stop the stream.
Run cmake executable.
Filter a set of datetimes based on a number of datetimes.
Mask the given datetime.
Mask a datetime to a week.
Convert a list of datetimes to a list of delete datetimes.
Convert a list of dates to keep a set of dates.
Convert a list of dates to a list of dates to delete.
Get the byte representation of the SPI control byte.
Read a bit from the specified address.
Write a bit to the specified address.
Get the number of bits in a bit pattern.
Brs a gpio interrupt pin to the userspace.
Set the GPIO interrupt edge to a string.
Waits until a file exists.
Register a callback for a pin.
Deregister a pin.
Enables or disables gpio interrupts.
Send bytes_to_send bytes_to_send to the device.
Renders the given form using the given context.
Returns True if the form has any errors.
Renders a link to the form.
Extract the version number of a package.
Overrides formcontainersMixin. get_form_kwargs to add a string to the form
Check the status of the response.
Make a GET request to the API.
Calculate the humidity for a temperature and dewpoint.
Calculate the dewpoint from the temperature and hum.
Publish the message to the server.
Calculate the CRC of the given data.
Verify the integrity of the given data.
Unpack storm date from a storm date.
Determine whether or not the archive should be used.
Wake up the device.
Send a command to the device.
Get new archive fields from the device.
Parses the data and sets self. fields.
Update weather properties for a given station.
Initialize the logging module.
Get a list of pub services for the given opts.
Get the value for the given station and interval
Set the pressure clouds and weather parameters.
Set the keyword arguments for this command.
Publish the arguments to the file.
Fulfills the specified requirements.
Push a new override to the stack.
Remove and return the last frame from the stack.
Temporarily override the current context.
Push additional onto the stack.
Remove and return the topmost context from the stack.
Context manager that adds additional information to the current context.
Remove duplicate field names from a list of field names.
Interpret the stats from the results.
Extract parameters from a query string.
Returns a pandas. dataframe of the DataFrame.
Returns a graph representation of the graph.
Plot the x - axis and y - axis.
Return the CSV representation of the table as a string.
Overrides widget. get_context_data to update widget context data.
Returns a list of tuples with the widget name widget position and position.
Returns a list of widgets that need to be updated.
Register widget_cls with widget_kwargs.
Unregister widget_cls.
Get the last update for this widget.
Saves a setting to the widget.
Return True if we should update the last update time.
Concatenate multiple arrays along the specified axis.
Check if any of the arguments are valid.
Format axes as a tuple or tuple.
Wrap a function into a Spark object.
Align this shape to the given axes.
Convert to a Spark array.
Return the RD of this TimeSeries along the specified axis.
Get the number of chunks from a plan and shape.
Get mask for a set of booleans.
Repartition this RDD by npartitions partitions.
Stack the RDD.
Align axis with self. split.
Return the first element of the DStream.
Return the mean of the elements along an axis.
Return the variance of the elements along the specified axis.
Return the standard deviation of the data along the specified axis.
Return the sum of the elements along the specified axis.
Returns the maximum value of the elements along the specified axis.
Return the minimum value of the elements along the specified axis.
Transpose the array to the specified axes.
Swap axis1 and axis2 along axis2.
Reshape this object to the specified shape.
Reshapes a basic shape.
Cast this RDD to a given type.
Clip the RDD to a range of values.
Convert the RDD to a numpy array.
Convert an argument into a tuple.
Takes a list or iterable and a tuple and returns a tuple.
Check if the shape is within the specified axes.
Return True if all elements in a and b are all equal.
Convert a list of integers to a list of integers.
Slicify a slice or slice object.
Check if new is transposeable with old.
Check if new is reshapeable with old.
Concatenate a list of arrays into a single array.
Expand a arry by expand_dims.
Lookup a constructor by name or kwargs.
Create a numpy array of the given shape dtype and order.
Create an array of given shape dtype and order.
Concatenate multiple arrays along the specified axis.
Discrete likelihood.
Returns the least - likelihood of the data at xmin.
Discrete alpha MLE.
Discrete best alpha.
Plot the PPF of the data.
Lognormal distribution.
Sanitize a HTML string for use in turbo.
Configure yandex analytics.
Return a list of tags.
Return the md5 hash of the decoded key.
Return the SHA256 hash of the key.
Return the SHA - 512 hash of the key.
Parses the given data as a long.
Decode a base64 - encoded public key.
Process SSH public key data.
Process SSH DSS data.
Process ECDSA SHA data.
Process ed25516 data.
Parse the keydata string and store it in self. keydata.
Available mechansims.
Main entry point for the init function.
Initialize setuptools.
Context manager for creating a wave file.
Format HTML for frontend H5bp CSS.
Return a djfrontend normalized version string.
Return a versioned version of djfrontend_fontawesome.
Return a djfrontend - modernizr template.
Renders the djfrontend_jquery. js template.
Formats the djfrontend_jqueryui widget.
Return the HTML for the jQuery datatables page.
Return the CSS for the jQuery datatables CSS.
Return the HTML for the jQuery datatables themeroller.
Return the HTML for the jQuery formset.
Formats the jQuery scroll to the specified version.
Return the HTML for the jQuery smoothscroll page.
Formats the HTML for the frontend Twbs CSS.
Return a string representing the domain name of the frontend Gaussian.
Iterate over the hash of a user s password password and secret key.
Calculate the expiry time for a given number of minutes.
Generate a user token for the given user and purpose.
Serialize the object to a JSON string.
Update a user s profile.
Send user_login_failed message if credentials is None.
Validates the given token and returns the validated user.
Check if the request is secure.
Get the username for the given user.
Create a new user.
Login to a user.
Unsubs the current user.
Logs the user with the given parameters.
Login with a username and password.
Login with a resume token.
Forgot password sender.
Resets a user s password.
Recursively merges a nested dict into a nested dict.
Get the MEEOR ID for the given object or model.
Given a list of object IDs return a dict of meteor IDs for each object
Get the object id for a meteor_id.
Given a list of meteor IDs return a mapping of meteor IDs to
Get an object for a meteor_id
Set the default forwards for the given operation.
Set the default reverse for all objects in the operation.
Truncate the forwards of the database.
Truncate the backwards of the database.
Initialize the options for this module.
Finalize the options.
Convert a list of path arguments to a full path.
Seed a set of values.
Returns the current state of the object.
Generate a random string of specified length using the specified alphabet.
Iterate over all api endpoints in the given object.
Clears the API path map cache for all api providers.
Pretty print a string.
Called when the websocket connection is opened.
Called when the connection is closed.
Called when a websocket message is received.
Yield frames from a message.
Process a DDP message.
Dispatch a message to the appropriate handler.
Receive a connection from the DB.
PING command.
recv a sub from the server
recv_unsub - Unsub command
Recieve a method from the server.
Yield information about a socketjs socket.
Entry point for the script.
Print msg if verbosity is greater than num_.
Stop all servers and threads.
Run the worker thread.
Run the psycopg2 command.
greenify the psycopg2 module
Get a random METSOR ID.
Autodiscover the api module.
Return a dict representation of the exception.
Get a thread - local object by name.
Emit a record.
Add a resource object to the blueprint.
Send a message to the registration.
Send a bulk message to the APNS server.
Fetch inactive registration IDs from the APNS.
Send a message using GCMMessenger.
Send a message using GCMMessenger.
Send a JSON message to the device.
Send a request to the API.
Get model class from module_location.
Search a phrase using giphy.
Translate a term phrase and rating to a phrase.
Returns a list of trending objects.
Get a GIF by ID.
Return a screensaver for the given tag.
Upload tags to a file.
Normalize data to int.
Perform a GET request to the API.
Return a generator of trending images.
Retrieve a GIF from the registry.
Upload a file to the GIF.
Get the extension for the given access control.
Authenticate using youtube - service.
Upload a video to youtube.
Check the status of a video.
Update a video entry.
Delete a video entry.
Check availability of a video.
Check the availability of a video.
List all videos.
Directly upload a video using youtubedirectuploadform.
Upload a video to youtube.
Attempt to upload a video to youtube.
Remove a video.
Entry point for this video.
Saves the video to the API.
Delete this video.
Updates the metadata for this bucket.
Updates an existing metadata field.
Update this item.
Parse a string and return a list of nodes.
Return a string representation of a list of trees.
Load a JSON document from a file - like object.
Read a file and return a Python object.
Parse a string into a Node object.
Create a new node with the given name length and descendants.
Return a string representation of the newick label.
Get the node with the given label.
Remove all leaves from the tree.
Remove internal names from the tree.
Remove leaf names from the tree.
Dispose of a JSON string.
Require a setting to be set.
Returns a list of all the arguments that match the specified name.
Asynchronously call a callback with args and kwargs.
Get a cookie from the cookie_monster
Remove a cookie from the cookie_monster.
Authenticates the user and redirects the user to the specified callback URI.
Get an authenticated user.
Returns a dictionary of request parameters for the OAuth request.
Redirects the user to authorize or redirect to the specified scope.
Concatenate url with args.
Parse a header line and return a key and a dictionary of parameters.
Add a key - value pair to this key.
Get a list of all the values for the specified name.
Parse a line of text and add it to the dictionary.
Parse the headers.
Normalize a name to be used in HTTP headers.
Convert a value to UTF - 8.
Convert a value to a unicode string.
Convert a value to a basestring.
Recursively convert unicode objects to unicode.
Set up the authentication plugin for the given application.
Select a policy from the active policies.
Calculates the occupancy of a set of points.
Write a molecule to a file.
Write a PDB file with the given atoms and box.
Determine the number of molecules to use for the given absolute and relative molecule
Resize the pbc to fit the molecules.
Iterate over the contents of a resource file.
Add a message to a user s messages.
Sends a message to each of the specified users.
Get a user s messages.
Add messages to the response if the user is authenticated.
Check the config file for validity.
Verify that a profile name is valid.
Retrieve data from config.
Retrieve password from config.
Update config data from msg.
Update the pwd for a config message.
Create a config profile for a message type.
Display required items for a message type.
Get data from user.
Get the auth information for a message type from the user configuration.
Configure a profile.
Write a message to cfg. data.
Write authentication information to cfg. pwd.
Send the message to the server.
Factory function for creating a message of the specified type.
Validate an input message.
Validate Twilio attributes.
Validate Slack post attributes.
Validate whatsapp attribute.
Send a message to the pool and wait for it to finish.
Add a message to the message queue.
Get the body from a file.
Trim any keyword arguments from the given dictionary.
Send a message to the client.
Get the chat id for the given username.
Send the content to the server.
Send the message to the server.
Get the smtp server for the given address.
Generate email message.
Add the header to the message
Add the message body to the message.
Attach attachments to message.
Get a session object for this connection.
Returns an ssl connection object for the SMTP server.
Returns a smtp session with TLS enabled.
Sends the email to the server.
Save the object to a file.
Unloads the image.
Get the region of a single image.
Validates that all keys and values are valid.
Remove all internal elements from the list.
Read the data from the file.
Delete this chunk.
Resize the chunk to the specified size.
Insert a chunk into the file.
Save the ID3 frame to a file.
Deletes the file specified by filename.
Parse a file and return a list of lines.
Process a normal line.
Add a block of lines to the file.
Draws a string to the specified font.
Parse ISO 8601 time string.
Takes a list of words and returns a string representing the words.
Makes an HTML word for the given word.
Makes a paragraph of a list of words.
Makes HTML code from a list of lines.
Make HTML for a list of items.
Save the metadata to a file.
Update the parent atoms of the fileobj with delta.
Run the game loop.
Register a mapping for a vendor and product.
Get a specific controller from the registry.
Sign string using HMAC - SHA256.
Get request headers.
Send a GET request to the API.
Send a POST request to the API.
Send a DELETE request to the server.
Ape a value according to kind.
Change resource record sets for a change set.
Returns the size of the packet in bytes.
Find the last page of a file object with the given serial number.
Set the section of the document.
Add markup markup to self. markups.
Process the HTML content.
Get the markup for the given tag name.
Create a hosted zone writer.
Lock a file - like object.
Insert a number of bytes into a file.
Deletes the specified number of bytes from the specified file object.
Convert data to UTF - 8.
Add a change to this route.
Parse e_change_info and return dict.
Measure the width of a string.
Returns True if the object is modified.
Delete this resource record set.
Save this resource record set to the hosted zone.
Read size bytes from the file and return them.
Delete all keys with the given key.
Add a frame to the loaded frame dictionary.
Update the genres and mimes.
Unloads the sound.
Set the start and end point of the voice loop.
Returns a list of glyphs and values for each adobe glyph.
Return a list of glyph names that match the given filter.
Dump the encoding list to a file.
Dumps the array to a file.
Check if a file exists.
Make a list of all files in the specified path.
Parse a hosted zone and return a hostedzone object.
Parse the nameservers from the e_delegation_set.
Write a list of blocks to a string.
Group a list of paddings into a single string.
Deletes the metadata block from the repository.
Save the metadata to a file.
Parse the RRSet alias and return the hosted zone id and dns name.
Parse RRSet record values into a list of strings.
Parse a RRSet and return a new RRSet subclass.
Add a record to this zone.
Create a new mx resource record.
Create a new ns resource recordset.
Create a new record with the specified name and values.
Create a new SPF resource record.
Create a new record in the srvresource recordset.
Get the initial values for the given change.
Write a change to the etree.
Writes a change record set to the specified resource record set.
Initialize the logging module.
Return the item with the given alias.
Freeze a dictionary into a sorted tuple.
Join HTML attributes into a template and a list of attributes.
Initializes the application.
Initialize all bars.
Bind a bar to the queue.
Returns a dictionary of the arguments to be passed to the function.
Returns True if the current view is the same as the current view.
Validate a metric class.
Get a statistic by its name.
Calculates statistics for a given stat.
Auto - discover all installed apps.
Dump stats to CSV.
Get statistics for a given frequency or calculate statistics.
Get an array from a GET request.
Get a value from request. get.
Get the next colour.
Get the gecko parameters for a chart.
Get the latest and previous geckoboard number widget.
Show the latest count of all geckoboard metrics.
Charts the geckoboard line chart.
Get the latest geckoboard geckometer.
Get the latest stats for a geckoboard function.
Get active gadget stats.
Register gadget.
Get the context data for this table.
Print error message and exit.
Prompt the user for a long input.
Prompt the user for a list of strings.
Prompt the user to enter a file or a file.
Returns a DataFrame containing the schedule information for the given year.
Return the winner of the game.
Returns the season of the current date.
Returns the surface of the git repository.
Return the coin toss for this coin.
Get weather information from the weather table.
Get information about the reference.
Schedule the game to be played.
Returns the standings of the team.
Get the team stats table.
Returns a DataFrame containing the roy recording data.
Returns a pandas dataframe containing the line score of the game.
Returns the year of the year of the year.
Get player stats as pandas dataframe.
Return the key for a class instance.
Returns the age of the birth of the given year month and day.
Get stats from a table.
Get stats per game.
Return stats_totals for a given kind and summary flag.
Get stats per36 in a table.
Get stats per 100.
Get a list of stats that are advanced to the specified kind.
Returns a list of statsshooting objects for the specified kind.
Returns a stats table.
Return a DataFrame of gameslog basic information for a given year.
Get the current value of the session.
Expands the details of a DataFrame into a single DataFrame.
Add team and opp columns to a dataframe.
Add team features to a DataFrame.
Return the initial winprob for a line.
Return a dataframe with the passing of the query.
Returns a list of integers representing the simple award for the given award_id.
The name of the team.
Return boxscores for a given year.
Return the pq for the given year and keyword.
Return the head coaches for a given team in a given year.
Schedules the given year.
Return the off - coordinate attribute of the given year.
Return the default coordinate for a given year.
Return the team ID for a given year.
Turn off scheme for a given year.
Return the default alignment for a given year.
Turn splits into a pandas dataframe.
Get html from url.
Directly put the contents of the read queue.
Get a direct read from the queue.
Close the connection to the queue.
Get a batch of HDF5 data.
Get the remainder of the batch at the given path.
Get a generator of rows from the queue at path.
Parse an IPA file or file - like object.
Dumps the contents of an object to a file.
Read a varint from the file.
Returns a generator that yields all the objects in the file.
Flush and close the file descriptor.
Write one or more bytes to the buffer.
Flush the write buffer.
Get the path to the game directory.
Perform keyboard emulation on input text with keyboard emulation.
Evaluates the traits of the model.
Wait until a condition is met.
Waits untiltraits are present in the element_with_traits.
Add ignored exceptions to the exception list.
Executes the specified main volume operator and returns the result.
Execute a command and return the source code.
Send a message to the socket and return the reply.
Get the current status of the NAD.
Power off the device.
Power on the device.
Set the volume.
Select a source.
Deobfuscate a key.
Calculate the CRC for the given plaintext.
Obfuscate a value.
Find missing schema for song_name
Get a list of all hrefs in the given html.
Check if song name is a valid name.
Parses the given url and returns a list of hrefs for the given song.
Generate a Google URL for a song and website.
Parse Google download URL.
Parse a Google song and return a website URL.
Get a response from the given url.
Download a file using requests.
Download a file using wget.
Search for station codes by city
Get the observations for a location.
Parse an observation response from the API.
Return a list of compiler extensions.
The mimetype of the file.
Return the MIME type of the compiler.
Return the compiler format extension.
Register a processor for the given mimetype.
Unregister a processor for a mimetype.
Returns a list of all the paths of the current finders.
Register default settings.
Import qtcore from pyside or pyside
Get the netnode for the meta data.
Add a netnode plugin name to the meta_netnode dictionary
Delete plugin_name from current_names.
Import settings from config_path.
Export settings to config_path.
The directory of the plugin.
Iterates over all keys in the environment.
Simple error handler for simple exceptions.
Get a table from DynamoDB.
List all tables in DynamoDB.
Fetches the items for the specified category.
Return the metadata id for the given item.
Return the timestamp of the metadata updated on the given item.
Fetch the owner team for a crate.
Fetch the owner user for a crate.
Fetch the versions of a crate.
Fetch version downloads from crate.
Get a list of category crates.
Get a specific crate.
Yields all the items in the specified path.
Fetch the items for the given category.
Get all questions from kitsune.
Fetch the items for the given category and offset.
Return the timestamp of the metadata updated on the given item.
Get the category for a metadata item.
Get a generator of items for a given category.
List of available buffers.
Return the io priority flag.
Close the connection to the queue.
Submit a list of blocks and return the number of submitted blocks.
Cancel the given block.
Cancel all pending operations.
Fetch the items for the given category.
Get the raw text of all cells.
Parse the feed and yield events.
Return a list of format names for the given pid_type.
Returns the permission factory.
Default view method.
Export a record to a template.
Runs a callable and returns the result.
Close the socket.
Remove a client from the pool.
Increment the counter for a metric.
Send a timing metric to the client.
Timing since start_time.
Send a gauge request.
Send a gauge delta to the client.
Set a metric to the specified rate.
Request a batch of data.
Create a batch client.
Create a unit client.
Flush all pending messages to the remote server.
Create a batch client.
Flush all pending messages to the socket.
Return a TCP client for the unit.
Create a new instance of any_user.
Interpret x as an OpenMath object.
Convert a term to openmath using the given converter.
Convert an omobj to a python object.
Convert obj to openmath.
Initialize the Flask app.
Generator that yields keys that are valid choices.
Create a new value for the given field.
Returns a dictionary of form_data and a dict of form_files that can be used to
Returns the data for a decimal field.
Format email field data.
Generate a random date for a field.
Generate a random datetime field data.
Returns the data for a float field.
Returns the data for an integer field.
Generate a random time for a time field.
Generates a random choice string for the given field.
Returns the data for a multiple choice field.
Returns a random choice for the given field.
Encodes an XML object into a byte string.
Publish a message to Sdist and upload.
Tag the build.
Load a python global variable from a module.
Decode a bytearray into a bytearray.
Convert a value to a fixed value.
Format a number according to the settings.
Convert data to a numpy array.
Convert a bytearray to a bytearray.
Add a configuration variable to the config file.
Remove a value from the config.
Return a list of all the ws configurations.
Get the value of the specified attribute from the websocket.
Check if a repository exists in the workspace.
Sync a workspace with all repositories.
Clone a url and return a clone of it.
Check the version of the server.
Convert an array to a list of voxels.
Create a numpy array from a list of voxels.
Executes the shell command.
Update an existing repository.
Set the console handler.
Execute a command and return a subprocess. Popen object.
Load an image from a PNG file.
Save a collection of numpy data.
Print workspace status.
Print the status of a repository
Get the block size for the given token.
Post cutout without chunking blosc.
Load an image from a tiff file.
Save numpy data to a PNG file.
Load a multi - page TIFF image from a multi - page TIFF file
Write the configuration to a YAML file.
Clone the given URL and return the new URL.
Get the version of the installed package.
Mix and match name with greeting.
A decorator that prints the name of an option.
Reserve ids for a given quantity for a given token.
Merge a list of IDs into a single ramon.
Propagate the given token to the given channel.
List all projects in a dataset.
Get a specific dataset by name.
List all available remote datasets.
Parse the command line arguments.
Show workspace or all workspaces.
Show workspace information.
Show all workspaces
Returns the URL for the given endpoint.
Tries to guess the format from a file extension.
Open an image file.
Convert a file from one format to another.
Convert ramons to a dictionary.
Convert a python type to ramon type.
Delete a channel from a project and dataset.
Generate a JSON representation of the ND dataset.
Create a dictionary of dataset attributes.
Create a dictionary for a channel.
Returns a project dictionary for the given project name token name and public.
Identify the size of an image.
PUT data to the server
Find a path in a repository in the config.
Returns a list of public tokens for this account.
Get the project information for the given token.
Set metadata for a remotedata upload.
Perform a GET request to the given url.
POST a url with the given token.
Deletes the specified URL with the specified token.
Load data from a hdf5 file.
Save an array to a hdf5 file.
Infer gaps in a tree.
Recover a nvimio.
Install jinja2 translations.
Exclusive namespaces.
Return the percent of the data for the given part and total.
Get the cache stats for all servers.
Get the cached slabs from the server.
Return context data as dict.
Show the status of the server.
Render a dashboard page.
Show stats for a specific server.
List Slabs on a server.
Convert a human - readable value to human - readable bytes.
Find a config file or a configfile.
Add a directory or a directory to the environment.
Apply the applicator to the configuration file.
Absolute path of the file.
Read the contents of the file and return it as a string.
Write data to the file.
Configure the logging handler.
Create the file if it doesn t exist.
Apply the given applicator to this node s configuration.
Absolute path of the file.
Remove this directory or all its sub - directories.
Prepares the tree for rendering.
Cleans up the tree and all its children.
Return the path to the given path.
Return a list of all files in this directory.
Write data to a file.
Read a file and return its contents as a string.
Add one or more files to the tree.
Save the configuration to a YAML file.
Loads the configuration from a YAML file.
Remove the file if it exists.
Load plugins from a directory.
Return a child config node with the given path.
Get the value of the key or index.
Apply the config to a string.
Build the URL for a callback.
Read input and process it.
Send the output to the socket.
Send a request to the client.
Read input from a socket.
Write the output data to a socket.
Returns a dictionary of remote_snd_settled and remote_rcv_s
Configures the PN link.
The source address of the sender or remote source.
The address of the target that this link points to.
Called when the session is closed.
Create a new sender.
Request a sender link.
Create a new receiver with the specified name.
Request a receiver link for a given pn_link.
Destroy a link.
Check if the session has been closed.
Process an endpoint event.
Extend markdown with markdown tags.
Close the receiver link and wait for it to finish.
Mark receiver_link as failed.
Get the host and port from a server address.
Connect to a socket.
Create a server socket.
Return a tuple of readers writers and timers that need processing.
Get the output data from the transport.
Create a new sender.
Reject a sender link.
Create a new receiver.
Called when a connection attempt has failed.
Explicitely disconnect from the ep_active endpoint.
Called when the connection needs to be closed.
Called when an error occurs in a connection.
Get the string representation of the color.
Get the TTF of the fonts in the search path.
Set the compression flag.
Add an object to the document.
Write stream to buffer.
Writes the contents of the stream to the output stream.
Add a new page to the document.
Set color scheme.
Set the default font.
Add a new page to the document.
Set font size.
Add text to the document.
Add a newline to the current page.
Add a pie chart to the current page.
Output all pages in the session.
Get the list of orientation changes.
Output all fonts.
Output all the images.
Write the image to the output stream.
Transform the matrix a b c d e f in the current page.
Return the absolute position of the current matrix.
Set the style of the font.
Rotate a point by the angle specified.
Set information about the object.
Set the display mode for the display.
Closes the document and returns the output.
Write the header of the PDF file.
Puts the current number of pages into the document.
Put the resource dictionary into the session.
Stores information about the current user.
Add a trailer to the buffer.
Cycle detection for a sequence of sequences.
Return a naive version of seqs.
Iterates over a sequence of sequences yielding each value in a sequence.
Brent sequence generator.
Fit the test to the x - th test length.
Fits the y - axis to test_length
Checks if x is greater than test_ordinate.
Returns true if y is greater than test_ordinate.
Return a copy of the cursor.
Increase x by dx.
Increase the y by the given amount.
Draws the text.
List tags.
Returns a list of labels with the given name.
Delete a tag.
Creates a new label.
Returns a list of all the actions associated with this account.
Returns a list of tags with the given label.
List hooks.
Setup extension and extlinks.
Return the absolute path to the themes directory.
Makes a POST request to the API.
List all hosts and logs.
Get a logset from the server.
Return the duration of the time series.
Update the transit limbdark and settings attributes.
Compute the transit matrix.
Return a binary representation of the transit matrix.
Frees allocated memory.
Receive size bytes from socket and write to buffer.
Generator that yields lines from the buffer.
Return the status code and message for the current connection.
Generate the code for the given message.
Generate an info message.
Return a list of capabilities.
Read mode.
Quit the server.
Return a datetime object representing the date of the reply.
Display the help message.
Generate new groups for the specified timestamp.
Generate a list of newnews from pattern and timestamp.
Generate a list of active STP groups.
Generator that yields name timestamp and creator of active times.
List newsgroups.
List overview format strings.
List available extensions.
Generate a list of strings for a given keyword.
Generate a list of strings.
Send a XZ header to the server.
Generate a list of lines from a pattern.
Use xfeature_compress_gzip to compress features.
Return the offset of the value.
Make a POST request to the API.
Generic DELETE operation.
Make a GET request to the API.
Returns a list of scheduled queries for this account.
List all tags for this account.
Get a tag by name or id.
Delete a tag.
Create a scheduled query.
Delete an alert tag.
Parse a newsgroup line.
Parse a header line.
Unparse headers from a dict of dicts.
POST request.
Runs the given tests.
Return a docstring for the defaults section of the document.
Set the value of the field.
Check that the value is of the correct type.
Return the value of the attribute or the value of the attribute.
Check that the value is of the correct type.
Returns the symmetric error of the model.
Set errors.
Set the value of the variable.
Import metrics into the database.
Extract a dictionary of metrics from a list of metrics.
Filter metrics based on the filter expression.
Call the RPC API.
Apply an expression terminal alternation to text.
Apply the operator operator to text.
Adds a new operation to the token.
Initializes the properties of the object.
Returns a list of all the parameters in the model.
Returns the values of all parameters in the model.
Return the errors of all parameters in the model.
Clear all derived parameters.
Set the method for this attribute.
Get environment variables.
Call the API.
Validate that the sceneinfo is valid.
Verify the type product for a satellite.
Get the size of the remote file at the given url.
Validate a list of bands against a list of valid bands.
Connect to Earthexplorer.
Normalize the given datetime to the current timezone.
Concatenate an iterable into a single string using the specified delimiter.
Get the positions of the newlines in the given text.
Points the source to the specified position.
Dump the results to stdout.
Filter relays based on metrics and plugins.
Load fortunes from a list of files.
Set fortunes for a list of files.
Main entry point for the script.
Apply a rule to the given text.
Apply special handling to the given text.
The grammar of the grammar.
Returns a list of all rules in the grammar.
Returns a list of all comments of this token.
Return a list of directives.
The source of the output file.
Compiles the token into a string.
Get the imports string for this module.
Return a string representation of the token type enum.
Returns the class definition string for the class.
Get the entry point for the directive.
Get the source of a rule.
Get the transform for a given rule.
Convert an Expression to an ASN subtree.
Convert a node to an ASN.
Given a list of operands and a predicate return a list of operands that match the predicate.
Remove grouping groups from an optree node.
Convert AST node to code.
Convert an AST node to a code object.
Convert an AST terminal to a list of code.
Convert an AST option group to a list of code lines.
Convert an AST repetition group to a list of code lines.
Convert a SpecialHandling object to a list of code strings.
Convert an AST operator to a list of code lines.
Return a list of code lines for an opconcat operation.
Return a list of lines where each line is a list of the operands of the opr that
Convert a multiplicity operation to a list of code lines.
Convert an AST operation to a list of code lines.
Find directives that match the given predicate.
Return True if child is a child of parent.
Handles the response from the API.
Get a wxid from a wxid
Remove a hotkey from a control
Add the arguments to the parser.
Configure logging.
Validate the arguments.
Convert a list of INfix nodes to a list of postfix operators.
Convert a list of postfix nodes to an optree.
Reduce a list of nodes.
Load the plugin manifest.
Returns a tuple of the namelen and descriptionlen of each field in the table.
Returns a tuple of displaylen and desclen for each metrics column
Replace underscores with underscores.
Output the fields as markdown.
Output metrics to markdown.
Generate markdown.
Parse the given text and return the tree.
Attempts to reach the maximum consumed length of the text.
Add command line arguments to the parser.
Parse a string and return a datetime. datetime object.
Outputs the given text as a CSV file.
Outputs the given text as JSON
Output a raw JSON payload to stdout.
Outputs the given text as an XML document.
Return True if the given node is a trimmed prediction.
Pretty print a node.
Returns a function that returns the repetition of a string.
Get a terminal node from a string value.
Extract text based on exclusion.
Count the number of leading whitespaces in the text.
Call extractor function.
Return the position of the node in the tree.
Return True if all the children of this node are empty.
Add ignored values to the consumed list.
Checks if the given value is a type.
Flatten this node into a flattened version of this node.
Return a trimmed version of this parsenode.
Merge this node with another node.
Retype this node to a new type.
Return a compressed version of this node.
Return the position of the cursor.
Return the position of the maximum readed line.
Moves the cursor to the next character.
Step forward the next line.
Move the cursor to the previous line.
Returns the last line that has been read.
Increment the cursor position.
Saves the current cursor position to the context list.
Restore the current cursor position.
Return a formatted string representation of the message.
Set the name of the signature.
Count the number of variables in the signature.
Count the number of functions in the signature.
Update the signature with a list or scope.
Return a new scope with the union of the given signature.
Update the signature with the intersection of the given set of signatures.
Return the intersection of sig with sig.
Update this scope with the difference of the keys in oset.
Return a new scope with sig removed from this scope.
Update the signature with the symmetric difference of the given oset.
Return a new scope with the same signature as sig.
Add a signature to the signature.
Remove signature from signature.
Remove the signature from the signature.
Returns the signature for the first signature in the signature.
Return the last signature in the signature.
Get a scope by symbol name.
Get a signature by symbol name.
Get all polymorphic return scope.
Calls the asttranslatorinjector for the given node.
Recursively normalizes the given AST.
Set the attributes of othernode to othernode.
Check if a hit is ok.
Get the signature for the computation.
Resolve the signature.
Returns a list of resolved names for the given type.
Set the name of the resolved type.
Delete local file if it exists.
Delete a file from S3.
Delete a file from S3.
Save a local file to the object.
Save an object to S3.
Save the object to a temp file.
Find a bucket by path in S3.
Create an enum from a sequence of sequential enums.
Set one thing in chainmap for thing_name
Read the next character from the stream.
Pushes the rule nodes onto the stack.
Pop the rule nodes from the cache.
Get the value of a node.
Add a parsed stream to the parser.
Begin a new tag with the given name.
End the tag with the given name.
Set the rules for the class.
Set the hooks for this class.
Set the directives for this namespace.
Evaluate the rule with the given name.
Evaluate a hook.
Peeks at the specified text from the stream and returns true if it matches the specified text
Return the next one character in the stream.
Read a character from the stream.
Read until EOF.
Ignore blanks from the stream.
Check the structure compatibility of the cluster hits.
Add a rule clause name to a namespace name.
Add rules to bnf.
Add a rule to the parser tree.
Add sequences to the parser tree.
Add an alternative to the parser tree.
Add a range to the parser tree.
Add a rpt to the sequence.
Add a capture statement to the given sequence.
Add a bind statement to the given CPT.
Add a parsing hook to the sequence.
Set the number of a parameter.
Set the value of a string parameter to the value of the string parameter.
Set the value of a parameter with the given character.
Set the id of the parameter at the given position.
Set the name of a hook.
Add hook parameter to hook. listparam.
Evaluate the rules and return the result.
Ignore Cxx characters.
Add a state to the state dictionary.
Return a dot representation of the state.
Write the object to a dot file.
Writes the object to a PNG file.
Return a string representation of the state and uid events.
Return a new state that is the next state in the tree.
Resets the state of the agent to its initial state.
infer_block infers the node and type of the body
Infer the subexpression of expr.
infer_literal infers a literal
Dump the node information to stdout.
Return the exit scope.
Return a list of clauses for the given parsing. ParserTree.
Parse a call node.
Return an AST node for a call true statement.
Return the AST for a parsing. hook node.
Return an ast. expr representing a rule node.
Parse a capture statement.
Return the name of the current scope.
Return an ast. stmt for parsing. alt node.
Return a list of ast. stmts for the given parsing. seq node.
Parse a repoptional statement.
Parse a rep0n statement.
Parse a RE1N AST node.
Concatenate src to dst with indent.
Set the indent level of a list.
Convert a list to a string.
Echo all nodes in the given list.
Populate the state register from a list of sequences.
Populate the state register of all sequences.
Build the state tree from the given state tree.
Return True if n is equal to val.
Create a grammar from a string.
Build a grammar from a file.
Parse this node from the given source.
Parse a file and return a parsing. node object.
Set a node in the cache.
Set the node as an integer.
Get the subnode of expr in dst.
Dump a deposition to a dictionary.
Return a generator of recids from invenio12.
Return a generator of recids from invenio2.
Returns a tuple of the check number and list of IDs.
Dump an object to a dictionary.
Return the number of users in the database.
Dump a User object to a dict.
Return set of modified recids for invenio12.
Get the set of recids modified since the given date.
Get the restriction for a collection.
Get revisions for a record.
Get all collections of a record.
Dump a record json to a string.
Returns the number of recids and the list of recids that match the query
Dump a record in a Biblink format.
Dump a RA object to a dict.
Load model_cls from data and add it to session.
Collects all the things from all the entry points.
Initialize the app context.
Returns the SQL to run the database.
Executes a SQL query and returns the number of actions and a list of dicts.
Dump a RT object to a dictionary.
Load an OAuth2 token from a dictionary.
Import a record into the database.
Get the imp value or default if not present.
Dump an object to a dictionary.
Get users in invenio12.
Get the number of users in the invenio2 database.
Dump a User object to a dictionary.
Load a deposit into the database.
Create a record and pid.
Load a record from a record dump.
Load records from JSON files.
Get profiler statistics.
Start the tornado web application.
Post profiling to the profiler.
Delete the current profile.
Delete the current profile.
Get the current running status.
Calculate the translation of each image in parallel.
Merge multiple images into a single image.
Add one or multiples dimension to an array.
Create a new record for the given dump.
Create a record for the given dump.
Update a record.
Create persistent identifiers for the given record_uuid.
Delete a record.
Create a file in the specified bucket and key.
Delete all buckets from a record.
Return a list of all pids that are missing.
Prepares the files to be written to disk.
Prepare the pids for the current revision.
Returns True if the given record has been deleted.
Load a community from the database.
Load a featuredcommunity.
Dump a thing to a JSON file.
Check a thing.
Deletes the widget and all event handlers.
Returns the magnitude of a vector.
Normalize the magnitude of a vector.
Transforms the texcoords to the specified dimensions.
Ensurebones are present in data.
Set the length of thebones in the data.
Set the parentbone for thisbone.
Calculate the pivot point for the given data.
Start animation.
Set the current state of the object.
Unset the state of the object.
Set the state of the bone.
Unset the state of the bone.
Ensure that the modeldata attribute of the given object is present in the modeldata dictionary.
Redraw the visualization.
Draws the model data for the given object.
Set the model to use.
Writes a list of reports to a file.
Add a menu to the menus.
Redraw the label.
Redraw the label.
Draws the widget.
Delete a widget from the list of widgets.
Redraw the label.
Register event handlers for mouse motion and drag events.
Register eventhandlers for the actor.
Add a label to the main widget.
Quit the dialog.
Updates the progressbar with the current progressbar information.
Render all the actors in the scene in 3d.
Renders the staticworld and draws the batch3d.
Check if a resource exists.
Add a category to the PEN file.
Get the missingtexture if it exists or create a new one if it doesn t exist.
Get a model object from the cache.
Load a model by name.
Get modeldata by name.
Add a widget to the widget list.
Draw the menu.
Redraw the canvas.
Redraw the scrollable container.
Check if the mouse is aaabb.
Returns the p - value of the distribution.
Add a layer to the list.
Add an action to the list of actions.
Executes the specified action on all registered actions.
Register a new name in the registry.
Add a layer to the layer list.
Draw the layered widget.
Deletes the layered widget.
The border of the widget.
Return the offset of the widget.
Returns the size of the widget.
Read a mesh from a HDFStore.
Create a connection to the given shape.
Set the fields for this query.
Add one or more fields to the model.
Check if the elements are within the allowed types.
The space of the element.
Returns a sorted list of edges in the graph.
Summarize the centroids and volumes.
Convert an element set to a node set.
Convert a node set to a surface.
Convert surface to element sets.
Return the metadata for each of the fields in the model.
Return a pandas. series containing the metadata for this step.
Make directories if needed.
Run Gmsh on the mesh and read the mesh.
Read a history report from a CSV file.
Read a field report from a CSV file.
Convert a list of strings to a string.
Return a string representation of the equation.
Return a string representation of the set with the given label.
Parse the response and return the payload.
Perform a GET request to the API.
Write a XY report to a file.
Return the error message for this field.
Return True if the exception is thrown by a descriptor.
Set the x and y attributes of the data object.
Returns a string indicating whether or not the given axis is a timevariable.
Set the options for the plot.
Create a class from a function and a set of attributes.
Cycle through the datafeeds and draw notifications
Try to convert a value to a float.
Convert a string to an integer or float.
Plots the graph of the given token.
Force unicode conversion.
Return True if mime_type matches mime_type.
Strips the domain name from the raw string.
Returns a list of cut strings for the left part of a domain name.
Make a hash keyword for the given document.
Collect all words in the sentence and collect them as a dictionary.
Index a document.
Invert a hash.
Return a dictionary of document frequencies for the given hashes.
Looks up the TensorFlow IDs for the given TF layer h.
Create a list of items from a protostream file.
Read a varint from the stream.
Reads an A from the stream.
Serialize an si_key into a string.
Convert a streamitem to a key and data.
Context manager for temporarily changing the working directory.
Strip prefix from string if it starts with prefix.
Strip suffix from s if it ends with suffix.
Test if needle is a subsequence of haystack.
Run the wsgiref server.
Shut down the server and close the server.
Returns a callback that will be called when a page error occurs.
Add a new route to the parser.
Resolves the given method and path.
Resolve a non - literal route.
Normalize a pattern and return the pattern type and pattern.
Return the response as a list.
Add a header to the request.
Set the value of a cookie.
Return a string with the status code and phrase.
Content - Type of the response.
Delete a directory recursively.
Return a list of open file descriptors.
Attempts to fetch a work unit from a file.
Get a list of lines from a file.
Generate a random adjspecies pair.
Generate a random adjspecies pair.
Morph a sentence to another sentence.
Show similarity of a query pair.
Run hiragana on a sentence.
Send an entity request to goolabs API.
Shortsum a review.
Send a keyword to goolabsapi.
Run chrono chrono on a sentence.
Initialize all the stages.
Run writers on a list of sources.
Run a series of incremental transforms.
Replace config with a new stage.
Return True if all target_mentions and chain_mentions are present in target_ment
Return True if any of the specified target_mentions are present in chain_mentions.
Match a stream item with multiple tokens.
Create a ner file for the tagger.
Terminate the child process.
Multiplies p by n.
Generate sentences from clean_visible.
Make the label index for the stream item.
Generate sentences for the given stream item.
Create a cleansed file.
Create a file for the specified tagger.
Remove punctuation and whitespace from a span.
Instantiate a pipeline configuration from a dictionary.
Generate a johnsmith chunk from a johnsmith file.
Makes a clean_visible file from a chunk of data.
Remove punctuation and whitespace from a span.
Main entry point for the script.
Tries to load a stage from the given module and functionname. If no stage is found
Load external stages from a file.
Initialize a stage with the given configuration.
Read a sequence of bytes from the specified index to the specified index.
Return True if href is in the blacklist.
Create a list of labels from clean_html.
Yield paths of files in input_dir.
Iterate over all tasks in the queue.
Get a random available row.
Returns a list of sentences for the given nerdom.
Verify that the md5 of the given data matches the expected md5.
Get a bucket from S3.
Decode data into a streamcorpus. Chunk object.
Get a chunk from a bucket.
Convert a stream ID to a KvLayer key.
Convert a kvlayer key to a stream id.
Generate a key for a stream item.
Entry point for the command line interface.
Build an argument parser.
Given a list of sentences return a generator of char tokens.
Convert a list of char tokens into a list of char offsets.
Add an element to the document.
Return the piece of the current xpath.
Return the index of the last tag in the text element.
Iterates over all descendants of an element.
Select elements from a DOM tree.
Select elements with the specified name from the specified source.
Select elements matching the given pattern.
Return a list of the following siblings of elem.
Call the inkscape command.
Exports an input file to an output file using inkscape.
Convert an SVG file to a PDF file.
Convert an SVG file to PNG format.
Get the jinja environment for the given file path.
Setup the template file for the template.
Fills the file content with the given doc_contents.
Save content to a file.
Create a doctype object from a template file.
Fills the doc_contents with the content of the svg document.
Renders the document to a temporary file.
Renders the template to a temporary file.
Create an expat parser from a string.
Return markup fragment from source.
Insert text into the document.
Insert node before refnode.
Return a copy of this node.
Return a string representation of the value of a node.
Insert child into the xml_children list.
Parse the config file and return a dictionary of mandatories.
Get Google credentials.
Create datetimes for the event.
Create an event for a service.
Entry point for the event CLI.
Get the extension of filepath. If check_if_exists is True return the extension of filepath
Add a file extension if it doesn t already exist.
Returns a named temporary file with the given suffix.
Remove all files with the given extension from workdir.
Convert csv file to json file.
Replace old with new in filepath with new.
Parses the content of the HTML document.
Check next sibling of tag. next_sibling.
Create aitalic style tag.
Create strong style tag.
Create an underline for the given tag.
Parse the attributes of a tag.
Remove linebreaks from a tag.
Parses the href and returns the query string of the href.
Parse an attribute value.
Translate key values from one dictionary to another.
Return a JSON string representation of the object.
Find files that match regex in folder_path.
Concatenate multiple strings.
Context manager that returns True if full starts with part
Yields items that contain part in full.
Context manager for boolean objects.
For each item in seq and expr yields each item in expr.
Given a tableid and a key return an iterator that yields the results of the lookup.
Replace characters for SVG code.
Check if svg_file is a valid SVG file.
Merge multiple PDFs into a single file.
Convert a font file to an SVG tree.
Embed a font to an SVG file.
Check all input types and raise runtimeerror if not.
Checks if the function is callable and raises runtimeerror if not
Recurse through a list of inputs and output.
Create a jinja2 input from a list of option.
Recurse through a list of options and add them to the output.
Convert an object to a string.
Convert an object to a number.
Convert an object to a boolean.
Return a generator that serializes the given xp_ast.
Change the XML encoding of a file.
Save text in qrcode format to out_filepath
Launch a melody command.
Calls the specified command with the specified args_strings.
Convert a tex file to a PDF file.
Returns a list of options for the given psy object.
Transform geom to to_sref.
Create an OGR geometry object.
Expands the bounds of this range to the values of other.
Return the intersection of the two tuples.
Returns True if this rectangle intersects the other rectangle.
Return a polygon of the linear ring.
Create a DataFrame from a znm.
Writes the main dataframe to a file.
Select rows based on a condition.
Return a table of rows at the given nuclei.
Return the intersection of this table and another table.
Return a new table with rows not in this table.
Select rows where the number of elements in each group are evenly spaced.
Return rows where the number of elements are even - odd.
Even - even - even - even portion of the query.
Return the error of the DataFrame relative to relative_to.
Returns the binding energy of the binding energy.
Convert a string representation of the Dugther s parent to a number.
The s1n of the DAG.
Convert S to P.
Derivative of S1p.
Return a table of values derived from the given formula.
Uses the given function to use the database session.
Derive a key from a master password.
Bootstrap a database.
Search domains by query.
Modify a domain.
Create a new domain.
Extract Hbs from a fileobj.
Return the prefix of a file system path.
The SID of the author.
Entry point for the command line interface.
Update a file from a URL.
Return a dictionary of all available driver names and metadata.
Return the image driver for the given path.
Convert a geometry to an array of rasters.
rasterize an image layer
Open a raster file.
Create a raster from a byte string.
Copy a raster from one source to another.
Returns a dictionary of options that can be passed to the parser.
Create a raster with the given size.
Set the affine transform.
Read data as an array.
Envelope of the raster.
Get the driver for this image.
Create a new raster.
Return a masked array of the current shapely geometry.
Returns the nodata value or None if there is none.
Read a raster from the dataset.
Resample the raster to the specified size using the specified interpolation.
Saves the object to the specified path.
Set the projection of the dataset.
Warp the raster to the specified spatial reference.
Calculate the chunklen and enclen for a given alph_len.
Looks up the given charset and returns it if it exists otherwise returns the default charset.
Encode a chunk of data at the specified index.
Convert a chunk to a long string.
Get the chunk at the given index.
Return a compiled regular expression for the given filename.
Normalize date format.
Detect the timezone for the current locale.
Return a dict representation of this Swagger object.
Handles all the jobs in the specified host and port.
Main worker for the Worker class.
Run a worker pool.
Sets the classification of the object.
Send a message to the client.
Turn on light.
Turn on switch.
Turn on with a given brightness.
Turn off a device.
Send messages from the queue.
Send a reliable message.
Sets the nature of this Measurement.
Set configuration files.
Iterate over all options and their values.
Create the configuration file at the specified index.
Update configuration values from a dictionary.
Read a configuration file and return as a dictionary.
Reads the configuration files and returns a dictionary of content empty_files faulty_files and empty
Return a list of names for the given option in a section.
Return a list of sections.
Build an argparse. argumentparser for this command.
Parse command line arguments.
Return a list of command names for bash - comp.
Perform bash completion.
Start a master.
Called when a connection is made.
Process a line of JSON.
Closes the connection and closes the worker.
Called when a job is loaded.
Handle a response from the client.
Closes the job and returns it.
Run one or more jobs.
Close the connection to the server.
Wait for all waiters to complete and set the result.
Add a result to the results list.
Wait for the completion to complete.
Load the next job from the queue.
Mark the job as done.
Add a result to the results list.
Cancel all currently running jobs.
Wait for all active jobs to complete.
Distribute jobs to the active JavaScript.
Add a list of jobs to the graph.
Get a job from the active JavaScript.
Return a job from the job source.
Add a result to a job.
Distribute the jobs that have been done.
Closes the stream.
Uniquify a list of strings.
Return True if obj matches a regex.
Get the boto region object.
Filter entries based on filters.
Get the public hostname of a host.
Create an instance from a dictionary.
Get the value of an attribute.
Create an instance from a boto instance.
Return True if the string matches the filter.
Return the public IP address of this IP address.
Add a timestamp to the event dict.
Create a structlog logger.
Setup a celery app.
Delete a worker from the queue.
Return the configuration section as a dict.
Create local or update config files if needed.
Prepares a list of rows from a table.
Generate a color based on the hash of a string.
Generate a random color.
Check if the username and password are valid.
Check if the user with the given token exists.
Check if the given process is running.
Dynamically import a module.
Get the IP address of this node.
Make a request to the API.
Prepares the post parameters to be sent to the client.
Run the server.
Render the template with the given name and value.
Stream a list of command dictionaries into a stream.
Return the network days between two dates.
Get the path to the given command.
Build the ssh command for the given hostname username idfile and tunnel.
Create a Profile object from command line arguments.
Add a relationship between this part and another part.
Returns a list of all related objects of the given type.
Load relationships from source.
Add a content part to the container.
Load a part from the given data.
Find a map for the given name.
Create a ContentType object from an XML element.
Parse a string and return a chatl visitor.
Builds a JWK payload from a secret key.
Assign force field to a molecule.
Finds the maximum radius and npnp for each parameter in the model.
Makes a dictionary with all the parameters for each atom in the structure.
Return the file as a stream.
Return a generator of matching segments for a given name.
Returns a list of all filenames in the specified directory.
Returns a list of all the directories in the specified directory.
Create a prefix for the given directory.
Delete a file from the bucket.
Ensures that the user is logged in.
Get loud language.
Returns the home url for the current user. If no home url is specified returns none.
Returns a sorted list of all hotspots in the tree.
Get a keeper token.
Upload a build to a directory.
Determine whether the travis event should be skipped.
Confirm that a build has been confirmed.
Recursively update a dictionary with the values in u.
Entry point for the keeper.
Edit a part.
Prints a list of files in the working directory.
Split a path into drive parts and tail parts.
Get the editor for the given filepath.
Process a module node.
Generate an HTML chart.
Return HTML for a chart.
Serializes a data object to a chart.
Patch json_data with json_data.
Convert JSON data to HTML.
Convert a dictionary to a pandas dataframe.
Write html to a file in folderpath.
Return the chart class for the given dataframe.
Encode x and y fields.
Infer the url of the tarball.
Create a new build and app.
Down an application.
Generate a random binary string of length length.
Generate a random IP address.
Generate a random date between two timestamps.
Create a session object.
Make an API request to the API.
Create a new build.
Check the status of a build.
Generate a sequence of strings prefixed with prefix.
Register sub - commands to parser.
Returns the argument parser for the root parser.
Get the description of the document.
Return the help string for this command.
Run the sub - parser.
Encode a dataset into a string.
Get the athletes from the server.
Get the last n activities.
Request the activity list for the specified athlete.
Request activity data.
Return the endpoint for an athlete.
Return the endpoint for an activity.
Get a request from the API.
Create a new build.
Create a url with authentication.
Get a random title for the given languages and genders.
Generate a random person.
Get the last name of a sample in the specified languages.
Renders the data to a string.
Set the dataset to use.
Render the data.
Check if the given type is in the types list
Returns the URL for this request.
Show this object in webbrowser.
Save the object to a file.
Open the URL and return a string with the contents of the URL.
Return a file - like object representing the image.
Write the URL to a file - like object.
Calculate the checksum of the file.
Returns the amount of a number between min and max
Returns a dictionary of unprotected claims and protected claims.
Return signing keys as JWKs.
Unpack a metadata statement.
Packs a metadata statement into a signature.
Evaluates the given metadata statement.
Corrects the given federation usage.
Extend a request with a list of SMS messages.
Parse command line arguments.
Add command line arguments to arg_parser.
Apply loggingopts to a list of log files.
Log msg with severity verbose.
Return a dictionary mapping letters to their number.
Generate anagrams in a word.
Convert the class to a AMP string.
Transform timeseries data from start to end.
Get the last value from a timeseries.
Validate a page number.
Get a page of iterator.
Change the permissions of a file or directory.
Create an internal signing service for the given entity.
Create a signing service for an entity.
Sign a request using the keyjar.
Create a new resource.
Update the metadata statement at the specified location.
Update the signature for the specified location.
Yields the contents of a bundle.
Create a bundle for the given data.
Returns a list of URLs for the given asset type.
Return HTML tags for the given asset type.
Return HTML tags for all asset types.
Protocolise url if it is not already a scheme.
Returns a list of links to the given url.
Connect to a client.
Returns a list of all modules in the project.
Import all modules in the module repository.
Select fields from a document.
Convert a list of datemaps to a datemap field.
Print a cursor to the console.
Output the results of the cursor.
Returns a list of all tasks in do_tasks in dep_graph.
Add default departments to project.
Add default dependencies and sequences to prj.
Create a shot for the given sequence.
Create all tasks for the given element.
Get a value from a config section and key.
Add a factory for the given identifier.
Remove a factory by identifier.
Connect to a protocol factory.
Receive data from the specified connection.
Disconnects a protocol from the specified connection.
Call a remote command and return the result.
Called when a connection is made.
Handle multiplexed connectionmade responses.
Called when data is received.
Send data to the remote device.
Remove the connection from the factory.
Get the local protocol for the given connectionidentifier.
Handle a remote data received from the remote server.
Disconnect a connection from the local protocol.
Create a string centered on mystring.
Print a clock on the right.
Return the version number as a string.
Identify the framework for a target unit.
Assert that the given unit is convertible to the given target unit.
Pad data_to_pad with the given block size.
Unpad a block of data.
Sign a request with self_signer.
Gather the metadata statements for the given context.
Prints a pretty - printed version of the input_word.
Argument parser for nagaram.
Entry point for the command line interface.
Receive data from the stream.
Called when a registered type is unregistered.
Create a stub function for the given RPC URL.
Log a warning if the call is remote to local.
Return a tuple of regexes for the command to be executed.
Convert a string into a AMPList object.
Return a string representation of the given object with the given proto.
Verify the signature of the metadata statement.
Parse a remote response.
List databases.
Sync a folder with S3.
Build a package from the given path.
Create a readonly fridge.
Loads the JSON document from the file.
Sign a JWT using the self - signed JWT.
Request signed by signing keys.
Discover all modules in testdir and load them as dependencies.
Command - line entry point for librarian.
Return the score of a letter.
Given a word and a list of input letters and a list of input letters and a number of
Read a list of words from a file.
Check if a string is a valid SCrabble word.
Process a string received from the server.
Get the command and responder function for the specified command.
Parse the request values.
Write the response to the transport.
Called when the connection is lost.
Build a protocol descriptor for a given address.
Convert a JWKS string to a keyjar object.
Load a JWKS string into the bundle.
Process a nova event.
Process a Cinder event.
Process a single neutron event.
Process a glance event.
Process a swift event.
Process a keystone event.
Process a heat event.
Start the WSGI server.
Print msg to sys. stdout.
Print a message to stderr.
Register a commandsubclass.
Register a commandsubclass with the registry.
Convert the given value to a string.
Create a value from a string.
Update completerdict with cdict.
Connect to the ternya server.
Initialize MQ connection.
Initialize the modules for this service.
Initialize nova consumer.
Initialize a cinder consumer.
Initialize neutron consumer.
Initialize a glance consumer.
Initialize the heat consumer.
Enables the component notification for the specified openstack component.
Get information about a song.
Download a song from a music file.
Executes the current instruction.
Loads the specified name from the globals_ dictionary if it exists.
Call a function.
Dump a database to a temporary directory.
Called when the program exits.
Runs the program and exits the program.
Context manager to temporarily change the current working directory.
Recursively copies the contents of src to dst.
Causes the debugger to be executed.
Get the mtime of a file.
Check if the item has changed.
Sync the formatime database with the formatime database
Clears all data from the cache.
Scrape an IPDB feed.
Downloads the image from the url and writes it to the cache directory.
Check if the image has changed.
Returns a tuple of filename line number number and name of the caller.
Get the defining component for a given pe and ep_pkg
Main entry point for xtuml.
Find a symbol in the stack.
Return True if pe_pe is contained in root.
Check if pe_pe is a global pe_pe.
Returns the name of the data type for the specified data type.
Get the related attributes from the rgo and r_rto.
Create an enum from an edt object.
Create a bridge function for the given SBG.
Create an external entity from an entity s_ee.
Create a function that interprets the given sync.
Calculates the constant value for the given CNST variable.
Create an operation function for the given o_tfr.
Create a property that returns the derived attribute of the given object.
Create a simple association between two Simps.
Create an association for the given m with the given r_rel
Create a component for the given bp_model.
Perform a single call and return the result.
Accept a reply and send it to the client.
Reject a call.
Raise a remote exception in reply_socket.
Wait for a call to be completed.
Establish a connection to a worker.
Dispatch a reply to the remote result service.
Guess the type name of the given value.
Deserialize a value into a Python object.
Get a document by content_id.
Put a list of features into the database.
Delete a document.
Delete all mappings from the index.
Delete the index if it exists.
Scan a prefix for features.
Scan a prefix and yield all the IDs associated with it.
Scan the index for IDs with the given value.
Return the source of the feature_names.
Return a list of filters for the given key range.
Get the mapping from index to fulltext index.
Get the field types for this document.
Return a list of disjunction of a query.
Return the number of features in fc_dict.
Count the number of bytes that match the filter_preds.
Return a pretty string representation of a feature dictionary.
Process docopt options.
Default formatter for htmlfill.
Convert an instance to a link string.
Return a pretty - printed unique identifier for an instance.
Checks the uniqueness constraint for the given model.
Check if the link is conditional or not.
Check if the given super_kind is a subtype of the given rel_id.
Transform a value to a string.
Delete all rows from the table.
impl of index_scan_prefix_impl.
Store the index table for the given index name.
Store a value in the index table.
Yield the keys for the indexes for idx_name and content_id
Return the index for the given index name.
Add a direction to a string.
Returns the name of the type in the given S_dt.
Get a reference to an attribute.
Builds the core type for the given CDN.
Builds the enum type for the given EDT.
Build a struct type from a SDT.
Builds the user type element for the given UDT.
Builds the type for the given S_dt.
Build a class from an object.
Builds a component that contains c_c.
Builds the schema for the given M and C.
Prettify the given XML string.
Fetches the bikes from the server.
Assign positional information to node.
Create a queue with the given name.
Delete the queue with the given name.
List all queues.
List all exchange names.
Purge a queue from the queue.
Create a MIME multipart message.
Reads the text cache from the connection.
Returns True if the text is visible.
Entry point for bridgepoint.
Serialize a value to the given ty.
Serialize the association as a string.
Return a string representation of a class.
Entry point for the command line interface.
Partitions a collection by a condition.
Render a bidi context.
Find a link between inst1 and inst2.
Compute the lookup key for the given instance.
Compute the index key for the given instance.
Returns the type of an attribute.
Create a new instance of this class and add it to the storage.
Yields all instances of the metaclass.
Define a metaclass.
Send a multipart message to the specified socket.
Receive a message from a socket.
Runs the dead code command and exits the program.
Parse email addresses.
Decorator for rpc functions.
Return the rpc spec table for the given app.
Normalizes the postcode of a request.
Return the next value from the stream.
Accept an ep_sys instance.
Accept a C - C - C - C instance.
Accept an EEP package.
Get the brightness of the image.
Match the value with the given arguments.
Finds a match in the document at the given position.
Returns a QTextEdit. ExtraSelection for the specified character.
Synchronizes the text edit with the cursor position.
Return a tuple of the exception information.
Get an instance of this class.
Executes the console widget.
Shifts the cursor to the right if the user pressed the key.
Returns True if the user pressed the right mouse button.
Returns whether or not the previous history item in the input buffer has been replaced with the substring specified
Moves the history to the next occurrence of substring. If as_prefix is set to True
Handle a reply message.
Returns True if the history is locked.
Get the history edit for the specified index.
Set the history for this edit.
Store the current edits in the history.
Close the console and cleanup the consoles.
Convert a collection to a pandas DataFrame.
Set the attributes of the object.
Subscribe to the stream.
Log a message.
Iterate over a remote view.
Convert notebook to this notebookformat.
Get the importer for the given path item.
Attempt to import cstringio as stringio.
Determine if setuptools should be overriden.
Parse a requirement from a source string.
Return the parsed package info as a string.
Collapse leading ws strings into a single string.
Hide the completion widget and remove the cursorpositionchanged signal.
Override showevent to connect the cursorpositionchanged signal and install the event filter
Return current text cursor.
Update the current item.
Register admin site for appname.
Return a list of partitions of all disks.
Get CPU times for the current user and system.
Returns a list of system per CPU times.
Read data from stdin and return as a string.
Read data from stdin and return it as a string.
Updates the visibility of the tab bar
Create a new tab with the current kernel.
Add a new tab with a frontend.
Populate the all_magic_menu with the magic menu.
Called when the user closes the tab.
Check if a passphrase matches a hashed passphrase.
Return a short title for the given item.
Check if the user has permission to change the object.
Check if the user has permission to delete the object.
Add n children of parent to g.
Make a binary tree from a list of levels.
Submit a set of jobs for each node in the graph.
Validates that the tree g is valid.
Make a color table for the given class.
Return a copy of this colorscheme.
Add a new colorscheme to the colorscheme dictionary.
Set the active scheme.
Return the path to the library directory for home.
Handle IOpub messages.
Wait for the kernel to be running.
Set the style to use.
Get the format for the given token.
Get the format from the document.
Returns a qtextcharformat object for the given style.
Find the path to a command.
Normalizes the given path.
Check if nsp in value is in value.
Check for entrypoints in pkg_resources. entrypoint
Return True if src has a blank line.
Return True if src is the last two blanks.
Transform a line of assign system into a new line.
Replace assign magic characters in a line.
Transform a classic prompt line to a string.
Transform an IPython prompt line into a string.
Find the number of indents and full dedents in the given line.
Store the lines in the specified buffer.
Reset the source and source_raw.
Handle cell magic lines.
Append lines to the line mode cell.
Transform a cell into a new cell.
Post notification to all registered observers.
Returns a set of all observers for a notification.
Add an observer to the registry.
Update the status of all running jobs.
Report the number of jobs in group.
Flush the group to the console.
Return a new status object with the latest information.
Report the status of the running task.
Initialize the thread.
Insert the value at the specified position.
Returns a copy of the object.
Declare a special variable.
Declare a list variable.
Declare a set variable.
Set the current working directory.
Moves the route to the given state.
Calculate the energy of a given state.
Return a dict with default values for all keys.
Check the table for differences.
Renders the expression for the given check.
Format a list of rows into a table.
Create a link to the given url.
Generate a JS file for the given URL.
Return a cssfile for the given url.
Generate an HTML img tag for the given url.
Substract value with arg.
Multiply a value by an argument.
Divide value by arg.
Modifies a numeric value with a numeric argument.
Return verbose name for modelform or modelform object.
Split a user input line into pre esc or ifun.
Add command line options to parser.
Deactivates all registered functions.
Find url_name in index_url with req. url_name
Yield explicit links.
Remove shell list from string.
Main entry point for coveragescript.
Add an action to the dash.
Append an action code to the parser.
Prints the help message for a given topic or parser.
Help command.
Check if any of the given arguments are valid.
Executes the executable.
\ x1b [ 1mNAME \ x1b [ 0m debug - Prints
Unserialize an object from a pickle file.
Set sys. displayhook.
Calls f with args and kwargs and logs errors.
Check if the given url is a valid URL.
Validates that the given URL is valid.
Validates a URL container.
Pull keys from globals and return them.
Select random ports.
Apply a sequence of sequences and return the result.
Get the last n lines from the history.
Set autoindent flag.
Initialize the logstart magic.
Save sys module state.
Restore sys module state.
Register a post - execute function.
Create a new main module.
Initialize user namespaces.
Returns a list of all namespace references.
Resets the state of the history manager. If new_session is True resets the current
Delete a variable from the history.
Remove all namespaces that match the given regular expression.
Find a property in a struct.
Find an object in the namespaces.
Inspect an object and call its inspector method.
Initialize the history manager.
Show traceback information.
Print the traceback to stdout.
Show syntax error traceback.
Insert indentation before the next line.
Set a custom completer for this matcher.
Set the completer frame.
Run magic_name with line.
Find a magic by name.
Add a macro to the namespace.
Run a system command.
Prompt the user for a rewriting input.
Returns a dictionary of user - defined variables.
Return a dictionary of user expressions.
Evaluate the expression expr and return the result.
Run the cell for the given executable file.
Runs the cached cell magic for the specified line.
Expand variables in cmd with formatter.
Create a temporary file and write data to it.
Stops the session and resets the session.
Broadcast a message to a target.
List all profiles in a directory.
List all bundled profiles.
Find a distribution by its key.
Returns the path to a file or None if it doesn t exist.
Read the next line from the buffer.
Send a string to the child process.
Send the integer to the child.
Prepare a regular expression pattern for parsing.
Prepare a regular expression pattern for parsing.
Search the string buffer for the best match in the buffer.
Search the buffer for the best match in the buffer.
Unpack a directory and all its contents into extract_dir.
Return the last error in the log.
Execute a command and return the output.
Find the source for the given filename.
Returns a list of all executed arcs.
Return a list of arcs that are not in the no branch.
Returns the unpredicted arcs.
Return a list of branch lines that have more than num_ exits.
Returns the total number of branches in the parser.
Returns a dictionary of all arcs that are missing from the current branch.
Return a dictionary of stats for each branch.
Set the precision of the model.
Returns the number of covered statements.
Get the string representation of the uncovered PC.
Highlight text in needles in haystack.
Highlights the given string with the given keywords.
Highlight words in a string.
Run a function on the module.
Remove the end of a string from the end of a string
marquee a string.
Formats a screen string for printing to the terminal.
Dedent a string.
Wrap paragraphs in paragraphs.
Find the optimal number of rows in a list of rlist.
Get a value from mylist or default.
Build the kernel argument list for this kernel.
Initialize the SSH tunnel to the kernel.
Pretty print an object.
Pretty print a Python object.
Get the MRO for the given object class.
Default pretty print for obj.
Override the super_pprint method.
Re pattern pprint.
Prints the type of obj to p.
Pretty print a function.
Pretty print an exception.
Decorator to add a function to a type.
Returns a deferred type printer function for the given type module and name.
Writes text to the output.
Append a breakable line to the output buffer.
End a group.
Flush the buffer and clear the buffer.
Pretty print an object.
Writes a row to an ODS Excel spreadsheet.
Get clipboard data from win32clipboard
Get the contents of the clipboard.
Get the clipboard contents of a tkinter clipboard.
Get the prefix for the build directory.
Rekey a dictionary.
Extract dates from an object.
Recursively squash all dates in an object.
Return the default date for the given object.
Check if the install_dir is a site directory.
Write a script to the install directory.
Sleep until the number of seconds have passed.
Create a parser for the given prog_name and subcommand
Disambiguate a connection file.
Build a packagefinder for the given options.
Changes the log level of the logging object.
Return a default logger.
Check that flags have changed.
Print the help for all the aliases.
Print the flag help.
Print the subcommand description.
Print help for this keyvalue.
Prints the examples to stdout.
Update config with new config.
Initialize a subcommand.
Flatten the flags and aliases into a single flag dictionary.
Parse the command line.
Load a configuration file.
Generate the config file for this config file.
Downsample an array by k.
Format a list of info into a list of strings.
Write a message to the output.
Called when a configurable configuration has changed.
Get the help string for a class.
Get the help for a trait.
Clears all instances of the specified class.
Format a failure message.
Handler for the crash handler.
Flush the socket and process events.
Emit start_channels signal.
Read a notebook from a file - like object.
Read bytes from p without interrupts.
Split a string into argument tokens.
Compress a Dhist.
Add a magic function to a dictionary.
Return a dictionary of all the documentation for all the magics.
Format a latex string.
Add a default option to the options table.
Page a GUI reference page.
Create a task from a callable.
Get information about a task with a label.
Get the callable object from the info dict.
calc_next_run Calculates the next run for the current time and sets the next run
Submit this task to the run task channel.
Run the task.
Run asap.
Runs the callable and runs the given number of iterations.
Runs the given callable only once.
Locate the url_file in security_dir.
Bind a kernel to the engine.
Create an interrupt event.
Run the main loop.
Filter namespaces based on name and type pattern.
List namespaces matching the given filter.
Raise valueerror if any of the mutex ops are not in the dict.
Draws the figure if it is interactive.
Flush all figure managers to the canvas.
Send a figure to the inline backend
Loads the specified ipython extension.
Unloads the specified IPython extension.
Generate random ports.
Initialize the web application.
Handle a sigint signal.
Confirm exit.
Remove all kernels from the kernel manager.
Generate a set of price options.
Replace multiple occurrences of text in dict with text.
Renders the shell with the specified name.
Create a zipfile from a list of files.
Remove prerequisites that start with str_.
Return True if obj is a mappable object.
Get the partition of a sequence.
Run a file and return the output.
Run a source command.
Fetch a file from the internet. If the file already exists it will be overwritten.
Reduce freqlist by num_ frequency.
Compute the number of digits in a text file.
Returns a generator that yields digits from a text file.
Returns a list of frequencies for each digit in digits.
Computes two - digit frequencies from a list of digits.
Return the number of digits in a list of digits.
Plot two - digit frequencies of two - digit frequencies.
Plot one or more digits frequencies.
Print expr in debug mode.
Reverse a view.
Return True if prefix is private prefix of base.
Runs a debug script on the given src.
Run a Python script in a temporary location.
Write a debug script to the specified module.
Return a dictionary of all the hashfiles in hashroot.
Compress a hashroot to a hashroot.
Return a list of all keys in the directory.
Check if a record is allowed.
Formats an error and adds it to the test.
Embed interactive shells into interactive shells.
Return trans_writer and meta_writer for new csv files.
Given a list of languages and a locale_root create a list of trans_languages.
Writes a list of po entries to the specified po_files.
Write a header to the po file.
Subscribe to a user.
Initialize the parser and options and args
Run a python module.
Run a python file.
Create a Python code object from a Python source file.
Make a Python code object from a pyc file.
Return an HTML table representation of the given item matrix.
Set the current value.
Cancels the completion.
Select the index for the given row and column.
Update the list.
Return a dictionary of frequencies for each word in text.
Print a list of frequencies for each word in freqs.
Return a string representation of the document.
Write the text to a file.
Validate pin against schemas. pin.
Send a shared pin to a set of topics.
Delete a shared pin.
Send a pin to a user.
Delete a pin from a user.
Subscribe to a topic.
List all subscriptions for a user.
Begins a new message with the given total and message.
Context manager for executing a task.
Context manager for submonitoring a subtask.
Update the work and message.
Add a submonitor to the progress monitor.
Mark the unit as done.
Move the build location to the new location.
Load configuration from a list of pyconfig files.
Load configuration from file.
Load a flag from a dictionary.
Decode a list of arguments into a list of strings.
Load configuration from command line arguments.
Convert the parsed data to a config object.
Find a module by name and path.
Called when a stop event is received.
Notifies the start of the process.
Notify stop callbacks.
Interrupt then kill.
Find the command line arguments for this program.
Start the mpilauncher.
Send a file to SCP.
Fetch a file from the remote.
Return the number of engines.
Starts the specified number of engines.
Start a new job.
Return the default context to use.
Parse the job_id from the output.
Write a batch script to the batch file.
Start a new job.
Create a context menu.
Append jpg to the prompt.
Append png to the end of the PNG file.
Append svg to the end of the svg buffer.
Add an image to the document.
Copy an image to the clipboard.
Get the image with the given name.
Insert an image into the cursor.
Insert svg into cursor.
Saves the image with the given name.
Called when the user exits the process.
Initialize environment variables.
Prompts the user for input and writes it to the payload_manager.
Asks the kernel to exit.
Set the next input to the given text.
Read a configuration file.
Get a list of values from a section and option.
Get a list of lines from a section option.
Set timid from environment variable.
Set attributes from keyword arguments.
Load configuration from a config file.
Set an attribute from a config option.
Set the list of delimiters to use.
Split a line into a list of lines.
Returns a list of words that match the given text.
Returns a list of strings that match the attribute of text.
Greedy setter for splitter. delims.
Returns a list of aliases that match the given text.
Returns a list of matches for the given text.
Called when the user completes the text.
Return True if the record matches one of the tests.
Return a list of records that match the given check.
Extract a subdict from a record.
Return True if there is a cell in the input history.
Write the output prompt to the terminal.
Write format data to stdout.
Log the output of the shell shell.
Raise an invalid operation exception if the object is frozen.
Convert a MySQL timestamp string to a datetime object.
Called when the event loop is changed.
Perform one iteration of the shell.
Publish code to the iopub_socket.
Send an abort request to the given stream.
Send a clear request to the server.
Return a string representation of a topic.
Send a shutdown message to the shell.
Hook before context is added to the stack.
Remove modules that are not in sys. modules.
Return the absolute path of the given path or None if it is not a directory.
Return True if name is a file - like object.
Returns True if the given object is a subclass of the given type.
Check if the given path is a package.
Return the logarithm of label.
Return a new class that can be transplanted to a module.
Get the number of CPU times for the current system.
Get the command line for this process.
Returns a list of open files for this process.
Get a list of all the connections for this process.
Check if a user has a group.
Resolve a class from a module path.
Calculate usage percent.
Login to the docs server.
Get the gdocs key from the URL.
Ensure temp path exists if it doesn t exist.
Clear temporary files.
Uploads a file to the gdoc server.
Synchronizes local and gdoc CSVs to local and meta CSVs.
Downloads the trans CSVs and meta CSVs from the GDocs and writes them to the
Uploads the contents of the po file to the local EO docs.
Clears the temporary file and uploads it to the gdoc.
Create a new qtconsole connection
Check if the given url is allowed to access the given number of times.
Check if a URL has the specified contents.
Get the response code from a URL.
Compares the content type of the given url with the specified content type.
Compares the response code of the given url with the given code.
Validates that the source and data types are valid.
Clear stdout and stderr output.
Create a list of code units from a list of morfs.
Return the full rootname of the module.
Return the source file of the source file.
Return True if the file should be converted to Python.
Return the total number of seconds in seconds.
Get the result or raise an exception.
Wait until all messages have completed.
Get a dictionary of engine ids and results.
Abort this message.
Return the elapsed time of the message.
Wait until the queue is ready or timeout is reached.
Publish a displaypub to an IPython notebook.
Wait for all the output files to be written.
Wait until all outstanding messages have completed or timeout expires.
Return the absolute path of the given file.
Prepare a list of patterns to be used as a list of patterns.
Return the separator for a string.
Find all python files in a directory.
Return filename relative to self. relative_dir.
Return the canonical filename for the given filename.
Get the zip data from a file.
Return True ifffpath is a valid file path.
Return True ifffpath matches any pattern in patterns.
Map a path to a canonical filename.
Loops the QT4 window for the kernel.
Loops over a gtkembed kernel.
Enables the specified gui.
Return the goe ratio of n.
Calculate the center difference between the eigenvalues of a matrix and the center of the eigenvalue of
Compute the ensemble diffs of the ensemble.
Initialize the step.
Load configuration file.
Write the file to disk.
Erase the contents of the file.
Line data as a dictionary.
Returns a dictionary of all arcs sorted by name.
Write the data to a pickle file.
Read a file and store the lines and arcs.
Load raw data from a pickle file.
Read a file and return a dictionary of lines and arcs.
Combine the parallel data files into a single dictionary of lines and arcs
Add line data to self. lines.
Add arc data to the arcs dictionary.
Add the executed lines and arcs to the hasher.
Return a summary of the report.
Return a generator of lines from a given string.
Main loop for the keyboard.
Replace rlhist_multiline with a multiline history.
Prompt the user for a line of text.
Edit syntax error.
Exit the program if confirm_exit is True.
Get the url and revision from the URL.
Create a new frontend widget.
Initialize the colors for the widget.
Return a tuple of identity url pub_url pub_url location
Convert a numpy. recarray to a numpy. recarray
Set active colors for the active scheme.
Toggle the active color scheme.
Return the text representation of the traceback.
Returns a list of formatted tracebacks for the specified exception type and value.
Format a list of extracted lines into a string.
Show the exception only for the specified type and value.
Set the mode of the join.
Ensure a module is imported from a list.
Add a line to the code.
Add a new section to the code.
Get a function from the code.
Return the code for the given expression.
Renders the template using the given context.
Apply dots to a value.
Render a template.
Return default formatters.
Add a function to the type printer for the given type.
Called when a float precision has changed.
Return a list of user config files.
Configure logging.
Configure the environment from a list of paths.
Truncate screen_lines from start to screen_lines.
Page a file.
Get pager command.
Get the start string for a pager.
Prints a string to the screen if print_full is True.
Print a basic unicode string.
Pretty print a latex object to PNG.
Pretty print a latex object to PNG.
Return True if o can print latex.
Pretty print a latex object.
Add options to the configuration.
Validate that lst is a list of strings.
Validate that all keys and values in a dictionary are strings.
Run the ioloop loop.
Handle incoming messages from the server.
Completes the specified text line and cursor position.
Get information about an object.
Shutdown the server.
Flush all pending messages.
Send an input message.
Start the channels.
Stop all channels.
Returns True if all channels are running.
Loads the connection file from the connection file.
Start a new kernel.
Shut down the kernel.
Kill the kernel if it exists.
Interrupt the kernel.
Send a signal to the kernel.
Return True if the thread is still alive.
Returns the shell channel for this host.
The sub - channel of this channel.
The HB channel associated with this connection.
Bind a kernel to the zmq engine.
Log a debug message if level is greater than level.
Get the list of extension classes.
Pre - step function.
Yield base dirs and files from an egg directory.
Scan egg_dir for stubs in stubs.
Launch a new instance of ipcontroller.
Save a connection dictionary to a file.
Load configuration from json file.
Load the secondary configuration from JSON.
Enable autopx mode.
Disable autopx.
Runs the specified cell in px.
Run a heartbeat for a message.
Run a task.
Remove a task from the database.
Patch obj with name if method is missing.
Accept a connection to the server.
Reject a pending connection.
Return a proxyagent with the given reactor and contextfactory
Check if the form is valid and save the object.
Handles DELETE requests.
Overrides Django s pre_save method to set the user field to the current request user.
Reload all modules from the cache.
Get the editor for the specified file.
Get clipboard content.
Add a function to the chain.
Get the metadata for a given path or module.
Configures the configuration with the given options.
Import an item from a package or object.
Try passwordless ssh.
Try to open a passwordless ssh server.
Try to connect to a passwordless ssh server.
Open a tunnel connection to a socket.
Open a tunnel and return the port and the tunnel.
Stops the scheduled tasks.
Unwraps an exception.
Register a new engine.
Remove an engine from the queue.
Handle a execute reply message.
Flush all pending notifications to the socket.
Flush the results to the socket.
Flush control messages from the socket.
Flush any pending control messages that have been ignored.
Flush the iopub message for the given socket.
Spin every interval seconds.
Stop the spin thread.
Spin the server.
Send a apply request to the specified socket.
Get hub history.
Send a query and return a list of records.
Return a set of opcodes for the given names.
Return a byteparser object for parsing the text.
Returns a set of lines that match the given regexes.
Return the first line of the multiline.
Given a list of lines and ignores any lines that are not in ignores return a set
Parse the source file and return a tuple of lines and excluded lines.
Returns a sorted list of all arcs in the byte stream.
Return a list of child parsers.
Iterates over the lines of the code in bytes.
Find all the statements in the child parsers.
Return a string representation of the given block stack.
Validate that all chunks have exits.
Yields the arcs of the file.
Returns a list of all the child parsers in this parser.
Returns a set of all arcs in this parser.
Start the cover instance.
Report the coverage of the modules in the specified stream.
Check if a file should be included in the coverpackages list.
Interpret a distribution name and interpret it as a generator of distributions.
Open a URL with authentication.
Get the parent of an object.
Return the root topic of the current node.
Renders the given content using the given context.
Configure the plugin.
Formats an error and adds it to the buffer.
Split data by num.
Convert nbformat to this notebook format.
Convert hex color to RGB.
Get a dictionary of colors for a given style name.
Get the font for a given font family.
Handle reply messages.
Handle a history reply.
Handle a pyout message.
Handle display data messages.
Initializes the channel history.
Execute a file on the server.
Process an error message and append it to the traceback.
Process the execute payload.
Set the default styles for the sheet.
Edit a file.
Makes an in prompt string for the given number.
Make a continuation prompt.
Triggered when the style sheet changes.
Changes the syntax style of the highlighter.
Transforms the data dictionary into a string.
Virtual memory usage.
Get the number of CPU times for the system.
Get the UIDs of the processes associated with this process.
Get the process gids associated with this process.
Returns a list of threads in this process.
Returns a list of open files for this process.
Get the commit hash of a package.
Return information about a package.
Return the number of CPUs on Mac.
Returns the number of CPUs available on the system.
Get the next set of messages.
Fetch one row from the database.
Fetch multiple rows from the database.
Fetch all rows from the database.
Connect to a node in the tree.
Parses a string and converts it to a notebook object.
Parse a Python string and convert it to a notebook object.
Reads a string from a file - like object.
Writes a notebook to the specified format.
Write nb to fp.
Convert a notebook to a metadata file.
Load a value from a dictionary.
Returns True if the given name matches the filter.
Return True if cls is a subclass of cls.
Return whether or not the specified directory should be included or not.
Return True if the specified file matches any of the ignorefiles.
Returns True if the given function should be called or False otherwise.
Returns True if the specified method matches the registered plugins or False otherwise.
Returns True if the specified module matches any of the registered plugins. Otherwise returns False.
Read lines from a file.
List the lines of a command in pydb.
Print a list of lines.
Implement pdef subcommand.
Returns the conversion factor between two currencies.
Convert currency from one currency to another.
Compute the exchange rate for the given start date and end date.
Get the encoding of a stream.
Get the default encoding for stdin or sys. getdefaultencoding.
Write the connection file to the profile directory.
Initiate a heartbeat.
Initialize the session.
Initialize the iopub socket.
Initialize the kernel.
Convert html content to text.
Convert Markdown content to text.
Convert a domain to a fully - qualified domain name.
Add noseexclude options to parser.
Configure noseexclude.
Determine if the given directory should be included in the exclude_dirs list.
Return True if any of the libraries in the given extension are links to dynamic packages.
Call each of the functions in funcs and return the result.
Call each of the given functions reversed.
Append a function to the end of the list.
Insert a function at the specified position.
Format a usage message.
Write pid file to profile_dir. pid_dir.
Remove the pid file from the profile.
Get the pid from a pid file.
Construct a parser from a magic function.
Return the real name of a magic function.
Highlights the given string using the highlighting mechanism.
Rehighlight the given block.
Set the format for this highlighter.
Copy the current page control to the clipboard.
Execute a shell command.
Hook for when the prompt is finished.
Tab pressed.
Create a context menu.
Handle key press events for the console.
Insert a continuation prompt into cursor.
Handle a complete reply from the server.
Handle reply messages.
Handle kernel died events.
Handle object info reply.
Handle a pyout message.
Handle stream messages.
Handle a shutdown reply message.
Execute a file.
Interrupts the kernel.
Resets the prompt to its initial state.
Restart kernel.
Call the calltip request.
Complete the completion request.
Process the execution error and emit the exit_requested signal.
Process the execute OK message.
Moves the cursor to the new position and calls thetip function.
Add a plugin to the list of plugins.
Chain all plugins in the chain.
Generate a generator for the given arguments.
Run all plugins and return the result.
Configure the plugin.
Load plugins from installed entry points.
Load plugins from nose plugins.
Convert a latex string to PNG.
Convert latex string to PNG.
Checks if the requirement exists and if not raises an exception.
Convert this object to a dictionary.
The name of the process.
Returns the overall percent of CPU time for the specified interval.
Returns the percent of memory allocated to this platform.
Returns a list of memory maps.
Returns True if the process is running.
Suspends the running process.
Resumes the running process.
Kill the running process.
Wait for a number of seconds to complete.
Wires the kernel to the gtk_main and gtk_quit.
Returns True if the given identifier is shadowed by the given IP.
Register a transformer.
Unregister a transformer.
Register a checker.
Unregister a checker.
Register a handler for the given name.
Unregister a handler from the registry.
Apply prefilter to line_info.
Find handler by line_info.
Apply transformers to a line.
Apply prefilter to a line.
Apply prefilter to a list of lines
Check if the user is in the user namespace.
Check if the line_info. esc matches the esc magic.
Check if the line_info is a prefilter handler.
Check if the line_info. ifun is shadowed.
Handle the line_info.
Process the line_info.
Handle the line_info.
Process the line_info and return the command.
Process the line_info.
Handles line_info.
Overrides QtBase. eventfilter to handle text edit and key press events.
Overrides enterevent to stop the hide timer.
Override paintevent to paint the paneltip label.
Show information about a call.
Moves the cursor to the current position and hides the widget.
Canonicalize a path.
Masked dictionary.
Determine if the virtualenv is no global.
Return a dictionary of word frequencies for each word in fnames.
Return a list of default aliases for the operating system.
Define an alias with the given command.
Define an alias for a command.
Validate that the given alias is valid.
Call an alias with the given rest.
Transform an alias into a command string.
Expand aliases.
Return a directive that autohelps the directive.
Reset the intensity and foreground color to none.
Get a color from the color map.
Get the format of the text.
Generate a JWT based on the secret and age.
Remove expired JWTs.
If the token is already used add it to the list of jwts.
Validate a valid JWT.
Return the common prefix for the given list of items.
Return the size hint for the font.
Returns True if the cursor can be cut.
Returns True if the user can paste the clipboard.
Clear the input buffer.
Cut the text cursor.
Get the input buffer for the prompt.
Sets the input buffer to the specified string.
Sets the font for the tab.
Prints the current control to the console.
Prompts the user to move to the top of the screen.
Resets the font to its default size.
Append a new input to the end of the text cursor.
Append html to the editor.
Appends the given HTML as fetching plain text to the document.
Append plain text to the prompt.
Clear temporary buffer.
Completes the completion with the specified items.
Fill temporary buffer with text.
Determine whether the control key is down or not.
Create a Qtgui control object.
Create the page control for this widget.
Handle page key press events.
Return the plain text of the given block.
Get the cursor to the end of the text.
Get the cursor column number of the input buffer.
Get the cursor line from the input buffer.
Get the cursor for the prompt.
Returns the cursor for the selected text.
Insert a continuation prompt.
Insert html into cursor.
Inserts the given HTML to the given cursor and inserts it as plain text.
Insert plain text into cursor.
Keep the cursor in the buffer.
Quit the keyboard.
Insert or append text to the page.
Starts the prompt.
Read a line of text from the input buffer.
Sets the continuation prompt.
Sets the cursor on the top of the scroll bar.
Adjust scrollbars based on the current control.
Entry point for the command line tool.
Copy a config file to the current location.
Create a profile directory by name.
Find a profile directory by name.
Read a file and return the contents of the file.
Create a temporary file and a temporary file.
Close the file.
Write data to the file.
Add a new heart handler.
Add a handler to be called when a heart failure occurs.
Handle pong messages.
Returns a list of batches of the specified size.
Convert a pathfile to a filename and a filename.
Display all the elapsed time and number of prints.
Return a tuple of elapsed avg est end and elapsed time units.
Extract the wininst configuration from a file.
Uncache a zipdir.
Quote a list of strings for use in nt_quote.
Check if there are any conflicts in the given distribution.
Set fetcher options.
Create the home directory for the current user.
Check if a file is an archive file.
Create a new heading cell.
Create a new notebook metadata node.
Create a new notebook author.
Return True if path is a writable directory.
Unquote a filename.
Get the filename of a Python file.
Get the path to the XDG directory.
Get the path to the ipython home directory.
Return the directory of the ipython package directory.
Returns the path to the specified module in the ipython package.
Returns the number of times a target is outdated.
Return the md5 hash of the file at path.
Check for old configs in ipython_dir.
Updates the suggestions dictionary for the given object.
Returns a list of suggestions for the given object with the specified size.
Get suggestions for the given object.
Return the relative path of the current working directory.
Return a list of instances matching the pattern.
Read the MD5 of the file.
Starts the profiling process.
Report the current profiling state to the given stream.
Finalize the job.
Disable the WX event loop.
Disable Qt4 input hook.
Enable the GTK application.
Enable or disable a tk.
Enable the pyglet integration.
Add wave saver to global history.
Initialize the database.
Executes a SQL query and returns the results as a tuple.
Get session information.
Get the last n rows from the table.
Get a range by string.
Get the name of the file name of the histogram file.
Name the session with the given name.
Reset the state of the output history.
Returns a generator that yields num_ lines from the input histogram.
Store the output for the given line number.
Write out the input and output caches.
Stops the thread and joins it.
Get the number of CPUs available on the system.
Returns a list of system per cpu times.
Return a list of disk partitions.
Return a list of pids in the current directory.
Return a nice string representation of a pair.
Format a list of statements and a list of lines.
Return a string representation of the stack of inspect.
Join a list of regexes into a string.
Remove a file from the filesystem and remove it from the filesystem.
Updates the MD5 hash of the given object.
Update the list of profiles in the current directory.
Stop the cluster for the specified profile.
Find the path to a command in the environment.
Return the system body of the process.
Find the code units for the given morfs.
Runs a report_fn on each of the code units in the specified morfs.
Set the current trace of the PDB file.
Initialize the list of available extensions
Initialize the shell code.
Runs the executable lines.
Run startup files in the profile directory.
Run all the executable files.
Run the code_to_run command.
Run the module in the shell.
Return the filename of a static data file.
Read data from a file.
Escapes the string representation of the given string.
Report the coverage of the HTML file.
Copy static reports to the local static report directory.
Write html to file.
Return the hash of the source file and cu.
Index a file.
Reads the status file from the specified directory.
Write the coverage to a directory.
Sorts two lists and returns True if they have the same elements.
Get a slice of a sequence.
Truncates a sequence to the specified size.
Reads the manifest file and returns a list of ignore and ignore patterns.
Convert glob pattern to regular expression.
Return True if filename matches patterns.
Return a list of all versioned files.
Start a new kernel.
Shut down a kernel.
Kill a kernel.
Get a kernel by id.
Get the ports for a kernel.
Returns the notebook ID for the specified kernel.
Start kernel for notebook.
Shuts down a kernel.
Interrupt a kernel.
Restarts a kernel.
Create the iopub stream for the specified kernel.
Create a shell stream for the specified kernel.
Create a HB stream for the specified kernel.
Resets the object to its original state.
Exports the given html to a file.
Replace empty_p_re with empty_p_re with html.
Get a unique object or none if it doesn t exist.
Returns a query that includes any of the terms in tokenized_terms and search_fields
Given a query string and a list of search fields return a boolean indicating whether or not the query
Returns a query that returns none if the given number of days is greater than the given date field
Returns a query that returns none for the given number of days.
Get the null or blank query for the given field.
Populate fields_dict with case insensitive fields.
Add command - line options to parser.
Validate attributes of this object against the given method.
Check if the given method should be called.
Rotate the cursor.
Return the websocket URL for the current request.
Reserialize a reply from the server.
Inject a cookie message into the request.
Start the HB stream if it is still running.
Stop the HB stream.
Load the file.
Get the index of the block.
Seek to the specified position in the file.
Edit the block at the specified index.
Show the current block.
Print all colored blocks.
Run a function on a sequence and return the results as a series.
Find the source code of a traceback.
Find inspectable lines in a list of lines.
Countdown a countdown.
Clean up engines and kill the controller.
Save a function s IDs to the client history.
Synchronize the results of a function with the client.
Run f after self. spin.
Returns a list of all the messages in the message queue.
Get a message from the queue.
Parse a URL and return a dictionary of configuration values.
Return a list of all root modules.
Returns a list of module completions for a module.
Return a list of directories and tilde_val for each line in the event. line
Quote an attribute.
Configure the plugin.
Writes the stats to the given stream.
Add an error to the error list.
Add a failure test to the error list.
Add a success test to the error list.
Generate a twobin random number from a list of loads
Return a random integer that is weighted by the number of loads.
Register an engine.
Remove an engine from the queue.
Handle all stranded tasks.
Fail if all depending messages have timed out.
Send a fail unreachable message.
Save unmet jobs to the graph.
Submit a task to the bus.
Dispatches the result received from the mon_stream.
Handle a result message.
Handle an unmet dependency.
Update the dependency graph for the given dep_id. If dep_id is none run all
Print the current state of the log file.
Log the input to the console.
Write data to the log file.
Stop logging.
Create a new notebook node with the given name and cells.
Add a string to the chain.
Add a regular expression to the chain.
Dispatch a key to all the regexs that match the key.
Return a generator of matches for the given key.
Check if a directory exists and if not create it.
List all notebooks in the notebook directory.
Create a new notebook id.
Delete a notebook from the database.
Checks if a notebook exists.
Find a notebook path by notebook id.
Returns the path to the notebook with the given name.
Returns the last modified name and metadata of a notebook.
Get a notebook object for the notebook_id.
Save a new notebook.
Save a notebook.
Save a notebook object.
Delete a notebook.
Create a new notebook.
Copy a notebook to the current notebook.
Generate phys tokens from a list of toks.
Load the default configuration file.
Return the default classes for this application.
Parses the command line and adds it to the command line.
Initialize the application.
Initialize the interactive shell.
Initialize the banner.
Return a string representation of the type of the object.
Parses the given name into a list of strings.
Return a dictionary of traits for the given class.
Get the metadata for a trait.
Validate that value is a subclass of self. klass.
Return the default value for this field.
Check if the job is complete or not.
Returns True if the task is unreachable.
Return the dependencies as a dictionary.
Get the depth of a node in a tree.
Print a binary tree.
Disambiguate a URL with a given location.
Reduce the elements of this RDD by applying a function to each element of the RDD
Validates that the targets are valid.
Dispatch monitor traffic messages.
Dispatch a query message.
Handle a new heart.
Handle a heart failure.
Save a message to the database.
Unserializes the given message and saves it to the database.
Send a connection request to the server.
Unregister an engine from the queue.
Finish a registered registration.
Shut down a client.
Purge results from the database.
Extract the content and buffers from a record.
Sends a get_history command to the client.
Send a query to the database.
Temporarily change the current working directory.
Decode the output of a completed command into a parsedcompletedcommand.
Run a command under the root of the directory.
Dispatch a message to the appropriate handler.
Check if a message is from a session.
Report the annotations of the MORFS.
Get the installed version of a package.
Recursively squash unicode objects into unicode objects.
Extract the header from a message or header dict.
Check for packed bytes and unpackers.
Create a message of the specified type.
Sign a list of messages.
Sign a list of messages and send them to the stream.
Receive a message from socket.
Save SVG string to SVG file.
Convert an svg string to a clipboard.
Convert an SVG string to an image.
Return information about an object.
Get the docstring of an object.
Get the source code of an object.
Get the argument specification of a function or method.
Find the absolute filename of an object.
Find the line number of the source code of the given object.
Return the string representation of a function or None.
Return the header h as a string.
Print a noinfo message.
Pretty print a function or class.
Print the source of an object.
Print the contents of a file.
Format a list of fields into a string.
Search for namespaces matching pattern in ns_table.
Start a threaded reactor.
Return a string representation of the document.
Return the XML representation of the document.
Load all modules in a set of packages.
Inverts a dictionary to its original form.
Convert an object to primitive.
Get a list of matplotlib figure objects.
Print a figure to the canvas.
Select the figure format to use.
Find the gui and backend for the given gui.
Activate a matplotlib backend.
Configure inline support for a backend.
Starts the thread.
Stop the thread.
Start a new tracer.
Return the install trace function.
Start the collector thread.
Stop the collector thread.
Pause all active tracers.
Resumes the install process.
Get the line data for the current branch.
Collect exceptions from a list of rdict or list of rdicts.
Renders the traceback for the given excid.
Processes the startup of the coverage module.
Return the canonical directory for a morf.
Given a filename return the source for that filename.
Determine if the given filename should be traced with a reason.
Returns whether the trace should be traced.
Print a warning message to stderr.
Check for source and source files.
Start the collector.
Stop and save the data if auto_data is set.
Return a regex that will be used to exclude exceptions from the config.
Save the data to the data file.
Combines all paths in the configuration with the combined paths.
harvest the data from the source.
Compute the analysis of a morf.
Analyze the given analysis.
Produce a summary report of the MORFS.
Annotate this MORFS with the specified morfs.
Runs the xml report on the specified morfs.
Reloads the data from the server.
Find the path to a command.
Execute a command and return the exit code.
Forward read events from a file descriptor.
Runs the socket.
Find a launcher class by name and kind.
Start the process.
Build a launcher for the specified class.
Start the engine.
Start the process.
Get wx application
Return True if app is in event loop running wx.
Start the event loop wx application.
Get the Qt application object for the current kernel.
Check if qt4 is running in event loop.
Start the Qt4 event loop.
Create a blank canvas with the given width and height.
Draw a cross between the given position and the given color.
Draw a line between two positions.
Create an annotated image from a grayscale image.
Get a uuid string of length and version.
Generate a unique cache key from a GET dictionary.
Get the domain of the given URL.
Get the arguments from a URL.