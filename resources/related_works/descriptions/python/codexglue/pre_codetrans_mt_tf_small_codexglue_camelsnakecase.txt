Convert Sina xml to url list.
Download a dailymotion page.
Download a sina file from a URL.
sprint the text to the specified colors
Print text to stderr and print to stderr.
Prints a message and exits the program.
Prints a message and exits with the specified exit code.
Detect the system operating system.
Get information about a CK player.
Get the real url for a given url.
legitimize a text string.
Download a URL using the platform download library.
Match text with a list of patterns.
Parse a query param from a url.
Parse a host and return a tuple of hostname and port.
Get title by json topic part.
wanmen download by course.
Download a wanmen page by course topic part.
Check if a task has been queued or running.
Get the event buffer for the given dag ids.
Get a connection to the snowflake server.
Get AWS access key id and secret access key
Get the value of a field from the extras dictionary.
Copy expert data from the database to the database.
Perform bulk dump of table to tmp file.
Uploads the file to Google Cloud Storage.
Print the current state of a task
Get a connection object.
Get the details of an instance.
Create an instance in a project.
Delete an instance.
Create a database in a project.
Delete a database from an instance.
Start a proxy process.
Stop the proxy process.
Get the version of the proxy.
Create a connection to the database.
Retrieve a connection from the database.
Delete a connection from the database.
Returns a SQL proxy runner for this instance.
Get the database hook.
Clean up the database hook.
Reserve a free TCP port.
Normalize job id.
Get the error code from an error message.
Delete all dag runs.
Remove all task instances from the database.
Set dags paused state.
Print stats for all tasks in the database.
Heartbeat for the scheduler.
Create a directory if it does not exist.
Convert string to float if possible.
Make aware of a value.
Make a naive datetime from a value.
Create a datetime object from a datetime object.
Get a connection to the druid server.
Returns a requests. Session object for the specified connection.
Run the request and check the response.
Check response and raise airflow exception.
Run the request and check the response.
Context manager to create a new session.
Reset the database.
Return a pretty formatted message for an exception.
Executes the given HQL against the database and returns a list of records.
Get a pandas dataframe from the database.
Execute a hql against the database and return the result.
Insert rows into table.
Get a connection to the cosmos server
Check if a collection exists.
Create a collection in the specified database.
Check if a database exists.
Create database if it doesn t exist.
Delete a database.
Delete a collection.
Insert documents into the database.
Delete a document.
Get a document by document id.
Executes a get query and returns a list of documents.
Get a function by name.
Create a new function in the specified location.
Update a function.
Upload a function to a zip archive.
Delete a function.
Return a list of all the statuses of a dependency.
Check if a dependency is met.
Return a list of failure reasons for a given transaction.
Parse a s3 config file and return an access key and secret key.
Get credentials for a given region.
Get a connection object.
Flush the buffer.
Correct a zipped file if it is a zipped archive.
Construct a task instance for this task.
Start the process.
Terminate the dag.
Exit gracefully.
Start the process.
Start the loop.
Start the synchronization process.
Refresh the dag directory.
Prints the current stat if it is too long.
Clear all nonexistent import errors.
Log file processing stats.
Set new file paths.
Wait until all processors have finished processing.
Terminate all processes and wait for them to finish.
Get a connection to the remote host.
Create a transfer job.
Get a transfer job.
Get a list of jobs that match the filter.
Update a transfer job.
Cancel a transfer operation.
Pause a transfer operation.
Resume a transfer operation.
Wait for a gcp transfer job to complete.
Find all tasks that match the given task instance.
Return the number of open slots for this task instance.
Run a command and return the output.
Allocate ids for this project.
Begin a transaction for this project.
Commit a commit to this project.
Lookup a set of keys.
Rollback a transaction to this project.
Execute a query against the database.
Get an operation by name.
Delete an operation.
Poll an operation until done.
Get the hostname of the socket.
Get a connection to the database.
Returns a list of template fields for the given fullname.
Render a template field.
Frees the current orm session and engine.
Prepares the classpath for use with the airflow library.
Check the status of the target task.
Detect conf var.
Convert an alchemy object to a dictionary.
Split a list of items into chunks of size size.
Reduce an iterable by applying a function to each element of the iterable.
Chain a list of tasks together.
Render a log file.
Return a connection to the API.
Wait for an operation to be completed.
Coerces content into a deep string.
Handle databricks operator execution.
Run the airflow cli.
Fetch the current state of a celery task.
Returns the number of tasks per send process.
Get the number of tasks per fetch process.
Get a connection to the API.
Get a job from ML Engine.
Wait for a job to be done.
Create a new version for a model.
Set the default version of a model.
List versions of a model.
Delete a version of a model.
Create a model in a project.
Get a model by name.
Write batch data to DynamoDB.
Integrate airflow plugins.
Get the default executor.
Get an executor by name.
Called when an error occurs in a segment.
Get a connection to the database.
Trigger a dag.
Delete a dag
Get information about a task.
Get all pools.
Create a pool.
Create or update a container group.
Get the current state exit code and detail status of the current state.
Get a list of messages for a given resource group and name
Get logs for a container.
Delete a container group.
Check if a container with the given name exists in the given group.
Builds the ingest query for the given static path and columns
poke a message from the pubsub
Get all task instances in this dag.
Get task instance by task id.
Get the previous dagrun.
Get the previous scheduled dagrun.
Verify integrity of a task instance.
Make jenkins request with headers.
Return a dictionary of airflow vars from the given context.
Conditionally trigger a dag run.
Query the metric for the given query.
Get a dag by id.
Kill a set of zombies.
Bag a dag and all its sub dags
Collect all dags in the specified folder.
Return a report of the dagbag stats.
Add a number of days to a dataset.
Remove files from HDFS.
poke a file from HDFS
Remove all task instances from tis.
Return the current try number.
Get the current state of the current task.
Commits the error and commits the transaction.
Refresh the state of this task from the database.
Delete all data associated with this task.
Return a key for the dag task execution date execution date and try number.
Returns True if the task is dependents done.
Return the next retry datetime.
Returns True if the state is up and ready for retry.
Check if the pool is full.
Get the dagrun associated with this execution date
Push a key - value pair to this task.
Initialize the run context.
Write log to local and remote locations.
Get the connection to the API.
Start an instance in a zone.
Get an instance template.
Wait for an operation to complete.
Check if a bucket exists.
Create a new S3 bucket.
Check if a prefix exists in the bucket.
List prefixes in a bucket.
List all keys in a bucket.
Check if a key exists in a bucket.
Get a key from S3.
Reads the value of a key in the specified bucket.
Check if the given key matches the given wildcard key.
Get a key from S3 matching the given wildcard key.
Executes the cassandra query and returns the cursor.
Convert a user type to a dictionary.
Return a speech client.
Execute the SQL hook.
Load airflow plugins from an entrypoint.
Check if a plugin object is a valid airflow plugin.
Skip all tasks in the given dag.
Get a connection to the database.
Check if a file exists.
Lists the contents of a file or directory.
Execute the query.
Uncompress a compressed file.
Execute mssql and return cursor.
Build metrics for an event.
Create a cgroup for the given path.
Delete a cgroup from the tree.
Make an API call to the databricks API.
Get a Salesforce connection.
Make a query and return the results.
Describe an object.
Get a list of all available fields for an object.
Get object from salesforce
Convert a column to a timestamp.
Get a specific mongo collection.
Checks if the specified mail attachment exists in the specified folder.
Get attachments by name.
Get the filename and payload of the part.
Put records to Firehose.
Get the statuses of a dep.
Send an email to the given subject and html content.
Send an email using SMTP.
Processes the result value.
Check if a blob exists in a container.
Check if there are any blobs with the given prefix.
Load a string into a blob.
Read a file from a container.
Delete a file from a container.
Get a connection to the ftp server
List all files in a directory.
Store a file on the remote server.
Get mod time from mdtm
Execute a discord webhook.
Get a connection object.
Check if a directory exists for a given share.
Check if a file exists in the specified share.
List directories and files for a given share.
Create a directory in the specified share.
Load a file from a file path.
Load a string into a file.
Get client connection.
Download a blob from a bucket.
Upload an object to a bucket.
Check if an object exists in a bucket.
Check if a blob is updated after a given time.
Delete an object from a bucket.
Get the size of a blob in a bucket.
Get the CRC32c of a blob.
Get the MD5 hash of a blob.
Check if the secondary training status of a job has changed.
Return the secondary training status message for the given job description and prev description.
Upload a file to S3.
Configure s3 resources.
Check if a s3 URL is valid.
Get log connection.
Execute the dataflow hook.
Run migrations on offline mode.
Run migrations online.
Delete an instance.
Delete a table from the database.
Update a cluster.
Prepare the command line for beeline.
Prepare a hiveconf from a dictionary.
Check if a table exists.
Get a connection to the hive server.
Executes a get query and returns the results as a dictionary.
Get a list of records from a HQL.
Returns a pandas dataframe of the results of a given HQL.
Get a connection to the server.
Get an endpoint from the server.
Binds the given operation to the given parameters.
Escapes a string and returns it.
cast a string field to a bq type
Validate that value is of expected type.
Returns a bigquery connection to the database.
Get the service for this service.
Check if a table exists.
Cancel the query.
Delete a table from the database.
Insert or update a table in a dataset.
Get a specific dataset.
Executes the specified operation on the specified job.
Executes the specified operation multiple times.
Get the next page from the buffer.
Query the postgres database.
Make intermediate dirs for a remote directory.
Run a command and return a subprocess object.
Called when the command is finished.
Entry point for the command line interface.
Builds the htmlheader and adds it to the globals.
Builds the jschart string
Create a new x axis
Create a new y axis.
Get a connection to the database.
Get the last execution date of a dag.
Execute the SQS hook.
Return a JSON response.
Open a file if it s a zipped archive.
Generate a cache key for the given request.
Get a connection to the video intelligence service.
Get the api key from the server
Get a connection and return a requests session.
Executes the API and returns the result.
Build the opsgenie payload.
Execute the hook.
Get the connection object for this client.
Run a query and return its execution id.
Check the status of a query execution.
Poll the status of a query.
Return a pysftp connection object.
Handle a rate limit exception.
Get a table by database name and table name
Get the location of a table in a database.
Get the status of a cluster.
Delete a cluster.
Get a list of all snapshots for a cluster.
Restore a cluster from a snapshot.
Create a cluster snapshot.
Execute the Slack hook.
Create a new job flow.
Filter out files that have the specified size.
Filter out ignored extensions.
Executes the s3 command and returns True if successful False otherwise.
Get pool by pool name.
Create a pool.
Delete a pool from the database.
Convert a Python dictionary to a JSON string.
Wait for an operation to complete.
Get a specific operation.
Append a label to a cluster proto
Get the webhook endpoint for the given connection.
Build a discord payload.
Execute the webhook.
Encrypt plaintext using the specified key.
Get a connection to the speech service.
Close the upload and write the log to S3.
Return a dictionary of environment variables and their values.
Return a list of worker secrets.
Get security context.
Get extra links to a task.
Start the process.
Check if the process has finished running or not.
Exit the processor gracefully.
Update all errors in a dagbag.
Processes all instances in a dag.
Get the concurrency maps for the given states.
Change the state of one or more executable tasks.
Enqueue task instances with queued state.
Change state for tasks failed to execute.
Process executor events.
Update the counters for all running counters.
Manage the running state of the executor.
Get a dagrun for the given run date.
Returns a dict of all tasks to run in the given dag.
Set all dag runs to failed.
Called when a heartbeat is received.
Returns a client object for the specified project.
Get instance by instance id.
Delete an instance.
Delete a database from an instance.
Attempts to poke the attachment.
Prepare additional properties to be passed to the web detection.
Get a connection to the Cassandra cluster.
Returns True if the given table exists in the cluster.
Check if a record exists in the specified table.
Build a track driver status command.
Submit application to kubernetes.
Process a spark submit log file.
Process a spark status line.
Get a task runner for the given local task job.
Wait for a task to finish.
Return a cursor for the mysql database.
Configure a CSV file with the given schema.
Write a local schema file to a local file.
Get the column type as a dictionary
Map a MySQL type to a string.
Return extra data as dict.
Scale time seconds to the given unit.
Returns the number of days since the last n days.
Initialize a role.
Delete a role by name
Returns a list of all roles for the specified user.
Returns a set of all permissions for this user.
Check if the user has a role with the given name or list of roles.
Returns True if the user has permission with name name and view menu name.
Remove all permissions from the database.
Merge permission and view menus.
Update admin permission view.
Create perm vm for all dag vms
Get fernet from configuration. conf.
Remove the partition from the database.
Remove messages from the queue.
Get a connection from HDFS.
Get a connection from the HDFS server.
Check if the given hdfs path exists.
Get a connection to pinot broker.
Get the URI for this connection.
Convert a date to a dict.
Convert a time object to a dictionary.
Get a redis connection.
Executes SQL and returns a pandas DataFrame.
Executes the given SQL statement.
Set the autocommit flag on the connection.
Serialize a cell to a string.
Check the health of a job.
Get a cloudant connection.
Execute the Slack webhook hook.
Get credentials for the service account.
Authorize to use the Google API.
Return a list of all unfinished tasks.
Prepare the command to execute.
Normalize a tensor by the mean and standard deviation.
Crop an image.
Flip the left hand side of an image.
Apply a perspective transformation to an image.
Flip the top bottom of an image.
Adjust the brightness of an image to the specified brightness factor.
Adjust the contrast factor of an image.
Adjust the saturation of an image.
Convert an image to grayscale.
Save a tensor as an image file.
Find all classes in a directory.
Reads an info file and returns a torch. long tensor.
Read matches file and return a torch. long tensor.
Computes the accuracy of the given target.
Download a URL to the specified root.
Return a list of all directories under root.
List all files in a directory.
Download a file from Google drive.
Get random parameters for a given image.
Generate startpoints and endpoints for a given distortion scale.
Get random parameters for a given image.
Get a list of transforms for a given brightness contrast and hue.
Get a random angle translations scale shear.
Downloads the archive to the local filesystem.
Download all the files in the folder.
Get current theme name.
Get a list of themes from a template directory.
Convert a JSON response to a list of strings.
Multivariate normal distribution.
Computes the joint log - probing of two schools.
Build a random variable.
Return the maximum of x that is not finite.
Calculate the size of an event.
Evaluates the given function on the given distribution.
Convert an identifier to a tensor function.
Reduce the number of components and size of a tensor.
Build the input pipeline.
Check that the given map values are valid.
Call the given function with the given args.
Call fn with args and return ret extra gradients.
Broadcast a structure from one structure to another.
Simulate a leapfrog step.
Perform a Metropolis hastings step.
Create a TFP layer from a configuration dictionary.
Convert x to a tensor.
Expand x to event rank.
Probability density function.
Raise ImportError if required tensorflow version is less than required.
Logistic logistic regression.
Return features and labels for covertype.
Make a positive axis.
Squeeze x along axis.
Derivative of the z - axis.
Inverse of z.
Compute semilocal linear trend transition matrix.
Semilocal linear trend transition noise.
Returns the number of primes less than n
Return the machine eps of a given dtype.
Find the inner bisection of a line.
Prints a tensor to stdout.
Check that a param is quadrature.
Interpolate grid with loc.
Interpolate the given grid with the given scale.
Concatenate multiple vectors.
Logarithm of a vector matrix.
Logarithm of a matrix and a vector.
Matrix of a vector matrix.
Extract log - probs from a distribution.
Choose a random direction.
Call a function if it returns a floating point value.
Build trainable posterior.
Compute the moments of a masked time series tensor.
Return the initial value of a masked time series tensor.
Mix over posterior draws.
Return the range of values in this range.
Resolve distribution names.
Build a model from a sequence of functions.
Entropy of the joint distribution.
Create a summary of a list of sequences.
Visualize the reconstruction.
Visualize qualitative analysis.
Summarize distribution parameters.
Summarize mean in nats and bits.
Apply the diagonal of the diagonal of the diagonal.
Zero state computation.
Calls the convolution function.
Sample the prior prior.
Returns the shape of the batch.
Return the batch shape tensor.
Calculate the square matrix size of a vector.
Return the indices of values sorted along the given axis.
Sort values along specified axis.
Truncates x to the nearest n - gram.
Logarithm of the logarithm of a series.
Inverse of erfinv.
Compute the joint logarithm of text messages.
Checks if the given index points are univariate marginal.
Get index points.
Returns the outer squared difference between x and y.
Evaluates the value and batch jacobian of x.
Split a covariance into marginals.
Return a string representation of a numpy tensor.
Sample shape of the tensor.
Sample shape tensor.
The value of the distribution.
NumPy representation of the tensor.
Uniform unit norm.
Log normalization.
Given a list of tensors return the common dtype of the input tensors.
Broadcast tensors to target tensors.
PDF at peak
Calculate the effective sample size for a single state.
Potential scale reduction for a single state.
Returns the size of x along the specified axis.
Broadcast secondary arg if it is a list like secondary arg.
Remove a field from the vector.
Merge two strings.
Return a deep tuple of x.
Get the inputs of a function.
VGconv block.
Returns True if the state has no u turn.
Leapfrog a value and gradients function.
Logarithm of the logarithm of the current target with the momentum.
Generate a random bernoulli of the given shape and probs.
Convert a nested structure to a tensor.
Get tensor attributes as a dict.
Creates a mixture prior for the given latent size and components.
Pack a list of images into a single image.
Download a file to a directory.
Call volatility fn and grads volatility fn.
Broadcasts the volatility to the state parts.
Reshape the input tensor.
Call fn and reshape the output.
Computes the B - Dtr divergence.
Flat sample distributions for a given sample shape.
Given a list of topics return a list of string representations of each topic.
Add ema control dependencies to the codebook.
Save image data to a file.
Convert a tf. dtype to a numpy dtype.
Return the base dtype of the given dtype.
Return True if dtype is bool.
Returns True if dtype is a complex type.
Returns the maximum value of a given dtype.
Get the name of a dtype.
Returns the size of a given dtype.
Assert that all items have the same base type.
Return a function that accepts a reflected function.
Expand a function with an expansion function.
Shrink a simplex to a best vertex.
Replace x at index with replacement.
Prepare the arguments for the initial simplex problem.
Prepare the arguments for the initial vertex.
Build a random mnist data.
Returns the configuration of the initializers.
Create an initializer from a configuration dictionary.
Matrix multiplication.
Statistical standard deviation helper.
Pick a scalar condition.
Finish log probing for one fiber.
Finish probing for one fiber.
Rotate dims if necessary.
Validate that the given layer is valid.
Slice params into a dictionary.
Apply a single step to a distribution.
Apply slice sequence to dist.
Returns the number of columns of x.
Get static predicate value.
Rank a shape tensor by its shape.
Checks if the given scale is a diagonal scale.
Pads the dimensions of the input tensor with the given mixture distribution and event dimensions.
Assert that x is nonnegative.
Get the static value of x if x is none or dtype is none.
Return true if the given datetime is known as unsigned by the given dtype.
Return true if the given datetime is known signed by the given dtype.
Find the largest integer of a given dtype.
Find the smallest integer in the given dtype.
Returns True if dt is an integer like by dtype.
Generate a new seed based on seed and salt.
Returns the dimension size of x along the specified axis.
Validate rightmost transposed ndims.
Validate a perm.
Given a shape and static perm add a static perm to the shape.
Returns the dimensions of x.
Build a backward pass step.
Kalman transition function.
Propagate mean to linop and dist.
Propagate cov to linop and dist.
Compute the joint mean of the latent means.
The joint covariance matrix of the latent states.
Convert latent means and covs to observations.
Log normalization.
Tensorflow mode.
Rotate the input tensor by the given number of samples.
Sample n samples from the pipeline.
Return a copy of the given function.
Remove keys and values from a dict.
Recursively replace nested dicts.
Get samples from a distribution.
Return True if x is a namedtuple like x.
Choose a new type based on the accepted accepted and rejected fields.
Maybe call fn and grads if needed.
Check that shape is valid.
Return True if any of the input tensors converged and failed.
Update the position and update the fields.
Check convergence.
Broadcast a value to a target tensor.
Return the harmonic number of x.
Get field from kernel results.
Variance scale term.
Create a new value where cond is True.
Checks if val is a finite number.
Return bootstrap results for bootstrapping.
Resnet block.
Deep exponential family.
Initialize the parameters.
Returns the registered kl function for the given type a and b.
Reads an image from a file.
Download all sprites from the data directory.
Create a character from a skin hair and top.
Create a sequence from a character.
Create a random sequence.
Flatten a list of summand kernels into a list of summand kernels
Flatten a multiplicand list of kernels.
Build a fake dataset.
Keep dims in x along axis.
Create a list of non negative axis.
Sort a tensor by top k.
Assert that x has ndims statically.
Batch gather with broadcasting.
Broadcast event and samples.
Inverse hessian control inputs.
Transpose a batch of tensors.
Sum the rightmost ndims of x.
Return the common dtype for a list of tensors.
Get the initial state of the gradients function.
Return the PSD mask of x.
Get the initial arguments for the given objective function.
Find the best value in a population.
Check convergence.
Ensure tensor is a list and bool.
Get the tol tensor.
Build input pipeline for training images.
Plot generated images.
Convert a list of productions to a string.
Call the LSTM module.
Compute the diagonal of the diagonal of the tensor.
Compute hat integral.
Integral of hat integral.
Least - squares version of lu.
diagonal product of a diagonal matrix.
Validate a matrix.
Generate a list of slices.
Generate a mask of the given number of blocks.
Create a new input order based on the input order.
Create masks for the given degrees.
Create a zero dimensional multivariate normal diagonal matrix.
Returns the weights for the given global scale variance and local scales.
Build a chain rule from a model.
Build a seasonal transition matrix.
Build a seasonal transition noise.
Build a constrained seasonal transition noise.
Validate observation data.
Add a new value to the scheduler.
Set the checkpoint to the specified checkpoint path.
Set gradient clip const.
Optimize the model.
Set train summary.
Set the summary of the value
Set traindata to the given training rdd.
Download news20 and return a list of tuples.
Download glove w2v from disk.
Compile the optimizer and call the optimizer.
Evaluate the value at x and y.
Predict the value of x.
Get MNIST record from MNIST.
Preprocess mnist data.
Get the end trigger.
Validate the optimizer against the test data.
Returns the value of the field if it exists.
Calls the specified method on the specified bigdl type and returns the result.
Convert an Rdd object to a Java object.
Convert python object to java object.
Get activation by name.
Get the label of the value.
Read a parquet file.
Write a parquet to a file.
Get the image with the given key.
Get the image of the tensor.
Get the label of the tensor.
Return the predicted values for the given key.
Predict the value of x.
Apply the transformation to the dataset.
Save a keras model definition to a JSON file.
Build a keras model.
Predict class distributed on data rdd.
Get the weights of the tensor.
Set whether or not the evaluation should be performed.
Load a torch layer from a file.
Load a keras definition from a json or hdf5 file.
Create a criterion for the given jcriterion.
Load weights from json file.
Load the imdb file and return train test and train train train train and test data.
Build a keras model.
Get the shape of the input.
Return the shape of the output array.
Get MNIST data from MNIST.
Read data sets and return movielens data.
Get the bigdl classpath.
Check if the current version of Spark is below 2 2.
Exports a checkpoint to a dictionary.
Save tensors to a variable bigdl file.
Expand a tile along the specified axis.
Simple attention.
Tensorflow attention.
Get the log file for the agent.
Log an utterance to the log file.
Summarize gradient updates.
Read data by config.
Interact with an agent.
Convert a list of labels to one - hot labels.
Convert probabilities to onehot string.
Return a tf. session. Session object.
Loads the network from disk.
Get the momentum variable for the optimizer.
Updates the learning rate and momentum variables.
round f1 macro
Process a word and return the answer.
Dropout layer with fixed mask.
Builds the word embeddings.
Build a basic LSTM network.
Train the model on a batch of data.
Predict on a batch of data.
Create a vector representation of the sent list.
Create a tag vector from a list of tags.
Advance sentence BLEU.
Verify that the given URL is a valid sc url.
Extract a list of certificates from a text file.
Verify the signature of the request body.
Verify a certificate against a signature chain.
Returns the JSON representation of the controls.
Returns a list of ms bot frameworks.
Returns a list of telegram controls.
Alexa controls.
Calculate the accuracy of a classification.
Round accuracy of y true and y predicted.
Read a file and return it as a dictionary.
Make a hello bot agent.
Convert x to one hot unit.
Prettify a list of metrics.
Loads the model from disk.
Saves the model to a file.
Returns a train op for the given loss.
Search the trie for a word in the trie.
Start the timer.
Handle a request.
Acts the given utterance.
Generate a response based on the response template.
Handle an intent request.
Process launch request.
Handle unsupported requests.
Print a pretty representation of the object.
Convert an elmo loss to ppl.
Build a chainer model from a configuration dictionary.
Interact with a model.
Predict on a stream.
Read a file and return a list of words.
Return a callable from a module name.
Get a metric by name.
Return decay value for label.
Get the best value for a given loss.
Encodes a list of tokens into a list of tokens.
Read requirements file and return a dict of names and links.
Logarithm loss function.
Show details of a dictionary.
Create an ecommerce agent.
Run ms bot framework server.
Download a file from a source URL to a destination URL.
Uncompress a tarball from a file.
Recursively updates an editable dict recursively.
Set the md5 hash of a URL.
Set a query parameter in a URL.
A lexical analyzer.
Return the JSON representation of the control.
The bot framework for the bot.
Returns the JSON representation of the control.
Returns the ms bot framework for this activity.
Solve a squad v2 f1 problem.
Calculate recall at k examples.
Check if gpu is available.
Parse a config property.
Parses the given config into a dictionary.
Expand a path with expanduser and resolve.
Run the request loop.
Delete a conversation.
Refresh all valid certificates.
Verify a request against the certificate chain.
Handle a request.
Return a class from a module name.
Get a model by name.
Get the glm for a model
Create a GLM from a model and a coefs.
Create an attribute object from a list of keyvals.
Shut down the server.
Check if the server is running.
List all the jobs in the cluster.
Return a list of timezones.
Fill self with properties from other h2ocluster.
Decrease the execution time of a test.
Get a summary of a column in a table.
Delete a frame from the server.
Returns a list of model builders.
Validate the model parameters.
Compute model metrics for a given frame.
Delete a model by key.
Run multiple instances in an EC2 instance.
Terminate one or more instances.
Stop instances in a region.
Start one or more instances in a region.
Reboot one or more instances.
Wait for a list of ips to be available on the specified port.
Get the full name of a function.
Return the signature of func as a string.
Wraps the given text with the given indentation at the given position.
Wait for the job to finish.
Fit the model to x and y.
Returns a dictionary of all the parameters for this parameter set.
Handler for signal handler.
Delete the output directory.
Remove a sandbox from a directory.
Scrape the port from stdout.
Scrape cloudsize from stdout.
Stop the process and wait for it to finish.
Stop all nodes and client nodes.
Get the IP address of the node.
Get the port of the node.
Determine the size of the vector.
Compute the mean absolute error of the predicted h2o of the predicted h2o of the
Compute the squared error of a predicted h2o mean squared error.
Calculate the median absolute error of a predicted h2o.
Variance of the h2o explained variance.
Assert that a variable is of the expected type.
Assert that a value matches a regular expression.
Assert that v satisfies cond.
Check if a variable is of the given type.
Get the name of a type.
Return True if var is a valid type.
Checks if the variable is in the enum.
Get the configuration from the configuration file.
Read configuration from candidate log files
Return a generator of candidate log files.
Store model progress.
Recalculate model parameters.
Estimate the completion time of the progress.
Guess the next poll interval.
Compute progress at time t.
Returns the time at which x is progressed.
Draws the given text to the terminal.
Compute widget sizes.
Get the size of the terminal.
Set the encoding of the barcode.
Fit the transformer to the given frame.
Refresh the cache.
Return the type of the specified column.
Prints the summary of the document.
Prints a summary of the current frame.
Return the frame with the first row and cols of the frame.
Multiplies this matrix by a matrix.
Return a list of the levels of this node.
Returns the number of levels in the hierarchy.
Set the level of the expression.
Set the levels of the expression.
Rename columns in this table.
Set the names of this node.
Set the name of the expression.
Return True if item is contained in self.
Modulo kfold column n.
stratified k - fold column.
Print the structure of the table.
Pop a column from the stack.
Concatenate frames along the specified axis.
Return a expr node that binds the given data.
Bind data to this node.
Group this group by the given number of elements.
Fills the expression with NaNs.
Re - level a string with respect to y.
Insert missing values into this frame.
Return the expression as a factor expression.
Split a string into a single expression.
Remove all rows and columns from the set.
Return the entropy of the expression.
Return the number of valid substrings for the given path.
Return the table of the data.
Return a subexpression of this string with replacement.
Convert the expression to upper case.
Return an expression that omits rows from this expression.
Return the difflag1 expression of this table.
Return a expr node representing whether the expression is a NA expression.
Return a minute expression.
Runs the expression and returns the result as a expr node.
Apply a function to the expression.
Parse a text string and return a code object.
Parse a file and return a Python code object.
Move the cursor to a new position.
Unparse the next token and return the result.
Returns a list of the centers of each cell in the model.
Returns the standard deviation of the centers of the model.
Make an API call.
Check the version of the cluster.
Lazy import.
Parse a setup dictionary and return a new setup object.
Deep copy of data with xid.
Get a model by id.
Get a grid by id.
Get a single frame by ID.
Download a Pojo from the database.
Download a CSV file from H2O
Runs a demo function in interactive mode.
Load a dataset from a relative path
Make a series of predicted and actual metrics.
Put a key in a file.
Check if a frame id is valid.
Return a human readable string of the given size.
Normalize a slice.
Check if a slice is normalized.
Wait for the job to finish.
Generate deep features for all models in the model set.
Print a summary of the model.
Prints the hyperparameters as a table.
Returns a list of hyperparams for the given model id.
Get hyperparams as a dictionary.
Get the archetypes of the given test data.
Screeplots the variances of the model.
Translate a name to a lower - case name.
Dedents text at the specified indentation level.
NAME extract. py
Send a request to the server and close the session.
Session id.
Start logging.
Prepare data payload.
Prepare file payload.
Log start transaction.
Log end transaction.
Write a message to the logging destination.
Print a message to the console if verbose is enabled.
Get the automl dictionary for a project.
Download a Pojo from the leader.
Download the mojo.
Fit the model to the data.
Apply the transform to x.
Inverse transform x.
Extract true characters from a string.
Find node name in each line and remove it from list.
Find a build timeout in each line.
Find a build failure.
find build id
Extract a job build url from a string.
Grab the java message from a file.
Save a test dictionary to a pickle file.
Update the summary file with the current summary text.
Write the content of a file to the specified filehandle.
Write a java message to a text file.
Load java messages to ignore.
Normalize an enum constant.
Find synonyms for a given word.
Poll the job for the specified number of jobs.
Write this object to a pojo file.
Fit the model to the given frame.
Returns the default parameters for all parms.
Get the actual params for this query.
deepfeatures returns a deep feature for the given test data.
Print scoring history.
Show the model information.
Returns the variance of the model as a pandas dataframe
Returns the degrees of freedom of the model.
Return the coefs of the model.
Download a Pojo from the H2O.
Downloads the specified mojo to the specified path.
Save model details to disk.
Check that the actual and predicted targets have the same length.
Returns a list of cross validation models.
Wait for a keyboard keypress to be pressed.
Return a pandas. dataframe with the cell values and columns.
Prints the table.
Find a jar in the jar directory.
Yield paths to jar files.
Writes a dict to a CSV file.
Convert a path to a URI.
Discover all modules in the directory.
Write api docs to a file.
Convert the table to a list of integers
Load messages from a pickled file.
Add a new message to the message dictionary
Save a dictionary of messages to a file.
Print a dictionary of messages to stdout.
Parse command line arguments.
print usage of g script
Find all files in a directory.
Find a magic number in a file.
Main entry point for the tokenizer.
Transforms the given data into a new string.
Summarize failed runs.
Extract the intermittens from a csv file.
Plot the metric.
Check if a string is available.
Trim data back to a month to keep.
Return a dictionary of all endpoint groups.
Update a site.
Return the JSON representation of the data.
Comment a user.
Get credentials from stdin.
Like a user.
Like the specified hashtag but with the specified amount of media.
Check if a user is a bot.
Read a list of strings from a file.
Schedule a message to be enqueued at the given time.
Called when the message settles.
Guess the service info from a path.
Returns the URI for the given request.
Get a connection to the server.
Perform a request and return the response.
Get the authorization server for this request.
Validates that the URI is valid.
Get cli profile.
Open an HTTP request.
Set the timeout for this request.
Set request header.
Get all response headers.
Send a request to the server.
Get the status of the server.
Get the current status of the server.
Return the response body.
Set client certificate.
Send a PUT request to the server.
Add a new header to the request.
Send a request to the server.
Get the response from the httprequest.
Get a readable id from a name and id prefix.
Get serialization name from serialization name.
Get properties of an entry.
Get all children of a node from a path.
Find namespaces from a child node.
Convert XML to namespace.
Convert XML to region object.
Parse availability XML string.
Convert XML string to metrics object.
Update a KB.
Build a package from a given number.
Replace a word alteration.
Get the properties of a storage service.
Get all storage account keys for a given service.
Regenerate keys for a storage account.
Delete a storage account.
Check availability of a storage account.
Get properties of a hosted service.
Delete a hosted service.
Delete a deployment.
Swap a deployment with another deployment.
Update a deployment status.
Upgrade a domain to an upgrade domain.
Reboot a role instance.
Delete role instances from a service.
Check availability of a hosted service.
List certificates for a service.
Get a certificate for a service.
Add a certificate to a service.
Delete a certificate for a service.
Get the management certificate associated with this subscription.
Add a management certificate to the subscription.
Delete a management certificate.
Get affinity group properties.
Create a new affinity group.
Delete an affinity group.
Get a list of all subscriptions.
Delete a reserved IP address.
Associate a reserved IP address with a service.
Disassociate a reserved IP address.
Get a reserved IP address.
Get a role from a service.
Delete a role from a service and deployment.
Start a role in a service.
Start roles for a service and deployment.
Restart a role.
Add a new DNS server to a deployment.
Update a DNS server.
Delete a DNS server.
List the versions of a resource extension.
Unreplicate a vm image.
Share a vm image with another vm image.
Delete a vm image.
List vm images.
Delete an os image.
Get data disk for a given service deployment role and lun.
Delete a data disk.
Update a disk.
Delete a disk.
Build the receiver.
Create a Service instance from a connection string.
List subscriptions for a topic.
Parse an asynchronous response and return an asynchronous operation.
Perform a GET request and return the response.
Perform a PUT request and return the response.
Get the operation status for a request.
Add a management header to the request.
Create a travis build package.
Get all regions.
List all namespaces for this service.
Get a namespace from the service bus.
Create a namespace in the specified region.
Delete a namespace.
Check availability of a namespace.
Get a list of topics.
List all the notifications hubs associated with the specified name.
List relays for the specified name.
Get metrics rollups for a given metric in a queue.
Get metrics rollups for a given topic.
Get metrics rollups for a given hub.
Perform a get metrics rollup relay.
Create a system site environment.
Create a temporary virtualenv with the given packages.
Create a new server.
Set the admin password for a server.
List quotas for a server.
Delete a firewall rule.
List firewall rules for a server.
List service level objectives for a given server.
Delete a database.
Returns a list of databases with the specified name.
Get session state.
Set session state.
Validate the challenge string.
Handler for errors.
Create a queue.
Delete a queue.
Get a queue by name.
Create a new topic.
Get a topic by name.
Create a new rule in the specified topic and subscription.
Get a rule by topic subscription and rule name.
List rules for a topic and subscription.
Create a subscription on a topic.
Get a subscription by topic and subscription name.
List subscriptions for a topic.
Send a message to a specific topic.
Unlock a subscription message.
Send a batch of messages to a queue.
Unlock a queue message.
Receive a message from a queue.
Receive a subscription from a topic.
Create an event hub.
Update an event hub
Get a hub by hub name.
Send an event to the hub.
Update request headers and sign request.
Returns the authorization string for the given request.
Check if a token has expired.
Get the token for the given host and path.
Update the request URI and the query string.
Delete the queue or subscription.
Unlock the queue or subscription.
Renew a lock on the queue or subscription.
Add headers to the request.
Return a batch body as a dict.
General error handler.
Handle redirects.
Set the profile to use.
Delete a queue.
Delete a topic.
Create a shared access key from a connection string.
Get the properties of the service bus.
Check if the lock has expired.
Process the results from the output queue.
This thread is responsible for adding tasks to the results queue.
Build a config from a config dict.
Create a message from a response.
Convert an etree element to a rule object.
Convert an etree element to a queue.
Convert an etree element to a topic object.
Convert an etree element to a subscription.
Parse an enum result list.
Get entry properties from an XML element.
List all queues for this service.
List all topics for this service.
Get information about a site.
Delete a site.
Update a website.
Restart a website.
Get historical usage metrics for a given website.
Get metric definitions for a given webspace and website.
Get the publish profile XML for a website.
Get a single publish profile.
Create a cloud service.
Check the name of a job collection.
Get a specific job collection.
Cancel scheduled messages.
Reconnect to the server.
Get certificate from publish settings.
Load cookies from cache.
Calculate terminal width.
Get cut prefix from value.
Print a message to stderr.
Format a filesize.
Format the elapsed time into a string.
Create a status line for the terminal.
Print a progress bar.
Return a generator that yields the number of available segments.
Return a generator of all the segments for this resource.
Wait for the event to happen at the specified time.
Put a segment into the queue.
Queue a value in a queue.
Get parameters from pvswf.
Extract a nonce from an HTTP result.
Find the vpid for a given url.
Parse a JSON string and validate it.
Parse an XML string into a tree.
Parse a query string into a dict.
Search a dictionary for a key in a list or dict.
Iterates over all tags in an HTML string.
Determine the json encoding of a sample.
Parse a JSON response.
Parse an XML document.
Parse cookies and set them to self. cookies.
Parses the headers from the given list of headers.
Parse query params from cookies and store them in self. params
Get the message for this message.
Create a log record.
Login to the server.
Load support plugin.
Update a URL s query string with the given qsd.
Iterate over the tags in chunks.
Yields all required requirements for the specified argument.
Check the output of a file.
Create the output for the plugin.
Create an http server.
Iterate over all http requests for a given player.
Output a plugin to a stream.
Open a stream and return a stream and a prebuffer.
Create a new output stream and write it to the given stream.
Read data from a stream and write to output.
Handle a stream.
Fetch streams from plugin.
Fetch all available streams.
Resolve a stream name from a dictionary of streams.
Print a list of available plugins.
Authenticate using twitch oauth.
Load streamlink plugins from a list of directories
Setup the http session.
Setup plugins if needed.
Log current versions.
Get stream id from text.
Get an iframe from the iframe.
Get an option by key.
Set an option for a plugin.
Get an option from a plugin.
Resolve a URL.
Load plugins from a package path.
Convert value to hours minutes or seconds.
Find a player url from a response.
Load data into a Python object.
Find a supported player based on a command.
Get stream id from html.
Extract stream info from html.
Login to the server.
Apply a function to each element of the map.
Make an API call to an entrypoint.
Start a new session.
Get information about a media.
Create a new API instance.
Format a character as a string.
Read n bytes from the stream.
Get the value of the bitstring.
Return the explanation of the code.
Set decode table to decode table.
Set the length of the table.
Read a tuple from the stream.
Return an explanation string for the given index.
Return the value at the given index.
Returns the lower and upper span of the value at index.
Return the value of the given index and extra.
mnemonic returns mnemonic for symbol at index.
mnemonic returns the mnemonic of the mnemonic at the given index.
Compile the actions into a dictionary.
Perform an action.
Return a hex representation of the data at the given position.
The length of the metablock.
Read uncompressed data from the stream.
Get the number of blocks of the given kind.
Convert a list of values into an IMTF string.
Read a prefix array.
Add a hidden attribute to the dataset.
Add virtual columns to the grid.
Run the vaex application.
Open multiple files in a dataframe.
Create a table from a samp database.
Return dataset astropy table.
Create a new array from a list of scalars.
Read a CSV file and return as a pandas object.
Perform a vaex server request.
Returns the Jacobian of the Jacobian of the Jacobian of the Jacobian of the Jacob
Concatenate a list of DataFrames into a single string.
Create a virtual range column.
Open a dataset at the specified path.
Evaluate an expression on the dataset.
Return the set of columns depending on the current selection.
Sorts the list of pairs according to the specified order.
Wait for the plot to be completed.
Open a document in the system.
Write a file or file - like object to a file.
Split arrays into masks and masks.
median approximation of a median expression.
Plot the dataset as a 2D dataset.
Create a 3D plot of this dataframe.
Return the dtype of the given expression.
Get the private directory for this server.
Remove virtual meta data from the private directory.
Write virtual meta data to disk.
Write the metadata to a YAML file.
Set the value of a variable.
Evaluate a variable.
Evaluate a selection mask.
Convert the table to a dictionary.
Create a copy of this DataFrame.
Convert to a Arrow table.
Convert to an astropy. table. Table object.
Add a column to the expression.
Rename a column.
Add virtual columns cartesian to polar.
Add virtual columns cartesian velocities to polar
Add virtual columns polar velocities to cartesian.
Add virtual columns to the table.
Add virtual columns spherical to cartesian.
Add virtual columns cartesian to spherical coordinates.
Add a virtual column to the table.
Delete a virtual column from the table.
Add a variable to the table.
Deletes a variable and emits the variable changed signal.
Return the last n elements of the list.
Print the head and tail of the table.
Concatenate two tables.
Set the current row of the array.
Trim the fraction of the dataframe.
Returns a new DataFrame with the DataFrame with the specified indices.
Returns a trimmed version of this string.
Undo a selection.
Redo a selection.
Check if a selection can be executed.
Select a rectangle within the bounding box.
Select a circle of radius r.
Create a new selection.
Find a valid name for a column.
Graphviz dot to each column in the tree
categorize a column
Ordinal encodes the given column to the given values.
Returns a datas object with the data for this table.
Returns the length of the array.
Horizontal stacking of this table with another table.
Concatenate two data frames.
Add a column to the data frame.
Patch a dataframe with f.
Fill NaN or masked array ar with value.
Try to convert an array to a string if possible.
Convert to recarray.
Store properties in a file object.
Write comment to file.
Write a property to the file - like object fh.
Yield universal newlines from a file.
Print the current version and its dependencies.
Rename a keyword.
set global fftlib
Track a beat in librosa.
Adjust the tuning of an input file.
Convert hz frequencies to mel.
Convert mel to hz frequencies.
Generate a list of frequencies for a given sr and fft.
CQT filter on the basis of a CQT
Trim the stack of the cqt response to n bins.
Compute the Correlation Coefficient of a Correlation Coefficient
Downsample count using early downsampling.
Downsample from late downsampling.
Return a uniform transition matrix.
Set the current image on the given axes.
Check if axes is a valid matplotlib axes.
Scale axes.
Compute the FFT for a given number of frequencies
Compute the mel - frequency basis for a given number of frequencies.
Return the frequencies for a given number of frequencies.
Return an array of n - dimensional chroma coordinates.
Convert a coordinate to a time.
Stretch a time series by a given rate.
Compute the HPSS beats for the given input file.
NN filter helper.
Calculate the bandwidth of a window.
Fill a window with a window of length frame length.
Returns the Jaccard similarity between two integers.
Given a query and a list of candidates return the index of the best candidate that matches the query
Match intervals from one interval to another.
Load audio data from a file.
Convert y to mono.
Return a set of all files in the given directory with the given extensions.
Stretch a demo.
Process command line arguments.
Demonstration of HPSS.
Track a beat at a given bpm.
Calculate the local beat local score for a given onset envelope.
Calculate backlink and cumscore for a given localscore.
Find the last beat in a cumscore.
Detect onsets in a librosa file
Validate that x is a valid integer.
Read the next image from the cache or cache.
Get the frame with the given id.
Write frames to a file.
Track the progress of a function on a list of tasks.
Flip an image along the specified direction.
Rotate an image by angle.
Clip a bounding box with a given shape.
Scale a bounding box to a given scale.
Impads an image to a specified shape.
Impad an image to multiple dimensions.
Scale size.
Resizes an image using cv2. resize.
Resize an image to a different size.
Register a file handler.
Get the value of a priority.
Dequantize an array.
Show an image.
Dequantize flow from dx to dy.
Load a checkpoint from a file.
Convert a state dict to a cpu state dict.
Save a checkpoint to a file.
Initializes the optimizer.
Initialize a logger.
Return the current optimizer.
Register hook with priority.
Run a workflow.
Register training hooks.
Cut a video from one file to another.
Concatenate a video list into a video file.
Read a list of strings from a file.
Create a dictionary from a file.
Convolutional 3x3 convolution.
Read an image or path from a file.
Convert a byte string to an image.
Wrapper for cv2. imwrite.
Convert a grayscale image to a grayscale image
Convert gray image to bgr.
Cast input iterable to dst type.
Check if a sequence is of expected type.
Slice a list into a list of length lens.
Calculate the average of the values in the history.
Scatter a tensor or list of tensors.
Return the value of a color.
Check the time of a timer.
Starts the thread.
Return the elapsed time since start of the timer.
Returns the amount of time since the last run.
Show a flow.
Make a color wheel for the given bins.
Computes the accuracy of the given target.
Scatter the inputs and kwargs for a given gpus.
Fetches a response from the server.
Get JSON content from AWS.
Get text from AWS.
Handle a callback.
Perform multiple requests on multiple URLs.
Make a request to the given url.
Start the master process.
Normalizes ansible task to ansible module.
Return the name and version of the wheel distribution.
Get the basename of the archive.
Add requirements to the requirements file.
Create a message from text.
Create a suggested activity message.
Create an attachment activity.
Create a list activity.
Create an attachment with the given content type name text and input hint.
Set the telemetry client.
Read a list of keys from the container.
Write changes to container.
Delete an item from the database.
Create a si document from the result.
Create a dict from store item.
Sanitize a key.
Create the database and container.
Get or create a database.
Get or create a container.
Fill event properties with information from query results.
Get a reference for the given activity.
Get the name of the step at the given index.
Returns True if the given channel supports suggested actions.
Check if a channel supports card actions.
Return the channel id of the current activity.
Checks if the given auth header is a valid token from emulator.
Return hero card attachment.
Set the control of a classical register.
Return a copy of this object.
Return string as qasmif string.
Return the qasmif for this parameter.
Run the given circuit.
Run the pass and update the dag.
Returns a list of all passes in the working list.
Dump the flow passes to a string.
Factory method for creating a flow controller.
base function for u
Return the parameters for a single gate.
Create a single gate matrix.
Return a DAG representation of a circuit.
Fit a function to a given time series.
Fit an oscillator to a vector x.
Plot the coherence of a function.
Return the shape of the data.
Plot rb data.
Compose a 3x3 rotation matrix.
Convert yzy to zyz angles
Validate the input quantum state.
Trims the difference of the image to the background.
Get the span of a gate in a list of qregs.
Run the model on the given dag.
Add a barrier to the circuit.
Process a bit id node.
Process a gate node.
Process a CNOT node.
Process a measure of a node.
Process a node if the condition is met.
Create a dag operator.
Return the duration of a channel in seconds.
Return the start time of a channel.
Stop the specified channels.
Iterates over the instructions of this node at the specified time.
Dump additional data to a valid data dictionary.
Load additional data into valid data.
Validate the instance against the schema.
Serialize the model to a dictionary.
Load data from a dictionary.
Compute the Fourier transform of a circ.
Squeeze a real or imaginary part of an array.
Return the outer product of two vectors.
Return the concurrence of a state.
Compute the Shannon entropy of a state.
Compute mutual information for a state.
Return the entanglement of a formation.
Return the shannon entropy of a qubit.
Flatten a schedule into a single schedule.
Shift a schedule by a given time.
Insert a new component into a parent schedule.
Append parent and child to child.
Add a 3 - qubit gate to the circuit.
Status of this backend.
Starts a new iteration.
Returns a string representing the time remaining until the specified number of completed iterations.
Disassemble a QObject.
Calculate the hamming distance between two strings.
Create a quaternion from a rotation angle.
Quaternion from euler angles.
Return a quaternion that is the same as this quaternion.
Convert the vector to a matrix.
Convert to zyz coordinates.
Processes the given data and returns a dictionary with the most common values.
Check the type of the given value.
Check that j is within self. size.
Return True if mat is a square matrix.
True if mat is a diagonal matrix.
True if op is a symmetric matrix.
True if mat is a Hermitian matrix.
Check if a matrix is positive semidefinite matrix.
True if mat is an identity matrix.
Check if a matrix is a unitary matrix.
Convert a string to a choi representation.
Convert a string to a superoperator.
Convert a string to kraus.
Convert a string or sequence of strings to a Chicobian.
Convert a string to a PTM string.
Convert a string to a stinespring string.
Convert a string to an operator.
Apply operator rep to data.
Stinespring operator.
Reshape the data to a new shape.
Reduce the data by reshuffle the superoperator.
Convert kraus to choi.
Return the kraus of the Hermitian matrix.
Convert a list of stinespring data to a kraus pair.
Return the stinespring of the given data.
Convert kraus to stinespring.
Convert kraus to superop.
chi to choi
Convert choi coordinates to pauli coordinates
Reravel two matrices.
Transform data from pauli basis to pauli basis.
Check that input dim and output dim have the same number of qubits.
Hide tick lines and labels from the axis.
Set label convention.
Clears the internal state of the object.
Add a vector to the vector list.
Render the view.
Plot the front of the sphere.
Render and show the figure.
The top of the layer.
The mid of the layer.
The bot of the layer.
Return the length of the message.
Return a list of parameters for a label instruction.
Generates a label for a box instruction.
Return LaTeX representation of this node.
Filter deprecation warnings.
Get local hardware information.
Check if a connection exists.
Checker for HTML output.
Return the constant of times.
Square a time series with a given period and phase.
Return a triangle of a given number of times.
Return the cosine of a number of times.
Gaussian derivative.
Gaussian square.
Return a default pass manager for the basis gates.
Create a default pass manager for the basis gates.
Check if a register is present in the quantum and classical registers
Mirror this circular into a new circular.
Returns the inverse of this circular.
Append an instruction to the sequence.
Check that all qubits have the same length.
Check that all qargs are valid.
Check that all cargs are valid.
Check for compatible regs.
Return a string representation of the instruction.
Return the size of the gate.
Return the width of the rectangle.
Count the number of ops in the sequence.
Bind the parameters of the circuit to the given dictionary.
Bind a parameter to the table.
Map free gates to the given layout.
Calculate the distance between a layout and a layout.
Return the score of the given step.
Create a copy of the source dag with the metadata from the coupling map
Transform a gate into a quantum register.
Return a list of swap ops for the given edge.
Runs the model on the given dag.
Add a physical qubit to the graph.
Add an edge between src and dst.
Return a subgraph of the current coupling.
Get the physical qubits of the node.
Returns True if the graph is weakly connected otherwise False.
Compute the distance matrix of the graph.
Distance between physical qubits.
Add a cu1 gate to the list.
Inverse of the current instruction.
Q if any of the gates are met.
Return this circuit with the classical and val of the given instruction.
Subscribe an event to a callback.
Dispatch an event to all subscribers.
Unsubscribes a callback from an event.
Publish an event to the broker
Initialize a new quantum register.
Define the disentangling circuit.
Returns a circuit with all the gates uncomputed.
Calculate bloch angles for a pair of complexes.
Multiplex a gate with multiplex angles.
Return True if value is virtual or not.
Returns a copy of this layout.
Combine this layout into an edge map.
Add a CNFoli gate to the end of the list.
Insert a new component into the schedule.
Check if a fenced attribute exists.
Given a list of gates and a list of QReg objects return the indices of the gates that
Run the mapper on the given dag.
Group a number of qubits into a set of contiguous qubits.
Create a boolean array from a label string.
Initialize from boolean data.
Return the product of p1 and p2.
Convert the QR Code to an operator.
Convert the QR Code to an instruction.
Update the z parameter.
Update x with x.
Append a paulis to the end of the list.
Delete qubits from the mesh.
Generate a random boolean array.
Create a single pauli.
Get the measure outcome for a given qubit.
Add sample measure to classical memory.
Add a qasm measure to the circuit.
Reset the QSM to the given qubit.
Validate initial statevector.
Initialize the state vector.
Return the state vector that is the state vector.
Validate the measure sampling for the given experiment.
Run a job.
Validate that the given QObject is valid.
Validate the initial unitary.
Initialize the unitary matrix.
Get the unitary of the Qubits.
Run a job in the backend.
Validate that the qobj has the correct number of shots.
Check if an object is a bit.
Generate trivial layout for the given dag.
Check if this interval overlaps the given interval.
Shift the interval by time seconds.
Shift the interval by time seconds.
Return the start time of a channel.
Return the number of time intervals between the given channels.
Check if timeslots overlap with timeslots.
Merge timeslots into one timeslot.
Return a new timeslot shifted by time.
Report an issue or comment.
Iplot the state of a rho.
Multiply two qubits.
Cswaps the ctl with tgt1 and tgt2.
Create a program graph from a DAG.
Select the next edge in the program.
Selects the first non - overlapping gate from the list of available gates.
Select the best available qubit for a given prog.
Return the instruction list of the gate.
Inverse of the gate.
Set the q - axis of the gate.
Return a new circuit with the c - c of classical and val.
Return True if the matrix is unitary.
Return the conjugate of the input and output arrays.
Transpose the input and output arrays.
Return the power of n in the input data.
Return the shape of the input array.
Convert a quantum circuit instruction to an operator.
Create a DAG that swaps the layer i with the best layout and the best circ
Split a bitstring into multiple substrings.
Format a memory list to a level 0 array.
Format a memory list to level 1.
Format memory for level 2.
Format counts as a dictionary.
Format a state vector into a state vector.
Format a unitary matrix.
Submit the job to the executor.
Return the status of the job.
Return True if the LB and ub are included in the filter.
Display the bloch of a multi - vector matrix rho.
Run the operation on the given dag.
Choose k from n.
lexicographical lexicographical index
Return a list of unique hardware backends.
Return the operation of the object.
Generate a sampled constant.
Return a sampled zero pulse.
Draw a square pulse.
Generate a sawtooth pulse.
Return a sampled triangle.
Return a sampled cosine of a duration.
Return the sinine of the given duration.
Gaussian pulse.
Derivative of a Gaussian distribution.
Write this node to a string.
Get backend instance.
Remove all ops named opname from the graph.
Add a quantum register to the graph.
Add a classical register to this instruction.
Add a wire to the graph.
Check if a condition is met.
Return a list of all bits in a condition.
Add a node to the multi - graph.
Apply an operation back to this node.
Checks the validity of a wiremap.
Return a new condition for the given wire map.
Extend the graph by adding all quantum and classical registers to the given edge map
Check that the given wires are the same.
Create pred and succ maps for a node.
Return the full pred map and full succ map for the input circuit.
The topological nodes of the multigraph.
Iterate over all edges in the multi - graph.
Return a list of nodes with the given operation.
Return a list of all gate nodes.
Return a list of named nodes.
Returns a list of the two - qubit gates of the circuit.
Return the predecessors of a node.
Return a list of predecessors that have a quantum register.
Return the ancestors of the given node.
Return a list of successors of the given node.
Remove a node from the graph.
Remove ancestors of node.
Remove all descendants of node.
Remove non - ancestors of node.
Remove nondescendants of node.
Generate serial layers of the topological operation.
Generator over the multigraph layers of the graph.
Iterate over all nodes on a given wire.
Count the number of topological operations in the graph.
Returns a summary of the properties of the tensor.
Convert a basis to a tomography basis.
Propagate gates to the given circuit.
Return the tomography data for a circuit.
Projector op list onto basis basis.
Inverse of tomo linear inv.
Wizard a rho matrix.
Calculate the wigner data for a given set of qubits.
Apply meas function to the circuit.
Checker for text messages.
Monitor the status of a job.
Simplify a u - dimensional vector.
Run the transpiler on a dag.
Build the job history tab.
Add a cu3 gate to the AMPAL object.
Build bell circuit.
Run the transpile circuit.
Return the current drive channel.
Get a control channel.
Return the measure of the pulse.
Acquire a channel.
The input state of a circular.
Remove the logger from the logger.
Display the state of the iplot.
Parse an input string.
Pop the next lexer from the stack.
Push a new lexer onto the stack.
Get bound method for given instruction.
Convert acquire instruction to qobj model.
Convert frame change instruction to QObject.
Convert a persistent value to a QObject.
Convert a drive instruction to a QObject.
Convert a snapshot instruction to a snapshot instruction.
Update annotations in a discretized pulse.
Convert a dag to a quantum circuit.
Convert a matrix observable into a dictionary.
Update the symtab for the given object.
Verify the declared bit of an object.
Verify that exp is a list of external functions.
Verify that the object is a gate.
Verify that an object is a valid register.
Verify that the given object is a list of the given type.
Find the next column in the input string.
Parse debug value.
Parse the data and return the qasm.
Parse the data and convert it to a string.
Parse the qasm file.
Add a gate to the AMPAL object.
Return the basis state of a string.
Projector a state into a density matrix.
Return the purity of a state.
Run the graph algorithm.
Run all runs in the dag.
Get a backend by name.
Return the shape of the bipartite matrix.
Yield register specs for the given bit labels.
Truncate a float to a given format string.
Renders a LaTeX document in LaTeX.
Get the number of columns and number of images in the image.
Get the height width width and scale of the beamer page.
Load a schema from a JSON file.
Load schemas and validators.
Random unitary matrix.
Generate a Ginibre matrix.
Generate a random density HS.
Random density of bures.
Returns a list of names of all calls of this node.
Power n times the input and output dimensions.
Compose this subsystem with another subsystem.
Convert a quantum circuit instruction to a superoperator instruction.
Run the barrier on the given dag.
Run the gate on the given dag.
Define the quantum gate.
Check if value is of the expected type.
Check the type of the value.
Set the value of the atol property.
Set the rtol of the element.
Reshape the input and output dimensions.
Return a tuple of input dims.
Return a tuple of output dims.
Return a copy of the dataset.
Power n number of elements.
Return a tuple of automatic dimensions for a given size.
Overrides base method to handle validation errors.
Serialize the value to a string.
Check that the value is of the expected type.
Singular Value Decomposition.
Return a snapshot of the current state.
Set the label of the message.
Return True if the composition is unitary.
Convert this TimeSeries to an operator.
Convert the circuit to an instruction.
Initialize a transformer from a quantum data.
Patch strptime module.
Check if the given list of tokens is valid.
Split a string into tokens and return a list of tokens.
Parse a time string.
Returns True if the given string is applicable to the given date string.
Translate a date string to a string.
Parse a string with the given date formats.
Convert an exception string to a net number.
Convert an exception to a number.
Compose the configuration file.
Get information about the current state of the stream.
Log stdout and stderr.
Expand a time string to a multiplier.
Read configuration options.
Read cached options from file.
Write cached options to disk.
Create a stpd file.
Create a new rps schedule.
Returns the number of rps at the given time.
Execute a command and return the exit code.
Decode monitoring data into a list of points.
Generates a list of points for each label.
Publish a key - value pair.
Count the number of matched codes in a dictionary.
Stop the pool and wait for it to finish.
Feed a stpd file into the queue.
Add user options.
Configure the configuration.
Collect data from the results and notify listeners.
Notify listeners of aggregated data.
Discover the jmeter UDP port.
Terminate the process.
Read data from a list of lines.
Create a criterion from a string.
Get configuration from XML file.
Create a startup config file.
Check if the disk is within the specified limit.
Check memory availability.
Get the right line of the output.
Add a widget to the info list.
Fill rectangle with prepared markup.
Return the length of the given line.
Add a widget to the screen.
Make a request to the writer.
Load plugins and register them.
Get the plugin of the given class.
Returns a list of plugins of the given class.
Collect a file from the repository.
Add an artifact file.
Create a temporary file.
Load configuration files.
Flush the configuration to a file.
Get a list of options for a section.
Find sections that start with prefix.
Decode stat data.
Prepare agents and startup configs.
Poll the agents and send the collected data.
Send collected data to listeners.
Detect configuration.
Handle data items.
Subscribe to a list of channels.
Run the event loop.
Close the websocket and polygon resources.
Make a request and return the response as JSON.
Submit an order.
Get the position of a symbol.
Returns a list of all the assets for the specified status and asset class.
Check that the value of a dict parameter is of the right type.
Decorator to check a dict parameter.
Create a logger for the given event record.
Construct a JSON event logger.
Create an instance from a config file.
Get a pipeline by name.
Returns a list of all pipelines.
Get the next event from the queue.
Execute a pipeline through a queue.
Wait for the process to finish.
Define a field on a dagster type.
Build the execution plan for this pipeline.
Return a solid with the given name.
Construct the publish comands string.
Set new version and commit new version.
Blocks the current line with the given text.
Download a file from S3.
Upload a file to S3.
Context manager for creating a user code execution error.
Create a new directory if it does not exist.
Context manager for user code context manager.
Create a context for a dagster run.
Return True if all steps in the input expectations and output expectations have been achieved.
Return True if all steps have been skipped.
Return a dictionary of transformed values.
Return the failure data for this step.
Check if the given config value is a valid dataset.
Return True if config value is a valid table.
Return a merged execution plan with all topological steps of the execution plan.
Get connection parameters.
Create a new connection to the database.
Create a new cursor.
Close the connection to the database.
Convert model dict to mdl format.
Convert a list of dicts to a python list.
Overrides Django s formfield method to add default values to the form field.
Convert a value to a Python object.
Apply the filters to the queryset.
Computes the n - grams of the given counts and sizes.
Compute the NFPs for the realization of counts.
Calculate the optimal partitions for a given number of partitions.
Calculate the coherence between two numbers.
Initialize slots.
Return the byte size of the seed and hashvalue.
Merges the hashvalues of other into this one.
Return a new Mhs with the union of the given Mhs.
Yield all keys that match the given minhash.
Return the minimum hash of the given value.
Remove a key from the hashtable.
Count the number of corrections.
Merge two TimeSeries.
Clears the accumulator.
Calculate the APK score for a predicted APK.
Map k to the mean of the predicted values.
Sorts the list of hashtables by their keys.
Query the cache for the given minhash and k.
Closes all open hashtables.
Get user data from JWT.
Returns a social login object.
Select text from a string.
Parse a scoped selector into a scoped selector and a selector.
Parse a statement.
Parse the value.
Advance one line.
Parse a configurable reference.
Run the session after creating a new session.
Wraps a function so that it can be passed to the wrapped function.
Format a value according to its syntax.
Clears the configuration.
Returns True if the given function or cls has a parameter with the given name.
Get the cached arg spec for the given function.
Get positional parameter names for fn and args.
Parse a config file.
Parse a value into a config object.
Iterate over flattened values of a value.
Iterate over all configurable references in a configuration.
Convert an enum to a list of constants.
Returns a list of all matches that match the partial selector.
Return a minimal selector that matches the given complete selector.
Search for the given query and return the result as a string
Parse retry response headers.
Validate a value against the metadata.
Property description of this resource as a property description.
Validate and set the value.
Get the thing at the given index.
Initialize things and hosts.
Set default headers.
Prepare the request for sending.
Get a thing from the server.
Perform a post operation on a thing.
Delete a thing.
Start the service.
Return the action description as a dictionary.
Starts the job.
Finish the job.
Return the event description as a dictionary.
Get IP address.
Get the list of addresses for all interfaces.
Set the value to the given value.
Emits the external update signal.
Return a dict representation of the object as a dict.
Set the href prefix of the resource.
Return a dictionary of property descriptions.
Returns a list of action descriptions for the given action name.
Return a list of event descriptions for the specified event name.
Add a property to the resource.
Remove a property from this object.
Get the value of a property.
Returns a dictionary of properties.
Set the value of a property.
Get an action by name and action id.
Add an event to the event queue.
Add a available event to the event list.
Perform an action on the resource.
Remove an action from the registry.
Add an available action to the registry.
Remove a subscriber from the subscriber list.
Add a subscriber to the available events.
Remove an event subscriber from the available events.
Notify subscribers of a property change.
Send an action to all subscribers.
Notify subscribers of an event.
Annotate the model with the given annotations.
Update fields in the database.
Insert the specified fields into the database.
Inserts a new record and returns the resulting model instance.
Build a SQLAlchemy insert compiler.
Check if a field is magical.
Create or update a model.
Triggered when a model is deleted
Recursively resolves the expression and returns the result.
Return the SQL representation of the object as a string.
Return a copy of this instance with the given relabels.
Add a set of conditions to the join.
Returns True if the given field is a hstore field.
Create a hstore required constraint.
Rename a table in the hstore.
Drop required constraint from hstore.
Generate a required constraint name.
Create a sql statement for the given model and schema editor.
Get backend base class.
Prepare the database.
Get the prep value for the field.
Return the form name for the form.
Return a list of SQL statements that can be inserted into the database.
Rewrites the given SQL with the given parameters.
Rewrite the insert statement.
Rewrite insert nothing.
Get a model field by name.
Format a field name.
Format the value of a field.
Create a unique hstore.
Rename a unique constraint on a table.
Drop a unique constraint from the hstore.
Generate a unique constraint name.
Iterate over uniqueness keys of a field.
Add a condition to the query.
Return the sql for this query.
Return the tdist 95 conf level for a given df.
Returns the variance of a pooled sample between two samples.
Compute the t - score between two samples.
Returns True if the difference between sample1 and sample2 is significant.
Given a list of roots and a list of parents return a sorted list of the top - level
Generate n queens.
Select a random position on the board.
Play out a random board.
Filter benchmarks based on the base version.
Expand benchmark name into benchmark name.
Initialize benchmarks.
Returns the domain of the knot.
Fetch all posts for a given category.
Parse posts and return a generator of posts.
Retrieve a user from the entrypoint
Fetch the items for the given category.
Fetches all the items for the given category.
Setup command parser.
Fetch the items for the given category and date.
Returns a list of bugs for the specified date range.
Get comments for a bug.
Retrieve bug history for the specified bug ids.
Retrieve attachments for a bug.
Fetch merge requests from Gitlab.
Fetch merges from Gitlab.
Merges the given merge id into this repository.
Fetch merge versions for a given merge.
Merge a version into another version.
Get a list of notes for an item.
Get emojis for an item.
Get emojis for a note.
Calculate time to reset.
Fetch items from Gitlab.
Initialize the rate limit for this repository.
Setup command parser.
Fetches the latest message from the database.
Return the metadata id for the given item.
Get the number of members of a conversation.
Get channel information.
Get information about a user.
Setup command line parser.
Return the timestamp of the metadata for the item.
Parse buglist from raw csv.
Parse bugs details.
Logout from the CGI server.
Returns the metadata for this bug.
List bugs for a given date.
Returns a list of bugs for the specified bug ids.
Activity of a bug.
Fetch a list of items from the database.
Fetch events for a given category.
Get events for a group.
Get comments for an event.
Get all RRSVPs for a given event.
Fetches questions from the server and returns them as html.
Fetch comments for a question.
Builds a question object from a question page.
Get all the questions for a given path.
Get html question by question id
Get comments for a post.
Parse question container.
Parse the number of pages in question.
Parse update info and return user info.
Fetch all review objects for a given category.
Return a list of reviews from a JSON string.
Fetch gerrit28 reviews.
Get the version of the Gerrit server.
Get reviews for a given item.
Retrieve the next group item.
Execute a command from the archive.
Execute a command from remote.
Setup command parser.
Fetch issue data from the server.
Fetch attachments for an issue.
Fetch all messages for a given issue.
Fetch all activities for an issue.
Fetch user data.
Get a user by name.
Issues an issue.
Get a list of items for an issue.
Yields items from the given path and payload.
Returns a generator that yields all subscriptions for a given page.
Find group id by name.
Perform a GET request to the given url and payload.
Setup command parser.
Find backends for a given package.
Fetch metadata from archive.
Filter items based on classified fields.
Parse command line arguments and return parsed args.
Set authentication arguments.
Set the command line arguments for the archive.
Set the output arguments for the parser.
Run the pipeline.
Initialize the archive manager.
Return the timestamp of the metadata for the item.
Parse a mbox file.
Fetch and parse messages from mailing list.
Copy a mbox to a temporary location.
Validate a message.
Convert a casedict to a dict.
Get a message from the mailbox.
Fetch items from Git repository.
Parse a git log from a file.
Add git path to parsed args.
Setup the command parser.
Parse the stream and yield all the commits.
Clone a URI to a new directory.
Count the number of objects in the repository.
Returns True if the repository is detached.
Update the repository.
Fetch all commits from the repository and return them as a list.
Read a list of commits from the repository.
Update all references in the repository.
Discover git refs for this repository.
Update a ref
Execute a command and yield the output.
Read stderr from the process.
Execute a command and return the output.
Fetch all tweets for a given category.
Setup command parser.
Fetch the items for the given category.
Fetch hits for a given category.
Parse a hit and return a dictionary of hits.
Returns a list of hits for the specified keywords.
Return the timestamp of the metadata for the given item.
Get the metadata category for the given item.
Fetch pull requests from Github.
Fetch repo info.
Get a list of issue comment reactions.
Get a list of all the reviewers for the specified PR number.
Get the hashes of all the commits for the given PR number.
Get a list of reactions for a comment.
Get a user by login
Get issue reactions for a given issue number.
Get issues per page.
Returns a generator of pull numbers for all issues in the repository.
Pull the requested reviewers for the specified reviewer number.
Pull all commits for a given PR number.
Fetch reactions for a review comment.
Get a user by login.
Get the list of orgs for the specified login.
Get the token rate limit for the given token.
Get tokens rate limits.
Choose the best token to use.
Check if the number of tokens needs to be throttled.
Update current rate limit.
Initialize metadata for the archive.
Store the data in the archive.
Retrieve an archive from the database.
Create an archive at the given path.
Verify that the archive is valid.
Load metadata from the database.
Count the number of rows in a table.
Create a new archive.
Remove an archive from the system.
Yield archive paths and created on > archived after
Search for files in the directory.
Generate months from a range of dates.
Remove illegal characters from the XML string.
Parse issues from a JSON response.
Get a list of issues.
Issues an issue.
Get information about a user.
Make a call to the API.
Fetch items from dockerhub.
Fetch items from the repository.
Retrieve a repository from the repository repository.
Filter fields by boolean values.
Parse issues JSON page.
Get items from a given date range.
Get issues for a given date.
Get comments for a specific issue.
Get the fields for this resource.
Fetch the items for the given category.
Get a list of builds for a given job.
Parse a page of questions and return a generator of questions.
Get questions for a given date.
Setup command line parser.
Fetch all reviews for a given category.
Get the maximum date of a list of reviews.
Fetch 1 27 pages.
Get all pages in the specified namespace.
Get a list of recent pages for the specified namespaces.
Parse messages from a JSON string.
filter message by chats
Returns a list of the updates that have been updated.
Fetch all the articles in the specified category.
Add metadata to an item.
Parse email. message from raw article.
Fetch data from remote or archive.
Fetch an article.
Fetch data from remote.
Fetch data from the archive.
Create a new http session.
Setup rate limit handler.
Sleep until rate limit is reached.
Update the rate limit based on the response headers.
Parse a supybot log file.
Retrieve supybot archives for a given date.
List supybot archives.
Parse a stream of supybot messages.
Fetch all topics for a given category.
Parse topics page.
Get information about a topic.
Post a post.
Fetch all tasks for a given category.
Yield tasks from a JSON string.
Yield users from a JSON response.
Iterate over all tasks in the project.
Retrieve transactions for a set of phids.
Returns a list of users with the given phids.
Returns the phids associated with the specified phids.
Make a call to the API.
Return the metadata id for the given item.
Parse the summary from a JSON string.
Returns a generator of the contents of the document.
Get the historical content for the given content id and version
Parse the result string and store it in self. result.
Returns the capabilities url for the given service.
Read the content of a URL.
Read a string from the file.
Parse the result string and return a measurement timeseries.
Build url from query string.
Construct a schema from a list of elements.
Get a description of a feature type in a url.
Simple wrapper around wps. execute.
Get a list of movie objects.
Get a list of tvs
Get information about the resource.
Get alternative titles.
Get credits for this project.
Get external ids.
Returns a dictionary of keywords.
Retrieve recommendations for the current user.
Get the release dates for this release.
Get releases from the repository.
Get translations for the current object.
Get similar movies.
Get reviews for a user.
Get the next upcoming date.
Get the current playing time.
popular wrapper for get.
Get the top rated content of a resource.
Get the state of the account.
Get the rating of a user.
Get movie credits.
Get credits from tv.
Get information about the resource.
Get a list of all the objects in the collection.
Get information about the session.
Get a list of movies for this session.
Create a new token.
Validate that the user is logged in and return the response.
Create a new session.
Create a new guest session.
Get a list of rated movies.
Get the status of an item.
Create a new list.
Remove an item from the session.
Remove all sessions from the list.
Get the ratings for the current user.
Similar to get but with the same attributes.
Perform a GET request on the air and return the response.
Get information about a series.
Get credits for a given season number.
Get external ids for a series id season number.
Get information about a series.
Get credits for a series id season number episode number.
Get external ids of a series.
Set the attributes of this object to the given response dict.
Get a collection of attributes.
Get company information.
Get a keyword from the API.
Execute a GET request with multiple attributes.
Return a list of tokens that can be used to normalize a string.
Given a list of refs return a tuple of the number of refs and the maximum number of refs
Return n - gram counts and frozenset of ref.
Erfcc function.
align source and target texts with texts
Iterate over all descriptor classes in a module.
Register a JSON object to the registry.
Register a new entry in the registry.
Print a string to the specified file.
Check if a descriptor is a class.
Return a json representation of the object
Get the coordinate of this node.
Return the atomic sa of a sphere i.
The surface area of the mesh.
Create a molecule from a molecule.
Create a descriptor from a JSON object.
Create a new molecule with missing values.
Drop missing values from the molecule
Return a tuple of key - value pairs for each item in the dictionary.
Return a dict representation of this key.
Get the name of the field.
Print a progress message to stderr.
Print a message to stdout.
Prints a message to stderr and exits.
Get a temporary file.
Set a temporary file to use.
Remove temporary files from temp files.
Return a fixed path for this path.
Returns a list of legal params for the given method.
Merge opt and legal params.
Add command line options to a parser.
Terminate the task.
Add a task to the queue.
Wait for all the workers to finish.
Add the number of processed tasks to the queue.
Get access and secret keys from environment variables.
Get access and secret keys from command line options.
Get keys from s3cfg.
Initialize s3 keys.
Connect to S3.
Walk basedir and return a list of paths.
Expand a source into a list of strings.
Upload a single file from source to target.
Put files from source to target.
Create a bucket in Amazon S3.
Update the permissions of the object.
Prints the contents of the specified source to the console.
Download a single file from S3.
Get files from source to target.
Copy a single file from one source to another.
Copy files from source to target.
Delete all files in source.
Walk a directory and return a list of relative paths.
Sync files from source to target.
Calculate the md5 hash of a file.
Return the md5 hash of the file.
Create a directory if it doesn t exist.
Check if the local key exists in the md5 cache.
Match a path against a filter path.
Recursively walk a S3 directory.
Conditionally add obj to result if obj is a file - only object.
Get file privilege from source.
Look up an object by s3url.
Read a chunk of data from a file.
Verify the size of the downloaded file.
Write a chunk of data to a file.
Run the specified command with the specified arguments.
Validate format and args.
List buckets in S3.
Create a new S3 bucket.
Put files to S3.
Get files from S3
CAT handler.
dsync files from source to target
Copy files from source to target.
Move files from one source to another.
Delete files from S3
DU handler.
Print the total size of all files in the S3 bucket.
Match the regex date and value.
Match time.
Match delta.
Check that the value is a JSON object.
Get data from hub.
Push data to the queue.
Get the key for this token.
Handle an exception in a job.
Create a logging handler and add it to the log.
Get a request from the server.
Report a message to the server.
Create a logger for the agent.
Build person data.
Add a lambda context to the current lambda context.
Add request data to data dictionary.
Check if add locals are in settings.
Build request data.
Build server data.
Build a payload from a dictionary.
Main entry point for the rollbar.
Compose chosung and jongsung.
Decompose a hangul letter into its components.
Returns True if the given letter has a jongsung character.
Attach a josa word to a word.
Check if the given node is inside except.
Check if a node is inside a lambda function.
Get all elements of a node.
Clobber in astroid. node.
Return True if node is a child of builtins.
Check if a node is an error.
Check if the given node is a function decorator.
Check if the frame is an ancestor of the frame.
Assign a node to its parent.
Yield fields from a format string.
Get the argument from a call.
Inherit from std ex.
Check if a function is decorated with a property.
Checks if the decorated function is decorated with the given qnames.
Finds the parent of a try except wrapper node.
Check if the given node is a fallback block.
Get the handlers for the given node.
Check if a node ignores an exception.
Check if a class is abstract.
Try to infer the value of the given node.
Return the type of the given node.
Checks if the given node is postponed evaluation enabled.
Returns a list of qualified names for the given modname.
Get the name of a module from an import node.
Return a string representation of the tree of a dictionary.
Create a graph from a dependency graph.
Import node.
Import from node.
Check position of node.
Add import node to import stack.
Check relative imports.
Add an imported module to the graph.
Check for deprecated modules.
Check that the preferred module exists.
Add external dependencies to the sect.
Return a dictionary of all the importers that are dependencies of this module.
Get the default options from the rcfile.
Insert default options into sys. argv.
Show the attribute of the given node.
Get callbacks for the given node.
Visit the given node and call the callbacks for the given node.
Check consistency of messages.
Check if call node is valid.
Check the datetime of the node.
Check if the node is open.
Handle a message.
Get the title of the given node.
Set the default options for this module.
Show node information.
Add a class node to the classdiagram
Get all ancestors of a node.
Get all of the nodes that have been associated with the given node.
Extract classes from the classdiagram.
Return package diagram and class diagram.
Add import from node to self. pkgdiagram
Create a diagram of the given class.
Get all the diadefs in the project.
Return True if the given owner is ignored by any of the ignored modules.
Return a list of unique names that are similar to the given attribute name.
Emits no member of node.
Check if statement has parent of node of type type.
Check if a variable is used as variadic.
Check if a node has a variadic context.
Visit assign node.
Check uninferable call.
Add an error message for unaryop nodes.
Iterate over the interfaces of the given node.
Create a project from a list of files.
Visit all sub - elements of this package.
Visit a functiondef node.
Visit assignname node.
Handle assignattr type assignment.
Visit import node.
Visit importfrom node.
Compute a module based on the context name and module path.
Determine if a module is imported.
Register the linter reporter.
Handle a message.
Handle a message.
Write the graph to the stream.
Write an edge to the stream.
Process non raw string tokens.
Writes the layout to the section section.
Advance the evaluation section by num.
Write a table to the terminal.
Add a renamed message to the message definition.
Register messages from a checker.
Register a message.
Check if a symbol is the same as a message id.
Raises an invalid message with the given symbol and other symbol.
Raise an invalid message id.
Initialize the linter builder.
Return the number of cpus in the scheduler.
Add a report to the given sect.
Temporarily fix paths in sys. path.
Load plugin modules.
Load configuration for dynamic plugins.
Set the value of an option.
Register a checker.
Set python3 porting mode.
Return checkers that are not self.
Get checker names sorted by name.
Prepare checkers to run.
Expand a list of modules.
Set the current module.
Check astroid module.
Report the evaluation of the evaluation.
Handle help messages.
Print full documentation.
List messages.
List groups.
Normalize text by line length.
Get the module and frameid of a node.
Safely decode a line using the specified encoding.
Return True if the basename in blacklist re matches the basename in blacklist re.
Register plugins in a directory.
Return the comment of a string.
Format an option value.
Format a section.
Format options and print help text to stream.
Insert child at index.
Append a child to this node.
Return the parents of this node.
Formats the given layout using the given stream.
Computes the content of the given table.
Compute the content of the given layout.
Collect all lines of the given module node from the given msgs store.
Handle an ignored message.
Register a report with the checker.
Add stats to the stats dictionary.
Get the name of the setters property of a node.
Get the setters property of a node.
Checks if the given node returns a return value.
Return a set of possible exc types for the given node.
Process a module.
Process a module and check encoding.
Process a list of tokens.
Check if the given statement is a future statement.
Return True if the given statement is in for or else branch.
Returns the overridden method for the given class and name.
Get the extra information for the given infered node.
Return True if the given node is assigned locally.
Mark a node as consumed.
Check if node has homonym in upper function scope.
Check the unpacking of a node.
Check all metaclasses of the given node.
Get a list of packages in a directory.
Run the lib. run method.
Report similarities between stats and old stats.
Run a similar program.
Append a stream to the list of linesets.
Computes a list of sims for each ensemble in the ensemble.
Display a list of sims.
Find common lines between lineset1 and lineset2
Iterate over all sims that are common to all linesets.
Iterate over the stripped lines.
Return a dictionary mapping line numbers to line numbers.
Check equality of node attributes.
Return True if original has different parameters.
Attempt to infer the value of a call.
Set the accessed node for the given frame.
Check if the node is a classdef.
Check for consistent mro consistency.
Check that all bases of the node are valid.
Leave a functiondef.
Check slots of a node.
Check if the name of the node is the name of the node.
Check if node is mandatory method param.
Check if the body is raising.
Check for bad exception context.
Display reports for a layout.
Check if a node is a typing namedtuple.
Check if the given node is an enum class.
Check if the given node is a dataclass decorator.
Add a classdef node to the message.
Leave classdef node.
Visit if statement.
Check if all boolean expressions are met.
Check the docstring for spelling.
Format the template using the given template.
Return true if the given node is actual else False otherwise.
Check if a node is simplifiable.
Check if the given node is a generator.
Check if exception inherit from stopiteration.
Check nested blocks and emit message if needed.
Return a dict of duplicated types for the given node.
Add a message if node is a str type.
Check if a node is an AND or ternary expression.
Check for consistent returns.
Check if graphviz is available.
Run diadefs command.
Write packages to the printer.
Write a diagram of classes to the printer.
Sets the printer for the given file name.
Set the printer for a graph file.
Return True if the message may be emitted.
Format the help message.
Return environment variables as a dict.
Find cycles in a graph.
Generate the graph.
Format a section of a docstring.
Disable a message.
Enable a message.
Return the symbol of a message id.
Check if a message is enabled.
Add a message to the message store.
Get the indent length of a line.
Given a list of bar positions and a bad position return a hint line and delta message.
Return a tokenized version of the indented line at the given index.
Handle the start of a line.
Get the valid indentations for the given index.
Return the hanging indent after bracket at position.
Return a continuation string inside bracket at position.
Push a new token onto the stack.
Add a new line to the message.
Check if the token is a valid type annotation.
Check equality of type annotations.
Check that the token is surrounded by a space.
Check if node is a statement.
Check a multi statement line.
Check the indent level of a string.
Return True if the given node is in iterating context.
Check if the given node is a conditional import.
Add a message for a name node.
Attempt to infer subscripts from std ex.
Visit an attribute node.
Try to infer the value of the raise node.
Find the pylintrc file.
Validate value against optdict.
Register a provider with the parser.
Set provider option.
Set the global value of an option
Generate the configuration file.
Load config file and set global variables.
Load command line configuration.
Add a help section to the parser.
Return the help string for the command.
Load default values for all options.
Returns the name of the attribute of an option.
Returns the option with the given name or None if no such option exists.
Iterates over all options in this section and returns them sorted by section.
Check if a function is a method call.
Check if a node is a complex format string.
Visit the logging module node.
Visit importfrom node.
Add imports to the logging module list.
Check format string.
Return true if the given node is inside a loop.
Get the parent of a break loop node.
Check if a loop exits early.
Get the properties of the given configuration.
Determine the function name type of a function.
Report by type stats.
Check if a call is a one arg call.
Add a starred statement to the message.
Check if the call is abstract.
Check if loop exits early.
Check in loop.
Opens the linter.
Visit a expr node.
If node. fail is none add a message if node. test is a tuple or tuple.
Add a dict node to the message.
Check if the given node is in tryfinallys.
Check if the given node is reversed.
Check docstring for docstrings.
Check literal comparison.
Produce a subgraph of the given node.
Parse a node into a sub - graph.
Generate a string representation of a module.
Walk a Astroid and all its children recursively.
Add a relationship between two objects.
Get a relationship from an object.
Get the attributes of the given node.
Add an object to the diagram.
Return a list of class names from a list of nodes.
Return a list of astroid. classdef objects that are instances of astroid.
Return the class with the given name or raise an error.
Return a list of all modules in this object.
Returns the module with the given name or raises an error.
Get a module by name.
Add a dependency to a node.
Delete this client from the cache.
Query the database.
Get user by username and password.
Get an object from the database.
Set a token to the current user.
Add a grant to a client.
Get a client by id and code
Prepare a request to be sent to the API.
Initializes the application with the given app.
Create a remote app.
Authorizes the current user to authorize the current session.
Handle an OAuth1 response.
Handle an OAuth2 response.
Handle an authorized response.
Return a tuple of application name application name hashed token.
Create a new client with the given token.
Create an OAuth client.
Context manager for insecure transport.
Confirm an authorization request.
Get client secret.
Return the secret for the given request token.
Get an access token from the request.
Return a list of realms for the given token.
Get the redirect URI for the given token.
Get the RSA key for the given client key.
Validate client key.
Validate the request token.
Validate access token.
Validate timestamp and nonce.
Validate that the redirect uri is valid for the client.
Validates that the given client key and token is a member of the given realms.
Validate a verifier against a client key.
Verify the request token.
Verify that the given token has the given realms.
Confirm an authorization request.
Authenticate the client with the given request.
Authenticate the client with the given client id.
Get the original scopes for the given refresh token.
Confirm that the given refresh token has the specified scopes.
Get the default redirect URI for a client.
Get the default scopes for a client.
Invalidate an authorization code for a grant.
Save an authorization code for a client.
Save a bearer token.
Validate a bearer token.
Validate a client id.
Validate a grant code.
Validate grant type.
Validate a refresh token.
Validate the response type.
Validate scopes.
Validate a user against the request.
Revoke a token.
Update qq app data
Convert keys in dictionary to string.
Change weibo header.
Register an oauth instance to the remote application.
Create an OAuth session.
Extract the parameters from the request.
Convert text to bytes.
Decode base64 encoded text.
Create a response with headers body and status code.
Get the cached clients for the current state.
Add a remote app to the registry.
Add a remote app to the registry.
Check for an exception.
Check success of the test.
Check if the privatekey is encrypted.
Check if the load privatekey callback is incorrect.
Check if the privatekey callback is wrong type.
Check if all iterations have been revoked.
Duplicate the x509 certificate.
Create a new certificate request.
Create an X509 certificate.
Use an SSL certificate chain file.
Use a certificate file.
Use a certificate on the server.
Add an extra chain certificate to the SSL context.
Use a private key file.
Use a private key.
Load a client ca file.
Set ssl context verify depth.
Load a PEM - encoded DER - encoded DER - encoded DER - encoded DER - encoded DER
Set the cipher list for this connection.
Set the client certificate list for this ssl context.
Add a client certificate authority to the SSL context.
Set the TLS extension for this SSL context.
Set the npn select callback.
Set a list of protocols.
Set the alpn callback for this SSL connection.
Set an OCSP callback.
Set ssl context.
Get the name of the server.
Set the TLS extension host name.
Receive data from the socket.
Read data from a biolink socket.
Try to renegotiate the connection. If the connection has not been renegotiated then return False.
Shut down the server.
Returns a list of the SSL ciphers.
Returns a list of the client CAs.
Shutdown the connection.
Return a random server.
Return a random client.
Return the master key for the current SSL session.
Export a keying material to OpenSSL.
Return a pysession. Session object.
Get the name of the current SSL cipher.
Get the current cipher bits.
Get the version of the current SSL cipher.
Get the protocol version name.
Get the next protocol negotiated.
Set a list of protocols.
Get alpn proto negotiated from the server.
Convert a bio string to a string.
Set the time of an ASN1 message.
Get an asn1 time from a timestamp.
Get an elliptic curve by name.
Dump publickey to a string.
Load a public key from a buffer.
Sign data with pkey using digest.
Verifies the signature of a certificate.
Dump a CRL to a string.
Return the cryptography key for this key.
Check if this key is valid.
Load all the elliptic curves from lib.
Load elliptic curves from lib.
Return the EC key associated with this curve.
Derive an X. 509 certificate.
Returns a list of all the components of the certificate.
Get the short name of the certificate.
Get the data associated with this certificate.
Return a cryptography. x509. X509SigningRequest object.
Set the public key for this certificate.
Get the public key for this certificate.
Get the subject name for this certificate.
Add one or more extensions to the request.
Returns a list of x509 extension objects for this request.
Verifies that the given pkey is valid.
Return a cryptography. x509. Certificate object.
Set the version of the X509 certificate.
Get the public key for this certificate.
Set an X509 public key for this certificate.
Sign an X509 certificate with the given digest.
Return the digest of the certificate with the given digest name.
Set the serial number of the certificate.
Get the serial number of the certificate.
Adjust the gmtime to the given amount after the certificate.
Adjust the gmtime of the certificate to the given amount.
Returns True if the request has expired.
Get the issuer of the certificate.
Set the issuer of the certificate.
Get the subject from the certificate.
Set the certificate subject.
Add one or more x509 extensions to the certificate.
Get the extension at the specified index.
Add a certificate to the hash table.
Add a CRL to the store.
Set the time of the certificate.
Initialize the x509 certificate store.
Create an exception from the context.
Verify the certificate.
Set the serial number of this X509 object.
Get the serial number of the revoked certificate.
Set the certificate reason.
Get the reason of the certificate.
Set the rev date of this CRL.
Return a cryptography representation of the certificate revocation list.
Get all certificates that have been revoked.
Get an X509 certificate issuer.
Sign the certificate with the given digest with the given issuer key.
Export a certificate to a PEM - encoded X509 certificate.
Get the type name of the object.
Set the cacerts to be used.
Sign the given key with the given digest.
Verify the signature of a key.
Encode the object using the base64 algorithm.
Get the public key of the public key.
Set the public key of the public key.
Create an exception from an error queue.
Get service metadata.
Iterate over all issues in the board.
Return the annotations for the given card.
Get boards.
Get a list of lists for a board.
Get a list of cards.
Get comments for a card.
Generate a base url for the given path.
Perform a GET request and return a list of results.
Link a field to a dict.
Get issues matching a query.
Get all pull requests for the specified tag.
Aggregate all issues in the main section.
Get config option or default.
Return True if the issue is included in the list.
Make a table from a list of grids.
Run an oracle command and return the output as a string.
Try to get an integer value from the configuration.
Pull all issues from the specified flavor.
Perform a GET request and return the response.
Get a collection of items from a given url.
Parse a sprint string into a dictionary.
Get credentials from the credentials store.
FDR correction.
Return z - score of data2d along axis.
Adjust the spines for the given axes.
Prepare argument parser.
Adds a sub - command parser to subparsers to add enricher commands.
Select the p - value of a GSea distribution.
Returns a pandas. DataFrame containing the names and descriptions of each mart.
Get all datasets in mart.
Get the attributes of a dataset.
Get the filters for the given dataset.
Set the number of cores to use.
Load genesets from a GATK file.
Returns a list of all libraries in the database.
Download libraries and return genesets as a dictionary.
Set the heatmat of the dataframe.
Load data from the dataframe.
Run the GSea compute method on each sample in a DataFrame.
Save results to outdir.
Parse the genesets file and return a list of dicts
Send a gene list to the given URL.
Check genes in a usr list
Draw a cube script.
Draw an icosphere script.
Runs a Cube hires script.
Return red green and blue values for a color string.
Check if a variable is a list of num terms.
Make a list of num words.
Write a filter to the specified xml file.
Merge vert scripts into one.
Split vert onto nonmanifold face.
Translate a script by the given value.
Rotates the script by the specified angle.
Scale a script by the given value.
Cyllabic version of function.
Wrap a cylinder into a cylinder.
Deform a curve from a deformed deformed script.
Convert a VCS script to a TeX script.
Convert a mesh file to a fc file.
Voronoi color.
Return True if all of the scripts in the given script have face and vert attributes.
Visualize a script with vert quality.
Generates a cylindrical verticial script.
Draw a spherical verticicial script.
Rename a filter script.
Change the layer number of a filter script.
Duplicate a filter script.
Delete a script lower layer num.
Begins a new script.
Add a layer to the stack.
Save the filters to a script file.
Run a script on a triangle of a text.
Measure the topology of a script.
Parses a hausdorff log file and returns a dictionary of distances.
Returns a string that represents the angle x in radians between y and x.
Return the cross product of two vectors.
Multiply a vector by a scalar.
Depth a script.
Sort a file by polyline order.
Measure all the features in a single script.
Convert extension to lowercase.
Get the configuration for this upload.
Return the URL for the given filename.
Return the path to the specified file.
Returns True if the given extension is allowed.
Resolve a conflict between a folder and a basename.
Get the vprof version from a file.
Remove duplicates from a list of objects.
Returns the number of objects that are the difference between objs1 and objs2.
Format the count of objects in a string.
Return the trace memory usage for the given event.
Returns a list of code events.
Returns the number of objects that have been consumed by this object.
Compute the overhead of the process.
Profile the package.
Profile the module.
Profile the run object.
Run the thread.
Get the names of all modules in the specified package.
Run a function in separate process.
Get the type of a run object.
Initialize the module for the given run object.
Initialize the package with the run object.
Initialize the profile function.
Replace sys. argv with self. run object.
Sample a frame.
Insert a call stack into the call tree.
Fill the sample count of a node with the sample count of each child.
Formats the tree of a profiler.
Returns a tree representation of the call tree.
Profile this sample.
Profile the module.
Profile the object.
Transform profiling stats into a list of tuples.
Profile the module.
Profile the module.
Profile the current object.
Show guestbook.
Add an entry to the database
Start a new web browser.
Handle root page.
Return the content and extension of the file.
Send a GET request to the server.
Perform a POST request.
Send a response to the server.
Check if a module path is a standard library.
Add a line to the list of lines.
Yield lines without stdlib.
Fill the heatmap with the number of modules and runtimes.
Skip lines of code with skip map.
Profile the program using the heatmap calculator.
Format a heatmap file.
Profile the heatmap module.
Profile the run object using the heatmap calculator
Run profilers in a run object.
Run a profiler function.
Predict the probabilities of x.
Predict log probabily for x.
Fit the model to a set of data.
Count the number of words in the analyzed documents.
Sort a vocabulary by features.
Limit features to a specified number of documents.
Fit the model to the given z.
Transform a Z matrix by applying the analyzer to the vocab.
Return a scikit - scaler representation of the distribution.
Fit a spark model to a dataset.
Provide spark prediction for each element of x.
Fit the spark linear regression to z.
Fit the model to the given z.
Fit the transform to z and transform z.
Return the score of z.
Score an estimator using a scorer function.
Fit the clustering model to the given data.
Predicts x using the MLlib model.
Predict the value of x using the spark predict function.
Check that the expected dtype is in the expected dtype.
Fit the SVD to the given z.
Apply transform to z.
Generate a block collection of data from an iterator.
Yield a tuple of dtypes that are blocked by the given iterator.
Create a block of data from an rdd.
Apply a function to the RDD and return a new RDD.
The shape of the first row of the RDD.
Return the RDD as a numpy array.
bitperm | bitpos | perm | pos
Return True if the path is a root write.
Check the config file and print it.
Read the config file and update the config object.
Run a command in a shell.
Execute a command and return stdout and stderr.
Execute a command over SSH.
Validate the config.
Returns the headers for this request.
Returns the URL for this assistant.
Get the URL for this event.
Convert a Packet to a text string.
Print packet discovery information.
Discover devices.
Execute the command.
Send confirmation message.
Push a device to the queue.
Execute a device.
Run the scan.
Find the path to a ledger file.
Compatibility test for compatibility.
Calculate text measurer from JSON file.
Generate the supported characters for the given path.
Generate a generator that encodes characters using the specified encodings.
Calculate character to length mapping.
Writes a deja vu sans to a JSON file.
Convolve a 2D image with a 2D Gaussian kernel.
Get Gaussian kernel.
Convert an image to grayscale.
NAME ssim. py
Compute the SIM value of a target.
Compute the ssim of image1 and image2 using a gaussian kernel.
Destroys the container.
Set the current code version.
Get the status of this node.
Prints the current status of the service.
Return the node with the given connection.
Try to bind to this transport if not yet ready.
Called when a new incoming connection is received.
utility callback for utility functions.
Returns True if the given node should be connect to this port.
Connect to a node if necessary.
Called when an outgoing connection is established.
Called when an outgoing message is received.
Called when a connection has been disconnected.
Add a node to the network.
Drop a node from the pool.
Send a message to a node.
Adds the specified item to the end of the list.
Put an item into the heap.
Return the last element of the heap or default if there is none.
Try to acquire a lock.
Returns True if lock is acquired False otherwise.
Release a lock.
Set the number of hosts to use.
Create a list of indexes.
Migrate all aggregate indexes to the latest version.
Strip metadata from a report.
Save aggregate reports to kafka.
Extract xml from a string or file object.
Parse an aggregate report file.
Convert a list of forensic reports to a CSV file.
Parse a report file or file - like object.
Get the capabilities of a server.
Save forensic reports to splunk.
Decode base64 encoded data.
Get the reverse dns for the given ip address.
Convert human timestamp to datetime.
Get information about an IP address.
Convert outlook message to outlook format.
Convert a string to a list of strings.
Parse a file.
Drain all subs of this connection.
Publish payload to subject.
Publish a request.
Publish a message.
Subscribe to a subject and return its sid.
Unsubscribe from the given ssid.
Send a ping to the socket and wait for it to finish.
Select next server from pool.
Process an error message.
Process an error.
Connect to the server.
Process a pong.
Process a message.
Process the info dict.
Flush all pending data to the writer.
Read from the connection loop.
Load features from numpy array.
Load features from images.
Pearson correlation.
Return the dot product of the given images.
Select features based on feature selection.
Get the order of features in a dataset.
Classify x y using clf method.
Fit the model to the given x y coordinates.
Set class weight.
Fit cross val to x y.
Fit the classifier to a dataset.
Get random voxels.
Get the top n words for each topic.
Pearson distance between x and y
Compute the FDR of a vector p.
Load activations from CSV file.
Create an image table.
Returns a list of feature names.
Get feature counts.
Load a dataset from a pickle file.
Save the feature table to a pickle file.
Returns a list of the ordered names of the features.
Returns a list of features that match the search string.
Get ids by expression.
Convert the SDF to a sparse csr matrix
Transform a matrix using the inverse of the matrix mat.
Convert xyz coordinates to mat coordinates.
Apply a transformation to a foci.
Get the mask for the given layers.
Load images from filenames using masker.
Save image data to filename.
Set logging level.
Parse an address.
Convert a dict to an object.
Get a specific ticker price.
Get bulk news for a file.
Make a request and return the response.
Get bearer information.
Make a request to the API.
Get tracks for a given spotify id.
artist artist by spotify id
Get a list of artists for a spotify id.
artist top tracks for a given spotify id and country
Get a list of artists related to a spotify.
Get artists for a list of spotify ids.
Get information about a category.
Get a list of playlists for a category.
Get a list of categories.
Get featured playlists.
Create new releases for your account.
Get the list of artists or users following the specified artists or users.
Get albums for this artist.
Get all albums for this artist.
Get the total number of albums for this artist.
Get currently playing track.
Get the current player.
Get available devices.
Return recently played tracks.
Replace tracks in a playlist.
Create a new playlist.
Get a list of all playlists for this object.
Get tracks for this artist.
Get all tracks for this artist.
Return the OAuth2 URL for the given redirect URI.
Get a single album.
Get artist by spotify id.
Get track by spotify id.
Get user by spotify id.
Get a list of albums by their ids.
Get artists by their ids.
Convert string to id.
Create a client object from a client object.
Generate a URL for a client.
Return a dict of attributes for this request.
Return a string representation of the parameters.
Build the playlist.
Get all tracks for this playlist.
Transfer a device to a player.
Create an instance of this class from the given href.
Get the record for this subdomain.
Shorten data to a month.
Update the code urls for all files in the current directory.
Check if the current version is greater than the current version.
Check if this is a dev version.
Returns true if the current version is older than the current version
Backup the configuration.
Restore the backup file if it exists.
Return True if line is not to ignore.
Process options and return a list of booleans.
Extract base url from element.
Return decoded data from to format.
Return the status code of the request.
Get the http code for this request.
Check syntax of a domain.
Check if a domain is a subdomain.
Check if an IP address is valid.
Check if the given IP address is a valid IP range.
Check if a URL is valid.
Load configuration from current directory.
Prints a random string if it is not already safe.
Download an entry management url.
Download the entry management url if it exists.
Print the header of the function.
This function is called when a file decision occurs.
Print the domain of the file.
Print url to test or last url.
Print logo.
Format a domain into a string.
Extract domain from a file.
Returns a list of domains to test.
Returns a list of URLs for the file.
Get the expiration date of the function.
Handle the catched code.
Get the structure from the API.
Create a directory.
Delete all files that are not in the structure.
Set the path to a configuration file.
Install the production config.
Install iana configuration.
Install the psl configuration.
Install a directory structure file.
Merge configuration values from upstream to configuration.
Load configuration from the environment.
Split a version string into digits and non digits.
Check if local and upstream versions are within the range of upstream.
Check if a cloned file or directory is cloned.
Handle non existant index.
The directory of the output of analytic host.
Return unified unified file format.
Prints the status of the domain.
Return True if the file is not inactive or inactive.
Add extensions to the database.
Load the JSON file from the destination.
Return a standard regex for the given element.
Load the IANA database.
Looks for an IANA record with the given extension and returns the reference to it.
Returns a generator that yields matched extensions and referer.
Update the iana database.
Return a list of urls that are valid for this request.
Retrieve the configuration from the file.
Backup the backup file.
Add a list of elements to the list.
Remove this function from the configuration.
Return a list of mined functions.
Process the configuration.
Get the content of a file.
Write content to file.
Whois record.
Write expiration date to output directory.
referer not found
Write header before header.
Create a header from data to print.
Create a dictionary of the given size.
Returns the size of the given header as a list.
Colorize data according to template.
Prints the data to the output as JSON.
Prints the data to stdout.
Calculate the time difference between start and end.
Format the execution time as a string.
Returns a list of files to delete.
Returns a list of databases to delete.
Delete all databases in the current directory.
Return a hash of the content of the file
Return a hash of the data.
Get the hash of the file or data.
Execute the command and return the result.
Remove a key from the dictionnary
Rename a key in the main dictionnary
Merge the main dictionnary into the main dictionnary
Write the main dictionnary to a JSON file.
Export the flow to a YAML file.
Recursively fix the path in the directory.
Write data to file if overwrite is True.
Read funilrys from the file.
Format the main list as a sorted list.
Merges the main list into the main list.
Returns a list of items that are not matching the regular expression.
Return a list of strings that match the pattern.
Returns a string with all occurences replaced with the regular expression.
Count the number of items in the queue.
Calculate the percentages of the functions.
Check if the given URL is valid.
Check if the given domain is valid.
Test if this element is a subdomain.
Get the status of the function.
Reformat the historical formating error.
Retrieve the current configuration from the database.
Backup the inactive database.
Return the timestamp of the database.
Return the content of the function.
Return True if the function is present in the configuration.
Retrieve the access token from the whois database.
Backup the whois database.
Check if the authorization is in the database.
Check if the current authorization is older than the current time.
Get the expiration date for this authorization.
Manage travis permissions.
Runs the travis command.
Lookup namespaces.
Send a whois request and return the response.
Get the url for the service.
Get the referer for this domain extension.
Get the current object for this attribute.
Return a list of all standard library paths.
Return a generator of standard package names.
Yield unused lines from messages.
Yield unused import messages.
Generator that yields line number messages from pyflakes. messages. import star used.
Generator that yields undefined name and undefined module name messages.
Yield unused variable line numbers from messages.
Duplicate key line numbers in a message.
Check if source is a valid python source.
Extract package name from line.
Check if a line is a multiline statement.
Return True if line ends with a multiline statement.
Remove unused imports from a line.
Break up an import line.
Get messages from a list of messages.
Remove undefined names from a line.
Remove duplicate keys from a line.
Return True if the line contains the given key.
Check if value is a literal or name.
Yield useless pass line numbers.
Filter useless pass lines.
Get indentation from a line.
Get the ending of a line.
Remove unused imports and duplicate keys from a source string.
Split a comma separated string into a set of strings.
Check if a file is a python file.
Check if a file is excluded from the exclude list.
Read lease data from input stream.
Write the lease response to a stream.
Write the cancel request to a stream.
Read the cancel response from the specified input stream.
Create a new name.
Reads the digest and key format from the input stream.
Write the metadata to the given stream.
Read application information from the specified istream.
Write the application specific information to the specified stream.
Create application specific information.
Read derivation parameters from input stream.
Write the derivation parameters to a file.
Read metadata from input stream.
Write the request payload to the specified output stream.
Read from input stream.
Write the metadata to a stream.
Write signature verify request payload to output stream.
Read signature from input stream.
Build an error response.
Process a template attribute.
Get attributes from managed object.
Set attributes on managed object.
Set attribute on managed object.
Check if an operation is allowed for a given policy.
Writes the encrypted request to the specified output stream.
Create a certificate or private key.
Set a setting.
Load settings from a file.
Process a bind parameter.
Process the result value and return a list of cryptographic usage masks
Read the primitive value from the input stream.
Write the KMS value to the specified stream.
Validate that the value is valid.
Read the primitive value from the input stream.
Write the hexadecimal representation of this MIP to the specified stream.
Validate that the value is a valid integer.
Validates that the value is valid.
Read the value from the input stream.
Write the value to an OStream.
Write the metadata to the specified stream.
Validate that the value is a bool.
Read an interval from the given istream.
Validate that the value is valid.
Validate that the value is a valid cryptographic format.
Validate that the value is a valid cryptographic usage mask
Validate that the field is valid.
Convert attribute name to tag.
Convert an attribute tag to a name.
Get bit mask from enumerations.
Get enumerations from bit mask.
Check if an enumeration is a bit mask.
Writes the given buffer to the specified output buffer.
Read the key pair from the input buffer.
Write the key pair response to the specified output buffer.
Read the unique identifier from the input buffer.
Write the attribute list to the specified output buffer.
Write the attribute list response to the specified output buffer.
Get a list of all json files in a directory.
Start the monitoring loop.
Get a certificate from a connection.
Get extended key usage from certificate.
Get common names from certificate.
Get client identity from certificate.
Read a KIP tag from the input buffer.
Write the request payload to the specified output buffer.
Read a KIP tag from the input buffer.
Write the message to the output buffer.
Convert an object to a string.
Reads the encrypted message from the specified input stream.
Writes the data to the specified output buffer.
Returns true if the specified attribute is supported by the specified rule set.
Returns true if the given attribute is deprecated.
Check if an attribute applies to an object type.
Returns True if the given attribute is a multi - valued attribute.
Read metadata from input stream.
Write the metadata to a stream.
Read attributes from input buffer.
Write the attribute reference to the specified buffer.
Read attributes from input stream.
Write the attributes to a stream.
Read the nonce from the input stream.
Write the nonce to the specified output stream.
Read username password credential from input stream.
Write the credentials to a stream.
Write the credential to a stream.
Read credential from input stream.
Write the credential to a stream.
Read MAC from input stream.
Write the mac to a stream.
Write the key wrapping data to the specified output stream.
Read the key wrapping specification from the input stream.
Write the key wrapping specification to a stream.
Read the extension information from the given istream.
Write the extension information to the given stream.
Read revocation message from istream.
Write the revocation code and message to the given stream.
Validate the revocation code and revocation reason code.
Reads attributes attributes attributes attributes and attributes from the input buffer.
Write the metadata to the specified buffer.
Write the data to a file.
Read the server uri server uri and server port from input buffer.
Write the profile information to the specified buffer.
Writes the specified buffer to the specified output buffer.
Stop the current thread and wait for it to finish.
Write the request payload to the specified output buffer.
Read a locate response from the input buffer.
Writes the contents of the locate response to a buffer.
Create a private key from a PEM - encoded string.
Read the signature from the input stream.
Write the signature to a stream.
Read usage allocation from input stream.
Convert protocol version to kmip version.
Read metadata from input stream.
Write the metadata to a stream.
Read credentials from input stream.
Write credentials to a stream.
Read from input stream.
Reads the certificate from the specified stream.
Write the certificate to the specified stream.
Read the unique identifier from the input stream.
Write the KMS archive to a stream.
Run the main loop.
Read a rekey response from the specified stream.
Returns True if this profile is supported by the given conformance clause and authentication suite.
Get attributes of a node.
Get attribute list.
Execute a query and return the results.
Opens the connection to the server.
Close the connection to the proxy.
Register a managed object.
Get attributes from KMS.
Activate a KMIP.
Build cryptographic parameters from a dictionary.
Builds the encryption key information for the given value.
Build a mac signature key from a value.
Build a cobjects. key wrapping specification from a dictionary.
Builds a list of common attributes for the given operation policy.
Build a name attribute.
Read a kmip from the input buffer.
Write the request payload to the output buffer.
Read attributes from input buffer.
Write the attributes to the output buffer.
Get a single entry point for a single entry point.
Get all named eps for a group.
Return a list of all entry points for a given distro group.
Load the object from the module.
Create an instance from an entry point string.
Generate a controller file.
Rewrite src file to dst file.
Check if the URL is valid and if so update the field. data.
Encode something into a string.
Decode a string to a Python object.
Join a site domain and a relative url for the given endpoint.
Signin a user.
Get current user.
Create flask app.
Write a dataframe to a CSV file.
Read a dataframe from a CSV file.
Serialize dataframe to writer.
Deserialize a dataframe into a dataframe.
URL for the contents of the file.
Open the intermediate dataset.
Read intermediate dataset contents as binary.
Read intermediate dataset contents as text.
Deserialize this object into a dataframe.
Get intermediate dataset for a node.
Get experiments for a workspace.
Get all the datasets in a workspace.
Get a specific dataset.
Find the names of all globals in the given code.
Return a copy of the pen.
Given a color string return r g b a color tuple.
Draw the bounding box.
Solve a cubic Bezier curve with extrema.
Solve a cubic Bezier curve with a cubic Bezier curve.
Build a list of choices for this site.
Initialize the cache.
Empty the cache.
Get the value of the specified key from the cache.
Update an entry s value with the given value.
Set an entry in the cache.
Initialize the cache and the current page context.
Resolve a tree i18n alias.
Check if current app is admin
Calculate the depth of an item in a tree.
Get the current item for the given tree alias.
Return the URL for the given sitetree item.
Initialize a site tree.
Get the value of an attribute from a site tree.
Get the ancestor level of the current item.
Check if the user is allowed to access the item.
Create a tree from a site tree.
Returns the rendered HTML for the children of the given item.
Get the children of an item.
Updates the tree item has children.
Filter items by navigation type.
Get the ancestor of the given item.
Recursively climbs the tree for the given tree alias.
Resolve a variable.
Return a sitetree for the given token.
Return a sitetree with all the children of the given token.
Breadcrumbs for a site tree.
Renders the given tree using the given template.
Create a template object for the given tag.
Get model url name.
Reregister model tree admin.
Redirects to the specified path with the specified shift.
Redirects the request to the given response.
Redirects the user to the specified post.
Redirects the user to the right page.
Returns a tree item choice field.
Get a tree by id.
Move an item to a specific direction.
Saves the object to the tree.
Add or delete urls for tree admin.
Dump view to response.
Import a module from an app.
Get the model class for the given settings entry.
Create a configuration object from a mapping.
Load a module from a pyfile.
Create a new instance from a TOML file.
Create a new instance from an object.
Create http headers for a new span.
Get the current context of the current span.
Start the tracer.
Stop the zipkin service.
Add binary annotations to the logging context.
Add a sa binary annotation to the client.
Overrides the name of the span.
Create a copy of an endpoint with a new service name.
Build a v1 span.
Encode a list of spans into a string.
Create a protobuf span from a span.
Convert a hex id to bytes.
Get the protobuf kind for the given kind.
Convert a zipkin endpoint to a zipkin endpoint.
Convert a dictionary of annotations to a list of tuples.
Create an annotation for the given timestamp and value.
Create a binary annotation.
Create a zipkin endpoint.
Copy an endpoint to a new service.
Create a list of annotations for the given host.
Create a list of binary annotations.
Create a new span.
Convert a Thrift span to a byte string.
Encodes a list of thrift objects into a byte string.
Detect span version and encoding.
Convert a list of spans to a string.
Push attributes to a zipkin thread.
Encode a v2 span into a thrift span.
Create a JSON endpoint.
Encodes a span into a protobuf string.
Decode a list of spans into a list of spans.
Convert a Thrift endpoint to a Thrift endpoint.
Decode thrift annotations.
Convert Thrift binary annotations to local endpoint and remote endpoint.
Decodes a Thrift span into a Span object.
Convert a trace id to a string.
Convert unsigned long to lower hex.
Write a long value to the stream.
Fixup pre processor.
Set the transaction code for the given tag in the given dict.
Set the iph id for the given tag in the given dict.
Set the tnr of the given tag in the given dict.
Join lines of a string with the given strip.
Return json or text from response.
Limits the duration of the duration to until seconds.
Get bot information.
Get bots.
Read a term from the stream.
Write a message to the stream.
Decode a string and return the decoded term and unused data.
Encode a term into a string.
Add a source address to the multicast socket.
Send pending messages from the queue.
Set the remote service hello callback.
Stop the server.
Clear all local services.
Search for services.
Create a soap message.
Discover logging levels.
Get the tagged item manager.
Get all child relations of a model.
Get all child m2m relations for a model.
Save the clusterable model to the database.
Validate unique fields.
Check if any of the formsets have changed.
Return address with valid checksum.
Generate a checksum for the current address.
Prompt the user for a seed.
Get a key from the cache.
Get the key for the given address.
Create an iterator for the seed generator.
Create a sponge from the seed and index.
Evolve a set of trits into the state.
Squeeze a list of trits into a single state.
Transforms the truth table into a new state.
Add two trits into a single list.
Convert an integer into a list of trits.
Add two trits into a single string.
Return the full add of two trits.
Output a seed string.
Find transactions in a bundle.
Promote a transaction.
Resolve a URI to a base adapter.
Send a request to this class.
Log a message at the specified level.
Send an HTTP request and return the response.
Interpret the response.
Add a digest to the message.
Get a multisig address.
Create an iterator for the security level.
Create an address from a digest.
Generate an address for the given key.
Find all transactions in the specified adapter.
Iterate over all used addresses.
Get bundles from transaction hashes.
Check the codec for the given encoding.
Get codec information.
Encodes the input into a binary type and the length of the input.
Decode a binary string.
Find multiple addresses in a seed.
Add a route for a command.
Create a Message from a tryte string.
Return the message as JSON compatible format.
Return the signature validation trytes.
Set the is confirmed flag of all txns in the database.
Returns a list of all messages in the transaction.
Return a list of transactions grouped by address.
Discover all commands in a package.
Executes the specified command.
Apply a filter to a value.
Returns the URL for the given job id.
Return a list of errors that can be passed to the validator.
Returns True if the validator is valid False otherwise.
Create a validator for the bundle.
Get bundle signature errors.
Get group s signature error message.
Traverses a transaction and returns a list of transactions.
Start the repl.
Generate a random string.
Get the digest of the key.
Sign input transactions.
Print a pretty representation of the object.
Accumulate a set of trits.
Add context to exc.
Return security level as a string.
Increment the legacy tag.
Return the tag of the transaction.
Add a transaction to the chain.
Finalize the transaction.
Sign inputs at the given key generator.
Create input transactions for addy.
Convert a value to a standard unit.
Decompress g1 compressed.
Inverse of prime field a.
Create an instance from a JSON file.
Split a description into parts.
Return a list of all categories in the dictionary.
Generate a random colour.
Create a builtin timescale from a string.
Create a list of decorations from an image.
Return a string representation of the table as a CSV string.
Returns the maximum width of all rows in the list.
Get the decoration of a component.
Plots the list in the specified format.
Decorator to mark a component as rock.
Process a row of text.
Parse a canstrat string into a dictionary.
Unique uniqueness of all items in the list.
Generate a list of intervals from a list of tops.
Clean longitudinal data.
Read a Pandas - like object from a petrel file.
Load intervals from canstrat file.
Return a copy of the log.
Export the list to a CSV file.
Return a Las3 section as a string.
Finds the incongruities that overlap the given index.
Find the gaps in the sequence.
Prune the strip.
Anneal all the gaps in this strip.
Fill this component with gaps.
Return the union of this striplog and other.
Return the intersection of self and other.
Merge overlapping segments.
Invert all items in this list.
Crop the list to the specified extent.
Return the quality of the given tests.
Returns the value of a field in a custom formatter
Get a list of jobs.
Parses the given hcl into a JSON object.
Update a token
Get a list of allocations.
Fail a deployment.
Pause a deployment.
Drain a node.
Drain a node.
Check if a node is eligible to be eligible.
List files.
Stream data from a stream.
Stat a file.
Join an agent with a list of addresses.
Update servers.
Force leave a node.
Get nodes by prefix.
Get evaluations for a given prefix.
Get a list of namespaces.
Register a job.
plan a job
Dispatch a job.
Revert a job.
Run a stable job.
Deregister a job.
Get configuration.
Delete a peer.
Get a list of deployments.
Get a random mutator.
Get a mutator for the given object.
Get a random polyglot attack string.
Return a unicode string from a buffer.
Return a custom html file.
A context manager for serving the JSON response.
Spawn a subprocess.
Get the output of the process.
Finish the read thread and wait for it to finish.
Closes the process.
Start the worker.
Execute a command and return the output.
Build a random string.
Build a string representation of the grams.
Return a string representation of the query.
Build a random value.
Build the gram.
Build the definition of the fuzzer.
Build a gram from scratch.
Shut down the server and wait for it to finish.
Run the process and monitor the process.
Start the monitor process.
Generate a random float between a and b.
fuzzed version of urllib. parse
Returns the fuzzed version of the object.
Signal handler for SIGTERM.
quit command.
Pause a running process.
Resume paused or waiting.
Stop a running process.
Restart a running process.
Returns a list of skype events.
Set the mood of the user.
Set the avatar for this user.
Get meta data for a given url.
Retrieve a contact by id.
Retrieve a user by id.
Returns a list of all bots.
Get a bot by id.
Search the skype database.
Returns a list of skype requests.
Create an instance from raw data.
Merge attributes from another object into this one.
Merge an object into the cache.
Read the token file and store it in self. tokens
Write the token to the token file.
Verify the validity of a token.
Refresh the skype token.
Get user id
Get a skype registration token.
Synchronize endpoints with skype.
Check if a user is in skype
Send a token and return the token.
Configure the skype server.
Send ping to skype.
Get a list of recent chats.
Create a chat with the given id.
Create a new member in skype.
Given a url return the user s id.
Return the chat id for the given url.
Convert text to unicode.
Detect the format of the given text.
Parse text and return metadata and content.
Return a copy of the object as a dictionary.
Load yaml from file fm.
Export YAML metadata to a unicode string.
Export metadata to a unicode string.
Match the string against the pattern.
Return a list of items that match this string.
Return a list of sublists that match the pattern.
Convert a newstart string to a newstart string.
Returns a list of argument tuples representing the arguments of this function.
Returns a list of wiki lists matching the given pattern.
plant trie from a list of strings.
Given a trie and a dictionary of trie return a pattern that matches the trie.
Return start and stop indices for the given key.
Insert string at index.
Return the atomic partition of a character.
Returns a list of spans of the specified type.
Shrink the spans by rmstart and rmstop.
Inserts a new span at the specified index.
The number of nesting levels.
Shadow the string.
Return the shadow of the shadowed ext link.
Returns a dict of type - > list of spans.
Pretty print the object.
Returns a list of parameter values for this parameter list.
Returns a list of parser functions.
Returns a list of template strings for each template in the list.
Return a list of wikilinks.
Return a list of comments for this node.
Returns a list of external links.
Return a list of tables.
Iterate over spans of the given type.
Return a list of ancestors of this parser.
Return the parent of this node of the given type.
Return the mode of a list.
Get the argument with the given name and list of arguments.
Remove the first argument from the list of arguments.
Get the argument with the given name.
Returns true if there is an argument with the given name and value.
Delete the argument with the given name.
Convert a CRS code to a string.
Find an item by ellipsname.
Create a crs object from a URL.
Parse an epsg code from a file.
Create a CRS object from an epsg code.
Create a CRS object from an ESR code.
Create a Projection object from a CRS code.
Create a CRS object from unknown text.
Write the record to a file - like object.
Read a VLR from a stream.
Parse geo tiff keys from vlrs.
Parse a geotiff file and return a list of geotiff keys.
Get signedness of extra dimensions.
Get the extra dim id for a given extra type.
Create a new point record from another point record.
Copy fields from another record to this record.
Append zeros to the end of the array.
Returns a set of all the names of all dimensions.
Create a new point with zeros.
Create a point from a stream.
Create a point from a compressed buffer.
The x - axis of the dimension.
Dimension of the y - axis.
The z - axis of the mesh.
Add an extra dim to the data.
Write the data to a file - like object.
Write this file to a file.
Convert a point format to a dictionary of dtypes.
Build the unpacked dtypes for a point format.
Convert a numpy dtype to a point format.
Find the minimum file version for a point format.
Return True if the given format id is compatible with the given version.
Extract a vlr of the specified type.
Read a vlr list from a stream.
Check if the files have the same point format id.
Check if the files have the same dtype.
Raises a pylas error if the file signature of the stream does not match the signature of
Read a header from the stream.
Read vlrs from the stream.
Read points from the stream.
Read compressed points from the stream.
Read internal waveform packet.
Read evlrs from the stream.
Log a warning if the expected position is not at the expected position.
Create a las data object from a header.
Merge multiple las into one.
Write a las file and then read again again.
Returns a datetime. date object representing the date of the object.
Set creation year creation day of year.
The minimum of the points in the mesh.
Set x y z min value
The maximum of the points in the mesh.
Set the maximum value of the bounding box.
The x y z scales of the mesh.
The x y z offsets of the mesh.
Read the version number from the specified stream.
Convert a header from old header to new header.
Unpack an array from a mask.
Given a point format and a point fmt out return a list of the dimensions that have not been
Returns a dict of all sub - fields of this dimension.
Return the number of extra bytes in this array.
Return True if this dimension has waveform packet.
Entry point for the demo script.
Calculate the CRC of a command.
Print hex representation of data.
Verify the checksum of the response and return it.
Return a list of set bits from a list of bytes.
Generate a query string.
Demonstrate a host and port.
Connect to the server.
Start monitoring the server.
disarm a device.
Clear alarm.
Set the output of a command.
Keep the connection alive.
Monitor the status of the device.
Close the connection and close the writer.
Purge database for this user.
Guess the type of a file or directory.
Get the file id for the given path.
Get a notebook from the database
Create a notebook model from a notebook record.
Get a directory.
Convert a list of file records into a list of notebooks.
Create a directory model from a record.
Create a file model from a record.
Save a notebook to the database.
Save a file to the database.
Rename a file or directory.
Delete a file or directory.
Ensure a user exists in the database.
Remove a user from the database.
Create a directory in the database.
Check if a user is in a directory.
Delete a directory from the database.
Check if a directory exists.
Return a list of files in a directory.
Returns a list of dicts of all directories in the specified directory.
Returns True if the given api path matches the given user id and api path.
Returns a query to retrieve files for a given user.
Return a list of file default fields.
Get a file from the database.
Get a file.
Get a file by file id
Check if a file exists.
Rename a directory in the database.
Save a file to the database.
Purge all checkpoints for the specified user.
Reencrypt row content.
Reencrypt user content.
Derive a single fernet key from a password and user id.
Get the name of a column.
Convert a row to a dict with no content.
Return a dict with the content of a row.
Create a checkpoint for a notebook and save it to the database.
Create a file checkpoint and save it to the database.
Delete a checkpoint.
Get the content of a checkpoint
List all checkpoints for the specified path.
Rename all checkpoints in the database.
Delete all checkpoints at the specified path.
Purge the database.
Resolve a path to a mgr and path.
Apply a prefix to a model.
Called when managers have changed.
Get a file or directory.
Normalize an api path.
Split a path into a directory name and name.
Encode nb as base64 and return it.
Reads a base64 - encoded string.
Decode a base64 encoded string from a base64 encoded string.
Decode a base64 - encoded file and return content real format mimetype mimetype and mimetype.
Return a list of all the directories in the given path.
Create a user in postgres.
Split a list of models into dirs and files.
Recursively walk a set of directories.
Iterate over all files in a directory.
Yield all files in a directory.
Reencrypt a single user.
Unencrypt all users using a crypto factory.
Unencrypt a single user.
Temporarily generate alembic ini file.
Upgrade alembic ini to a revision.
Sanitize a block.
Queue an instance of the specified type of embed.
Load instances for embed type.
Insert an instance into the block.
Load data from the embeds.
Validate data.
Renders the admin view.
Convert this object to a JSON string.
Hide all authenticated fields from the model.
Exclude fields from the query string.
Override get method to add version and preview id to kwargs.
Returns a queryset of the published articles.
Get the queryset for this request.
Returns the boolean value of the field s attribute.
Validate a widget.
Validate a zone.
Check if a UUID is valid.
Get the permissions string for this user.
Modify the permissions of a group.
Validate author data.
Save the validated data to the zone model.
Returns a dictionary with the field names and their values.
Prepare data to be sent to the client.
Render the template with the given data.
Get the settings for this model.
List pages.
Get integration settings.
Update integration settings.
Sign up a user.
Maps the contents of a tagname to a string.
Render a zone widget.
Save the featured image.
Save a subsection to the database.
Get the extension of the image.
Return the media url for this media object.
Saves the current image to disk.
Saves a thumbnail to the storage.
Return a mysql connection object.
Get a bandwidth limited stream from a fileobj.
Read amount of bytes from the file object.
Consume an amt.
Process a scheduled consumption.
Returns the projected rate for the given amt and time at consumption.
Record the current consumption rate.
Poll for the result of a transfer.
Returns a list of callbacks for the given transfer.
Returns a copy of original dict with only the keys in whitelisted keys filtered by whitelisted keys
Decrement the count by num.
Finalize the queue.
Check if filename is a special file.
Acquire a semaphore.
Release a semaphore.
Adjust the chunksize for the given file size.
Submit a task to transfer data to a file.
Return the appropriate download manager for the given transfer.
Write data to fileobj.
Request a number of writes at the specified offset.
Return True if the file object is seekable or not.
Shut down the server.
Cancel all tracked transfer coordinators.
Wait for all tracked transfer coordinators to finish.
Wrap data into a file - like object.
Returns the appropriate upload input manager for the given transfer.
Set the exception for this transfer.
Set the result of the job.
Set the exception to be raised.
Return the result of the job.
Cancel the announce.
Submit a task to the transfer.
Add a callback to be called when the container is done.
Add a cleanup function to the cleanup pool.
Announce the done status.
Upload a file to a bucket.
Download a file to a bucket.
Step decorator.
Refactor a step by moving the old text to the new text.
Decorator to convert the value of a function call to a python value.
Refactor a step by moving the old text to the new text.
Update an existing membership.
Delete a membership.
Get catfact information.
Post a message to a room.
Delete a membership.
Validate a base url.
Check if a string is a web url.
Open a local file and return the encodable content.
Check that o is of acceptable types.
Create a dict from a list of dictionaries.
Check the response code against the expected response code.
Convert json data to a dict.
Convert a date string to a webex teams date object.
Create a new team.
Update a room.
Delete a room.
List all objects in an organization.
The created date of the game.
Get an access token from environment variables.
Update a webhook.
Delete a webhook.
Set the wait on rate limit.
Update the request headers with the given headers.
Return the absolute URL of the given url.
Make a GET request and parse the response.
Yield pages from a given URL.
Make an HTTP PUT request.
Deletes the specified URL.
Create a new session.
Delete a message.
Get a person by id.
Delete a person.
Get the object from the API.
List items.
Create a new object in MAAS.
Update a team.
delete team by team id
Serializes the given data into a tuple.
Get the last activity for this team.
Post events to a room.
Get the ngrok public url.
Delete webhooks with the given name.
Create a webhook for a ngrok public url.
NAME ngrok. py
Read telegrams from the serial port.
Read telegrams from the specified queue.
Create a dsmr protocol.
Create a dsmr connection.
Create a tcp dsmr connection
Process received data.
Called when the connection is lost.
Parse the telegram and call the callback
Parse telegram data.
Get the version of a file.
Ensures that the given list of specs matches the current Python version. Raises syntax error if
Find all packages with the given top directory.
Run a command and return the result.
Get data files from a dictionary of data specs.
Get package data.
Compile a regular expression pattern.
Return an iterator over all paths in a given path.
Translate a glob pattern to a string.
Join a list of translated parts into a single string.
Translate a glob pattern into a string.
Truncate the given table.
Write a table to the database.
Write indexes to a table.
Write the triggers to the given table.
Write constraints to the given table.
Write the contents of the given table to the given reader.
Write the indexes for the given table to the file.
Write constraints to file.
Write the triggers table to the file.
Return the number of items in the queue.
Enqueue data to the table.
Start a new task handler.
Build the extra predicate string for the given extra predicate.
Simplejson datetime serializer.
Reconnect to the mysql database.
Execute a query and return the first row of the result set.
Get a connection to the database.
Run the benchmark.
Connect to the database.
Looks for the given errno in the globals and prints the results.
Returns the total size of all connections and fairies.
Handle a potential connection failure.
Create a simple expression for the given fields.
Update a table s set and params.
Establish a connection to the database.
Destroy all tables in the database.
Start a new step.
Stop a step and save it to disk.
Load a list of steps from raw data.
Disconnect from the socket.
Reconnect to the socket.
Connect to the websocket.
Process a websocket message.
Stop all timers.
Send ping to the socket.
Check if pong is received.
Send a request to the websocket.
Unpause the stream.
system handler.
Handle error messages.
Handle data received from client.
Resubscribe the channel.
Handle authentication.
Handle the conf event.
Update the timestamps for a channel.
Reset the connection to its initial state.
Return candles for a given pair.
Configure bitfinex configuration.
Subscribe to a ticker symbol.
Unsubscribe from a ticker.
Subscribe to order book.
Unsubscribe from order book.
Subscribe to a raw order book.
Unsubscribe from a raw order book.
Subscribe to trades for a given pair.
Unsubscribe from trades.
Subscribe to candles.
Unsubscribe from candles.
Authenticate to the channel.
Cancel an order.
Invoked when a command is received.
Process a paho device command.
Called when a paho message is received.
Create a new device.
Update a device.
Returns a list of the statuses for the given status and connected.
Returns a list of all the objects in the cluster.
Create a new DME
Update a schema definition
Disconnect from the client and stop the loop.
Called when the client connects to the broker.
Log an unsupported message.
Process a device event.
Invoked when a device status is received.
Invoked when a paho message is received from the application.
Get a specific event for a specific device.
Get all events for a specific device.
Make a call to the API.
Initiates the mgmt request.
Get status of a device.
Closes the handle and destroys the handle.
Get the bounds of the specified coordinate.
Load a byte array from the page.
Check if the result is equal to the number returned by the function.
Loads the application.
Serve gunicorn.
Convert the given value to a native image field.
Process an image and save it to a file.
Process an image and save it to disk.
Process an image and save it to disk.
Convert the given data to a Python string.
Process a placeholder image.
Add the ppoi field to the model instance.
Update the ppoi field of the instance.
Add sized image centerpoint click django admin field.
Convert the value to a string.
Auto - discover all available settings.
Unregister sizer attribute.
Unregister a filter from the registry.
Return the URL for this image.
Build filters and sizers for this image.
Return the full path to the root folder of this imagefield.
Return the sized root folder of this imagefield.
Return the full path to the sized root folder.
Delete matching files from storage.
Preprocess a GIF image.
Preprocess a jpeg image.
Retrieve an image from the storage.
Save an image to a file.
Return the ppoi as a string.
Create a resized image.
Render the input with the given renderer.
Create a context dictionary for the clearable file input.
Build attributes from base attrs and extra attrs.
Returns the path to the resized image.
Get the path to a file that matches the given path.
Validate versatileimagefield sizekey list.
Get url from image key.
Returns the rendition key set for the given rendition key.
Format an instruction.
Format a function body.
Decode a bytecode into a sequence of instructions.
Decode a module into a list of fragmented fragments.
Connect to the server.
Read the response from the reader and return it as a string.
Parse an agi code line and return the code.
Check agi code.
Reset all instances to their default values.
Returns a list of instances for this instance.
Get the metadata for a given path.
Returns a list of primary keys for a model.
Deserialize a value into a related model.
Get an existing instance from the database.
Get declared fields for a schema.
Load data from the database.
Split model kwargs into kwargs and association attributes.
List snapshots.
Restore a snapshot from the database.
Set the indexes to the end of the epoch.
Preprocess text using textacy cleaner.
Apply a function to data in parallel.
Process text.
Process a text string and return a list of cores.
Generate statistics for the document length.
Returns a pandas dataframe containing the word counts as a pandas DataFrame.
Map a parameter type to a list of types.
Parse a list of interfaces into a dictionary.
Return the inverse of the current state.
Rollback a transaction.
Returns a copy of the current instance.
Return a copy of this node.
Returns True if this mapping is equal to the other mapping.
Returns an iterable of tuples where each tuple is the key and the value is the value of
Clears the internal state.
Move the node to the end of the node.
Write text to a temporary file.
Merge args into config.
Load address books.
Create a new contact.
Manage birthdays subcommand.
Returns a list of phone numbers matching the given search terms.
Print a list of vcards.
Modify a vCard subcommand.
Remove a subcommand from a vCard.
Create a source file from a vCard.
Merge a vCard list into a target vCard list.
Get the action with the given alias.
Create a new contact.
Create a private object from a file.
Create a contact object from a user input.
Create a contact object from an existing contact object.
Get the names of the specified part of the vCard.
Add a category to the vCard.
Parse a type value into standard types custom types pref.
Convert a list of strings to a string.
Convert a string to a datetime object.
Compare uid1 and uid2 for equality.
Search for all contacts matching the given query.
Search for contact names matching the given query.
Search for contacts with the given query.
Search the database for the given query.
Returns a dictionary of the short uids.
Returns the short uid for the given uid.
Find all vCard files that match the specified search.
Load vCards from a file.
Returns the abook with the given name or None if no such abook exists.
Return a dict of available archs.
Return a dict of all available archs.
Guess the correct value for the given keyword arguments.
Returns a new Query object with the results replaced with the new values.
Returns the first matching object or none if no match was found.
Delete all rows from the database.
Redis prefix lua function
Estimate the value of a Lua script.
Count the number of items in the specified filters.
Connect to an object.
Return the full text of a string or list of strings.
Add an object to the database.
Get the value of a known or wknown key.
Redis wrapper for the Lua script.
Save changes to the database.
Delete this object.
Get a list of objects by IDs.
Open a SEM file and return its handle.
Send a result back to the queue.
Add a call item to the queue.
Ensures that the executor is running.
Start the server.
Duplicate a file descriptor.
Wait for all pending work items to complete.
Prepares the data to be run.
Close a set of file descriptors.
Recursively terminates the process and waits for it to finish.
Recursively terminate a process.
Return exitcodes for terminated processes.
Format a list of exit codes into a string.
Ensures that the process is running.
Return a processor for the given event.
Split a string into a list of arguments.
Get the stack and line number of a function.
Runs the hooks in the given object and returns True if the hook was successful or False if
forget about the current thread
Return the value of the argument or None if the value is not an integer.
Process all commands.
Add a command to the queue.
Return the next token in a string starting at start pos.
Print an error message.
Read a line from the terminal.
Close the input and output streams.
Disassemble a message.
Count the number of frames in a frame.
Get the name of the call function in a frame.
Print a stack trace of a process.
Lookup a subcmd by prefix.
Add short help to a subcmd.
Add a subcmd to the list of commands.
Run a subcmd with the given arg.
Show a specific category.
Run the command line tool.
Find a frame that is debugged.
Get an integer value from a string or raise syntax error.
Run set bool on obj. errmsg
Set an integer to the specified value.
Run show onoff or show onoff.
Show the status of an object.
Run show val in debugger settings.
Checks if the given line is a def statement.
Check if the given line is a class.
Quit threaded thread.
Set the default bg environment variable.
Return True if r g b is dark rgb.
Return the signature of a frame.
Returns a list of all display strings.
Displays the specified frame.
Read a message from the socket.
Display a debug message.
Run a thread.
Print a simple array.
Look up a signame for the given number.
Lookup the signum function for the given name.
Return a canonic signame for the given name.
Set a signal handler for the specified signal.
Check and adjust all sighandlers if check is true.
Print information about a signal.
Process a command line argument.
Handle a print signal.
Handles the given signum and frame.
Convert a file to a module name.
Search for a file in a list of directories.
If py is a file return it. Otherwise return the script.
Return a list of filenames for all pyfiles in the caller.
Print a message to the output.
Run the program.
Columnize a list of commands.
Close the connection.
Write a message to the socket.
Complete an identifier.
add a string to the queue
Add ignore frames or fns to the filter
Return the filename of a canonic file.
Returns the filename of the main Python file or None if the filename is not specified.
Return True if tracing is started.
Check if the given event is a stop event.
Set the next frame to the given frame.
Print the stack trace of a function.
Deletes a breakpoint.
Delete a breakpoint by its number.
Disable all breakpoints.
Disable a breakpoint by its number.
Deletes all breakpoints for a given file and line number.
Open an input file.
Read a line from the input stream.
Prompt the user for confirmation and return the default value.
Submit a query and return the result as a future.
Restore the original user to the original session.
Load a module from a path and return a boolean indicating whether or not the module can login as
Iterate over all documents in a batch.
Transcode a JSON file to a stream.
Normalize data from a stream to a date format.
Convert a date string to a timestamp.
Detect the encoding of a file.
Yield lines from a JSON file.
Transcode a file to UTF - 8.
Open a CSV file and return the contents of the file.
Read a CSV file and return a generator of dicts.
Entry point for the transcode command.
Save a token to a JSON file.
Make a request to the luminoso API.
Delete a file or directory.
Return the root url of the given url.
Save a token to a JSON file.
Make a JSON request and return it as a string.
POST data to the API.
Return a string representation of the resource.
Make a GET request and return the raw text of the given path.
Print the result as a CSV file.
Read parameters from a JSON file.
Simplify a doc dict.
Create a project with a list of docs.
Uploads documents to a project.
Upload documents from a stream to a luminoso server.
Upload a file to the specified server.
NAME upload_file. py
Create a luminoso token from user creds.
Login to the server.
Post login page.
Fetch hourly daily daily monthly yearly data.
Prepare the view for rendering.
Initialize the view.
Renders the view and renders it.
Called when a message changes.
Update the menus for this page.
Return a list of handlers for this site.
Called when a message is received.
Called when the document is modified.
Create widget for this declaration.
Initialize the widget.
Destroy the widget and its parent widget.
Add a child widget to the widget.
Remove a child widget from this component.
Return all child widgets of this node.
Set the attribute of the widget.
Updates the proxy attribute with the given change
Notify the change about the modified event.
Returns a list of declarations that match the given XPath query.
Initialize widget.
Set the source of the widget.
Change the mode of the block.
Remove a block from the tree.
Change the children of this node.
Read a file and return its contents.
Print an error message and exit.
Print an error message and exit.
Get product by name.
Create a new session.
Reset the cookie store and return the response.
Returns a list of stores for the specified search term.
Set the delivery system for a store.
Get a specific menu for a store.
Add an item to the basket.
Add a pizza to a basket.
Add a side to a basket.
Remove an item from a basket
Set payment method for delivery
Process payment request.
Perform a GET request.
Execute a POST request.
Make a call to the API.
Append an item to the menu.
Add an exit item to the end of the list.
Draw the curses menu.
Process user input.
Selects the current option.
Parse a menu and return a menu object.
Convert string to datetime.
Convert datetime to string.
Basic math operation.
Calculate the cumulative sum of a column in a DataFrame.
Remove old cache entries from the cachedir.
Add an offset to a date object.
Learning updates for the model.
Returns a list of training parameters.
Optimizes the parameters and free parameters.
Get the first glimpse of a sensor.
Prepares the encoder decoder and classifier.
Computes the cost of a tensor.
Apply a function to the train valid test set.
Vectorize the target set.
Report the number of training and validation sets.
Train the model on a train set.
Sample the input by the given number of steps.
Compute the alignments for the given state and precomputed values.
Compute the context vector.
Concatenate a list of neural variables along an axis.
Pads the dataset to the specified length.
Compute the rmsprop for a set of gradients.
Report the elapsed time.
Compute the cost of the given data.
Runs the run method on the data split.
Build loop vars.
Perform a neural variable scan step.
Core function for momentum core.
Return the ifelse instruction for the given branch.
Skip the specified number of batches.
Load parameters from path.
Train the model on the specified train set.
Train the model on the specified epoch.
Run a valid step against a set of valid sets.
Report a score map to the network.
Get data from train set or test set.
Apply a function to the tensor.
Prints the current parameters to the logger.
Create a deepy. tensor. Variable.
Create neural vars from data.
Return the shared value of the given value.
Stack the encoders in the specified layers.
Stacks the decoders stacked by the given layers.
Encode x using the encoding layer.
Decode x using the decoding layer.
Create a 2d Gaussian.
Register a new layer.
Monitor the outputs of each layer.
Returns a list of all parameters.
Set up the variables.
Compute and return the output of the computation.
Save parameters to disk.
Load parameters from a file.
Prints the input variables and target variables to the log.
Register new updates for this node.
Register training updates.
Register monitors for training and testing.
Compute the norm of a list of tensors.
Writes a single element to a file object.
Load a pickled file from a file object.
Load parameters from a file.
Decodes the given state.
Parse credentials data.
Filter request elements based on request type.
Log in to the provider.
Convert a dict to a normalized dict.
Convert a list of items to a dict.
Parse a JSON body and return a dict.
Resolve provider class.
Create a cookie for this cookie.
Saves the current session to the database.
Get the data for this cookie.
Return the data as a dictionary.
Generate a signature for the given parts.
Serialize the value to a string.
Returns True if this token is valid or False otherwise.
Return True if the expiration time is less than the given number of seconds.
Serialize the provider into a string.
Return True if content is a binary string.
The content of the response.
Access the Bitbucket user.
Login to Federated identity.
Return session key.
Set a session key to the given value.
Generate a random CSRF token.
Log a message to the core logger.
Check if a status is within a category.
Split url into base and params.
Set the cors headers for a request.
Return a dict of app configuration options.
Return a string representation of the given object.
Ensure that inst is an iterable.
Check if two floats are close.
Deserialize a serialized string into an audio segment object.
Create an audio segment from a file.
Create an audio segment from a numpy array.
Return a new audio segment with the reduced data.
Serializes the state to a string.
Choose a front id based on a list of candidates.
Given a list of offset front ids and a list of offset front ids return the first id that
Get offset front id after onset front
Match front id to onset front id.
Get consecutive and overlapping fronts.
Given a front index return the front id.
Return a generator of front IDs one at a time
Given a list of ontosets and a list of ontosets and a list of ontosets return
Remove overlaps from fronts.
Remove all fronts that are too small.
Merge adjacent segments into mask.
Split a mask into multiple masks.
Downsample a mask or a stft.
This is a task that takes a list of masks and a stft and adds them
Bandpass filter.
Filter data using a lowpass filter.
Convert a list of data into a tf input matrix and outcomes onehot.
Expand and standardize a dataset.
Return True if the elements in a are not equal to the elements in b.
Load audit confusion matrices from a JSON file.
Convert a list of data into a tf input matrix and outcomes.
Update index url from configs.
Automatically detect requirements files and directories.
Handle an error.
Get information about the object.
Open an object stream.
Return the XML representation of a child node.
Return the next sibling of this node.
Return the previous sibling of this node.
Set the name of the lsl element.
Set the value of the LSL.
Append a child node to the LSL subtree.
Prepend a child node to this node.
Append a new element to the end of this element.
Prepend a new element to this element.
Remove a child node from this node.
Returns a list of streams of the results of the resolver.
Pair a word.
Autocomplete an edge n - gram.
Compute the n - grams of a token.
Yield processors from a pipe.
Map a function over an iterable and return the result.
Make fuzzy matching of a word.
make fuzzy for word
Find a fuzzy index for a word.
Extend the helper by adding relations to the helper.
Print help to stdout.
Print information about the database.
Get the value of a database key
Compute the geohash for the given latitude and longitude.
index a document by id
Get the best score for a word.
Send a request and return the response.
Map a list of requests to a stream.
Get bits from an array.
Reinterptet harray to bits.
Create a slice from a slice.
Find all files in a directory that match a pattern in a directory.
Return True if sig or val are contained in iterable.
static for each item in items with body fn
Logarithm to ceil.
Returns True if num is a power of 2.
Add a case to the endpoints.
Set the default stements for the given statements.
Register interfaces for the given object.
Register interfaces and signals before sim.
Log a change to the writer.
Return the hw method for the given process.
Auto - add agents to a unit.
Get the associated clk for this unit.
Yield distinct elements from iterable.
Group items in a collection by a function.
Flatten a list or tuple of iterables.
Merge nested if statements into this one.
Remove unconnected signals from a netlist.
Check if the given processor is a simple assignment.
Attempt to merge two hw statements into one.
Reduce a list of processes by rank.
Called when a write request is sent.
Given a list of statements return the name of the outputs that have generic name.
Cut off drivers of a signal.
Synthesize the entity with the given name and interfaces.
Get the maximum id for a given stm.
Get the maximum stm id for a given proc.
Write the data to the simulation.
Set the direction to the master dir.
Load declarations.
Returns a list of all signals for this interface.
Get the physical name of the port.
Return the bit length of the array.
Return sensitivity based on the given operation.
Convert a value or value to a type.
Reinterpret bits to hstruct.
Returns the number of words that are within the specified range.
Group words by word index.
Pack the given data into a sequence of words.
Clean the signal meta from all stms.
Discover enclosures for a list of statements.
Discover the sensitivity of the signals.
Get the rtl context for this signature.
Reduce the graph.
Merges the input and outputs of other into this one.
Return True if stms a and stms b are mergable.
Merge a list of statements into a single statement.
Merge two statements into a list of statements.
Attempts to reduce a list of statements.
On parent event dependent.
Set parent stm to parent stm.
Register stements in the given statements.
Remove this connection from the database.
Clean all ports and private interfaces.
Recursively flatten the fields of a struct or struct.
Convolve this value with the given signed value.
Add a sensitivity function to the list of sensitive functions.
Simulate a set of conds.
Connect a port to a sub sim unit.
Convert a value to a vector.
Process hw statements.
Evaluate a parameter.
Set the value of the field.
Return a string representation of the given interface map.
Remove all resources that have been synced.
Get the index of the cascade of the current object.
Create a new instance from a Python object.
Attempt to cast a value to the specified type.
Tries to cast a signature or value to a type.
Recursively walk the params of an interface.
Connect src packed to dst interface to dst interface.
Pack an intf into a sigstring.
Convert this object to an RTL context.
Register an interface.
Tries to reduce a sig by val. If val is a full vld then it returns
Reduce a sig by xoring val with val.
Get the base name scope for this class.
Serializes a decision based on the given object.
Get the base condition of a condition.
Simulate a set of bits.
Get the name of a const value.
Cut off drivers of the given signal.
Load from a numpy array.
Load a bit from the given dtype.
Load from h.
Get the width of the item.
Recursively walk the tree and flatten the tree.
Sign a value with a given width.
Get indent number from cache.
Check availability of an attribute.
Register a parameter.
Update the params of this object with the values from the other object.
Register a unit with the parent.
Register an interface.
Register a new array.
Get a single driver.
Evaluate all operands and set result. val.
Create a new rtl. rtl. rtl. rtl. rtl. r
Return a copy of this context with the specified indent.
Try to connect to an intf in the specified unit.
Propagate clk to all units in obj. units
Propagate the clk rstn of an object.
Propagate the clk clk rst
Propagate the RST of an object.
Propagate rst to all units in obj. rst
Iterate over bits of a signal.
Serialize an exclude statement to a string.
Serialize an object only once.
Serialize params to parent unit and priv.
Get the full name of the interface.
Make an association for each object in the collection.
Simulate a model for a given unit.
Reconnect signals to a unit or intf.
Performs a VCD decomposition of a model using the given stimul functions.
Initialize the simulation.
Connect a signal to this driver.
Register an intern signal.
Add a new connection to the source endpoints.
Return the intern sig of the direction.
Check if sig is dependent on process.
Add a process to the event queue.
Add a new hdl proc to the run list.
Schedule a comb update.
Schedule the apply values.
Conflict resolve strategy.
Run all comb processes.
Run sequence processes.
Apply the current values to the values and schedule them.
Read a value from a signature.
Write a value to the simulation.
Add a process to the queue.
Simulate a unit.
Given a list of statements return a list of ternary statements.
Calculate the distance between two hashes.
Calculate the average hash of an image.
Calculate the distance between the image path and the other image.
Setup a vizio device.
Update the state of the device.
mute the volume of the device
Increase the volume level by one.
Decrements the volume level by a given step.
Set the volume level.
Resets the piece to its initial state.
Return the piece at the given square.
Remove piece at the given square.
Set piece at the given square.
Check if move is suicide or check by dropping pawn.
Returns True if this node was attacked by another node.
Test if the game is over.
Return True if this is a checkmate.
Return True if the repetition is a fourfold repetition.
Pops a piece off the stack and returns it.
Returns a string representation of the board.
Push a move from one usi to another.
Return the zobrist hash of the board.
Return the symbol for this piece.
Create a piece from a symbol.
Return a string representation of the piece in USI notation.
Create a piece object from a usi string.
Yield parsed commits from the given data.
Parse a commit string into a dictionary.
Execute django - core. management from command line
Generate a YAML file from the current state of the model.
Cast the value to the cast type.
List all dates between first date and last date.
Parse a string as a date object.
Load a currency file.
Set missing to none.
Get the rate for a currency and date
Animate a list of frames.
Read a record from the file.
Write a record to the file.
Map words from start to end.
Read comments from the file.
Closes the DAF file and all its segments.
Compute the position of the given tdb.
Close the DAF file and all of its segments.
Load the data from the DAF.
Visit a call node.
Append bin op violations to violations.
Visit dict node and add violations to self. violations
Add a joined string violation to the list of violations.
Check if the keyword is whitelisted.
Try to get the handler name for the given node. If the handler name is not found then
Detect logging level of node.
Get the name of a node.
Get the id attribute of a value.
Check if node is a bare exception.
Check if the current logging level is a string or a string.
Delete a file from the storage.
Return rendered pdf.
Render the PDF to a response.
Quotes a string using unidecode.
Configures the options for the specified module.
Convert string to underscore.
Automatically index the indexes for the given mcs.
Parse a file and return a list of prices.
Load a file and return a list of lines.
Parse a line of price model.
Translates the given symbol to its canonical representation.
Load all symbol maps from the database.
Get the default session.
Import a CSV file into the database.
Print the latest price for a symbol.
Download a price.
Prune security symbol.
Get the default session.
Add a new map to your account.
List all available maps.
Get a symbol by its id.
Read lines from a CSV file.
Map an entity to a price model.
Map a model to a price.
Read configuration from file.
Get the path to a config template.
Create user config file.
Get the path to the config file.
Get the contents of the file.
Set the value of an option in the configuration.
Get an option from the configuration.
Save the configuration to a file.
Parse a symbol and return the namespace and mnemonic.
Add a price to the repository.
Download a price.
Return the default session.
Returns a list of prices for the given date and currency.
Get prices on a specific date.
Prune all security symbols in the repository.
Remove all prices for a security symbol
Download a price from a currency.
Get all securities in the security repository.
Return the partial state of the state.
Update child calls.
Recursively descends the tree.
Test whether the student has chosen the correct option.
Return a list of all defined items.
Get the x attribute of a parser.
Test if we have a context loop.
Check if the state has any context.
Check that a student and solution part exist.
Check that the student and solution parts have the given index.
Get true anomalous.
Initialize the ldap3 application.
Add an LDAP server to the pool.
Remove a connection from the ldap3 manager.
Teardown the ldap3 manager.
Authenticates the given username with the given password.
Authenticate a direct bind to the LDAP server.
Get user groups from LDAP.
Get user information.
Get user information for a given username.
Get an object from the database.
Create a connection to the LDAP server.
Create a connection to the server.
Create a connection to the LDAP server.
Destroy a connection.
Searches the container and returns the results.
Search the database.
Search for all artifacts in a collection.
Says to the client.
Announce a command.
Update the environment and base settings.
Update the headers of the request.
Require the client to have secrets.
Download a file from a url and return its name.
Stream a file from a url with headers.
Update headers with a new token.
Get or create a folder.
Read message from response.
Get bucket from S3.
Update client secrets.
Initializes the client.
Loads the auth transfer and auth settings.
List logs.
List logs for this bucket.
Create a folder in the specified endpoint.
Initialize transfer client.
Search all containers and return a list of matches.
Show status of client.
Add a variable to a backend.
Remove a variable from a backend.
Activate a backend.
Delete a backend from the client.
Update the base of an image.
Basic auth header.
Generate a signature for a payload and secret.
Generate a signature for a header.
Send a DELETE request to the specified url.
Returns the head of the specified url.
Paginate a url and return a list of results.
Verify that the registry is valid.
Remove an image from the registry.
Get a lookup from the current working directory.
Returns a list of install requirements for the given lookup.
Get singularity version.
Check if a software is installed.
Return the absolute path to the install directory.
Returns the path to the thumbnail for the current install directory.
Run a command and return the output.
Get metadata for an image.
Update the secret for the current user.
Print a response to a file.
Terminate all registered commands.
List logs for a container.
Returns a list of all collections in the account.
Update the environment variables.
IPython command line interface.
Get manifests for a repository.
Get a manifest from a repository.
Return the path to the download cache for the given destination.
Extract environment variables from config.
Update base and artifacts.
Update the token with the required get and update.
Get the metadata for this job.
Get settings for a specific client.
Get or update a setting.
Update a setting in the backend.
Generate a credential and signature for a request.
List all builders in a zone.
Load templates by name.
Get an IP address by name.
Run the build.
List all containers in the bucket.
Search all the containers in the bucket.
Entry point for sregistry. main.
Example entry point for sregistry.
Initialize the database with the given path.
Get the build template.
List all endpoints in the database.
List files for a given endpoint.
Share a dropbox.
Read client secrets.
Builds the bucket service and compute service.
Delete an object from a bucket.
Delete all files in the bucket.
Destroy an instance.
Returns a dictionary of subparsers for the given parser.
Generate a string with descriptor noun and numbers.
Get the path to a temporary directory.
Extract a tar archive to output folder.
Extract a tar archive.
Get the SHA256 hash of a file.
Read a file and return its content.
Read a JSON file and return it as a dictionary.
Clean up a list of files.
Push an image to S3.
Get or create a collection.
Get a collection by name.
Get a container by name.
List all images in the registry.
Inspect a container.
Rename an image.
Move an image to the specified path.
Remove an image from the container.
Parse a header from a recipe.
Find a single recipe in a manifest.
Create a build package from a list of files.
Update metadata for a blob.
Format a container name.
Return True if the user has a color preference.
Emit an error message.
Write a message to the given stream.
Add a table of rows to the table.
Push a new image to the registry.
Get a template by name.
Get the manifest for a given repository and tag.
Get the name of the build template.
Update client secrets.
Context manager that raises errors for S3 errors.
Create a proxy from a temporary file.
Get the gravatar url for a user or email address.
Generate a gravatar url for an email.
Check if a user has a gravatar.
Generate a gravatar profile URL.
Generate a generator of chimera blocks.
Calculate the quotient of a networkx graph.
Enumerate resonances from smiles.
Enumerate molecules.
Apply a molecule transform to a molecule
Canonicalize a molecule.
Validate smiles.
Standardize smiles.
Enumerate tautomers from smiles.
Canonicalize tautomer with smiles.
Return the parent tautomer of molecule.
Return the parent fragment of a molecule.
Remove stereochemistry from a molecule.
Determine if a molecule is a parent molecule.
Charge the parent molecule.
NAME molvs. py
Remove a molecule from the hierarchy.
Choose a molecule from a list of fragments.
Integrates a given number of samples using the IVP model.
Get memes of org
Get teams of org.
Get all repos for repo type and organization.
Get the total number of contributors for a repo.
Get all pull requests for a given repo.
Get issues for a repository.
Get the readme of a repository.
Get a license for a repo.
Get a list of commits for a repository.
Write organization and dict to a JSON file.
Write the totals to a file.
Write the languages to a file.
Check if a directory exists and if not create it.
Remove a date from a CSV file.
list of gov orgs
Create an enterprise session.
Check api limits.
Establish a connection to the given url.
Query all repositories in a gh session.
Get an organization by name.
Write the stargazers to a file.
Create a project object from a Gitlab repository.
Return the license object for the given string.
Get traffic information for all repositories.
Get releases for a repository.
Get referrers from a URL.
Get data from Github.
Write a dictionary to a JSON file.
Write referrers views and clones to file.
Check data redundancy.
Write data to a file.
Write referrers to a file.
Yield doecode records from a JSON file.
Process a url and return a generator of records.
Process a file or url.
Login to Github.
Get memes of org
Write logins to a file.
Establish a connection to the given url with username and password.
Connect to Gitlab.
Query the database for repositories.
Compute labor hours for a given person.
Prune a dictionary with null values.
Read a GQL query from a file.
Reset the countdown for a given time stamp.
Countdown a number of times.
Load data from file.
Save the data to a JSON file.
Create a tfs connection.
Create a client for a project analysis client.
Create a tfs core client.
Create a tfs client.
Create a tfs client.
Get a list of git repositories for a project.
Get a list of repos for a project.
Get all the year commits for a given organization.
Calculate the total number of commits.
Write the current state to a file.
Log a timing message.
Write a histogram stat to the log.
Rolls up all gauges and histograms.
Convert a value to an enum value.
Convert the given value to a python value.
Get prep value.
Resolve a path to a set of paths.
Projects a list of usls into a dictionary of tables to usls.
Return the mean value of the sum.
Marks the given value as the current rate.
Return the mean rate of the progress bar.
Marks the given value as at most the given value.
Send a metric to the client.
Serialize a metric to a string.
Format a metric string.
Send a metric to the client if the batch size exceeds the batch size.
Get an option from the online config.
JSON safe version of decode.
Get or set the default value for an option.
Map ledger code to guid.
Get the choices and current division.
Convert an exact invoice number to a foreign invoice number.
View the given injector.
Return a view for the given injector.
Return a view for the given injector.
Return an api view.
Create a generic api view.
Create a model view set.
Create a stream from a file descriptor.
Read data from the socket.
Close the connection and wait for it to finish.
Watch a file or directory for changes.
Remove an alias from the watch list.
Set up a watch descriptor.
Setup the server.
Get an event from the stream.
Touch this message.
Update interval and update interval accordingly.
Update interval and update interval accordingly.
Close all open connections.
Connect to nsqd.
Query the lookupd endpoint.
set max in flight
Log a warning message.
Add a callback to a listener.
Remove a callback from the list of registered listeners.
Triggers registered listeners with the given name.
Publish a message to a topic.
Set the feature transform.
Returns the prediction for the given input data.
Clean up fastq pairs.
Read a depth file and return a coverage dictionary.
Set the template for the template file.
Set the name of the main channel.
Render a Jinja template.
Render the template and return it as a string.
Update main forks with sink.
Update the attributes of the template with the given dictionary.
Set the secondary inputs of the context.
Parse an assembly file and populate contigs.
Get the content of a sequence.
Get the length of the assembly.
Write assembly to file.
Write the report to a file.
Remove inner forks from text.
Run insanity checks on pipeline str.
Given a fork process and a pipeline list return the source lane of the pipeline.
Get a list of lanes from a lane string.
Create a linear connection from a plist and lane.
Add unique identifiers to pipeline str.
Remove unique identifiers from pipeline links.
Check if required files exist.
Map a header string to its position in a dictionary.
Compute the HMS of a string.
Calculate the size coverter of a string.
Get the pipeline processes from the log file.
Clears the trace information.
Update the barrier status for the given log file.
Retrieve log lines from a file.
assess resource warnings
Update the internal state of the parser.
Display the overview of the screen.
Moves the cursor down the specified direction.
Move the cursor to the right of the specified direction.
Get the last n lines from the log file.
Prepare the static info for the pipeline.
Reads a dag file and returns a dictionary.
Get the hash of the pipeline.
Get the nextflow filepath from a log file.
Main entry point for the example.
Brew innuendo.
List all available recipes.
Validate a pipeline string.
Build a task pipeline from process descriptions.
Build a task pipeline based on the given process descriptions.
Run the auto pipeline.
Returns a string representation of the given component.
Write report to output file.
Parse a list of log files and write to disk.
Fix contig names in asseembly.
Clean up fastq files.
Parse a list of files.
Parse the file fl and store the results in the storage.
Get contig id from contig string
Write report data to file.
Parse an assembly file and populate self. contigs
Get summary statistics for each contig.
Returns a list of labels for each window in the contigs.
Return the number of elements in a string s that have the given length.
Returns a list of num gcs in a sliding window.
Run skesa.
Write a report to a json file.
Parse a bowtie log file.
Parse process name and directives from a string.
Add a dependency to a process.
Searches the tree for a template in the given parent lane. Returns True if the template is
Add the header to the template.
Appends the footer to the template
Set the initial process.
Set secondary channels.
Set the status channels of all the processes.
Return a string representation of the configuration.
Set configurations for this pipeline.
Write a dag to a file.
Write the configurations to a JSON file.
Export the parameters of all processes.
Export directives for all processes.
Build the nf file.
Set the number of kmers for a kmer.
Get the report id from the log file.
Read the trace file and update the queue.
Update the pipeline status.
Send a live report to the server.
Initialize a live report.
Close a connection to a report.
Convert adatpers file into a string.
Main entry point for mash command.
Print a message with the specified color.
Processes a process map.
Get the range of the qual string.
Filter assembly lines based on minimum coverage.
Get assembly size and contig size.
Main entry point for the analysis script.
Convert a camel case name to a camel case name.
Collect process map.
Main entry point for dendropy.
Map w to data.
Apply median filter to x.
Computes the gaussian Krnl divergence of a signal.
Compute the squared distance between x and x.
Compute the N - dimensional N - dimensional N - dimensional N - dimensional N
Gaussian filter.
Compute the N - dimensional equilibrium distance between x and x.
Circular shift a vector x.
embedded space of a vector x
Plot the formatting of a file.
Plot the boundaries of a file.
Plot the labels of all labels.
Returns a list of feature segments for the given bound idxs.
Convert a list of feature segments to a 2dfmc maximum.
Fit the scatter plot.
Read references from an audio file.
Find an estimation from a jam object.
Returns a list of algorithm IDs for all boundary algorithms.
Get the configuration for a feature.
Get a list of all dataset files in the given path.
Read hier reference information from jams file.
Get the duration of a feature file.
Write mirex time series to a file.
Get the path to the dataset file.
Align the beat times and labels for a song.
Estimate the times and frames of the beat.
Read beats from a jam file.
Compute the beat sync features.
Return a list of the names of all global parameter names.
Compute framesync times for each feature.
The number of frames the feature has.
Get features from the audio file.
Preprocess the feature.
Preprocesses the given est and returns the indices and labels of the est.
Entry point for the command line interface.
Print the mean of the results.
Compute the information gain of the beat.
Process a track.
Get the name of the results file.
Compute all features in a file struct.
Process a msaf file.
Gaussian cost function for Gaussian distribution.
Normalize the log - likelihood of a function.
Normalize a float so that it is less than or equal to floor.
Get time frames from dur and anal
Remove empty segments from times and labels.
sonify clicks in audio.
Synchronize labels between old bound idxs and new bound idxs.
Process a segmentation level.
Align end hierarchies of two hierarchies.
Return the distance between idx and idx.
Estimate k knee.
Get clustered data.
Run kmeans on x.
Computes the bic distance between means and means.
Returns the magnitude of x.
Convert a json file to a bounds array.
Convert a JSON bounds file to a numpy array
Convert a json file to a list of labels.
Convert a json file to a beats array.
Compute the 2D Fourier transform of x.
Compute the labels for x.
Filter activation matrix.
Get the module for the given boundaries id.
Get the module for the given label id.
Run hierarchical segmentation on audio file.
Run segmenter on a flat audio file struct.
Translates the source code and text to the destination code.
Set a task for the given translator.
Spool an iterable to maxlen words.
Source a file from inputstream to target.
Get a translation table from a JSON file.
Print a translation table.
Remove nodes and edges from a network.
Write a Network object to a pandas. DataFrame.
Create a Network from a pandas hdf5 file.
Process a node and return it as a dict.
Make a query to the osm server.
Build a node query.
Return True if the given value is a regular expression.
Compares the given value against the expectation.
Compares expr with value against value using regex expr.
Trigger methods on an instance.
Get a matcher by name.
Initialize a matcher by name.
Set the body of the response.
Set the body of the response as JSON.
Set a key - value pair in the container.
Append a list of functions to the target list.
Triggers the given request on the given instance.
Set the request headers.
Add a header matcher to the request.
Add a matcher for headers present in the request.
Add parameters to the request.
Set the body of the request.
Sets the JSON content for the request.
Set the XML content of the request.
Read a file and write it to the response body.
Persists the current state to the database.
Set the runtime error.
Reply to the mock.
Match a request.
Set the mock engine for this instance.
Create a mock and add it to the engine.
Remove a mock from the mock list.
Activate the mock engine.
Disable the mock engine.
Returns True if the request should use the network.
Match a request.
Return a copy of this request.
Context manager that temporarily disables the current engine.
Add interceptors to the engine.
Remove an interceptor by name.
Get a setting from the settings dictionary.
Return the decrypted sql and params as a string.
Add the original attribute to the model instance.
Get a placeholder value.
Get a column for the given alias and output field.
Get a placeholder value.
Base regression function.
The covariance matrix of the covariance matrix.
Recurse through the tree of nonterminals.
Calculates the averages for each nonterminal in the tree.
Returns the explained variance of the variance of the tree.
Computes the regression of the tree.
Set tc for the merger rate.
Calculate the number of branches in the tree.
Calculate the cost of a node branch length.
Attach all clades to the tree.
Normalize a profile.
Set gtr site specific value.
Set the gtr to use.
Return the length of the sequence l.
Attach sequences to nodes.
Prepares the tree for tree generation.
Prepare the nodes for the tree.
Calculate dist2root for each nonterminal in the tree.
Get branch mutation matrix for branch node.
Return the expanded sequence of the given node.
Return the fitch state of the node at pos.
Returns the lh of the tree at the given position.
Returns the ancestral likelihood of each node in the tree.
Return the branch length of a node.
Calculate the optimal branch length of a node.
Reconstruct the alignment of the tree.
Return the diagonal of the matrix.
Create a custom Bayesian Curve.
Check if q is fixed and fix it.
Calculate the optimal t - type of a sequence.
Probability of t profiles.
Evolve a profile by t.
Logarithm of a sequence.
Set branch length mode.
Plot root to tip.
u Print the lh of the tree.
Add a coalescent model to the tree.
Find the best root of the tree.
Assemble a tree of the given parameters.
Create a GTR based on the model and gtr params.
Read a vcf file and return aln ref fixed pi
Calculate the FWHM of a distribution.
Create a delta function for an integration peak.
Assign dates to branches.
Setup tree regression.
Make a time tree.
Returns the likelihood of the time tree.
Convert all clades in the tree to a string.
Return the date uncertainty for the given node.
Returns the minimum value of an interpolated object.
Calculate the median value of a interp object.
Convert a datetime to a numeric date.
Create a FrequencySeries from a clock model.
Close the connection to the server.
Receive a line from the client.
Send data to the client.
Send an instruction to the client.
Convert unicode str to unicode if possible.
Load an instruction.
Encode an argument as UTF - 8.
Encode the instruction into a string.
Return the url for a class.
Return the URL for this instance.
Return the url for a class.
Download a file or a temporary directory.
Get the parent object of this job.
Ask for credentials.
Prompt the user for credentials.
Display the current user s whoami information.
Print user information.
Generate a range of genomics from start to stop.
Return a new chromosome with the specified chromosome and position.
Returns the facets of the query.
Process a list of filters.
Moves the cursor to the next page in the buffer.
Execute the query and return the results.
Migrate a source to another dataset.
Main entry point for the solvebio CLI.
Construct a new instance from a dictionary.
Logout from the API.
Get the child object of this task.
Parse snpeff info.
Get credentials from SolveBex API.
Save the configuration to a file.
Format val according to valtype.
Build a row from a list of cells.
Build a line from a list of column widths.
Return the attributes of a mediawiki cell as a list of strings.
Migrate this dataset to another dataset.
Upload files to Vault.
Validate a full path against the Vault path specification.
Validate the given url against the api host.
Annotate records with the specified annotator.
Evaluate the expression.
Set the format name.
Register a new formatter with the given handler.
Shortcut for tabulate.
Return the path to the user config file.
Return a list of system configuration files.
Return a list of all additional files in this directory.
Write default config file to user config directory.
Read config files.
Truncate a string to a maximum length.
Replace all occurrences of a string with a list of strings.
Call commands in sequence.
Apply an option to a command.
Initialize the lint options.
Run the command.
Run the command.
Truncate a string of data and headers.
Formats a row of headers into a string.
Vertical table adapter.
Yields a sequence of rows from a table.
Checks if the given type is a valid number.
Check if the given type is a bool.
Checks if the given type is a binary type.
Generate a key from a template.
Generate a keypair.
Find objects in the specified template.
Insert an image into QRImage.
Show a panel of genes.
Given a weekday and a timedelta object return the first day of the given weekday.
Repeats the current date by the given day.
Repeats the repeats of the given date range.
helper function for repeating repeats biweekly
Handle a single chunk of events.
Export a list of variants for a given document.
Export a list of variants to a text file.
Add or remove a user.
Returns a dictionary of str variants for a given institute.
Retrieve information about a variant in an institute.
Get a string representation of a variant.
Verify a variant.
Clinvar export action.
Get cancer variants for a given case.
Activate a variant in an institute.
Get the evaluation for the given evaluation id.
Returns the ACMG data for the given criteria.
Upload a panel to the institute store.
Download verified data.
Given a list of HGNC IDs return a dictionary of genes that have the same alias
Add incomplete penetrance genes to the genes dictionary.
Make a matchmaker request.
Get a list of nodes from a mme.
Get the cytoband coordinates for a given chromosome and position.
Get the subcategory for the given altlen reflen and category.
Get the length of a sequence.
Get the end of a sequence.
Parse the coordinates of a variant into a cytoband coordinates object.
Update a panel.
Export a panel to PDF.
Edit a gene in a panel.
Load a delivery report.
Return a dictionary of phenotypes that match the given query.
List whitelists.
Build a phenotype from a phenotype id.
Generate a gene for the given HGNC id
Return a list of genes as a JSON string.
List institutes.
List all transcripts in a HGNC.
Display events for a given day.
Parse a list of variants in a case.
Get a list of variants for a given institute.
Create a variant for a given variant.
Generate a header for variants in a case object.
Get predictions from a list of genes.
Find a bai file in a bam file.
Get the observations for the given case and variant.
Parse a gene into a list of refseqs.
Return a string representation of the given transcript object.
Return the position of the end of a variant.
Return the frequency of a variant.
Return a human - friendly version of a variant.
Generate a thousandg link for a variant.
Return a link to the cosmic for a variant.
Emit a beacon link for the given variant.
Generate a URL for the given variant object.
Return a human - friendly version of the given variant.
Return a list of models that are expected to be inherited from a variant.
Return a list of callers for a variant.
Get cancer variants for a given institute.
Export a Clinvar object to a dictionary.
Get a clinvar submission.
Get a dictionary of institutes and variants for a given variant.
Create a new Variant ACMG post.
Takes an evaluation object and returns the evaluation object.
Upload a panel of genes to the store.
Write verified variants to Excel file.
Export all genes in the specified adapter.
Parse clnsig into accsessions.
Parse compounds from compound info.
List all genes.
Retrieve a case by its identifier.
List collections.
institute an internal id display name and sanger recipients
Get a file handle from a file path.
Get net number from request.
Get the next network and the prev network.
Checks the year and month for validity.
Check the weekday of a date.
Parse a list of samples into a list of individuals.
Parse a ped stream and return family id and samples.
Builds an evaluation object for a given variant.
Returns a prediction string based on acmg terms.
Get a list of variants in a case.
Get all sanger variants for a given institute and case.
Find a variant by document id.
Returns a list of gene variants in the database.
Returns a list of all verified cases for the given institute.
Get all the causatives for a given institute.
Check for causatives in the variant collection.
Generator that yields the other causatives of the given case and variant.
Delete all variants of a variant in a case.
Returns a list of variants that overlap the given variant.
Return a list of evaluated variants for the given case.
Sample variants from the variant collection.
Get a mongo connection.
Returns a list of submission objects for the given variant ids and form fields.
Return the header of a submission based on a csv type.
Returns a list of submission lines from a list of submission objects.
Load a panel from an omim or panel app.
Build an exon from a dictionary.
Delete a panel from the database.
Drop indexes from the database.
Remove a user from a mail.
Drop genes from the database.
Drop exons from build.
Delete a case.
List individuals for a given case.
Show a list of cases.
Load a user from the store.
Login to Google.
Build an institute object for the given internal id.
Delete an event.
Get a list of institute events.
Return a list of user events.
Remove a phenotype from a case.
Parse genotypes from individuals and positions.
Check if coordinates are in the given chromosome.
Returns a dictionary of hpo terms.
List all transcripts in the database.
Load exons from ensembl.
Load a region from a HGNC.
Get all events for a given month.
Return a list of models that live between now and now.
Parse requirements file and return list of install requirements.
Get an existing gene for a panel.
Update a gene panel.
Create a new gene panel.
Export a panel object to a dictionary.
Return archive information.
Migrate a case to another database.
List all hpo terms.
Configure extensions.
Register blueprints.
Show aliases for a symbol.
Build a panel object from a panel info dictionary.
Export verified variants to a workbook.
List all variants for a given document.
Return a string representation of the given variant object.
Run the WSGI server.
Generate an MD5 key for a list of arguments.
Initialize an application.
Setup the database.
Index the adapter.
Create institute database.
Demonstrate institutes.
Setup the database.
List institutes.
Parses the genetic models from the given information.
List gene panels for a given institute.
Add institute object to institute collection
Get institute object by id.
Match a date string.
Get a date object from a date string.
Generate genes from a HPO term.
Parse a rank score entry.
Create a new user in institute.
Check if a connection is established.
Load a delivery report into the database.
Add a user object to the user collection.
Generate a pileup template.
Load exons from a list of exon lines.
Manage compounds for a case.
Add links to a gene object.
Show the genes associated with a HGNC symbol.
Parse hgnc genes from a list of lines.
Get open clinvar submission.
Update a submission by clinvar id.
Get the clinvar id for the given submission id.
Add a submission to the database.
Update the status of a submission for a user.
Get a list of submissions for a given institute.
Delete an object from the clinvar database.
Convert a case to a dictionary of clin vars.
Parse a list of hpo lines into a list of dicts.
Get all genes.
Get all genes for a given HGNC symbol.
List genes.
Get institute object and case object.
Returns institutes for the specified user.
Get the HGNC id for a given gene.
Create a new gene panel.
Load disease terms from the database.
Load disease terms from a list of lines.
Parse the frequency of a variant.
Parse the SV frequencies from a variant.
List users.
Compares the mim panels of a panel with a panel.
Update the mim version of a panel.
Add a gene panel to the collection.
Find a panel by id.
Delete a panel from the collection.
Return the gene panel with the given id.
Return a list of gene panels for the given panel id and institute id.
Convert a case object to a list of panels.
Update a panel.
Add a pending action to a panel.
Return a set of clinical symbols for the given case.
List all cases in a collaborator.
Send a record to the mail server.
Load indexes from the database.
Update all indexes in the database.
Drop indexes from the database.
Build a query for a single variant.
Run a clinsig query against the database.
Apply coordinate filter to the query.
Filter genes based on query.
Remove all databases from the database.
Parse a panel from a csv stream.
Insert gene objs into the HGNC collection.
Insert one or more transcripts into the database.
Insert one or more exon objects into the database.
Return a gene object for the given HGNC identifier.
Return the HGNC id for the given symbol.
Return a list of genes for a given HGNC symbol
Return a list of all genes in a build.
Return the number of genes in the HGNC.
Drop genes from the HGNC collection
Drop all transcripts from the database.
Drop all exons from the collection.
Returns a dictionary of ensembl transcripts for build.
Return a dictionary of all the HGNC symbols in a build string.
Find a gene by alias.
Return a dictionary of genes by alias.
Return the ensembl genes for the build.
Return the HGNC for the given HGNC alias.
Add a hgnc id to a list of genes.
Return a dictionary of coding intervals for the given build.
Load an institute from an API key.
Retrieve a list of all the cases associated with an institute.
Get institute and case information.
Matchmaker for institute.
Match a institute with a target.
Delete a matchmaker.
PDF for a case report.
Marks a case as being diagnosed.
Get institute status.
Assign a institute to a user.
Return a list of hpo terms.
Mark institute as validation.
Mark a institute as causative.
Deliver a delivery report for a given institute.
Share a institute with a user.
Rerun an institute.
Open a research page.
Convert a vcf institute to a cytosure.
Send a multiqc file to the specified institute.
Get a list of cases for the given query.
Get a list of Clinvar submissions for a given institute.
Generate CSV files for each variant in the case obj.
Return a list of diseases with the given p value greater than or equal to p value.
Convert a VCF to a cytosure object.
Return institute and case attributes for a multiqc case.
Returns a list of all the sangers that have been unevaluated for the given institute
Delete a MME from a case.
Match a MME against an institute.
Match a case against a given mme.
Load genes from build.
Parse callers from variant. info.
Build a HGNC transcript.
Load an institute from an internal id.
Given a variant and a list of transcripts return the cadd number.
Load a case from a YAML file.
Update a variant in the variant collection.
Update the variant rank of a case.
Update the variant compounds for the given variant.
Update all compounds in a list of variants.
Update all variants in a mongo compound.
Insert a variant into the variant collection.
Insert a new variant into the variant collection.
Insert multiple variants into the variant collection.
Assign a new case to a user.
Share a case with a collaborator.
Send a diagnosis event to the institute.
Mark a case as checked.
Order verification of a variant.
Returns a list of sanger events ordered by institute and user.
Validate a variant.
Mark a variant as causative.
Dismiss a variant.
Update the acmg string for a given institute.
Parse a sequence of IDs into a dict.
Parse a simple id.
Generate an MD5 key for a document id.
Convert a panel into a list of genes.
Given a variant object and a family id return a new document id.
Return the number of cases in the institute.
Update the dynamic gene list for a case.
Find a case by id institute id and display name.
Delete a case.
Add a case to the collection.
Replace a case with a new one.
Update a case with a family id.
Submit an evaluation to the institute.
Get evaluations for a given variant.
Parse ensembl transcripts.
Parse the ensembl gene request and yield ensembl info.
Parse the ensembl transcript request and yield ensembl info.
Parse ensembl genes from a list of lines.
Parse a list of ensembl exons into a sequence of dicts.
Parse ensembl exon request and yield ensembl info.
Initialize the logging module.
Extract phenotypes from a genemap file.
List the phenotypes for a morbid genemap mim2gene.
Convert a string to a number.
Format a month of the year.
Format the day of the week.
Format the month name for the given year and month.
helper function for popover
Get information about a panel.
Parse a gene panel.
Show all diseases.
Load the hpo term collection.
Return a dict of all users in the store.
Parse conservations from a string.
Parse conservation score from variant. info.
Get general case information.
Get the number of cases grouped by institute id and slice.
Render the context to JSON and return the response.
Get the current year and month from the request.
Check for cancelled events.
Return the term with the given id.
Return a list of hpo terms.
Returns the disease term for the given disease identifier.
Returns a list of disease terms associated with the given HGNC.
Load a disease term into the database.
Generate a list of genes from a list of HPO terms.
Read a HDF5 file.
Set up the time axis.
Computes the list of coordinates.
Blank out the data.
Calculate the extent of a plot.
Plot a series of waterfall functions.
Plot a time series.
Write the filterbank to a file.
Calibrate the bandpass.
Convert data to coarse.
Returns the fractionalpols of a string.
Write polar and polfils to a string.
Find the closest value to val in xarr.
Rebin a d array into n x n y.
Unpack the given data into the specified number of bits.
Compute the diff between two dios.
Plot the calibrated diode.
Calculate the size of the selection.
Calculate the shape of the selection.
Setup frequencies.
Populate timestamps from the file.
Calculate the number of channels in a coarse channel.
Calculate the number of blobs in the selection.
Check if the selection is too big.
Read all data from the file.
Read a row of data from the FITS file.
Read data from the container.
Update the header.
Print information about the file.
Write to a fil file.
Write the data to a hdf5 file.
Write the data to a HDF5 file.
Get the blob dimensions for the given chunk.
Get the chunk dimensions.
Grab data from the data.
Run the guppi tool.
Read the first header from the file.
Find the number of data blocks in the file.
Prints the mean std max and min stats.
Plot a histogram of the data.
Generate filterbank header.
Find the size of the header of a file.
Integrate a calibrated calibrated channel.
Returns the center frequencies of the frequencies in freqs.
Calculate the ratios of the ratios of a calibrated calibrated signal.
Get the diode standard deviation of a spectrogram.
Return the length of the header of a file.
Check if a file is a filterbank file.
Generate a sigproc header string for a function f.
Calculate the number of ints in a file.
Return a dict representation of the traceback.
Adds a sub - command parser to subparsers to parse a rr record.
Create a zonefile parser.
Remove comments from text.
Add a default name to the given text.
Parse a string of text into a dictionary of json zone files.
Parse a zone file and return a json zone file.
Quote a field in a data dictionary.
Parse a schema string into an avro schema object.
Convert a list of classes to a python package.
Convert a record to JSON compatible format.
Load a record from a JSON dict.
Load a JSON string into a record.
Add a record to the schema map.
Get a schema record by name.
Return a string representation of the object.
Return a schema dict for a record.
Get the root schema of a record.
Read lines from input stream.
Output a list of outputs to a stream.
Push a new ordered dict to the top of the ordered dict.
Returns a query string for this object.
Perform a raw filter against this object.
Return a list of entities with the specified attributes.
Get entity from href.
Give another quote.
Escape a string or an integer.
Create an elementary rotation matrix.
Calculate the vrad error for a sky average.
Calculate the parallax error.
Returns the magnitude error of g.
Eo m of the magnitude error.
Compute the average transit number for the given beta.
Returns the angular distance between phi1 and theta1 and theta2
Transform cartesian coordinates.
Transform sky coordinates to spherical coordinates.
Transforms the covariance matrix phi theta to the jacobian of covmat.
Return the error scaling factor for observable and beta.
Coerce a value into a unicode string.
Iterate over each item in the collection applying a list of functions to each item.
Exclude items that match the given filter function.
Return a new collection with only items matching the given function.
Return a new collection with the elements of this collection until the elements of this collection do not satisfy
Return a new collection with elements dropwhile the given function.
Zip the elements of this collection into the elements of another collection.
Find the first occurrence of the specified method.
Return a list of paths to the current working directory.
Build a list of minimal runs for the given events.
Print results to output file.
Print the results to the output file.
Remove macros and pragmas from a code string.
Round x to the next base number.
Return a list of blocking indices.
Calculates the cache access for the results.
Analyze the kernel and return the results.
Strip comments from the asm lines.
Strip unreferenced labels from a list of lines.
Select the best block in blocks.
Prompts the user for an integer and returns it.
Insert markers at start line and end line.
Yield num spaces from start to stop.
Get the last modified time of a file in a directory.
Check if arguments are valid.
Entry point for the command line interface.
Entry point for pickle.
Return the symbol at the position of the current position.
Transform multidim to 1d decl.
Transform multidim to 1d ref.
Find a node of the given type in the given AST.
Check that the number of datatypes in the variable list is within the maximum number of datatypes
Set a constant.
Substitute constants in expr with self. constants.
Returns a dictionary of the sizes of the array.
Calculate the relative offset of a variable.
Remove duplicate accesses from the object.
Returns the length of the current iteration.
Returns a generator that yields the current loop stack.
Return a list of indices for the order of the symbols in the source and destinations.
Compile SymPy accesses.
Compile the relative distances of the given sympy accesses.
Return a dictionary of global iterator to indices.
Return the global iterator.
Return the global iterator for the given indices.
Return the maximum global iteration.
Print kernel information.
Print variables information.
Print constants information.
Print kernel code.
Convert a math ast to a symbol.
Get the indices of the offsets of aref.
Get the basename of aref.
Get the type of the loop.
Builds the list of declartions for this module.
Return a list of all array declarations.
Get the kernel loop nest.
Build the array declarations and the dictionary of the declarations.
Find the most loop in a loop nest.
Builds the initializations for the given array dimensions.
Build a dummy call statement.
Build a kernel function declaration.
Build a list of scalar declarations.
Get kernel code.
Build a kernel call.
Get the code for the kernel.
Perform the iaca analysis.
Returns a unique identifier for the file.
Get the last modified time of the file.
Get the compiler and flags for this executable.
Parse a perfctr event string into a tuple.
Enforces that there is no overlap at the given position.
Return the path of the header file.
Align an iteration with the cl boundary.
Returns a list of load factors for the machine.
Returns a list of hits for the machine.
Returns a list of misses for the machine.
Get stores for this machine.
Returns a list of evicts for each cache level.
Get informations for all caches.
Temporarily replace the environment variable with the value.
Configure the argument group parser.
Parse the description of the file and return a string.
Build a purchase item.
Record a purchase request.
Get course content from ecommerce.
Get course content from ecommerce.
Update unenrolled list
Send a refund email to a course.
Send an offer assignment notification email.
Retry the request in the specified order.
Fulfill an order.
Get a sailthru client.
Get the value of a key. If the key does not exist returns none.
Set the value of a key in the cache.
Get the configuration value for the specified variable.
Get overrides filename for a variable.
Get the value of a dictionary by version.
Return the eplus version of the installed versions.
Populate the database from a JSON data dict.
Returns a list of all external files in the database.
Set default values for all tables in the database.
Prepares the extensible for this field.
Return a dictionary of the short refs for all external files.
Get the value of a column.
Update a value in the database.
Update the configuration with new data.
Add one or more fields to this instance.
Remove and return the value at the specified index.
Insert a value at the specified index.
Remove this record from the database.
Register a record hook.
Register a link.
Create a regular expression for the given intent.
Return the remaining duration in seconds.
Serializes this object into a dict.
Make an HTTP request.
Get a list of services for a given service type.
Create a directory if it does not exist.
Configure a CURL service.
Register a new certificate status.
Get recording state.
Update the status of an event.
Update the agent state.
Return the configuration file name for the given configuration file.
Update the configuration with the given configurationfile.
Check if config file is valid.
Initialize the logger.
Return a template for the home page.
Serve an image.
Run all modules.
Parse an ical string into a list of events.
Get a schedule from the API.
Main loop for the control loop.
Main loop for control loop.
Make an error response.
Make a JSON response.
Get the internal state of the service.
List all upcoming and recorded events.
Get an event from the database.
Delete a recorded event.
Modify an event.
Start capturing an upcoming event.
Render the test to a fragment.
Returns a list of resources that have not been seen yet.
Return a dict representation of the object.
Create a frag from a dict.
Add content to the document.
Initializes the javascript library with the given function.
Return a string representation of all the resources with the given placement.
Convert a resource to html.
Handle GET requests.
Renders the given fragment and returns the rendered HTML.
Render the fragment to standalone html.
Calculate the pvalues and qvalues for a given lamb.
Convert values to one dim array.
Lookup values from the error table.
Create a final error table from a dataframe.
Summarize the error table.
Calculate error statistics for a given target and decoy scores.
Find the cutoff for a given cutoff.
infer peptidoforms from peptidoforms
infer peptides from a peptide file
infer proteins from a protein file
Subsample a file using osw.
Reduce the input file to outfile.
Backpropagate a file by applying a set of apply scores.
Get group by id
Create a new group.
Delete a group.
Get all members of a group.
Update members of a group.
Get the effective member count of a group.
Check if a member of a group is effective.
Decrypt a key.
Get stdin.
Get the stdout of this process.
Get stderr from stdin or stdin.
Get debug output from stdin.
A context manager that yields stdout and waits for stdout to be read.
Return a context manager that yields the stdout of the process.
A context manager that yields stdin and wait for stdout to finish.
Yield stdout or stderr from the debug root.
Write an error message to a file.
Print help to a file.
Print usage information.
Print version information.
Resolve an option from the options dictionary.
Return a copy of the current context.
Write headers to file.
Generate a temporary url.
Quote a value.
Get a client from the queue.
Decrypt a chunk of data from stdin.
Edit an account.
Put a container.
Get the manifest body.
Create a container.
Display information about a trans.
Return True if the buffer is empty.
Encrypt a key.
Get the status of a github repository.
Get a pull request.
Get a list of pull requests
Save all published titles to the database.
Get a list of slider items.
Render a hero slider.
Acquire a reader lock.
Release the number of readers.
Acquire a writer lock.
Remove a task from the queue.
Get a task by id.
Returns a list of tasks sorted by task id.
Return the configuration as a dictionary.
Create a new instance from a dictionary.
Initialize an archive manager.
Create a new index.
Encode a JSON object as a sequence of bytes.
Write items from generator to writer.
Add a task to the scheduler.
Remove a task from the scheduler.
Yields all the items in the storage.
Validate task id backend category and backend arguments.
Parse command line arguments for archiving tasks.
Perform a job and publish it to the pubsub channel.
Schedule a job to run in a queue.
Cancel a job.
Runs the listen loop.
Listen for jobs in the queue.
Schedules the scheduler to run in the async mode.
Schedule a task.
Cancel a task.
Build the job arguments for a task.
Register a view with the router.
Reverse the given action with the given name.
Get the name of the view.
Return the version string for the given version.
Resolve a key from a cursor.
Get the engine for the given scheme.
Parse a path into a database and schema.
Parse a database url and return database information.
Create a new user.
List users.
Create a new password change form.
Build the url field and kwargs for the view.
Parse a boolean value.
Parse an integer value.
Get the parser for the given type.
Create a dictionary from a model.
Encode a base64 - encoded string and return the decoded string.
Create a field from a field info dictionary.
Create a validator for the given data struct.
Find unique elements from a set of parameters.
Change logging kwargs.
Make directories for filename.
Get a list of strings from the given arguments.
Set the logger for this class.
Extract replacements from a trajectory.
Check and replace all strings in the parser with the given rename function.
Write a memory parser to a string.
Find multipleproc options in a parser.
Find a multiproc dict in a dictionary.
Handle config parsing.
Process a log config and return a new dict
Create logging handlers and tools.
Finalize all the tools and tools.
Start the steam process.
Write a buffer to stderr.
Return True if the results of a and b are equal.
Check if two parameters are equal.
Decorator to set the attribute and attribute names for a class.
add parameters to traj
Run the network on the given traj
Apply the euler scheme to the given diff function.
Add parameters to a traj file
Computes the Lorenz divergence between a value and a value.
Create a storage service and unused kwargs.
Factory for creating a storage class.
Add parameters to a diff file
Compute the roessler divergence between two values.
Returns true if any of the parameters in traj are explored.
Build the equations for the model eqs.
Pre - builds the model if necessary.
Build the model if necessary.
Builds the model for the given traj. parameters. model
Perform pre - build.
Build the connections for the given traj and brian list.
Add parameters to traj.
Compute the fano factor of a spike.
Compute the mean fano factor for each neuron.
Compute mean fano factor for a run.
Add monitors to the network.
Make a folder for the plot.
Plot the result of a celia neuron.
Print the graphs for the given traj.
Analyse a network.
Get the batch number.
explore a batch of sequences
The list of variable names for this node.
The function that will be used for evaluating the function.
rename full name to full name
Set the depth branch and run branch attributes.
Convert a pypetconstants. Node to a pypetconstants. Message.
Delete a node from the tree.
Remove a node or leaf from the tree.
Translate a shortcut name to a boolean and a string.
Determine the types of a node.
Create a link for the given act node and instance.
Check that the given names match the given split.
Set the details of a tree node.
Return an iterator over the nodes of the given node.
Make a child iterator for the given node.
Perform a recursive traversal of a node.
Searches the tree for the given key in the given node.
Returns a list of candidates that are backwards in the given name.
Children of this node.
Add a generic group to the network.
Add a leaf to the network.
Return a list of all the children of this node.
Return a debug tree.
Get the parent of this node.
Remove a link from the network.
Remove this node from the tree.
Get the default value for a given attribute.
Get the children of this node.
Returns a list of groups.
Returns the leaves of the tree.
Returns a list of links.
Store a trajectory into the network.
Add a result group to the model.
Add a derived parameter group to the model.
Add a derived parameter to the model.
Add a config group to the network.
Add a configuration to the network interface.
Add commit variables to traj.
Make a git commit.
Flatten a nested dictionary.
Flatten a nested dictionary into a nested dict.
Get the argument specification of a function.
Given a function and a list of kwargs return a dict of matching functions.
Format a timestamp as a time string.
Return a random tcp port.
Create a bunch of directories at the given path.
Reset the interval to a new value.
Get the remaining time for the given index.
Return a dict representation of the object.
Remove an attribute from the dictionary.
Return a string representation of the dictionary.
Make an ordinary result.
Create a shared result from a result.
Store data for this trajectory.
Get data node.
Return True if item supports item.
Create shared data.
Routine to manipulate multiproc results.
Lock a client.
Send done message to zmq.
Finalize the connection.
Start a zmq socket.
Send a request and retry the request.
Acquire a lock.
Listen for messages from the socket.
Put data into the server.
Detect the current fork.
Handle data messages.
Run the loop.
Receive data from the queue.
Receive data from the socket.
Stores the given args and kwargs into the storage backend.
Store a message in the reference store.
Store references in the storage.
Collect the keyword arguments for a section.
Collect configuration options and return a dictionary of keyword arguments.
Interpret the config file.
Add configuration parameters to traj.
Plot pattern and rule number.
Cellular automaton 1d.
Signals the user to update the updates.
Get the overview group.
srvc load multiple items
Check the properties of the HDF5 object.
Store one or more items in an iterable.
srvc closing routine.
Extract file information from kwargs.
backup a trajectory
Reads out a row of data and returns a dict with the values as keys and values as
Prepare merge for trj merge.
Check if version and python versions match.
Load exploration parameters from traj.
Store the explorations for the given traj.
Store a trajectory in the HDF5 file.
Create a leaf node.
Store nodes in the tree.
All store param or result table entry.
Get a table from the HDF5 file or create it if it doesn t exist.
Get all nodes by name.
Insert dict into row.
Cuts a string if it is longer than max length.
Create or get a group from the hdf5file.
Create a new hdf5 group and create a new hdf5 group
Store annotations for a node.
Load annotations from node.
Group the given traj group.
Load a group from a trajectory.
Load all skeletons.
Extract missing flags from data dict.
Add a summary of an instance to the metadata table.
Add meta information to an instance.
Write shared array to hdf5 file.
Create a shared table in the shared hdf5 file.
Write a dictionary into a pytable.
Write data to group in hdf5 file
Write data into other array.
Write data into an array in the specified group.
Delete a link from the trajectory file.
Get all rows of a table column.
Get the length of the longest string in a list.
Read a dictionary from the prm file.
Read shared data.
Read array and return result.
Load a trajectory.
Make a set name based on its index.
Set the properties of the model.
add dynamic imports to the dynamic imports list
Set a preset parameter.
Check if a run is completed or not.
Remove all exploration parameters from the model.
Update run information.
Add run information.
Lock all parameters.
Lock derived parameters.
Finalize the pipeline.
Loads the skeleton file.
Make a list of reversed wildcards.
Merge other trajectories into this one.
Merge two runs into this one.
Rename a full name to another trajectory.
Merge configuration from another trajectory into this one.
Merge another trajectory into this one.
Merge results from another trajectory into a new trajectory.
Restore all explored parameters to default.
Set explored parameters to idx.
Makes a single run.
Returns a list of the name of the run.
Start a new run.
Set the start time of the run.
Set the finish timestamp of the run.
Construct an instance of the given constructor.
Return a dictionary with the values from the param dict.
Finalize the run.
Delete all the links in the given iterator.
Remove all children from the tree.
Wrapper for pool single run.
Decorator for pool single run.
Configure the pool.
Configure frozen pool.
Process a single run.
Run a single runner.
Configure logging.
Configures the niceness of the process.
Run a single run and return the result.
Wraps the handling function in a handler.
Load a class from a string.
Create a class from a list of dynamic imports
Returns the length of the file.
Return a string representation of the lock.
Get the range of the current function.
Stores the current state of the object in a dictionary.
Load data from a dictionary.
Load an array parameter from a dictionary.
Returns true if val1 and val2 are equal.
Return True if data is a supported sparse matrix.
Build a tuple of sparse names for the given parameter name idx.
Reconstruct a matrix from a list of data.
Load a sparse parameter from a dictionary.
Return a dict with the pickled data and the pickled range.
Load a pickled object from a dictionary.
Translate a key to a string.
Return a string representation of the value.
Return a dict representation of the object.
Set a single item in the cache.
Return True if the sparse parameter supports the given item.
Serializes the sparse matrix into a dictionary.
Load a sparse matrix from a dictionary.
Set a single attribute to a single object.
Return a pickled string representation of the object.
Load data from a dictionary.
Merge all files in the current working directory.
Create a new session.
Merge multiple trajectories into one.
Start all the jobs in the specified session.
multiply traj by traj
Run a neuron.
Postprocessor for neurons.
Add parameters to a traj file
Add exploration to traj.
Extract subruns from a traj.
Execute a network run.
Add parameters to all components analysers and analysers.
Run a network.
Make a filename from a traj object
Return the next string in the chain.
Handle keyboard interrupts.
Read configuration from a JSON file.
Request pin.
Request a new access token and write tokens to file.
Refresh access token and write tokens to file.
Get thermostats from the API.
Write tokens to file.
Set the hvac mode of the thermostats at the specified index
Set fan min on time
Set the hold of the thermostats at the specified index
Delete a vacation from the thermostats table
Resume the program at the specified index.
Send a message to the thermostats server.
Generate a random delay.
Generate a new timeout request.
Generate a random renewing time.
Return a dict representation of this object.
Reset the connection to its initial state.
Get the timeout for a given function.
Set the timeout for a function in the specified state.
Select an offer.
Send a request to the client.
Set the timers for this client.
Process a nak packet.
Initialize the state.
Timeout selecting.
Wait for a request to complete.
Renews the current request if it has expired or raises an exception.
Rebinding the current request.
Receive an offer from the queue.
Called when an ack is received.
Receive a nak request.
Called when an ack is received.
Renew the nak if needed.
Rebinding the received packet.
Handle a rebinding packet.
Renew the lease on the client.
Set the value of the field named name to value.
Add a new name and value to the query.
Returns a new QuerySet with the elements removed with the specified name and value.
Get the status of the server.
Read a tdms file and return a list of names and data
convert tdms file to fcs file
Compare the current working directory with cwd.
Create a new quilt patch.
Delete the next item from the database.
Delete a patch from the database.
Check if a file exists in the quilt repository.
Backup a quilt file.
Add a file to the quilt database.
Run the quilt command.
Create the directory if it doesn t exist.
Copies the file to the specified destination.
Link a file or a file.
Copies the file to the specified destination.
Get the directory of the file.
Backup a file to a destination.
Remove a patch from the database.
Apply a patch to the series.
Apply the next patch to the series.
Apply all patches to the series.
Reads the patchfile and adds the patch to the patch2line dictionary
Save the series to a file.
Add a patch to the patch2line dictionary.
Insert patches into self. patchlines.
Add patches to the line.
Remove a patch from the line.
Return a list of patches after a patch.
Return a list of patches before the given patch.
Return a list of patches until a given patch is found.
Replace a patch with a new one.
Create the version file if it does not exist.
Check the version of the database.
Add this command to the parser.
Add this parameter to the given parser.
Adds a sub - command parser to subparsers.
Set the subparsers args and kwargs for this operation.
Add subparsers to the given parser.
Add a quilt patch to a file.
Add a quilt file to the database.
Revert a quilt file.
Import a quilt patch into the quilt repository.
Import quilt patches from a list of patches.
Add a way to the way map.
Return all node ids that are not present in the graph.
Add a node to the graph.
Build a route from a relation.
Create a route long name for a relation.
Get agency id from relation.
Process the file.
Add a relation to the repository.
Create agency objects from a list of agencies.
Create dummy stoptimes for a trip.
Write the contents of the file to a zipped file.
Unzips all buffers and buffers to destination.
Build an agency from a relation.
Extract stops from a relation.
Build shape of a relation.
Get supported versions.
Send an apdu to the device.
Authenticate a list of devices using u2f.
Register a facet on the device.
Authenticate with the device.
Register a list of devices.
Convert unicode to str.
Wraps the given class with the given error threshold.
Check if filepath matches blame patterns.
Returns the email address for the given email.
Get an entry from the tree.
Convert markdown to reST.
Serves a Flawless server.
Convert a url to an image.
Convert string to image.
Check that the size of the image is larger than the image size.
Check that the size of the image is too big.
Check that the image has the specified height.
Parse the category for the given field and field name.
Parses the total value of an item and returns it as an integer.
Yields all the items in the source.
Save an error to the database.
Parses the source file and feeds the loaded items to the database.
Parses the given item and returns the parsed data.
Get an instance of the model with the given data.
Save an item to the database.
Download a file from url to dest.
Loads the source file and sets loaded flag.
Return a generator of headers and rows from the CSV file.
Enable or disable network access.
Add one or more files to the sandbox working directory.
Add a new file to the sandbox working directory.
Get enrollments for a course.
Get enrollments for a course by sis id.
Get enrollments for a section.
Get enrollments for a section by sis id.
Get enrollments for a given regid.
Enroll a user in a course.
Get a list of roles for an account.
Get roles for a given account sis id
Get effective course roles for a given account.
Get a role for an account.
Get role by account sis id
Get a course by id.
Get course by sis id.
Get a list of courses in an account.
Get a list of courses for a given sis account.
Get a list of published courses for an account.
Get published courses for a given sis account.
Get all courses for a given regid.
Create a course in an account.
Update a course by id.
Get activity by account and term.
Get grades for a term by account.
Get statistics for a term by account.
Get activity by sis course id
Get assignments by sis course id
Get student summaries by sis course id
Get student activity for sis course id and user id.
Get student messaging for a user.
Get external tools for a given account.
Get all external tools in a course.
Create an external tool.
Update an external tool.
Delete an external tool.
Check that all required parameters are present in obj.
Get a user by id
Get a list of users for a course.
Get users for a given sis course id.
Create a user in a canvas account.
Get user logins for a user.
Update user login.
Get the next page from the response.
Get a resource by url.
Get a single paged resource.
Perform a GET request to the given url.
PUT a resource to the specified url
POST a resource to a url.
Delete a resource.
Get all the admins for a given account.
Create an admin for a user.
Create an admin by sis id.
Delete an admin.
Delete an admin by sis id.
Create a grading standard for a course.
Get a specific section.
Get a section by sis id.
Get a list of all sections in a course.
Get sections in course by sis id.
Get a list of sections with students in course.
Get sections with students in course by sis id.
Create a section in a course.
Update a section.
Get a list of quizzes for a course.
Get account information.
Get a list of sub accounts.
Update an account.
Update a sis id.
Get auth settings for an account.
Update auth settings for an account.
Get a term by sis id.
Import csv into canvas.
Import data from a directory.
Get the status of a sis import
Builds a zip archive from csv files.
Get assignments for a course.
Updates an existing assignment.
Get all available reports for a given account.
Get reports by type.
Create a report.
Create a new course provisioning report.
Create a course sis export report.
Create a new unused courses report.
Get report data.
Get report status.
Delete a report.
Move detections from one label to another.
Flip detections horizontally.
Get a dict from an object.
Get configuration from settings or settings.
Return the empty value.
Create metrics for the given metric configurations.
Setup the logging module.
Configure the registry.
Create metrics from a list of metric configurations.
Get a metric by name and labels.
Handle home page.
Handle metrics requests.
Send a query to the wolframalpha API
Fix http content type and param.
Send a query to the API.
Return information about the pods assumptions warnings and warnings.
Return a generator of all pods that have primary or title.
Encode data into JSON.
Perform a GET request.
Deletes the specified URL.
Make a PUT request to the specified url.
Make a POST request.
Returns a list of sentences grouped by total nb sentences.
Disambiguates a pdf file.
Disambiguate a query.
Segment the given text using the segmentation service.
Get a language from a text file.
Get concept by concept id
Fit the ensemble to the given features and classes.
Score the given features using the given scoring function.
Fits the classifier and predicts class labels.
Score the given features using the given scoring function.
Transform features into a new feature.
Computes the score of the given features and targets.
Return the vector representation of the given members.
Return vector representation of members.
Compile and execute a file.
Compiles the given stream and executes each form in the stream.
Evaluate a string using the compiler.
Return the bootstrap module for the given namespace.
Run basilisp.
Add a method to the map.
Add a method to the multi function.
Remove a method from a map.
Remove a method from the multi - function.
Returns true if the given variable is a macro.
Return the line and column indices of the given form.
Assert no recur.
Assert that the given node is a tail statement.
Resolve a bare symbol.
Resolve a sym. symbol.
Parse an AST form.
Warn on shadowed name or entry.
Return a string representation of the given list of entries.
Return a string representation of an iterable.
Return a human - readable representation of an object.
Replace missing locations with new attributes.
Compiles the given form and executes it.
Incrementally compile a module.
Compiles the given list of forms into the given module.
Compiles the given bytecode into a Python module.
Return the sequence of the elements of the iterable s.
Munge a string.
Return a fraction of the given numerator and denominator.
Get logging handler.
Map key - value pairs to key - value pairs.
Partition a collection into n partitions.
Read a namespaced string from the reader.
Read a collection from the reader.
Read a list from the reader.
Read a vector from the reader.
Read a map from a file - like object.
Reads a string from the reader.
Read a symbol from the reader.
Read a keyword from the reader.
Read meta from the reader.
Read quotes from the reader.
Expand syntax quote elements in form.
Read a syntax quoted form.
Read a consuming comment as a lisp form.
Reads a character from the reader.
Read a regular expression from the file.
Read a reader macro.
Read the next consuming comment.
Read the next token from the reader.
Read a string from a string.
Read a file and return an iterable of strings.
Update the loc with the character c.
Pushes the current pushback to the stack. Raises an error if the pushback is
Return the next token from the stream.
Generate a basilisp bytecode from mtime source size and code.
Get a basilisp bytecode from the cache.
Create a cache file from a source file.
Hook imports into sys. meta path.
Find a module by fullname and path.
Execute a cached module.
Compile a module and cache it.
Execute a module.
Create a symbol with the given name and namespace.
Complete text with interns.
Get or create a keyword if it doesn t exist.
Return a keyword with the given name and namespace.
Return the dependencies and nodes of the given genned AST.
Generate an AST for a collection of nodes.
Return a pyast with the given env.
Decorate a function to return an ast with lineno and col.
Decorator to mark functions as dependencies.
Determine if a variable is dynamic.
Return true if v is redefable.
Return an ast. ast. expr representing the statement e.
Decorator for expressionizing a function.
Convert a do node to an ast node.
Return the name of a function.
Decorator to convert function arguments to py ast.
Create an ast for a single arity function.
Convert an AST node to a py ast node.
Convert body to py ast.
Generate an ast for the given invoke node.
Convert node to py ast.
Recur to py ast.
Recurses the given node to the given node.
Set the bang value to py ast.
Return an ast that raises an exception.
Try to generate Python code for the given node.
Convert local sym to py ast.
Find a variable in a py var.
Convert a variable to a py ast.
Create an interop operator for the given node.
Convert maybe class to py ast.
Convert maybe host form to py ast.
Convert const value to py ast.
Convert a collection literal to py ast.
Generate an ast.
Iterate over all the module imports in the context.
Return an ast. import from a module.
Assign a namespace to a module.
Return a set containing the members of the given iterable.
Return the set of members of the specified type.
Handle except handler.
If node. value is a constant return it. Otherwise return None.
Visit a function def node.
Return an ast. While node.
Return a copy of the given try node.
Create a new module.
Return the first occurrence of o or none if o is None.
Return the rest of an optional sequence.
Return the nth rest of a collection.
Return the next nth element of a sequence.
Return the cons of o with seq.
Convert an object to a sequence.
Concatenate multiple sequences into one.
Associative wrapper for map. assoc.
Conjuction function.
Recursively deref an object.
Return True if v1 equals v2
Divide x and y by y.
Sort a collection by f.
Returns True if the collection contains the given key.
Get the value of a key or the default if the key is not found.
Convert an object to a lisp string.
Convert an object to a Python object.
Return a human - readable string representation of an object.
Collect args from a tuple or tuple.
Decorator for basilisp functions.
Resolve an alias for a symbol.
Resolve an alias for the given symbol.
Add a generated python variable to a generated python variable.
Interns a variable with the given name and value.
Interns a namespace unbound.
Find the name of a symbol in a namespace.
Find a symbol in a namespace.
Find a safe symbol.
Add default import to gated imports.
Add an alias to the symbol.
Interns the symbol sym with the given var.
Allocate a new variable from a map.
Find a reference entry for a symbol.
Add an import to the symbol.
Get the import for the given symbol.
Add a refer to a symbol.
Return the refernce of the symbol sym.
Given a set of namespaces and a set of interns return the final set of references.
Reference all of the namespaces in other namespace.
Get or create a namespace.
Get or create a namespace.
Get the value of the named symbol.
Remove an optional namespace from the map.
Complete an alias for a namespace.
Yields the complete imports and aliases for the specified module.
Returns the interns of the given value.
Returns a list of strings that refer to the given value.
Completes the given text.
Return the list of varargs.
Return a list of members.
Return a list of members.
Decrypts a JWT token and returns the decoded payload.
Encrypts a JWT using the given key store.
Delete an item from the cache.
Return the selector comparison and argument as a tuple.
Parse a fiql string into a fiql expression.
Dump a model to a file.
Convert date values to datetime objects.
Decode a date into a datetime object.
Decode a date value.
Return the default value for obj.
Validate version string.
Return a robust topological sort of a graph.
Set the parent expression.
Get the parent expression.
Add an element to the expression.
Add an AND operator to the expression.
Return a new expression with the OR operator applied to elements.
Parse a receive string into a list of dicts.
Convert a list of tuples into a dict.
Check if a list of messages matches a given command.
Prepare a send message for sending.
Flush the buffer to the socket.
Enable a slide.
Save a template to a file.
Get information about the device.
Locate the systemjs package json directory.
Parses the package json file and returns the data as a dict.
Handle an API error.
Validate yourls response.
homogenize wavelengths.
Interpolate indep vector using linear interpolation.
Get the indep vector of wavelengths between wavelengths a and wavelength b.
Verify compatibility between wavelengths.
Load the systemjs manifest.
Trace callables in callables and out callables.
Expand a short URL.
Returns a shortened url for the given short url.
Returns a list of links and stats for a given filter.
Get database stats.
Split an iterable into chunks of size chunksize.
Flatten an iterable.
Print a table in tab - separated format.
Create a dummy class with the given name and attributes.
Create a Conversion from a human readable string.
Traces the specified module and its callables.
Output links to the given mobj.
Append a common entry to the plist.
Append multi entry to plist.
Convert an item to a list of words.
Split noise into frequencies.
Chunk frequencies by pformat.
Bound waveform.
Build a string of the appropriate units for the given operation.
Apply an operation to wavelength wavelength wavelength desc units and fpointer
Calculate the running area of a dependency vector.
Validate that the input dependencies are within the specified range.
Return the arccos of a wave.
Acosh a wave.
Return the arcsin representation of a wave.
Return the arctanh of a wave.
Return a copy of wave.
Frequency - group delay for wave.
Logarithm of the log of a wave.
Return the square root of a wave.
Return the complex wavelength.
Convert wave to float.
Return a copy of wave.
Return a list of files matching the given path.
Get short description from long desc.
Build an expression from a list of tokens.
Remove the next item from the list.
Returns a list of functions for the given expression.
Parse a string of text into an expression.
Remove consecutive delims from expr.
Convert a number to a scientific tuple.
Return a scientific representation of a number.
Return the pength of a string.
Return the fractional part of a string.
Peng mant number.
Check if the app needs a extension.
Run the bundle command.
Return the trace for the given app.
Check if the given dependency tree matches the hashes of the given dependencies.
Format a hexdump string.
Parses a docstring and returns a dictionary of parameters and returns.
Return a list of valid identifiers.
Add a new action to the context.
Split a line by quotes.
Check the initialize context.
Return help text for builtin functions.
Find a function in the given context.
Return a listing of all available functions in the specified context.
Return True if arg is a flag.
Extract an argument value from the remaining list.
Invoke a string on the given line.
Classify a section.
Classify a line.
Join a list of lines into a single list of paragraphs.
Convert a value to a type.
Convert binary value to type.
Returns the size of the given type.
Checks if the given type name is known to be a known type.
Split typename into base bool and subs.
Instantiate a type and inject it into the system.
Check if the format is known for the given type.
Loads the specified module and injects it into the module.
Add a parameter to the annotated params dictionary.
Set the return value of a typed type.
Custom return value.
Match a short name.
Returns the type of the parameter with the given name.
Format the return value.
Convert positional argument to positional value.
Convert an argument to a type.
Format the message as a string.
Return the message as a dictionary.
Execute a function and return the result.
Parse a list of validators into a list of tuples.
Find all annotated metadata objects in a container.
Given a module return the name of the module and the context.
Get the help text for a function.
Decorator for functions that cannot be decorated.
Mark a function as annotated.
Return a short description of a function.
Load all modules from the project module.
Install crontab.
Print all registered tasks.
Uninstalls the kronos package.
Create a new resource.
Loads the project configuration from a yaml file.
Save a dictionary of projects to disk.
Returns a dictionary of all dependent projects.
Initialize a project.
Decorator for functions that raise an error if the function is not implemented.
Apply a function f to the state.
View the fold.
Return the fold as a list of strings.
Apply a function over this setter.
Set the state of the setter.
Iterate over an iterable.
Return kind of optic.
Main function for the game loop.
Step towards another vector.
Handle input.
Advances all robots to the current player.
End the game.
Moves the player to the specified board.
Play the game.
Moves the player to the specified position.
Return the winner of the game.
Yield potential wins.
Process an item and upload it to the server.
Open spider.
Upload a chunk of data to S3.
Create a gzip - compressed file object.
Get the state of an account.
Get the state of an asset.
Get the hash of a block.
Get the sys fee for the specified block.
Get the state of a contract.
Get the raw value of a transaction.
Get the value of a storage script.
Get the value of a tx by hash and index.
Invoke a script with the given hash with the given params.
Executes a JSON - RPC function and returns the result.
Invoke a JSON - RPC script.
Send a raw JSON - RPC transaction.
Validate an address.
Make a call to the server.
Return True if s is a valid hash256 string.
Check if a string is a hash160 string.
Encodes a list of invocation parameters into a list of contract parameters.
Decode an invocation result.
Apply the apply to the given datetime object using the given timezone.
Render the template and save it to a file.
Render barcode.
Renders the given code.
Entry point for the command line interface.
Download a file from S3.
Upload a file to S3.
Downsync a file map in a specified section.
Show the diff of a section.
Parse an environment variable from a string.
Set basic credentials.
Add api key to config. api key
Get json content from folder.
Get all schemas in the json path.
Get the schema from the schema folder
Get the resolver for this schema.
Validates the given object against this schema.
Returns a list of examples that are valid for this project.
Returns a list of examples that are not present in the schema.
Returns the auth url for this client.
Process url and return auth code.
Get the auth token.
Get user id.
List all files in a folder.
Create a new directory in the specified folder.
Add a comment to an object.
Decode an object to a unicode string.
Set the drop target of an object.
start drag opperation
Set default designer and inspector for tlw
Inspects an object and displays it.
Migrate a font to a new one.
Loads a page from a location
Send a message to the user.
Performs a wellcome tip.
mouse down event handler
Moves the mouse to the current position.
Handle key press events.
Deletes all objects from the selection.
Duplicates the current selection.
Refresh the snapshot of the object
Calculate the best position for the given widget.
Get the py data for the given item
Set py data for item
Find a data item in the tree.
Delete an item from the list
Delete all items from the list
Clear all columns from the table.
Set the selection for this command.
Get the string selection of the object.
Set client data
Append a string to the end of the list
Get a window object by its name.
Add a child to the sizer
Set the parent of this component
Tile the background of the bitmap.
erase background event handler
paint event handler
Returns a sorted list of column headings.
Resets the view to the specified grid.
Update the values of the grid.
Update the column attributes in the grid
Sort a column in the table.
Clears all cells from the grid.
Create a new combo box
Begin edit.
End edit operation.
Return True if the key is accepted by the user.
Set the starting key of the key selection.
Enables the specified value in all menu items.
Check if menu item is enabled.
Enables the specified value in all menus.
Check if the menu is enabled.
Remove an item from the menu list.
Set object tag.
visit an autosummary table node by traversing the autosummary table
Return a documenter for the given object.
Mangle a signature to a maximum number of characters.
Import a module by its name.
Link a role to an object.
Display a message with the specified title and optional icon.
Prompt the user to enter a text entry.
Display a dialog to select a font
Show a color dialog with the given message title and color.
Choose a directory from the user.
Finds the first occurrence of default in the specified whole words.
Set item has children
Set wx icon
Parse a file and return a datetime object.
Save rsrc to a file.
Build a window from a dictionary.
Build a component from a dictionary res.
Convert a pythoncard name to a pythoncard name.
Set clipboard data
Find autosummary in a docstring.
Load an object into the tree.
Inspects the tree and activates the context menu.
Activate an item in the tree
Update the tree.
Show context menu.
Convert a value to a hyperlinked image.
Assert that the current path exists.
Assert that the given path has no current path.
Select option.
Returns a webdriver object for the specified browser.
Return the XPath representation of the expression.
Switches to the specified frame.
Context manager for accepting alerts.
Prompt the user to accept text and wait for confirmation.
Context manager for showing a modal dialog.
Prompt the user to accept a text or response.
Context manager for showing a modal dialog.
Saves the current page to a file.
Saves a screenshot to disk.
Raise the server error if there is an error.
Returns True if the field identified by locator has checked field.
Returns True if the field with locator locator has no checked field.
Check if element has unchecked field.
Returns True if the field identified by locator has no unchecked field.
Test if the given title matches the expectation.
Test if there is no title with the given title.
Return the inner content of a node.
Return the inner text of a node.
Normalizes a URL and returns a normalized URL.
Return True if error should be caught.
Compare the count of the results and return the result.
Return True if cache has at least size elements.
Returns True if any of the given options matches any of the given options.
Format a failure message.
Check if the given count matches the given options.
Normalize text.
Normalize whitespace in text.
Convert text to a regular expression.
Resolves the current URL and returns True if the current URL matches the expected URL.
Resizes the window to the specified width and height.
Boot the capybara server
Set the fcget parameter to be used for the getter function.
Set instance method.
Set the class method.
Return the traceback as a string.
Return the string representation of the object.
Get the logger for the given instance.
Set the logger to use.
Make a call to the API.
Returns a list of channel names.
Returns a list of users.
Create a message from text and channel.
Translate Slack message.
Send slack message.
Read a channel from the channel layer.
Run Slack API.
Run the client.
Return a dict with the differences between prv and nxt.
Colorize a message according to the given color.
Start a playbook on a task.
Print the stats to the console.
Runner for skipped tasks.
Convert a prefix to a addrmask string.
Add a model to this element.
Load filters from jinja
Finds a yang file in the specified path.
Make an HTTP POST request.
Get the authorization code URI for this client.
Get a specific token.
Returns the query parameters for the given url.
Remove query parameters from a URL.
Build a URL from a base URL.
Handle an exception.
Create a response object.
Make a redirect error response.
Make a JSON response.
Get the authorization code for a client.
Refresh an access token.
Get a new access token.
Get authorization code from uri.
Get token from POST data.
Get the authorization object for this request.
Open the device.
Read a single byte from the device.
Read bytes from the device.
Read byte data from the device.
Write bytes to the device.
Write byte data to the device.
Write a block of data to the device.
Create a copy of the current object.
Create a new local copy of the CDN.
Construct a File object from a file info dictionary.
Uploads a file to the server.
Returns a list of file cdn urls.
Construct a group from a dictionary.
Create a new group from a list of files
Perform a base opration request.
Generate uuids of all files in the sequence.
Create a list from an API list.
Yields chunks of content with progress bar.
Home mode status.
Get a list of all cameras.
Get camera information for a list of camera IDs.
Get a snapshot of a camera.
camera event motion enum
Save a camera.
Update the camera settings.
Return true if the given li is the last element of the given meta data.
Get a single list of nodes.
Get the value of an ilvl element in a given namespace.
Get the value of the merge of the given tc. If tc is none return none.
Get the number of grid spans in the given tc.
Get the td at the given index.
Return True if style is false.
Return true if r is bold.
Returns true if r is italics.
Return True if r is underlined.
Returns true if the given element is a title of the given element.
Get text run content data.
Get information about a relationship tree.
Get ordered list of numbering style.
Build a table element.
Get the content of a tag.
Removes all elements with the specified tag from the tree.
Find a file in the datasets directory.
Load a mnist from a file.
Plot a list of images.
Plot a list of layers.
Plot filters.
Encode txt into a list of floats.
Add convolution weights to self. params.
Decode z into a graph.
Score x using the autoencoder.
Predict the outputs of x.
Predict the probability of x.
Predict the logit of x.
Returns a list of the target variables.
Compute the accuracy of the model.
Build an activation layer.
Generate a reservoir from a list of xs
Add a loss to the model.
Train the model and return a list of all monitors.
Build a graph from a list of regularizers.
Returns a list of input layers.
Returns a list of all variables in the loss.
Saves the pickled object to a file.
Load a network from a file or handle.
Compute the loss of the graph.
Build the updates graph.
The size of the output array.
Resolves the input shapes for the given layers.
Resolve input shapes and output shapes.
Log the input shapes and parameters.
Returns the logarithm of the parameters
Formats the given string according to the current format.
Resolve a shape by name.
Find a parameter by its key.
Add bias to the parameters.
Convert form to spec.
Log - gaussian approximation.
Log - gaussian log - gaussian image
Add a tier to the list.
Remove tier with name name num from tiers
Get the tier with the given name.
Convert this TimeSeries to an eaf. eaf object.
Add a point to this tier.
Add a new interval to this tier.
Remove an interval from the tier.
Remove a point from the interval.
Returns a generator of the intervals in this interval range.
Returns a list of all intervals in the interval range.
Indent the given el with the given level.
Add an annotation to a tier.
Add a description to a controlled vocabulary.
Add an external reference to an external reference.
Add a reference to a lexicon.
Add a linguistic type to the model.
Add a locale to the registry.
Remove all time slots from the tiers.
Extract annotation data from the EAF.
Generate an annotation id.
Generate a timeslot id for the given time slot.
Get all child tiers with the given tier id.
Get the full time interval of the current time slot.
Get the ref annotation data for the given tier and time.
Get the reference annotation data between the given tier and time.
Returns a list of tier ids for the given linguistic type.
Remove all annotations from a tier.
Remove a description from a controlled vocabulary.
Remove a license from the registry.
Remove linked files from media descriptors.
Remove a property from this object.
Remove an annotation from a tier.
Remove secondary linked files.
Remove a tier from the schedule.
Remove tiers from the schedule.
Rename a tier.
Shift the annotations to the given time.
Print a storage dict to stderr.
Get embedding levels from text.
Embed embeddings explicit embeddings.
Resolves the neutral types in the given storage.
Reverse contiguous contiguous contiguous sequence of characters.
Reorder resolved levels.
Normalise the current scene.
Add an attribute to an object.
Command - line interface for the command line interface.
maintain backwards compatibility for binding
Show the current state of the GUI.
Discover the registered guis.
Add a script to the filemenu
Context manager for temporarily maintained selection.
Context manager that ensures that the current time is maintained.
Show no gui.
Returns the cumulative data of the series.
Returns a list of values for each axis in the dataset.
Draw a constant line.
Load transform parameters.
Reverse a mapping.
Generate a range of floats.
Validates and adds conf to self. data.
Renders the graph and renders it.
Calculate the left margin of the chart.
Calculate right margin.
Calculate the margin of the top margin of the graph.
add popup to foreground
Calculate the bottom margin of the chart.
Draws the graph.
Make text for a datapoint.
Draw x - axis labels.
Draw the y - axis labels.
Draw the x - axis guidelines
Draw the y - axis guidelines.
Draws the titles of the graph.
Render inline styles.
Starts a new svg document.
Return a list of stylesheet resources.
Run a bot.
Send data to the socket.
Connect to the server.
Send a message to a specific channel or nick.
Dispatch patterns.
Create a new nick.
Handle a ping message.
Handle the registered event.
Enter event loop.
Register a new boss on the node.
Run the task runner.
Return a tuple of command patterns.
Register a success message.
Execute a command on a task.
Add a nick to the queue.
Send validation email.
Send password reset notification.
Verify a token.
Delete a user.
Allow a request to be throttled.
Return the Docker client for this Docker client.
TLS client certificate and key.
The name of the service.
Executes a docker command.
Executes a docker command and returns the result.
Poll the status of a service.
Stop the Docker container.
Filters the queryset with the given value.
Update an instance with the validated data.
Update password with validated data.
Validate email address.
Create a new token for a user.
Delete a token.
If the user is not authenticated and the user is not authenticated raise permission denied.
Handle POST requests.
Update the expiration time of the object.
Reset email context for a notification.
Send email notification.
Handle password reset email notification.
Handle validation email notification.
Authenticates the user with the given key.
Authenticates the user and token with the given key.
Show a notebook.
Process a list of hv plots.
Get a custom javascript callback for a change.
Returns a widget with the given name.
Renders the given object using the given view.
Create a text input widget.
Given a list of named objects return a list of tuples.
Get the owner of a method.
Assign auth values based on http auth.
Send a ping request.
Get information about the device.
Perform a health check.
Convert number of bytes to readable string.
CPU total load
Return the memory size of the syno.
Get the network up to the specified number.
Returns a list of volumes.
Get a volume by its id.
Get the size of a volume in bytes.
Returns the percentage used for a volume.
Get the average disk temp for a volume.
Get the maximum disk temp for a volume.
Get disk by disk id.
Login to the API.
Executes a GET request and returns the response.
Execute a GET request and return the response.
Update utilisation storage and utilisation
Get the syno utilisation
Get the syno storage object.
Create a context for the given request.
Get the tenant token.
Build the attributes for this widget.
Add apps to installed apps.
Remove apps from settings. installed apps
Return the global settings as a dictionary.
Handle GET requests.
Change the value of a key in the configfile.
Migrate a config file.
Start a webserver.
Wait for the server to respond.
Get new access information.
Check if the token is present in the config.
Set access credentials.
Create a manifest table.
Split a full path into bucket and prefix.
Check if a bucket is a glacier.
Remove empty values from a dict.
Add a run to DynamoDB manifest.
Check if a run is in manifest.
Extract a schema from a URI.
Fix a schema in a human readable form.
Parse a JSON unstruct and return a schema and inner data structure.
Transform a line of text into a good event.
JSONify a good event.
Get used template from response.
Print a list of contexts.
Print all the variables in the context.
Formats the given SQL into HTML.
Pretty print an object.
Pretty print a dict summary.
Apply style text to a string.
Format the given object using pretty printer.
Format the given object to stream.
Get a latex token from a string.
Return a list of latex nodes from a string.
Convert latex content to text.
Convert latex to text.
Remove ascii characters from a string.
Get organisation information.
Get boards.
Get all members of the organization.
Update an organisation.
Remove a member from a group.
Add a member by id
Add a member to a group.
Get a list of information about the current user.
Add a card to your account.
Get label information.
Performs a GET request and returns a list of items.
Update a label by name
Update a label.
Returns the authorisation url for the given application name and token.
Get card information.
Get a board.
Get a list of resources.
Get all the checklists for this account.
Add a comment to the comment list.
Add an attachment to a file.
Add a checklist to this account.
Add a label from a dictionary.
Add a label to this object.
Add a member to a group.
Get member information.
Get a list of cards.
Get organisations.
Create a new board.
Get board information.
Get a list of lists.
Returns a list of labels for the current user.
Get a card by id.
Get all the checklists for this account.
Get an organisation.
Update a board.
Add a list of items to the collection.
Add a label to the list.
Get checklist information.
Get a card from checklist
Returns a list of items for this checklist.
Update a checklist
Add an item to this collection.
Remove an item from your account.
Update name of a checklistitem
Update the state of a checklistitem
Add authorisation to query params.
Check for errors.
Build a URI from the given path and query parameters.
Fetch a JSON object from the API.
Create an organisation
Create a board on this client.
Create a label
Create a list
Create a card
Create a checklist
Create a member in ThreatConnect
Get an organisation by id.
Get a board by id.
Get a list by id.
Get a card by id.
Get a checklist.
Get a member by id or name.
Create a new domain from a URL.
Convert text to raw text markupless.
Set the password for a service.
Split text with locations.
Mark text as a regex in the given locations.
Mark text as the beginning of the end of the regex.
Main entry point for the CLI.
Create a cipher with the given password and salt.
Get the mode of the cipher.
Return the number of items in the priority list.
Check the scheme of the configuration.
Publish a message to a topic.
Return a unique id for the object.
Connect to the broker.
Handle a ACK packet.
Encode a string into a bytearray.
Decodes a string and returns the decoded string and the decoded string.
Encodes a 16 bit integer into a bytearray.
Encode the length of a string.
Decode a length encoded string.
Encode the packet into a string.
Encode the message into a string.
Decode a packet.
Encode the result into a string.
Decode a packet.
Decodes the given packet.
Encode the message.
Encode the message into a string.
Decode a packet.
Encode the message.
Encode the message into a string.
Decode a packet.
Decode a packet.
Returns the url for this request.
Make a request to the API.
Refresh the list of blocks.
Formats the given data into a dataset and sampled.
Apply the fitting to the data.
Fit kmeans to data.
Predict clusters for the given data.
Map a set of clusters to a specified number of samples.
Sort clusters based on the mean of each cluster.
Get a date from a datetime object.
Get the total number of points in a dictionary.
Get the total time span of a dictionary.
Unitpicker function for unitpicker.
Return pretty element of a string.
Analyte 2 namemass
Convert a string to an analyte 2 mass name
Collate data from a directory.
Enumerate a boolean array.
Convert a list of tuples to a 2 - dimensional bool array.
Fast smoother.
Fast gradient of a using rolling window.
Find the minimum of x and y.
Cluster the data using meanshift.
Cluster the data using kmeans.
Get the set of defined srms from a srm file.
Read configuration from disk.
Read latools. cfg file and configparser
Copy a srm file to the specified destination.
Exclude downholes from a filter.
autorange plot.
Calculates the number of times each epoch is the number of times each epoch is the number of
Calculate the ratio of analytes to the internal standard.
Calibrates the given parameters using the calibrate function.
Returns a dictionary of the ablation times of the time series.
Calculate the correlation between two points.
Add a new filter
Returns a dictionary of parameters and sequence
Plot a series of histograms.
Load reference data.
Calculate the molecular mass of a molecule.
Generate namedtuple with keyword arguments and keyword arguments.
annihilate the stack with predicate and stack.
Dedup the stack by applying a Dedup function to the stack.
Computes the weighted statistics of the gaussian distribution.
Generalized Gauss - Gaussian Distribution
Return the standard deviation of stderr a.
Get the samples for the specified subset.
Calculate the ratio of the current stage to the internal standard.
Make a subset from a list of samples.
Apply a classifier to the data.
Filter the subsets by removed or filtered.
Filter reports based on a filter.
Export traces for the minimal dataset.
Save the log to a file.
Apply a function to each element of a sequence applying a function f to each element of a sequence
Bayesian scale.
Scale the median value of a string.
Despike noise.
Despike despike function.
Add a new component to the index.
Remove a component or a set from this switch.
Clears the internal state.
Remove unused switches.
Return the value of fuzzmatch for fuzzkey.
Grab a filter from a key or dict.
Return information about the component.
Write a log to a file.
Read a logfile and return a dictionary of runargs and runargs.
Get information about the modem.
Send a message via eternalegypt
Parses the given file or string into a SQL file syntax object.
Return the nbviewer link for the given url.
Return the thumbnail div for this snippet.
Returns the div code for this snippet.
The code example.
The url of the view.
Get the output file name.
Create a new python file.
Download data from a list of files.
Create a thumbnail for the current image.
Scale an image by max width and max height.
Saves the thumbnail to the given path.
Copies the thumbnail figure to the output file.
Returns the URL for the given nbfile.
Yields the language code for the given field name and db table fields.
Process a thumbnail file.
Pre save method.
Return all thumbnails.
Create a thumbnail of the given size.
Delete the thumbnail for the given size.
Create a new thumbnail.
Get a thumbnail for the given source name and size.
Delete a thumbnail.
Receive a message from the server.
Subscribe to a number of digits.
Returns a set of all accepted and expired states.
Send a message to the server.
Returns a mapping of receiver blueprint names to receiver blueprints.
Receive a message from the provider.
Receive a status from the provider.
Forward an incoming message to all clients.
Sign a web3 transaction.
Estimate the gas estimate for a given web3 address.
Estimate the value of a safe gas.
Write bytes to the stream.
Read a line from the serial port.
Check if the message has any bad headers.
Attach an attachment to this message.
Registers the given services.
Load a configuration from a module.
Register resources.
Require a key to be present in the configuration.
Exit an object.
Setup the dispatcher.
Return the number of ng wavelength.
Returns the Cauchy equation for the given wavelength and coefficients.
Deletes the specified resource.
Check if two paths are the same.
Create a link in the filesystem.
Initialize the logging module.
Raise a usage error.
Claim the readers and vcf readers for this variant.
Get new column header from vcf reader.
Claim a set of vcf readers for a given set of file readers.
Initialize the population stats for the given vcf reader.
Claims the readers of the callers and returns the unclaimed file readers and the
Split data into lines.
Return the first line terminator that starts with data.
Return the last line terminator that ends with data.
Seek to the next line in the file.
Seek to the previous line in the file.
Return the last lines of the file.
Return the head of the file.
Follow the file until EOF is reached.
Claim readers and vcf readers.
Parse a vcf record.
Extract sample tag values from vcf record
Format tags in vcf format.
Join info fields into a string.
Format field.
Return a string representation of a sample field.
Return a string representation of the field.
Add a sample tag value to the given sample values.
Add or replace a filter.
Return a list of all available categories for the user.
Create a products form for the given category and list of products
Factory for staff products form.
Add an error for a product.
Factory for creating model fields form.
List items pending or purchased.
Send an email to a specific kind.
Parse an osm file and return nodes ways and relations.
Iterate over osm notes for a given feed.
Returns True if the user passes the filter.
Check if a user is met.
Returns the number of items that have been remaining for the given user. If filtered is True the
Filters the queryset to ensure that the user is in the category productitem cart.
Remove items that are not in user carts.
Apply pre filter to queryset.
Pre filter for proposal base presentation.
Filter the conditions before filtering.
Create a new cart for the specified user.
Automatically extend the reservation for this cart.
Apply voucher code to cart. vouchers
Fix vouchers that are not available in cart.
Recalculate discounts for all items in the cart.
Iterate over the rows of the table.
Returns the form to use when rendering the request.
Renders the given data.
List reports.
List items sold.
Report payments for the invoice.
Refund all credit notes.
Report product status.
Display the current status of discounts.
Report product line items.
Get paid invoices by date.
Add credit notes.
Show invoices.
List all the attendees of the current user.
List speaker registrations.
Return a set of all available categories that are not pending or purchased.
Return the number of available credit for this invoice.
Check if ticket product category is available and unregistered.
Edit profile.
Handle a profile request.
Handles the products request.
Handle voucher form.
Allows a user to enter a manual payment.
Refund an invoice.
Extend a reservation for a user.
Send an invoice email.
Invoices with badges.
Render badge.
Return a list of available discounts for the given user.
Annotate items with past uses.
Return a list of available products for the specified user.
Apply this payment to an invoice.
Returns the cancellation fee for the credit note.
Generate a random access code.
Get an object by name.
Generate an invoice from a cart.
Invoice a manual invoice.
Apply credit notes to an invoice.
Check if the invoice can view the given access code.
Refresh the invoice.
Validates that the invoice is allowed to pay.
Update the status of the invoice.
Mark the invoice as paid.
Check if the invoice matches the cart.
Update validity of the invoice.
Mark the invoice as void.
Refund the invoice.
Send email to invoice s user.
Update the annotation with the given data.
Flatten a field into a flat dict.
Print downloads.
Download the specified field from the gencloud.
Get processor information.
Print processor inputs.
Run data from a JSON string.
Upload a processor to a project.
Upload a file to the server.
Download data from the API.
Return a list of all subclasses of a class.
Get repo and project.
Get variant phenotypes with suggested changes.
Get variant phenotypes with suggested changes merged.
Update this element with new values from the cache.
Remove duplicates from a sequence.
Authenticate with Asana and Github.
Prompts the user to select items from a list.
Get the data for a saved issue.
Move a saved issue to a new location.
Get saved task data.
Get asana task by id.
Apply a command to a value.
Flush all items from the queue.
Create a missing task in Asana workspace.
Return all the data types for this project.
Log a string with ekmmeters.
Initialize the serial port.
Set polling values.
Render json reads since the given timestamp and meter.
Set the context string.
Calculate the number of observations in the given pf.
Set the maximum demand period.
Set meter password.
Get the months buffer for the given direction.
Assign a schedule to the current schedule.
Assign a season schedule to the current season month day and schedules.
Assign holiday date to current holiday date.
Read schedules from a tableset.
Read tariffs for a given month.
Read holiday dates.
Return True if read settings are valid.
Write a message to the command line.
Authenticate to the serial port.
Update all observers.
Send a request and update observers.
Request a meter and return the checksum.
Request a byte from the server.
Make a copy of the req dict.
Set the list of display items in the lcd
Set relay status and password.
Post end method.
Set pulse input ratio.
Set a zero resettable kwh.
Set the current lcd.
Iterate over fields in a schema.
Iterate over all fields in a schema.
Generate a random text string.
Return a string with the timing and the result.
Color the text with the given color.
Print text to the stream.
Return a summary of the result.
Parse command line arguments.
Set up the result formatter.
Run the example.
Transforms the given configuration into a string.
Return an ast. class that transforms a describe node to its body.
Transform the body of a describe body.
Return a function that transforms the example.
Transform example body into example body.
Returns an ast. Arguments that takes only this function.
Register a finder.
Convert source bytes to code.
Apply a parser to arguments and return the parsed arguments.
Load a module by name.
Load a module from a path.
Discover files in a directory.
Remove a place configuration file.
Restart a place.
Call the places function.
Make a service.
Refresh the session for the specified node.
Remove expired nodes from the cluster.
Remove a node from the cluster.
Get the last updated time for a node.
Get all nodes in the cluster.
Refresh the session for the current nodelist.
Increment the times modified key.
Delimit a list of values by a delimiter.
Check if a path is bad.
Merges the given status into this one.
Check if the given value exists.
Get an identifier from a token.
Create a service.
Parse a reader and return the result.
Return an optional parser for the given input.
Replacement for parser. rep1.
Return a parser represeting the input sequence.
Replacement for parser. rep1sep.
Return a repeated separated parser with the given separator.
Closes the call and cancels the call.
Check if the connection is closed or not.
Create a heart service if it doesn t exist.
Wrap a service in a multi service.
Freeze a graph from a checkpoint.
Freeze a checkpoint.
Saves a graph from checkpoint to output file.
Save weights from checkpoint to output path.
Restore from a checkpoint.
Parse a tag and return a new Tag instance.
Render a tag.
Validate the arguments for a template tag.
Get context data.
Parse a tag and return a new Tag instance.
Get context data.
Convert a caffe model to a tensorflow session.
Freeze a caffe model.
Save a graph only to a tensorflow session.
Create a list of rows from a sequence of numbers.
Iterates over every item in an iterable yielding every other item.
Remove duplicates from an iterable.
Return the next element of an iterable and the original.
Suppress exceptions from a list of callables.
Assert that all elements in iterable have the same order.
Swap on miss partition.
Get the first n queues.
Resets the iterator and saved state to its original state.
Parse a token as a var.
Return the descendant keychain of the given path.
Iterate over an object recursively.
Select an object by selector.
Parse a selector and return a list of results.
Return the parents of rhs that are in lhs.
Return a list of nodes that are siblings of lhs and rhs.
Returns a list of nodes that match the given validators.
Make a GET request and return the response body.
Expire the cache with the given age.
Set a key - value pair in the store.
Get a value from the store.
Returns True if the store contains the given key.
Check if the chain is valid.
Create a new instance from a JSON string.
Create a new instance from an XML string.
Return rendered content.
Get the lines from the logfile and call fn on each line of the logfile.
Get a list of rows from the table.
Validate a token against the expected data.
Return the engine to use for the cryptography library.
Validate a token against supported digest algorithms.
Create a new token.
Return the 32 - bit counter of delta between two numbers.
Return the 64 - bit counter as a float.
Returns a string representing the average duration of the given total duration.
Create sources and trigger triggers.
Send an event to the specified source.
watchdog for source events.
Parse a format string.
Parse a log line and return a dictionary.
Validate expires at field. data.
Verify the token.
Name of the device.
Warn node if msg starts with str.
Connect to receivers.
Create a secret link for a record.
Send an accept notification.
Send confirmed notifications.
Send email validation notification.
Send a reject notification.
Send a notification.
Create a new token.
Validate token against expected data.
Revoke this link.
Create a new record.
Get a user by receiver.
Confirm that the request has been confirmed.
Create a secret link.
Generate a hash for the given version.
Verify the signature of a message.
Check if a record is embargoed.
Access a record.
Confirm a record.
Return a connection to the remote host.
Reverse the given column.
Returns the selected value.
Return the items in the query.
Get the version of the file.
Set the version of the file.
Start the timer.
Runs the current thread and waits for it to finish
Show a list of links.
Stop the connection.
Empty the queue.
Add a list of events to the event list.
Create Elasticsearch client.
Encodes an event into a protobuf event.
Encode a protobuf message.
Decode a protobuf message.
Send events to the server.
Generate a preview of a file.
Retrieve a file preview.
Loops the message loop.
Return True if the time delta is less than the log interval.
Abort the SASL session.
Apply a SASL mapping to a list of characters.
Returns the admin footer node for the given tag.
Build the payment parameters.
Build the parameters needed to register a credit card.
Build and authorize a payment with an alias.
Return a short version string for the given version number.
Post construction.
Configure shortcuts for the button.
Activate the item at the specified index.
Called when the user selects an item.
Called when the user clicks the navigate button.
Finalize the options.
Fetch all children of this node.
Returns the icon of the source at the given index.
Call subprocess. popen and return the child pid.
Get the maximum file descriptor.
Close a file descriptor.
Close all open fds.
Redirect the stream to the specified target.
Set form widgets attributes.
Import a module from an app.
Return a list of submodules for the given module name.
Include the given token with the given parser.
Check if a path is a valid file system.
Check if url is a valid s3 url.
Returns the absolute path of the given filename.
List all objects in a folder.
Build the worklfow json
Execute the workflow and update the id
Archive a folder.
Create a directory.
List all files matching a pattern.
Restore an archive to a new folder.
Create a new access token.
List all files in a folder.
Download a file from a path to a target path.
Check if the given path exists in the storage.
Get parent entity by path.
Create a new folder in the specified path.
Upload a local file to a destination path.
Delete a folder or file.
Validate a storage path.
Create a new Vault instance.
Create a new instance of this service.
Get metadata for an entity.
Delete a project.
Delete a folder.
Copy the content of the specified file to the specified source file.
Get signed URL for a file.
Append a record to the collection.
Convert a service to a set of service URLs.
Return a copy of this object with the specified headers.
Returns a copy of this object with the specified params.
Return a copy of this set with the given exception class and should throw.
Returns a list of field names that can be used to display the list
Apply a function to each sample in the input list and add it to the job.
Run oncotator on a vcf.
Sorts the list by the given function.
Returns a list of datetime objects representing the time of the query.
Load export from folder
Shift the string t by t.
Returns the sum of all the strings in the sequence.
Return the Rfxcom for the specified device.
Create a new user with username and password.
Parse vn results.
Parse release results.
Parse prod staff results.
Parse character results.
Parse tags and return list of tags.
Parse user results.
Create a tarball from a list of files.
Run op for all files in a list of paths.
Copy a file from a job to a temporary directory.
Returns a list of docker parameters for this host.
Refresh the metadata from the database.
Returns a list of all streams in the file.
Export data to a directory.
Parse search results.
Reset the device s apikey.
Returns a list of users in the database.
Run bwa index
Get the connector database.
Add a stream to the connector database.
Add a stream to the database.
Insert a new stream into the database.
Start the sync thread.
Stop synchronization thread.
Download url to local temp dir.
Upload a job to S3.
List the labels of an ontology.
Prints the hierarchy of the given ontology.
Get mean insert size of a bam.
Create a new schema in the repository.
Export the object to a JSON file.
Return a device object for this path.
Get the labels for the given ontology.
Returns an iterator over the hierarchy of the given ontology.
Get an empty config file.
Get the mount path for this container.
Add an option to parser.
Create an argument parser.
Create a pipeline.
Set the user or apikey and user password.
Handle the result received from the server.
Ping the server.
Create a new resource.
Update an existing resource.
Deletes the specified resource.
Subscribe to a stream.
Returns a list of all devices in the cluster.
Run a cutadapt tool.
Run samtools faidx
Run samtools index.
Run sambamba in the local temp directory.
Run samblaster.
Mark duplicates in bam and bai.
Run picard sort.
Run a kallisto tool.
Get user affinity for a test.
Send a command to the websocket.
Subscribe to a stream.
Connect to the websocket.
Reconnect to the device.
Resubscribe all subscriptions.
Called when the websocket connection is established.
Called when the websocket connection is closed.
Called when a websocket error occurs.
Process a message received from the websocket.
Ensures that the connection is still alive.
Select variants from a GATK.
Quick check for a bam
Write configuration to a JSON file.
Get the configuration as a dictionary.
Get a term from the ontology.
Search ontology by name.
Suggest a given ontology.
Iterate over all descendants of the given ontology.
Iterate over the labels of all descendants of the ontology.
Iterate over the labels of the given ontology.
Iterate over all terms in the hierarchy of the ontology.
Run fastqc on r1 r2.
Add a stream to the query.
Start the Spark container.
Start a Spark container.
Start a new datanode
Stop hdfs container
Check the status of this container.
Look up a hosted zone by name.
Fetch the configuration for a zone.
Merge a list of configuration chunks into a single XML string.
Validate a changeset.
Minimize the best n members.
Return the fitness score for this group.
Ave the cost function val of all processes.
Return the median cost function for all processes.
Returns the number of parameters for the current process.
Return a list of the members of the group.
Add a parameter to the list of parameters.
Normalize the keys of a list of items.
Yield environment variables from os. environ.
Runs a callable and returns True if the callable raises an exception.
Transform a list of hits into a list of packages.
Transform the result of a type typ into a string.
Convert html to xhtml
convert xhtml to html
Open a document in a web browser.
Remove this node from the tree.
Drop the tag from the parent.
Apply a cssselect expression to the document.
Iterate over all the members of the logger.
Get the counts of all environment variables.
Returns True if the class is a single class.
Check if a module is a single module.
Validates that the params of a request are correct.
Validate that the id of the request is correct.
Decode a file system path to a unicode string.
Escape any argument specifications in iterable.
Return the codec name for the given encoding.
Detect the encoding of the bom file.
Get the remote address of a forwarded object.
Convert an object to a number.
Parse a string and return a BeautifulSoup object.
Parse a file and return an etree. element tree.
Convert a BeautifulSoup tree into a list of children.
Get current traceback.
Return the traceback representation of the exception.
Render a summary of the exception.
Generate a plaintext traceback.
Render the source table as HTML.
Check if the egg info matches the given search name.
Sort a list of links by egg fragment.
Get the content type of the given url.
Return a generator of all links in the document.
Return whether this is verifiable or not.
Find data files that match the package and src dir.
Return a list of files that match the exclude package.
Parse requirements from a file.
Join lines of text into a single string.
Yield lines ignoring comments.
Visit a node and return an AST node.
Visit an attribute node.
Coerce a JSON value to a number.
Push the current app to the stack.
Pop the last reftrack from the stack.
Return a copy of the current request.
Match the request.
Push the current request to the stack.
Check if a distribution is editable.
Add a preprocessor function to the record.
Add a url default function to the record.
Get the root path of the specified import.
loader for jinja templates
Run the completion script.
Get cookie domain from app. config.
Check if wheeldir is a pure library.
Yield uninstalled paths from a distribution.
Check if a wheel is compatible or not.
Build a wheel if it exists.
Iterate over all symbols of a Python code.
Write a marker file to the specified directory.
Check if the system is running under virtualenv.
Get the username of the current user.
Return a distutils scheme.
Parse cache control headers.
Cache the response.
Load a template from a path.
Save the file to disk.
Convert a value to the appropriate converter.
Add filters to filterer.
Add handlers to logger.
Common logger configuration.
Compile and execute a Python script.
Temporarily overwrite a temporary directory.
Return the url and revision of the git repository.
Get an item from an object.
Generate a file from a source file.
Get the default cache path.
Find eggs in an importer archive.
Find distributions on a given path.
Declare a namespace.
Return the mro of the given class.
Find the adapter for ob in registry.
Ensure a directory exists.
Iterate over all entry points in a group.
Return True if dist can add to this dist.
Evaluate a marker expression.
Evaluate markerlib on text.
Format a record for logging.
Get the quantum of a number.
Get the precision of a number.
Returns the scientific notation elements of the given value.
Return an unpatched class.
Check requirements.
Fetch the build egg for the given req.
Roll dice.
Convert price object to price object.
Create a price attribute.
Validate the request.
Get a method from the app
Apply a method to args and return the result.
Return the module to use when creating a new module.
Returns the blueprint for this route.
Make a dist string from a req to install.
Walk req to find requirements that match handler.
Returns a list of all namespace packages.
Convert obj to str if obj is a model.
Tokenize a docstring using a given annotation.
Annotate merge annotations from old to new.
Copy the annotations from src to dest.
Compress a list of tokens into a list of tokens.
Serialize a list of tokens into HTML.
Expand a list of tokens into HTML.
Find the unbalanced end of the unbalanced string.
Fixup chunks of HTML.
Flattens an element into a list of HTML strings.
Split text into words.
Return the start tag of an element.
Return the end tag of an element.
Serialize an HTML fragment into a string.
Remove block level tags from doc.
Return a cache url for this service.
Recursively links the given element with the given link.
Kill conditional comments.
Create a document from an HTML string.
Export the repository to the specified location.
Get the revision number for a location.
The name of the module.
Propagate exceptions from config to testing or debug.
Try to find the instance path for this instance.
Update the template context with the given context.
Handle an HTTP exception.
Handle an exception.
Raise routing exception if debug is enabled.
Dispatch the request and return the response.
Create a default response object based on the specified adapter.
Create a url adapter for the given request.
Inject default values into the url.
Yield unique values from iterable.
Given a package info dict and a key handle the requires key.
Returns a string representing the requires specification of a requirement.
Convert a pkginfo. egg. PackageInfo object to a metadata object.
Iterate over all modules in this directory.
Iterate over all classes in this module.
Return a generator of names of all methods in the class.
Check if a path is a module path.
Yield root dirs and files from basedir.
Dump default values to kwargs.
Load keyword arguments from the current app. json decoder.
Set multiple key - value pairs in the cache.
Increment the value of a key by delta.
Serialize a Python object to a string.
Build editable options from an editable request.
Populate link with upgrade requirement.
Ensure that the source dir is not None.
Remove the temporary source if it exists.
Get the distribution for this project.
Return a list of site configuration directories.
Iterate over all the files in sys. modules.
Restarts the system with a restarter.
Convert a string to text.
Find a CA bundle.
Parses the given document using the given treebuilder.
Parse the given stream and return the document.
Parse a fragment from the given stream.
Translate a word into a sorted list of integers.
Convert command line arguments to tokens.
bind the http connection to the server
Print the report to stdout.
Load a bytecode from a file.
Return a dict with parameters for a stylesheet.
Run a command on the shell.
Get the version string for the current Python version.
Return a list of distributions for a given location and basename.
Find external links in a page.
Open a local file or a local file.
Return a list of paths that are not in sys. path.
Return a set of all paths in sys. path.
Add a package to sys. path.
Add a sitedir to sys. path.
Check if the usersite is enabled.
Add the alias for the current locale.
Set sys. encoding to str.
Force global eggs after local site packages.
Fix sys. path so that it starts with str.
Wrap subprocess. popen with a blocking thread.
Return True if there are pyrex implementations.
Convert pyx sources to language.
Iterates over the application and prints it to the response.
Get a resource from a file.
Return True if name is a valid URL.
Unpack a file from a link.
Download an http link to a temporary directory.
Check if a link exists in the download dir.
Register a currency format action.
Register a new component with the given backend.
Decode data using the decoder.
Default template processor.
Render a template and send it to the app.
Render a Jinja template.
Render a Jinja template string.
Parse a version string into a Python version object.
Returns True if the given name is declared locally or parameter.
Visit a name node.
Produce a string representation of the given node.
Create a service and serve forever.
Return a unicode version of obj.
Return a list of wheels that match a requirement.
Populate a requirement set with requirements.
Export a file to a temporary location.
Lookup an item in Amazon DynamoDB.
Iterate over pages.
Get the ancestor of this node.
List of all children of this node.
Get an element from a path.
Safe get element text.
Safe get date element.
Price and currency.
List price.
Send a request and build the response if needed.
Build the response from the request and response.
Return a title of a string
Compare two constant time strings.
Verifies the signature of the given key and value.
Derive a key from the secret key.
Get the signature for the given value.
Sign the value with the signature.
Verifies the signature of the given value.
Unsigns a signed value.
Sign the given value with the timestamp.
Validate a signed value.
Serialize an object to a string.
Send an error message to the server.
Yield packages that have parents.
Iterate over all dirs in the given base path.
Prepare the response for the HTTP request.
Unsign wheelfile.
Unpack wheelfile into dest.
Install scripts for distributions.
Arranges all the tokens in the graph to be displayed.
Redraw the canvas.
Get a node from the graph with the given id.
Changes the directed state of all connected edges.
Add edges to object.
Called when the component of the canvas has changed.
mouse left click
Called when the diagram canvas has changed
Clears the current canvas.
Changes the domain model of a diagram.
Unmap model from old to old.
Map an element to an element.
Parse xdot data.
Process font tokens.
Process ellipse tokens.
Process a polygon from a list of tokens
Process a list of tokens and return a polyline.
Processes a text component.
Process image tokens.
Render a grid file.
Save object to dot file.
Load the dot file and return the object.
Checks if the given point is within this rectangle.
Draws the bounds to the given gc.
Performs the dot - graph wizard.
Create a new engine and connect to it.
Parse the dot code and set the model.
Create a new model.
Open a file dialog and save the model.
Saves the model to a file.
Save the model to a file.
Configures the graph based on the given info.
Configure traits.
Configure edges for traits.
Change the behavior of godot traits.
Add a node to the control.
Add an edge to the control.
Add a subgraph to the control.
Add a cluster to the graph.
Request a graph from the traits page.
Edit godot traits.
Configure dot code and edit traits.
Prompts the user for confirmation and closes the dialog.
Move all components to the origin.
Save a flo object to a file like object.
Load a file like object from a file like object.
Save the object to a file.
Load an object from a file.
Create an alias property.
Parses a text file and yields a generator of words.
The list of start words.
Add a chain to the markov chain list.
Remove a chain by name.
Build a chain from a source and a chain.
Create a new dot file.
Delete a node from the graph.
Get node by id.
Delete an edge from the graph.
Add a subgraph to the cluster.
Called when the program has changed.
Set the list of nodes to new.
Parse a dot file and return a graph.
Parse a dot file or filename.
Build the top graph from a list of tokens.
Get units and multiplier for a given number of seconds.
Format a duration in seconds.
Called when a new path changes.
Create a UI object for editing traits.
Split an iterable into windows of length length.
Returns a list of the children of the given object.
Append a child to an object.
Insert a child into an object.
Delete a child from an object.
Triggered when the object is replaced by a new child.
Called when the children of the object have changed.
Get the label for the given object.
Set the label of the object.
Called when the label of the object changes.
Initializes the widget.
Updates the editor with the current value.
Add listeners to the object.
Replace the nodes of an object with a new one.
Called when one or more nodes have changed
Add nodes to the graph.
Replace edges of an object with a new one.
Called when edges of an object have changed.
Add edges to the graph.
Parse an xdot directive.
Called when drawing is performed.
Create a node based on a node factory.
Create an edge from a row factory.
Prepare the connection to the database.
Parse the xdot drawing directive.
Parse the xdot label directive.
Called when the drawing has changed.
Set the position of the component to new.
Changes the position of the component to new.
Adjust the active tool to the right down.
Prints the highlighted styles.
Draw the main layer.
Returns True if the given point is within the given rule.
Draws the main layer.
Dispatches an event to all registered engines.
Run the function in a separate thread.
Returns a full url for the given page number.
Render the prev and next links.
Render seo links.
Create an identifier for the given user and password.
Discover all modules in a directory.
Search for modules in a directory.
List all modules in a module.
Ensure a directory exists.
Create a new blob from a text string.
Check if a card number is luhn.
Load a module.
Add a path to the list of paths.
Find a module by name.
Split a line into a list of lines.
Remove all namespaces from the root element.
Returns a string describing the differences between desired version and desired version.
Create a new instance from a dictionary.
Merge a new dictionary into this one.
Execute all actions.
Add details to a message.
Emit a record.
Return the context for the rendition aware struct block
Add a new attempt to the locks dictionary
Add url to queue.
Starts the specified number of workers.
Set the value of a key to a value.
Get the value of a key.
Recurse through a key and return a dictionary of entries.
Returns the index for a given key.
Delete a key from the server.
Plot a heatmap of the feature importance.
Add a number of months to a datetime object.
Add a number of months to a date
Check if the current date is a christmas period.
Use a music service
Use a storage service.
Reads a CSV file and returns a list of x y pairs for each label column.
Return a list of objects from a JSON file.
Writes x and y to a JSON file.
Filter x and y based on ref label.
Returns the average of the records with the given label.
Restore data from session.
Merge dict b into a.
Find all available blocks.
Verify that the given block is registered with the given type.
Register a block with the registry.
Unregister a registered block.
Convert a file to a mp3 file.
Return a reasonable desired version string.
Handle ssl redirects.
Parse content type subtype subtype and suffix.
Parse a string into a list of strings.
Resize an image to fit the specified width.
Download a file from a tube.
Connect to the server.
Upload a file to a folder.
Connect to the music server.
Update the input filenames with the sky state sky azimuth and ds code
read aphi from a file
Scale the aphi by scale parameter.
read pure water absorption from file
Read pure water scattering from file.
Read an iop from a file.
Write an iop to a file
Build a scattering fraction of the water
Builds the ACE.
Build the c matrix.
build all iop
Batch parameters for a set of parameters
Read parameter file into a dictionary.
Convert a string to a list of floats
Set the handler function for each signal in signals.
Pseudo handler.
Default handler for the given signal.
Pause the execution of a signal.
Abort the program.
Resumes the execution of the status callbacks.
Remove an event from a list.
Fetch a metric and return a sorted list of floats.
Called when a function is called.
This function is called when a function is called.
Create new argv and extra argv.
Ignore certain metainf files.
Return a key for a file name.
Convert a binary quadratic model to an integer.
Parse the header of the archive.
Get the duration in seconds.
Print details about the game.
Get the data from the widget.
Searches the result of the file dialog and displays the graphic
Writes the parameter to a file.
Read the wavelengths from the result file.
Display the graphic connection.
Displays the error message.
Hides the error message.
Runs the graphic.
Cancel the planarrad.
Quits the application.
Saves the figure to disk.
Open log file.
Open the documentation page.
Perform prerequisite actions.
Handles click events.
Moves the mouse to the current position.
Display the graphic at the specified location.
Create a lockset for genesis with the given privkey.
Sign this message with a private key.
Return the SHA3 hash of the message.
Check if the quorum is valid.
Add a new amount to the account and issued amounts.
Return the lock of the last round.
Returns the last voted block proposal.
Returns the last valid lockset.
Get the timeout.
Called when a proposal is received.
Generate a list of privkeys.
Delay a packet.
Deliver a packet to the consensus broker.
Convert an address to a native contract class.
Update the filter with the given data.
Convert a vector x into an image.
Convert an image to VGG format.
Returns the function for the specified layer.
Get layer output.
Get features for x.
Create a new key file.
Finish the acquisition.
Release the giraffe table.
Returns a list of the tables in the giraffe database.
Decorator for distutils. ccompiler. ccompiler. c. compile
Find the latest version of teradata.
Get a value from the configuration.
Set the value of key to value.
Process a table line.
Write default configuration to yaml file.
Set the columns to be filtered.
Return a string representation of the object.
Returns a float with the given multiplier.
Extract specific gains from a string.
Get device settings from a string.
Wrap text with textwrap. textwrap.
Detect devices in soapy.
Set the center frequency of the PSD.
Calculate the frequency and pwr of the FFT.
Wait for the result of the process to complete.
Update the state with a new PSD.
Read header and pwr array from file.
Write the packet to a file - like object.
Submit a function to the work queue and return the future.
Returns the time to repeat the given bins and integration time.
Create a new buffer with the given bins and repeats.
Setup the pipeline.
Stop the stream.
Run a cmake executable.
Filter a set of datetimes based on a number of datetimes.
Replace hour minute second microseconds with mask.
Mask a datetime to a week.
Delete a number of dates from a set of datetimes.
Keep a set of dates in the given list of dates.
Delete a number of dates from a list of dates.
Get Spi control byte pattern.
Read a bit from the specified address and return it.
Write a bit to the specified address.
Get the number of bits in a bit pattern.
bring gpio interrupt pin into userspace
Set gpio interrupt edge.
Wait until a file exists.
Register a new pin.
Deregister a pin.
Enable gpio interrupts.
Send the given bytes to the IOC.
Render the given form using the given context and template pack.
Returns True if the form has any errors.
Render the link with the given template.
Extract the version of a package from the configuration.
Returns the form keyword arguments for the form.
Check the status of the response.
Make a GET request to the API.
Calculate the humidity of a temperature.
Calculate the dewpoint of a temperature.
Publish the message to the server.
Get CRC from data.
Verify that the given data is valid.
Unpack a storm date into a string.
Determine whether or not to use a revision b.
Wake up the device.
Send a command to the device.
Get new archive fields.
Parses the archive and sets the fields attribute.
Update weather data from a list of pub sites.
Initialize the logging module.
Get a list of pub services.
Get the value for the given station and interval
Set the pressure clouds and windspeed.
Set the arguments to be passed to the constructor.
Publish the arguments to the file.
Fulfills the given requirements.
Push a new override onto the stack.
Remove and return the last item from the stack.
Temporarily override the current context.
Push additional onto the stack.
Pop a value off the stack and raise a runtime error.
Temporarily add an additional value to the context.
Remove duplicate field names from a list of field names
Interpret the stats from the results.
Extract params from query.
Returns a pandas. dataframe with the columns of the DataFrame.
Returns a graph representation of the graph.
Plot the data.
Return a CSV representation of the result as a string.
Render widget context data.
Returns a list of widgets sorted by position.
Returns a list of widgets that need update.
Register a widget class with the dashboard.
Unregister widget class.
Get the last update for this widget.
Save a setting to the dashboard.
Check if we should update or not.
Concatenate multiple arrays along the specified axis.
Check if any of the arguments are valid.
Format axes.
Wrap a function into a spark array.
Align this shape with the given axes.
Convert to a Spark array.
Return the RD of this TimeSeries along the specified axis.
Get the number of chunks from a plan and shape.
Get a mask for a set of booleans.
Repartition this DStream by npartitions partitions.
Stacks the array and returns the stacked array.
Align axis with self. split.
Return the first element of the RDD.
Return the mean of the elements along the specified axis.
Return the variance of the elements along the specified axis.
Return the standard deviation of the data along an axis.
Return the sum of the elements along the specified axis.
Return the maximum value of the elements along the specified axis.
Return the minimum value of the elements along the specified axis.
Transpose the array to the specified axes.
Swap axis1 and axis2 along axis2.
Reshape this object to the specified shape.
Reshapes the key and values based on the given shape.
Return a new RDD of the elements of this RDD with the given dtype casting to
Clip this DStream by a range of min and max values.
Convert to a numpy array.
Convert an argument into a tuple.
Takes a list or iterable and a tuple and returns a tuple.
Validate that the shape is within the specified axes.
Return True if all elements in a and b are equal.
Convert a list of integers to a list of integers.
Slicify a slice or slice object.
Check if new is transposeable with old.
Check if new is reshapeable with old.
Concatenate a list into a single array.
Expand the dimensions of a arry by expanding the dimensions of extra dimensions.
Lookup a constructor by name.
Create a numpy array of the given shape dtype and order.
Create a numpy array of the given shape and type.
Concatenate multiple arrays along an axis.
Discrete likelihood.
Returns the least likely alpha vector for the given data.
Discrete alpha mle.
Discrete best alpha.
Plot the PPF of the data.
Lognormal distribution.
Sanitize HTML using turbo.
Configures the analytics for the given ident.
Return a list of tags.
Return the md5 hash of the key.
Return the SHA256 hash of the key.
Return a SHA512 hash of the key.
Parse a byte string into a long.
Decode a base64 - encoded key.
Process a SSH public key.
Process SSH DSS data.
Process ECDSA sha data.
Process ed25516 data.
Parse the keydata.
A list of all the mechs.
Main entry point for the init function.
Initialize setuptools.
Context manager for creating a wave file.
Return HTML for the frontend page.
Normalize djfrontend version.
Return a versioned version of djfrontend fontawesome.
Return the djfrontend modernizr template.
Return the djfrontend jquery template.
Formats the djfrontend jqueryui page.
Return the HTML for the jquery datatables template.
Format HTML for jQuery datatables.
Return the HTML for the jquery datatables themeroller.
Return the HTML for the jQuery front - end formset.
Displays the djfrontend jquery scrollto.
Return the HTML for the djfrontend jquery smoothscroll.
Return HTML for frontend twbs.
Return a string representation of the domain name for the specified account. If no account is specified the
Iterate over the auth hashes for the given user and purpose.
Calculate the expiry time for a given number of minutes.
Get a token for a user.
Serialize the object to a JSON string.
Update a user s profile.
Attempts to authenticate the user using credentials.
Validates the given token and returns the validated user.
Check if the request is secure.
Get the username for the given user.
Create a new user.
Login to the meteor server.
Logout from the server.
Login with password or resume token.
Login with username and password.
Login with resume token.
Forgot password.
Reset the password of a validated user.
Recursively merges a nested dict into a nested dict.
Get meteor id from obj or model.
Get meteor ids for the given object ids.
Get the object id for a meteor id.
Given a model and a list of meteor ids return a dict of meteor ids
Get an object from a meteor.
Set the default forwards for the operation.
Set default reverse for all objects in operation.
Truncate the database forwards to the given state.
Truncate the database backwards.
Initialize the setuptools options.
Finalize the options.
Return a path to a directory.
Seed a random number of values.
Return the current state as a dictionary.
Generate a random string of length length using the given alphabet.
Generate api endpoints for the given object.
Clear api path map cache
Pretty print a string.
Called when the websocket connection is opened.
Called when the connection is closed.
Called when a message is received.
Yield frames from a message.
Process a DDP message.
Dispatch a message to the appropriate handler.
Receive a connection from the DB.
Ping a device.
Send a sub command to the server.
Remove a child from the queue.
Recieve a method from the server.
Yields data from a DPP socket.
Entry point for the script.
Print msg if verbosity is greater than num.
Stop all servers and threads.
Run the worker thread.
Run the psycopg2 server.
greenify a boolean value.
Generate a MEEOR ID.
Autodiscover the api module.
Return a dict representation of the exception.
Get an object by name factory args and kwargs.
Emit a record.
Add a resource object to the route.
Send a message to the registration.
Send a bulk message to all registered alerts.
Fetch inactive registration ids.
Send a message using GCM.
Sends a message to all registered registrations using GCM.
Send the registration to the device and deactivate unregistered devices
Send a request and return the response.
Get model class from module location.
Search a phrase using giphy.
Translate a phrase using giphy.
Returns a list of trending objects.
Get a GIF by id.
Return a giphy object with a screensaver tag.
Upload tags to a file.
Convert ints to ints.
Perform a GET request to the API.
Return a generator of trending images.
Get a giphy image by gif id
Upload a file to giphy.
Return the extension for the given access control.
Authenticate to the youtube server.
Upload a video to youtube.
Check the status of a video.
Update a video.
Delete a video.
Check availability of a video.
Check availability of a video.
List all videos.
youtube direct upload
Upload a video to youtube.
Upload a video to youtube.
Remove a video.
Entry point for this video.
Save the video to the API.
Delete this video.
Update the metadata for this instance.
Update a metadata field.
Update this item.
Parse a string and return a list of nodes.
Return a string representation of a list of trees.
Load a YAML document from a file - like object.
Read a file and return a dictionary of comments.
Parse a string into a Node object.
Create a new node with the given name length and descendants.
Return a newick label for this node.
Get the node with the given label.
Remove all leaves from the tree.
Remove internal names from the tree.
Remove all leaf names from this node.
Disposes a JSON string and returns it.
Require a setting to be installed.
Get a list of arguments from the request.
Asynchronously apply a function to an asynchronous function.
Get a cookie by name.
Clear a cookie from the cookie store.
Authenticate to the OpenID server and redirect to the specified callback.
Get an authenticated user.
Request OAuth parameters.
Redirects the user to the specified OAuth scope.
Concatenate url with args.
Parse a header line and return a key and a dictionary of parameters.
Add a key - value pair to the dictionary.
Get a list of the values for the given name.
Parse a line of text into a dictionary.
Parse headers and return a Header object.
Normalize a name to be used in HTTP headers.
Convert a value to UTF - 8.
Convert a value to unicode if possible.
Convert a value to a string.
Recursively convert unicode objects to unicode.
Set up the authentication plugin for the given app.
Select a policy from the active policies.
Calculates the occupancy of a set of points.
Write a gro box to a file.
Write a PDB file with the given atoms and box.
Determine molecule numbers based on total absolute and relative.
Resize a pbc with lipids and proteins.
Iterate over the contents of a resource.
Add a message to a user.
Send a message to each of the specified users.
Get messages for a user.
Process the response.
Check the config file for validity.
Verify profile name.
Retrieve data from a message.
Retrieve pwd from config.
Update config data.
Update the password for the given message.
Create a config profile.
Print required items to stdout.
Get data from user.
Get authentication information from user configuration.
Configure a profile.
Write a message to cfg. data.
Write auth message to cfg. pwd.
Send the message to the server.
Factory function for creating a message of the specified type.
Validate an input message.
Validate Twilio attributes.
Validate slackpost input.
Validates that the given attribute value is valid.
Send a message asynchronously.
Add a message to the message queue.
Get the body of a file or file.
Trim any keyword arguments from the given dictionary.
Send a message to the specified type.
Get chat id by username.
Send content to the server.
Send the message to the server.
Get the SMTP server for the given address.
Generate an email message.
Add a header to the message.
Add the body to the message.
Attach attachments to message.
Get a session object.
Returns an ssl object for this connection.
Returns a smtp session with TLS enabled.
Sends the email to the server.
Save the object to a file.
Unloads the image.
Get the region of an image.
Validates that all keys and values are valid.
Remove all internal elements from the list.
Read the data from the file.
Delete this chunk from the file object.
Resize the chunk to the specified size.
Insert a chunk into the file.
Save the frame data to a file.
Deletes the file specified by filename.
Parse a file and return a list of lines.
Process a line of text.
Add a block of lines to the file.
Draws a string to the specified font.
Parse ISO 8601 time string.
Make html words from a list of words
Make an HTML word from a word.
Makes an html paragraph from a list of words
Make html code from a list of lines.
Generate HTML for a list of items.
Save the structure to a file.
Update parents of all atoms in path.
Run a game.
Register a mapping for the given vendor and product.
Get a specific controller from the registry.
Sign string with AWS secret access key.
Get request headers.
Send a GET request to the API.
Send a POST request.
Send a DELETE request to the server.
Ape the given value with the given kind.
Change a resource record set.
Return the size of the packet.
Find the last page of a file object with the given serial number.
Set a section in the document.
Add markup to the markups list.
Process content and return markups.
Get markup with the given tag name.
Create a hosted zone writer.
Lock a file - like object.
Insert size bytes at offset into fobj.
Deletes the specified number of bytes from fobj.
Convert data to UTF - 8.
Add a change to the route53.
Parse change info.
Measure a string.
Returns True if all the initial values have changed.
Delete this resource from the hosted zone.
Save this resource record to the hosted zone.
Read size bytes from the file and return them.
Delete all keys with the given key.
Add a frame to the loaded frame dictionary.
Update the genres and genres for a given version.
Unload the sound.
Set the voice loop points.
Return a list of glyphs and values for adobe glyphs.
Filter glyph names based on a filter.
Dump encoding list to file.
Dumps the array to a file.
Check if a file exists.
Make a list of files.
Parse a hosted zone and return a hosted zone object.
Parse a delegation set into a zone.
Write a list of blocks to a string.
Group blocks by padding.
Delete all VCF tags from the file.
Save the audio data to a file.
Parse a rrset alias into a hosted zone id alias dns name.
Parse a list of resource records into a list of strings.
Parse a rrset into a rset object.
Add a record to this zone.
Create a record with the given name and values.
Create a new namespace record.
Create a record with the given name and values.
Create a new spf record.
Create a new srv record.
Get the values for a change.
Write a change to the etree.
Write a change to a resource record set.
Initialize the logging module.
Return the item with the given alias.
Freeze a dictionary into a sorted tuple.
Join html attributes into a template and a list of attributes
Initialize the application.
Initialize all bars.
Bind a bar to the queue.
Returns a dictionary of the arguments to be passed to the function.
Returns True if the current view is the same as the current view.
Validate a metric class.
Get a statistic by name.
Calculate statistics for a stat and frequencies.
Auto - discover django apps.
Return a CSV response with stats for the given metric and uid.
Get statistics for a given frequency.
Get an array from a GET request.
Get a value from request. get.
Get the next colour.
Get gecko params.
Get the latest and previous geckoboard number.
Show the latest count of all gecko metrics.
Generate a line chart for the geckoboard.
Get the latest geckoboard for the current user.
Get a geckoboard for a given statistic frequency.
Get active gadget stats.
Register a gadget.
Get the context data.
Print error message and exit.
Prompt the user for a long string.
Prompt the user for a list of strings.
Prompt the user for a filename and return the filename.
Schedule the game for the given year.
Return the winner of the game.
Returns the season of the current date.
Returns the surface of the object.
Return the coin toss of this team.
Return weather information as a dict.
Get information about the ref.
Schedule the game to be played.
DataFrame of standings for this team.
Get team stats table.
Returns the voting data as a pandas DataFrame.
Return a pandas. dataframe with the linescore information.
Returns the year of the year of the current date.
Get player stats.
Returns a tuple of the class instance key for the given args and kwargs.
Get the age of the person in the given year month day.
Get stats from a table.
Get stats per game.
Get the total stats for this table.
Get stats per36.
Get stats per 100.
Get stats from the stats table.
Get shooting statistics.
Return the stats table for the given kind and summary.
Return a DataFrame of the gamelogs for the given year.
Get the current value of the session.
Expand details in a DataFrame.
Add team columns to features.
Add team features to a DataFrame.
Return the initial win and tie probability for a line.
Return a DataFrame of the data from this query passing the given kind.
Returns a list of awards for the given award id.
Return team name as a string.
Return boxscores for a given year.
Get information about a year.
Get the head coaches by game.
Schedule the game for the given year.
off coordinator for a year
Return the coordinator for the given year.
Returns the stadium id for the given year.
Turn year off.
Return the alignment for the given year.
Turn splits into a pandas DataFrame.
Get html from url.
Return a string of the direct value of the queue.
Get a direct read from the queue.
Close the connection to the queue.
Get a batch of HDF5 data.
Get the remainder of a block of data.
Get a generator of rows from a queue.
Parses the given IPA file and yields a generator of objects.
Dump a Python object to a file or file - like object.
Read a varint from the file and return it.
Returns a generator that yields all the objects in the file.
Flush and close the file descriptor.
Write one or more bytes to the stream.
Flush all buffered data to the output stream.
Get the game directory for this game.
Perform keyboard emulation on input text.
Evaluates the traits that are not eagerly evaluated.
Wait until a condition is met.
Evaluate the traits of an element until the element has the specified traits.
Add ignored exceptions to the exception list.
Execute a command and return the result.
Execute a command and return the source code.
Send a message to the socket and return the reply.
Get the current status of the device.
power off the device
Power on the device.
Set the volume number.
Select a source.
Deobfuscate a key.
Calculate the CRC of the given plaintext.
Obfuscate a value.
Find missing schema in html
Returns a list of all links in the given HTML.
Check if song name is a song name.
Parse a URL and return a list of links.
Generate a google url for a song.
Parses the google page and returns the download url.
Parse a Google song and return the parsed website url.
Get html response from url
Download a file using requests.
Download a file using wget.
Search station codes by city name and token.
Get an observation for a location.
Parse an observation response into a dictionary.
Return a list of compiler extensions.
Return the mimetype for this format.
Return the mimetype of the compiler.
Return the compiler format extension.
Register a processor for the given mimetype.
Unregister a processor for a mimetype.
Returns a list of all paths for this finder.
Register default settings.
import qt5 or pyside import qt5
Return a netnode with meta information.
Add a netnode plugin name.
Remove a netnode plugin by name.
Import settings from a config file.
Export settings to qt format.
Return the directory of the plugin.
Iterate over all keys in the directory and system.
Simple error handler.
Get a table by name.
List all tables in DynamoDB.
Fetch items for a specific category.
Return the metadata id for the given item.
Return the timestamp of the metadata for the given item.
Fetch the team for a crate.
Fetch the owner of a crate
Fetch the versions of a crate.
Fetch crate version downloads.
Get a list of crates for a given page.
Get a specific crate by id.
Fetch a page of content from the server.
Fetch a list of items from the database.
Get all questions from kitsune.
Fetch the items for the given category.
Get the metadata for an item.
Get the category for the given metadata item.
Get a list of items for a specific event.
Return the buffer list.
The priority of the iocb.
Close the context.
Submit a list of blocks and return the number of submitted blocks.
Cancel the given block.
Cancel all submitted submissions.
Fetch the items for the given category.
Get the raw text of all cells.
Parse the feed and yield events.
Export the formats for the given pid type.
The permission factory for this application.
Default view method.
Export a record to a template.
Execute a callable and return the result.
Close the socket.
Remove a client from the pool.
Increment a metric by count.
Send a timing metric to the client.
Calls timing since the specified start time.
Send a gauge request.
Send a gauge delta to the client.
Set a metric to the specified rate.
Request a batch of data.
Create a batch client.
Create a unit client.
Flush all pending batches to the remote address.
Create a batch client.
Send all the batches to the socket.
Return a TCP client.
Create or update a user.
Interpret x as open math.
Convert a term to openmath using the given converter.
Convert an omobj to a python object.
Convert obj to openmath.
Initialize the Flask app.
Generator for valid choices.
Create a new value.
Apply any form to the data and files.
Returns the decimal value of a field.
Email field data.
Generate a random date for a field.
Return True if the given field has a datetime field.
Returns a string of floats for a field.
Returns a string of integers for the given field.
Generate a random time for the given field.
Returns a random choice for the given field.
Returns a random string of choices for a multiple choice field.
Returns a random choice for the given field.
Encode a Python object into a byte string.
Publish a message to Sdist and upload.
Tag a build.
Load a global variable from a module.
Decode a bytearray into a bytearray.
Convert value to fixed format.
Format a number according to the settings.
Convert data to numpy array.
Pack an array and return the raw data.
Add a new configuration entry to the config file.
Remove a value from the config.
Return a list of configuration values.
Get a value from the list with the given name.
Check if a repository exists in the workspace.
Sync a repository with a workspace.
Clone the given url to the given path.
Check the version of the server.
Return the voxels of an array.
Create a numpy array from a list of voxels.
Executes the workspace command.
Update a repository.
Set the console handler.
Execute a command and return a subprocess object.
Load an image from a PNG file.
Save a collection of data to a PNG file.
Print workspace status.
Print the status of a repository
Get the block size.
POST cutout no chunking data to Blosc
Load an image from a tiff file.
Save a TIFF file to a PNG file.
Load a multi - page TIFF file and return a numpy array.
Write the configuration to a YAML file.
Clone the given URL and return the new URL.
Get the version of the installed package.
Mix a name with a greeting.
A decorator that prints an option to the console.
Reserve ids for a given channel and quantity.
Merge a list of ids into a channel.
Propagate the given token to the given channel.
List projects in a dataset.
Get a dataset by name.
List all available datasets
Parse the command line string.
Show workspace.
Show workspace information.
Show all workspaces
Return the URL for the given endpoint.
Tries to guess the format from extension.
Open an image file.
Convert a file from one format to another.
Convert ramons to a dictionary.
Return the ramon of the given type.
Delete a channel.
Generate a JSON representation of the NDArray.
Create a dataset dict.
Create a channel dict.
Create a project dict.
Identify the size of an image.
PUT data to the server
Find a path in a workspace.
Get public tokens.
Get information about a project.
Set the metadata for the given token.
Perform a GET request to the given url.
Make a POST request to the given url.
Delete a URL.
Load layers from a hdf5 file.
Save an array to a hdf5 file.
Infer gaps in a tree.
Recover a vim. IO object from a vim. IO object.
install jinja translations
Exclusive ns operation.
Return percent of data.
Get the cache stats for the specified server.
Get a list of slabs for the specified server.
Return the context data for the given data.
Show server status.
Display a dashboard page.
Show stats for a given server.
List slabs for a server.
Convert a value to human readable bytes.
Find the config for the given children.
Add a new directory or directory to the environment.
Apply applicator to self. fpath.
Absolute path of the file.
Read the file and return the contents as a string.
Write data to the file.
Configure the logging module.
Create the file if it doesn t exist.
Apply the given applicator to this path.
Return the path of the file.
Remove this directory or its sub - directories.
Prepares the node for rendering.
Cleans up the tree and all its children.
Return the path to the given path.
Return a list of all files in this directory.
Write data to a file.
Read a file and return its contents.
Add a file or a list of files to this node.
Save the configuration to a YAML file.
Loads the configuration from a YAML file.
Remove the file if it exists.
Load plugins from a directory.
Create a child config node.
Get the value of the key or index.
Apply the config to a string.
Build the URL for a callback.
Process input.
Send the output to the socket.
Send a request to the sender.
Read data from socket and process it.
Write a socket object to the output stream.
Get the remote settle modes for a link.
Configure the link.
The source address of the link.
The target address of the link.
Called when the session is closed.
Create a new sender.
Request a sender link.
Create a new receiver with the given name.
Request receiver link.
Remove a link from the session.
Close the session if it is open.
Process an endpoint event.
Extend markdown with markdown.
Close receiver link.
Mark receiver as failed.
Get the host and port from a server address.
Connect to a socket.
Create a socket from a host and port.
Return a list of readers writers and timers that need processing.
Get the output data from the transport.
Create a new sender.
Reject the sender of a link.
Create a new receiver.
Called when the connection attempt failed.
Called when the connection is active.
Called when the connection is closed.
Log an error.
Returns the color as a string.
Get the TTF of the font.
Set compression mode.
Add an object to the buffer.
Write a stream to the buffer.
Put a stream into the stream.
Add a page to the document.
Set the color scheme.
Set the default font.
Add a page to the document.
Set font size.
Add text to the document.
Add a newline to the current page.
Add a pie chart to the chart
Output all pages in the session.
Returns a list of the current orientation changes.
Output all fonts.
Output all the images.
Write the image to the output stream.
Transform the current matrix.
Return the absolute position of the current matrix.
Set the style of the font.
Rotate a point by the current angle.
Set information about the object.
Set the display mode.
Close the document and return the output.
Writes the header of the PDF to the session.
Puts all the pages in the document.
Put resource dict into session.
Writes the information to the session.
Put trailer.
Repeatedly iterate over a sequence of sequences yielding a sequence of sequences.
Return a naive version of seqs.
Iterates over a sequence of sequences yielding each value in a sequence.
Brent sequence generator.
Fit the test to the x - axis.
Fit the test to the y - axis
Check if x is greater than test ordinate.
Checks if the test ordinate is greater than the test ordinate.
Return a copy of the cursor.
Increase x by dx.
Increase the y position by the given amount.
Draws the table.
List all tags.
Returns a list of labels with the given name.
Delete a tag.
Create a new label.
Returns a list of all the actions associated with this account.
Returns a list of tags with the given label.
Returns a list of all the objects in this repository.
Setup the application.
Return the path to the themes directory.
Make a POST request to the API.
List all hosts and logs.
Perform a GET request to the API.
Returns the duration in seconds in seconds.
Update the fields of the model.
Compute the transit matrix.
Bin the transit matrix into a binary string.
Frees memory from the underlying arrays.
Receive size bytes from the socket.
Generator that yields lines from the buffer.
Return code and message from status line.
Generate an info message.
Generate a message with the given code and message.
Return a list of capabilities.
Read mode.
Quit the server.
Return a datetime object for the current time.
Print help message.
Generate newsgroups from a timestamp.
Return a list of new timestamps matching pattern and timestamp.
List active newsgroups.
List active times.
List newsgroups.
Generate a list overview format.
Generate a list of extensions.
Generate a list.
Generate a list of strings.
Send a SMTP header to the server.
Generate a sequence of lines from a messageid range.
Compress a gzipped feature.
Return the offset of an integer value.
Make a POST request.
Make a DELETE request to the API.
Make a GET request to the API.
List scheduled queries for this account.
List tags for this account.
Get a tag by name or id.
Delete a tag from your account.
Create a scheduled query.
Delete an alert by tag id
Parse a newsgroup line.
Parse a header line.
Unparse headers.
Send a POST request.
Run tests.
Return the default docstring for this class.
Set the value of the field.
Check if value is of the correct type.
Returns the value of the attribute or None if the value is none.
Check that the value is of the correct type.
Return the symmetric error.
Set errors.
Set the value of the field.
Import metrics from the metric definition.
Extract metrics from a dictionary.
Filter metrics based on the filter expression.
Call the API.
Apply an expression to the given text.
Operator operator.
Add an operation to a token.
Initialize missing parameters and loader attributes.
Returns a list of all the parameters that have the specified names. If pnames is not specified
Get the parameter values of the model.
Return the errors of all parameters in the model.
Clear all derived parameters.
Set the method of the attribute.
Get environment variables.
Call the API.
Validate the scene info.
Verify the type of product for a satellite
Get the size of a remote file
Validate that a list of bands is valid.
Connect to earthexplorer
Normalize a datetime to the current timezone.
Concatenate an iterable with a delimiter.
Get the positions of newlines in a string.
Point a source string to the specified position.
Dump the relay output to stdout.
Remove all metrics and plugins from relays.
Create a new instance from a list of files.
Set the chance for a list of files.
Run the script and exit.
Apply the rule to the given text.
Apply special handling to text.
Returns the grammar of the input source.
A list of all rules in the grammar.
Return a list of comments for this token.
Return a list of directives.
Compile and return the output source.
Compile the token into a string.
Returns the imports for this module.
Return a string representation of the token type enum.
Returns the class definition for this rule.
Returns the name of the entry point.
Get the source of a rule.
Get the transform string for a rule.
Convert an expression to an ASN expression.
Convert a node to an Asn expression.
hoist operands until pred is True
Remove grouping groups from an optree.
Convert an AST node to a code node.
Convert an optree node to code.
Convert an AST terminal to code.
Convert an option group to a list of code lines.
Convert an ast repetition group to code.
Convert special handling to code.
Return a list of lines representing an AST op alternate to code.
Concatenate an operator into code.
Return a list of lines that include the given opr s operands.
Multiply the operands of an AST operation by the operands of an AST operation.
Convert an AST op to a list of code lines.
Find directives that match a predicate.
Return True if child is a child of parent.
Handle the results request.
Get a wx id from a wx id
Remove a hotkey from a control
Add the arguments to the parser.
Configure logging.
Validate the arguments and set error message.
Infix a list of nodes to a postfix.
Postfix a list of nodes to an optree.
Reduce a list of nodes by applying a reduction operator.
Load plugin manifest.
Get the column lengths of the fields.
Get the maximum display and description lengths for each metrics column.
Replace underscores with underscores.
Output the field as markdown.
Output metrics to markdown.
Generate markdown for metric and dashboard definitions.
Parse the given text and return the tree.
Tries to find the most consumed text from the original text.
Add command line arguments to the parser.
Parse a time string and return a datetime object.
Outputs the given text as a CSV.
Output a JSON payload.
Outputs the given text as JSON.
Outputs the given text as XML.
Return a trimmed default if node is empty or empty.
Pretty print a node.
Return a function that returns a repetition of a string.
Get a terminal.
Get exclusion from text.
Count leading whitespace in text.
Calls extractor with given text.
Return the current position of the node.
Return True if all of the children are empty.
Add an ignored value to the internal list.
Check if the given value is a type.
Flattens the value into a new value.
Return a trimmed version of this parse node.
Merge this node with another node.
Retype this node to a new type.
Create a compressed version of this node.
Return the current position of the line and column.
Return the position of the max read.
Step forward the next char.
Go to the next line.
Go to the previous line.
Return the last line read from the cursor.
Increment the cursor position.
Save the current cursor context.
Restore the current cursor position.
Return a formatted string representation of the object.
Set the name of the signature.
Count the number of vars in the signature.
Count the number of funs in the signature.
Update the signature with a list or scope.
Return a new scope with the union of the given signature.
Update the signature with the intersection of the given set of signatures.
Return the intersection of sig with sig.
Update the scope with the difference in oset.
Return a new scope with sig removed from this scope.
Update the scope with the symmetric difference of the signatures of the given oset.
Return the symmetric difference of sig and sig.
Add a signature to this signature.
Remove a signature.
Remove the signature from the signature.
Return the signature of the first signature in the signature dictionary.
Return the signature of the last signature.
Get a scope by symbol name.
Get a signature by symbol name.
Get all polymorphic scopes.
Call the injector of the old node with the trans.
Recursively normalizes the given AST.
Set the attributes of othernode to othernode.
Check if a hit is ok.
Get the signature of the compute function.
Resolves the module.
Returns a list of resolved names for the given type.
Set the name of a resolved name.
Delete a local file if it exists.
Delete a file from a bucket.
Delete a file from S3.
Save a local file to a temporary file.
Save a file to an object.
Save the object to a file.
Find a bucket by path.
Create a new enum from a list of sequential enums.
Set a thing to a chainmap.
Read the next character from the stream.
Push the rule nodes onto the stack.
Remove all rule nodes from the cache.
Get the value of a node.
Add a stream to the parser.
Begin tag with given name.
End a tag.
Set the rules for the class.
Set the hooks for this class.
Set directives.
Evaluate a rule.
Evaluate a hook with the given name.
Peeks at the specified text from the stream.
Reads at most one char and returns it as a string.
Read a character from the stream.
Read until EOF is reached.
Ignore blanks from the stream.
Check struct compatibility.
Add a rule clause to the name.
Add rules to bnf.
Add a rule to the parser tree.
Add sequences to the parser tree.
Add an alternative to this parser.
Add a range to the given sequence.
Add a rpt to the sequence.
Add a capture to the given sequence.
Bind a CPT to the parser tree.
Add a hook to the sequence.
Set the number of a parameter.
Set the value of a string parameter.
Set param. pair and param. pair.
Set the id of the parameter at the given position.
Set the name of a hook.
Add hook parameter to hook. listparam.
Evaluate the rule and return the result.
Ignore Cxx characters.
Add a state to the state list.
Return a dot representation of the state.
Write this object to a dot file.
Write the image to a png file.
Return a string representation of the state and uid events.
Return a new state that is the next state in the tree.
Reset the living state of the tree.
Infer a block of body.
Infer subexpression.
Infer a literal.
Dump the node information to stdout.
Return the exit scope for this statement.
Return the clause of the given parser tree.
Parse a call node.
Return an ast. expr for a call true node.
Parse a hook node.
Parse a rule node.
Parse a capture statement.
Return the name of the statement or expression in the scope.
Parse an alt statement.
Parse a parsing. seq node and return a list of AST statements.
Parse a rep optional expression.
Parse a n statement.
Parse a n statement and return a list of statements.
Concatenate src to dst with indent.
Set the indent level of a list.
Convert a list to a string.
Echo all the nodes in the given list.
Populate an edge from a sequence.
Populate the state register of all sequences.
Build the state tree and populate the state register.
Return True if n eq val.
Build a grammar from a string.
Build a grammar from a file.
Parse a node from the given source.
Parse a file and return a parsing. node.
Set a node in the cache.
Set the node as an integer.
Return true if expr is a subnode of dst.
Dump a deposition to a dictionary.
Get recids from invenio12 date.
Get recids from invenio2 date.
Get check information from database.
Dump an object to a dictionary.
Get all accounts.
Dump a User object to a JSON string.
Returns a set of recids that have changed since the given date.
Returns a set of recids that have been modified since the given date.
Get the restrictions for a collection.
Get revisions for a record.
Get all collections of a record.
Dump a record as JSON.
Returns the number of recids and the list of recids that match the query.
Dump a record to a JSON string.
Dump a ra object to a dict.
Load a common model from the database.
Collect all things entry points and load them into a dictionary
Initialize the application context.
Get the run sql from the database.
Executes a get query and returns the number of actions and a list of dicts.
Dump a RT to a JSON string.
Load a token from a dictionary.
Import a record into the database.
Get config var imp or default.
Dump an object to a dictionary.
Get users in invenio12.
Get all users in invenio2.
Dump a User object to a dictionary.
Load deposit data into database.
Create a record and pid.
Load a record dump into the database.
Load records from JSON files.
Get profiler statistics.
Start the tornado web application.
Post the stats to the profiler
Delete the profile.
Delete the profiler.
Get the current running state.
Calculate translation matrix for images in parallel.
Merge multiple images together.
Add ones dim to an array.
Create a record for the given dump.
Create a record for the given dump.
Update a record.
Create a list of persistent identifiers for the record uuid.
Delete a record.
Create a file from a list of file versions.
Delete all buckets from a record.
Return a list of persistent identifiers that are missing.
Prepares the files to be written to disk.
Prepare the pids for the current revision.
Check if a record has been deleted.
Load a community.
Load featured community.
Dump a thing to a JSON file.
Check the status of a thing.
Deletes the widget and all event handlers.
Return the magnitude of a vector.
Normalize the magnitude of a vector.
Transform the texcoords to a list of coordinates.
Ensure bones are present in data.
Set the length of the bones in the data.
Set the parent of this bone.
Calculate the pivot point for the given data.
Start animation.
Set the current state of the object.
Unset the state of the object.
Set the state of the bone.
Unset the state of the bone.
Ensure model data is present in obj. modeldata
Redraw the visualization.
Draws the model data for the given object.
Set the model to use.
Write reports to a file.
Add a menu to the menus.
Redraw the label.
Redraw the label.
Draws the widget.
Delete a widget from the list of widgets.
Redraw the label.
Registers the handlers for mouse motion and drag events.
Register event handlers.
Add a label to the text widget.
Quits the dialog.
Updates the progressbar with the current progressbar information.
Render all the actors in the scene in 3d.
Renders the world and draws the batch3d.
Check if a resource with the given name exists.
Add a category to the PEN.
Get the missing texture if it exists or create a new one if it doesn t.
Get a model object by name.
Load a model by name.
Get model data by name.
Add a widget to the widget list.
Draw the menu.
Called when redraw is called.
Redraw the scrollbar.
Returns True if the mouse abb is within the bounds of the size of the mouse.
Returns the p - value of the distribution.
Add a layer to the graph.
Add an action to the registry.
Executes the specified action on all registered actions.
Register a new id with the registry.
Add a layer to the graph.
Draw the layered widget.
Delete all layers.
The border of the widget.
The offset of the widget.
Returns the size of the widget.
Read a mesh from a HDFStore.
Create a connection from a shape.
Set the fields for this query.
Add one or more fields to the model.
Check if the elements are valid.
The space of the element.
Return a sorted list of edges in the graph.
Summarize the centroids and volumes.
Set element set to node set.
Set the node set to surface.
Convert surfaces to element sets.
Return the metadata for all the fields in the DataFrame.
Metadata for this step.
Make directories if needed.
Run gmsh on the mesh.
Read a history report from a CSV file.
Read the field report from a file.
Convert a list of strings to a string.
Return a string representation of an equation.
Return a string representation of a DataFrame with unsorted labels.
Parse the response and return the payload.
Send a GET request to the API.
Write xy data to a file.
Return a string representation of the error message.
Check if an exception is thrown by descriptor.
Set the data of the curve.
Return the mode of the axis.
Set the options for the plot.
Create a new class with the given function and attributes.
Cycle through the datafeeds and draw notifications.
Try to convert a numeric value to a number.
Convert a string to a number.
Plots the graph of the given token.
Force unicode conversion.
Check if the mime type matches the given mime type.
Strips the domain name from the raw string.
Returns a list of domain name left cuts.
Return the hash of the given tok and document hash key.
Collect all words from the sentence.
Index a document in a stream.
Invert a hash.
Return a dictionary of document frequencies for the given hashes.
Looks up a tf. Tensor with the given hash.
Return a list of all of the items in f that are not None.
Read a varint from the stream.
Read an AST from the stream.
Serialize a key into a string.
Convert a streamitem to a key and data.
Context manager for temporarily changing the working directory.
Strip prefix from a string if it starts with prefix.
Strip suffix from s if it ends with suffix.
Test if needle is a subsequence of haystack.
Run the wsgiref server.
Shut down the server and close the server.
Get error page callback.
Add a pattern to the list of patterns to be routed.
Resolves the given method and path.
Resolve a non literal route.
Normalize a pattern to match type pattern and pattern.
Return the response as a list.
Add a header to the request.
Set the value of a cookie.
Return the status line of the response.
Content - type of the response.
Delete a directory recursively.
Return a list of open file descriptors.
Attempts to fetch a work unit from a file.
Return a list of lines from a file.
Generate a random adjspecies pair.
Return a random adjspecies pair.
Morph a sentence to another sentence.
Show similarity of a pair.
Run hiragana on a sentence.
Create an entity in a sentence.
Shortsum a review.
Send a keyword request.
Run chrono chrono on a sentence.
Initialize all the stages for the given configuration.
Run the writers and return a list of paths.
Run a series of incremental transforms.
Replace config with a new config.
Return True if all mentions in target mentions are present in chain mentions.
Returns true if any of the target mentions in the chain mentions are present in the target
Match multiple tokens.
Create a ner file.
Terminate the child process.
Multiplies p by n.
Yield start end sentence and cleaned string.
Create the label index for the given stream item.
Create a list of sentences from a stream item.
Make a cleansed file.
Create a ner file for the given tagger.
Remove punctuation and whitespace from a span.
Instantiate a config from a dictionary.
Generate a johnsmith chunk.
Make a clean visible file.
Strips whitespace from the given span.
Main entry point for the script.
Attempts to load a stage function from a module. If no stage function is specified the function
Load external stages from a file.
Initialize a stage with the given configuration.
Read a sequence of bytes from the specified index.
Return True if href is a valid URL.
Create a list of labels for this document.
Yield all paths in input dir.
Iterate over all tasks in the queue.
Get a random available row.
Returns a list of sentences for the given ner dom.
Verify that the md5 of the data matches the expected.
Get a bucket from S3
Decode data into a streamcorpus. Streamcorpus.
Get a chunk of data from a bucket.
Convert a stream id to a kvlayer key.
Convert a kvlayer key to stream id.
Generate a key for a stream item.
Entry point for the command line interface.
Build an argument parser.
Generate char tokens from a list of sentences.
Convert a list of char tokens into a list of char offsets.
Add an element to the document.
Return a piece of XPath.
Return the index of the last text element.
Iterates over all descendants of an element.
Select elements from a DOM tree.
Select elements with the specified name from the specified source.
Select elements matching a regular expression.
Return the next following sibling of elem.
Call the inkscape command.
Export an input file to an output file using inkscape.
Convert an SVG file to a PDF file.
Convert an SVG file to PNG file.
Get a Jinja environment for the given file path.
Set up the template for the given template file.
Fill the content with the given docstring.
Save content to file.
Create a doctype from a template file.
Fills the specified document with the specified content.
Renders the document to a temporary file.
Render the template and save it to a temporary file.
Create an expat parser from a string.
Return markup fragment from source.
Insert text into the xml.
Insert node before ref node.
Return a copy of this node.
Return string representation of node. xml value.
Insert a child node into the xml tree.
Parse the config file and return a dictionary of mandatories.
Get Google credentials.
Create a datetimes object.
Create a new event.
Entry point for the google event script.
Get the extension of filepath. If check is True return the extension of filepath. If check is
Add a file extension if needed.
Create a temporary file with the given suffix and dirpath.
Remove all files with the given extension from workdir.
Write csv to json file
Replaces old with new in filepath.
Parses the content of the HTML document.
Check next sibling of tag. next and add it to blacklist.
Create an italic style tag.
Create strong style tag.
Create underline style tag.
Parse the attributes of a tag.
Remove linebreaks from a tag.
Parses the given href and returns the query string.
Parse an attribute value.
Translate key values from one dictionary to another.
Return a JSON string representation of the object.
Find files that match a regex in a folder.
Concatenate multiple strings.
Yield starts with part.
Yields strings that contain part in full.
Context manager for booleans.
For each item in seq and expr yields each item in expr.
Looks up the given tableid and key in the given context.
Replace characters in the given svg content with their characters.
Check if svg file is a valid SVG file.
Merge multiple pdfs into a single file.
Embed a font file to an svg file.
Embed a font to an svg file.
Check the inputs.
Check if the function is callable or not.
Recurse through the inputs and output.
Create a jinja2 input.
Recursively recurses the input list into the output list.
Convert an object to a string.
Convert an object to a number.
Convert an object to a boolean.
Serialize a Python object to a string.
Change the xml encoding of a file.
Save text into a QR code file.
Launch a melody command.
Calls the specified command with the specified arguments.
Convert a tex file to a PDF file.
Return a list of options for the given psy object.
Transform geom to sref.
Create a geometry object.
Expands the bounds of this list into the values of other.
Return the intersection of this string and another string.
Returns True if this rectangle intersects the other rectangle.
Polygon of the linear ring.
Create a DataFrame from a znm.
Writes the main dataframe to a file.
Select rows based on a condition.
Return a table of rows at nuclei.
Return the intersection of this table and another table.
Return a new table with rows not in this table.
Return a list of the elements that are evenly odd.
Even odd elements in the sequence.
Return all elements that are not evenly spaced.
Return the error of this DataFrame relative to the given relative to.
Return the binding energy of the model.
Convert a string to a n - length string.
The s1n of the DAG.
Convert a string to a p - value.
The s1p of the derived class.
Return a table of values derived from the given formula.
Run a function in the database and return the result.
Derive a key from a master password.
Bootstrap a database.
Search domains by query.
Modify a domain.
Create a domain.
Extract hbs from a fileobj.
Return the prefix of the given path.
Return the SRID of the authority.
Entry point for the command line interface.
Update a file from a URL.
Get available GPD drivers.
Return a driver for the given path.
Convert geom to raster array.
rasterize a layer using gdal
Open a raster file.
Create a raster from a byte string.
Copy a raster from one source to another.
Returns a dict of the options for this widget.
Create a raster with the given size.
Set the geotransform of the mesh.
Read an array from the data store.
Envelope of the current image.
Return the driver for this image.
Create a new raster.
Return masked array.
Returns the nodata value or None.
Read a raster from the dataset
Resample the image to the given size using the given interpolation.
Save the image to the specified path.
Set the projection of the spatial reference.
Warp the raster to a spatial reference.
Calculate the chunklen and enclen for a given alphlen.
Looks up the alphabet for the given charset. If no alphabet is found a warning is raised
Encode the chunk at the specified index.
Convert a chunk to a long.
Get the chunk at the given index.
Return a compiled regular expression for the given file.
Normalize date to UTC.
Detect timezone from locale.
Convert this Swagger object to a dictionary.
Runs the given job on the given host and port.
Entry point for the Worker class.
Run a worker pool.
Set the classification.
Send a message to the queue.
Turn on a light.
Turn on a switch.
Turn on with the specified brightness.
Turn off a device.
Send a message to the queue.
Send a reliable message.
Set the nature of the object.
Set configuration files.
Return a generator that yields the options and their values.
Create the configuration file at the specified index.
Update configuration values from a dictionary.
Read the configuration from a file.
Reads the configuration files and returns a dictionary of content empty files faulty files.
Return a list of names for the given option in the given section.
Return a list of sections.
Build an argparse. argument parser.
Parse command line arguments.
Run a bash comp command.
Complete a bash command.
Start a master.
Called when a connection is made.
Process a line of JSON.
Called when the connection is lost.
Load a job from the manager.
Handle a response from the client.
Close the connection to the manager.
Runs the given job list.
Close the connection to the server.
Change all waiters to none.
Add a result to the list.
Wait for the queue to be complete.
Load a job from the queue.
Marks the job as done.
Add a result to the results list.
Cancel all currently active jobs.
Wait for num jobs to be done.
Distribute all available jobs to the callback functions.
Add a list of jobs to the queue.
Get a job from the active JS object.
Return a job that is ready to be executed.
Add a result to a job.
Distributes all the jobs in the given JS object.
Closes the connection to the hub.
Return a uniquified version of a list.
Attempts to match a regular expression against any of the strings in obj.
Get region information.
Filter entries based on filters.
Get a public DNS name for a host.
Create an instance from a dictionary.
Get the attribute value for the given attribute.
Create an instance from boto instance.
Return True if this object matches the filter.
Return the public ip address of this node.
Add a timestamp to the event dict.
Create a structlog logger.
Setup a celery app.
Delete a worker.
Return the configuration section as a dict.
Create or update a configuration file.
Prepare the rows of a table.
Get a colored hash of a string.
Generate a random color.
Check user credentials.
Check if user with given token exists.
Check if the given process is running.
Dynamically import a module and return the object or None.
Get IP address.
Make a request to the API.
Prepare the post parameters for the request.
Serves the given Flask application.
Render the template with the given name and value.
Stream a list of commands into a stream.
Return the network days between two dates.
Get the path of a command.
Build ssh command.
Load a profile from command line arguments.
Add a relationship between this part and another part.
Returns a list of all related objects of the given type.
Load relationships from a source.
Add a part to the document.
Load a part.
Finds a map with the given name or None if no such map exists.
Create a content type from an XML element.
Parse a string and return a chatl visitor.
Build a JWT for the given secret key.
Assign a force field to a molecule.
Find the maximum rad and npnp of all parameters.
Makes a dictionary of parameters for a force field.
Return a stream that can be used as a stream.
Get all the segments that start with the given name.
List all filenames in the specified directory.
Returns a list of all the directories in the specified directory.
Create a prefix for the bucket.
Delete a file from the bucket.
Ensure that the user is logged in.
Get loud language.
Return the URL for the home namespace.
Return a sorted list of all hotspots in the live data.
Get keeper token.
Upload a build to a repository.
Check if the travis event should be skipped.
Confirm that a build has been confirmed.
Recursively merges a dictionary into a nested dictionary.
Entry point for the keeper.
Edit a part.
Pack the contents of a directory.
Split a path into a list of drive parts and tail.
Get the editor for the given filepath.
Process a module.
Generate an HTML chart.
Writes an html chart to a file.
Serializes a data object to a chart.
Patch the json data with the given data.
Convert a JSON object to HTML.
Convert a dict object to a pandas dataframe.
Write html to a file
Return the chart class for the given dataframe.
Encode x and y fields.
Infer the tarball url from a file.
Create a new app and write it to the given tarball.
Down application.
Generate a random binary string of length length.
Generate a random IP address.
Generate a random date between start and end.
Get a session object.
Make a request to the API.
Create a build.
Check the status of a build.
Generate a sequence of strings for prefix.
Add sub commands to parser.
Return the root argparser for this parser.
Get the description of the document.
Return the help string for this command.
Run the subparser.
Encode a dataset into a string.
Returns a list of all the athletes in the network.
Get the last n activities.
Request the activity list for the specified athlete.
Request activity data.
Return the endpoint for an athlete.
Return the activity endpoint for the given athlete and filename.
Get a request from the given endpoint.
Create a build.
Create a url based on a regex and view
Get a random title for the given languages and genders.
Get a random person.
Get the last name of a sample in the specified languages.
Renders the data as a string.
Set the dataset to be used.
Renders the data to a string.
Check if the type is in the types list.
Returns the url for this view.
Show this object in a web browser.
Save the object to a file.
Open a URL and return a string.
Return a file - like object representing the image.
Write the URL to a file - like object.
Return the checksum of the file.
Returns the amount of a number between min and max.
Claims of unprotected claims.
Return the signing keys as a JSON string.
Unpack a metadata statement.
Sign a metadata statement.
Evaluate a metadata statement.
Correct a usage for a given federation usage.
Extend req with sms dict.
Parse command line arguments.
Add command line arguments to parser.
Apply logging opts to log files.
Log msg with severity verbose.
Return a dictionary mapping letters to numbers.
Generate anagrams from a word.
Return a class and the string representation of the class.
Transform timeseries data to a string.
Get the last value from a timeseries.
Validate page number.
Get a page of iterator from iterator.
Change the permissions of a file or directory.
Create an internal signing service.
Create a signing service for an entity.
Sign a request using the keyjar.
Create a new resource.
Update the metadata for a location.
Update the signature for the given location.
Yields the contents of a bundle.
Create a bundle with the given data.
Returns a list of URLs for the given asset type.
Return HTML tags for the given asset type.
Return HTML tags for each asset type.
Turn a URL into a protocolised URL.
Returns a list of links to the given url.
Start a new connection to a client.
Returns a list of all modules in the project.
Import all modules in the module repository.
Select fields from a document.
Apply datemap to a document.
Print a cursor to the console.
Print the count of records in the database.
Given a list of do tasks and a dependency graph return a list of all the tasks in the
Add default departments to project.
Add default dependencies and sequences to prj.
Create a new sequence.
Create all tasks for the given element.
Get config value.
Add a factory to the registry.
Remove a factory by identifier.
Connect to a protocol factory.
Receive data from the specified connection.
Disconnects a connection from the server.
Call a remote command and return the result.
Called when a connection is made.
Respond to a multiplexed connection.
Send data to the client.
Send data to the remote server.
Called when the connection is lost.
Get the local protocol for the given connection identifier.
Write data to the remote protocol.
Disconnect a connection from the remote server.
Create a string centered on mystring.
clock on the right of mystring
Return a version string for the given version number.
Identify a unit framework for a given target unit.
Assert that the given unit has the same dimensionality as the given unit.
Pad a block of data to a block of block size.
Remove padding from a block of data.
Sign a request with this entity.
Gather metadata statements.
Prints a pretty print of the input word.
Parse command - line arguments.
NAME wordlist sowpods. py
Receive data from the packet queue.
Called when a packet is unregistered.
Create a stub function for the given url.
Ping a call to a remote peer
Return a tuple of strings and completions for the given command.
Convert string to amp. amp list.
Convert a list of objects to a string.
Verify the signature of the metadata statement.
Parse a remote response.
List databases.
Sync a folder with S3.
Build a package from the given path.
Create a readonly fridge.
Loads the JSON document from the file.
Sign a JWT using a keyjar.
Create a JWT signed by a keyjar.
Discover all modules in testdir and load them as Python modules.
Command - line interface for librarian.
Given a letter score return the score of the letter.
Given a word and a list of letters and a number of questions return the score of each letter
Get a list of words from a file.
Check if a word is a valid scrabble word.
Process a string received from the server.
Get the command and responder function for a given command name.
Parse request values from command. arguments.
Write the response to the transport.
Called when the connection is lost.
Build the protocol for the given address.
Convert a JWKS object to a key jar object.
Load a JWKS bundle from a JSON string.
Process a nova event.
Process a Cinder message.
Process an neutron event.
Process a glance event.
Process a swift event.
Process a keystone event.
Process a message based on a heat event.
Start the WSGI server and wait for it to finish.
Print msg to sys. stdout.
Print a message to stderr.
Register a command sub class.
Register a command sub class.
Convert the value to a string.
Create a value from a string.
Update completers with cdict.
Run the ternya worker.
Initialize a new connection and return a connection object.
Initialize the modules.
Initialize a nova consumer.
Initialize a cinder consumer.
Initialize neutron consumer.
Initialize a glance consumer.
Initialize a heat consumer.
Enable a specific openstack component notification.
Get information about a song.
Download a song from a thread.
Execute the instructions.
Load a global variable by name.
Call a function.
Dump a database to a temporary directory.
Call the atexit function if it exists.
Run the application.
Context manager to temporarily change the current working directory.
Recursively copies the contents of src to dst.
Postmortem debugger.
Get the mtime of a file.
Check if the item has changed.
Sync the database with the formatime database.
Clears all data from the cache.
Scrape an IPDB feed.
Download the image from the url and return the filepath.
Check if the image has changed.
Find the caller of the logging module.
Returns the defining component of the given pe.
Main entry point for xtuml.
Find a symbol by name and kind.
Check if the given pe is contained in the given root.
Check if a pe is global.
Get the name of the data type for the given dt.
Get the related attributes for the given rgo and rto
Create an enum from a string.
Create a bridge function.
Create an external entity from an external entity.
Create a function for the given sync.
Returns the constant for the given cnst syc.
Create an operation function for the given object.
Create a property that returns a derived attribute for the given object.
Create a simple association.
Create an association for the given relation.
Create a component for the given model.
Perform a single call on a socket.
Accept a reply and send it to the client.
Reject a call.
Raise a remote exception.
Wait for a call to be completed.
Establish a connection to a worker.
Dispatch a reply to a worker.
Try to guess the type name of the given value.
Deserialize a value into a Python object.
Get a feature from the index.
Put a list of features into the database.
Delete a document from the index.
Delete all mappings from the index.
Delete the index.
Scan a prefix for features.
Scan a prefix and yield all the IDs associated with it.
Scan the index for ids with the given value.
Return the source of the specified feature names.
Return a list of range filters for the given key ranges.
Get the index mappings for all indexed features.
Returns a list of field types for this index.
Disjunction from query fc
Return the number of features in fc.
Count the number of bytes that match the given filter.
Return a pretty string representation of a feature dictionary.
Process docopt and go.
Default formatter for HTML formatting.
Return a pretty representation of a link.
Generate a pretty unique identifier for an instance.
Check uniqueness constraint on metaclasses.
Check the integrity of a link.
Check if the given m has subtype integrity.
Convert int values to lower utf - 8.
Delete all rows from the table.
Implement scan prefix implementation.
Put the index into the index table.
Put raw value into the index table.
Yield the index values for the given index.
Return the index for the given index name.
Add a direction to a string.
Get the type name of the given SDT.
Get the refered attribute of an object.
Build a core type from a CDT.
Build an enum type from a string.
Build a struct type from a SDT.
Build a user type element.
Builds the type of the given SDT.
Build a class from an object.
Build a component from an element and a c element.
Builds the schema for the given m and c.
Prettify the given XML string.
Fetch bikes from the server.
Assign positional information to node.
Create a queue.
Delete a queue.
List all queues
List exchanges.
Purge a queue.
Create a MIME message.
Reads the text from the connection and returns it as a string
Return True if the text is visible.
Main entry point for bridgepoint.
Serialize a value to the given ty.
Serialize association as a string.
Serialize a class to a string.
Entry point for the command line interface.
Partition a collection by a condition.
Render a bidi context.
Find a link between inst1 and inst2
Compute the lookup key for the given instance.
Compute the index key for the given instance.
Returns the type of an attribute.
Create a new instance of the class.
Yields all instances of the metaclass.
Define a metaclass.
Send a multipart message to zmq socket.
Receive a multipart message from socket.
Runs the dead code command and exits the program.
Parse emails into a list of emails.
Decorator for rpc functions.
Return the rpc spec for the given app.
Normalize a postcode middleware.
Return the next value from the stream.
Implement the accept method of the child class.
accept a c node
Accept an ep package.
Get the brightness of the image.
Match the value with the given arguments.
Finds a match in the document at the given position.
Returns a QtSelection object for the given position.
Moves the cursor to the new position and sets extra selections.
Return a tuple with the exception information.
Get an instance of the specified class.
Execute the command.
Checks if the user is up pressed.
Handles down pressed events.
Get the previous edited history. If substring is not specified the previous edited history will be replaced.
Return the next edited history.
Handle reply message.
Returns True if the user has locked the history.
Get the edited history for the given index.
Set the history for this edit.
Store the edits in the history.
Close the console and cleanup the consoles.
Convert a collection to a DataFrame.
Set the attributes of the object.
Subscribe to the stream.
Log a message.
Iterate over a remote view.
Convert notebook to notebook format.
Get the importer for the given path.
Simple wrapper around io. io import io except ImportError.
Override setuptools to override the default setuptools version.
Parse a requirement from a source string.
Return the parsed package info.
Collapse leading ws characters in a string.
Hide the completion widget.
Updates the cursor position and installs the filter.
Return current cursor position.
Update current item with current prefix.
Register the admin site for the given app.
Return a list of disk partitions.
Get the number of CPU times for the current system.
Get system per cpu times.
Read data from stdin without blocking.
Read data from stdin and return it.
Updates the visibility of the tab bar
Create a new tab with the current kernel.
Add a tab to the tab widget.
Populates the magic menu with all magic menu items.
Close the tab.
Check if a passphrase matches a hashed passphrase.
Return an indented short title for the given item.
Check if the user has permission to change the object.
Check if the user has permission to delete the object.
Add n children of parent to g.
Make a binary graph from a list of levels.
Submit a set of jobs for each node in the graph.
Validate the tree.
Make a color table for the given class.
Return a copy of this color scheme.
Add a new scheme to this color scheme.
Set the active scheme.
Return the path to the lib directory for home.
Process messages from the iopub channel.
Wait for the kernel to be beating.
Set style.
Get the format for the given token.
Get the format of a document.
Get format from style.
Find a command in the PATH.
Normalize a path.
Check if nsp in value is in value.
Check if entry points are valid.
Return True if src is the last blank line.
Return True if src is the last two blanks.
Transform assign system to a string.
Replace assign magic characters in a line.
Transform a line of text into a classic prompt.
Prompt the user for an input line and return the transformed line.
Finds the indent spaces full dedent and full dedent of a line.
Store lines in buffer.
Reset the source to its original state.
Process cell magic.
Append lines to the end of the cell.
Transform a cell into a string.
Post notification to all registered observers.
Returns a set of all observers for notification ntype sender.
Add an observer to the registry.
Update the status of all running jobs.
Report the number of jobs in group.
Remove all jobs from a group.
Return a new comp or dead status.
Report status of running and completed.
Initialize the thread.
Insert a value at the specified position.
Return a copy of the object.
Declare a special class.
Declare a list variable.
Declare a set of variables.
Set the current working directory.
Moves the route to the given state.
Calculate the energy of a given state.
Return a dictionary with default values.
Check the table for changes.
Renders the expression for the given check.
Format a list of rows into a table string.
Return a link to the given url.
Generate a JS file for the given url.
Return a cssfile for the given url.
Generate an HTML img tag.
Subtract a numeric value from a numeric argument.
Multiply a value by an argument.
Divide value by arg.
Returns the modulo of value with arg.
Return the verbose name of a model.
Split user input line into pre esc or ifun.
Add command line options to parser.
Remove all builtins and remove all builtins.
Find the base name of a URL in the specified index.
Yield explicit rel links.
Remove shells from a string.
Entry point for the coverage script.
Add an action to the option.
Append an action to the parser.
Print the help message for a given topic or parser.
Implement help subcommand.
Check if any of the given arguments match the given options.
Executes the command.
Print info to stdout or stderr.
Unserialize a Python object.
Set sys. displayhook.
Calls f with args and kwargs and logs errors.
Check if the given url is a valid URL.
Validates that the given url is valid.
Validate a container URL.
Pull a set of keys from the namespace.
Select random ports.
Apply a sequence of sequences and return the result.
Get the last n lines of the current line.
Set autoindent flag.
Initialize logstart mode.
Save sys module state.
restore sys module state
Register a post execute function.
Create a new main module.
Initialize user namespace.
Return a list of all namespaces.
Reset the state of the database.
Delete a variable from the history.
Remove all references that match the given regular expression.
Returns a struct with the property of the specified object.
Find an object by its name.
Inspects the object and prints it if it exists.
Initialize the shell history.
Show the traceback for the given exception.
Print the traceback to stdout.
Show syntax error traceback.
Insert the current line before the next line.
Set a custom completer for this matcher.
Set the completer frame.
Run a line magic.
Find a magic by name.
Define a macro.
Run a system command.
Prompt the user for a rewritten input.
Return a dictionary of user variables.
Return a dictionary of user expressions.
Evaluate a trap expression.
Run cell in ipy file.
Run a cached cell magic.
Expand a string to a variable.
Create a temporary file and write data to it.
Ends the session and resets the session.
Broadcast a message to a target.
List all profiles in a directory.
List all bundled profiles.
Find a distribution by req. key.
Return filename if it exists or None if it doesn t.
Read the next line from the buffer and return it.
Send a string to the child process.
send intr to child fd
Prepare the regex pattern for the given pattern object.
Prepare the regex pattern for the given p.
Search the string buffer for the best match.
Search for the best match in the buffer.
Unpack a directory.
Return the last error in the log.
Execute a command and return the output.
Find the source for the given filename.
Return a list of all executed arcs.
Return a list of arcs that are not in the no branch.
Returns a list of unpredicted arcs.
Return a list of branch lines.
Return the total number of branches.
Return a dictionary of missing arcs that are not in the current branch.
Return a dictionary of stats for each branch.
Set the precision of the model.
Returns the coverage percentage of the statement covered by this branch.
Return the covered percentage as a string.
Highlight text in needles in haystack with cls name.
Highlights the given string with the given keywords.
Highlight words in a string.
Run a function and return the result.
Remove the end of a string from the end of a string.
marquee a string.
Formats a string in the screen format.
Dedent a string.
Wrap paragraphs in paragraphs.
Given a list of rlist return the optimal number of rows and columns.
Returns the value of mylist at i or default if default is none.
Build the kernel argv.
Initialize the ssh connection.
Pretty print an object.
Pretty print a Python object.
Get the mro for the given object class.
Prints the default representation of an object.
Pretty print obj.
Print the pattern of an object.
Print the type of an object.
Print the name of the module or the name of the module.
Print an exception.
Decorator to add a function to a type.
Return a deferred function for the given module type and name.
Writes text to the output.
Breaks the current line by breaking the current line by breaking the specified separator.
End a group.
Flush the buffer and clear the buffer.
Pretty print an object.
Write row into ods.
Get the clipboard content.
Get the contents of the clipboard.
Get the clipboard from tkinter.
Get the prefix of the build directory.
Rekey a key in a dikt.
Extract dates from an object.
Recursively squash dates in obj.
Return the default value for an object.
Check if the install dir is a site dir.
Write a script to the install directory.
Sleep for a given amount of time.
Create a parser for the given prog name and subcommand.
Disambiguate a connection file.
Build a package finder.
Changes the log level of the logger.
Return default logger for this class.
Check that the flags of a configuration have changed.
Print help for all aliases.
Print flag help.
Print the subcommands.
Print help to stdout.
Print the examples.
Update config with new config.
Initialize a subcommand.
Flatten the flags and aliases into a single flag dictionary.
Parse the command line.
Load configuration from a file.
Generate a config file for the configuration file.
Downsample an array by k.
Formats a list of info into a string.
Write a message to the output.
Called when the configuration of a configurable class has changed.
Return the help string for a class.
Return the help string for a trait.
Remove all instances of the given class.
Format a failure message.
Handler for the crash handler.
Flush the socket and process events.
Start all the channels in the kernel.
Read a notebook from a file - like object.
Read from p until EOF is reached.
Split a string into a list of tokens.
Compress a dhist.
Add a magic function to a dictionary.
Return a dictionary of all the magics and their docstrings.
Return a latex version of strng.
Set the default option for the given filename.
Show the gui reference.
Create a task from a callable.
Get information about a task.
Get the callable from the function info.
Calculate the next run.
Submit this task to the task channel.
Run the task.
Run the run asap.
Run a number of iterations on a task.
Runs the callable only once.
Find the full path to the security file.
Bind the kernel to the engine.
Create an interrupt event.
Run the main loop.
Filter namespaces based on name pattern and type pattern.
List namespaces.
Check if the op is in the dict.
Draw a figure if interactive is True.
Flush all figures to the canvas.
Send a figure to the backend.
Loads the specified extension from the specified module.
Unload the extension for the specified module.
Generate random ports.
Initialize the webapp.
Handle a sigint signal.
Exit the program.
Cleanup all kernels.
Generate a set of price options.
Replace multiple occurrences of text in dict with text.
Renders the shell with the specified name.
Create a new zipfile.
Fix the version in the prerequisites.
Return True if obj is a mappable object.
Get the partition of a sequence.
Run a file and return the output.
Run a source command.
Download a pi file.
Reduce freqlist by num.
Compute the number of digit frequencies of a file.
Yield digits from a txt file.
Return the frequencies for each digit in digits.
Compute the two digit frequencies of a list of digits.
Return n digit frequencies.
Plot two digit frequencies.
Plot one digit frequencies.
Print debugx expression.
Reverse a view.
Return True if prefix is private prefix of base.
Run a debug script on the given src.
Run a Python script.
Run a debug script for a module.
Return a dictionary of all the hashfiles in hashroot.
Compress a hashroot to a hashroot.
Return a list of all keys in the directory.
Return True if the given record should be allowed.
Format an error and add capture to it.
Embed a shell in interactive mode.
Return trans writer and meta writer.
Prepare the directories for translatable languages.
Write a list of po entries to the specified file.
Write a header to a po file.
Subscribe to a user.
Initialize the command line parser.
Run a Python module.
Run a Python file.
Compile a Python code from a Python source file.
Load a python code from a file.
Return an HTML table representation of an item matrix.
Set the current value.
Cancel completion.
Select the index of the given row and column.
Update the list.
Return a dictionary of word frequencies for each word in text.
Print word frequencies.
Return a string representation of the document.
Writes the object to a file.
Validate pin against schemas. pin schema.
Send a shared pin to a set of topics.
Delete a shared pin.
Send a pin to the specified user.
Delete a pin.
Subscribe to a topic.
List subscriptions for a user.
Begins a new transaction.
Context manager for executing a task.
Context manager for submonitoring a subtask.
Update the work and message.
Add a submonitor to the progress bar.
Mark the unit as done.
Move the location of the ideal build to the new location.
Load a configuration from a list of files.
Load configuration from file.
Load a flag from a configuration dictionary.
Decode argv into a list of unicode strings.
Load configuration from argv and aliases and flags.
Convert parsed data to config.
Find a module by name and path.
Called when a stop event is received.
Notify the start of the process.
Notify stop callbacks of data.
Interrupt and kill the worker.
find command and program args
Start the mpi process.
Send a file to the remote server.
Fetch a file from the remote.
Return the number of engines.
Starts the specified number of engines.
Start a new job.
Return a dict with the default context.
Parse the job id from the output.
Write a batch script to the specified file.
Start a new job.
Create a context menu.
Inserts a jpg into the editor.
Append a PNG image to the end of the image.
Append svg to the list.
Add an image to the document.
Copy an image to the clipboard.
Get the image with the given name
Insert an image into the cursor.
Insert svg into cursor.
Saves the image with the given name.
Terminate the process if new is True.
Initialize the environment.
Prompts the user for input and rewrites the input.
Ask the kernel to exit.
Set the next input.
Read a configuration file.
Get a list of values from a section and option.
Get a linelist from a section and option.
Set timid from environment variable.
Set attributes from keyword arguments.
Load configuration from a file.
Set an attribute from a config option.
Set the delims for this expression.
Split a line by the delimiter.
Return a list of words that match the given text.
Return a list of words that match the attribute of text.
Greedily change the splitter delims.
Return a list of aliases that match the text.
Return a list of matches for the given text.
Called when the user completes the text.
Match a record against a set of tests.
Returns a list of records that match the given check.
Extract a subdict from a record.
Return True if the user is in a quiet state.
Write the output prompt to the terminal.
Write format dict to stdout.
Write the output to the console if logger. log is enabled.
Raise an exception if the operation is freezed.
Convert a string to a timestamp.
Called when an event loop has changed.
Run one iteration of the shell.
Publish code to the iopub socket.
Send an abort request to the specified stream.
Send a clear request to the server.
Return a string representing the given topic.
Send shutdown message to all the shell streams.
Add modules before context.
Remove modules that are not in the context.
Return the absolute path of the given path or None if it is not a directory.
Return True if name is a file like name.
Return True if obj is a subclass of any type.
Check if the given path is a package.
Return the logarithm of label.
Decorator for transplanting a class to a module.
Get CPU times for the current system.
Get the process for this process.
Return a list of open files for this process.
Get a list of connections for this process.
Check if a user has a group.
Resolve a class from a module path.
Calculate usage percentage.
Login to the server.
Get the gdocs key from the URL.
Ensure temp path exists if it doesn t exist.
Remove all temp files.
Upload a file to this entry s gdoc.
Synchronize local and meta CSV files.
Download csv from gdocs.
Upload the po file to the temp path.
Clears the temporary file.
Create a new qtconsole connection
Check if the given url is accessibility.
Check if a URL has the specified contents.
Get the HTTP response code from the given URL.
Compare content type in url with content type in content type.
Compares the response code of the given url with the given code.
Validate data against source.
Clear stdout and stderr from stdout or stderr.
Create a list of code units from a list of morfs.
Return the full rootname of the module.
Return the source file of the coverage report.
Determine if the file should be Python.
Return the total number of seconds in a td.
Get the result or raise an exception.
Wait until the message is ready or timeout is reached.
Get a dictionary of engine ids and results.
Abort the request.
Return the elapsed time of the message.
Waits for the queue to be ready and prints it to stdout.
Republish a displaypub.
Wait until all the outputs have been written.
Wait until all outstanding messages have completed or timeout expires.
Returns the absolute path of the given file.
Prepare a list of patterns for inclusion in a file.
Return os. sep from a string
Find all python files in a directory.
Return filename relative to self. relative dir
Return the canonical filename for the given filename.
Get zip data from a file.
Return True ifffpath is a valid file path.
Return True ifffpath matches any pattern in the pattern list.
Map a path to a canonical filename.
Main loop for the Qt4 kernel.
Loop over a gtk embed kernel.
Enables the specified gui.
Return the goe ratio of n.
Return the center eigenvalue of a matrix.
Compute the ensemble diffusions.
Initialize a new instance of this class.
Load configuration file.
Write the file to disk.
Erase the file.
Line data as a dictionary.
Return the arc data as a dictionary.
Write the graph to a file.
Read a file and store the lines arcs.
Load raw data from a pickle file.
Read a file and return a dictionary of lines and arcs.
Combine multiple data files into a single one.
Add line data to self. lines.
Add arc data to self. arcs
Add the executed lines and arcs to the hasher.
Return a summary of the report.
Yield pasted lines from a string.
Main loop for interacting with the keyboard.
Replace rlhist multiline with a new line.
Prompt the user for a raw input.
Edit syntax error.
Prompt the user to exit.
Get the url and revision from the URL.
Create a new frontend widget.
Initialize the colors for the widget.
Return a tuple of identity url pub url location
Convert robj to a numpy array.
Set the active color scheme and the active color scheme.
Toggle the color scheme.
Return a string representation of the traceback.
Return a structured traceback.
Format a list of extracted lines into a string.
Show the exception only for the specified type and value.
Set mode.
Ensures that a module is imported from a list.
Add a line to the code.
Add a section to the code.
Get a function by name.
Return the code for the given expression.
Render the template using the given context.
Apply dots to a value.
Render a template.
Default formatters.
Decorator to add a printer for a given type.
Changes the precision of a float.
Return a list of all configuration files for the current user.
Configure logging.
Configure the environment based on a list of paths.
Print a dumb page of a string.
Page a file.
Get pager cmd.
Get the start of a pager.
Print a string to the screen.
Pretty print a string.
Print a latex object to PNG.
Print a latex object to PNG.
Return True if o can print latex.
Pretty print a latex object.
Add options to the configuration.
Validate a list of strings.
Validate that a dictionary is a valid string.
Start the ioloop loop.
Process a received message from the server.
Complete a text line and cursor position.
Get information about an object.
Shutdown the server.
Flush all buffered messages.
Send an input message.
Start all the channels.
Stop all channels.
Return True if all channels are alive.
Load a connection file.
Start a new kernel.
Shut down the kernel.
Kill the kernel if it exists.
Interrupt the kernel.
Send a signal to the kernel.
Check if the connection is alive or not.
Return the shell channel.
Return the sub channel of this channel.
The HB channel.
Bind a kernel to the zmq engine.
Log a debug message if debug level is greater than level.
Return a list of extension classes.
Pre - step function.
Yield base dirs and files from an egg directory.
Scan egg dir for stubs.
Launch a new instance.
Save a connection dictionary to a file
Load config from json file
Load the secondary configuration from JSON.
enable autopx mode
Disable autopx mode
Run a cell in the virtualenv.
Run a heartbeat task.
Run a task from a message.
Remove a task from the database.
Patch obj with name to method if missing.
Accept a new connection.
Reject a pending connection.
Return a proxy agent for this client.
Validates the form and redirects the user to the success page.
Handles DELETE requests.
Overrides Django s pre save method to add the user field to the instance.
Check if all modules have been compiled.
Returns the editor for the specified file or None if no editor is specified.
Get the clipboard.
Add a function to the chain.
Get the metadata for a given path or module.
Configures the configuration with the given options.
Import an item from a package or object.
Attempt to passwordless ssh.
Attempts to open a passwordless server using a passwordless keyfile
Try to connect to a passwordless ssh server.
Open a tunnel connection to a socket.
Open a tunnel to a remote host.
Stops the scheduling tasks.
Unwraps an exception and returns it.
Register a new engine in the engine registry.
Unregister an engine from the queue.
Handle a reply message.
Flush all pending notifications.
Flush the results from the socket.
Flush control messages from socket.
Flush ignored control messages.
Flush all messages from an IOPUB socket.
Spin every interval seconds.
Stop the spin thread.
Spin the hub.
Send a apply request to the specified socket.
Get hub history.
Send a query and return a list of records.
Return a set of opcodes for the given names.
Return a byte parser for the text.
Returns a set of lines that match the given regexes.
Return the first line of a multiline string.
Return the first set of lines that are not in ignores.
Parse the source file and return the lines and excluded lines.
Return a list of tuples of all arcs.
Return a list of child parsers.
Iterate over the lines of the code.
Find all statements in the document.
Return a string representation of the given block stack.
Validate that all chunks are valid.
A generator that yields the arcs of the file.
Returns a list of all the child parsers in the tree.
Returns a set of all arcs in the tree.
Start the cover instance.
Report the coverage of all the modules.
Check if a file should be included in the cover packages.
Interpret a distro name.
Open a URL with authentication.
Get the parent of an object.
The root topic of the current topic.
Renders the given content using the given context.
Configure the configuration.
Formats an error and adds it to the buffer
Split data by num.
Convert nb to this nbformat.
Convert a hex color to r g b
Get a dictionary of colors for a style.
Get the font for the given family.
Handle handle execute reply.
Handle a history reply.
Handle pyout message.
Handle display data messages.
Starts all the channels.
Execute a file on the server.
Process execute error message and append html or plain text.
Process execute payload.
Set the default style.
Edit a file.
Return a string with the given number of characters in the prompt.
Make a continuation prompt.
Changes the style sheet of the document.
Changes the syntax style of the highlighter.
Transforms a dictionary into a single value.
Get virtual memory.
Get the number of CPU times for the current system.
Get the process UIDs for this process.
Get the process gids associated with this process.
Returns a list of threads for this process.
Return a list of open files for this process.
Return the commit hash of a package.
Return information about a package.
Return the number of CPUs on the system.
Get the number of CPUs available on the system.
Get the next set of messages.
Fetch a single row from the database.
Fetch a number of rows from the database.
Fetch all rows from the database.
Connect to a node.
Reads a JSON string into a notebook.
Parse a string and convert it to a notebook.
reads json or py from a string
Writes a notebook to the specified format.
Write nb to fp.
Convert a notebook to a metadata object
Load a value from a dictionary.
Returns True if the given name matches any of the include and exclude patterns.
Check if a class is a subclass of cls.
Return whether or not the given directory should be included or not.
Return True if the specified file matches any of the supported files.
Returns True if the given function should be called or False otherwise.
Returns True if the specified method matches the registered plugins or False otherwise.
Returns True if the given module is a registered plugin.
Return a list of lines from a file.
List lines from a pdb file.
Print a list of lines.
Implement the pdef command.
Returns the conversion factor between two currencies.
Convert currency from one currency to another.
Compute the exchange rate for a given date range.
Get the encoding of a stream.
Get the default encoding for stdin.
Write the connection file to the profile directory.
Initialize the heartbeat.
Initialize the session.
Initialize the iopub socket.
Initialize the kernel.
Convert html content to text.
Convert Markdown content to text.
Convert a domain to a fully qualified domain name.
Add options to the parser.
Overrides the default configure method.
Check if a directory should be included in the exclude list.
Return True if there is a dynamic library in the given extension.
Call each of the functions in funcs and return the result.
Call each of the given functions reversed.
Append a function to the end of the list.
Insert a function at the specified position.
Format usage message.
Write pid file.
Remove the pid file from the profile.
Get pid from file.
Construct a parser from a magic function.
Return the real name of a magic function.
Highlights the given string using the highlighting mechanism.
Rehighlight the given block.
Set the format for this highlighter.
Copy the current cursor to the clipboard.
Execute a shell command.
Prompt user for input.
Tab pressed.
Create a context menu.
Handle keyboard key press events.
Insert a continuation prompt.
Handle complete reply.
Handle reply messages.
Handle kernel death events.
Handle object info reply.
Handle a pyout message.
Handle stream messages.
Handle a shutdown reply.
Execute a file.
Interrupt kernel.
Resets the current state of the interpreter.
Restart kernel.
Call the tip.
Complete the channel.
Process execute error message.
Process execute message.
Move the cursor to the new position and call tip.
Add a plugin to the list of plugins.
Chain all plugins in the chain.
Generate a generator for the specified plugins.
Run all plugins and return the result.
Configure the plugin.
Load plugins from pkg resources.
Load plugins from nose plugins.
Convert latex to PNG.
Convert latex to html.
Check if a distribution exists.
Return a dict representation of the interval.
Get the name of the process.
Get CPU percent.
Returns the percentage of physical memory allocated to the system.
Returns a list of memory maps.
Check if the process is running.
Suspend the running process.
Resumes the current process.
Kill the running process.
Wait for the process to finish.
Wire the kernel to the gtk main thread.
Return True if identifier is shadowed by ip.
Register a transformer.
Unregister a transformer.
Register a checker.
Unregister checker.
Register a handler for the given name.
Unregister a handler.
Apply prefilter to line info.
Find handler by line info.
Apply transformers to a line.
Apply prefilter to a line.
Apply prefilter to a list of lines.
Check if the user is in the user namespace.
Check if the line info matches the esc magic.
Check if the given line is a prefilter.
Check if the given line is a shadowed one.
Handle a line of text.
Expand aliases.
Process a line of text.
Process a line of code.
Process a line of input.
Handle a line of code.
Overrides Qt s event filter method to hide the widget when the user presses the key press
Overrides enter event to stop timer.
Paint the tip widget.
Show call information.
Moves the cursor to the current position and hides the widget if the cursor is outside the
Canonicalize a path.
The masked dictionary.
Check if virtualenv is running under virtualenv.
Return a dictionary of word frequencies for each word in fnames.
Return the default aliases for the current operating system.
Define an alias with the given command.
Define an alias for a command.
Validate that the alias is valid.
Call an alias with the given rest.
Transform an alias into a command string.
Expand aliases.
Parse autohelp directive.
Reset the intensity and foreground color.
Get the color for the given intensity.
Get the format of the text.
Generate a JWT.
Remove expired JWTs.
Check if a token has already been used.
Validate a valid JWT.
Return the common prefix of a list of items.
Return the hint of the size of the widget.
Return True if the cut can be cut.
Returns True if the user can paste the clipboard.
Clears the input buffer.
Cuts the text and removes the selected text if possible.
Get the input buffer.
Set the input buffer.
Set the font for the completion widget.
Prints the control to the console.
Prompt to the top of the screen.
Resets the font to its initial state.
Append a new input string to the end of the input string.
Append html to the current document.
Append an HTML fetching plain text to the document.
Append text to the end of the text buffer.
Clear the temporary buffer.
Completes the specified items with the specified items.
Fill temporary buffer with text.
Determine whether the key is down or not.
Create a control object for this widget.
Create page control.
Filter page keypress event handler
Get the plain text of the given block.
Get the cursor to the end of the text.
Get the cursor position of the input buffer.
Prompt the user for input buffer and return the text.
Get the cursor for the prompt.
Get the cursor for the selection.
Insert a continuation prompt.
Insert html into cursor.
Inserts an HTML document and returns it as plain text.
Insert text into cursor.
Keep cursor in buffer.
Quit keyboard.
Insert or append text to the page control.
Prompt the user for input.
Read a line from the input buffer.
Set the continuation prompt.
Set the top cursor of the scroll bar.
Adjust scrollbars based on the current control.
Main entry point for the command line tool.
Copy a config file to the current working directory.
Create a profile by name.
Find a profile by name in a directory.
Read a file and return its contents.
Create a temporary file and a temporary file.
Close the file and close the stream.
Write data to the file.
Add a new heart handler.
Add a handler to be called when a heart failure occurs.
Handle pong messages.
Returns a list of batches of size batch size.
Return the path and filename of the given pathfile.
Display all loops.
Return elapsed unit avg est end time.
Extract wininst configuration from a file.
Uncache a zip directory.
Return a string with quotes for the given argument.
Check if there are any conflicts in the distribution.
Set fetcher options
Create a home path for the user.
Return True if name is an archive file.
Create a new heading cell.
Create a new metadata node.
Create a new notebook author.
Return True if path is a writable directory False otherwise.
Unquote a filename.
Get a filename from a file.
Get the xdg directory.
Get the ipython directory.
Return the directory of the ipython package.
Return the path of the specified module.
Returns the number of outdated dependencies.
Generate a hash of the contents of a file.
Check to see if the old config matches the old config.
Update suggestions for a given object.
Get suggestions for a given object.
Get suggestions for an object.
Return the relative path of the current working directory.
Return a list of class instances matching the given pattern.
Returns the md5 checksum of the file.
Start the profiling process.
Report stats to the given stream.
Finalize the job.
Disable wx event loop
Disable Qt4 event loop.
Enables the current gtk.
Enable or disable a tk
Enable the inputhook pyglet.
saver function for wave saver
Initialize the database.
Execute a SQL query and return the results.
Get session info.
Get the last n rows from the table.
Get a range of lines by string.
Get the name of the file in the profile.
Create a new session with the given name.
Reset the output to the default state.
Get a range of lines from the input.
Store the output of the given line number in the database.
Write out input cache and output cache.
Stop the thread.
Get the number of CPUs in the system.
Get system per cpu times.
Return a list of disk partitions.
Return a list of pids in the current directory.
Return a nice string for a pair.
Format a list of statements into a string.
Return a short stack of inspect. stack.
Join a list of regexes into a string.
Remove a file from the filesystem.
Updates the MD5 hash of the given object.
Update the profiles dictionary.
Stop a cluster.
Find the path to a command in the environment.
Print stdout and stderr to stdout and wait for stdout to finish.
Find the code units for the coverage.
Run fn on each of the code units in morfs and report the results to the coverage
Set the trace of the current Python interpreter.
Initialize the extensions.
Initialize the shell.
Runs all the executable lines.
Run startup files.
Runs the specified executable files.
Run cell code or file.
Run the module.
Return the filename of the static file with the given name.
Read data from a file.
Escapes the string representation of t.
Report the coverage of the HTML file.
Copy local static files to local report directory.
Write html to file.
Return the hash of the source file and cu.
Index a file.
Reads the status file from the specified directory.
Write the report to a directory.
Sorts two lists and returns True if they are the same.
Get a slice of a sequence.
Truncates a sequence to size size characters.
Read the manifest file and return a list of ignore patterns.
Convert glob pattern to regexp.
Check if filename matches patterns.
Return a list of all versioned files.
Start a new kernel.
Shut down a kernel.
Kill a kernel.
Get kernel by id.
Get the ports of a kernel.
Returns the notebook id for the given kernel.
Start a kernel.
Shuts down a kernel.
Interrupt a kernel.
Restart a kernel.
Create an iopub stream for a kernel.
Create a shell stream for the specified kernel.
Create a hb stream for the given kernel id.
Resets the object to its original state.
Export an html string to a file.
Remove empty spaces from html.
Get the unique value of a given class.
Get a query that includes any of the terms in the tokenized terms.
Get text query from text tokenizer.
Build a greater query for a date.
Get a less query for the given date field.
Get null or blank query.
Set the case insensitive fields in a dictionary.
Add command line options to parser.
Validate that all attributes match the given method.
Check if the given method should be called.
Rotate the ring.
Return the websocket url for this request.
Reserialize a reply message.
Inject a cookie into the request.
Start the beating if we are running.
Stop the HB stream.
Load the file.
Get the index of the given index.
Seek to the specified position.
Edit the block at the specified index.
Show the current block.
Print all colored blocks.
Run a function on a sequence and return the results.
Find the source code of a traceback.
Find inspectable lines.
Create a countdown page.
Clean up engines.
Save a function to the client s history.
Calls f with all outstanding results and returns the result.
Run a function after a function is called.
Return a list of all the messages in the queue.
Get a message from the queue.
Parse a URL and return a dictionary of configuration values.
Return a list of all root modules.
Returns a list of module completions for the given line.
Completer for magic runs.
Quote an attribute.
Configure the plugin.
Write the stats to the given stream.
Add an error to the error list.
Add a failure test to the error list.
Add a test to the error list.
Generate a two - bin string from a list of loads.
Returns a random integer that is weighted by the number of loads.
Register a new engine.
Unregister an engine.
Handle stranded tasks.
Fail if all tasks have timed out.
Fail a dependency on the given message.
Save a job to the graph.
Submit a task.
Dispatch a result message.
Handle a result message.
Handle an unmet dependency.
Update the dependency graph.
Print the current state of the log file.
Write a line to the log file.
Write data to the log file.
Stop logging.
Create a new notebook node.
Add a string to the chain.
Add a regular expression to the chain.
Dispatch a key to all the regexs that match the key.
Return a list of matches that match the given key.
Check if a notebook dir exists and if not create it.
List all notebooks.
Create a new notebook id.
Delete a notebook by its id.
Check if a notebook exists.
Find a notebook path by notebook id.
Get notebook path by name.
Get a notebook by notebook id.
Get a notebook object.
Save a new notebook.
Save a notebook.
Save a notebook object.
Delete a notebook.
Create a new notebook.
Copy a notebook to the database.
Generate phys tokens from a list of toks.
Load default configuration from a config file.
Return a list of the default classes.
Parse the command line.
Initialize the application.
Initialize the shell.
Initialize the banner.
Return a string representation of the type of obj.
Parse a notifier name.
Return a dictionary of traits for a class.
Get the metadata for a trait.
Check if value is a subclass of self. klass.
Return the default value for this field.
Check if the job is complete or not.
Returns True if the task is unreachable.
Return a dict representation of the dependencies.
Get the depth of a node in a tree.
Print a binary tree.
Disambiguate a DNS URL.
Reduces the elements of this RDD by applying a function f to each element of the
Validate targets.
Dispatch traffic messages to the appropriate handler.
Dispatch a query message.
Handle a new heart.
Handle a heart failure.
Save a message to the database.
Save an iopub message to the database.
Send a connection to a client.
Unregister a registered engine.
Finish the registration.
Shut down a client.
Purge results from the database.
Extract content and buffers from a record.
Send a get history message to a client.
Send a query to the database.
Temporarily change the current working directory.
Decode a completed command.
Run a command under the root of the directory.
Dispatch a message to the appropriate handler.
Check if a message is from another session.
Report all the files in morfs in morfs.
Get the installed version of a package.
Recursively squash unicode objects into unicode objects.
Extract header from msg or header dict.
Check for packers and unpack dates.
Create a message of the given type and content.
Sign a list of messages.
Sign and send a multipart message.
Receive a message from a zmq socket.
Save a string to svg file.
Convert a string to a clipboard.
Convert a string to an image.
Return information about an object.
Get the docstring of an object.
Get the source code of an object.
Get the argument specification of a function or method.
Find the absolute filename of an object.
Find the line number of the source code of an object.
Return a string representation of the definition of an object.
Return the head of the table.
Print noinfo message.
Pretty print a function or class.
Print the source of an object.
Print the contents of a file.
Format a list of fields into a string.
Search namespaces by pattern in ns table.
Start twisted thread if not already running
Return a string representation of the document.
Return the XML representation of the document.
Load all modules in a set of packages.
Invert a dictionary.
Convert an object to primitive.
Get a list of figure managers for the given figure nums.
Print a figure.
Select figure format.
Find the gui and backend for the given gui.
Activate matplotlib backend.
Configure inline support for a backend.
Starts the thread.
Stops the current thread.
Start a tracer.
Installation trace function.
Start the collector.
Stop the tracer.
Pause all tracers.
Start all tracers.
Get the line data.
Collect exceptions from rdict or list.
Render the traceback.
Start coverage coverage if necessary.
Return the canonical directory for the given morf.
Given a filename return the source filename.
Determine if the frame should trace with a reason.
Return canonical name of should trace with given frame.
Add a warning to the warnings list.
Check for packages in the source list.
Start the collector.
Stop and save the data if auto data is set.
Exclude a regex from the config.
Harvest data and save to file.
Combines all the files in the configuration with a single file locator.
Harvest data from the source.
Computes the analysis of a morf.
Analyzes the given harvest data.
Print the harvest data to a file.
Annotate this MORFS with the given morfs.
Report the results of the harvesting.
Reloads the data from the server.
Find the path to a command.
Execute a command and return the exit code.
Forward read events from a file descriptor.
Run the socket.
Find launcher class by name and kind.
Start the process.
Build a launcher for the specified class.
Start the engine.
Start the process.
Return wx. py simple application
Returns True if app is a main loop running wx otherwise False.
Start event loop
Get the Qt application for the kernel.
Returns True if app is running in event loop otherwise False.
Start event loop.
Create a blank canvas with the given width and height.
Draws a cross between the given position and the given color.
Draw a line between pos1 and pos2.
Create an annotated image from a grayscale image.
Get a random UUID.
Generate a unique key for the given get dict.
Get the domain of the given URL.
Parse url and return args as dict.