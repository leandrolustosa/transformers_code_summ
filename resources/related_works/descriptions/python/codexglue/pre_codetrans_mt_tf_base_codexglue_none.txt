Convert sina XML data to a list of URLs.
Download a URL to a directory with dailymotion.
Wrapper for sina_download_by_vid.
Sprintf the given text with the given colors.
Print text to stderr prepending the script_name.
Prints the message to the log and exits with the specified exit code.
Print a message to stdout and exit with an optional exit code.
Detect the operating system.
Returns dictionary with str_ as key and num_ as value
get m3u url segments size segment_list
Legitimize a string.
Download a CBS page.
matchall - Match all patterns in text
Parse a query parameter from a URL.
Parse a host string.
Helper function for _wanmen_get_topic_part.
Downloads wanmen data by course and topic part.
Download bokeccs for a course topic part.
Checks if the given task instance is in the queue or running state.
Returns the event buffer for the given dag_ids.
Return a connection to the snowflake server.
Get AWS credentials.
Returns the value for the given field_name.
Copy the given sql statement to the given file.
Bulk dump a table into a temporary file.
Upload a file to Google Cloud Storage.
Prints the current state of a task
Returns a connection to the ElasticSearch API.
Get the details of an instance.
Create an instance on the cloud provider.
Delete an instance.
Create a database on the specified instance.
Deletes a database on the specified instance.
Start the sql proxy process.
Stop the sql proxy.
Runs the sql proxy tool and returns the proxy version as a string.
Create a new connection in the database.
Retrieve the connection from the database.
Delete the connection from the database
Get a SqlProxyRunner object for this project.
Get database hook.
Clean up database hook logs.
Reserve a free TCP port.
Returns a job_id with the tracker removed.
Extract the error code from the exception.
Remove all dag runs from the database.
Remove all dag task instances from the database.
Set the is_paused state of all the dags in the database.
Prints the statistics of the queued task instances.
Check if there are enough tasks in the dagbag and if so exit.
Emulates os. makedirs.
Convert a string to a float if possible.
Make value aware according to timezone.
Make a naive datetime from a datetime object.
Shortcut for dt. datetime with default timezone.
Get connection to druid broker
Return a requests session object.
Run the request and return the response.
Check the response and raise an airflowexception if needed.
Run the request and check the response.
A context manager that creates and commits a session.
Drop migrations and initdb.
Returns the formatted exception message.
Runs the specified HQL query and returns a list of record objects
Execute a HQL query and return a pandas dataframe
Run HQL with optional parameters.
Insert rows into a table.
Get a connection to the cloud provider.
Checks to see if a collection already exists in the database.
Create a collection in a database.
Check to see if a database exists.
Create a database if it does not exist already.
Delete a database.
Delete a collection
Insert multiple documents into a collection.
Delete a document from a collection.
Get a single document by document_id.
Executes a query against the database and returns a list of documents.
Get a function from a location.
Create a new Cloudformation function.
Update a Lambda function.
Uploads a zip file of the function to the specified location.
Delete a Cloudformation function.
Iterate over the dep statuses for the given ti.
Return True if all dependencies have been met.
Returns a generator of the reasons why the dependency was not passed.
Parse the S3 config file.
Get frozen credentials.
Return a connection to vertica.
Flush the buffer to the logger.
Check if the fileloc points to a zip file.
Construct the task instance for this execution.
Starts the process.
Terminates the child process.
Exit the process gracefully.
Start the scheduler.
Starts the dagparsing in a background thread.
Starts the DAG parsing process in sync with the local system.
Refresh dag_dir if needed.
Print stat information if necessary.
Remove import errors from the database if they exist.
Logs processor statistics for the given list of known files.
Set the list of file paths to process.
Wait until all the processors have finished processing.
Terminate all child processes and wait for them to finish.
Create SSH connection
Creates a new transfer job.
Execute a single transfer job.
List all transfer jobs matching the filter.
Update a transfer job identified by job_name with the given body
Cancel an ongoing transfer operation.
Pause a transfer operation.
Resume a failed transfer operation.
Wait for a GCP transfer job to finish.
Finds the task rescheduled for the given task instance.
Return the number of open slots for this pool.
Run a command and return the output.
Allocate ids for the given partial keys.
Begin a transaction on the remote project.
Commit changes to the remote project.
Lookup a set of keys.
Roll back the given transaction.
Run query on the project.
Get a single operation.
Delete a project operation.
Poll an operation until it is done.
Get hostname from airflow configuration.
Return connection to language service.
Returns a list of template field names for the given class.
Link to template fields.
Dispose of ORM.
Prepares the classpath to load Airflow plugins and dags.
Check if the target task is ready.
Returns True if the ticket_cache variable is set in the configuration. conf file.
Convert an Alchemy object to a dictionary.
Yield successive num_ - sized chunks from items.
Reduce an iterable in chunks.
Chain a number of tasks together.
Renders a log filename based on a template.
Return a connection object to use for requests.
Perform a dataprocoperation and wait for the result.
Deep string coercion.
Handles databricks operator execution.
Run a pig command and return its output.
Fetch the current state of a celery task.
Returns the number of tasks that should be sent per send process.
Returns the number of tasks per fetch process.
Return a connection object to be used to interact with the database.
Helper method to get a job.
Wait for a job to finish.
Create a new version of a model.
Set the default version for a model.
List versions of a model.
Delete a version of a model.
Create a model in MAAS.
Get a model by its name.
Write a batch of items to Amazon DynamoDB.
Integrate executors modules into the globals.
Get the default executor.
Get an executor by name.
Called when a segment error occurs.
Get a connection to the MS SQL server.
Trigger a dag.
Delete a dag.
Get task information.
Get all pools.
Create a new pool
Create or update a container group.
Get the current state exit code and details.
Returns a list of message strings for the named instance view.
Returns a list of logs for the container.
Delete a container group.
Check if a container exists in a resource group.
Construct the ingest query dictionary.
Attempts to poke a message from the server
Get all the task instances in the dag in the specified state.
Get the task instance for the given task_id.
Returns the previous dagrun before this one.
Returns the previous scheduled dagrun for this node.
Verify the integrity of the workflow.
Perform a jenkins request and return the response body and headers.
Convert a context object to a dictionary of airflow variables.
conditionally triggers the dag_run_obj.
Query for metric data.
Returns the dag with the given ID.
Kill a list of zombies.
Bag a dag and all its subdags into self. dags
Collects all the DAGs in the specified folder.
Return a report of the DAGs in the DAG Bag.
Add a number of days to an ISO8601 formatted string
Return True if the file should be pruned.
Returns True if the filepath exists in hdfs False otherwise.
Clear all task instances in the given list of task instances.
The number of the next try.
Get the current state of the task instance.
Set the state to failed and commit the transaction.
Refreshes the state of this Task from the database.
Delete all XCOM data associated with this task.
Returns the string representation of the object.
Returns True if any of the dependencies of this task have completed successfully.
Returns the datetime at which the next retry attempt should be made.
True if the job is up for retry and needs to be retried.
Determine if the pool is full.
Get the dagrun for this job.
Add a new element to the DAG.
Initialize the run context.
Writes the log file to the remote location and closes the connection.
Return a connection object to the API.
Start the instance identified by the resource_id.
Get the instance template specified by resource_id.
Wait for an operation to complete.
Check to see if a bucket exists.
Create a bucket in S3.
Check if a prefix exists in the bucket.
Returns a list of prefixes for the specified bucket.
List the keys in a bucket.
Check if the given key exists in the given bucket.
Get object by key.
Read the contents of a key.
Check if a wildcard key exists.
Given a wildcard key return the corresponding key object.
Query the Cassandra database.
Convert a user type to a dictionary.
Returns a connection to the Speech API.
Execute the query.
Load plugins from the given entry points.
Check if plugin_obj is a valid plugin.
Marks a list of tasks as skipped.
Establish connection to Azure File System.
Check if a file exists.
List files and directories in the specified path.
Run the query and wait for the result.
Uncompress a gzip bzip2 or compressed file.
Returns a mssql cursor
Build metrics dict for logging.
Creates a cgroup for the specified path.
Deletes the cgroups under the specified path.
Do the actual call to Databricks API.
Returns a Salesforce connection
Make a query to the database
describe the object
Get the available fields for an object
Get object from Salesforce
Convert a datetime column to a timestamp column.
Get a mongo collection.
Checks if there is an email attachment with the given name.
Searches through the mail and returns all attachments with the given name.
Return the filename and the payload of the message as a tuple.
Send a batch of records to the Firehose Delivery Stream.
Get the status of the last rescheduled task.
Sends an email using the mail backend.
Send email via SMTP using SMTP Mail
Convert UTC datetimes to local timezones.
Check if a blob exists in a container.
Check if a prefix exists in the given container.
Loads a string into a blob.
Reads a file from the swift container.
Delete a file from a container.
Get ftp connection.
Return a list of files in a directory.
Store a local file on the remote host.
Get the modification time of a file on the server.
Executes the webhook.
Return a fileservice object.
Check if a directory exists.
Checks if a file exists on the server.
Lists the directories and files in a share.
Creates a new directory.
Loads a file from a file path.
Loads a string of data into a file
Returns a connection to the storage backend.
Downloads a blob to a local file system.
Upload a file to a bucket.
Check to see if an object exists in a bucket.
Check if the blob is updated after the specified time.
Delete an object from a bucket.
Get the size of an object in a bucket
Get the CRC32C of the object.
Get the MD5 hash of the object.
Check if the status of the secondary training job has changed.
Generate a human readable status message for a secondary training job.
Create a tar file and upload it to S3.
Configure resources for S3.
Check if the given S3 URL is valid.
Return a connection object for logging.
Execute the dataflow.
Run migrations offline.
Run migrations online.
Delete instance.
Delete a table from the instance.
Update a cluster.
Prepares the command line arguments for the CLI.
Prepare hive configuration from a dictionary.
Checks if a table exists in the database.
Return a connection object to the database.
Get the results for a HQL query.
Get the records from HDFS given a HQL query.
Run HQL query and return results as a pandas dataframe.
Returns a productsearchclient object.
Get the URL for the Airflow API.
Bind parameters to an operation.
Escape a string for use in LIKE operator.
Cast string_field to bq_type.
Validates that the value is of the expected type.
Return a connection to the BigQuery database.
Returns a service object that can be used to interact with the API.
Checks if a table exists in a dataset.
Cancel the query job.
Run table delete.
Insert or update a table in the dataset.
Get a dataset resource.
Executes the given operation on the database.
Executes the specified operation for each element of the specified sequence of parameters.
Returns the next page or None if there are no more results
Returns a cursor to the postgres database
Recursively create intermediate directories.
Run the command as a subprocess.
Called when the job has finished running.
Entry point for the script.
Builds the html header.
Builds the javascript string for the chart
Create a new x - axis.
Create a y - axis with the given name.
Return a connection to the database.
Get the last dagrun for the given dag_id.
Sends the message to SQS
Generate a JSON response.
Open a file if it is a zip file.
Generate a cache key for the current request.
Returns a connection to the video service.
Get API key from connection.
Return a requests. Session object.
Executes the Pump API.
Build the payload for OpsGenie.
Execute the alert hook.
Return connection object.
Run a query and return the query execution ID.
Check the status of a query execution.
Poll the query execution status for the given query execution id.
Return a pysftp. connection object for the SSH session.
Handle the rate limit exception.
Get information about a table in a database
Returns the location of the table in the database.
Get the status of a cluster.
Deletes the specified cluster
Returns a list of cluster snapshots
Restores a cluster from a snapshot
Creates a new cluster snapshot
Execute Slack API call.
Create a new EMR job flow.
Filter a list of dictionaries for those whose value is greater than or equal to size.
Filters a list of objects for those that have a key in the ignored_ext list.
Execute the pipeline.
Get a pool by name.
Create a new pool or return an existing pool.
Delete a pool.
Convert a Python dictionary to a JSON object.
Wait for an operation to finish.
Get a specific operation by name.
Append a resource label to the cluster proto message.
Get the webhook endpoint from the extra_dejson data.
Build a discord payload
Runs the bot.
Encrypt plaintext for key_name and return the ciphertext.
Returns a connection to the Speech API.
Write the log file to S3 if it exists.
Returns a dictionary of environment variables to be passed to the worker.
Generates secrets from kube_secrets.
Returns the security context to use for the worker.
Get the extra links for the given operator.
Start the DAG file processor.
Return True if the result has been processed False otherwise.
Exit the application gracefully.
Updates the import errors in the dagbag in the database.
Finds all dag runs that are in the given dag and processes their task instances.
Get the number of tasks in each dag in the specified states and the number of tasks in each
Change the state of the task instances for the executable task instances in acceptable_states.
Enqueues a list of simple task instances.
Change state for tasks that failed to execute.
Processes the executor events from the simple dag bag.
Update the counters in the RunnerStatus.
Manage executor state.
Get a dag run for the given execution date.
Returns a dictionary of task instances keyed by task ID.
Updates the state of all dag runs in dag_runs to failed.
Check if the current process is running and if so terminate the task runner.
Get a client for the project.
Get instance by instance id.
Delete an instance.
Delete a database from an instance.
Returns True if the message has an attachment.
Prepares the additional parameters dictionary.
Returns a connection to the Cassandra cluster.
Check to see if a table exists in the cluster.
Returns True if a record with the given keys exists in the specified table.
Build a command to track the driver status.
Submit a Spark application to the cluster.
Processes the Spark submit log.
Process the Spark status log file.
Return the appropriate task runner for the given task job.
Wait for the task to finish.
Query MySQL with self. sql.
Configures a CSV file with the given schema.
Write the schema to a local file.
Get the column type dictionary from the schema.
Map MySQL type to python type.
Return extra data as json.
Scales a list of time units to a given number of seconds.
Return the number of days ago.
Initialize a role if it has enough permissions.
Deletes a role from the database.
Get the user s roles.
Returns a list of tuples with permission name and view menu name.
Checks if the current user has any of the specified roles.
Returns True if the user has permission False otherwise.
Remove all permission views and view menus that do not have any permission.
Merge a permission with a view menu.
Updates the admin permission view with all pvms
Create permission vms for all dags.
Get the fernet object.
Checks that the partition exists in the database.
Poke a message from SQS
Get a connection to the HDFS.
Get a HDFS connection.
Check if hdfs_path exists.
Return connection to Pinot Broker.
Get the URI for this connection.
Convert datetime. date to dict.
Convert a time object to a dictionary.
Return a redis connection.
Executes SQL and returns a Pandas DataFrame.
Runs SQL against the database.
Set the autocommit flag on a connection.
Return cell serialized as a string.
Health of the scheduler
Return cloudant session object.
Execute the Slack webhook.
Get Google OAuth 2. 0 credentials.
Authorize to Google Auth.
List of unfinished tasks.
Prepare the command to execute.
Normalize a tensor by its mean and standard deviation.
Crops a PIL image.
Flips the left and right edges of an image.
Applies perspective transform to the given image.
Flips the top and bottom edges of an image.
Adjust brightness of PIL image.
Adjust contrast of a PIL image.
Adjust saturation factor of PIL image.
Converts a PIL image to grayscale.
Save a tensor to a PIL image file.
Finds all classes in the given directory and returns a dictionary mapping class names to indices.
Reads the given info_file and returns a torch. longtensor.
Reads a matches file into a torch. longtensor.
Compute the accuracy on the batched output
Download a URL to a file.
Return a list of all directories under root.
Returns a list of all files with the given suffix under the given root.
Download a file from google drive.
Get random parameters for a given image.
Generate startpoints and endpoints for a random distortion.
Get random parameters for cropping.
Generate a set of transformations for a random set of parameters.
Get random parameters.
Downloads the tarball and extracts the tarball.
Downloads and extracts the training and test files.
Get current theme name.
Returns a list of themes in templates_path.
Parse the response and return a list of results.
Multinomial multivariate normal.
The log probability of eight schools.
Build a random variable with a custom name.
Max along an axis while masking non - finite values.
Computes the size of an event given its shape.
Evaluates the given function for all events one - hot.
Deserialize identifier to a tensor function.
Computes the size of the parameters.
Builds a batched training pipeline.
Checks that the map values are valid.
Call a transition function with the given arguments.
Calls the given function with the given arguments and returns the return value the extra gradient and the
Broadcasts from_structure to to_structure if necessary.
Performs a leapfrog step.
One step of the Metropolis Hadtings step.
Create a TfpFunction from a configuration dictionary.
Convert x into a tensor.
Expands x to the event rank.
Computes the softmax or log - softmax of the cat.
Ensure tensorflow is installed.
Compute the logistic regression.
Covertype features and labels.
Makes a positive axis from the given axis and ndims.
Squeeze x along axis.
Negative Z factorization.
Inverse of z.
Semilocal linear transition transition matrix from autoregressive coefficient.
Semi - local linear transition noise.
Return the primes that are less than n.
machine eps for given dtype.
Perform a line search inside a bisection.
Prints a pass_through tensor with the given list of values.
Checks the rank and shape of a quadrature parameter.
Interpolate a grid with the given loc.
Linearly interpolate a scale matrix.
Concatenates multiple tensorflow vectors.
Tensorlog sum - exp of vs + ms.
Computes the log of a matrix and a vector.
Matrix of a vector.
Extracts the log probabilities from the given distribution.
Chooses a random direction for each batch.
Calls the given function with the given arguments if fn_result is none.
Builds a tfd. normal and tfd. transformeddistribution of the posterior of the
Computes the mean and variance of the moments of the masked time series.
Returns the initial value of a masked time series tensor.
Mixing over posterior draws.
Return the range of this interval.
Given a list of distribution arguments and a list of distribution names resolve the names of the distributions
Connects the EntryPoint class with the given model.
The total entropy of the distribution.
Create a summary image from seqs.
Generates a summary image of inputs and reconstruct.
Visualize qualitative analysis.
Summarize distribution parameters.
Summarize mean in nats and bits.
Gradient of multivariate normal diagonal.
Create the zero state.
Call the convolutions.
Sample from the static prior.
Returns the shape of the batch outputs.
Returns the shape of the batch tensor.
Converts vector size to square matrix size.
Return indices that would sort a numpy array.
Sort an array along a given axis.
Tensorized N - Trottleneck estimator.
Computes the log - NDTR asymptotic series of x.
Inverse Rosenblatt transformation.
Computes the log probability of text messages.
Checks whether the given index points are a univariate margin.
Returns the index points.
Squared difference between two tensors.
Returns a tensorflow value and a batch jacobian.
Split a covariance matrix into marginals.
Returns a text representation of the tensor.
The shape of the samples.
Returns the sample shape as a tensor.
Sampled value.
NumPy tensor representation of the eager tensor.
Uniform unit norm.
Gaussian log normalization.
Returns the common dtype for all args in args_list.
Broadcasts the given tensors to the target_tensors.
Probability density at peak
Calculate effective sample size for a single state.
Potential scale reduction reduction for a single state.
Returns the size of x along the specified axis.
If secondary_arg is a list of states wrap it in a list of secondary_arg.
Return a new mapping with field removed.
Merge two values.
Deep - duplicated tuple.
Given a function and a dict of src_kwargs return a dict of the function s inputs.
VGG convolution block.
Returns True if there is no u - turn between the states.
Leapfrog implementation.
Log of the joint current_target_log_prob and current_momentum.
Randomly sample from probs.
Converts a nested structure to a tensor.
Get the attributes of the tensorlike module.
Creates a mixture prior for the mixture of latent_size mixture_components.
Pack images into a single batch.
Download a file to a directory.
Call volatility_fn and compute gradients volatility_fn.
Given a list of volatility parts and a list of state parts broadcast the volatility to the state.
Calls the given function with the input x reshaped and the output x.
Calls a function and reshapes the output.
Discriminant truncated truncated negative binomial distribution.
Samples from the root distribution.
Given a list of topics_words and a dictionary of alpha and a vocabulary returns a list of
Add control dependencies for EMA and Means.
Saves the images in x to fname.
Coerce dtype to numpy dtype if possible.
Returns the base dtype for the given dtype.
Returns True if dtype represents a boolean type.
Check if the given dtype represents a complex number.
Returns the maximum value of the given dtype.
Returns the name of the given dtype.
Returns the size in bytes of a given numpy dtype.
Assert that all items have the same base type.
Returns a function that replaces worst_index with reflected.
Returns a function that expands the simplex by the given expansion.
Shrinks the simplex towards the best vertex by shrinkage.
Replaces x at index with replacement.
Prepares the arguments to the objective function with the initial simplex.
Prepares arguments for the objective function with the given initial vertex and step sizes.
Build fake mnist data.
Returns the current configuration as a dict.
Reads a TensorFlowConfig object from a dictionary.
Matrix multiplication op.
Helper function for _std_var.
Picks a condition for a scalar value.
Finishes the log prob for one fiber.
Finish the prob computation for one - dimensional discrete features.
Rotate the dimensions if needed.
Validates that the given layer is a batch normalization layer.
Slices params_event_ndims to a dictionary.
Apply params_overrides to a single - step distribution.
Apply a sequence of slices to the distribution.
Returns the number of columns.
Get static predicate value.
Returns the rank of a tensor given its shape.
Checks whether the given scale is a diagonal scale.
Pads the dimensions of a mixture batch with zeros along the event dimension.
Asserts that x is nonnegative and has a nonnegative integer dtype.
Try to get a static tf. get_static_value and convert it to a numpy array
Returns whether the given TensorFlow Tensor is a tensorflow unsigned integer.
Check if the given TensorFlow Tensor dt is signed by any of the supported dtypes
Returns the largest integer in the given numpy dtype.
Return the smallest integer that can be represented by the given numpy dtype.
Returns True if dt is integer - like or tf. bool - like.
Generate a new seed based on seed and salt.
Returns the size of x along the given axis.
Validate the rightmost transposed ndims if validate_args is True.
Validates a TensorFlow permission.
Returns the event shape for the given shape.
Returns the dimensionality of x.
Build a backward pass step from the given transition matrix.
Propagate mean and covariance for Kalman transition.
Propagate the mean over the given linop and dist.
Propagate the covariance of a Gaussian distribution.
Propagate mean across latent and observation sizes.
Compute joint covariance matrices.
Push forward the latents to observations.
Inverse lognormalization.
The mode of the concentration.
Rotate samples by num_ events.
Sample from the unit hydrograph for 3d concentration.
Return a copy of the given function.
Return a copy of dict_ without keys whose value is val.
Recursively replace dicts with pretty dictionaries.
Get samples from the distribution.
Check if x is a namedtuple - like object.
Choose an acceptable tuple from two other tuples.
Calls the function fn with the given fn_arg_list and returns the result and gradient
Check that the shape is valid.
True if converged or failed.
Update the position of the next objective.
Check if the gradients and relative gradients have converged.
Broadcast the value to the target tensor.
Compute the harmonic number of x.
Get a field from the kernel_results object.
Compute the variance scaling term.
Apply where cond to tval and fval.
Check if two values are finite.
Return the bootstrapped results.
Resnet block.
Creates a deep exponential family.
Initializes the parameters.
Returns the KL divergence function for the given type.
Reads an image from disk.
Downloads and unzips the sprites data.
Create a character.
Create a sequence of frames from a character.
Create a random sequence of integers.
Flatten a list of summand kernels into a single list.
Flatten a multiplicand list of kernels into a single list.
Build training and testing data.
Inserts back and keep dims into x.
Make a list of non - negative integers representing the given axis.
Sorts a tensor by the last num_ elements.
Asserts that x has the same number of dimensions as expect_ndims if expect_static
Batch gather with broadcasting.
Broadcast event and samples across event_ndims.
Assert that the Hessian is positive definite and symmetric.
Transpose the given batch matrix.
Tensorsum with rightmost ndims dimensions preserving shape.
Returns the common dtype for all of the given arguments.
Get the initial state of the optimizer.
Masks a tensor by eigenvalues of the eigenvector of x.
Get the initial arguments for the objective function.
Find the best value in a population.
Check if population converges.
Ensure tensor_or_list is a list.
Get the tolerance.
Builds the input pipeline for training images.
Plots generated images.
Convert a list of productions to a string.
Builds the LSTM model.
Compute the multivariate diagonal of the covariance matrix.
Inverse hyperbolic tangent of x.
Inverse hyperbolic tangent of x.
Verifies that lower_upper and rhs are equal.
Symmetric block diagonal of a sparse matrix.
Validates a tensor with num_ dimensions if validate_args is True.
Generate a list of slices for the given number of blocks.
Generate a mask for the given number of blocks.
Create input order.
Create masks for the given degrees.
Create a zero - dimensional multivariate normal diagonal.
Convert parameters to weights.
Connects the ProbModelBuilder with the given model.
Builds a seasonal transition matrix.
Builds a function to calculate the seasonal transition noise.
Builds a function for constrained seasonal transition noise.
Validates the observation data.
Add the value to the scheduler using the scheduler function.
Set the checkpoint for this value
Set the gradient clip to a constant value.
Optimize the model.
Set the training summary.
Set the value summary
Set the training data for the model.
Get all the texts in the News20 dataset.
Download and parse the GloVE W2V file.
Calls the bigdlfunc function with the given optimizer loss and metrics.
Evaluate the bigdl.
Predict the class for the given input x.
Reads the MNIST dataset and returns a record of images and labels.
Preprocess mnist data.
Get the end trigger based on the options.
Run validation on the given test data.
Returns the value of the field if it exists.
Call a bigdl function.
Convert a Spark Rdd to a Java object.
Convert Python object to Java object.
Get an activation by its name.
Return the label of the variable.
Read a parquet file.
Write a Parquet file to the file - like object path.
Get the image from the image frame.
Return a list of NDArrays representing the image.
Get the label of this Tensor.
Return a list of tuples where the first element is the prediction value and the second element is
Predict using the bmodel.
Return the transformed dataset.
Save keras definition to json file.
Build Keras model.
predict_class_distributed predicts a class from a RDD of data.
Return a list of tensors corresponding to the weights.
If is_training is True the model is trained otherwise the model is evaluated.
Load a torch file.
Load a Keras model from either JSON or HDF5.
Create a criterion that represents the given jcriterion.
Load weights from a JSON HDF5 file.
Load the IMCDB dataset.
Build Keras model.
Get the shape of the input array
Get the shape of the output array
Reads the MNIST dataset at the specified location.
Downloads and extracts movielens data sets.
Returns the bigdl classpath.
Check if pyspark is below 2. 2
Exports a checkpoint as a dictionary of TensorFlow tensors.
Save a dictionary of tensors to a bigdl file.
Expand a tile into a new set of units along the specified axis.
Attention with softmax.
Attention layer.
Open the log file.
Logs the given utterance to the file.
Summarize gradients.
Read data by config.
Respond to the user via Alice.
Convert a list of one - hot labels and a list of intents to a one - hot
Converts a probability matrix to one - hot encoding.
Create a TensorFlow session.
Loads the configuration from the local file.
Returns the momentum variable.
Updates the learning rate and momentum variables in the GPU.
Compute the F1 score of the true true and false negatives.
Process a single word.
Creates a variational dropout.
Build the LSTM model
Builds the basic LSTM network.
Train the model on a single batch of data.
Predict on a batch of data.
Given a list of sentences and a bucket_length make a vector containing the indices of the sentences
Converts a list of tags into a bucket_length - indexed numpy array.
BLEU advanced metric for a sentence.
Verify that the given URL conforms to the SC protocol.
Extract certificates from a certificate file.
Verify the signature on the request body.
Attempts to verify the certificate at the specified URL.
Returns the JSON representation of the controls.
Returns a list of strings representing the Bot Framework of the control control objects.
Returns a list of telegrams contained in this message.
Returns the alexa representation of the controls.
Computes the accuracy of the test.
Round accuracy.
Read data from a file.
Factory method for creating a default agent that will attempt to connect to the hello bot.
Convert x into one - hot encoding.
Prettify metrics.
Loads the current state of the model from disk.
Saves the current state of the model to disk.
Get the training optimizer.
Performs a search on the trie for the given word.
Start the timer.
Handle a request and return the response.
Runs the agent for the given utterance and returns the response.
Generate the response dictionary based on the template.
Handle an intent and return the response.
Handles a launch request.
Handles the unsupported HTTP method.
Pretty print this object.
Converts losses from Elmo to PPL.
Build chainer chainer model from config.
Interact with a model.
Run the model on a stream.
Read a text file and return a list of sentences.
Import a function from its string representation.
Get a metric function by its name.
Convert string representation of decay type to decay type.
Find the best value based on the losses.
Encode a list of tokens.
Read requirements file.
Log - loss with sklearn.
Returns a string containing the details of the given dictionary.
Builds and returns an ecommerce agent
Main entry point for the MS Bot API server.
Download a file from a URL.
Unpacks a tar file into a folder.
Recursively updates an editable dictionary with the contents of an editing dictionary.
Set the path and md5 of a URL.
Set a query parameter in a URL.
Alexa representation of the document.
JSON representation of the control.
Returns a dictionary that represents the current state of the bot framework.
Return JSON representation of the control.
Builds the ms_bot_framework dictionary for the activity.
SQUAD v2 F1 score.
Compute recall at k.
Check if GPUs are available.
Recursively parse a config property.
Parses the given config file.
Expands the given path to its user - home directory.
Run the thread.
Deletes a conversation.
Refreshes the list of valid certificates.
Verify a signed request.
Handles a request.
Load class from string.
Load a model from the registry.
Get the glmregularizationpath of a model.
Make a GLM model from a model and coefficients.
Create a h2ocluster object from a list of key - value pairs.
Shut down the cluster.
Check if the server is running.
Return a list of all the jobs.
Return a list of all timezones in the database.
Copy properties from another H2OCluster instance.
Teardown the box by executing a test function.
Get a summary of the column in a key.
Delete a JSON frame from the server.
Send a request to the H2O server to obtain a list of model builders.
Validates the model parameters for the specified algorithm.
Compute model metrics for a given frame.
Delete a model by key.
Run instances on EC2.
Terminate instances.
Stop instances in the region
Start instances in a region
Reboot instances.
Wait until ssh connection can be established.
Get the full name of a method.
Get a string representation of the function s arguments.
Wrap text at the specified number of lines.
Wait for the job to finish and resolve it.
Train the model with the given training data.
Returns a dictionary with the parameters as keys and their values as values
Signal handler for SIGTERM and SIGINT.
Delete the output directory if it exists.
Remove sandbox dir.
Reads the port from the stdout and scrapes it.
Scrape the cloudsize output from the standard out.
Stop the daemonized process.
Stop all nodes and client nodes.
Get the IP address of the node.
Returns the port number of the node.
Determine the size of the vector.
Compute the H2O mean absolute error.
Compute the H2O mean squared error.
H2O median absolute error.
Compute the H2O - Explained Variance score.
Raises an AssertionError if var is not of the expected type.
Assert that the value v matches the regular expression regex.
Fail if v does not satisfy cond.
Check if var is of vtype.
Get a human - readable name for the given type.
Check if the given var is valid for this variable.
Checks if the given var is a valid string constant.
Reads the configuration file and returns it.
Read the configuration file.
Generate a list of candidate log files.
Store model progress.
Recalculate the model parameters at a given time.
Estimate the completion time for the current progress.
Guess the next poll interval.
Compute the progress at the given time.
Get the time at which the progress bar should be updated.
Draw text to stdout.
Recompute widget sizes.
Get the size of the terminal.
Set the encoding to use.
Fit the expression tree to the given frame.
Redraw the frame cache.
Return the type of the column.
Prints a summary of the table.
Prints a summary of the table.
Return a DataFrame with the first nrows and ncols rows and cols rows and cols
Return matrix multiplication between self and matrix.
Return a list of all the levels of the expression.
Returns the number of levels in the hierarchy.
Set the level of the expression
Set the levels of the DataFrame.
Renames the columns in the table.
Set the column names.
Set the name of a column.
Check if the given item is contained within the table.
Return a new DataFrame with the modulo of the Kfold column.
Stratified k - fold column
Prints the structure of the DataFrame.
Remove the col at index i and return it.
Concatenate multiple DataFrames.
Create a new frame bound to this one with the given data.
Return a new frame bound to this frame.
Groups the elements of this RDD by the given string.
fillna on a string axis with NaNs
Return an expression that relevels the frame at y.
Insert missing values into the HDF5 file.
Return self as a factor.
Split string on pattern returning a DataFrame.
Return a new DataFrame with rows and columns left - stripd.
Return an expression that computes the Shannon entropy.
Return a DataFrame with the number of valid substrings for path_to_words.
Return an expression that represents the table of the DataFrame.
Return an expression that matches a substring of the current string.
Return string converted to upper case
Return a DataFrame with the NaNomit values.
First derivative of self.
Return an expression that evaluates to True if the value is missing or False otherwise.
Return an expression that evaluates to a minute value
Return an expression that evaluates this expression.
Apply a function along a given axis
Parse the given text into a Python code object.
Parses a python file into a Python code object.
Moves the region to a new location.
Returns a string with the tokens untokenized.
List of centers of each population.
Centers of the standard deviation.
Send API request to H2O
Check the version of the cluster
Emulate lazy_import.
Parse a frame from a dict.
Return a deep copy of the h2oframe.
Get a model from the API.
Given a grid_id return a gridsearch object
Get the frame with the given ID.
Download the POJO code for the specified model.
Download a h2oframe to a CSV file
Run a H2O demo function.
Loads a dataset and uploads it to H2O
Make metrics from the predicted and actual H2OFrames.
Put a key into the cache.
Check that the frame_id is valid.
Returns a human - readable string representation of the given number of bytes.
Normalizes a slice so that it encompasses all of its parts.
Check if a slice is normalized.
Block until the future is completed.
Returns a dictionary of deep features for each model in the group.
Print model summary information.
Prints a two - dimensional metric table.
Returns a list of hyperparameter values for the specified model.
Returns a dictionary of hyperparameters for the specified model id.
Return the projection of the archetypes of test_data.
Screeplot of the model.
Translate a name to something more readable.
Dedent the given text at the given index.
Extracts the Java code from the given Java log text.
Close the session and reset the stage.
Return session_id for current request.
Start logging to a file or stdout.
Prepare data payload to be sent to S3.
Prepare a dictionary with filename as key and a file object as value.
Log a start transaction.
Log the end of a transaction.
Writes a message to the logging destination.
Print message if verbose mode is on.
Get a project leader and leaderboard from H2O.
Download a. pojo file from the leader.
Download a mojo file from the leader s home directory.
Fits the estimator to the given data.
Apply the scale to the input x.
Apply the inverse transform to x.
Extract true string from string_content.
Find the node name in each_line and remove it from temp_list.
Attempts to find g_build_timeout.
Find a build failure.
Finds the build_id in the line that starts with g_build_id_text
Extracts the job build url from the given string.
Grabs a message from the java test file.
Saves the dictionary of failed test runs to a pickle file.
Updates the text file with the summary of failed and passed tests.
Write file content to file fhandle.
Writes a Java message to a file.
load java messages to ignore
Normalize an enum constant.
Find synonyms for a given word.
Poll the status of the job.
Writes a h2o. api file to the given path.
Fits this frame to the given frame
Returns a dictionary of default parameters.
Returns a dictionary of actual parameters.
Given a test_data and a layer returns the deep features of that layer.
Returns scoring history as a pandas dataframe.
Show the model.
Returns a pandas dataframe of the variance of the model
Return the degree of freedom of the model.
Return the coefficients of all coefficients in the model.
Downloads a. pojo file from H2O and returns it as a string.
Download the mojo file for this H2O instance.
Save model details to H2O.
Check that the outputs are the same length.
Returns a list of models that can be used for cross validation.
Wait for a keypress.
Return the table as a pandas dataframe.
Display the table.
Searches for a jar file in the jar paths
Yield the paths to the jars in the current directory.
Wrapper for csv. DictWriter.
Convert a directory path to a URI.
Discovers all the modules under the root_path.
Writes the module api docs to outdir.
Returns the table cell values as a list.
Loads a Python dictionary of Java messages.
Add a new message to the dictionary.
Save the Python dictionary g_ok_java_messages to a file.
Print the dictionary g_ok_java_messages
Parses the command line arguments.
Print usage information and exit.
Find all files that end with a given string.
Try to find a spelling in a file.
Main function for this module.
Transform data according to the current pipeline state.
Summarizes all failed test runs.
Extracts print_summary. json and saveintermittens.
Plot the fit of the metric.
Check if the API is available.
Clean up data that is older than the given month. MonthTokeep is the number of days
Return a dictionary of endpoint groups keyed by endpoint name.
Update the site forward model.
Return data in JSON format.
Comment a user.
Read credentials from the secret_file and return them.
Like the given user.
Like the hashtag.
Check if user_id is not a bot.
Read a list of items from a file.
Schedule the message to be enqueued at the given time.
Defer the message.
Guess rp_name and is_arm from spec_path.
Returns the URI for the given request.
Return a requestsconnection object for the given request.
Perform the actual request and return the response.
Returns the authorization server associated with this request.
Validate the request URI.
Get CLI profile object.
Open a new http request.
Set the timeout for this request.
Set the value of a request header.
Return a list of the headers that have been set for this request.
Send a request to the server.
Return the status of the request.
Return the status text of the request.
Return the response body of the request.
Set the client certificate for the connection.
Send a PUT request to the server.
Set the value of the specified request header.
Send the request.
Get the HTTP response object for this request.
Get a readable id from the id_name.
Returns the name of the serialization module for the given element name.
Get the properties of a minidom entry.
Returns the children of the given node along the given path.
Find the namespaces from a child node.
Convert xml string to servicebus namespace object.
Returns a servicebusregion object from the given XML description.
Returns a namespace availability response object from the given XML string.
Convert XML to a Metrics object.
Update a knowledgebase.
Build a package from a pull number.
Replace a word or list of words.
Returns the storage account properties for the specified storage account.
Returns the storage account keys for the specified service.
Regenerates the storage account keys for the specified service.
Deletes the storage account for the specified service.
Checks the availability of the specified storage account name.
Gets the properties of the specified hosted service.
Deletes the specified hosted service.
Deletes the specified deployment for the specified service.
Swaps a production deployment with a source deployment.
Updates the deployment status for the specified service and deployment.
Recursively walks the upgrade domain for the specified service and deployment.
Reboots a role instance.
Deletes the role instances for the specified service and deployment.
Checks whether the specified service_name is available for subscription.
Lists the certificate for the specified service.
Retrieves a certificate for the specified service.
Adds a certificate to the service.
Deletes a certificate for a service.
Retrieves the management certificate for the specified subscription.
Adds a new management certificate to the subscription.
Deletes the management certificate for this subscription.
Returns the affinity group properties for the specified affinity group.
Creates a new affinity group.
Deletes the specified affinity group from this subscription.
Lists the subscriptions for the authenticating user.
Deletes the reserved IP address for the specified VM.
Associates a reserved IP address with a service.
Disassociates a reserved IP address from a service.
Returns the reserved IP address for the specified VM.
Returns a persistent VM role for the specified service and deployment.
Deletes the specified role from the specified deployment.
Starts a role instance.
Starts the specified roles for the specified service and deployment.
Restarts a role instance.
Adds a DNS server to the specified service and deployment.
Updates the specified DNS server for the service in the specified deployment.
Deletes the specified DNS server.
Returns a list of resource extension versions for the specified extension.
Unreplicates the virtual machine image with the specified name.
Shares a virtual machine image with the specified permission.
Deletes the specified virtual machine image.
Returns a list of VM images for this VM.
Deletes the OS image with the specified name.
Returns the data disk for the specified LUN for the specified service.
Deletes the specified data disk.
Updates the disk associated with the specified name.
Deletes the specified disk.
Builds a message handler for sending messages to the remote host.
Create a service object from a connection string.
Return a list of subscription clients for a topic.
Parse the response for an asynchronous operation.
Perform a GET request.
Perform a PUT request.
Returns the status of the specified operation for the specified request.
Add the X - MS - Version header to the request.
Build a package from Travis - CI.
Returns a list of the regions the bus is in.
Returns a list of all namespaces known to the gateway.
Returns the namespace for the given name.
Creates a new namespace in the specified region.
Deletes the namespace defined by name. If the namespace does not exist nothing is done.
Checks if a namespace is available.
List all the topics associated with the specified topic.
List all the notification hubs associated with the specified name.
Returns a list of the relays with the specified name.
Get the metrics rollups for a metric in a queue.
Get the rollups for a metric on a topic.
Get the rollups for a metric in a hub.
Get the metrics rollups for a relay.
Create an extended environment.
Create a new virtualenv with pip installed.
Creates a new SQL Server.
Sets the administrator password for the specified server.
Returns a list of the quotas for the specified server.
Deletes the specified firewall rule.
Returns a list of firewall rules for the server.
Returns a list of the server s service objectives.
Deletes a database on the server.
List the databases associated with the specified key.
Get the state of the running session.
Set the session state for this node.
Validate a challenge string against the bearer string.
Default error handler.
Creates a queue with the specified name.
Deletes the specified queue. If the queue does not exist returns False. If the queue exists
Returns the queue with the specified name.
Creates a topic on the storage account.
Returns the details about the specified topic.
Creates a new rule for the specified topic and subscription.
Returns a single rule for the specified topic subscription and rule name.
Lists the rules for the specified topic and subscription.
Creates a new subscription under the given topic and subscription name.
Returns the subscription for the specified topic and subscription.
Returns a list of feeds that subscribe to the specified topic.
Sends the specified message to the service bus.
Unlocks the specified message for the specified topic and subscription.
Sends a batch of messages to a queue.
Unlocks a message in a queue.
Receive a message from the queue.
Receive a subscription message from a topic.
Creates a new Azure event hub.
Updates the specified event hub.
Returns the event hub for the specified hub_name.
Sends an event to the specified hub.
Add the service bus HTTP header to the request.
Get the authorization string for the request.
Checks if the token is expired or not.
Get a new access token from the httpclient.
Updates the request URI path and query.
Delete this message from the Broker.
Unlocks the lock for this message.
Renew lock.
Add headers to the request.
Return the batch body as a dict.
General error handler.
Handle redirects.
Set the profile to use.
Delete a queue from the service bus.
Delete a topic using the management client.
Create a client from a connection string.
Get the properties of the service bus.
True if the lock has expired otherwise False.
Process results_queue and return a list of results.
Thread handler for bulk add tasks.
Build a config dictionary from a config dictionary.
Create a message object from the response.
Convert an etree element to a rule object.
Convert an etree. ElementTree xml element to a queue object.
Convert an etree element to a topic object.
Convert an etree element to a subscription object.
Parse an XML response containing an enumerate results list.
Get the properties of the entry from the given XML element.
Return a list of queue clients for this service.
Return a list of topic clients.
Get details for a single site.
Deletes a website.
Updates a website in the specified webspace.
Restart a website.
Get historical usage metrics.
Get metric definitions for a website.
Returns the publish profile XML for the given website.
Returns the publish profile for the given webspace and website.
Creates a new cloud service.
Checks the status of the specified job collection.
Retrieves the details for the specified job collection.
Cancel scheduled messages.
Reconnect to the device.
Reads a certificate from a publish settings file.
Load cookies from cache.
Returns the width of the terminal.
Get the cut prefix of a value.
Print a message to stderr in place.
Format filesize.
Format the elapsed time in a human readable format.
Create a status line in the terminal.
Prints a progress bar for the given iterator.
Return a list of segment numbers.
Return a generator of segments for this representation.
Wait for the specified number of milliseconds. Returns True if the wait was successful False otherwise.
Put a segment into the queue.
Put a value into a queue.
Get parameters for a PV from a PV Swf.
Extract the nonce from the http result.
Find the VPID from the given url.
Parse JSON data.
Parse an XML string into an ElementTree.
Parse a QSD string into a dictionary.
Search for a key in a dict recursively.
Iterates over all tags with a given tag name.
Determine the encoding of a JSON sample.
Parse response content as JSON.
Parse an XML response object to a string.
Parses a list of cookies and adds them to the session.
Parse headers.
Parse the query params from the given cookies.
Return the formatted message.
Create a new log record.
Logs the user in.
Load a support plugin.
Update a URL s query string.
Iterate over chunks of audio data.
Yields all Require objects required by the argument with the given name.
Check if file exists and ask user for file output.
Create output stream.
Create an HTTP server.
Iterate over HTTP requests.
Output a stream to a file and exit.
Open the given stream and return the file descriptor and the prebuffer.
Attempt to open a stream and write output.
Read data from stream and write to output.
Output a stream.
Fetch streams from the given plugin
Fetch streams from plugin retrying up to count times.
Given a dictionary of streams and a stream_name returns the stream_name without the synonym
Print a list of available plugins
Authenticate using Twitter OAuth.
Load plugins from the given directories.
Setup http session.
Load plugins from the plugins_dir if it exists. If extra_plugin_dir is specified
Log the current OS and Python version.
Extract stream_id from text.
Extract iframes from text.
Get the value of an option.
Set a plugin option.
Get plugin option.
Resolve the given URL using all available plugins.
Load plugins from given path.
Convert hours minutes seconds to an integer.
Find the url of the player.
Parse m3u8 data.
Returns the name of a supported player for the given command.
Extract stream_id from html content.
Extract stream info from HTML response.
Logs the user in and sets the session attributes
Map a function over a specific key.
Call the crunchyroll API
Start a new session.
Get information about a media.
Create a crunchyrollapi object
Return a string representation of a character c.
Read n bytes from the stream.
Return the value of the instruction.
Return an explanation for the error.
Set the decode table for this instance.
Set the length table and switch to the prefix.
Read a sequence of bytes from the stream.
Return an explanation for the bit at the given index.
Return the value at the given index.
Return the span of the value at the given index.
Return the value for the bit at index.
Return the mnemonic at the given index.
Return the mnemonic at the given index.
Compile the action table into a list of actions.
Implement action.
Return a hex string of data from the stream at the given position.
Returns a boolean indicating whether the metablock is complete.
True if uncompressed False otherwise.
Determine the number of blocks of a given kind.
Shortest - form of an array.
Reads a prefixarray of alphabets from the file.
Decorator to mark function f as hidden.
Adds two virtual columns with the same distance and pm_long and pm_lat and adds
Runs the vaex app
Open multiple files in a single dataframe.
Create an astropy. table. Table object from a single samp table
Create a dataset from an astropy. table. Table
Convenience constructor for from_arrays with numpy.
Read a DataFrame from a CSV file.
Start a vaex server
Kernel function with zeldovich
Concatenate DataFrames.
Return a fixed - length range from start to stop inclusive.
Opens the dataset specified by path.
Evaluate expression on the dataset.
Returns the set of variables that depend on this selection
Sort the table.
Wait for the plot to finish.
Open a document on the operating system.
Context manager for writing to a file or file - like object.
Split and combine mask arrays.
Calculate the median approximation to the expression.
Create a 2D plot of the current dataset.
Plot the 3D volume of the dataframe.
Get the data type of the inputted expression.
Returns the private directory for this VM. If create is True the private directory is created.
Remove virtual metadata.
Writes the virtual meta information to disk.
Write metadata as JSON or YAML.
Set the value of the variable with the given name.
Evaluates the variable with the given name.
Evaluates the given selection mask.
Convert the table to a dictionary.
Return a copy of the filter.
Converts the DataFrame to a Arrow table.
Convert to an astropy. table. Table object.
Add a column to the DataFrame.
Rename a column in the table
Add virtual columns from cartesian to polar coordinates.
Add virtual columns from cartesian coordinates to polar coordinates.
Add virtual columns with polar velocities to the cartesian basis.
Apply a rotation matrix to the virtual columns of the matrix
Add virtual columns from spherical coordinates to Cartesian.
Add virtual columns from cartesian coordinates to spherical coordinates.
Adds a virtual column to the blueprint.
Deletes the virtual column with the given name.
Add a variable to the model.
Deletes a variable and emits the variable_changed signal.
Returns the last n characters of the string.
Print the header and tail of the table.
Prints the contents of the table between i1 and i2.
Set the current row to value.
Return a new DataFrame with trimmed columns.
Take a subset of the DataFrame s columns.
Extracts the parts of the string that are not filtered.
Undo the current selection.
Redo the last num_ selections in the history.
Returns True if the selection can be Redoed
Selects a rectangle in the current window.
Selects a point on the circle defined by the given coordinates.
Internal method to add a new selection to the history.
Find a valid name for the given initial_name.
Return a graphviz representation of the graph.
Categorize a column.
Ordinal encode the given column.
Return data as an object.
Returns the length of the array.
Horizontally combine this table with another table.
Concatenate two DataFrames.
Add a new column to the DataFrame.
Decorator to patch a function on the dataframe.
Fill missing values in an array with a given value.
Try to automatically convert an array to a string.
Convert to a numpy recarray.
Write properties to file.
Writes a comment to the file handle.
Writes a key value pair to a YAML file handle.
Yield lines of text separated by newlines.
Show sys. version and sys. modules versions.
Rename a keyword in a function call.
Set the fft library.
Run beat_track on input_file and write results to output_csv
Adjusts the tuning of an audio file using the librosa library.
Convert Hz frequencies to Mel.
Convert mels to hz.
Returns an array of fft frequencies.
CQT filter with FFT
Trim the stack of cqt_resp to n_bins.
Calculate the response from the CQT
Returns the number of samples that would be downsampled evenly.
Perform an early downsampling of an audio signal.
Generate a transition matrix with a uniform distribution.
Set the current image.
Checks that axes is an instance of matplotlib. axes.
scale the axes according to the ax_type
Compute the homogeneous Fourier coefficients of the hamiltonian.
Mel - hz basis function
Return the cqt_frequencies for the given number of octaves with a
Return an array of chroma coordinates.
Return the time of the next n time frames as a string.
Compute the time stretch of a time series.
HPSS beat detection.
Helper function for the nn_filter function.
Calculate the bandwidth of a window.
Fill a window with samples from a SOS waveform.
Compute the Jaccard similarity between two ints.
Match intervals that overlap.
Match intervals from from to to.
Load an audio file.
Convert audio data to mono if necessary.
Returns a set of all files with the given extensions in the given directory.
Stretch demo.
Process command line arguments.
Demonstration of HPSS.
Track a single onset_envelope for num_ beats.
Compute the local beat score for a single onset envelope.
Calculate the beat track and cumulative score.
Returns the last beat in the cumscore.
Detect onsetsets using librosa.
Check that x is an integer or raise parametererror.
Read the next image from the device.
Get a single frame from the VCAP.
Writes the image to a directory of frames
Run a function on a series of tasks and track the progress.
Flip an image in certain direction.
Rotates an image by a specified angle.
Clip bbox to img_shape
Scale a set of bounding boxes by a factor.
Imparamize an image to a given shape.
Performs an impad to a multiple of the image.
Scales the size according to the given scale.
Resizes an image using OpenCV.
Resize an image like another image.
Register a file handler for a list of file formats.
Get priority value from priority attribute.
Dequantize an array.
Displays an image
Dequantize a flow.
Load a checkpoint from a file.
Convert CPU weights to core weights.
Save model state to checkpoint file.
Initialize optimizer object.
Initialize and return logger.
Returns the current learning rate for the current optimizer.
Register a new hook with the given priority.
Run a workflow.
Register hooks for training optimizer checkpoint and timer.
Cuts a video file.
Concatenate a list of videos into a single video file
Read a list of items from a file.
Create a dictionary from a file.
3x3 convolution.
Read image data from file or path.
Load image from bytes.
Write image to file.
convert bgr to gray
convert from gray to bgr
Cast an iterable to a destination type.
Check if seq is of expected_type.
Slice a list.
Calculate average of history values.
Recursively scatter a tensor or list of tensors.
Return the value of a color.
Return the number of seconds since timer_id was last checked.
Starts the thread.
Return the number of seconds since the timer started running.
Return the elapsed time since the last check.
Display a flow diagram.
Make a color wheel.
Compute the accuracy on the batched output
Scatters inputs and kwargs.
Make a request and return the response.
Get JSON from AWS via boto3.
Asynchronously return the text of the message.
Handle the callback from AWS.
Perform multiple requests at once.
Makes an HTTP request.
Start the master process.
normalizes a task dict for version 2. x and later.
Return the name of the wheel distribution.
Return the name of the archive.
Add additional requirements from setupcfg to metadata_path.
Create a message with the given text.
Build an activity with suggested actions.
Create a string view of an attachment.
Build an activity for list attachments.
Create an attachment for the given content url.
Set the telemetry client.
Read a set of keys from the server.
Write changes to the store.
Deletes the document with the given keys.
Create a storeitem object from a result dictionary.
Create a dictionary from a storeitem.
Sanitize the key.
Creates database and container if they don t exist.
Get or create the database with the given id.
Get or create a container.
Fill in a QNATelemetry event.
Return a conversation reference for the given activity.
Returns the fully qualified name of the step at the specified index.
Check if the given channel supports suggested actions.
Checks if the given channel supports card actions.
Returns the channel_id for the turn.
Checks if the given auth_header is a valid token from the emulator.
Create an attachment containing a hero card.
Activate classical register if value is less than or equal to num_.
Return a copy of the object.
Return a QASMIF string.
Returns the QASM code for this method.
Runs the passset on the given circuit.
Performs a single pass.
Returns a list of string representations of the passes that have been run.
Dumps all the passes in this flow and its children into a dictionary.
Factory for creating a flow controller.
add ubase equation
Get the parameters for a single gate.
Return the matrix representation of a single gate.
Returns a DAGCircuit representation of the given circuit.
Exponential fit function.
Oscillator fitting function.
Plot the coefficients of the data.
shape_rb_data - shape of rb data
Plot RB data.
Compose a quasiparticle weight u3.
Convert from YYZ to zyz.
Validate input quantum state.
Trim background from image.
Get the span of a gate.
Computes the optimal coupling map for the given dag.
Add a qubit barrier to the circuit.
Process a bit ID node.
Process a gate in the DE representation.
Process a CNOT node.
Process a measure node.
Processes a If node.
Create the appropriate gate operator based on the operation name.
Return channel duration in seconds.
Return start time of channel
Return stop time for one or more channels.
Recursively generate the instructions for this scheduler and its children.
Dump additional data.
Load additional data from the original data.
Validate the instance against the schema.
Return a dict representation of the model.
Load data from a dictionary.
Quantum Fourier transform
Chops an array so that its length is less than some epsilon.
Angular spearation between two vectors.
Compute the concurrence of a state.
Compute the Shannon entropy of a state.
Calculate the mutual information of a state.
Compute the entanglement of formation.
Return the entropy of a QUBIT concurrence.
Flatten a schedule into a single schedule.
Shift the given schedule by the given time.
Insert a new schedule component into the parent component at the given time.
Append a child schedule to the parent.
add a u3 gate to the model
Return the current status of the backend.
Starts a new iteration.
Returns a string representing the number of seconds left until the next iteration.
Disassemble a QObject and return a list of circuits.
Compute hamming distance between two strings.
Create a quaternion from a rotation about an axis.
Convert Euler angles to quaternion.
Normalize the quaternion.
Convert this quaternion to a rotation matrix.
Convert to zyz basis.
Processes the data according to the number_to_keep.
Check if the value is a string or a collection of strings.
Check if the given range is valid.
Checks whether a matrix is a square matrix.
Check that mat is a diagonal matrix.
Check if op is a symmetric matrix.
Check that mat is a Hermitian matrix.
Checks whether the given matrix is a positive semi - definite matrix.
Check whether the given matrix is an identity matrix.
Check whether a matrix is a unitary phase matrix.
Convert the given rep to a Choi matrix.
Convert a string rep to a superoperator.
Convert the input data to a Kraus operator.
Convert the data from Choi to chi.
Convert the given rep string representation to a PMT.
Convert a string representation of a Kraus operator to atinespring operator.
Convert a string representation to an operator.
Convert operator string representation to PMT.
Convert a stinespring array to an operator.
Reshuffle data to be compatible with Choi.
Reshuffle the data.
Compute the Choi matrix from the Kraus decomposition.
Convert a choi matrix to a kraus matrix.
Convert the stinespring data to the kraus pair.
Convert the stinespring data to the Choi matrix.
Convert the Kraus operators to stinespring operators.
Convert the Kraus operators to superoperator.
Convert from chi to Choi.
Choi to chi conversion.
Reravel the input mat1 and mat2 into the desired shape.
Apply Hilbert - Schmidt transformation to data from the Pauli basis.
Check the dimension of the n - qubit output.
Hide the tick lines and labels of the axis.
Set the label convention.
Clears all data.
Add a vector or a list of vectors.
Renders the plot.
Plots the front of the sphere.
Render the figure and show it.
Returns the top layer as a string.
Return the mid part of the string.
The bot layer string
Returns the maximum length of the string.
Returns a list of string representations of the parameters of a label instruction.
Returns the label for a box instruction.
Return a latex representation of the node.
Filter deprecation warnings.
Returns a dictionary of local hardware information.
Check if a connection exists for the given hostname and port.
Helper function for checking the status of a job.
Returns a times array filled with constant values.
Inverse of linear_square.
Calculates the triangle of the waveform.
cosine function.
Derivative of a Gaussian function at given times.
Gaussian square.
Returns a default pass manager for the given basis set and coupling map.
Creates a default pass manager based on a list of basis gates.
Checks if the given register is in the classical or qreg list.
Return a copy of this circular with its mirrored coordinates.
Return the inverse of the circular.
Append an instruction to the instruction list.
Check that the number of qubits in the list is the same.
Check the validity of a set of qubits.
Check the validity of the classical registers and classical registers.
Check that the QREGs and CREGs of self and rhs are compatible.
Returns the QASM string equivalent of the instruction.
Returns the number of gates in this instruction.
Width of the instruction in bytes.
Count the number of instructions in each instruction.
Return a copy of the circuit bound to the given parameters.
Binds the specified parameter to the specified value.
Map free gates to free qubits based on the coupling_map.
Calculate the distance to the layout of all gates.
Return the score of the given step.
Copy the metadata from the source circuit to the target circuit.
Map a gate to a layout.
Return a list of dagnode s representing the swap operations from the given edge.
Runs the gate mapping algorithm on the given DAG.
Adds a qubit to the hypergraph.
Add an edge to the computation graph.
Create a subcoupling from a list of nodes.
List of physical qubits in the computation graph.
True if the graph is weakly connected False otherwise.
Compute the distance matrix from the graph.
Return the distance between two qubits.
add a CU1 gate to the topology
Inverse of the instruction.
Apply Q - if gates to the program.
Causes the code to perform a classical if - then - else conditional on the given value
Subscribe to an event.
Dispatch an event to all subscribers.
Unsubscribes a callback from an event.
Publish an event to the underlying broker.
Initialize the circuit with the given parameters and qubits
Defines the disentangling circuit.
Returns a circuit with the uncomputed gates.
Computes the pair - of - complex shear angles.
Quantum circuit for multiplexing angles.
Returns True if the value is a virtual value.
Returns a copy of the layout.
Combine this layout into a map from virtual indices to layout indices.
Add a CDX entry to the chain.
Inserts a schedule into the list of ops at the given start time.
Check if the transpiler is fenced.
Given a list of gates and a dictionary of Q - REG indices return a numpy array of
Run the mapper on the given dag.
Return the pauli of the given number of qubits.
Create a boolean matrix from a string label.
Initialize from z and x boolean values.
Compute the product of two Gaussians.
Return the operator representation of the QR Code
Return an instruction representing this gate.
Update self. _z with new z values.
Update x.
Append a paulis onto the end of the string.
Delete one or more qubits from the basis.
Generate a random number of qubits
Create a single Pauli gate from a label.
Get the measure outcome of a qubit.
Add a sample measure to the classical memory.
Add a classical Qasm measure to the state.
Add a qasm reset to the model.
Validate that the initial state vector is valid.
Initialize the state vector.
Return the qubit state vector.
Validates that the measure sampling is allowed.
Run a single job.
Validate that the QObject is well - formed.
Validate that the initial unitary is valid.
Initialize the unitary array.
Return the unitary of the circuit.
Run a single job.
Validate that the QObject is valid.
Checks if obj is a bit or not.
Generate a trivial layout for the given dag.
Checks whether this interval overlaps with the given interval.
Shifts the interval by the given time.
Shift the timeslot by the given time.
Returns the earliest begin time for any of the given channels.
Returns the maximum stop time for the given channels.
Check if any of the time slots in timeslots. timeslots overlap with any of the other
Merge this timeslotcollection with another.
Shift the collection by the given time.
Report the given commit as a comment or as an issue.
iplot of a state with Paulivec scatter plot.
add a rzz gate to the circuit
swaps two nodes using a single control command.
Creates the program graph for the given DAG.
Choose the next edge in the pending_program_edges list.
Selects the item with the least cost.
Select the best remaining qubit for the given program qubit.
Returns a list of all compositegate instructions in this compositegate.
Reverse the gate order.
Apply Q - if operators to gates in place.
Causes the gate to operate on val if the classical value is True.
Check if the matrix is unitary.
Complex conjugate operator.
Transposes the array.
Return the power of the matrix.
Shape of the output and input arrays.
Convert an quantumcircuit instruction to an operator.
Implementation of the swap_mapper_layer_update method of the abstracted DAGCircuit class
Returns the substrings of the given bitstring from the bottom of the creg_sizes
Format memory for level 0. 0 format.
Format memory list to level 1 memory format.
Convert a list of shot memory counts into a list of string representations.
Format the counts dictionary.
Format a state vector as a complex number.
Format a state matrix as a complex number with units.
Submit the job to the pool.
Return the status of the job.
Checks if the given frequency falls within the range of this interval.
Generates an HTML and JavaScript code that plots the bloch data for a single vector density matrix
Run the QR decomposition on the input dag.
n choose k
lex_index returns the lexicographical index of a list.
Get backends with unique names.
Get the op.
Generate a constant sample pulse.
Create a zero pulse.
Generate a square sample pulse.
Generate sawtooth sample pulse.
Create a sample pulse for a triangle.
Generate a cosine sample pulse.
Sine sample pulse.
Gaussian sample pulse.
Gaussian derivative of the signal.
Print the tree rooted at this node as a string.
Get backend instance.
Remove all ops named opname from the graph.
Add a quantum register.
Adds a classical register to the DAG.
Adds a wire to the graph.
Checks that the condition is valid.
Returns a list of tuples where the first element is the condition name and the second element is
Adds an operation node to the multi graph.
Apply an operation back in the graph.
Checks the validity of the wiremap.
Maps a condition to a wire format.
Extends the classical registers of the classical registers of the classical registers of the
Checks that the wires in the list of wires matches the length of the node.
Builds the predicate and succ mappings for the given node.
Returns the full predicate and succ map for a given input circuit.
Returns a list of topological nodes in the multigraph.
Returns an iterator over the edges in the multi - graph.
Returns the nodes in the multi - graph that have the given operation.
Returns the list of nodes that are edges of a gate.
Returns the nodes in the multigraph that have the given names.
Returns list of twoq gates of the graph.
Returns the predecessors of the given node in the multigraph.
Returns the predecessors of a node that are quantum gates
Returns the set of ancestors of the given node.
Returns all successors of the given node that are of type quantum register.
Removes an operation node from the graph.
Removes all ancestors of the given node.
Remove all descendants of a node.
Removes all nodes that are not ancestors of the given node.
Remove all nodes that are descendants of the given node.
Yields a serialised version of the graph.
Yields all the layers of the multigraph.
Returns a generator yielding all nodes connected to the given wire.
Count the number of operations in the graph.
Returns a dictionary with the properties of this TensorSummary.
Convert a basis set into a tomography basis set.
Add the Pauli - Mesa gate to the QREG.
Returns the data for the tomography of the circuits in tomoset.
Project a list of operations onto a basis.
Compute the homogenous inverse of a linear system.
Auxiliary function for the eigenvalues of a transition matrix.
Returns the wigner data for the given qubits and labels.
Measing gate.
Check the status of the job for text output.
Monitor the status of a job.
Simplification function for u3gate and u1gate.
Add QRegs to the graph.
Builds the job history tab
add a 3 - term CUDA gate
Build a classical bell circuit.
Returns the transpiled circuit.
Return a specific drive channel.
Return the control channel num_.
Returns the current measure channel.
Acquire a channel.
Input state of circimation
Remove the logging handlers from the Qiskit logger.
Displays an iplot of the given state.
Consume input string.
Pop the current lexer from the stack.
Push a new lexer onto the stack.
Get the bound method for the given instruction.
Convert a acquire instruction to a qobj command.
Convert a frame change instruction into a QObject.
Convert persistent value to QObject.
Convert a single drive instruction into a QObject.
Convert a snapshot to a QObject.
Updates the annotations of the Pulse object.
Convert a DAG to a QuantumCircuit.
Make a dictionary representation of the matrix observable.
Update the symtab with the given object.
Verify that a variable is declared as a bit symbol.
Verify that all the children of obj are symbols.
Verify that obj is a gate symbol.
Verify that an object is in the global symbol table.
Verify the registration of the object.
Find the column in the input string that matches the given token.
Parse debug information.
Parse a byte string and return the corresponding QASM.
Parse the input data and return a string.
Parse the QASM file.
Causes the specified target to rotate theta degrees around the specified target using the specified angle
Create a basis state from a string.
Return the projected density matrix of a state.
Return purity of a state.
Runs the gatecommutator on the given dag.
Runs the CX network on the input dag returning the dag.
Get backend by name.
Shape of the bipartite graph.
Yield register_name num_ value for each bit in bit_labels.
Truncate a float from a match object.
Generates a LaTeX string representation of the QCircuit.
Computes the number of columns and width of the image.
Calculate the beamer page.
Load a schema from a JSON file.
Load schemas and validators.
Generate a random unitary matrix.
Generate a Ginibre matrix.
Random density as a function of Hessian
Approximates the density of a random unitary using Bures s method.
Returns the names of all calls in this function.
Compute the power of the matrix.
Compose a sub - system of this tensor and another.
Convert an quantum circuit instruction into a superoperator.
Runs the barrier on the given dag.
Run the QR decomposition on the input dag.
Defines the definition of the gate.
Check the type of the value.
Check the type of the value.
Set the atol.
Set the rtol value.
Reshape the array to match input and output dimensions.
tuple of input dimensions.
tuple of output dimensions.
Returns a copy of the current instance
Return a tensor of the power n.
Automatically determine dimensionality.
Deserialize string value.
Override the default _serialize method to catch type errors.
Check that the value has the expected type.
Singular Value Decomposition.
Returns the inverse of the current state.
Set the label of the Dataset.
Check if the expression is unitary.
Convert to an operator.
Return an instruction representation of the circuit.
Initialize a new channel transformer.
Monkey patch strptime.
Returns True if the tokens are valid False otherwise.
Splits a string into a list of tokens.
Parses the given date string according to the given settings.
Check if the given date string is applicable for the given settings.
Translate a date string.
Parse date_string according to date_formats.
Convert exception to net number.
Convert exception parameter to HTTP number.
Compose the configuration file.
Get information about the current state of the simulator.
Logs stdout and stderr to the given log.
Expand a time string to an integer.
Read configuration options from config file.
Read the cached stepperinfo object
Write the cached options to a file
Create the. stpd file and write it to disk.
Create a RPS schedule.
Returns the rps value at the given time.
Execute a command and return its exit code.
Decodes the monitoring data into a list of metric points.
Makes the data points for the given label.
Publish a key - value pair to the Redis server.
Count the number of matched codes in codes_dict.
Stop the feeder thread.
Reads the stpd file and feeds tasks to the pool.
Add user - specific options to self. options
Configures the core with the given options
Collect data from the queue and notify listeners.
Notify listeners of aggregated data
Discover the JMeter UDP port on the system.
Terminate the child process.
Read the data from a list of lines.
Creates a criterion object from a criterion string.
Returns a list of host configurations for the specified target_hint
Create a startup config file if it does not exist.
Checks the free disk for artifacts.
Check the memory for num_bytes.
Extracts the right line from the widget output.
Adds a info widget to the combobox
Fill the rectangle with the characters in prepared.
Return the length of a line without markups.
Add info widget to the screen
Make a writer request.
Load plugins from config. plugins
Returns the last plugin of the given plugin_class.
Returns a list of plugins that are instances of plugin_class.
Moves or copies the specified file to the artifacts directory
Add an artifact file.
Create a temporary file and set its permissions.
Load config files.
Flush the configuration to disk.
Returns a list of tuples with section option name and value.
Find all sections that start with prefix.
Decode stat data.
Install agents and artifact files.
Poll for collected data.
Send collected data to listeners.
Detects if the current configuration is telegraf or monitoring.
Handle data items.
Subscribe to a list of channels.
Subscribe to the channel and run the loop forever.
Closes the websockets and polygon.
Perform a single HTTP request.
Submit an order.
Get the position of a symbol.
Get a list of assets.
Checks the type of key_type and value_type of a dict parameter.
Returns a dict parameter if obj is not None.
Construct a structured logger from an event logging handler.
Construct a logger from a JSON structured logger handler.
Read configuration from a file.
Returns the pipeline with the given name.
Returns a list of all pipelines.
Get the next event from the queue.
Executes a pipeline through the queue.
Waits for all the processes to terminate.
Returns a dagster field for the given dagster_type.
Builds the execution plan for this pipeline.
Returns a single solid for the pipeline by its name.
Construct publish commands.
Commits new version commits new version and git tag.
Wraps the given text in a block of text and writes each line to the output stream.
Download a solid config file from Amazon s3.
Upload a file to S3.
Context manager to handle user code execution errors.
Emulate mkdir - p.
Context manager for user code execution.
Create a dagsterlog instance for the context - free pipeline.
True if any of the steps expect a successful outcome.
True if any of the steps have been skipped.
Return a dictionary of transformed values.
Returns the step failure data if any.
Checks if the given config value is a valid dataset.
Checks if the given value is a valid table name.
Coalesce the topological steps of an execution plan into a single execution step.
Get connection parameters from settings_dict.
Create a new connection to the database.
Create a new cursor.
Close connection to database.
Takes a model and a dict of model field names and converts them to MDL.
Convert a list of dictionaries to a list of MDL objects.
Returns the form field to be used for this field.
Converts the given value to a model container instance.
Apply core filters to queryset.
Compute the NFPs for a uniform distribution.
Compute real - valued NFW profile.
Compute the optimal number of partitions for the given sizes.
Calculate the correlation coefficients.
Initializes the slots and hashvalues.
Returns the size of the byte array that would be needed to store this PseudoMonomer.
Merge another PseudoMonomer into this one.
Return the union of the given MHs.
Query the indexes with the given minhash and size.
Compute the weighted minimum hash over the given value.
Remove the key from the key - value store.
Count the number of registers.
Merge another VariantReg into this one.
Clear registers.
Apk test.
Compute the mean apk of the actual and predicted data.
Sorts the hashtables in place.
Returns a list of the k most similar keys to minhash.
Closes the connection to the database.
Get user data from JWT
Add social login state.
Select the next num_ characters from the given text.
Parse a scoped selector.
Parse a statement.
Parse the string value using the appropriate parsers.
Advances the parser to the next line.
Parse a configurable reference.
Writes the operative configuration to disk.
Ensures that the given function is a function that can be wrapped.
Return the literal representation of the given value.
Clears the configuration.
Checks whether the given function or class may have the given parameter.
Get the arg_spec of a function.
Given a function and a list of args return the names of the positional parameters that the function
Parse a config file.
Parse a value from a string.
Recursively iterate over flattened values.
Iterates over all configurable references in the given configuration.
Class decorator that adds constants from an enum class.
Returns a list of all selectors that match the partial_selector.
Return the minimal selector that would match the complete_selector.
Transform search query to POSIX - style string.
Parses the value of the Retry - After header.
Validate the given value against the schema.
Return a dictionary that represents this resource as a property description.
Validate and set the value.
Return the thing at the given index.
Initialize with things and hosts.
Set the default headers.
Check the Host header to see if the request contains a blacklisted host.
Get a thing.
Post a thing.
Delete an action from a thing.
Start the Zeroconf server.
Return a dictionary describing this action.
Start the action.
Mark the task as completed.
Return the event description as a dictionary.
Get the IP address of the machine.
Return a list of all IP addresses configured on the system.
Set the value of the field.
Notify of an external update.
Return a description of the resource as a dict.
Sets the href prefix for this navigator
Return a dictionary of property descriptions.
Returns a list of string representations of the actions.
Returns a list of event descriptions.
Add property to resource
Removes the specified property if it exists.
Returns the value of the specified property.
Returns a dictionary with the names as keys and the values as values as values.
Set the value of the specified property.
Get action by name and action id.
Add a new event to the event queue.
Add an available event to the list of available events.
Perform an action.
Remove the action with the given name and action id.
Add an available action to the workflow.
Remove subscriber from available events.
Add a subscriber to the available_events dictionary.
Remove a subscriber from the available list.
Notify subscribers of a property change.
Notify subscribers of an action.
Notify subscribers of an event.
Annotate the model with the given annotations.
Performs an UPDATE statement on the model s table in the database.
Inserts a new record into the database.
Inserts a new record into the database and returns the model instance.
Returns an insert compiler for the given rows.
Returns True if the field s value is different from the old value
When a new or updated instance is created send signals.
When a model instance is deleted send the delete signal.
Recursively resolves the expression and returns the result.
Returns a SQL string and a list of SQLAlchemy objects that can be used to construct
Return a clone of this instance with relabels.
Add join conditions.
Check if the field is a hstore field.
Creates the required constraint for the HSTORE command.
Renames a table HSTORE constraint that requires the table to have the specified key.
Drops the HSTORE constraint required for the specified key from the specified table if it exists.
Returns the constraint name for a required constraint.
Returns the SQL for creating this index.
Get the backend base class.
Prepare the database for execution.
Prepare value for serialization.
Return the SQL for the returning of the query.
Returns a list of SQL queries that can be used to insert the object.
Rewrite the sql to insert or update depending on conflict_action.
Rewrite insert and update queries.
Rewrite insert statements that don t actually insert anything.
Returns the model field object for the given field name.
Format the field name.
Formats the field value for insert into the database.
Creates a constraint for a unique field in the HSTORE table.
Renames a unique constraint in the HSTORE database.
Drops a unique constraint for the given field in the HSTORE table.
Returns the constraint name for a unique constraint.
Composes all uniqueness keys for the field.
Add a condition to the query.
Returns the rewritten SQL and parameters for this join clause.
Returns the tdist95conf level for a given data frame.
Variance of the variance of the pooled samples.
T - score of two samples.
Check if the difference between two samples is significant.
Toplogically sort a list of nodes.
Yields all queens of a given count.
Select a random position from the unexplored list.
Randomly move a piece of the game.
Filter benchmarks based on number of benchmarks.
Recursively expand a benchmark name.
Initialize all the benchmarks.
Returns the domain of the current knot.
Returns a generator of posts for the given category.
Yield post IDs parsed from JSON.
Get information about a specific user.
Fetch all items for a given category.
Fetches the feed and returns a generator of items.
Setup the argument parser for the backend command.
Fetch bugs for the given category and from_date.
Returns a list of bugs that have been updated since the specified date.
Get comments for one or more bugs.
Returns the bug history for one or more bug ids.
Returns the attachments for the specified bugs.
Fetch merge requests.
List of merges.
Get the content of a merge.
List of versions for a given merge.
Get the content of a version of a merge.
List the notes for a given item.
List the emojis for the specified item.
List the emojis for a note.
Calculate how long to reset the rate limit.
Fetch a list of items from the Gitlab server.
Fetches the repository and updates the rate limit.
Setup the command line parser for this backend.
Fetch all items for the given category and from_date.
Return the metadata ID for the given item.
Returns the number of members of a conversation.
Get channel information.
Get information about a specific user.
Setup the command line parser for this backend.
Return the timestamp at which the metadata was updated.
Parse the buglist CSV file.
Parse bugs details XML document.
Logs out the user.
Calls cgi_bug with the metadata
Returns a list of bugs for a particular date.
Returns a list of bugs.
Returns the activity of the specified bug.
Fetch all items for a given category.
Fetch all events in the group for the specified category.
Fetch repository events.
Get comments for an event.
Returns a generator of RRSVPs for the specified event.
Fetches the html question for the question.
Fetch comments for a question
Builds a question object from the html content.
Returns a generator of raw questions from the API.
Get the html for a question.
Get the comments for a post.
Parse the question container.
parse number of pages in html_question
Parse user info from update_info element.
Fetch all reviews for a particular category.
Returns a list of reviews.
Fetch gerrit28 reviews.
Returns the mayor and minor version of the gerrit client.
Returns the reviews for the last 10 days of the year.
Determine the next item to retrieve.
Executes a command from the archive
Execute a remote command and return the output.
Setup the argument parser for the backend command
Fetch issue data
Fetch attachments for a given issue.
Fetch all the messages for a given issue.
Get all the activities for a given issue.
Fetches user data.
Returns a user object for the given user_name.
Returns the raw text of the issue with the given issue_id
Get the collection for a given issue.
Yields the content of the specified path.
Returns a generator that yields each groupio subscription.
Find the group id associated with the group_name.
fetch url with payload
Setup the command line parser for this backend.
Find backends for the given top_package.
Fetch items from the archive.
Remove all classified data fields from nested dicts.
Parse args.
Sets the authentication arguments to the parser.
Sets the arguments for the archive command
Sets the arguments for the output script
Runs the fetch command.
Initialize the archive manager.
Returns the timestamp when the metadata was updated on the given item.
Parse a. mbox file.
Fetches and parses all the messages in the mailing_list.
Copy the contents of the mbox into a temporary file and return the path.
Validates the given message.
Convert casedict message to dict.
Get a message for the given key.
Fetch items from the repository
Parse a git log file and yield commits.
Set git_path attribute of self. parsed_args.
Setup the argument parser for the backend command.
Parse the stream yielding commits.
Clone a URI into a new directory.
Count the number of objects in the repository.
Returns True if the repository is detached False otherwise.
Update the repository.
Fetch the latest commits from the local repository.
Returns a list of commits for the given packet_name
Update references in the current directory.
Discovers refs for this repository.
Update a ref in the repository
Execute a command in a subprocess yielding each line as a string.
Read the stderr output and check for returncodes.
Execute a command in a subprocess.
Fetch tweets from the API.
Setup the command line parser for the backend.
Fetch all the items for a given category.
Yield hits for the given category.
parse hits from hit_raw
Returns a list of hits for the given keywords.
Returns the timestamp when the metadata was updated on the given item.
Determine the category of the metadata item.
Fetch all the pull requests for a given date range.
Yields repo information
Get all reactions for a given issue comment.
Get the requested revieweders for a pull request.
Get all the commits for a given pull request.
Get the reactions from the pull review group for a given comment.
Get user details
Get a list of reactions for the given issue.
Returns a list of issues for the current user.
Returns a generator of pull numbers for all issues in this group.
Pull the requested reviews for a project.
Get a list of commits for a pull request.
Returns a list of reactions for the given comment.
Returns the user associated with login.
Returns a user s organizations.
Get token rate limit.
Returns the rate limit for each token in the corpus.
Choose the best API token to use.
Check if we need to sleep for the next token.
Fetch and update the current rate limit.
Initialize the metadata for the archive.
Store the given uri payload headers and data in the archive table.
Retrieve a resource from the database.
Create a new archive.
Verify the number of entries and metadata in the archive.
Load metadata from the database.
Count the number of rows in a table.
Create a new archive.
Delete an archive file.
Search for archives in the local repository.
Search for all files in the directory.
Yields num_ months starting from from_date until to_date
Remove invalid XML characters from a string.
Parse a JSON string and yield issues.
Issues for a given date range.
Get information about an issue.
Get information about a user.
Calls the API and returns the response.
Fetch all items for a given category.
Fetch items from the repository.
Returns the content of a repository.
Filters out custom fields that are not boolean fields.
Yield issues from the raw_page.
Yield issues from url until from_date
Get issues for this project starting from a given date.
Get all comments for this issue.
Get all the fields for this resource.
Fetch all items for a given category.
Returns a list of builds for the given job_name.
Parses the raw page and returns a generator of questions.
Returns a generator of questions from the API.
Setup the command line argument parser.
Fetch all reviews for a given category.
Get the maximum date for a list of reviews
Fetch 1. 26 pages from the revisions table.
Get the pages for the given namespace.
Get recent pages of namespaces.
Yield messages from a JSON string.
Filter message by chats.
Calls the updates_method method.
Fetch articles from the NNTP server.
Add str_ to the metadata of an item.
Parse an article from a string.
Fetch data from the remote or archive.
Fetch the article with the given article_id.
Fetch data from the remote NTP server.
Fetch data from the archive.
Creates an HTTP session to be used for requests.
Set up the rate limit handler.
Sleep for rate limit.
Updates the rate limit and time to reset if needed.
Parse supybot log.
Retrieves archives from supybot archives sorted by date.
List all supybot archives
Parse supybot messages from the stream.
Fetch topics for a given category from a given date.
Parse the topics page and return a list of topics ids
Get information about a topic.
Get information about a post.
Fetch tasks for a given category from a given date.
Yields a list of tasks from a JSON string.
Parse a JSON string containing a list of users.
Yields a generator of all tasks in the maniphest department starting at the given
Return a list of transactions for phids.
Return a list of users with phids.
Pass in phids to the phab daemon.
Make a call to the conduit.
Return the metadata id for the given item.
Yields the contents of a JSON summary.
Yields the contents of the file starting from the given datetime.
Get the historical content for the given content id and version.
Parse the result of a measurement.
Builds the capabilities url for a given service.
Read XML metadata from a URL.
Read an XML document from a string.
Parses the result of the calculation.
Builds the URL for this request.
Construct a schema from a list of elements and a namespace map.
Get the URL to describe a feature type.
Process complex input with reference.
Get a list of movies.
Get a list of TV series.
Get information about the object.
Get a list of alternative titles.
Returns a list of the credits for the account.
Returns a dictionary containing the external IDs of the current user.
Returns a list of keywords associated with the project.
Get recommendations for the current user.
Get a list of release dates for this project.
Get all releases for this project.
Get the translations for the specified resource.
Get similar movies for a movie id.
Get the reviews for the project.
Get the next set of upcoming events.
Get the currently playing game.
Returns the popular profile information for the logged in user.
Returns a dictionary containing the top rated ratings for the project.
Get the list of account states for this user.
Create a new rating for the current user.
Returns a list of credits for the movie specified by id.
Returns a list of tv credits owned by the user.
Get information about the resource.
Get a list of the resource.
Get information about the current session.
Get a list of movies for the authenticated user.
Create a new token.
Validate token with login.
Creates a new session.
Create a guest session.
Get the list of rated movies for the current session.
Get the status of the specified item.
Create a new list.
Remove an item from the collection.
Clears the list for the current session.
Returns a list of the most popular ratings for the user.
Get similar resource by id.
Get a file on the air.
Returns information about the specified series.
Returns a list of credits for the current season.
Get a list of external IDs associated with the current season.
Get information about the series.
Returns a list of credits for the current season and episode.
Get series_id season_number_episode_number_external_ids.
Set attributes from response to self.
Get a collection of resources.
Returns a dictionary containing information about the company.
Get the resource with the specified keyword arguments.
Performs a GET request for the specified path in Device Cloud
Normalize a string.
Count the number of n - grams in each reference.
Summarize and count n - grams of a reference set.
Exponential random variates.
Align source_blocks to target_blocks.
Yield all descriptor classes in a module or submodule.
Register objects from JSON.
Register a descriptor with the registry.
Prints the given string to the given file or stdout.
Checks if the given descriptor is a class or abstract descriptor.
Returns a json - compatible dictionary.
Return the 3D coordinate of the mesh.
Return the atomic SA for the ith particle i.
Returns the atomic surface area of the current mesh.
Create a VDW from a molecule.
Create a descriptor from a JSON object.
Fill missing values with value.
Return a copy with all missing values removed.
Return a generator yielding key - value pairs.
Return a dictionary representation of the object.
Returns the name of the value.
Print a progress message to STDERR if STDOUT is a TTY.
Print a message to stdout.
Exit abnormally with the given status code.
Get a temporary file.
Set a temporary file to a new target.
Remove any temporary files created.
Returns the fixed path of the file.
Get the legal parameters for a given method.
Merge the opt params into the kargs dictionary.
Add boto - specific CLI options to a command line parser.
Terminate the worker thread.
Add a task to the queue.
Join all worker threads.
Record the number of tasks that have been processed
Get s3 keys from environment variables.
Extract s3 keys from the command line options.
Get the keys from the s3 config file.
Initialize s3 keys.
Connect to S3.
Walks a directory and returns a list of all files under that directory.
Expand source into a list of dictionaries.
Upload a single file to S3.
Copy a list of files into a directory.
Create a new bucket for the specified source.
Update the user s privileges.
Prints the contents of the specified source to stdout.
Get a single file from S3.
Get a list of files from S3
Copy a single file from source to target.
Copy a list of S3 files to a new location.
Delete all empty files from S3
Walk a directory and return a list of relative paths.
Copies and uploads files from source to target.
Calculate the MD5 hash of a file.
Returns the md5 of the file.
Create all the parent directories of the target directory.
Check if the local md5 is synced with the remote.
Returns True if the path matches the filter path.
Recursively walk s3 directory.
Add object to result only if it is modified before or after the last modification date.
Get file privilege.
Look up an object in S3.
Read a chunk of data from a file.
Verify the size of the downloaded file.
Write a chunk of data to a file.
Runs the specified command.
Validates arguments according to format.
Handler for ls command.
Handles bucket create command.
Upload files to S3.
Get handler.
Handler for globus cat
Handler for dsync commands
Handles the cp command.
Handles mv command.
Delete files from S3.
Handler for DU size command.
Total size of objects in S3.
Match the date part of the value.
Match time.
Match delta.
Check that value is a valid JSON dictionary.
Get a session from hub.
Push data to all registered callbacks.
Encrypts the token and returns the ciphertext.
Exception handler that logs the exception to Rollbar.
Add a stream handler if it doesn t exist.
Get the most appropriate request for this environment.
Wrapper for _report_message that logs uncaught exceptions.
Create a logger that logs to a file.
Builds the person data from the request object.
Adds the current lambda context to the data dictionary.
Add the request data to the data dict.
Check if we need to add local variables to the frame.
Build request data from a request object.
Build server data.
Build the payload to send to the frontend.
Run the server.
Compose chosung joongsung and jongsung.
Decompose a Hangul letter into a Hangul code.
Check if the given Hangul letter has Hangul sung.
Attach a word to the josa dictionary.
Check if the given node is inside an except block.
Check if the given node is inside a lambda function.
Recursively get all the elements of a node.
Clobber in except statements.
Check if the given node is a super - node.
Check if the given node contains an astroid. raise node.
Check if the given node is a function decorator.
Check whether the given node is an ancestor of the given frame.
Find the parent of the given node.
Collect all string fields from a format string.
Get the argument from a call node.
Check if a node inherits from a standard exception module.
Check if the function is decorated with a property.
Check if the function is decorated with the given qnames.
Find the first except handler or tryexcept wrapper node that wraps the given node.
Check if the given node is a import from a fallback block.
Return a list of astroid. excepthandler s that handle the given exception.
Check if the node ignores the given exception.
Check if the class is abstract.
Try to infer the given node.
Return the type of the given node.
Check if an evaluation is enabled for the given node.
Return a list of fully qualified names from a module name.
Get the absolute name of the imported module.
Return a string representation of the tree defs.
Generate a dependency graph.
Visit an import node.
Visit an ImportFrom node.
Checks the position of the first non - import node.
Record that a node imported from another module.
Check if the relative import of importedasname has changed.
Add an imported module to the import graph.
Check if a module is deprecated.
Checks that the module specified by mod_path is one of the preferred modules.
Write external dependencies information to the report.
Filters the dependency graph to only include imports that are inside or not internal.
Get the default set of options from the rcfile.
Insert default options into sys. argv.
Returns True if the given node should be visible in the current mode.
Get the callbacks for the given node.
Visit a node and call its callback function if any.
Check that the messages are consistent.
Visit a function call node.
Check if the node is a datetime node.
Check if the given call node is an open mode call.
Handle messages.
Returns the title for the given node.
Sets the default options based on the configuration settings.
Return True if the given node should be shown.
add a class node to the class diagram
Returns the ancestors of the given node at the given level.
Get nodes that are associated with the given class.
Recursively extracts classes from the class diagram starting at the given node.
Return package and class diagrams.
Called when visiting an importfrom node.
Create a class diagram for the given class.
Returns a list of class diagrams.
Check if the owner is ignored by any of the classes in ignored_modules.
Return a list of names that are similar to the given attribute name.
Emit a no - member error for the given node.
Check if the given node has a parent of the given type.
Checks if the given name is used as a variadic of any of the variadic
Check if a variadic is not in a context.
Check if the assignment is valid.
Check for an uninferable call.
Visit an unaryop node.
Iterate over the interfaces implemented by the given node.
Create an astroid project from a list of files.
Visitor for Package AST node.
Visit a function node.
Visit an assignment name node.
Assign the type of the attribute to the type of the attribute.
Visit an import node.
Visit an importfrom node.
Compute the number of the module that should be loaded.
Checks if the given module is imported by this importer.
Register all text reporter functions.
Handle a message.
Handle a message.
Write the graph opening tag.
Writes an edge between two nodes.
Process a non - raw string token.
Write section and child nodes.
Handles the evaluation section.
Writes a table to the file.
Add a renamed message to the message definition.
Register all messages from a checker.
Registers a message with the registry.
Checks that the message with the given msgid has the given symbol.
Raise an invalidmessageerror if the symbol and other_symbol are the same.
Raise an invalid message error.
Create the documentation for the builder.
Return the number of CPUs.
Add messages stats to a report section.
Temporarily fix the import path.
Load plugins from a list of modules.
Load configuration for all dynamic plugins.
Sets an option for the token checker.
Register a checker.
Enables and disables python3 porting mode.
Returns a list of all checkers that are not self.
Returns a sorted list of checker names.
Prepare checkers to run.
Expand a list of modules into a list of files.
Set the current module.
Check astroid module.
Evaluate the evaluation and display the results.
Handles help messages.
Print the full documentation and exit.
List all messages.
List all registered checkers and exit.
Normalize text to line_len characters with indent.
Get the module and frameid of the given node.
Safely decode a string.
Check if a base name matches a blacklist pattern.
Register all plugins in the given directory.
Comment out the given string.
Recursively formats a value according to optdict.
Format a section of an INI file.
Format a list of options and print it to the stream.
Insert child at index.
Append a child to the vnode.
Returns the list of parents of this node.
Accepts a layout and outputs the result to the given stream.
Returns the content of the given table as a list of lists.
Compute the string content of the given layout.
Recursively collect all message lines for a module and its submodules.
Suppress ignored messages.
Registers a report for a checker.
Add stats.
Get the name of the setter property on the given node.
Returns the setter property for the given node.
Check if a function returns something.
Return a set of possible exception types for the given node.
Processes a module and adds all managed messages.
Processes a module checking its file encoding.
Process comments.
Check if the given statement is from a future import.
Return True if parent is a for - else branch of stmt.
Find the overridden method for the given name in the given class.
Get the extra information about the module that is being unpacked.
Check if the given name node is assigned to a local variable.
Mark a node as consumed.
Check if the node has a homozym in the upper function scope.
Check if the unpacking is correct.
Recursively check the metaclasses of the classdef nodes.
Returns a list of all packages in the given directory.
Run install_lib.
Add a table with similar stats to the given sect.
Run the similar command - line tool.
Append a stream to the lineset.
Compute the similarity lists for each ensemble.
Print simulations to stdout.
Find the common substring between two line sets.
Returns an iterator over all possible combinations of the linesets.
Enumerate contiguous stripped lines.
Create a dictionary that maps each stripped line number to a list of line numbers.
Checks if two nodes have the same attribute value.
Returns True if the parameters of the overridden method are different from those of the original method.
Try to infer the call result for the given node.
Set the node to be accessed in the current scope.
Check class definitions.
Check that the mro of a node is consistent.
Check that all the bases of the given class are valid.
Checks if the node is a function call and adds a message if so.
Check whether the given node is in a slot whose value matches the given node s attrname.
Visit a name node.
Check if the given node is a mandatory method parameter.
Check if the body is a raising function.
Check for bad exception context.
Displays the reports in the given layout.
Check if the class is a typing namedtuple class.
Check if the class is an enum class.
Check if a class is a dataclass.
Checks if the number of ancestors and attributes are too large.
Checks if there are enough public methods in the class.
Visitor for If AST node.
Check the number of boolean expressions in the condition.
Checks the docstring for misspellings.
Return a formatted string representation of the object.
Check if the given node is an actual ELIF.
Check if the given if node is simplified.
Check if a stopiteration node is inside a generator.
Check if exception inherits from stopiteration.
Check if there are any nested blocks of the same scope.
Return a dictionary of duplicated instance types.
Checks that the isinstance operator is not str_.
Check if a node is a and or ternary.
Check for consistent returns.
Check if Graphviz is available on the system.
Run the diadefs command.
Writes all packages in the diagram to self. printer.
Writes all classes in diagram.
Set the printer for the analysis.
Set up the graph printer.
Return whether or not this requirement may be applied to the system.
Format the help text for printing.
Get environment variables.
DFS to find cycles in the graph.
Generates the graph in dot format.
Helper function to format a section and all options.
Disable a managed message.
Enable or disable a message.
Returns the symbol of the message.
Check if a message is enabled.
Add one message to the internal message store.
Get the indent length of the given line.
Returns a string and a delta message for a continuation hint line.
Return the indent for the token at the given index.
Handles the start of a line.
Get the indentation for the token at the given index.
Return the hanging indentation for bracket after the current line.
Return a continuation token at position that is inside bracket.
Push a token onto the token stack.
Add a message on a new line.
Check if the token at i is a valid type annotation.
Checks for a whitespace at the ith position of the token stream.
Check for surrounded by whitespace.
Visit a default statement node.
Check for multi - line multistatements.
Check the indent level of a string.
Check if the given node is in an iterating context.
Check if the given node is a conditional import.
Visit a name node.
Check for subscripts that inherit from stdex.
Visit an attribute node.
Visitor for raises AST node.
Find the path to the pylintrc.
Validate the value against the validator defined in optdict.
Registers an options provider.
Set a provider option.
Set the value of a global option.
Generate a configuration file.
Loads the configuration file.
Load configuration from command line.
Add a help section to the cmdline parser.
Return the help text for the command line parser.
Loads default values for all options.
Get the attribute name for an option.
Get the default value for an option.
Yield option names sorted by section.
Check if the given function is a method call.
Check if the node is a complex format string.
Visit a module node.
Visit an ImportFrom node.
Visit an import node.
Checks that the format_string is valid.
Check if the given node is inside a loop.
Find the loop node that breaks the given loop node.
Return True if the loop exits the loop immediately.
Return a set of property classes and a set of property names.
Determine the type of the function name based on its decorators.
Generate a report by node type stats.
Check if the call is a one argument call and has only one keyword argument.
Check for starred assignment.
Check that the call is abstract.
Check if the loop exits on a else loop and add a message if so.
Check if the given node is inside a loop.
Opens the linter for reading.
Check for errors in the expression.
Check if the assert node is valid.
Check for duplicate keys.
Check that the node is not in the final body of a tryfinally.
Check if the given call is a reversed protocol method.
Check the docstring of the given node.
Check if the literal is a comparison of the other literal.
Add a sub - graph to the graph.
Parse a subgraph.
Visit a module AST node.
Recursively walk an Astroid and its children.
Add a relationship between two objects of the given type.
Get a relationship of type relation_type from from_object.
Get the list of attributes associated with the given node.
Add a diagramentity to the graph.
Return a list of class names for the given nodes.
List of classdef objects.
Returns the class with the given name.
List of module objects.
Returns the module with the given name.
Get a module by name.
Adds the from_module as a dependency of the module at the given node.
Delete this object from the cache.
Get the query for the model.
Get user by username and password.
Get user by either access_token or refresh_token.
Store a token in the database.
Set a new grant.
Get client by client_id and code.
Prepare the request for sending.
Initialize the extension for the given application.
Create a new OAuth remote application.
Redirects the user to the authorize url of the application.
Handle the response from the OAuth1 provider.
Handle the response from the OAuth2 provider.
Handle an authorized response.
Hash the given token for the given application.
Create a client with the given token.
Create a client from an access token.
Insecure transport context manager.
Confirm an authorization request.
Get the client secret for a given client key.
Get the secret for the request token.
Get the secret for the access token.
Returns a list of realms associated with the given token.
Return the redirect URI for the given request token.
Get rsa key from request. client.
Validate client key.
Validate request token.
Validate the access token for the request.
Validate timestamp and nonce.
Validate redirect_uri against client s redirect_uris
Validate the access token against the realms passed in.
Validate the token against the verifier and update the request object with the result.
Verify a request token.
Return True if the token matches one of the realms.
Confirm an authorization request.
Authenticate the client for the given request.
Authenticate request with client_id.
Get the original scopes for the access token.
Confirm that the refresh token has the specified scopes.
Get the default redirect_uri for a client
Get default scopes for a client.
Invalidate an authorization code grant.
Grant the user with the given code for the given client_id.
Saves a bearer token.
Validate a bearer token.
Validate client_id.
Validate the code against the grant.
Validate the grant type against the client.
Validate a refresh token.
Validate the response type for a given client.
Validate scopes for the client.
Validate user credentials and set request. user.
Revoke an access token or refresh token.
Update qq API request data.
Convert all keys in a dictionary to strings.
Change the Authorization header of a werkzeug request.
Register a remote application with the OAuth provider.
Create a remote application.
Extract the parameters from the request.
Convert text to bytes.
Decode base64 text.
Create a response object.
Get the cached clients for the current application.
Add a remote application to the registry.
Add a remote application to the OAuth provider.
Try to get the public key from the certificate.
Generate the public keys and check if the operation is successful.
Check if load_privatekey_callback has been called
If the load_privatekey_callback_incorrect_callback_incorrect_callback_
Check that the load_privatekey callback is wrong type.
Get all the CRLs.
Duplicate the revoked asn1crypto. x509. revoked. CRL.
Create an X. 509 certificate request
Create a certificate.
Use a X. 509 certificate chain file.
Enables or disables the use of a certificate.
Set the certificate to use for the current SSL context.
Add a certificate to the SSL context.
Use a private key in the context.
Set the private key on the SSL context to use.
Load client certificate information from a file.
Set the verify depth of the SSL certificate.
Load a previously saved DH parameters into the SSL context.
Set the cipher list for this connection.
Set the client certificate authority list.
Add a client CA certificate authority to the context.
Set the SLTP profiles to use for TLS extensions.
Set the next proto select callback.
Set the ALNPN protocols for the context.
Set the ALTPN select callback.
Set the OCSP callback.
Set the SSL context for this connection.
Get the name of the TLS server associated with this connection.
Set the host name for the TLS extension.
Receive data from the socket.
Read data from the BIO socket.
Request a renegotiation of the SSL connection. Returns a boolean indicating whether or not the
Shut down the SSL connection.
Returns a list of the available ciphers.
Returns a list of client certificates.
Set the shutdown state of the SSL connection.
Returns a random string of length num_ using the server side of the SSL connection.
Return a random string of length num_ using the SSL context.
The master key for this session.
Export the keying material for this SSL connection.
Get ssl session.
Get the name of the currently active cipher.
Get the number of bits in the current cipher.
Get the version of the currently active cipher.
Get the name of the SSL protocol version.
Get the next handshake message from the peer.
Set the ARPN protocols for the connection.
Get the ALPRN protocol negotiated for the current SSL session.
Convert a bio structure to a string.
Set the value of the ASN1 time field.
Return a string representation of the time in ASN. 1 format.
Get an elliptic curve by name.
Dump a public key object to a string.
Load a public key from a buffer.
Sign data with the key pkey and return the signature.
Verifies the signature on the data using the certificate cert.
Dump a CRL to a string.
Derive a cryptography key from the EEP public key.
Check if this key is valid.
Return a set of all curves supported by the given lib.
Load elliptic curves.
Return a new EC key object for this curve.
Return the DER string representation of the certificate.
Get the name and value of the certificate as a list of tuples.
Get the short name of the certificate.
Get the data associated with the extension.
Convert the certificate signing request to a cryptography object.
Set the public key for the certificate.
Get the public key for this certificate.
Get the subject name of the certificate.
Add a list of extensions to the certificate request.
Returns a list of x509extensions supported by the certificate authority.
Verifies a certificate using a private key.
Return a cryptography representation of the certificate.
Set the version of the certificate.
Get the public key of the certificate.
Set the public key for this certificate.
Sign a certificate with a private key.
Returns the hex digest of the certificate.
Set the serial number of the certificate.
Get the serial number of the certificate.
Add a number of milliseconds to the notafter time of the certificate.
Calculate the gmtime in milliseconds for the certificate not before the given number of days.
Check if the token has expired.
Get the name of the issuer.
Set the issuer of the certificate.
Get the subject of the certificate.
Set the subject of the certificate.
Add a list of x509 extensions to the certificate.
Get a specific extension by its index.
Add a certificate to the store.
Add a certificate CRL to the store.
Set the verification time.
Initialize the store context.
Return an x509storecontexterror.
Verify the certificate.
Set the serial number of the certificate to the given hex string.
Get the serial number of the issuer.
Set the reason for this certificate.
Get the reason for this certificate.
Set the revocation date of the certificate.
Return a cryptography representation of the certificate revocation list.
Return a tuple of cryptography_x509_revoked.
Get the issuer for this certificate.
Sign the given digest with the given issuer cert and key.
Export the certificate and key to a PEM file.
Return the type name of the object.
Set the CA certificates.
Sign the given digest with the given private key.
Verify a private key.
Encode the key in base64.
Get the public key for this key.
Set the public key for this key pair.
Create an exception from the error queue.
Get the metadata for the service.
Yield all issues for all boards and lists.
Returns a dictionary of annotations for the given card.
Returns an iterator over all boards.
Get a list of lists for a board.
Get all cards in a list.
Get all comments for a given card.
Construct the URL for the API.
Get a list of JSON objects from a URL.
Convert a link field to a dictionary.
Query the Gitlab server for issues.
Get all pull requests for a given tag.
Aggregate all issues in a section.
Get a value from the main config or return default.
Determine if the issue should be included.
Makes a table from a given grid.
Run an oracle command and return the output.
Return the value of the given option as an integer.
Aggregate all issues and synchronize them.
Get data from url
Get a collection of values from the API.
Parse a sprint string into a dictionary.
Runs the OAuth flow and returns the credentials.
FDR correction of pvals.
Z - Score data2d along an axis.
Adjust the spines of an axis.
Prepare the argument parser for the script.
Adds parsers for the enrichr command line.
Probability density function for seaborn
Returns a pandas. Series containing the names and descriptions of the marts.
Returns a pandas. DataFrame of all the datasets for a given mart.
Returns a pandas dataframe with the attribute names and values.
Returns a Pandas dataframe of the filters applied to the dataset
Determines the number of CPU cores to use.
Load genesets from a list of genes.
Get libraries for a given database.
Download enriched libraries and return a dictionary of genesets.
Construct heatmat from dataframe
Load data into a pandas. DataFrame.
Run samples permutationu for the given dataframe.
Save the results to a CSV file.
Parse the gene_sets attribute.
Send a list of genes to the server.
Check the number of genes in the list.
Create a cube script.
Generates an icosphere layer.
Cube Strikes a cube.
Return red green and blue values for a given color.
Check if var is a list with num_terms terms.
Make a variable into a list.
Writes a filter script to the specified script.
Merge two thresholds into a single script.
Splits a mesh on a nonmanifold face.
Translate script by given value.
Rotate a script by an angle.
Multiply a vector by a given value.
Solve the cylindrical triangulation of a script using the cylindrical
Convert a cylinder script to a cylinder script.
Deforms a curve to a curve script.
Write a LaTeX script to a LaTeX file.
Writes a mesh filter script to the FireCloud format.
Voronoi smoother.
Filter the mesh by face and vert.
Writes the vert_quality filter script to the output file.
Vertices of a cylindrical script.
Evaluates the spherical verticies of the input script within the spherical plane
Renames the layer with the specified label.
Changes the layer number of the specified filter script.
Duplicates the current layer.
Delete script from lower layer.
Begin a new script.
Add a new layer to the layer stack.
Saves the filter chain to the given script file.
Applies a per triangle filter to the specified script.
Measure the topology of a filter script.
Parse the hausdorff log file.
multiplicative multiplicative multiplicative base 2.
Cross product of u and v.
Multiply a scalar vector by a vector.
Writes a depth filter script.
Sorts a file of polylines by their vertex coordinates.
Measure the aabb geometry and topology of a mesh.
Convert file extension to lowercase.
Get upload set configuration.
Return the URL for the given filename.
Returns the full path to a given file.
Returns True if the given extension is allowed.
Resolves a conflict.
Extract the vprof version from a file.
Remove duplicates from a list of objects.
Returns the difference between the number of objects in objs1 and objs2.
Format the number of objects in the dictionary.
Trace memory usage.
Memoized code events.
The number of objects that will be overhead for this object.
Compute the amount of memory that will be used to store the output.
Profile a Python package.
Profile the module.
Profile the decorated function.
Run the profiler.
Get a set of all module names in a package.
Runs the given function in a separate process.
Get the type of a run object.
Initialize the profiler module with the given run object.
Initialize the profiler with the given run_object.
Initialize profile function.
Replaces sys. argv with self. _run_args.
Sample signal.
Insert a stack of functions into the call tree.
Recursively fills the sample_count attribute with the sample count of all children and returns the
Formats the tree for printing.
Returns the call tree as a dictionary.
Returns a dictionary containing the package information for profiling.
Profile the module.
Profile function.
Transforms the stats into a list of tuples sorted by number of calls.
Return a dict containing the package information for profiling.
Profile the Python module.
Profile function.
Shows a guestbook.
Add a new entry to the database
Start the profiling server.
Returns the content and path to the root directory of the project.
Returns the content of the file and the extension of the file.
Handles GET requests.
Do a POST request
Send a response to the client.
Check if module_path is in the standard library paths.
Record a line of code.
Yield lines without standard library.
Fills the heatmap with the number of lines without stdlib.
Takes a source code string and a skip_map and returns a list of line numbers and
Package containing runpy heatmaps.
Formats a heatmap file.
Compiles and runs the module.
Runs the code and returns the profile information.
Runs all profilers specified in prof_config.
Run a function and return the result.
Predicts the probabilities of each input feature.
Predict the log probability of the given input.
Fit the model to the given RDD of strings.
Counts the number of occurrences of each feature in analyzed_docs.
Sorts the features in the vocabulary.
Remove features that fall outside the specified range.
Fits the model to the given data and transforms the data.
Transforms a Tensor z using this Embedding s Embeddings.
Convert to scikit - compatible object.
Private method that calculates the average fit.
Predict the class for x.
Fit the regression model to the given RDD of floats.
Fit the model to the given data.
Fits the model and transforms the input z.
Returns the score of the last step given the input z.
Score an estimator on a test set.
Fit the k - means clustering to the input data.
Predict the class for x.
Predict the class for a given input x.
Check that the dtype of the given RDD matches the expected dtype.
Fits the model and transforms the input data.
Transform an RDD of Spark RDDs into a RDD of Spark RDDs.
Yields the items from the iterator in blocks of size bsize.
Break a tuple into chunks of size bsize.
Block an RDD of structured data.
Apply a function to each element of the RDD.
Shape of the DataFrame.
Return a numpy array of the elements contained in this RDD.
Returns the bitwise perm of stat at position pos.
Check if the given path has a root write permission.
Reads the config file and prints the contents.
Read the configuration file.
Run a command as a user.
Execute a command and return its output.
Execute a command over SSH.
Validate the configuration data.
Returns the headers for this request.
Appends the name of the assistant to the url.
Returns the url for the specified event.
Return the text representation of a packet.
Print the discovery text for a packet.
Discover devices on a network interface.
Execute this command.
Send a confirmation message to the VI.
Called when a device is pushed to the queue.
Execute the specified device in a thread.
Scan for devices.
Returns the absolute path of the ledger file.
Install and run compatibility tests.
Loads a precalculatedtextmeasurer from a JSON file.
Generate the supported characters in a font.
Generate a sequence of characters that can be encoded using the given encodings.
Calculate character to length mapping.
Writes a JSON file containing the statistics for the given deja_vu_sans
Convolve an image using a 2D Gaussian kernel.
Returns the kernel for the Gaussian fit.
Convert an image to grayscale.
Main entry point for the script.
Compute the value of the ssim for the given target.
Compute the SIM between two images.
Destroys the object.
Set the codeversion of the running command.
Get the status of the RAFT node.
Print the status of the job to the log.
Return the node ID associated with the given connection.
Attempt to bind if necessary.
Called when a connection is received or disconnected.
Internal utility callback.
Determines if a node should be connected to the other node.
Establish a connection to a single node if necessary.
Outgoing connection establishment signal handler.
Called when a OutgoingMessage is received from a node.
Called when a client disconnects from a redis server.
Add a node to the sync object.
Remove a node from the cluster.
Send a message to a specific node.
Puts an item into the queue. Returns True if successful False otherwise.
Inserts the given item into the heap. Returns True if the item was inserted False if the
Remove and return the first element of the heap.
Try to acquire a lock.
Check if the lock is acquired.
Release a previously acquired lock.
Set the hosts to use.
Create one or more indexes.
Migrate aggregate and forensic indexes.
Strips the metadata from the report
Save aggregate reports to kafka
Extracts the XML from an input file.
Parse an aggregate report file.
Convert a dictionary of forensic reports into a CSV file.
Parse a DMARC report file.
Get imap capabilities from the server.
Save a list of forensic reports to splunk
Decode base64 data.
Given an IP address return the reverse DN of that address.
Convert a human - readable timestamp to datetime. datetime.
Get information about an IP address.
Convert an Outgoing Message object to an RFC822 string.
Convert a string to a list.
Parse a HAProxy DNS report file.
Drain the connection.
Publish a message.
Publish a request message.
Publish a message.
Asynchronously subscribe to the specified subject.
Unsubscribe from a stream.
Send a ping and wait for it to finish.
Select the next server to connect to.
Process error messages.
Process operation error.
Return the command to connect to the CPS.
Process a pong.
Process a message received from a client.
Processes the info returned by the server.
Coroutine that flushes pending data.
Read loop.
Loads features from a numpy array.
Load features from images.
Compute Pearson correlation.
dot product of the feature_images
Select a subset of features based on a feature selector string.
Get the order of the features in the dataset.
Classify a set of data.
Fit the classifier.
Set the class weight of the classifier.
Fit the classifier with cross - validation.
Fit the classifier to a dataset.
Selects random voxels and returns image data.
Given a model and a list of feature names return the top n_top_words top -
Pearson correlation coefficient.
Compute the FDR statistic on the given probability distribution.
Load activations from a CSV file.
Create the image table.
Returns a list of feature names.
Returns a dictionary of feature names and their counts.
Load a SFrame from a pickle file.
Save the feature table to a file.
Get the ordered names for the given features.
Search for features in the table.
Returns the set of ids that match the given expression.
Convert the SDF data to a sparse csr matrix.
Transform a matrix using an orthogonal transformation matrix.
Convert a FOI matrix to a MATLAB matrix.
Apply a transformation to a FOCI.
Get a mask of all layers.
Load images from filenames using a masker.
Save an image mask to disk.
Set the logging level.
Parses the given address and returns a list of addresses.
Convert a dictionary to a namedtuple object.
Get the price for a ticker.
Get bulk news.
Make a request to the API.
Get a bearer token.
Make a request to the API.
Get the tracks for a Spotify album.
Get Spotify artist information.
Get the albums of a Spotify artist.
Get the top tracks by a Spotify artist.
Search for artists related to a Spotify artist.
Get a list of Spotify artists.
Get information about a specific category.
Returns a list of playlists for the given category.
Returns a list of the most popular categories.
Returns a list of the most featured playlists.
Returns a list of new releases for the authenticated user.
follows artists or users by their ids
Retrieve the albums for this artist.
Get all albums for this artist.
Returns the total number of albums for this artist.
Get the currently playing track.
Get the current player.
Get list of available devices.
Returns a list of recently played tracks.
Replace tracks in this playlist.
Creates a new playlist on this track.
Get a list of all playlists for this track.
Returns the tracks on this album.
Returns all tracks in the album.
Generate the URL for the OAuth2 flow.
Get a Spotify album.
Get a Spotify artist.
Get a Spotify track.
Get a Spotify user.
Get albums by IDs.
Get a list of artists.
Convert a URI or OpenID string to an ID.
Create an instance of this class from an existing client.
Generate OAuth 2. 0 Authorization URL.
Return the client attributes as a dict.
Returns the parameters of the function as a string.
Build the playlisttracks.
Get all tracks of this playlist.
Transfer player to specified device.
Create a new instance of this class from its href.
Get the current state of the record.
Try to convert or shorten a month.
Update all documentation URLs in the current directory.
Checks if the current version is greater than or equal to the version in the yaml file.
Check if the current version of the system is a development version.
Check if the current version of the file is newer than the latest version of the file.
Write the current state of the backup file to disk.
Restore the configuration from the backup file
Return True if the line matches one of the ignore patterns.
Parses a list of options and returns a list of booleans.
Recursively extract base from url.
Returns a list of decoded URLs or domains.
Make a HEAD request and return the response code.
Get the current http code.
Check if the domain is valid.
Returns True if the domain is a subdomain False otherwise.
IPv4 syntax check.
Checks if the given ip is a valid IPv4 range.
Check if URL syntax is valid.
Load configuration from current working directory.
Stay safe.
Checks if the passed URL is valid and downloads the file if not.
Return entry management url if available.
Print the function header.
Logic for file decision
Print the domain and its status to the screen.
Determine the URL to use for this file.
Print the logo in the terminal.
Formats the domain if necessary.
Return a list of domains extracted from a file.
Returns a list of domains corresponding to the input file.
Return a list of URLs for all files in the directory.
Return a tuple containing the expiration date and the status string.
Runs the code generator for the catched code.
Get a structure file from the local filesystem.
Create directory if it doesn t exist.
Delete all files that do not exist in the parent directory
Set the path to the configuration file.
Installs the production config.
Install IANA configuration.
Download and install the PSL configuration
Download and install a directory structure file.
Merge values from the upstream configuration and the new configuration.
Load the config file.
Split version string into digits and non - digit versions.
Check the local version against the upstream version.
Check if a directory has been cloned
Try to intern the string if it exists.
Return the directory where analytic host files are stored.
Output unified file.
Generate a status file for the domain.
Return bool_ if the file should not be replicated.
Parse public suffix list.
Load configuration from file.
Return the standard string representation of the element.
Load the IANA database.
Return the iana record for the requested extension or None.
Yield tuples of matched file extension and referer.
Update the iana database with the current configuration.
Try to mine the history of URLs.
Retrieve the configuration from disk.
Write the configuration back to the file
Add a list of elements to the intern dictionary
Remove the bare object from the configuration
Return a list of all the mined objects in the configuration
Mines the configuration and adds the result to the list.
Return the content of a JSON file.
Write content to file.
Write whois information for the specified record.
Set the expiration date of the extracted content.
Called when a referer is not found
Check if the template is authorized to generate a header file.
Construct a header from a list of data.
Construct an ordereddict based on the data to print.
Return a list of sizes from a header dict.
Colorize the data according to self. template
Print the JSON data to the output file
Return data to print.
Calculate the time difference between start and end.
Return a string representation of the execution time.
Return list of files to delete
Returns a list of databases to delete
Delete every file in the database. If clean_all is True then delete all databases.
Compute the hash of the file using the specified algorithm.
Hash the data using the specified hash algorithm.
Get a hash for the current configuration.
Execute the command and return the output.
Remove a key from the main dictionary.
Rename a key in the main dictionary.
Recursively merges the given dictionary into the main dictionary.
Save the main dictionary to a JSON file.
Write the main dictionary to a yaml file.
Recursively splits the path into sub - directories.
Write data_to_write to file.
Read the funilrys file
Returns a sorted list of strings.
Merge a list of lists into a single list.
Returns a list of strings that do not match the regular expression in self. data
Match against the regex.
Return a copy of the string with replaced substrings.
Count the number of occurrences of self. status.
Calculate the percentages.
Check if the given url is valid.
Return True if the domain is valid False otherwise.
Check if the domain is a valid subdomain.
Get the current status.
Reformat historical formatting error if configured.
Retrieve the inactive database and merge it if it exists.
Backup the inactive database
Return the current time as an integer.
Return the interned content of a string.
Check if a string is present in the configuration
Internal method to retrieve the whois database
Backup whois credentials to the whois database.
Return True if the user is in the database False otherwise.
Check if the current time is older than the current time
Return the expiration date of this object.
Run Travis build if environment variable is set.
Run the Travis environment.
Look up the IP address of the current host.
Send a WHOIS request and return the response.
Get the current status of the URL.
Get the current value of the configuration
Get the current object.
Return a list of all paths to standard library files.
Yield all standard package names.
Yield the line numbers of unused import messages.
Extract the module name from the unused import message.
Yield line numbers of starred imports used in a message.
Yield error messages when a star - import - usage message has undefined name.
Iterate over the line numbers of unused variables in messages.
Find duplicate key line numbers.
Run pyflakes and return a list of error messages.
Extract the package name from the given line.
Return True if line is a multiline import.
Returns True if the given line is a multiline statement.
Filter a line of code to return only the modules imported that are not in unused_module.
Break up an import into a list of imports.
Given a list of messages return a dictionary mapping line numbers to messages.
Filter starred imports with undefined name.
Filter duplicate key lines.
Check if a dict entry has the given key.
Check if the value is a literal or a name.
Return line numbers of useless pass tokens.
Filter useless pass lines.
Returns the indentation of the given line.
Returns the end of the line.
Filters a source code string to remove unused imports.
Split a comma separated string into a set of strings.
Check if a file is a python file.
Check if a file is in the exclude list.
Read the obtainlease response payload from the input stream.
Write the obtainlease response payload to the output_stream.
Write the cancel request payload to the output_stream.
Reads the cancel response payload from the input stream.
Create a new name with the given value and type.
Read the digest from the input istream.
Write this digest to the given stream.
Reads the application specific information from the input istream.
Write this application specific information to the given stream.
Create an application specific information object.
Read the derivation parameters from the input stream.
Write the derivation parameters to an output stream.
Read the request payload from the input stream.
Write the request payload to the output stream.
Read the getresponsepayload tag from the input stream.
Write the getresponsepayload data to the output_stream.
Writes the contents of this MKInfo to the specified output_stream.
Reads the SignatureVerifyResponsePayload from the input stream.
Build an error response.
Process a template attribute and return a dictionary of attributes.
Retrieves the attribute values for the specified attributes from the specified managed object.
Sets attributes on a managed object.
Sets the given attribute on the given managed object.
Check if the given operation is allowed for the given object.
Write this DecryptRequestPayload to the given stream.
Create a new secret.
Set the given setting to the given value.
Load settings from a configuration file.
BITMASK = X | Y | Z
Filter cryptographic usage masks.
Read the next long integer from the input istream.
Write the 32 - bit integer to the stream.
Validate that the integer is well - formed.
Read the primitive value from the input istream.
Write this BigInteger to the given stream.
Validates that the IntField is valid.
Validate that the EnumField is correctly representable.
Read a single value from the input istream.
Write the KMIPValue to the specified ostream.
Write the Boolean to the stream.
Validates that the value is a boolean.
Read the interval from the input istream.
Validates that the value is valid.
Validate that the key is well - formed.
Validate that the SecretField is correctly representable.
Validate that the OpaqueField is correctly representable.
Convert attribute name to tag.
Convert an attribute tag value to a name.
Build a bit mask from a list of enumerations.
Returns a list of enumerations that match the given bit mask.
Check if potential_mask is a bit mask of any type in enumeration.
Writes the template contents to the specified output buffer.
Reads the keypair response payload from the input buffer.
Write this createkeypair response payload to the given buffer.
Reads the attribute list payload from the input buffer.
Write the attribute list request payload to the output buffer.
Write this getattributelistResponsePayload to the specified buffer.
Return a list of all json files in a directory.
Run the monitoring loop.
Get the certificate from a connection.
Get the Extended Key Usage extension from a certificate.
Get the common names of the certificate.
Get the client identity associated with a certificate.
Reads the request payload from the input buffer.
Writes this createrequestpayload to the specified output buffer.
Reads the response payload from the input buffer.
Write this createresponsepayload to the specified output_buffer.
Convert the given object to a string.
Reads the encrypted response payload from the input stream.
Writes the contents of the KMIPFile to the output_buffer.
Checks whether the given attribute is supported by this rule set.
Checks whether an attribute is deprecated.
Checks if the given attribute is applicable to the given object type.
Returns True if the attribute is multivalued.
Read the check response payload from the input stream.
Write the check response payload to the output_stream.
Reads the attribute reference from the input_buffer.
Write the attribute reference to the output_buffer.
Read the attributes from the input stream.
Write the KMIP header to the output_stream.
Reads the nonce from the input stream.
Write the nonce to the output_stream.
Read username and password credential data from input stream.
Write the username and password credential to an output stream.
Writes the credential to output_stream.
Read the credential from the input stream.
Write the credential to the output_stream.
Read the MAC signature key information from the input stream.
Write this mac signature key information to the given stream.
Write this keywrappingdata to an output stream.
Read the keywrapping specification from the input stream.
Write the keywrapping specification to an output stream.
Read the extension information from the input istream.
Write the extension information to the stream.
Read the revocation reason from the input istream.
Write the revocation reason to the stream.
Validate the revocation request.
Read the default values from the input buffer.
Write the default value to a file - like object.
Write the FIPS message to an output buffer.
Read the profile information from the input buffer.
Write the profile information to the output_buffer.
Write the contents of the KMIPStream to a bytearray stream.
Shut down the UDP socket and policy monitor.
Writes the contents of this KMIPRange to the specified output_buffer.
Reads the locate response payload from the input buffer.
Write the location response payload to the output buffer.
Create RSA private key from bytes.
Read the sign response payload from the input stream.
Write the signature response payload to the output_stream.
Read the request payload from the input stream.
Convert protocol version to KMIP version.
Read the protocol version from the input stream.
Write the protocol version to an output stream.
Reads authentication data from input_stream.
Write authentication data to output_stream.
Reads the poll request payload from the input stream.
Read the certificate from the stream.
Write this certificate to the given stream.
Read the payload from the input stream.
Write the payload to the output_stream.
Interact with the server.
Reads the payload from the input stream.
Returns True if the given conformance_clause and authentication_suite are supported.
Get attributes for a given entity.
Gets a list of attributes for the specified object.
Performs a query and returns the results.
Open the connection to the remote host.
Closes the connection to the remote host.
Registers a managed object with the backend.
Get attributes of a KMIP.
Activate a KMIP session.
Builds a cryptographic parameters object from a dictionary.
Builds an encryption key information object.
Builds a macsignaturekey information object.
Builds a key wrapping specification object.
Builds a list of attributes common to all policies.
Build name attribute.
Read the query request payload from the input buffer.
Write query request payload to output_buffer.
Reads the getattributes response payload from the input buffer.
Write the contents of this GetAttributesResponsePayload to the specified buffer.
Get an entrypoint for a single entrypoint.
Get all endpoints in a group.
Return a list of entrypoint objects for all entries in a group.
Load object from module.
Create an entry point from an entry point string.
Generate a controller file.
Re - write src_file to dst_file and copy to dst_file.
Check if url is valid.
Encode something as a URL - safe string.
Decode a URL - safe string into an object.
Return absolute url for the given endpoint.
Sign in a user to the session.
Get the currently logged in user.
Create a WSGI application.
Writes a DataFrame to a CSV file.
Read a CSV file into a Pandas DataFrame.
Serialize the given dataframe to the given writer.
Deserialize a DataFrame from the given reader.
URL for the contents of the file.
Open the remote dataset.
Read this intermediate dataset as binary data.
Read this intermediate dataset as text.
Return this stream as a pandas. DataFrame.
Returns an intermediate dataset object for the specified node.
Get a workspace s experiments
Get a workspace s datasets
Get a single dataset
Finds all globals in a code object.
Return a copy of the pen object.
Lookup a color from a string.
Draws the symbol on the specified graphics context.
Cubicbernstein extrema.
cubicbernstein equation.
Build choices field.
Initialize cache.
Empty the cache.
Get an entry from the cache.
Update a cached value for the given key.
Set an entry in the cache.
Initializes the current page.
Resolves the i18n tree alias.
Returns True if the current app is the admin app.
Calculates the depth of the item in the tree.
Get the current item for the given tree alias.
Returns the URL for the given sitetree item.
Initialize the sitetree for the given tree_alias.
Returns the value of the specified attribute for the current page in the tree.
Get the level of the tree rooted at current_item.
Checks if the current user has access to the given item.
Returns the string representation of a tree item.
Renders the children of the given item.
Returns the children of the given item in the tree.
Updates the has_children attribute of each tree item.
Filter a list of items based on the current page and navigation type.
Returns the item that is the ancestor of base_item.
Recursive tree walker.
Resolve a variable name.
Returns a sitetree_treenode.
Returns the children of a sitetree item.
Returns a sitetree breadcrumbs node.
Render the tree_items using the template specified in use_template.
For a tag get the syntax tree alias and compile the filter.
Get model URL name.
Reregister the tree admin.
Handles HTTP redirects.
Handle redirection.
Override default response_add method to redirect the user to the add page.
Override default response_change method to redirect the user to the change view.
Override the get_form method to stack known URL names and rules.
Returns the tree for the given tree_id.
Move an item in tree.
Save object.
Returns the list of urls for the admin sitemap.
Dump the model tree to a Flask response
Imports the sitetree submodule for the given app.
Returns the model class for the given settings entry name.
Create a configuration from a mapping.
Creates an instance from a Python file.
Loads an instance from a TOML file.
Create an instance from an object.
Create HTTP headers for a new span.
Get the current context for the span.
Starts the span.
Stop tracing.
Update binary annotations and logging context tags.
Add a SA binary annotation to the remote endpoint.
Overrides the default span name for this logger with the given name.
Copy an endpoint with a new service name.
Constructs a V1 span object from this span.
Encode a list of spans as a zipkin protobuf list.
Create a protobuf span for the given span.
Convert a hex ID to a number of bytes.
Return the appropriate protobuf kind for the given kind.
Convert a ZIPkin_pb2. Endpoint object to a zipkin_pb2.
Convert annotations to zipkin annotations.
Create an annotation string.
Create a binary annotation object.
Create a zipkin_core. endpoint. Endpoint.
Copy an endpoint with a new service name.
Create a list of annotations from a dictionary of annotations.
Build a list of binary annotations from a dictionary of binary values.
Create a Zipkin span object.
Convert a thrift span to bytes.
Encode a list of binary thrift objects.
Detect the span version and encoding of a message.
Convert a list of spans from one encoding to another.
push_zipkin_attrs to threadlocal stack
Encodes a V2 span into a TChannel - compatible string.
Create a JSON endpoint dictionary for the given endpoint.
Encode a span as a zipkin protobuf span.
Decode a list of spans into a list of spans.
Convert a thrift endpoint to an AAFEndpoint.
Decodes a list of thrift annotations into a dict.
Convert from thrift binary annotations to local and remote endpoints.
Decodes a thrift span to a span object.
Convert a trace_id to a string.
Converts an unsigned long to a lower - case hex string.
Writes a 32 - bit hex long to the specified position in the buffer.
If tag_dict [ str_ ] is the same year as tag_dict [ str_
Set the transaction code for a mbank tag
Set the IPH ID of a tag in tag_dict
Set the tag number for a given tag in the tag dictionary
Join lines of a string.
If the response contains a json header return it else return the response text.
Limits logging to a limited number of minutes.
Get bot information.
Get a list of bots.
Read a term from the socket.
Writes the given message to the output stream.
Decode a Erlang term from a string.
Encodes the given term into its string representation.
Add a source address to the multioutuniinsocket.
Send the next num_ messages from the queue.
Set the remote service hello callback.
Stop the server.
Clear all local services.
Search for remote services.
Create a SOAP message from a WSGI environment.
Discover all dependencies for a given scope.
Get the item manager for this relation.
Returns all child fields of the given model.
Get all child m2m relations of the given model.
Saves the instance to the database.
Validates the uniqueness of the instances in self. forms.
Returns True if any of the forms have changed.
Return a new address with a valid checksum.
Generate a checksum for the given address.
Prompt user for seed.
Get the key for a given index.
Get the encryption key for the given address.
Create an iterator for generating keys.
Create a sponge from seed.
Reabsorp the given trits into the hash space.
Squeeze a trits array into hash_length chunks.
Transform the state of the circuit.
Add two trits together.
Return a list of trits corresponding to the integer n.
Return the trits of left + right.
Return the sum of the trits of the left and right sides combined with carry.
Print seed in human readable form.
Returns a list of transaction IDs that match the specified criteria.
Promote a transaction to a higher level transaction.
Resolve a URI to a specific adapter.
Send a request to the server.
Logs a message if the logger is set.
Send an HTTP request.
Interpret the response.
Add a digest to the message.
Returns the multisigaddress.
Create an iterator that yields addresses.
Create an address from a digest.
Generate an address for the given key iterator.
Return a list of transaction objects
Iterates over the addresses used by the given adapter starting at the given seed.
Get bundles from transaction hashes.
Check whether the codec supports the given encoding.
Get codec info.
Encode the given input using the TLE algorithm.
Decode this key from input.
Returns a list of addresses that match the specified criteria.
Add a route to the blueprint.
Create a signature message from a sequence of tryte strings.
Return a JSON compatible dict representation of this EncryptedData.
Return the signature validation trytes for this signature.
Set whether or not the transaction is confirmed.
Get all the messages in the wallet.
Return a list of all transactions grouped by address.
Discover all commands in the given package and its subpackages.
Execute the request and return the response.
Apply a filter to the value and return the cleaned data.
Return the URL for a particular job.
Returns a list of errors.
Return True if the schema is valid False otherwise.
Create a validator for the signature.
Returns a list of bundle signature errors.
Get a signature error message for a group.
Traverse the transaction tree rooted at txn_hash until a bundle is found that matches the
Start an ipython interactive console for the given API instance.
Return a random string of length length.
Return the digest of this key fragment.
Sign input transactions in bundle at start_index.
Pretty print the object.
Accumulate the hash of a trits.
Adds context to an exception.
The security level of the machine.
Increment the legacy tag by num_.
Returns the tag of the most recent transaction.
Add a transaction to the block.
Finalize the transaction.
Sign all txns in the list.
Create the input transactions for the given addy.
Convert a value to a standard unit.
Decompress a G1 compressed string.
Return the prime field inverse of a.
Create a new instance from a JSON file.
Split the description into parts.
Returns a list of all categories in this object.
Generate a random colour string.
Create a builtin time scale by name.
Create a Decor object from an image.
Returns a CSV representation of the table.
Returns the maximum width of all rows.
Returns the appropriate decoration for the given character.
Plot the dataset.
DEPRECATED - Print deprecation warning.
Process a row of text.
Parses a canstrat text string into a dictionary.
Return a list of unique rings.
Returns a list of interval objects for the given tops.
Clean longitudinal data.
Read a PETRel file and return a list of Intervals.
Read a canstrat file and return a list of interval objects.
Return a copy of the Striplog instance.
Writes the list to a CSV file.
Write the section to LaS3 format.
Returns all enclaves that overlap the given index.
Returns all gaps in the source sequence.
Return a copy of the Strip with the specified thickness limit number of entries and percentile.
Return a copy of the Strip with gaps removed.
Fill gaps with the specified component.
Return the union of the intervals in self and other.
Intersect this interval with another interval.
Merge overlapping segments.
Invert the order of elements in this list.
Crop the log list to the specified extent.
Run a series of tests on this element.
Overrides the default get_field method to catch KeyError and index errors.
Returns a list of all the currently running jobs.
Parse the given HCL string and return the result.
Update a user s token.
Returns a list of all available allocations.
Fail a deployment.
Pause a deployment.
Drain the node with id id.
Drain a node with spec.
Check if a node is eligible for ineligibility.
List files in a folder.
Stream the contents of a file.
Stat a file.
Join multiple agents into a single agent.
Update a list of servers.
Forces a node to be removed from the cluster.
Returns a list of nodes with the given prefix.
Returns a list of all the evaluations that have occurred for the specified prefix.
Returns a list of namespaces.
Register a job with the given id.
Create a plan for a job.
Dispatch a job.
Revert a job to a different version.
Revert a job to a stable state.
Deregister a Nomad job
Get the current configuration.
Delete a peer from the network.
Get a list of all deployments for a given prefix.
Returns a random string of the given type.
Return a mutator for the given object.
Generate a random string based on the polyglot techniques.
Return a safe unicode string from a buffer.
Serves static html file with headers
Run the fuzzer yielding the fuzzed result.
Spawn a process.
Get the output of the command.
Finish reading from stdin.
Terminates the subprocess.
Start the worker.
Execute a pjf command
Build a random string.
Build a string representation of the scope.
Build the query string.
Build a new random value.
Build optgram.
Build the ref.
Build optgram.
Shut down the subprocess and send a testcase.
Spawn the process and monitor the return code.
Start the process monitor.
Return random float between a and b.
Returns a string representing the fuzzed URL.
Get fuzzed list of elements.
Stop the ioloop when the process terminates.
quit command handler.
Pauses the running process.
Resumes the game.
Stops the child process.
Restarts the child process
Return a list of skypeevent objects.
Set user mood.
Set the avatar of the user.
Get metadata for a given url.
Fetch a single contact from Skype.
Get a single Skype user.
Return a list of joined Skype bots.
Get bot information by ID.
Search skype.
Return a list of skyperequests for this user.
Create a new instance from raw data.
Merge other into self.
Merges the given object into the cache.
Read Skype authentication token.
Write a token to the tokenfile
Verify that the given token is valid.
Refresh Skype Token
Get the userid from Skype.
Get the registration token from skype.
Synchronize endpoints with skype.
Check if user exists.
Authenticate using the given token.
Set configuration for the message.
Ping this message.
Return a dict of recent chats.
Get a single chat message.
Create a new chat.
Extract user ID from url.
Extract chattoid from url.
Replace all occurrences of str_ in text with unicode.
Detect the format handler for the given text.
Parses the given text using the given format and returns the metadata and content.
Return a dictionary containing metadata and content.
Load yaml file.
Export metadata as a unicode string.
Export metadata as a unicode string.
Return full match of the list.
Returns a list of strings that match the pattern.
Returns a list of sublists for the item at index i.
Convert the pattern to a new start string.
Returns the list of arguments in this function.
Returns a list of lists that match the pattern
Organize a list of strings into a trie.
Recursively builds a pattern from a trie.
Check that the index for the given key is valid.
Insert string at index.
Performs an atomic partition for the given character. If the character is not part of the shadow
Returns a list of spans of the given type.
Shrink the current span by rmstart and rmstop.
Insert or update the span for the given index and length.
Returns the nesting level of the node.
Return the shadow for this element as a bytearray.
Return a byte array with the extended link shadow.
Return a mapping from type to spans.
Pretty print.
Return the list of parameters for this function.
Returns a list of parser functions.
Returns a list of templates for all subspans of the string str_.
Returns a list of wikilinks
Returns a list of all comments in the string.
Returns a list of external links to this element.
Returns a list of tables.
Returns a generator of spans for the given type.
Returns the ancestors of the parser.
Returns the parent of this node.
Returns the mode of the list.
Get the argument with the given name from the given iterable of arguments.
Remove the first argument from the argument list.
Get the value of the argument with the given name.
Returns True if this function has an argument with the given name and value.
Delete the argument with the given name.
Convert a CRS code to a string.
Find an object by name and crstype.
Load CRS from a URL.
Load a geojson from a filepath.
Create a CRS object from an EPSG code.
Create a CRS object from an ESR code
Create a CRS object from an SR code string.
Return a CRS object from an unknown text format.
Write the record to the file - like object out.
Read raw VVRR record data from stream.
Parses geotiff keys from vlr files.
Parses the geotiff file.
Get the signedness for an extra dimension.
Get the ID for an extra dimension type.
Create a new point record from another point record and a new point format.
Copy fields from another record to this record.
Appends zeros at the end of the array if the size of the array is smaller than the
Returns a set of all dimension names.
Create a new instance filled with zeros.
Create a Points instance from a stream.
Create a Point instance from a compressed buffer.
Width of dimension in SRID units
Y dimension in SRID units
Dimension in SRID units
Add an extra dimension to the data.
Writes the points data to out_stream.
Write the MAR file to a file.
Builds a dictionary of dtypes for each point format.
Build a dictionary of dtypes corresponding to the point_formats dimensions.
Convert a numpy dtype to a point format ID.
Returns the minimum file version for a point format ID.
Checks if the point format ID is compatible with the file version.
Extracts all VLRs of the specified type.
Reads num_to_read number of VLRs from the given data stream.
Check if all the las files have the same point format ID.
Check if all the las files have the same dtype.
Check if the file signature is correct.
Read the next HTTP header from the stream.
Read the VLRs from the stream.
Reads the points from the stream.
Read compressed compressed points data.
Read internal waveform packet.
Read the list of evlrs.
Warns if the stream is not at the expected position.
Create a lasdata object from a lasheader record.
Merge multiple LaS files into a single LaS object.
Write a LaTeX file and then read the LAT file again.
The date of the citation.
Set the date of the object.
Returns the minimum values of the bounding box.
mins setter.
Indices of the maximum values of all components.
setter for maxs
Returns the scales as a numpy array.
Return the x_offset y_offset and z_offset of the mesh.
Returns the major and minor version from the stream.
Convert a header from the old format to the new format.
Unpack an array from a mask.
Returns a list of the names of the dimensions that are missing from point_fmt_in.
Returns a dictionary mapping composed dimension names to sub - fields.
Returns the number of extra bytes for the given dimension.
True if this dataset has a waveform packet.
Main entry point for the CLI.
Calculate the CRC for the given command.
Print data in hexadecimal format.
Verify that the response is a valid hex string and strip the leading and trailing bytes.
Returns a list of bit indices corresponding to the set bits in r.
Generate a query from the given command.
Demonstrate Satellite Server
Connect to the IRC server.
Start monitoring the device.
Disarm the drone.
Clear the alarm.
Set the output.
Send a keep alive query to the server.
Monitor the status of the device.
Close the connection to the serial port.
Purge the database for this user.
Guess the type of the given path.
Get the file_id for the given path.
Get a notebook from the database.
Create a notebook model from a database record.
Get a directory record.
Convert file records to notebooks or files.
Build a directory model from a database record.
Create file model from database record.
Save the notebook to the database.
Save the model to the database.
Rename a file or directory.
Deletes a file or directory.
Ensure user exists in database.
Purge all files directories and users for a given user_id.
Create a new directory in the database.
Return True if user_id is a member of db_dirname.
Delete a directory from the database.
Check if a directory exists in the database.
Return a list of files in a directory.
Returns a list of dictionaries containing all directories in a given directory.
Returns a where clause for the given user and api path.
Build a select query for files.
Return a list of default field names for file objects.
Get a single file from the database.
Download a file from a user s Dropbox.
Get file id.
Check if a file exists in the database.
Rename a directory.
Save a file to the database.
Purge all remote checkpoints for a user.
Reencrypt the content of a row.
Reencrypt user content for files and remote checkpoints.
Derive a single fernet key from a password and user_id.
Get the name of a column like object.
Convert a row to a dictionary without content.
Takes a list of field names and a row and decrypts it with decrypt_func.
Create a checkpoint for a notebook.
Create a remote file checkpoint.
Delete a checkpoint.
Get the content of a checkpoint.
Return a list of remote checkpoints for the specified path.
Move all checkpoints from old_path to new_path
Delete all remote checkpoints for this user.
Remove all checkpoints from the database.
Resolves the given API path.
Prepend a prefix to a key in a model.
Manage managers.
Get a directory.
Normalize an API path.
Splits a filepath returned from the API into a directory name and the file name.
Write a notebook object as a base64 - encoded string.
Reads a file from a base64 - encoded string.
Decode from base64.
Decode a base64 - encoded file.
Return a list of directories leading up to and including the given path.
Create user on Postgres server.
Takes a list of models and separates out directories and files.
Recursively walk a directory tree.
Walk a directory tree yielding each file as a string.
Walk a folder and return a generator of all files with their content.
Reencrypt a single user.
Unencrypt all users.
Unencrypt a single user.
Create alembic. ini file from alembic_dir_location and alem
Upgrade the database to the given revision.
Sanitize the block for embedding.
Queues an instance for embedding with the given type.
Loads instances of the specified type from the database.
Insert an instance of the given embed_type into the block.
Loads the data for each embed type.
Validate widget data.
Admin view.
Returns the JSON representation of the object.
Hide the authenticated fields.
Exclude fields from the request.
Overrides Django s get method to handle version and preview_id kwargs.
Returns a queryset of the published objects.
Returns a queryset of publishable objects.
Get the value of the null boolean field.
Validate that the widget is valid.
Validates that the zone is valid.
Checks if the given id is a valid UUID.
Returns the permissions of the user.
Modify permissions of a group.
Validate author keys.
Create or update a zone.
Returns the data as a dictionary.
Prepares the data for rendering.
Render the template with the given data.
Get integration settings.
Facebook integration callback.
Get integration settings.
Updates the integration settings.
Signup form.
Map a tagname to a list of strings.
Render a zone widget
Saves the featured image.
Save a subsection of this article.
Get the extension of the image.
Returns the url to the media for this image.
Saves the image.
Saves the thumbnail to the default storage.
SQLAlchemy connection string.
Get a bandwidth limited stream for a given file object.
Read amount of bytes from the file.
Consume the given amount of time for the given request token.
Processes the scheduled consumption of the given token.
Returns the projected rate for the given amt and time.
Record the current consumption rate.
Poll for the result of a transfer.
Returns a list of callables for the subscribers of the given transfer future.
Filters a dictionary based on the keys in the whitelisted_keys list
Decrement the counter.
Call the callback if the count reaches the maximum number of registered callbacks.
Check if a file exists and is a special file.
Acquire the semaphore lock.
Release the semaphore lock.
Adjusts the chunksize to the given value.
Queue a file - like object for IO.
Returns the download output manager class that can handle the given fileobj.
Writes data to fileobj at offset.
Request writes from the heap.
Returns a boolean indicating whether the fileobj can be seeked.
Shutdown the system.
Cancel all currently running transfers.
Wait for all transfer coordinators to finish.
Wraps the given data in a file - like object and returns a file_chunk_reader
Returns the upload input manager class to use for the given transfer.
Set the exception associated with this transfer.
Set the result of the future.
Set the result of the future as being the given exception.
Returns the result of the future or raises the exception.
Cancel the future.
Submit a task for this transfer.
Add a done callback that will be called when the future completes.
Add a failure cleanup function.
Announce that all cleanups have completed.
Upload a file to S3 or a multipart object.
Download an object to a local file.
Step through the arguments of a decorator.
Find the differences between two step nodes.
Get step from decorator s arguments.
Find the differences between two steps.
Updates the specified membership id.
Deletes the specified membership from the cluster.
Returns the catfact for the current user.
Post a new message to a room
Deletes the specified membership from the cluster.
Validate base_url.
Returns True if the given string is a valid web URL.
Opens a local file.
Check that o is one of the acceptable_types.
Create a dictionary from a list of dictionaries and a list of items.
Check that the response code matches the expected response code.
Convert json_data into a dict.
Create a webexteams datetime from a date string.
Creates a new Draft.
Updates a room.
Deletes a room.
List organizations for the authenticated user.
Return the created date.
Get an access token from environment variables.
Updates an existing webhook.
Deletes a webhook from the server.
Set wait_on_rate_limit.
Update headers for the current request session.
Returns the absolute URL for the given URL.
Make a GET request.
Returns a generator that yields all pages of a given URL.
Make a PUT request.
Performs a HTTP DELETE request.
Create a new user.
Deletes the specified message from the queue.
Get a person by ID.
Deletes a person.
Get information about the currently authenticated user.
List items from the API.
Create an instance of this class.
Updates the specified team.
Deletes a team from the server.
Recursively serializes the given data.
Returns a webexteamsdatetime of the last activity of the team.
Post event service.
Get Ngrok public url.
Delete all webhooks with the specified name.
Create Ngrok webhook
Main function for webexteamsapi. py
Read telegrams from a serial port.
Read telegrams from the serial connection and put them on the queue.
Create a dsmr protocol.
Create a serial connection to a dsmr device.
Create a TCP connection to a dsmr server.
Handle received telegrams.
Called when the connection is lost.
Parse the telegram and call the callback.
Parse telegram data using the specified parsers.
Returns the version string of the specified python file.
Checks if the current Python version matches one of the specs. If not raises ValueError.
Return a list of all packages under top.
Run a command and return the return code.
Get the data files for the given data specifications.
Get package data.
Compile a glob pattern into a regular expression.
Recursively iterates over a path and yields each part of the path as a string.
Translates a glob pattern into an OS style string.
Join a list of translated parts into a single string.
Translate a glob pattern into a regular expression.
Truncates the specified table.
Writes a table to the database.
Writes all indexes for the specified table.
Writes the Postgres index triggers for a table.
Writes constraint statements to the database.
Write the contents of a table to a file.
Writes the indexes for the specified table to the file.
Writes the constraints for the specified table to the file.
Writes the triggers for the specified table.
Returns the number of items in the queue.
Enqueue data to be inserted into the queue.
Start a task handler in the queue.
Build extra predicate.
Serialize datetime object to ISO 8601 formatted string.
Reconnect to the MySQL server.
Executes a query. Returns the first row or None.
Return a connection to the database.
Run the benchmark.
Return a connection to the pool.
Look up a module variable by its error code.
Returns the number of connections and fairies in the pool
Potentially failed connection attempt.
Create a simple expression with the given fields joined.
Create an UPDATE expression
Connect to the database.
Destroys the database.
Start a new step in the pipeline.
Stop a step by name.
Loads the steps from the raw JSON data.
Disconnect from the serial port.
Reconnect to the serial port.
Connect to the websocket server.
Process a websocket message.
Stop all timers.
Send PING message and check for pong.
Check if pong is received or reconnect.
Send data to the websocket.
Remove all paused messages.
Handle system events.
Handle error messages.
Handler for incoming data.
Resubscribe to all channels
Handle authentication data.
Handle configuration data.
Update the timestamps for a channel.
Reset the connection to the default state.
Return candles for a given pair.
Set bitfinex config parameters
Subscribe to a ticker.
Unsubscribe from a ticker.
Subscribe to the order book.
Unsubscribe from an orderbook.
Subscribe to the order book for the given order pair.
Unsubscribe from the orderbook for the given pair.
Subscribe to a pair of trades.
Unsubscribe from trades associated with the given pair.
Subscribe to candles for the given pair.
Unsubscribe from a pair of candles.
Authenticate with the API.
Cancel order specified by order_identifiers.
Invoked when a command is received from the paho process.
Device command event handler
Callback called when a message is received.
Create a new device type
Update a device
Query for status and connectedafter.
Returns a list of the users.
Create a new DME in the repository.
Update a schema.
Disconnect from the AMQP server.
Callback invoked when a client connects to the broker.
Callback when a supported message is received
Device event handler
Device status event handler
Application status event handler
Get the last event for the given event id.
Returns a list of last events for the given deviceuid
Make an API call to the API.
Initiate a new request.
Get status of a specific request.
Closes the socket.
Returns the lower and upper bounds of the coordinate space of this region.
Load a bytearray from a page and return it as a string.
Check the return value of a function call.
Load application.
Runs the gunicorn server.
Converts the given value to a native Python value.
Crops the image and saves it to disk.
Process the image and save it to disk.
Invert image and save as bytesio.
Open the file if necessary.
Processes the placeholder image and saves it to the storage.
Update the ppoi field when saving.
Update the ppoi_field attribute of the file instance.
Returns the default formfield for this field.
Returns the value of the field converted to a string.
Auto - discovers all the versatileimagefield_registry modules.
Unregisters a previously registered sizer.
Unregisters a previously registered filter.
Returns the url for this image.
Builds the image filters and sizers.
Returns the root folder of the filtered image field.
Returns the path to the root folder of the image field.
Returns the path to the filtered sized root folder.
Delete files matching regex from storage.
Return preprocessed gif image and kwargs.
Preprocess JPEG.
Retrieve an image from the storage backend.
Save an image to disk.
Return the ppoi array as a string.
Get the image and process it and save it.
Render the widget and return the rendered string.
Build the context dictionary for the input widget.
Build the attributes for this element.
Returns path_to_image with resized filename.
Returns path_to_image filtered by filename_key.
Validate a list of size keys for a vertical image field.
Get url from image instance based on image key.
Returns the rendition key set for the specified key.
Formats a single instruction for printing.
Formats the bytecode of a function.
Decodes the bytecode into a generator of instructions.
Decode a module into a sequence of fragments.
Establish a connection to the server.
Read and parse AMI results.
Parse the AGI code check result.
Check the response for the given AGI code.
Reset all instances to their default values.
Returns a list of the names of all the instances in this group.
Run distrosetup and return metadata dict.
Get the primary keys of a model.
Deserialize value into a related model instance.
Get an existing related instance from the database.
Overrides schemameta. get_declared_fields to apply the model converter.
Load data into the model schema.
Split data into kwargs and association attributes.
List all available snapshots.
Restore the slave environment.
Shuffle indexes at end of each epoch.
Apply Textacy s cleaner.
Apply a function to a list of data in parallel.
Processes the given text.
Runs the text processing pipeline in parallel.
Generate statistics about document lengths.
Return the word counts as a pandas dataframe.
Map a param_type to a list of types.
Parse the interfaces and return a dictionary of parsed interfaces.
The inverse of the matrix.
Calls dedup_item and _write_item with the result of calling on_
Returns a copy of the current instance
Return a copy of the set.
Structural equality of two mappings.
Returns a generator that inverts the keys and values of an iterable.
Remove all data from the object.
Move the node to the end of the list.
Write text to a tempfile and return the filename.
Merge args into config.
Load all address books with the given names.
Create a new contact sub - command.
Autocomplete birthdays from a list of vcards
Search for phone numbers in a list of vcards.
List contacts.
Modify a vCard.
Remove a sub - command from a vCard.
Calls the editor on the source file of the selected vcard.
Merge contacts sub - command.
Returns the action associated with the given alias.
Create a new contact.
Create a new addressbook from a file.
Create a Contact instance from user input.
Create a new Contact instance from an existing contact and a user input string.
Get a part of the names attribute of the vCard.
Adds a list of categories to the vCard.
Parse the type value.
Recursively convert a list into a string.
Parse a string into a datetime object.
Compare two UIDs and return the sum.
Search for all contacts that match the query.
Search for contacts by full name.
Yields all UIDs that start with query.
Search the registry for the given query.
Returns a dict of short UIDs keyed on their UID numbers.
Returns the short UID for a given UID.
Finds all vCard files in the path.
Loads vCards from the local repository.
Returns the abook with the given name.
Return a dict of architectures available to the system.
Return a dict of architectures available to the system.
Guess the type of the kwargs.
Return a query that replaces the current query.
Returns the first object in the queryset.
Delete rows from the result set.
Emulate prefix - based lua.
Estimate the amount of work to be done in the given index with the given prefix.
Count the number of items that pass the filter.
Return a connection to the database.
Return the full text representation of the given value.
Add an object to the session.
Returns the value of the given pk.
Writes the data to a Redis key using the Lua protocol.
Saves the object to the database.
Deletes the object from the database.
Get instances by their primary keys.
Open a shared memory handle.
Puts a result back into the result queue.
Add work items to the call queue.
Ensures that the executor thread is running.
Start the server.
Duplicate a file descriptor.
Wait for num_ pending work items to complete.
Prepares the process from the given data.
Close all file descriptors except keep_fds.
Terminate process if psutil fails.
Terminate a process and all its children.
Returns a list of exitcodes that have been terminated as a worker.
Format exitcodes as a single string.
Spawn the process if it is not already running.
Returns a processor for printing events to the output.
Split a string into a list of lists.
Returns a list of tuples where the first item is the frame number and the second item is
Run a list of hooks and return a boolean value.
Forget about the current stack frame.
Returns the value of the given arg or None if the arg can not be evaluated as an integer
Processes commands and returns the exit code.
Add a command file to the queue.
Returns the next token from the given string starting at the given position.
Print error message and raise eoferror.
Read a command from the terminal.
Close all open streams.
Disassemble bytecode and return as string.
Count the number of frames in frame.
Returns the name of the function calling the given frame.
Prints a stack trace of the proc_obj.
Looks up a subcmd by its prefix.
Display the short help for the specified subcmd.
Add a subcmd_cb object to the internal cmdlist.
Run a sub - command.
Show all commands of a specific category.
Run lineinfo command.
Finds the frame where the debugger is being debugged.
Returns the default value of the arg or the arg itself if arg is None.
Run get_onoff and set_settings.
Sets the value of the setting with the specified value.
Prints the value of show_onoff for obj. name.
Prints the value of the setting named by obj. name.
Prints the value of a run setting.
Check if the given line is a def statement.
Check if the given line is a class definition.
Quit threaded program.
Returns a boolean_ if the environment variable is not set or the environment variable is not set.
Check if the color r g b are dark.
Return the signature of the given frame.
Returns a list of all displays
Returns a string representation of the display for the given frame.
Read a single message from the socket
Call Trepan s debug API.
Runs one or more debugging functions.
Pretty print a simple array.
Look up the signal name associated with a numerical value.
Looks up a signal by its name.
Given a name number return the canonical form of the signature.
Set signal handler for signal signum.
Check and adjust all registered signal handlers.
Print information about a signal.
The action method.
Set the print method of a signame.
This method is called when SIGTERM is received.
Extract module name from filename
Search for a file in a list of directories.
Search for a file in a list of directories.
Returns a list of filenames for all py files for the specified caller.
Write a message to the output.
Run the command.
Sort and columnize a list of commands
Close the connection to the serial port.
Write a message to the socket
Attempt to complete an identifier using mcomplete.
Queues a string for execution and processes it.
Add frames to ignore
Returns the canonical path for the given filename.
Return the filename of the main Python file.
Returns True if the tracer has been started.
Determine if we should stop here based on the event.
Set the next frame in the stack.
Prints a stack trace for the given function f.
Remove a breakpoint.
Delete a breakpoint by its number.
Disable all breakpoints.
Disable a breakpoint by its number.
Delete all breakpoints for a given file and line number.
Open a file for reading.
Read a line of text from the terminal.
Prompt user for confirmation.
Submit a query to the pool and return a future.
Restore the original login session.
Loads the module and returns the value of the attribute.
Iterate over all the documents in a collection.
Transcodes a CSV file to a stream.
Normalization of data stream.
Convert a date string to a timestamp.
Detect the encoding of a file.
Stream lines of a file as JSON objects.
Strips whitespace from the beginning of a file and encodes each line to UTF - 8.
Open a CSV file in Python 2 or Python 3.
Read CSV file.
Entry point for the transcode script.
Saves the given token to the token file.
Make a request to the luminoso API
Perform a DELETE request.
Get the root url of a URL.
Saves a token to a file.
Make a request to the ligoso API and return the json response
Perform a POST request for the specified path with the given data.
Get the documentation for this client.
Perform a GET request and return the response as text.
Print result as CSV.
Read params from json file.
Simplify a docstring.
Create a new project from a list of documents.
Upload docs to Google Cloud Storage.
Upload a stream of documents to a project
Upload a file to a server.
Entry point for the script.
Create a LeadinosoToken object from user credentials.
Login to Sailthru.
POST login page.
Fetches data for each period of the year.
Prepare view for rendering.
Initialize the handler.
Renders the view and writes it to the client.
Called when a change is received from the browser.
Update menus for current page.
Return a list of default handlers for this site.
Called when a change message is received from the browser.
Called when the DOM has been modified.
Create the underlying widget.
Initializes the widget based on the current declaration.
Destroy the widget and its parent if it exists.
When a new child widget is added add it to the widget list.
Remove the widget associated with this child.
Iterator over all child widgets of this widget.
Sets the attribute name to value.
Updates the proxy with the change.
Notify the root object that a change has been made.
Returns a list of nodes that match the query.
Initializes the widget for this component.
Set the source text.
observe the mode of the tree.
Called when a block is observed in the tree.
observe the children of this node.
Returns the contents of the specified file.
Print msg to stderr and exit with exit_code.
Prints msg to stderr and exits.
Get a product by name.
Create a new session.
Reset the session store and return the response.
Returns a list of stores that match the search term.
Set the delivery system for a given store.
Returns a menu object for the given store.
Add item to basket.
Add a pizza to the basket.
Add side to basket.
Remove an item from the basket.
Set the payment method for this payment.
Process payment.
Performs a GET request of the specified path in Device Cloud
POST request.
Calls an API method.
Append an item to the menu.
Add a new exit item to the list.
Draw the menu.
Process the user input.
Selects the currently selected item
Create a curses menu from a dict of data.
Convert a string column to a datetime.
Convert datetime to string.
Apply a mathematical operation to a column of a DataFrame.
Cumulative sum a pandas DataFrame.
Remove oldest entries from the cachedir.
Add an offset to a date object.
Returns a list of learning updates.
Returns a list of training parameters.
Optimize the parameters and update the free parameters.
Return the first sensor function and its gradient.
Prepare for MLP.
Computes the cost function for the given input.
Apply a function to all elements of the dataset.
Vectorizes the target data.
Prints the training valid and test results to the log.
Train the model.
Sample the input by the given number of steps.
Computes the alignments between the previous state and the next state.
Compute the context vector for the given inputs.
Concatenates vars along the given axis.
Pad dataset with zeros along the specified side with the specified length.
Core function for the RMSProp problem.
End the timer and print the ratio.
Run the cost function on the given data.
Runs the algorithm and compares the results.
Build the loop variables for the computation graph.
Run a single step of the optimization loop.
Compute the momentum core.
Evaluate iftrain.
Skip a number of mini - batches and reset the epoch count.
Load model parameters from a file.
Train the network.
Run a single training step.
Runs a single valid step.
Writes a report to stdout.
Returns the current data set based on data_split.
Apply func to this neuralvariable and return a neuralvariable.
Prints a report to the logger.
Returns a deepy. tensor. var object.
Create neuralvariable variables from data.
Create a shared theano. theano shared variable for the given value.
Stack encoder layers on top of stack.
Add stack of decoders to the decoder stack.
Encodes the input tensor using the encoding layer.
Run the decoder on the input data.
Create a 2D Gaussian with the given sigma.
Registers a new layer with the model.
Monitor layer outputs.
Returns a list of all parameters and free parameters.
Sets up the input variables and test output.
Call the computation function with the given arguments.
Save the model parameters to a file.
Load parameters from a file.
Prints a report of the problem.
Registers new updates.
Register training updates.
Add one or more monitors to the model.
Compute the L2 norm of a list of tensors.
Dumps one element of a sequence to a file object.
Loads pickled elements from a file - like object.
Loads model parameters from file.
Decode a state parameter from a base64 encoded string.
Parse OAuth 2. 0 credentials.
Filter the request elements based on the request_type.
Respond to the user being logged in.
Normalize a dict so that the keys are of length num_.
Convert a list of key - value pairs to a dictionary.
Try to parse a JSON string into a Python dictionary.
Resolve provider class.
Create a new cookie.
Save session data to cookie.
Get the data from the cookie.
Dictionary of data.
Generate a signature for the request.
Serialize the value and sign it.
True if the token is valid False otherwise.
Returns a boolean indicating whether this token will expire in the specified number of seconds.
Return a serialized string representation of this instance.
Return True if content is a binary string.
Content of the response.
Override access to get user information.
Logs the user in.
Return the key to use for the session.
Sets the value for the given key in the session.
Generate a CSRF token based on a secret.
Log a message to the appropriate logger.
Return True if status is within a given category.
Split a URL into a base URL and a dictionary of query parameters.
Add CORS headers to the response.
Return a dictionary of kwarg values for the app instance.
Flexibly convert an object into a string.
Ensure inst is iterable.
Return True if a is close to b.
Deserialize an audiosegment object from a string.
Create an audiosegment object from a file.
Create an audiosegment from a numpy array.
Reduce this audio segment by concatenating the others.
Returns a pickled version of the object.
Choose the best offset_front_id from the candidates.
Find the offset_front_id after the onset_sample_idx.
Get the offset_front_id after this onset front.
Match an onset front id to an onset front id.
Given a list of onset_fronts and a list of offset_fronts return the
Return the ID of the element at index in front.
Given a list of onset_fronts iterate over the onset_fronts yielding
Returns a list of tuples where the first element is the fidx the second element is the
Remove any overlaps in fronts and segmentation_mask.
Remove fronts that are too small.
Merge adjacent segments into a single segment mask.
Split a mask into separate masks based on a threshold.
Downsample one or the other from the mask to the stft.
ASA - FFT masking task.
Bandpass filter using butterworth
Apply a low - pass filter to the data.
Convert a list of rows to a TF input matrix and outcomes one - hot - encoding.
Expands and standardizes the dataset.
Test if two strings are equal ignoring order.
Loads the audit confusion matrices from a file.
Convert a list of rows to a tf. input matrix and outcomes array.
Update pypi_api_url from config files.
Autodetects requirements files.
Handles the given error code.
Return information about the LSL object.
Open the stream for reading.
Create a child element.
Find the next sibling of the element.
Find the previous sibling of the element.
Set the name of the lsl element.
Set the value of the lsl element.
Append a new child to the lxml Element.
Prepend a child to the start of this lsl element.
Append a copy of an existing element to the end of this element.
Prepend a copy of an element to the start of this element.
Remove the specified child from this lsl element.
List of streaminfo objects associated with the resolver.
Pairs a string with a list of tokens.
Autocomplete n - grams in a query.
Computes the edge n - grams of the given token.
Iterate through a pipe of processors.
Equivalent to running the given function on every item in the given iterable but in unordered chunks
Given a word make a fuzzy version of it.
Fuzzy spelling.
Fuzzy index a word.
Extend results by extrapolation relation
Prints the docstrings for the available commands.
Show information about redis databases.
Get or set a database key.
Geohash a point
Index a document.
Get the best scores for a word.
Sends the given Request object and returns its response.
Map a list of requests into a list of responses.
Extract a set of bits from an array of data.
Reinterptet a HArray to a fixed - width bit array
Convert a slicevals object to a slice object.
Find files in a directory that match a pattern.
Check whether any element of iterable satisfies sigorval.
Apply a function to each item of a list.
Return the ceiling of x.
Check if num is a power of 2.
Add a case statement to the QuantumFlow.
Add statements to the default chain.
Register the interface and unit interfaces for the given object.
Called before simulating a synthesis unit.
Call vcdwriter. logchange.
Generate code to call a process method.
Autoadd agents to a unit.
Return the associated DCK for this node and its parent.
Yields the elements of iterable that do not contain any duplicate elements generated by fn.
Group a collection by a function.
Flatten an arbitrarily nested iterable.
Merges a nested if statement from another if statement.
Removes signals that are not connected to any other signal in the network.
Check if a process is a simple if statement.
Try to merge two processes.
Reduce a list of processes into a single process.
Memorizes a request for writing.
Given a list of HDL statements return the name of the output that should be processed and mark
Cut off drivers of dstsignal from statements.
Synthesize this entity for the targetplatform.
Returns the maximum stmmid for any given stm.
Returns the maximum statement ID that can be used for the given process.
Writes a string to the simulation.
opposite of _masterdir.
Reloads the declarations of the interface.
Returns a list of signal objects for this interface.
Returns the physical name of the bounded entity port.
Returns the length of the bit field.
Get sensitivity level for an operation.
Convert the bitstring representation of sigorval to totype.
Reinterpret the bits in sigorval to the hstructt object.
Return the number of full words between start and end.
Split on words grouped by word index.
Yield packed words from data.
Cleans up the signal meta data for the receiver and all its stms.
Given a list of statements and a list of outputs find the enclosed statements for those outputs.
Depth - first discovery of the casual sensitivity.
Returns the RTL context string for this tokenization.
Called when a reduce operation is performed.
Memorizes this node with the other node.
Checks if stmsa stmsb is a mergable statement list.
Merge a list of statements into a single list of statements.
Merge two lists of statements.
Try to reduce a list of statements.
Callback when the parent event of this state changes.
Sets the parent statement for this statement.
Given a list of statements and a list of statements register the statements in the target list.
Destroy this statement.
Clean up references to subunits and interfaces.
Flatten a union struct array or union.
Convert to a different signed type.
Add a process to the set of simsensprocs.
Simulate condition.
Import a connection between two subsim units.
Convert a value to a vector of specified width.
Enhanced multiprocessing. Process.
Evaluate a signal parameter.
Set the value of the field.
Convert an intf - > hstruct mapping into a hstruct.
Finalize memory management.
Returns a tuple of the indexed signal base and a list of index operands.
Return the string representation of the given Python value.
Return the auto - casted version of sigorval to totype.
Reinterprets the given signature or value to the given type.
Recursively walk the parameters of an interface and its subinterfaces.
Return a list of connections from srcpacked to dstinterface.
Pack an interface into a single signed integer.
Run the tortl implementations for this unit.
Register an interface implementation
try to reduce sig by val if sig is fullvld return sig else return val
Reduce the signal by performing the XOR reduction on the value.
Return a namescope for the baseclass.
Logic for serializationdecision.
Get the negative part of a binary expression.
Compute the bitstring of a given bitwidth and sign.
Returns the constant name for the given value.
Set self. parentstm to none if self. dst is the same as sig.
Load from array.
Load from hstruct.
Load data from a HDF5 type.
Return the width of the array item.
Flatten a structure and union into a sequence of tuples.
Signs a value so that it fits in width.
Get the indent string for the specified indent number.
Check name availability of object property.
Registers a parameter with this scope.
Updates all the parameters of this scope from those of the otherobj.
Register a unit under this unit name.
Add an interface to the module.
Register an array of items under the given name.
Returns a single driver object.
Evaluate the expression and store the result in self. result.
Create a new signal with the specified operands and res signal.
Returns a copy of the context with an additional indentation level.
Try to connect to the destination if not already connected.
Attempt to connect the clk to all the units in obj.
Propagate CLKRSTN to all other units.
Propagate clk and rst to all units in obj.
Attempts to propagate the RSTN to all RST units.
Propagate the RST gate onto the RST basis.
Iterate over the bits of a signal.
Evaluate exclude.
Return whether to serialize and priv once for a parentunit.
Serialize the parentunit as a sequence of key - value tuples.
Return the full name of the object including the object itself.
Make associations for all objects in the collection.
Convert a unit to a SimModel instance.
Recursively reconnects the signals of the given synthesisedunitorintf to the models
Wrapper for _simunitvcd or _simunitvcd.
Initialization code for ontwritecallback.
Connect this signal to another signal.
Register an intermediate signal.
Connect this driver to an intermediate signal.
Get the intermediate signature of the instruction.
Returns True if sig is evdependent on process.
Add a new process to the scheduler.
Adds the given process to the list of processes to run.
Schedules a combupdatedoneev process for the agent.
Schedules processes to run if they are not already running.
Returns the conflict resolving strategy for the given newvalue.
Run all combinator processes.
Runs all registered seqprocs in the order they were registered.
Simulate the values to apply.
Return the value of the given signature.
Write a value to the signal.
Add a process to the scheduler.
Simulate the unit until the given time.
Convert ternary operators to if - else statements.
Calculates the distance between two hashes.
Calculate the average hash of an image.
Computes the distance between two images.
Set up a vizio device.
Update the state of the power sensor.
Mute the volume.
Increases the volume level.
Decreases the volume level.
Set the volume level.
Resets the state of the piece piece generator.
Returns the piece at the given square.
Removes a piece at the given square.
Sets a piece at the given square.
Checks if the king was a suicide or a check by dropping the pawn.
True if the king was suicide.
Checks if the game is over.
Checks if the move is a checkmate move.
True if this is a fourfold repetition.
Pops a move from the stack.
Returns a list of string representations of the board.
Move the move to the given usi and return the move.
Calculates the Zobrist hash of the board.
Returns the piece symbol.
Create a Piece instance from a symbol.
Returns the USI string for the move.
Create a Piece from a USI string.
Yields parsed commits from the given data.
Parse a commit line.
Execute from command line with config and argv.
Generate a yaml string.
Cast the value to the type specified by self. cast_as.
Returns a list of dates between two dates.
Parse a date string.
Load currency data from file.
Set missing dates to none
Returns the exchange rate for the currency at the given date.
Animate a series of text frames.
Read a record from the file.
Write a record to the file.
Map a range of words.
Returns the record comments as a string.
Close file and free memory.
Return the position of the next genomic position.
Close the file and all associated segments.
Load the data from the file.
Visit a call node.
Visit a binary operation node.
Implement dict walker.
Visit a joinedstr node.
Check if the keyword is in the whitelist.
Handle except handler.
Detects the logging level of a given node.
Get the name of the except handler for this node.
Returns the id attribute of the given object.
Checks if the given node is a bare exception.
Check if the current logging level is equal to or lower than the logging level.
Deletes the file associated with the given filefield_name of the given instance if the file
Returns the rendered content of the PDF.
Render the view to a response.
Quote a string for use in an HTTP URL.
Configures the options for the specified module.
Convert a string to an underscore - separated string
Automatically index the collection.
Parses the given file and returns a list of pricemodels.
Loads the content of the specified file into a list.
Parse price model line
Translates in_symbol to the corresponding symbol.
Loads all available symbol maps
Returns the session object.
Import price data from CSV file.
Show latest price for security symbol
Download price data.
Prune security symbol or all security symbols
Get the default price database session.
Add a new price map.
List all price maps.
Get the symbolmap object for the given symbol ID.
Reads lines from a CSV file.
Maps dal. price entity to pricemodel.
Map a price model to a price entity.
Reads the configuration file
Returns the absolute path to the config template.
Copy user config file to user s home directory
Returns the absolute path to the config file.
Reads the contents of the file in memory and returns it.
Set the value of a config option.
Get the value of a config option.
Saves the configuration file to disk.
Parses the symbol and returns the namespace and mnemonic.
Add a price entity.
Download price for symbol currency agent
Returns session.
Get all prices for a given date and currency.
Get latest price for namespace on on_date
Remove all security items with the same symbol
Remove all bids and asks of a securitysymbol
Download price for symbol from agent.
Returns list of security objects
Return a partial version of the state.
Update all child calls.
Depth - first descend through the tree.
Test whether the student has chosen the correct option.
Return a copy of the dictionary with only defined items.
Get an extension attribute for the given parser and tree.
Test whether there is a context loop.
Check if the solution parts of the state have contexts that match the specified names.
Check whether a student or solution part exists in the state.
Check that the student and solution parts have the given index.
Compute the true anomaly.
Initialize LDAP3 Login Manager.
Add a new LDAP server to the LDAP database.
Decontextualise a connection from the context.
Teardown the context.
Authenticates the user with the given credentials.
Authenticate using direct bind.
Search LDAP for a user s groups.
Get user info by DN.
Get user info for a given username.
Search LDAP for an object.
Returns a connection to the LDAP server.
Make a connection to the database.
Make a LDAP connection.
Destroy a connection.
Search for documents.
search the database
search for all artifacts in the specified collection that end in str_.
speak the database to the user.
Announce to the user.
get the secrets from the environment and update the settings.
update the headers of this message.
require secrets for this client
download a url to a local file.
stream a file from a url.
update token in headers.
Get or create a folder.
Read the message from the response.
get a bucket for this bucket_name
Reads the client secrets file and updates self. base.
Initializes the native appauth client
Loads the secrets from the config file
Lists the logs of the service.
list all the log files that end with the string.
create a folder for an endpoint.
Initialize transfer client
search for all matching containers
Show status of client secrets.
add a secret to the client
remove a variable from the client secrets file.
Activate a client backend.
Delete client secret for specified backend.
Update the base for the image.
Generate the HTTP Basic Auth header.
Generate HMAC - SHA256 signature.
Generate a header signature.
make a DELETE request.
make a HEAD request to the url.
Paginate a GET request.
return True if SSL verification is enabled False otherwise.
remove an image from the registry
Read the version file and return a lookup dict.
Returns a list of requirements based on the given lookup.
get_singularity_version will try to get the singularity version from the environment
check if installed software is available.
Returns the absolute path to the directory where this package is installed.
Returns the path to the sregistry thumbnail.
Run a command and return its output as a dictionary.
Get image metadata from dbx file.
update user secrets using dropbox api
print the output to a file or stdout
Destroys a registry.
List logs of a container.
Returns a list of collections
get secrets from environment and update the settings.
Announce a command to an IPython server
get all manifests for a repository.
get the manifest for a particular version of a repository.
Get the cache directory for downloads.
extract the environment variables from the config file.
get and update base and artifacts and job settings
Update the token in the request headers.
Get the metadata for the job.
Reads client_secrets file and returns settings.
get and update a setting
Update a setting on the backend.
Generate an authorization token.
list all the builders for a project or zone
load templates by name
get the ip address of a given instance.
Run the build.
list_containers - List all the containers in the bucket.
search all the containers in the bucket
List files in S3.
Command line interface for sregistry.
initialize the database for the registry.
get_build_template will return the build template for this project.
list all available endpoints.
list all files for an endpoint.
share an image with a dropbox.
Reads the client secrets file.
Build the service objects for the Google Storage and Compute.
Delete an object from a bucket.
delete a file or folder.
destroy a compute instance.
Returns a dictionary of subparsers for the given parser.
Generates a string with the specified delim and length.
Returns the full path to a temporary directory.
extract a tar archive to a folder.
extract a tar archive to a folder.
Calculate the hash of a file.
Open a file and return its content.
Read a JSON file.
clean_up a file or list of files.
push an image to S3
Returns the collection with the given name creating it if necessary.
Get a registered collection.
Get a container by name and collection_id.
list all images in the registry
Inspect a container.
rename an image
move an image to a new location
rm - rf image_name
Parse a header from a recipe.
Find a single recipe for a given file.
create a tarball of package_files and return the hash of the package.
Update the metadata of a blob.
Formats a container name for use as a container name.
Return whether or not the terminal supports coloring output or error messages.
Return whether or not to emit an error.
Write a message to a stream.
Prints a formatted table of rows.
push an image to Globus
get a template by name.
get the manifest for a given tag for a given repository
get_build_template will return the path to the build template for the specified manager. If
read the client secrets from disk and update self. secrets.
Context manager that handles S3 specific errors.
Factory method for creating a new proxy.
Get the gravatar url for a user.
Get a gravatar url for the email.
Check if the email has a gravatar.
Get the gravatar profile url for a given email address.
Yields m n u l blocks of chimera data.
Returns a graph representing the blocks in the chimera_block_quotient format.
Enumerate all the mesomers with the given SMILES.
Enumerate molecules.
Apply transform to molecule.
Canonicalize molecule.
Validate a SMILES string.
Standardize SMILES.
Enumerate all tautomers from a string of SMILES.
Canonicalize a Tautomer SMILES string.
Returns the parent tautomer of the given molecule.
Returns the largest fragment parent of molecule.
Transform molecule to stereo parent molecule.
Return a copy of mol with all isotopes set to num_.
Return the uncharged parent of a molecule.
Entry point for command line script molvs.
Remove a molecule from the structure.
Choose the best match for a molecule.
Integrates the given u0 v0 mu to u0 tend dt0 atol
Get mems of org
Get teams of org in json format
List all repos in the organization.
Returns the total number of contributors for a repository.
Returns the number of open pull requests and the number of closed pull requests.
Get the number of closed issues for a repository.
Returns the readme for the repository.
Get license for repository.
Get the number of commits for a repository.
Write the dict_to_write as a JSON file for the specified organization for the specified date
Writes the totals to a file.
Writes the list of languages to a file.
Check if directory exists. If not create it.
Remove date from CSV file.
Nation s GV organizations.
Create an enterprise Github session.
Check api_required and sleep_time for API reset.
Connect to GitHub.
Query repositories within a GitHub organization.
Get an organization from Github.
Writes the stargazers to a file.
Create a project object from a Gitlab repository object.
Convert license to license object.
Get all the information about repositories.
Get all releases for a repository.
Get referrers for a repository.
Get data from Github API.
Write a JSON file with the contents of the dict_to_write.
Writes the data to the specified files.
Check for data redundantness.
Writes data to file.
Write referrers to a file.
Yield DMEcodeRecords from a JSON file.
Yield DMEcode records from the given URL.
Process a file URL or key.
Login to Github.
Get mems of org
Write a string to a file.
Establish a connection to a BB instance.
Connect to GitLab and return Gitlab session.
Query projects by repositories.
Compute labor hours for a person given a cocomo location.
Prune dict where the value is None or if the value is a string recursively.
Read a GQL query from a file.
countdown and reset after a specified time.
Countdown method.
Load data from a JSON file.
Save data to file.
Create a TFS connection.
Create a TFS project analysis client.
Create a TFS core client.
Create a TFS Git client.
Create a TTS TensorBoard client.
Get a list of git repositories for a project in a collection.
Get TFVC branches for a project.
Get the number of commits for a given year.
Calculates the total commits for each week.
Write the sorted commits to a file.
Log timing information.
Log a histogram stat.
Roll up metrics and histograms.
Convert the DB value to the enum value.
Converts the given value to a python value.
Prep the value for the field.
Resolve a path to a set of facts or topics.
Given a list of usls and a list of tables return a dictionary where the keys are the
Return the mean value.
Increments counter by value
Return the mean rate.
Mark the value with the given value.
Serialize and send a metric.
Serialize the metric as a list of strings.
Format a metric name value and m_type into a string.
Add a metric string to the batch and send it to the remote host.
Overrides ConfigParser. get to raise an exception on failure.
Ensure that data is JSON - safe.
Returns the value of the specified option if it exists or sets it if it doesn t.
Returns a ledger code - > GUID map for the given list of ledger codes
Returns a dictionary of choices and the current division.
Maps the exact invoice numbers to the corresponding foreign invoice numbers.
View decorator.
Provide a form view.
View decorator that adds HTTP methods to the view.
View decorator that registers a view as an API view.
Introduces a generic API view to the given injector.
Provide a modelviewset decorator.
Create a UNIX file descriptor transport from a file descriptor.
Reads data from the socket and passes it on to the protocol.
Explicitly close the connection.
Add a request to the watchlist.
Remove an alias from the watchlist.
Setup inotify_add_watch.
Setup the inotify library.
Read the next event from the stream.
Triggers the touch event.
Subtract the given number from the interval.
Mark the timer as failed.
Close all connections.
Connect to an ElasticSearch Nsqd.
Perform a lookupd query.
Set the maximum number of RDY in flight.
Writes a warning message to the logger.
Adds a callback to the event named name.
Remove a previously registered listener
Triggers all registered listeners of the given name.
Publish a message to a topic.
Set the feature transform mode and degree.
Returns a prediction for the input data.
Remove unpaired FASTQ files if clear == str_ and the number of expected F
Reads a depth file and returns a dictionary mapping reference sequence to number of reads aligned.
Set self. _template_path.
Sets the main channel names for this lane.
Render a Jinja2 template.
Return the rendered template as a string.
Add a sink to the main forks.
Update the attributes of the current instance.
Set secondary inputs for the channel.
Parses an assembly file into SeqRecords.
Calculates the number of at - gc and n - gc properties for the given sequence and the
Returns the total length of the assembly
Write the assembly to a file.
Write the report to a file.
Remove all inner forks from text.
Run insanity checks on a pipeline string.
Find the lane in pipeline_list where the fork source is located.
Returns a list of lane names.
Returns a list of linear connections from plist to lane.
Adds unique identifiers to pipeline string.
Removes the unique identifiers from the pipeline links.
Check that the required files exist.
Return a mapping from header name to position.
Takes a string and returns the hms value.
Return the size coverter of a string.
Extracts pipeline processes from the log file.
Clears all information about the process.
Reads the log file and updates the process status dictionary.
Retrieve log lines from a file.
Assemble warnings for resource size and resource coverter.
Updates the retry counters for the parsers
Display the overview window.
Up or down.
Move left or right.
Returns the last n lines of the log file.
Reads the static information of the pipeline
Reads the DAG file and converts it to a dictionary.
Compute the hash of the run.
Extract nextflow filepath from log file.
Main function for this module.
Brew innuendo.
List available recipes.
Validate the pipeline string.
Recursively builds the pipeline for the specified task.
Recursively builds the pipeline for the specified task.
Runs the auto pipeline for the specified tasks.
Create a string representation of a component.
Writes a report to a file.
Parses the log file and writes the results to a file
Fix contig names in an asseembly assembly file.
Remove duplicate reads from fastq files.
Parses a list of files.
Parses the file fl for coverage identity and accession.
Extract the contig ID from a contig string
Writes the plot and table data to a JSON file
Parses the contigs in the assembly file.
Summarize the contigs and their sizes
Get the xbar labels for a window of the contigs
Percentage of characters in s that are not in length.
Calculates the number of GCs in the specified window.
Main function for SkeSa.
Writes a JSON report that summarizes the quality scores.
Parse the bowtie log file.
Parse process name.
Adds a dependency to the list of processes
Searches the tree backwards starting at the root for the given template
Build header.
Build footer.
Sets the main process and its raw inputs.
Set secondary channels
Sets the compiler channels for status and report.
Return a string with the pipeline manifest.
Render all the configurations.
Writes a DAG to a file.
Write the configurations to a file.
Exports the parameters of all the processes in the pool to a JSON file.
Write directives to stdout in JSON format.
Builds the NPF file.
Set the kmers based on the kmer_opt.
Generate a report id based on the metadata in the report file.
Reads the trace file and updates the internal state.
Update log_sizestamp and trace_retry attributes.
Sends a live report.
Initialize live reports.
Closes the connection to the remote host.
Convert adapter fasta file to string.
Main function of mash.
Print a message using the specified color scheme.
Collects all processes that are specified in the command line arguments.
Return the min and max of a qual_str.
Filters the assembly file to only include contigs with coverage above minimum_coverage
Get assembly size and contig size.
Main function for filter_assembly.
Convert name to camel case.
Collect a dictionary mapping component class names to their respective component classes.
Main function for json_report.
Map self. w to self. data.
Apply a median filter to the data.
Gaussian Kernel Density Estimation
Compute the SSM value of x.
Compute the NetCDF - like NFW profile.
Gaussian filter.
Compute the Euclidean distance between all the points in x.
Circular shift a 2D array to the left.
embedded_space embeds x into num_ subspaces
Helper function to plot formatting.
Plots the boundaries of the estimated model.
Plot mir_eval labels.
Given a feature vector f and a list bound_idxs return a list of feature segments.
Computes the 2D multi - dimensional discrete multi - dimensional discrete
Fit a scatter plot to a set of data.
Reads the reference times and labels for the specified annotator.
Find an estimation for a set of parameters.
Returns a list of algorithm IDs for all boundary algorithms.
Get the configuration for the MSM algorithms.
Returns a list of DatasetFile structs for audio files in the specified directory.
Reads jams. txt file and returns hier_bounds hier_labels levels.
Returns the duration in seconds of the feature file.
Write mirex times and labels to a file.
Get the dataset file for the audio file.
Align beat segmentation with a song.
Estimate the times and frames of this track.
Read annotations from the jams annotation file.
Compute the beatsync features.
Returns a list of all parameter names that start with the string str_.
Computes the times at which the frames need to be synced.
The frame times of the features in this track.
Features of the audio file.
Preprocess the feature string.
Post - processes the estimated indices and labels.
Entry point for the script.
Print the mean of the results.
Compute the information gain.
Process a GATK2 track file struct.
Get the results file name.
Compute all features for all audio files in the MSM file struct.
Compute all features in a dataset.
Gaussian cost function.
Log - normalize a float.
Minimum and maximum normalize a DataFrame.
Return an array of time frames for dur and anal.
Remove empty segments from times and labels.
Sonify audio by clicks.
Synchronize old_labels with new_bound_idxs
Process segmentation level.
Align the end of two hierarchies.
Returns the distance matrix for the given index.
Estimate the k - knee.
Returns the data that is clustered according to the given label index.
Run k - means query.
Computes the Bayesian Information Criteria for the given parameters.
Returns the magnitude of x.
Convert a JSON file to a numpy array of floats.
Convert a JSON bounds file to a numpy array
Convert a JSON file to a numpy array of labels.
Read a beats. json file and return a numpy array of beats
Computes the magnitude - shifted FFT of x.
Compute labels.
Filter an activation matrix by median filter
Returns the boundary module for the given boundaries_id.
Returns the module for the given labels_id.
Run a hierarchical segmenter.
Run a flat segmenter.
Entry point for the translation script.
Runs the given translator on a multiprocessing worker threadpool and sets the output as a task
Spool an iterable into chunks.
Sources data from inputstream to target.
Returns a translation table for the specified language.
Print the translation table for the specified language.
Remove nodes and edges from a network.
Write a Network object to a Pandas HDF5 file.
Reads a network from a pandas hdf5 file.
Processes a node element by removing uninteresting tags.
Make a query to the OSM.
Build a node query.
Checks if the given value is a valid regular expression.
Compares a value with an expectation.
Compare the expression with the given value.
Trigger methods on instance.
Get a matcher by name.
Initialize a matcher by name.
Set the request body.
Set the response body as JSON.
Sets the key to the given value.
Append functions or methods to the target list.
Triggers all request methods on the given instance.
Sets the headers for the current request.
Add a matcher for headers that match the given string.
Ensures that the specified headers are present in the message.
Set the params for the current request.
Set the body of the request.
Set the JSON request body.
Set XML request body.
Writes the content of the specified file to the response body
Set persist status.
Set the error message.
Reply to the mock.
Match a request.
Set the mock engine.
Create a mock for this engine.
Remove mock from self. mocks
Activate the mock engine.
Disable the mock engine.
Check if we should use the network filter.
Match the given request against all registered mocks.
Return a copy of this request.
Context manager that activates and deactivates the current engine.
Add interceptors to the chain.
Remove interceptor by name.
Get the value of a Django setting.
Returns the decrypted column sql and parameters.
Store the original value of the field in the model instance.
Get the encryption placeholder for this field.
Get a decrypted column from the database.
Get the encryption placeholder for the setting.
Computes the base regression.
Inverse covariance matrix.
Recurse over all non - terminals in the tree.
Calculates the averages of all branches and non - terminals in the tree.
The variance explained by the tips in the tree.
Structural clockwise regression.
Set the target temperature.
Calculate the branch count for each branch.
Cost function.
Attaches the merger cost to all clades in the tree.
Normalize a profile.
Set gtr.
Set the gtr object to use.
Set the length of the sequence
Attaches sequences to all nodes.
Prepare the tree for further processing.
Sets up and calculates distances to the root of the tree.
Calculate the distance to root for all non - terminals in the tree.
Return the branch mutation matrix for the given node.
Returns the expanded sequence of the given node.
Get the state of a node.
Returns the LH of the ancestral sequence of pos.
Compute the ancestral likelihood of the ancestral sequence.
Return the branch length corresponding to the length of the given node.
Compute the optimal length of a branch.
Reconstruct the tree and return a new multipleseqalignment
Negative eigenvalues of the covariance matrix.
Create a new GaugeModel with custom parameters.
Adjust pi and w to the sum of the eigenvectors in self. q
Compute the optimal transition time for a pair of sequences.
Probability of the profile at time t.
Evolve the given profile at time t.
Return the log - likelihood of a sequence.
Set branch length mode.
Plot root to tip regression.
Print left - hand side of the unconstrained sequence.
Add a coalescent model to the tree.
Find the best root for the tree regression.
Assure that the tree exists.
Create a GTR instance.
Check if a VCF file is compressed and if so return the aln ref fixed_pi
Calculates the FWHM of a given distribution.
Create a new delta function distribution.
Assign dates to nodes in the tree.
Setup treeregression.
Makes the time tree.
Estimate the likelihood of the time - tree.
Convert dates in clades to ISO 8601.
Returns the date uncertainty due to the rate of the given node.
Returns the value of the minimun value of an interpolated value
Interpolates the median value of a grid.
Returns a numeric representation of the given date. If no date is given the current date is used
Create a new DetectionContext from a regression dictionary.
Close the connection to the AMQP server.
Receive a line from the terminal.
Send data to the socket.
Sends an instruction to the VI.
Encode unicode_str as UTF - 8.
Load an instruction from memory.
Encodes the argument as a UTF - 8 string.
Return a string representation of the instruction.
Returns the URL for the given class.
Returns instance url.
Returns the URL for the given class.
Download the file.
Get the parent job object for this job.
Ask user for credentials.
Login to solvebio.
Show information about the authenticated user.
Prints the user in a nice way.
Return a new VariantList with only the specified range of genomic variants.
Return a new GenomicVariantList with a specific genomic position.
Returns facets for the query.
Takes a list of filters and returns a list of dicts where each item is a filter
Returns the next item in the result set.
Execute a query against the API.
Migrate a dataset to another dataset.
Entry point for the solvebio script.
Construct an instance of this class from a dictionary of values.
Logs the user out.
Get the child object of this task.
Parse info with SNPEff annotations.
Get credentials from the networkrc file.
Save the configuration to a file.
Format the given value with the given valtype.
Builds a row from a list of cells.
Builds a string that represents a single line.
Return row2 with column alignment.
Migrate dataset to another dataset.
Upload a file or directories to a Vault.
Validate full path.
Validate API host URL.
Annotate a list of records.
Evaluate the expression.
Set the format_name.
Register a new output format handler.
Adapter for tabular data.
Returns the full path to the user - specific configuration file.
Return a list of system configuration files.
Returns a list of paths to all of the additional files contained in the project.
Write the default config file to disk.
Read a list of config files.
Truncate a string if it is longer than max_width.
Replace all occurrences of replace in s.
Calls a list of commands and exits the program if the exit code is zero.
Applies the specified option to the specified command line.
Set branch and fix options.
Run the tool.
Runs the clean_docs command.
Truncate a list of rows and headers to a maximum string length.
Format a single row of data.
Vertically display a table of data.
Adapter that yields data formatted as a table.
Checks if the given type is a number.
Check if type is a bool type.
Return True if type is a binary type.
Generate a new public key from a template.
Generate a new public key pair.
Find objects in the kernel.
Inserts an icon into the given QR image.
Export panels for genomes.
Return the first weekday of the given date.
Repeats the current date for the specified day.
Repeats the same number of times between start and end.
Internal helper for biweekly_repeat.
Handle a single chunk of the data.
Return a generator of all variants in the database.
Return a list of Mt variants documented in Mt format.
Update role for a user.
View variants of a given type for a given institute and case.
Retrieve information about a specific variant.
Return the string representation of a Variant.
Verifies a variant.
Open a new clinvar submission for the given institute and case.
Return a list of cancer variants.
Create a new Variant ACMG.
Display an evaluation.
Get ACMG for given criteria.
Upload a HGNC symbol file.
Download the verified Variants Excel file.
Given a list of HGNC IDs return a dict mapping alias to HGNC ID
Add in incomplete penetrance genes.
Make a request to MatchMaker REST API.
Get a list of matchmaker nodes.
Get the coordinates of the cytoband at the given position.
Get the subcategory based on the ref_len and alt_len.
Get the length of a string.
Get the end of a string.
Parse the coordinates of a variant.
Update a panel.
Export a panel.
Edit a panel s gene.
Load a delivery report.
Returns a list of HPO terms for the specified text query.
Show all available whitelists.
Builds a phenotype term from a phenotype ID
Get the gene record for the given HGNC ID.
Convert a HGNC query to a list of JSON terms.
Display list of institutes.
List transcripts for a build.
Return a list of all the events that occur on a given day.
Retrieve a page of Variants from the database.
Retrieve a page of Variants for a case and institute.
Create a string representation of a variant.
Exports the header for a variants export file.
Get predictions from a list of genes.
Find the BAI file for a BAM file.
Returns the observations for the given variant and case.
Parse a gene and its transcripts.
Return a string representation of a transcript change.
Return the end position of the variant
Determines the most common frequency of a variant.
Return a human readable version of the clinsig objects in a variant.
Returns link to link to the thousandg of a variant.
Return a link to the cosmics of the variant.
Return a link to the beacon for the specified variant object.
Return link to the UCSC Variant object for the specified build.
Determine the most human - readable version of the variant.
Returns the list of expected manual models for a variant.
Returns a list of tuples where the first element is the name of the caller the second element
Return cancer variants filtered by filtersform.
Export the clinvar data for a given variant and institute.
Get the clinvar submission for the given variant and institute.
Return the acmg options for a variant.
Evaluate a Variant and submit it to the store.
Perform an evaluation on the given evaluation_obj.
Display a list of HGNC symbols.
Create an Excel file containing verified variants for each institution.
Export all genes from the given adapter.
Parse CLNSig output into a list of transcripts
Parses a compound info string into a list of dictionaries.
List genes in a build.
Show the details of a case.
List available collections.
Instantiate an institute.
Returns a file handle for the given file path.
Get the network number from the request.
Get the next and previous number for a given net.
Check if the given year is in the valid range.
Check if the weekday is in the range of num_.
Parse a list of samples and return a list of parsed individuals.
Parse a PED stream into a family ID and a list of samples.
Build an evaluation dict.
Given a list of acmg_terms return a list of acmg_prediction
Find variants for a case.
Return a list of sanger variants for the given institute and case.
Returns the variant document identified by document_id.
Returns a QuerySet of GeneVariants
Return a list of variants that have been verified.
Retrieve all causatives associated with an institution or case.
Check if there are causative variants in the institute.
Returns all other causatives of a given variant in a given case.
Delete variants for a case.
Returns all variants that overlap the variant_obj.
Returns a list of all variants that have been evaluated.
Returns a list of samples that have all of the given variants in the specified category.
Return a mongo connection object.
Returns a list of objects based on the form data.
Returns the complete header for the clinvar submission.
Returns a list of submission lines from a list of submission objects.
Load a panel.
Build an exon object from exon_info.
Delete a panel if it exists.
Drops all indexes for the database.
Delete a user from the database.
Drop all genes from the database.
Drop exons for build.
Delete a case.
List the individuals associated with a case.
Show the cases associated with a project.
Load a user from the store.
Log in a Google account.
Build an institute object.
Delete event by event_id.
Return events for a given institute and case.
Returns all events for the specified user. If user_obj is specified only return events for that
Remove a phenotype from a case.
Parse the genotypes for a variant.
Checks if the given position is within the given coordinates.
Get HPO search terms.
Export transcripts.
Drop exons for a build if it exists.
Load a region from the database.
Returns a queryset of all events in the given month in the given year.
Return all the live string repeats for the current time.
Recursively parse a pip requirements file.
Return the existing gene with the given HGNC ID.
Update a panel.
Create a new panel.
Export a panel object to the store.
Archives information about users variants and variants.
Migrate a case from one MongoDB instance to another.
Show HPO terms.
Configure extensions.
Register blueprints.
Show a list of HGNC IDs with their aliases.
Build a panel object from a panel_info dictionary.
Export verified variants to a file.
List variants in a case.
Returns a string representation of a VCF entry.
Run the pymongo server.
Generate a md5 key for the given list of arguments.
Initialize the application with the given app.
Sets up the collections.
Index databases.
Initialize a scout database.
Sets up a demo scout.
Sets up the database connection.
List institutes.
Parse the models_info for a given case_id.
List panels for a given institute.
Add an institute to the database.
Return the institute object for the given institute ID.
Match a date string.
Return a datetime object from a date string.
List HPO genes for a given HPO term.
Parses the rank score entry for a case.
Add a new user to an Institution.
Check mongo connection.
Load a delivery report into the database.
Adds a user object to the database
Pileup view.
Load exons for a given build.
Update case compounds.
Add links to the ensembl IDs in the given gene_obj.
List HGNC Genes.
Parse HGNC HGNC gene file.
Get the latest open clinvar submission for the given user and institute.
Update the clinvar submission with the given id.
Get clinvar_id from submission_id
Add one or more submission objects to a submission.
Update the status of a clinvar submission.
Return a list of clinvar submissions for the given user and institute.
Delete a clinvar object.
Returns a dictionary of all clinvars submitted for a case.
Yield terms from HPO obo file.
Return a list of genes.
Return a list of genes for a given HGNC.
Get a list of genes that match the query.
Retrieve institute and case objects from the database.
Returns a list of institutes the user is a member of.
Get HGNC ID for a given gene symbol.
Update a panel.
Show disease terms.
Load disease - term data into the database.
Parses the frequency of the variant.
Parse the SV frequency information from a variant.
List users.
Compares two MIM panels for differences.
Update the MIM version for all genes in the panel.
Add a panel to the database.
Returns the panel with the given id.
Deletes a panel from the database
Return the gene panel with the given id.
Returns a list of GenePanels for the given panel_id and institute_id.
Returns a dictionary mapping HGNC IDs to a list of panel names.
Update a panel in the panel collection.
Add pending panel action.
Returns a set of all clinical symbols present in the case.
List cases associated with a case.
Sends a record to the configured smtp server.
Loads the indexes into the database.
Update the indexes for all collections in the database.
Drops all indexes from the database.
Build a variant query for MongoDB
Builds the clnsig query for the database.
Filters the query based on the chromosome.
Filter the gene query based on the query.
Deletes a database.
Parse the panel file.
Load a batch of HGNC gene objects into the database.
Load multiple transcripts into the database.
Load multiple exon objects into the database.
Returns the HGNC Gene object for the specified HGNC identifier and build.
Get the HGNC ID for a symbol.
Returns a list of HGNC Gene objects for the specified HGNC symbol.
Get all the genes for a given build.
Returns the number of genes in the specified build.
Drop all genes in the database.
Drop all transcripts in the database.
Drop all exons from the database.
Returns a dict mapping Ensembl IDs to transcript objects.
Return a dictionary mapping HGNC symbols to genes.
Get a gene by its alias.
Given a build and a list of genes return a dict mapping alias to HGNC IDs
Returns a dict of ensembl gene IDs for the specified build.
Returns the HGNC symbol for the given build or None if no HGNC symbols exist
Add HGNC IDs to each gene.
Get the coding intervals for all HGNCs in the database.
Load an Omim panel
Retrieve all the cases associated with an institute.
Retrieve information about a case.
View function to see if the current user is the author of the matchmaker.
Matchmaker page.
Delete a matchmaker.
Generate a pdf of the coverage report.
Diagnosis of a case.
Update or archive a case.
Assign a case to an institute.
Return a list of HPO terms sorted by name.
Mark a variant as validation.
Mark a variant as causative or uncausative.
Get a delivery report.
Share an institute and case.
Rerun an institute.
Open a research session.
Upload a VCF to a CYTOSure dataset.
Send a MultiQC report.
Return a dict of cases and their analysis types.
List of clinvar submissions for the given user and institute.
Exports Mt variants to Excel files.
Query phenotype for a list of HPO IDs.
Retrieve the cytosure object for a given vcf.
Return a dict with the institute and case objects in the store.
Return a list of Sanger unevaluated for the institute.
Delete matchmaker MME for a case object.
Return matchmaker results for a given MME case.
Query MME for patients in a case.
Drops all ensembl genes and transcripts for a build.
Parse the callers information from a variant.
Build a HGNC transcript object
Load an institute from the database.
Parse the cadd value for a variant.
Load and update a case.
Update a variant in the collection.
Update the rank of variants in the case_obj.
Updates a variant compound with the information from the database.
Update compounds for all variants
Updates all compound variants in the database.
Load a variant from the database.
Insert or update a variant
Load a batch of variants into the database.
Associate a case with a user.
Share a case with a collaborator
Add or update an OMIM ID to a case.
Mark a case as checked.
Order the verification of a variant.
Return a list of sangers ordered by name.
Validate a variant.
Mark a case as causative.
Update the dismiss variant for a given variant.
Update the ACMG for a variant.
Parse a set of ids from a chromosome.
Parse a simple ID from the simple coordinates.
Generate the MD5 key for a document.
Convert panel to HGNC format.
Get a variant ID from a variant object.
Returns the number of cases in the database.
Update the dynamic gene list for a case.
Returns a case by case_id or institute_id or display_name.
Delete a case or institute.
Add a case object to the case collection.
Replace one case with another.
Updates the family_id of a case.
Submit an evaluation for a variant.
Get all the evaluations of a variant.
Parse the transcripts from the ensembl file.
Parse ensembl gene request.
Parse ensembl transcript request.
Parse ensembl gene output files.
Parse ensembl exons.
Parse ensembl exon request response.
Initialize the logging system.
Given a genemap file return a dictionary of mim_nr to a set of pheno
Get MIM gene and phenotype for a given morbid.
Convert string to int float or None.
Returns a string formatted for the given year and month.
Format the day of the week.
Format a month name.
helper for popover
Return a dictionary of panel information.
Parse a gene panel.
Show disease terms.
Drop all HPO terms from the database.
Return a dictionary of users and their event rank.
Parse conservation variant.
Parse conservation scores from a variant.
Get the general case information for the institute.
Get the case groups.
Render context as JSON response.
Get the current year and the current month.
Check if there are any canceled events for a given date.
Returns the HPO term for the given HPO_ID
Returns a list of HPO terms that match the query.
Returns the disease term for the specified disease identifier.
Returns a list of disease terms.
Load a disease term into the database.
Generate a list of HGNC IDs sorted by number of genes.
Read a hdf5 file.
Set up the time axis.
Compute llst.
Blank DC channels.
Calculate extent.
Plots the waterfall.
Plot the time series.
Write the filter bank to a file.
Calibration for band_pass of N1 data.
Convert data to chan_per_coarse.
Fractional polarization of a string.
Write polfils to file.
Find the index of the closest value to a given value.
Rebin a data array to a specified number of dimensions.
Unpack the given data with the given number of bits.
Get the difference between the input dio_cross and the given feedtype.
Plot a calibrated diode.
Calculate the size of the selection buffer based on the data in the header.
Calculates the shape of the selection.
Sets up the start and stop frequencies
Populate the timestamps in the file.
Calculate the number of coarse channels.
Calculate the number of blobs in the selection.
True if the data array is heavy False otherwise.
Read the file and return a numpy array.
Read a single row of data.
Reads data from the file and loads it into memory.
Update the header with the current values.
Print information about the file.
Writes the container to a FITS file
Writes the container to an HDF5 file.
Write the dataset to a HDF5 light file.
Calculates the dimension of the blobs
Determine the dimension of the chunk
Grabs data and plots it.
Command line tool for Puppiraw.
Read the first header dict.
Find the number of data blocks in the file.
Prints the mean standard deviation max and min.
Plot a histogram of the data.
Generate filter bank header.
Find the size of the header of a round in a file.
Integrate through a calibrator.
Calculate center frequencies.
Integrates a set of coarse - grained observations into f_on f_
Return the Tsys string for the given spectral data.
Find the end of the header of the given file.
Check if the file is a filter bank.
Generate a sigproc header string for a FITS file.
Calculate the number of interfaces in a file.
Return a dict representation of the traceback.
Creates a subparser for the RR record type.
Create the parser for the zonefile.
Remove comments from a string.
Add a default record name if it doesn t already exist.
Parses the given text as a JSON zone file.
Parses a zone file from the given text.
Quote a field in a data dictionary.
Parse an avro schema string.
Create a Python package from a list of Python classes.
Convert the given record to a JSON compatible dictionary.
Load a JSON dict into a record.
Load a JSON string into a record_class.
Add a record to the schema.
Get the schema for the given record name.
Return a string representation of the Variable.
Generate a JSON Schema dictionary for the given record.
Get the root schema dictionary for the given record.
Read lines from a multiprocessing. input stream.
Write the output to output_stream in MAR format.
Return an ordereddict with key appended to the front of dct.
Get the query string for this document.
Perform a raw filter on this search result.
Return a list of all entities that include the given attributes.
Get entity from href string.
Return a quote for q or raise ValueError.
Escape a string for use in a filter.
Compute the matrix for a rotation about a given axis about a given angle.
Magnitude - dependent sky average of the vrad error bcoeff
calcparallaxerror. py script for calcparallaxerror. py
Returns the error for the magnitude of the GM as a function of g.
Gamma magnitude error eom.
Return the average number of transits of beta.
Return the angular distance between two points on the sphere.
Transform cartesian coordinates using the rotation matrix.
Transform sky coordinates using the sphericaltocartesian function.
Returns the Jacobian for transforming the covariance matrix.
Astrometric error scaling factor for observable.
Unquotes the given value if necessary.
Apply a list of functions to each item in the collection.
Exclude items from the collection based on a truth function.
Return a new collection containing only the elements that pass a truth test.
Return a new collection containing only the elements from this collection that satisfy a truth test.
Return a new collection with elements dropped where func returns True.
Zip the elements of this collection with the others.
Find the first occurrence of a given string in the sequence.
Return the path of the serach package.
Builds a minimal set of schedules for the given events.
Output the results to a file.
Output the results to a file.
Cleans up the given code by removing comments macros and pragmas.
Round to next base
Given a list of indices return a list of indices that are blocking.
Calculate cache access.
Runs the Incremental EM algorithm and returns the results.
Remove comments from ASM file and return asm_stripped.
Strips any unreferenced labels from the ASM file.
Select the best block for a given string.
Prompt user for increment.
Insert markers before start_line and after end_line.
Generate num - sized space between start and stop.
Get the datetime of the last modified file in the directory.
Checks if the arguments passed to the function are valid.
Entry point for the script.
Main entry point for the pickle script.
Create a symbolic expression that evaluates to True for a positive integer.
Transform multidim declarations to 1D declarations.
Transform a multidim array reference to a one - dimensional one - dimensional reference.
Finds all nodes of the given type in the AST that are of the given type.
Check that the number of datatypes is correct.
Sets the value of the constant with the given name.
Substitute constants in expr with those in self. constants.
Returns the sizes of the arrays in bytes or in bytes.
Calculates the relative offset for a variable.
Remove variables with duplicate accesses.
Returns the length of the current iteration variable.
Iterates over the loop stack.
Returns a list of free symbols in the order they should be indexed.
Returns a dictionary of sympy variable accesses.
Compile the relative distances for each variable.
Convert the global iterator to a dictionary that maps each loop variable to an integer.
Returns the global iterator for this loop.
Create a global iterator for the given indices.
Returns the maximal global iteration number.
Print information about the kernel.
Print the variables information.
Prints the constants table.
Print the kernel code to the given file.
Convert a math ast to a symbol.
Returns a tuple of indices of the indices of the indices of the indices of the indices of the
Returns the base name of the given array reference.
Get the type of the index of the kernel loop.
Builds a list of declarations for the constants of the class.
Return a list of array declarations.
Get the loop_nest of the kernel.
Returns a list of arrays declarations and a dictionary of array declarations.
Find innermost loop in loop_nest.
Builds the array initializations for the current loop.
Builds a dummy statement consisting of conditional function calls.
Builds a code block for a kernel function declaration.
Builds a list of declarations for scalars.
Returns the code for the kernel.
Builds the AST for a kernel call.
Returns the main code of the module.
Instruments the code and analyses it using iaca.
Return a unique identifier for the data set.
Returns the datetime of when the file was last modified.
Get the compiler to use.
Parse a perfctr string into an event tuple.
Enforces a specified number of intervals to exist.
Returns the absolute path to the header file.
Aligns the given iteration number with the local cacheline boundary.
Returns a list of loads.
Returns the number of hits for each cache in the machine.
Returns the number of caches that have not been computed yet
Returns a list of stores.
Returns the number of caches that have been evicted.
Returns information about the caches in the machine.
Temporarily fix an environment variable.
Add an argument group to the parser.
Parse the description from the README file.
Builds a single item for a PurchaseItem.
Record a purchase via sailthru.
Returns a dictionary containing content for the given course.
Get course content from ecommerce api.
Update the unenrolled list for a user.
Send a course refund email.
Send an offer assignment notification email.
Retry the order for the given exception.
Fulfill the order specified by order_number.
Get a sailthru client for the given site code.
Return the value for the given key. If the key is not in the cache None is returned
Set the cache value for the given key.
Get the value of a configuration variable.
Returns the filename of the overrides file for the specified environment variable.
Return the value of a dict by version.
E + version.
Populates the internal state of the device from the given JSON data.
Returns a list of external file paths.
Sets the default values for all tables in this view
Prepare the extensible parts of the descriptor.
Returns a dictionary of all short references.
Get a value from a column filtered by a criterion.
Update the value at the given index with the given value
Update the inertia file.
Add fields to the struct
Pop the value at the specified index.
Insert a value into the pop object at the specified index.
Delete this record from the database.
Register a hook for record field validation.
Register a link.
Create a regex object for the given line and intent name.
Returns the number of seconds until the given time has passed since the start of the interval.
Return a serializable string representation of the object.
Perform an HTTP request using pycurl
Get a list of endpoints for a given service type.
Try to create a directory if it doesn t exist.
Configure a service.
Send a request to register CA.
Recording state via HTTP.
Update event status
Update service status and register CA.
Return the path to the configuration file if it exists.
Update the configuration from a. cfg file.
Check if config file exists and if yes print it.
Initialize the logger.
View the home page.
Serve an image.
Runs all the given modules in parallel.
Parse an iCalendar string into a list of events
Get the schedule from iCal
Main loop for the scheduler.
The main loop for the service.
Make a Flask response with an error.
Make a response with a list of data.
Get the service internal state
Get all the upcoming and recorded events.
Get a single event.
Delete an event.
Modify a recorded event
Start capturing an event.
Renders test_html test_js and test_css to fragment.
Returns a list of resource names.
Return a dict representation of the object.
Create a fragment from a dictionary.
Add content to the email
Initializes the JavaScript library.
Returns a string containing HTML code for the resources in this Dashboard.
Convert a Resource object to HTML.
Handles GET requests.
Render the fragment as standalone HTML.
Render the fragment as standalone HTML.
Calculate p - values from p - values and lamb.
Coerce values to one - dimensional numpy array.
Given a score table and an error table return the values of the closest match.
Samples the cutoffs from the final error table of a DataFrame.
Create a summary error table from a dataframe.
Calculates error statistics.
Find the cutoff value for a given cutoff.
Ipf infer_peptidoforms.
Runs peptide inference on the input file.
Runs protein - based inference on the input file.
Subsample input file to outfile using osw subsampling.
Reduce a file using osw.
Backpropagate the input file to the output file.
Returns a restclients. Group object for the given group id.
Creates a new group.
Deletes the group with the given id.
Returns a list of the members of the group.
Update the members of a group.
Returns the effective member count for the group.
Checks if a netid is a member of a group.
Decrypt a key using AEAD cipher.
Get stdin as a file object.
Get the standard output of the command.
Get the stderr object for this command.
Get the output of the debug command.
Context manager that yields a subprocess. Popen object with a standard input handle.
Return a context manager that yields the standard output of the process.
Context manager to temporarily redirect stderr to subprocess. PIPE.
Return a context manager that will execute the debug sub - command with the given OS path.
Writes an error message to a file.
Overrides optparse. OptionParser. print_help to print the help text.
Print the usage message and exit.
Print the version number of the program.
Resolves the value of the given option in the given options object.
Returns a copy of the clicontext.
Write headers to file.
Generate a URL that can be used to access a resource.
Quote a value for inclusion in a URL.
Get a client from the pool or create a new one.
AES - GCM decryption using AEAD cipher.
Put an account.
Put a container.
Returns the manifest body for the request.
Create a new container and return the prefix.
Prints a trans ID to stdout.
Reads num_ bytes from the stream and returns a boolean indicating if the stream is empty.
Encrypts the given key using AES - 256 - CBC.
Get the status for a given SHA for a repository.
Get information about a pull request.
Return a generator of pull requests.
Set the is_published property of all Titles to bool_.
Return a list of the slider items published for the given request.
Return a list of all the sliders published for the current hero.
Acquire locks for reading locks.
Release reader locks.
Acquiring locks for writing.
Remove a task from the container.
Get the task with the given task_id.
Returns a sorted list of all tasks in the queue.
Return a dictionary representation of the object.
Create an instance of this class from a dictionary.
Initialize the archive manager.
Create a new index.
JSON encoder for requests
Iterates through the items_generator and writes them to the writer.
Adds a task to the workflow.
Remove a task from the scheduler.
Yields the items from the database.
Validate task id backend category and backend args.
Parse the arguments for the archive task.
Perform the job and publish the result.
Schedule a job for a task.
Cancels a job task.
Starts the listener thread.
Listen for pubsub messages.
Schedules the scheduler.
Schedules a task for execution.
Cancels the task with the given task ID.
Build a dictionary of arguments to be passed to a job.
Register the given view with the router.
Overrides Django s reverse_action method to handle versioning of the url.
Returns the name of the view.
Return the version string.
Resolve a key in a cursor.
Resolve an engine from a scheme.
Parse a database and schema path.
Parse a database URL into its components.
Authenticate the user and create a new record.
List the users.
Create password change form.
Add the url name to the field.
Parse a boolean value.
Parse a value into an integer.
Get a parser for the given type.
Create a modeldict from a model.
URL - safe base64 encode a string.
Create a field from field_info dict.
Create a validator class from a dictionary.
Finds unique points in a list of explored parameters
Change logging kwargs.
Try to make directories for the given filename. If the directory already exists print a message to stderr
Get a list of strings from the AST.
Get the logger for this instance.
Extracts variables from the trajectories
Checks and replaces any filenames found in the parser arguments.
Convert a parser object to a stringio object.
Find all multiproc options in the given parser.
Returns a dictionary where the keys start with the multiproc prefix.
Parse the config file and return a parser.
Recursively convert a dictionary of log files into a dict of log files.
Add logging handlers and tools to self. _tools
Finalize the tool pool.
Start redirection mode.
Writes the given buffer to stderr or sys. stderr depending on the log level.
Compare two results objects for equality.
Compare two parameters for equality.
Class decorator that adds a prefix naming convention to a class.
Add parameters to a binary quadratic model.
Run the network and monitor the results.
Calculate the Euler scheme of the given trajectories.
Add parameters to a ANTsTransform object.
Difference in Lorenz basis.
Create a storage service.
Factory for creating a storage service.
Add parameters to a TFaj object.
Calculates the Ritz - Leerzowski distance between two values.
Checks if there are any explored parameters in the group node.
Build equations for model and synaptic variables.
Pre - build the model if necessary.
Build the model.
Build the model for the given Trajectory object.
Pre - build the network if necessary.
Build a BEL network from a given traj brian list and network dictionary.
Add the Brian2Parameter annotations to the specified TraverseElement.
Compute the fano factor of a neuron based on its spikes.
Compute the mean fano factor for each neuron.
Computes the mean fano factor for each subrun.
Adds the monitoring functions to the network.
Makes the output folder for a given traj.
Plot the result of a celianeuron.
Print the spike monitor graphs for the analysis.
Run the brian2monitor analyse method.
Get the batch number
Explore a batch of data.
Variables associated with this node.
The function associated with this node.
Private method to handle rename operations.
Set the branch and run branch details.
Convert a PyPi node to a PyPi message.
Deletes a node from the tree.
Remove a node or leaf from the tree.
Translate a shortcut name into a boolean and a string.
Determine the type of a node based on its children.
Create a link between an act node and a child act node.
Check the names of the nodes.
Set details for a tree node.
Iterate over all nodes of the tree rooted at node.
Create a child iterator for the given node.
Descend into a breadth - first traversal using BFS.
Search for the given key in the given node.
Search backward starting at start_node for matches to split_name.
Kids of this node.
Add a group type from the storage backend.
Add a leaf from the storage backend.
File directory data.
Returns a bunch of debug information about the tree.
Get the parent of this node.
Remove a link.
Remove this node from the tree.
Get the default value for a field.
Returns the children of the node.
Return groups as a list.
Return the list of leaves.
Get links as a string.
Store the group in the NRML datastore.
Add a result group to the network interface.
Add a derived parameter group to the network interface.
Add a derived parameter to the network interface.
Add a config group to this interface.
Add a configuration group to this interface.
Add variables related to the given commit to the given traj object.
Make a git commit for the environment.
Flattens a nested dictionary.
Nest a dictionary into a nested dictionary.
Get the argspec of a function.
Given a function and a dictionary of keyword arguments return a dictionary of matching keyword arguments.
Format time.
Convert a port to a TCP address.
Attempt to create a directory if it doesn t exist.
Reset the internal state of the progress bar.
Get the remaining time remaining for the given index.
Convert to dict.
Remove a field from the dictionary.
Returns a string representation of the annotation.
Make an ordinal result from a result with the given key and trajectory.
Make a shared result from a result object.
Store access_data for given request.
Request the data node.
Return True if item is supported by this result.
Create shared data.
manipulate multiproc results in safe manner.
Locks a client for a given request.
send a done message
Finalize the context.
Start the zmq socket.
Retry a request and return the response.
Acquire the lock.
Listen for incoming connections.
Put data into the queue.
Detect if we are running a fork.
Handle data messages.
Run the thread.
Receive data from the queue and return it.
Read data from the connection.
Store an object in the local repository.
Store a message in the specified trajectory.
Store a dictionary of reference data.
Collect all options for a section.
Collect all config values into a single dictionary.
Interpret command line arguments.
Add all the parameters to the given troaj object.
Plot a pattern.
Returns the cellular automaton for the given rule number and number of steps.
Signal that a new update has occurred.
Return the overview group.
Loads multiple items from an iterable.
Checks the given traj for hdf5 properties
Stores messages and items in the service store.
This routine is called when the service is closing.
Extracts information about the specified file.
Create a backup of the given trajectory.
Reads a row from a table into a dictionary.
Prepare a traj object for merging with another traj.
Check if the version and python are the same.
Loads all exploration parameters into the given trajectory
Store the explorations of the given trajectories
Stores a PyPi Trajectory object.
Creates a new leaf instance of the tree
Stores all the nodes in DFS order.
Add or modify a parameter or result table entry.
Get or create a table from a where node.
Get a node by its name.
Insert all keys in insert_dict into row.
Cut string if too long.
Create a new group or get a child group.
Creates or gets a new group for the given key.
Stores the annotations of the given node.
Load the annotations from the given node.
Groups a given pypet. traj. Group instance with the given store_data.
Groups a trajectories into a single trajectories
Loads the skeleton of a node from the hdf5 file.
Extract missing flags from dictionary.
Adds a summary of the v_comment to the overview group.
Add metadata information to the group.
Writes data into an array or shared array group.
Private method to write a table to the shared hdf5 file.
Write a dictionary into a pytable.
Private method to write a Pandas data frame to a group.
Private method to write data into an array.
Private method to write data into an array.
Delete a link from the trajectory
Get a table column from the given column.
Returns the size of the longest string in a list of strings.
Read a table into a dictionary.
Private method to read shared data.
Read an array and return its data.
Load a pypet. trajectory. Trajectory.
Makes a set name from an integer index.
Set properties of the object.
Add one or more dynamic imports to the module
Preset a default parameter.
Returns True if the run is completed.
Remove all stored exploration parameters
Updates the dictionary of run information for this run.
Add information about a single run.
Locks all parameters.
Locks all derived parameters.
Finalizes the run.
Runs f_load with the skeleton parameter set.
Builds the reverse wildcards.
Merges multiple trajectories into one.
Merges one run of the same type into this trajectory.
Renames the full name to match the other trajectory.
Merges config from other_trajectory into this one.
Merges this trajectory with the other_trajectory.
Merge results from other_trajectory into this trajectory.
Restores the default parameter values.
Set all of the parameters that have been explicitly explored to the given index.
Set self. _is_run and self. _new_nodes and self. _new
Returns a list of run names.
Start a single run or start a single run.
Set the start time of the run.
Sets the time at which the run finished.
Helper method to construct an instance of a subclass.
Return a dictionary representation of the parameter values.
Finalize the run information.
Deletes links from the trajectory.
Recursively remove all nodes under this node.
Wrapper for pool_single_run.
Freeze the pool parameters for a single run.
Configure the pool instance.
This function configures the frozen pool.
Process a single run.
Wrapper around _single_run that doesn t catch exceptions.
Configures logging based on the given kwargs.
Configure niceness.
Runs a single Python script with sigint handling.
Wraps the logging handler in a thread. If the graceful_exit keyword argument is set to
Load a class from a full class string.
Create a new class from the given class name and dynamic imports.
Returns the length of the range.
Return the next field s value as a string.
Returns the range of the variable.
Returns a dictionary with the contents of the file.
Loads the parameter from a dictionary.
Loads the parameter from the given dictionary.
Compare two values for equality.
Checks if the data is a supported spmatrix format.
Builds a tuple of strings representing the names of the parameters.
Reconstruct a sparse matrix from a list of data.
Loads the parameter from the given dictionary.
Returns a dictionary of the stored data.
Loads the parameter from the given dictionary.
Translates the given key to the variable name.
Returns a string representation of the f_val column.
Convert to dict.
Set the value of a single field.
Returns whether the item is a supported sparse matrix.
Stores the data in sparseresult. identifier format.
Loads sparseparameter data from a dictionary.
Set a single attribute of the object.
Return the pickled version of the data.
Load pickled data from a dictionary.
Main function of merge_all_in_folder.
Create a new session.
Merge multiple trajectories into one.
Start all the jobs.
Multiply a triangular matrix.
Run a neuron on the given trajectories
Post - processes the results of a neural network analysis.
Add a number of parameters to a troaj object.
Add exploration to the given trajectories
Extract all subruns from the given trajectories.
Execute a single network run.
Add parameters to the given trajectories
Runs the network of the specified trajectories.
Generates a filename for the given trajectories.
Return the next string from the chain.
Handle the SIGINT signal.
Load a configuration from a JSON file.
Request the pin from the API.
Requests the OAuth 2. 0 access token refresh token and write them to file.
Requests a new access_token and a new refresh_token.
Returns the thermostats dict or None
Writes the tokens to the config file.
Set the hvac mode for a given index.
Set the fan min on time for the specified index.
Set the temperature hold for a given index.
Delete a specific vacation
Resume the program at the given index.
Send a message to the specified index.
Generate a random delay.
Generate time left to renew a request for a given lease.
Generate a random renewing time.
Dictionary representation of self.
Reset the state of the client.
Return the timeout function associated with the given state and function.
Set the timeout for the specified function in the specified state.
Select an offer by number.
Sends a request to the network.
Set timers for the current state.
Process a received NAK packet.
Initialize the timeout manager.
timeout_selecting - Check if there are enough offers left to collect
Timeout the requesting function.
Timeout request renewing.
Timeout request rebinding.
Called when a packet is received from the network. Stores the received offers in self. offers
Process received ACK requesting.
Process a NAK requesting packet.
Called when a new ACK packet is received.
Called when a NAK packet has been received.
Handle rebinding of ACK packet.
Process a NAK rebinding packet.
Called when the client is re - creating a new lease.
Set the value of a field.
Return a new S instance with name and value added.
Returns a new S instance with the specified name and value removed.
Get the status of the supervisor server.
Reads tdms file and returns list of channel names and data.
convert tdms file to fcs file
Returns True if the working directory is equal to the working directory.
Create a new Quilt patch.
Delete the next patch.
Delete a top - level patch from the database.
Check if a file exists in a patch.
Backup a Quilt data file.
Add a file to the database.
Run the program.
Creates the directory if it doesn t exist.
Copies this directory to the given destination.
Links this file to the given link
Copies the file to the destination.
Returns the directory of the file.
Backups the given file to the destination directory.
Unapply a patch.
Apply a patch to the series.
Apply the next patch to the series.
Apply all patches in series.
Read the series file
Save the current state of the patches to a file.
Add a patch to the file.
Insert a list of patches into the file.
Add a list of patches to the editor.
Remove a patch from the file.
Returns a list of patches after patch.
Returns a list of patches before the given patch.
Returns a list of patches until the given patch is applied.
Replace an existing patch with a new one.
Create the version file.
Check the version of the database.
Adds this argument to the given parser.
Adds this argument to the given parser.
Adds this command to a sub - parser.
set the subparsers args and kwargs
Add this parser s subparsers to the given parser.
Check if a file exists in a particular patch.
Check if a file exists in the patches after the given patch.
Revert a file to a different patch.
Import a Quilt patch into the repository.
Copy patches to the quilt patches directory.
Add a way to the graph.
Iterator over node_ids that are not present in the graph.
Add a node to the graph.
Create a route object from a relation object.
Create a route long name for the given relation.
Returns the agency ID for the given relation.
Runs the ANALYSIS pipeline
Add a relation to the document.
Yield agency tuples with agency - num_ agency_url agency_name and agency_
Generate dummy arrival and departure times for trips.
Writes the contents of the archive to a zip file.
Writes all the files in the archive to the given destination.
Build an agency for the given relation.
Extract stops from a relation.
Given a relation and a list of ways yield a shape object for each node.
Returns a list of the supported APD versions.
Send an APDU to the device.
Attempt to authenticate using u2f.
Register a new application on the device.
Authenticate with the device.
Register a device using u2f.
Convert unicode object to str recursively.
Wrap a class with flawless. client. client. _wrap_function_with_
Returns True if the filepath matches one of the only_blame_patterns.
Returns the full email address for a given email address.
Get the entry corresponding to the given entry in the entry_tree.
Convert markdown to rest.
Fork a new process and serve the service.
Convert a URL to a stringio. Image.
Convert a string to an Image object.
Check that the image is large enough.
Check that the given width is big enough for num_.
Check if height is big enough for num_.
Parses a category from the given item.
Parse the totals field.
Yields all the items in the document.
Saves an error message to the errors list.
Parses the feed file
Parses the given item according to this schema.
Returns an instance of the model based on the given data.
Saves the instance.
Download a file from a given url to a given destination.
Opens the source file.
Returns a generator for the items in the CSV file.
Enables or disables network access for this node.
Add files to the current working directory.
Add a file to the sandbox and rename it.
Returns a list of canvasenrollment objects for the specified course.
Returns a list of enrollments for the given sis_course_id
Returns a list of canvasenrollment objects for the specified section.
Returns a list of enrollments for the specified section.
Returns a list of canvasenrollment objects for the specified registration id.
Enroll a user in a course.
Get all the roles in an account.
Returns a list of roles in an account filtered by SIS ID.
Returns a list of course roles that are associated with the given account.
Get a single role by id.
Get a role by its SIS ID and role ID
Returns a CanvasCourse object for the given course_id.
Returns a restclients. models. course. Course for the given sis_course
Returns a list of canvascourse objects representing all courses in an account.
Returns a list of courses in an account filtered by sis_id.
Returns a list of courses published in the given account.
Returns the list of courses published in a given sis_account_id.
Returns a list of canvascourse objects for the regid.
Creates a new canvascourse.
Update the sis_course_id for the given course.
Returns a restclients. models. Activity for the given account and term.
Returns a list of grade objects for the given account and term.
Returns a restclients. models. TermStatistics for the given account and term.
Returns a restclients. Activity for the given sis_course_id
Returns a restclients. assignment. Assignment for the given sis_course_id
Returns a restclients. models. student_summaries. StudentSummaries for
Returns the student activity for the given sis_course_id and sis_user_
Returns a student messaging resource for the given sis_course_id and sis_user
Get all external tools in an account.
Returns a list of external tools in a course.
Creates a new external tool in the specified context.
Update an external tool.
Delete an external tool.
Check that the given object has all the required parameters.
Return a CanvasUser object for the given user_id.
Returns a list of canvasuser objects for the specified course.
Returns a list of users for the given sis_course_id.
Create a new user.
Get a user s logins.
Update a user login.
Returns the next page in the response.
Returns the data for the given url.
Returns the full url for a single resource.
Makes a GET request to the specified url with the specified params.
PUT a resource to the specified url
POST a resource to the API.
Send DELETE request to DAO.
Get a list of canvasadmin objects for the given account_id.
Create a new canvasadmin.
Create an admin by sis_id user_id and role
Deletes a user from an account.
Deletes a user from the SIS.
Creates a new grading standard for a course.
Get a single section.
Get a specific section by its sis_id.
Returns a list of canvassection objects representing the sections in a course.
Returns a list of uw_sws. models. Section objects for the sis_
Returns a list of uw_sws. models. Section objects for all sections in the
Returns a list of uw_sws. models. Section objects representing all sections with students
Create a new canvassection
Update a section.
Returns a list of quizzes for the given course.
Get a single account.
Returns a list of CanvasAccount instances for the given account_id.
Update an account.
Update the SIS ID associated with this account.
Get authentication settings for the given account_id.
Update an existing AuthSettings object.
Get a term by its sis_id
Import a string CSV file into the current account.
Import a directory into the current account
Get the status of a SIS import.
Builds a zip archive of the CSV files in dir_path.
Returns a list of assignments for the given course.
Updates an assignment.
Returns a list of all available reports for the given account.
Returns a list of reports for the given account and report type.
Creates a new report.
Creates a course provisioning report.
Creates a course sis export report.
Creates a new unused courses report.
Get the data from a report.
Get the status of a report.
Delete a report.
Move detections in label to a new location.
Flip detections horizontally around the center of a circle.
Get a dictionary representation of the given object.
Return default inplace edit options as a dict.
Return edit_empty_value.
Creates metrics from the given metric configurations.
Setup logging for this instance.
Configure the registry.
Create and register metrics.
Returns the metric with the given name.
Handles the home page.
Handles the metrics request.
Perform a WAN query and return the result.
Monkey patch http_client. httpmessage to work with unicode on Python 3.
Make a web call to the API.
Return information about the problem.
Iterator over all pods that have either primary or title equal to str_
Encode data as JSON and return the new request.
Make a GET request to the API.
Performs an HTTP DELETE to the specified endpoint.
Make a PUT request to the API.
Make a POST request to the API.
Group sentences into groups of length group_length
Disambiguates a PDF file.
Disambiguates a query.
Segment text.
Get the translation of text.
Get a specific concept by ID.
Fits the model to the given data.
Returns the accuracy score of the given features for the given classes.
Performs fit and predict.
Predicts the new feature and returns the score.
Transforms the input feature matrix.
Computes the MDR score for the given set of features and targets.
Return a vector containing the members of the iterable.
Return a vector of strings corresponding to the given members.
Compile and then execute a Python file.
Compiles and executes the forms in the given stream.
Compiles and executes the given string s with the given module.
Bootstrap a repl module for the given which_ns.
Run basilisp in a namespace.
Add a method to the map.
Add a method to the multifunction.
Remove the key from the map m.
Remove a method from the multifunction.
Checks whether the given variable is a macro.
Returns the line and column numbers for the given form.
Raise a parserexception if the node is not recursed.
Recursively visit a node and assert that it is the tail statement.
Resolve a bare symbol.
Resolve a sym. symbol.
\ Parses the given form as AST.
Whether to warn about shadowed variables.
Map a sequence of key - value pairs to a sequence of lrepr - formatted strings.
Represent a sequence as a string in lrepr format.
Fallback implementation of lrepr.
Recursively fix missing locations in node attributes.
Compiles a Basilisp form and executes it.
Compile the module using the optimizer and emit the bytecode.
Compiles the given module.
Bootstraps the given module with the given bytecode.
Return the first element of an iterable as iseq.
Munge a string.
Create a fraction string from numerator and denominator.
Returns a logging handler for the given level and format.
Map a dict of key - value pairs.
Partition a collection into n - sized chunks.
Reads a namespaced name pair.
Read a collection.
Reads a list of strings.
Reads a vector from the reader.
Reads a map of strings.
Reads a string from the file and returns it.
Read a symbol from the reader context.
Reads a keyword from the reader context.
Reads the meta attribute of a consuming comment.
Reads a quoted string and returns it as a llist.
Expand a quoted form into a list of lists.
Reads a quoted form from the reader and returns it.
Read aderef form from the source code.
Reads a single character from the reader.
Reads a regular expression from the stream.
Reads a reader macro.
Read the next consuming comment.
Returns the next token from the reader.
Read data from a string.
Read data from a file.
Updates the location of the current line and column.
Decrement the index by num_.
Returns the next token from the stream.
Generate a bytecode for a Basilisp source file.
Returns a list of basilisp code objects.
Returns the absolute path to the cache file for the given path.
Add basilispimporter to sys. meta_path.
Finds a module specification by fullname and path.
Compile and execute a cached module.
Executes a Basilisp module.
Executes the specified module.
Factory function for creating symbol objects.
Complete keyword arguments in text.
Get or create a keyword map.
Return a keyword by name and namespace.
Chain a list of pyast nodes into a tuple of dependencies and nodes.
Generate a collection of AST nodes.
Set the lineno and col_offset attributes of the generated pyast.
Decorator for with_lineno_and_col that adds the line number and column
Decorator that adds a line number and column to the generated pyast.
Returns True if the given var is a dynamic variable.
Whether the variable v can be used as a symbol redefinition.
Convert an ast. ast to an ast. expr.
Convert a function body into an expression.
Convert a do node to a python AST.
Generate a name for a function.
Converts the arguments of a function to a Python AST.
Convert a single arity function node to a Python AST.
Convert a function AST node to a Python AST.
Convert an if - body node to a Python AST.
Convert a invoke node into a python AST.
Convert a quoted constant node to a Python AST.
Converts a loop recur node to a python AST.
Convert a recur node to a python AST.
Convert a setbang node to a python AST.
Convert a throw node to a python AST.
Convert a try node into a Python AST.
Convert a local symbol node to a Python AST.
Find a variable in a namespace and return the corresponding ast node.
Convert a varref node to a python AST.
Convert an interop property node to a python AST.
Convert a maybe class AST node to a python AST node.
Convert a maybehostform node to a maybehostform node.
Converts a lispform representing a constant value to a Python AST.
Converts a collection of lispforms into a python AST.
Generate a Python AST from a lisp AST.
Iterate over all imported modules.
Create an ast. importfrom node for the module import.
Create an ast. assign node for the namespace variable py_ns_var.
Returns the given members as a set.
Return a set of strings corresponding to the given members.
visit an excepthandler node by returning a fresh instance of it
Visit an ast. expr node.
Visit a functiondef node.
visit a While node by returning a fresh instance of it
Visit a try node.
Create a new module type.
Return the first element of a sequence.
Return the rest of the sequence.
Returns the ith string of the collection after the given index.
Returns the ith element of the collection or none if the collection is exhausted.
cons a sequence or sequence of sequences o.
Convert an object to a sequence.
Concatenate multiple sequences together.
associative or associative map
Complex conjugate of a persistent collection.
Dereference the given object.
Compare two values for equality.
Return x divided by y.
Sort a collection.
Check if a key is in a collection.
Get a value from a dictionary.
Convert a Python object to its lisp representation.
Convert an object to a Python object.
Return a human - readable representation of the given object o.
Collect list of arguments.
Basilisp function decorator.
Resolves the alias of a symbol.
Resolves a symbol into a namespaced variable.
Add generated Python code to the current namespace.
Interns a symbol name for the given value under the namespace ns.
Interns a unbound variable.
Given a namespace symbol and a name symbol find the corresponding symbol in the namespace.
Finds a qualified symbol in a namespace.
Finds a qualified symbol in the namespace namespace namespace.
Adds a default import for the given module if it is not already in the gated_import
Adds an alias for a namespace.
Interns the given symbol to the given variable.
Intern the symbol sym with the new_var.
Finds a variable in the scope with the given name.
Add an import sym to the module module.
Returns the imported module type corresponding to the given symbol.
Adds a reference to a symbol.
Returns the name of the variable referred to by the given symbol.
Merges references from other_ns_interns into refers.
References all members of this namespace to the other_ns.
Create a new namespace or return an existing one.
Get or create a symbol in the current namespace.
Returns the value of the symbol with the given name.
Removes the namespace with the given name from the symbol table.
Suggest aliases for the given prefix.
Returns a list of possible completions for imports and aliases.
Returns an iterable of completions for the given value.
Completes the references for the given value.
Suggest completions for the given text.
The positional arguments of the function.
Returns a list of members from the given iterable.
Returns a list of members from plist.
Decrypt a JWT and return the decoded payload.
Encrypt a JSON payload using the key_store and key_purpose
Deletes the cached value for the specified key.
Return a tuple suitable for JSON serialization.
Parse a fiql string to a fiql expression
Write a NDB model to a file.
Decode datetime values from Python objects.
Decodes a date value.
Decode a JSON value.
Default encoder for NDB objects.
Validate leicacam version
Performs a robust topological sort on the given graph.
Set the parent of the node.
Get parent of current node
Add an element to the working fragment.
Create an AND expression.
Create an or expression.
Parse a received message.
Convert a list of tuples to a dictionary.
Check if there is a message with the given cmd with the given value.
Prepare the message to send.
Flush the buffer to the socket.
Enable a slide.
Save a template to a file.
Get information from the device.
Locate the package. json file.
Parse the package. json file.
Handle API error with json data.
Validate the response from yourls.
Interpolate the indep_vector between wave_a and wave_b.
Interpolate indep_vector using scipy. interpolate
Get the indep_vector between wave_a and wave_b.
Verify the compatibility of wave_a and wave_b.
Loads the systemjs manifest and returns the bundle files.
Trace the parameters of a module.
Expand a short URL to a full URL
Return URL stats for the specified short URL.
Get dbstats for a given action.
Get dbstats for the current user.
Split an iterable into chunks of size chunksize.
Flatten a nested iterable.
Print a table of records as a tab - separated value.
Create a dummy object of the given name.
Create a new instance from a human - readable string.
Trace a module.
Defines the links of the installed Sphinx packages.
Append a common entry to the plist.
Makes a single entry for pkg_pyvers.
Convert a string of operations to a list of words.
Chunk noise into chunks.
Chunk data into chunks.
Bound waveform.
Builds the units string.
Perform the dep_vector operation.
Compute the running area of the dependency.
Validate indep_min and indep_max.
Calculate the arccosine of the input wave.
Calculate the arc cosine of a signal.
Calculate the arcsine of a waveform.
Inverse hyperbolic tangent of the input wave.
Decompose a waveform into a quasiparticle weight.
Derivative of the group delay function.
Logarithm of the wavelength.
Square root the input wavelengths.
Convert complex wavelengths to complex wavelengths
Convert wavelengths to float.
Convert wavelengths to wavelengths using the wint function.
Find systemjs output directories.
Return the short description of a long description.
Build an expression from a list of tokens.
Delete the next item after pos.
Get a list of functions from a string.
Parse an expression.
Remove all consecutive delimiters from the expression.
Convert a number to a mantissa and exponent.
Returns the mantissa of a number without the scientific notation.
Convert a PEN number to a float.
Return the fractional part of a number.
Return the number as a float in Mantissa format.
Check if the application needs an extension to be included.
Runs the jupyter notebook bundle
Runs the trace command for the specified application.
Check if the hashes of the dependencies match.
Format a hexdump line.
Parses a docstring into parameters and returns.
Returns a list of valid function identifiers.
Resolve a deferred add action.
Split a line using shell - like syntax.
Check if there are any init commands for this context.
Return the help text for a builtin function.
Find a function in the given context.
Return a string listing all functions in the specified context.
Check if arg is a flag.
Extract the value of the given argument from the remaining arguments.
Invoke method based on a line of text.
Classify a section name.
Classify a single line of text.
Join a list of lines into paragraphs.
Convert the given value to the given type.
Convert a binary value to a given type.
Returns the size of the type.
Check if the type_name is one of the known types.
Split a type name into its base bool and subparts.
Instantiate a type and inject it into the type system.
Check if the type has a known format.
Loads the types from the given module.
Add a parameter to the method.
Set the return value information for the method.
Custom printer for return values.
Match a short name.
Returns the type of the parameter with the given name.
Format the return value.
Convert a positional argument.
Convert arg_value to the type specified by type_name.
Format the error message.
Return a dictionary representation of the exception.
Validate and execute a function.
Parse a list of validators.
Given a container return a dictionary of all of its attributes.
Create a context from a module.
Get the help text for the given function.
Decorate a function so that it cannot be executed.
Decorator to mark functions as annotated.
Return a short description of a function.
Autodiscover and load project modules and commands.
Install the crontab.
Print all tasks in the crontab.
Uninstall the kronos package.
Create an instance of the appropriate handler for the given uri.
Load all projects from the project directory.
Saves project configurations to disk.
Returns a dictionary of all dependent projects for this component.
Initialize a project.
Calls the decorated function with the given state.
Apply function f to pure state.
View the fold.
Convert fold to list of folds.
Apply a function over a state.
Set the value of a state.
Iterate over a given iterable.
Return the kind of the object.
Main game loop.
Step forward the vector and return the result.
Handle input.
Advance all robots by one step.
End the game.
move a player s position.
Play a game.
Make a move if possible.
Returns the winner of the game.
Yields the winners of the game.
Process a single item.
Called when a new spider is opened.
Upload a single chunk of data to S3.
Create a file - like object for the JSON file.
Get the state of an account.
Get the current state of an asset.
Get the hash of the block with the specified index.
Get the system fee for the specified block.
Get the state of a contract.
Get raw transaction data by its hash.
Calls jsonrpcmethods. get_storage with the given arguments.
Get the index - th output of a transaction.
Call a JSON - RPC method.
Invoke a JSON - RPC function.
Invoke a JSON - RPC script.
Send a raw transaction using the jsonrpc interface.
Validate a JSON - RPC address.
Make a call to the API.
Check if a string is a hash256 string.
Check if a string is a valid SHA - 1 hash.
Encode a list of contractinvocation parameters
Decodes the result of invoking an invocation function.
Apply the filter to the given dttm and timezone.
Render and save the graph to a file.
Render barcode and return raw string.
Renders the code using the registered callbacks.
Command line tool to edit or create configuration.
Download a file from S3.
Upload a file to S3.
Downsync a s3 configuration file to the local config folder.
Show the differences between S3 configuration and the local config.
Parse an environment variable.
Set basic auth credentials.
Store API key for future use.
Yields all the json content in a folder.
Get all schemas.
Returns the JSON schema for the model.
Return a jsonschema. refresolver. Refresolver for this resource.
Validates the given object against this schema.
Returns a list of valid examples.
Get the list of invalid examples.
Generates the authentication URL for the user endpoint
Process the URL for authentication.
Get a token from the server.
Returns the user_id of the authenticated user.
Lists the contents of a folder.
Create a new empty folder.
Add a comment to an object.
Decodes the given object.
Recursively set obj. drop_target.
start drag opperation
Set the default tlw.
Inspect an object.
Migrate a font from the old style to the new style.
Sets the current page to location
Logs the message and sets the focus.
Creates a wellcome tooltip and shows it
capture mouse over wx object
moves the mouse cursor or overlay
Reimplemented to handle key presses
Deletes all objects in the selection.
Duplicates the currently loaded object.
Refresh bmp.
Calculate best position for tooltip
Returns the py_data for the specified item
Set Python data for item.
Find data from py_data starting at start
Delete an item from the listctrl
Deletes all items from the listctrl
Clear all data from the table.
Sets the selected item of the container
Returns string selection
Sets the data for the item at n
Appends a string to the end of the list
Returns wx. Window or wx. Window that owns obj_name
Add a child to the sizer
Set parent of widget.
Draw the tile background
Erases the background if necessary
Paints the label
Returns sorted list of column headings
Resets the view to its initial state
Update values in Grid.
Update column attributes on the grid
Sorts the data in place according to the given column.
Clears the contents of the list
Create the combobox
Begins editing the value of a column
End edits the string value at the specified location
Returns True if the key event is accepted.
Set string selection.
enable or disable all menu items.
Return True if any of the menu items are enabled False otherwise.
enable or disable all menus
return True if all items in menu are enabled False otherwise
remove an item from the menu
Set the attributes of the given object from the given tag
Visit a table node by replacing text nodes with their parameter values.
Return a callable that can document the given object.
Takes a signature string and mangles it to a maximum number of characters.
Import a module by its name.
Link to an object or class using the autolink syntax.
Shows an alert dialog with the specified message. If scrolled is True the dialog will scroll
Shows a prompt dialog and returns the user input
Opens a font dialog and returns the chosen font.
Show a color selection dialog.
Show a directory dialog and return the path to the directory selected.
Find a word in the text.
Sets whether the item has children
Sets the icon of the widget
Parse a string and return a Python object.
Save the rsrc to a file.
Builds a window of the specified type.
Build a control or menu component.
Convert python property name to pythoncard property name
Set clipboard data
Find the autosummary for the given module or filename in a docstring.
Load an object into the tree.
Inspects an item in the tree.
Activates an item in the tree
Updates the tree item with the information in obj.
Shows the context menu for the specified item
Return the URL for the image field.
Returns a boolean indicating whether the current path matches the given path.
Returns a boolean indicating whether the path has no current path.
Select option.
Returns a Selenium webdriver object for the specified browser.
Returns the XPath for this query.
Switches the current scope to the specified frame.
Context manager to accept an alert.
Accepts a modal dialog and confirms it.
Context manager for dismissing a confirm dialog.
Context manager to accept a prompt.
Context manager to dismiss a prompt.
Saves the response body to a file.
Saves a screenshot of the current screen.
Raise server error if configured.
Check if a field has a checked state.
Check if the field has no checked field.
Tests if the field identified by locator is unchecked.
Tests if the field identified by locator has any unchecked field.
Check that the document has the specified title.
Fail if title is not present in the suite.
Return the inner content of a node.
Return the inner text of a node.
Normalize a URL.
Determines if the error should be caught.
Compare the number of results returned by the query.
Cache results at least size elements.
Check if any of the options contain a None value.
Create a failure message.
Check if the given count matches the given options.
Normalizes text.
Normalizes whitespace.
Return a compiled regex for the given text.
Returns True if the current URL matches the expected URL.
Resize the window to the specified width and height.
Boots a Capybara server.
Set the getter function for the string.
Set the instance method.
Set the class method to be called.
Returns the traceback as a string.
Returns the source code for the object.
Get the appropriate logger for the given instance.
Set the logger.
Make a call to the API.
Returns a list of the user s channels.
Returns a list of users.
Make a Slack message from text and channel.
Translate Slack message.
Sends a message to Slack
Read a message from a channel.
Run the Slack client
Run the client.
Returns a dictionary where the keys of prv differ from the keys of nxt.
Colorize a message.
v1_playbook_on_task_start event handler.
v2 playbook on stats.
v2 Runner skipped event handler.
Convert a dotted - quad ipnetwork prefix to a dotted - quad netmask.
Add a model to the container.
Load all filters from all registered Jinja filters
Find a YANG file in the current directory.
Perform a HTTP POST request.
Builds the authorization URI for the authorization code request.
Exchange a temporary code for an access token.
Returns a dictionary of query params from a URL.
Returns a copy of the url with the query string removed.
Builds a URL from a base URL.
Handle exception.
Make a response object.
Make a redirect response with an error.
Make a Flask response with a JSON encoded body.
Generate and persist an authorization code.
Refresh a refresh token.
Get an access token using the Authorization Code Grant.
Get an authorization code from a URI.
Get a new access token from POST data.
Returns an Authorization instance for this request.
Open a serial port on the specified bus.
Read a byte from the device.
Read the specified number of bytes from the device.
Read byte data from the device.
Write bytes to a device.
Write a byte to a device.
Write an I2C block of data to the specified device.
Create a copy of this container.
Create a local copy of a set of effects.
Construct a FileEffects object from a file_info dictionary.
Uploads a file - like object to the specified store.
Returns a list of file CDN URLs for all files in the group.
Construct a group from a dictionary.
Create a new group.
Perform an opration request.
Returns a generator that yields the UUIDs of all files in the sequence.
Pretty - print a list of items.
Print a progress bar for iter_content.
Returns the home mode status for the user.
Get a list of cameras for this SID
Get camera information for a list of camera_ids
Take a snapshot of the camera.
Camera motion enum.
Camera MD param save
Update camera motion settings.
Checks if the given li element is the last element of the list with the given meta data.
Yield all nodes in a single list that have the same number in the given meta data.
Get the interleaving level of a li element.
Get the v_merge attribute from the given tc element.
Return the grid span of a tc element.
Get td element at given index
Returns False if the given style is not defined.
Returns true if the bold attribute of the given node is false otherwise.
Check if the given resource is marked as italics.
Check if the given re - style string is underlined.
Returns True if the element is a title.
Yields the XML elements of the text run content.
Get the relationship information for the given tree.
Returns the ordered list type for a given numbering style.
Build a table element.
Get the text content of a tag.
Strip tag from tree.
Find a dataset.
Load a MNIST file.
Plot a list of images.
Plots the neural network representation of the weights.
Plot filters as an image.
Encode the given text.
Add a convolution weight matrix to the model.
Decode the input z using the specified regularizer.
Return the score of x for the autoencoder.
Predict label for input x.
Predict class probabilities for x.
Predict logit for x.
Returns a list of all variables.
Computes the accuracy.
Build an activation from a string.
Generate a reservoir of samples from xs.
Add a loss to the model.
Train the model and return a list of str_ monitors
Builds a graph from the regularizers.
List of input layers.
Returns a list of all the variables in the network.
Saves the pickled object to a file.
Load a pickled model.
Returns the loss of the network.
Returns a networkx graph containing the updates of the network.
The output shape of the layer.
Resolve input shapes.
Resolves the shapes of the outputs.
Log the model parameters and activation state.
Log the shape of all the parameters.
Formats the name of the instance with the given string
Resolve a shape name to a shape object.
Find the parameter with the given key.
Add a bias to the model.
Convert to spec.
Return the logarithm of the gaussian band structure.
Inverse of loggabor function.
Add a tier to the domain.
Remove a tier by number.
Returns the tier with the given number.
Convert to an ELAN object.
Add a point to the reservoir.
Add a new interval to the reservoir.
Remove the interval for the given time.
Remove a time point from the time series.
Returns an iterator over the intervals in the time series.
Returns a sorted list of all intervals of the domain.
Indents the given element.
Add an annotation to the graph.
Add a controlled vocabulary description.
Add an external reference for the given eid.
Add a lexicon reference
Add a linguistic type to the model.
Add a locale for a given language.
Remove all time slots that are not in the timeslot tiers.
Extract annotation data from the ensemble.
Generate a unique annotation id based on the number of time slots.
Generate a unique time slot identifier.
Returns the child tiers for the given tier ID.
Return the interval of the full time slot.
Get reference annotation data after a given time.
Get the reference annotation data before the given time.
Returns a list of tier IDs for the given linguistic type.
Remove all annotations from the specified tier.
Removes the controlled vocabulary for the given lang_ref.
Remove a license from the bundle.
Remove linked files from the list.
Remove the specified property from this instance.
Remove the annotation for the given id_tier at the given time
Remove secondary linked files.
Remove tier by id.
Remove tiers from simulation
Rename a tier in the tree.
Shift annotations by a given time.
Prints debug information about the given storage.
Get the embedding levels for the given text.
Perform explicit embedding and directional overrides.
Given a list of Unicode run runs resolves any bidi types that are different.
Reverse contiguous sequence of characters in chars.
Reorder the resolved levels of a string.
Normalises the path of the current file.
Add an attribute to an object.
Command line interface for the convert command.
Maintain backwards compatibility.
Show the current GUI.
Find the most recent registered GUI and return it
Add files to file menu.
Context manager that ensures that the selection is maintained within the context.
Context manager that ensures that the current time is maintained within the context.
Show no GUI
Yields the cumulative data.
Returns a list of values for the specified axis in the specified dataset.
Draw a constant line.
Loads the parameters for the current transform.
Reverse a mapping.
Generate a range of floats.
Add data to the configuration
Render the graph and return the svg string.
Calculates the left margin of the section.
Calculate right margin.
calculate top margin
Add a pop - up window with the specified label.
Calculates the bottom margin of the section.
Draws the graph.
Make a subelement containing the text for the given datapoint.
Draw the x - axis labels if requested.
Draws the y - axis labels for the current field.
Draws x guidelines.
Draws guidelines for the y - axis.
Draw the titles if they are set
Add inline CSS styles to each node in the document.
Starts a new svg element.
Returns a list of stylesheet resources.
Run a bot in the event loop.
Send data to the socket.
Connects to the server.
Respond to the user with the given message.
Return a tuple of patterns to dispatch to.
Creates a new nick and registers it.
Handle pings.
Handles the registered event.
Run the event loop.
Send a greeting to the boss.
Runs the task queue.
Return a tuple of all possible command patterns.
This method is called when a successful registration is successful.
Worker execute function.
Add a worker to the pool.
Send validation email.
Sends a password reset email to the user.
Verify a signed email address.
Remove the user s avatar.
Check if the request should be throttled.
Return a docker client for this instance.
TLS client.
Return the name of the service.
Call a docker method.
Wrapper for _docker. submit
Check status of running tasks.
Stop the Docker container.
Lower case the value before filtering.
Update password.
Update password.
Validate email address.
Create a new token for a user.
Delete a token.
Prompt the user to resend their confirmation email.
Handle POST request.
Updates the expiration date of the token.
Email context for password reset email.
Handler for sending an email message
Handler for password reset email.
Handler for sending a validation email to the user.
Get user and token from request data.
Authenticate the user and token.
Show a bokeh notebook.
Processes a list of bokeh plots.
Get custom JS callback.
Returns the widget for the specified parameter.
Render a HoloViews function.
Return a textinput widget.
Convert a list of named objects into a list of tuples.
Returns the owner of the given method.
Assigns authentication values to self. _auth_user and self. _auth_password
Ping the device.
Get information about the server.
Check the health of the server.
Convert a number of bytes to a human readable string.
Return the total number of CPU cores load.
Returns the memory size in bytes.
Get the number of nodes in the network.
List of volumes.
Get a specific volume by id.
Get the total size of a volume.
Returns the percentage of used or total volumes for the given volume as a float.
Return the average disk temperature for a given volume.
Returns the maximal disk temperature for the given volume.
Get disk by disk_id.
Login to Learning Modules API.
Makes a GET request to the specified url using the requests library.
Executes a GET request for the given URL.
Update the url with the current access token.
Returns a synoutilization object.
Returns a synostorage object.
Create a context for the given request.
Return the tenant token for this instance.
Build attributes for this element.
Shortcut to override settings. installed_apps.
Remove apps from settings. installed_apps.
Returns a dict of all global settings.
Handle GET request.
Change a value in the config file.
Migrate a config file to a new location.
Start the OAuth 2. 0 webserver.
Wait for the server to return a response.
Get new access information from the server.
Checks if the token is present in the configuration and if not creates a new one.
Set OAuth 2. 0 access credentials.
Create the manifest table in Amazon DynamoDB.
Split a full path into bucket and prefix.
Check if a bucket prefix is a glacier.
Remove None values from a dictionary.
Add run_id to the manifest in DynamoDB.
Returns True if the run_id is in the manifest.
Extract a schema from an event URI.
Transform a schema string to a format that can be used in a schema file.
Parse a snowplow event string into a list of tuples.
Transform a line of enriched enriched events into JSON.
Convert an enriched event into a JSON object.
Get the template used in a response.
Prints the context as HTML.
Prints all the variables in the scope of the current instance to a string.
Formats a SQL statement in HTML.
Pretty print Django context object.
Format a summary of a dictionary as HTML.
Styles the given text.
Formats the given object with the given context.
Overrides prettyprinter. _format to handle exceptions.
Get a latex token from a string at the given position.
Get a list of LaTeX nodes from a string.
Convert a LaTeX string to plain text.
Convert a LaTeX document to plain text.
Unescape an ASCII string.
Get the organisation information for this organization.
Get a list of boards.
Get members of this team.
Update the organisation for this team.
Remove a member from this team.
Add a new member to this team.
Add a new user to this team.
Fetch list information.
Add a new card to your account.
Fetch label information.
Returns a list of items in this collection.
Update a label by name.
Fetches label json from the API and creates a new label.
Returns the authorisation url for the given application.
Fetch card information.
Get a board.
Returns a list of resources from the API.
Get all checklists.
Add a comment to this object
Add an attachment to a file.
Add a checklist to the account.
Makes a call to fetch_json with the label added.
Get a label from a class.
Add a member to this team.
Returns a dictionary of member information.
Get a list of cards.
Get a list of organisations.
Create a new board and return a board object.
Get board information.
Returns a list of lists.
Get a list of labels.
Fetches a single card from the One Codex server.
Get all checklists.
Get an organisation for this team.
Update an existing board.
Add a list to this collection.
Add a label to this list.
Fetches the checklist information for this account.
Get card information.
Returns a list of ChecklistItem objects for this checklist.
Update an existing checklist.
Add a new item to this collection.
Remove an item from this team.
Update the name of the checklist.
Update the state of the checklist.
Add the authorisation parameter to the query string.
Check for errors in the response.
Builds the URI from path and query_params.
Makes a request to the specified uri_path with the specified http_method. Returns the
Create an organisation object on the client.
Create a board from a board JSON object.
Create a new label on this client.
Create a new list.
Create a new card.
Create a new checklist.
Create a new member.
Get a single organisation
Get a board by id.
Get a list by id.
Get a card by its id and name.
Returns a checklist for the specified checklist.
Get a single member by id or name.
Appends the domain and suffix to the given URL.
Tokenize text with markupless markups.
Set the password for the specified user on the specified service.
Split text with locations.
Mark regex as matched and update split_locations.
Given a regular expression and a set of split locations mark the locations at which they should be split
Main entry point for the command line tool.
Create a cipher object.
Get cipher mode.
The priority of this module.
Check the scheme of the config file.
Invoked by pika when a message is published.
Make a unique ID for this instance.
Connected to the broker.
Handle connacks.
Encode a string.
Decode a base64 encoded string.
Encode a 16 bit integer as a bytearray.
Encode a length value as a sequence of bytes.
Decode a sequence of bytes into a length.
Return the header as a bytes object.
Encodes the Session Token into a header and payload.
Decodes the specified packet into this instance.
Return the header encoded as a bytes object.
Decodes the specified packet into this instance.
Decode this message from a byte string.
Encodes the message header.
Encode the message header to a bytes object.
Decode this message from a byte string.
Encode the message header to a byte string.
Encode the message into a string.
Decode this message from a byte string.
Decodes the given packet into this message.
Returns the URL for this request.
Make a request to the API.
Refresh the list of blocks from the comm.
Format the data to be written to a file.
Fit and transform the data.
K - means clustering.
Predict the class for the given data.
Maps the number of clusters to the number of samples in the clustering.
Sort clusters by means.
Returns a datetime object for the given datetime string.
Returns the total number of points in a dictionary
Get the total time span of the given dict.
Takes an array of values or nominal values and returns a set of unit values according to the
Takes a string and returns a nicely formatted element.
convert analyte to namemass
convert analyte to massname
Collates all files with the given extension into a single file.
Given a bool_array return a numpy array containing indices of the booleans in that array.
Convert a list of tuples to a one - dimensional boolean array.
Fastsmoothing with convolution.
Fast gradient of an array.
Find the minimum of two strings.
Perform meanshift clustering on the given data.
K - means clustering.
Get the defined SRMs as a numpy array.
Read LaTeX configuration.
Read latoolscfg and configparser
Copies a. srm file to the desired location.
Exclude the downholes of a boolean mask.
Make a plot with auto - range plot.
Create the indices of the background signal signal and trn.
Ratio of analytes to the internal standard.
Calibrate the time series with the given parameters.
Returns a dictionary mapping namespaces to their ablation times.
Calculate correlation between two antennas.
add a new filter
Get the parameters of the filter.
Plots histograms of the data.
Load reference data.
Calculate the mass of a molecule
Generate keywords from namedtuples.
annihilates the elements of the stack that do not satisfy the predicate.
De - duplicates a stack.
Performs a Gauss - Weighted Stats on the input data.
Generalized Gaussian function.
Standard error of an array ignoring NaNs.
Return a list of samples.
Calculate the ratio of all the stages.
Make a subset of samples.
Apply a classifier to the data.
Filter the subsets by number of removed elements.
Filters the reports in the specified samples using the specified filter string.
Minimally export the traces to CSV.
Saves the log to a file.
Fold the function fa to z and add the result to g.
Bayesian Bayesian Scale.
Scale a median value to the range [ - num_ num_ )
Circularly convolve a signal using a dipole - dipole approach.
Repeatedly decay a signal by expdecay_despike
Add a new component to the model.
Remove a component or a set of components.
Remove all components components parameters and switches.
Remove unused components and switches.
Return the key of the fuzzed sequence.
Grab a filter from the dictionary.
Return information about the loaded components.
Writes the log to a file.
Reads a logfile and returns a list of tuples where the first element is the filename
Get modem information.
Send a message via modem.
Parse a MySQL file or string.
Returns the nb viewer link for the given url.
Returns the HTML for the thumbnail div.
Snippet that divides the code by the code example.
Returns the code example of the notebook.
URL of the viewer.
Get the output file name.
Create a Python file from nb.
Download the specified number of files.
Create a thumbnail of the last num_ pictures.
Scales an image to a given maximum size.
Saves the thumbnail if it exists.
Copy the thumbnail figure of the notebook to the output file
Returns the URL for the given notebook file.
Yields all language codes that are not in db_table_fields
Process thumbnail_file according to size.
Resizes the file if necessary and saves it.
Return all thumbnails.
Creates a thumbnail of the specified size.
Deletes the thumbnail for the specified size.
Creates a thumbnail.
Get a thumbnail for the specified image.
Deletes the specified thumbnail.
Called when a message is received from the server.
Add a subscriber function to the subscriber list.
Returns a set of all states that this message was in.
Send the given message.
Returns a dictionary mapping provider names to receiver blueprints.
Called when a message is received from the provider.
Called when a status message is received.
Forward an incoming message to a list of clients.
Signs a transaction with RLP - encoded RLP and RMS - signed.
Estimate the amount of gas the tx would take to spend using the ethereum block
Estimate the gas cost of a transaction.
Write to the socket.
Read a line of data from the serial port.
Check if the message has any bad headers.
Attach an attachment to this message.
Register one or more services.
Import configuration from a module.
Register resources.
Returns the value for the given key or raises a valueerror if it doesn t exist.
This method is called when an object is exited.
Setup the service.
N - dimensional power law.
Solve the Cauchy equation.
Performs a DELETE request.
Returns true if the paths match.
Create a new symbolic link.
Initialize the global logger.
Raise a usage error with the given message.
Claim a set of vcf file readers from mutect.
Returns the new column header based on the vcf_reader.
Claims a set of VCF files that have been collected.
Initialize population statistics from the vcf file.
Claims the file readers for all callers. Returns the unclaimed file readers and
Split data into a list of lines.
Return the first line terminator that starts with a prefix.
Return the line terminator for the given data string.
Searches for the next line in the file and returns the position of the next line.
Returns the position of the previous line in the file.
Returns the last lines of the file.
Returns the first lines of the file.
Follow the file.
Claims a set of VCF input files from a set of strelka files.
Parse a VCF record from a string.
Create sample tag values for each sample in the specified sample fields.
Format the tags for the VCF record.
Join info fields from self. info_dict into a string.
Returns a string representation of the tag field.
Returns sample field as a concatenated string.
Return a stringified version of the VCF.
Add a tag value for a sample.
Add a new filter or replace an existing one.
Return a list of all available categories for the user.
Create a products form for the given category and products
Return a form suitable for staffproducts.
Adds an error for the specified product.
Returns a form class that will create multiple choice fields for a given model.
Returns the pending or purchased items in the basket.
Sends an email.
Parse an OSM file.
Iterate over OSM notes.
Returns True if the condition passes the pre - filter.
Return True if the user meets the filter.
Returns the remainder of the quantity for the specified user.
Filter queryset by user s cart status.
Filters the queryset based on the status of the user s cart.
Filter queryset to include only items that are relevant for the current user.
Pre - filter queryset to include cancelled proposals.
Filter the list of groups for the user
Returns a cart for the given user.
Automatically calculates the reservation duration based on the number of vouchers and product items
Apply a voucher code to the cart
Makes sure that all vouchers in the cart are valid and that all quantity quantity quantity
Recalculates the discounts for all products in the cart.
Returns an iterator over the rows of the table.
Returns the form to be used for the given request.
Render the data using the appropriate renderer.
List of all available reports.
Returns a report of all line items that have been sold.
Returns a report of payments.
Returns a report of refunded credit notes.
Returns a list of cart items with the status of the selected products.
Returns a list of cart items with the status of the discounts.
Returns a list of line items for the specified products or categories.
Returns a list of paid invoices grouped by date.
Returns a report of credit notes.
List of all invoices.
Displays a list of attendees and their profile information.
Return a list of users who have signed up for speaker sessions.
Return the set of missing categories for the current user.
Returns the number of credits available for use in the current invoice.
Checks if the attendee is sold out and not registered.
Edit profile page.
Handle a profile request.
Handles the product form.
Handle a voucher request.
Perform a manual payment for an invoice.
Refund the invoice.
Extend the reservation for the specified user for the specified number of days.
Send out an email for each invoice.
Manage badges for invoices.
Render badge.
Returns a list of discount objects that can be fulfilled for the given user and categories and products.
Annotate queryset with past use counts annotated.
Return a list of available products for the user.
Applies this payment to the given invoice.
Returns the cancellation fee for this credit note.
Generate a random access code.
Get an object from a dotted name.
Returns an invoice for the cart.
Generate a manual invoice.
Applies credit notes to the invoice.
Check if the user can view the invoice.
Refreshes the invoice from the database.
Validates that the invoice is valid and that the cart is valid.
Updates the status of the invoice.
Marks the invoice as paid.
Checks if the invoice matches the cart.
Checks if the invoice matches the cart and if not refunds or refunds the invoice.
Marks the invoice as void.
Refund the invoice
Sends an email to the user who created the invoice.
Update the annotation with the given data.
Flatten a field into a flat dict.
Prints all downloads of the annotation file.
Download the value of a particular annotation field.
Returns a list of processors. If processor_name is specified only return the processors with that name
Print the processor s inputs.
Runs data from a JSON string
Upload files to a project.
Uploads a file to the server.
Download data for one or more data objects.
Recursively get subclasses of a class.
Get repo and project IDs.
Given a variant_id_list of phenotypes return evidence and suggested changes for each variant
Yields evidence and final phenotypes with suggested changes merged.
Update the object with the latest data from the API.
Remove duplicates from a sequence preserving order.
Authenticate using Asana and Github API.
Prompts the user to select from a list.
Get the saved issue data for the given issue number.
Move the saved issue data for the given issue number to the given namespace.
Get the task data for the given task number from the datastore.
Get the ASAN task for the given asana task ID.
Apply the given value to the given key.
Flushes all pending items from the queue.
Create a task that does not exist in the Asana workspace.
Return a list of data types for this project.
Log a message to the EkmMeters log.
Initialize serial port.
Set the polling values.
Return the JSON of reads since the given timestamp and meter
Set the context string
Calculates the fraction of free - to - inductive lag.
Set the maximum demand period.
Set the password for the meter
Return the readmonths buffer.
Add a schedule to the model.
This function is used to assign a new season and schedule to the model.
Assign a holiday date to a month and day.
Read the specified tableset from the device.
Read monthly tariffs of the specified type.
Read daily dates from the bus.
Return True if all read settings have been loaded.
Write a command message to the log
Perform password authentication on the serial port.
Loop through all observers and call update method
Request a transfer from the KNX bus
Request the ADC from the meter.
Request a byte from the meter.
make a case insensitive comparison of the field names.
Set one or more LCD commands.
Set relay status and timeout.
Post - end the serial port
Set the pulse input ratio.
Set zero resettable kwh.
Set the LCDd IDs.
Iterate over all fields in a schema.
Recursively iterate over a schema.
Generates a random text.
Returns a string with timing and result statistics.
Color the given text with the given color.
Print text to the terminal.
Summary of a test result.
Parses command - line arguments.
Sets up ivoire based on the given config.
Runs the example.
Runs a transform script from the given configuration.
Transforms a describe node into an AST classdef.
Transform the body of a describe statement.
Transform an example node into a functiondef.
Replaces the context variable in the example body with a string.
Return an ast. arguments node that only takes self.
Register the path finder for this class.
Transforms a byte string into a Python code object.
Parses the arguments using the given argument parser.
Load a module by its name.
Load modules from a directory or list of paths.
Discover packages in a given path.
Remove a configuration child.
Restart a stopped message.
Call a function with the given results.
make a service object
Refreshes the session information for the specified node.
Remove expired nodes from the nodelist.
Remove a node from the node list.
Get the last time a node was updated.
Get all nodes in the cluster.
Refreshes the session by removing expired nodes.
Increment the times_modified_key by ttl.
Delimit values to a list of strings.
Check if the given path is bad.
Merges another Status into this one.
Query for documents whose identifier matches the given value.
Query the database for the given value.
Create a multiservice object.
Parse the reader and return the result.
Return an optional parser that parses the given parser.
Return a repeatedonceparser that parses one input.
Return a parser that parses the given parser.
Return a parser with the given parser and separator.
Return a parser where the separator is seperated by the parser.
Close the stream.
Check if the URL is valid.
Add a heart service if it doesn t exist.
Wrap a service in a multiservice.
Freezes a graph from a checkpoint.
Saves the sess and freezes all output_node_names to output_file_path
Saves graph only from input checkpoint.
Save weights from a checkpoint.
Restore from a checkpoint.
Create an instance of this class from the given parser and token.
Render the tag.
Validates that the specified number of arguments are within the allowed range.
Return the context data for this tag.
Create a new Tag instance from a parser and token.
Get the context data for this tag.
Convert a caffe model to a tensorflow session
Freeze a caffe model
Saves a caffe model to a file and freezes the graph
Create a set of rows from the given sequence.
Yield every other item of an iterable.
Remove duplicates from an iterable.
Returns the next item from iterable and the original.
Yields all callables except some exceptions.
Raises an AssertionError if the iterable is not ordered.
Swap on miss.
Get the first n queues.
Resets the iterator to the original state.
Extract as_var from the token.
Return the descendant public keychain for the given chain_path.
Iterate over all nodes that contain a given object.
Parse a selector string and return a boolean value.
Parse a selector string.
Returns the list of nodes in rhs that are parents of the lhs.
Returns the siblings of the nodes in rhs that are siblings of lhs.
Match nodes using a list of validators.
Make a GET request and return the response body.
Expires the cache.
Set a key to a value and persist.
Get a value from the cache. Returns none if the key is absent.
Returns True if k exists in the cache False otherwise.
Checks if the chain is valid at the given timestamp.
Create a FrequencyOutput from a JSON string.
Create an instance of this class from XML.
If the Django version is lower than Django. VERSION_NUMBER_PREVIOUS this will
Call a function on each line of the log file.
Get a list of rows from the table.
Validate a token.
Get fernet engine.
Validate token using supported digest algorithms.
Create a secret link token.
Computes 32 - bit counter.
64 - bit counter
Calculates the average duration.
Create sources and setup triggers.
Send an event to the specified source.
Monitor sources and start them if necessary.
Parse the format string.
Parse a line into a dictionary.
Validate the expires_at.
Verify the token passed in in the request and store it in the session.
Return device or browser name.
Warn a node if it is not a child of the current node.
Connect the signal receivers.
Create a secret link.
Sends an accept notification for the given request.
Send notification for confirmed record.
Send email confirmation notification.
Sends a reject notification for the given request.
Send a notification via email.
Create a new link.
Validate a token and return True if valid False otherwise.
Flag the link as revoked.
Create a new record.
Get receiver by request_id and user.
Send email confirmation email.
Create a secret link.
Generate a sha512 hash for the given parameters.
Verify the signature on the given message.
Check if the record is already persisted and is not expired.
Process an access request.
Send confirmation email.
Return an sshcommandclientendpoint object.
Reverse the value of a column.
Return the currently selected item as a string.
Return all the items in the menu.
Returns the version of the file.
Add a new version number to the file.
Start timer.
Tick the service.
List of pending access requests.
Stop the thread.
Empty the queue and send the events.
Receive events from the socket.
Create client and start t
Encodes an Event proto message.
Encodes a list of events into a protobuf message.
Decodes a string and returns a protobuf message.
Send events to the socket.
Generate a preview of a file.
Retrieve a file preview.
The main loop of the worker.
True if the timer should be logged. False otherwise.
Abort the SASL session.
Do the SASL - PRE mapping.
Tag to render the admin footer.
Builds payment parameters for a payment.
Builds paymentparameters object for register credit card request.
Sends a request to the datatrans service to pay the given amount with the given alias.
Get the version string.
Connect signals to the system widget
Configures the shortcuts for the up button.
Activate file item.
Called when the user selects an item from the filesystem
Navigate to item.
Finalizes the options.
Fetch all children of this node.
Return the icon associated with the source at the given index.
Fork a child process and then call it.
Return the maximum file descriptor limit for the current number of channels.
Close the given file descriptor.
Close all open file descriptors except self. exclude_fds.
Redirects the stream to the specified target.
Set widgets attributes for each field in the given form.
Import a module from an application.
Import all submodules for a given module_name in all installed apps.
Includes a template tag.
Checks if the given path is a valid file system path.
Check if the given url is a valid S3 URL.
Returns the absolute path to the template file.
List objects in bucket.
Builds the JSON for the wfow.
Execute the workflow
Archive a folder.
Recursively create a directory.
List the files in the project archive that match the given pattern.
Restore the last num_ files in the folder.
Create a new API client.
Returns a list of files for the specified path.
Downloads the file specified by path to the specified local path.
Checks if the given path exists on the server.
Returns the parent entity for the specified path.
Creates a new folder at the specified path.
Uploads a local file to the bucket.
Deletes the specified file or folder.
Validate a storage path.
Create a new Azure Storage account.
Create a new authenticated request.
Get the metadata for the specified entity.
Deletes a project.
Deletes the specified folder.
Copies the content of the specified file to the specified endpoint.
Returns the URL for the file with the given ID.
Emit a record to the collection.
Returns a string representation of the given service and version.
Returns a new instance with the specified headers.
Returns a new instance with the specified parameters added.
Throw an exception of type exception_class with should_throw.
Return list of fields to display.
Map a function over a set of samples.
Run oncotator tool
Sorts the list in place.
Returns a list of timestamps.
Load an export from a folder.
Shift each element of the sequence by t.
Returns the sum of all the values in the matrix.
collect rfxcom data.
Create a new user record in the database.
Parse vn results.
Parse release results.
Parse the production staff results.
Parse the results of a character search.
Parse the results of a tag query and return a list of strings.
Parse user results.
Create a tarball of file paths.
Loops through a list of file paths and copies the files to the output_dir.
Copy a global file from the filestore to the output_dir.
Add host option to docker parameters.
Refresh the metadata from the database.
Returns a list of StreamMetadata objects for all streams in the registry.
Export data to a directory.
Parses the results for the given search type.
Resets the API key and returns it.
Returns a list of users.
Run bwa index tool
Returns connectordb object
Add a stream to the database if it does not exist.
Force a stream to be added to the database.
Insert a value into the database.
Start synchronization.
Stop the background thread.
Download a URL to a local temporary directory and write it to the jobstore.
Upload a global file to S3.
Print all labels for a given ontology.
Generate a hierarchy of obo Terms.
Get the mean insert size of a bam.
Create a new database record.
Export data to a JSON file.
Device object for this path.
Get labels for a given ontology.
Get an OLS hierarchy for the given ontology.
Returns the contents of the config file.
Get the mount path of the current Docker container.
Add an option to the arg_parser.
Creates the argument parser.
Create the command to run the pipeline.
Set authentication for request and websocket.
Handles the result from the server.
Ping the server
Creates a new resource at the specified path.
Updates the object at the given path with the given data.
Deletes a CRUD object.
Subscribe to a stream.
Return list of devices.
Run cutadapt on both IDs.
Run the samtools faidx tool.
Run samtools index for the given bam.
Run SAMBamba markdup.
Run a samblaster tool.
Run Picard to mark duplicates.
Run Picard sort on the input bam.
Run kallisto.
Returns the user affinity matrix for the test set.
Sends a command to the websocket.
Subscribe to a stream.
Connect to the websocket server.
Reconnect to the device.
Resubscribes all subscribed streams
Callback function called when websocket connection is established
Callback function called when websocket connection is closed.
Callback when an error occurs in a websocket connection.
Called when a websocket message is received
Ensures that the connection is still alive.
Select variants using GATK.
Quickly check a BAM file for consistency.
Write configuration to a JSON file.
Get the configuration file.
Returns a single ontology term for the given IRI
Search for an ontology by name.
Suggest a name for an ontology.
Returns a generator of terms that are descendants of the given ontology and iri.
Iterate over the labels of the descendant iri of the given ontology.
Iterate over the labels of the ontology.
Yields all terms and children of this term in the hierarchy of the ontology
Run the fastqc tool.
Add a stream to the query.
Start the container and return its hostname.
Start the HDFS cluster.
Start the HDFS datanode
Stops the container.
Check the status of the container.
Looks up a hosted zone by name.
Fetches the configuration from the R53 API.
Merge a list of configuration chunks into a single XML document.
Validate a changeset XML document.
Returns a list of members with the best fitness score.
Returns the fitness score of the group.
Returns the average cost function value for this group.
Returns median cost function value of all members.
Returns a dictionary with the current parameters.
Returns the members of the group.
Adds a parameter to the function.
Normalize the keys in a dictionary by replacing all keys with %s.
Returns a generator of environment variables.
Executes callable and returns True if it throws any of the specified exceptions.
Transform a list of package hits into a list of packages.
Transform the result of a call to the correct type.
Convert html to xhtml.
Convert an XHTML document to HTML.
Open a document in a web browser.
Drop this node from the tree.
Drop tag and text from parent.
Return a copy of this document with some CSS selectors applied.
Generator of members of all log handlers.
Returns a dictionary mapping environment variables to the number of times they occur.
Checks if the module is running on a single class.
Returns True if module is single module False otherwise.
Check that the request contains correct params.
Check that the ID in the request is correct.
Decode path using sys. getfilesystemencoding
Escape all string - valued arguments in an object.
Return the codec name for the given encoding.
Detect the encoding of the stream.
Returns the remote address for the given forwarded address.
Convert amount to decimal.
Create an ElementTree from a string.
Parse an XML file and return an ElementTree.
Convert BeautifulSoup tree to HTML.
Get the traceback for the current exception.
Return the exception as a string.
Renders the HTML summary.
Generate a sequence of strings representing the traceback in plaintext format.
Render the source table as HTML.
Return the portion of the egg info that matches the search_name.
Sort links by egg_fragment.
Get the Content - Type header of the given url.
Yields all links within the document.
True if this key is verifiable. Otherwise False.
Finds all data files for a package.
Return a list of files that should be excluded from package data.
Parse a requirements file.
Yield lines from iterator that end with a trailing newline.
Ignore all comments in the iterator.
Visit a node and raise a syntax error if the node is not allowed.
visit an Attribute node by returning a fresh instance of it
Coerce a string to a number.
Push the current app context onto the stack.
Pop the current appcontext off the stack.
Return a copy of the current instance
Match the current request against the configured adapter.
Push the current request context onto the stack.
Check if a distribution is editable.
Add a URL value preprocessor function.
Add a url defaults function to the blueprint.
Get the root path for the given import.
Jinja template loader.
Run completion script.
Get the domain of the cookie for this application.
Check if the root of wheeldir is a pure library.
Yields the paths to the uninstallation files for the given distribution.
Check if the version is compatible with the installed wheel.
Build a wheel from a requirement.
Iterates over the names and constants of a code object.
Write the contents of the delete_marker_file in the specified directory.
Returns True if running under a virtualenv.
Get the user s username.
Create a scheme for installing a distutils package.
Parse the Cache - Control HTTP header.
Cache the response if necessary.
Loads a template from the given path.
Saves the current state of the configuration to disk.
Convert the given value to the appropriate type.
Add filters to filterer
Add handlers to a logger
Configure a common logger based on a dictionary config.
Execute a python script file.
Temporarily overrides the temporary directory for the duration of the context.
Get the URL and revision for this repository.
Get an item from an object.
Generate code from source code.
Get the default cache location based on environment variables.
Find eggs in a zip file.
Yield distributions found on a path item.
Declare a namespace package.
Get the mro of a class.
Find an adapter for the given object.
Ensure that the directory for the given path exists. If it does not create it.
Iterate over all entry points for a given group.
Returns True if the given distribution can be added to this distribution.
Evaluate the marker in text.
Run markerlib and return the result.
Formats the given record using this logger s formatter.
Returns the decimal quantum for the given precision.
Get the precision of a decimal number.
Return scientific notation elements.
Unpatches a class so that it doesn t have to be patched.
Check that the requirement string is valid.
Fetch the build egg for this distribution.
dice roll.
Convert price string to Price object.
Creates a price attribute.
Validate the given request.
Get the method from the app.
Apply method with args.
The module that this blueprint is defined in.
Return the blueprint for this request.
Makes an abstract dist object from a requirement.
Walk the requirements and install any undeclared requirements.
Return a list of all namespace packages in the distribution.
Encode obj as a JSON string.
Tokenize a docstring with an annotation.
Annotate tokens_old with tokens_new using the HTML algorithm.
Copy annotations from src to dest.
Compress a list of tokens.
Serializes a list of tokens using markup_func.
Expands a list of tokens into a list of HTML tags.
Finds the end of the unbalanced string.
Given a list of chunks return a list of token objects.
Flatten an HTML element tree.
Split text into words.
Return start tag string.
Return end tag and extra text.
Serialize a DOM fragment into an HTML fragment.
Fixup in - place tag insertions and deletions.
Builds the cache URL for the specified operation.
Recursively link all elements in el that match link_regexes.
Kill conditional comments.
Extracts a DOM document from the given HTML string.
Exports the repository to the given location.
Get the revision number for a particular location.
The name of the module to be imported.
True if propagate_exceptions is True. Otherwise False.
Try to auto - find the instance path for this class.
Update the given template context.
Handle an HTTP exception.
Handle the given exception.
Raise routing exception if debug = True and request. routing_exception is requestredirect.
Dispatch the request and return the response.
Create a default OPTIONS response for this request.
Create a URL adapter for the given request.
Inject default url values into the given endpoint.
Yield unique values from iterable preserving order.
Handle packages that may require a given package.
Converts a pip. requirement. Requirement to a string suitable for inclusion in a requirements distribution string
Convert a pkg_info. txt file into a metadata. txt file.
Yields all the modules in the directory.
Yields all the classes in the module.
Yields the names of the methods of all classes and functions.
Checks if the given path is a module path.
Yields the directories and files for the given base directory.
Dump default values into kwargs.
Load default JSON decoder.
Set multiple keys and values in the cache.
Increments the value of a key by delta. If the key does not exist it is initialized
Dumps an object to a string.
Build a dict of editable options from a request string.
Populates self. link using finder and upgrade.
Ensures that self. source_dir is set and returns its path.
Removes the temporary build directory if it exists.
Return a pkg_resources. distribution object for the installed egg.
Return a list of paths to the site - specific configuration directories for the specified application.
Iterates over all module files.
Restart the process with a loader.
Convert a string to a plain text.
Try to find a CA bundle.
Parse a docstring using the specified treebuilder.
Parses the given stream as HTML and returns a DOM document.
Parse the specified stream as a fragment and return the root element.
Return a list of translations for the given word.
Reads a file and converts it into a list of tokens.
bind to the server
Print the report message to stdout.
Loads bytecode from a file - like object.
Transform a dictionary of stylesheet parameters into a dictionary of stylesheet parameters.
Run a subprocess.
Get the current implementation version.
Return a list of distros for the given location and basename.
Find external links in a page.
Open a URL using the local urllib2 library.
Return a list of paths removed from sys. path.
Return a set of all directories in sys. path.
Add a Python package to the system path.
Add all packages in the given site directory to the list of known paths.
Check if the user site is the same as the system site.
If sys. platform == str_ then use the default codec for encodings.
Set the sys. setdefaultencoding function to the default locale.
Forces global eggs after local site packages.
Fixes the classpath in sys. path.
Wrapper around subprocess. popen that uses threading to enqueue lines of output.
Check if there is a pyrex build extension installed.
Convert PyX sources to the target language.
Run the application and log the traceback.
Returns a response with the contents of the specified resource.
Check if the given name is a valid URL.
Unpack a file from a URL.
Download a link using HTTP session.
Check the download directory for a given link.
Format a currency.
Register a exchange between two currencies.
Decode the data using the decoder.
Return the default template context processor.
Render a template and send the template_rendered signal.
Render a Jinja2 template with the given context.
Render a template string using the jinja environment.
import parse_version from pkg_resources
Returns True if the name is declared in this scope False otherwise.
Visit a variable name node.
Visit a fromimport node.
Factory to create a HTTP service and serve forever.
URL encode a string using the specified character set.
Given a list of wheels return a list of wheels that match req.
Populates a requirement set.
Export the archive to a specific location.
Lookup Amazon Products from the API.
Iterate over pages.
Returns the ancestor node of the current node.
Returns a list of amazonbrowsenode objects for this node.
Safely get an element from a path.
Safe get element text.
Safe get element date.
Price and currency.
List Price.
Override the default send method to add caching headers.
Cache the response if necessary.
Takes a string and returns a titlecased version of it.
Return True if val1 == val2 and False otherwise.
Verifies the signature for the given key and value. Returns True if the signature is valid False
Derives the secret key based on the key_derivation attribute.
Derives the signature for the given value.
Sign the value.
Verifies the signature on the value.
Unsign the value.
Sign the value.
Verify that the signed value is valid.
Serialize obj and return a serialized string representation.
Raise a ServiceException based on a server error.
Yield packages without parent packages.
Yields all relative paths to all directories under base_path.
Prepare the response for the given request.
Unsign a wheel file.
Unpack a wheelfile into a directory.
Install wheel scripts for all distributions.
Arranges the graph to cover all the data.
Redraw the canvas of the graph.
Returns the node with the given id.
Change the connection string of all edges in the graph.
Callback when edges are added to the graph.
Called when a canvas component is changed.
normal left click event handler
Called when the diagram canvas is changed.
Clears the current canvas.
Called when a domain model is changed for a diagram.
Unmaps an existing model element.
Maps a single element.
Parse xdot data.
Process font.
Process ellipse.
Process polygons.
Process a list of tokens representing a polyline.
Process text.
Process image.
Render a GridFS file.
Saves the given object as a dot file.
Loads the object from the dot file.
Returns True if the given point is within the box.
Draw the bounds line.
Perform the new graph wizard.
Create the sqlalchemy engine and session.
Parse self. dot_code and set self. model.
Create a new model.
Open file dialog and set the model attribute.
Save the assembled model to a file.
Saves the current model to a file.
Configures the graph based on the given info.
Configures the nodes of the model.
Configures the edges of the model.
Goes to the about view of the info widget
Add a new node to the control graph.
Add a new edge to the control graph.
Adds a subgraph to the control graph.
Add a cluster to the control graph.
Request a graph to be edited.
Godot options.
Configures the dot code for this widget.
Prompt user for exit.
Move components to their origin.
Save to file - like object.
Load object from file like object.
Save the instance to a file.
Load object from file.
Create a property that will alias the value of the property with the given name.
Parse a text file into a generator of words.
Returns a list of start words.
Add a markov chain to the model.
Remove chain from self. chains.
Builds the chain from the source.
Create a new dot file.
Remove a node from the graph.
Returns the node with the given id or none if no such node exists.
Deletes an edge from the graph.
Add a subgraph or a cluster to the graph.
Callback when a program is changed
Set the _nodes attribute of each edge in the graph.
Parse a graph from a DOT file.
Parse a DOT file.
Build a top - level graph from a list of tokens.
Given a number of seconds return the corresponding time units and multiplier.
Formats the given number of seconds in a human readable format.
Called when the user clicks on a new file path.
Creates the UI for the graph edit
Break an iterable into windows.
Returns the list of children of the given object.
Append a child to the graph.
Insert a child into a subgraph or cluster.
Delete the child at the given index from the given object.
Called when children of the object have been replaced
Called when the children of the object change.
Get the label for the object.
Set the label of the object.
Called when the label of the object changes.
Initialization method.
Updates the editor based on the current object.
Add node and edge listeners to the object.
Callback when nodes are replaced.
Callback for nodes attribute.
Add the given features to the graph.
Replace edges old with new.
Callback for edges attribute.
Add edges for the given features.
Parse an xdot directive.
Called when the canvas is drawing.
Generate a node object.
Factory for creating an edge between two nodes.
Initialize the database connection.
Parse the xdot drawing directive.
Parse the Xdot label directive.
Called when drawing properties have changed.
Called when the position of the widget has changed.
Called when the position of the widget has changed.
Called when a right - down mouse button is clicked.
Highlights the Info section of the documentation.
Draws the main layer of the turtle.
Checks if the given point is inside this polygon.
Draws the main layer of the turtle.
Dispatches an event to all registered engines.
Run the loop.
Returns the full url for the given page number.
Renders the previous and next links of the page.
Renders the seo links for the current page.
Create a URL identifier from user and password.
Discovers modules in a given directory.
Searches for modules in the specified directory.
Returns a list of module paths for the specified module.
Ensure that a directory exists.
Store the given text contents under the given key.
Checks a card number for Luhn check.
Loads a module and returns it.
Adds the specified path to the list of paths.
Searches for a module with the given module name.
Splits a line into multiple lines.
Remove all namespaces from the root element.
Return a string describing the consistency of the package.
Create a new instance from a dictionary.
Merge a dictionary of actions into this one.
Executes the actions specified in the configuration file.
Add details to the error message.
Emit a record.
Add rendition information to context.
Record the number of attempts for the given key.
Add url to queue.
Start the worker threads.
Set a value in the key - value store.
Get a value from KVStore.
Recurse down the list of key - value pairs associated with the given key.
Returns the value for the specified key.
Delete a key - value store entry.
Plot a clustermap using sns. clustermap.
Add a number of months to a timestamp.
Add a number of months to a date.
Checks if the current date is a christmas period
Use a music service.
Use a Google Storage service.
Reads in a CSV file and returns a pandas dataframe and a list of labels.
Return a list of lists from the JSON file.
Writes the x y data to a JSON file.
Returns a list of tuples where the first item is the reference label and the second item is
Returns a dictionary containing the mean of all the samples in x and y filtered by the reference label
Restores the session data.
Recursively merge dict b into dict a.
Find blocks for all installed apps.
Verify that the given block is valid.
Register a new block.
Unregisters a block type.
Convert a file to a MP3 file and put it in the queue.
Given a desired version return a reasonable update string.
Handle SSL redirect.
Parses a content type string.
Parses the given value into a list.
Resize an image to fit a given width.
Download youtube video.
Connect to the remote server.
Uploads a file to the server.
Connects to the music folder
Update the input filenames.
Read a phi value from file.
Multiply the a_phi by scale_parameter.
Read pure water absorption from file.
Read pure water scattering from file.
Read the wavelengths from a CSV file.
Write a scipy. nditer object to a file.
Build scattering fraction.
Equation for the A.
Build self. c.
Build all IOUs.
Set batch parameters.
Read a parameter file into a dictionary.
Convert a string to a list of floats.
Set handler for given signals.
Pseudo - handler for warning messages.
Default signal handler.
Pause the process for the specified number of seconds.
Exit the application with the given exit code.
Call all status callbacks.
Remove event from event_list.
Fetch a metric from the server and return a sorted list of its values.
Get the signature information from a function.
Populate the instance variables of this signature from a partial one.
Return a copy of self. argv and a copy of self. extra_argv.
Check if a file should be ignored by Metainf.
Return the priority and file path for a given filename.
VLQ - > int
Parse the header of the archive file.
Convert seconds to duration.
Print the details of the game.
Reads the data from the ui elements.
Opens the file dialog and displays the result.
Writes the batch to disk.
Process the data file.
Display the graphic connection.
Displays the error message.
Hides the error message label.
Runs the batcher.
Cancel planarrad if running in normal mode.
quit the application.
Saves the current figure.
Opens the log file and shows the log window
Open the documentation in a window.
Prerequisite actions
Handles num_ button clicks.
Called when the mouse is moved.
Display the graphic at the specified coordinates.
Given a genesis voteblock sign it and return the lockset.
Sign this signature with a private key.
Return the hash of the message.
Checks that the circuit is valid.
Issue funds.
Returns the last lock or none if none.
Returns the last voted block proposal.
Returns the last valid lockset or none.
Get the timeout in seconds for this proposal.
Called when a proposal is received from the master.
Generate a list of hex - encoded private keys.
Return the delay to send a packet.
Extend the deliver method to add a round timeout if needed.
Convert an instance address to a native contract class.
Update filter with new data.
Inverse of img_from_vgg.
inverse of img_to_vgg
Returns the function layer of the specified name.
Returns the output of the specified layer.
Returns a dictionary of features for the given input x.
Generate a new key and write it to the specified file.
Finish the acquisition and return the exit code.
Release the lock
List of tables in the database
Fix the compile of distutils. ccompiler.
Find the latest teradata installation version.
Get the value for the given key.
Set the config value for the given key.
Prints a table of text to the log
Write the default configuration file.
Set the filter to return only the specified columns.
Fetch data as a string.
Convert string to float and multiply by multiplier.
Returns a dictionary of specific gains.
Return a dictionary of device settings.
Wraps the given text with the given indent.
soapy_args = soapy_args or str_
Set the center frequency of the PSD.
Returns the result of the FFT and the pwr array.
Wait for the specified number of PSD futures to complete.
Update the state of the PSD using Welch s simple spectral method.
Read the pwr_array from the file - like object f.
Write the PTR data to the file - like object f.
Submit a function to the pool.
Return the number of samples to repeat for the given integration time.
Create a buffer for the audio.
Set up the internal data structures.
Stop streaming.
Run cmake.
Return a set of datetimes that are older than number.
Mask a datetime. datetime object.
Return a time mask for the given date.
Return a list of datetimes to delete.
Return a set of dates to keep.
Returns a set of dates to delete.
Get the SPI control byte for the given command.
Reads the specified bit from the specified address.
Write a single bit to an address in memory.
Given a bit pattern return the number of bits that match.
Tries to bring the gpio interrupt pin into the userspace.
Set the gpio interrupt edge.
Waits until the specified file exists.
Register a pin function.
Deregister a pin_num or direction.
Enables gpio interrupts.
Send bytes_to_send to the SPI interface.
Render the tab.
Returns True if the given form has any errors.
Render the link to the form.
Extract the version from the configuration file.
Returns the keyword arguments for instantiating the form.
Check the status of the response.
Make a GET request to Github s API.
Calculate the humidity.
Calculate the dewpoint given the temperature and hum.
Publish the message.
Calculate the CRC for the given data.
Verify that the given data is valid VCR.
Unpack Storm date to Storm format.
Determine if we should use the reverse bit mask archive.
Wake up device.
Send a command to the device.
Get new archive fields from the device.
Parses the fields of the archive.
Update weather data in a list of pub_sites
Initialize logging.
Returns a list of public services for the given opts.
Get the current value of the gust.
Set the parameters for the calculation.
Set the arguments passed to the optimizer.
Publish the configuration to a file.
Fulfill the given requirements.
Push a new override context onto the stack.
Pop the current override context from the stack.
Temporarily override a value in the context.
Push an additional context onto the stack.
Pop an additional context from the stack.
Context manager to add an additional string to the context.
Takes a list of field names and returns a list of field names without duplicates.
Interpret stats results into a string.
Extract params from query.
Returns a pandas dataframe representation of the DataFrame.
Get a networkx graph representation of the graph.
Plot the data.
Returns a CSV representation of the result.
Return the context data for rendering this widget.
Returns a sorted list of tuples of widget name widget widget position
Returns a list of widgets that need to be updated.
Register a dashboard widget.
Unregisters a widget class.
Returns the last update string for this dashboard widget.
Save a setting for this widget.
Return True if we need to update.
Concatenate two RDDs.
Check if the arguments passed to the function are valid Spark arguments.
Format axes.
Wraps the given function to return an array of the given shape and type.
Aligns the shape of the array along the given axes.
Convert to a spark array.
Convert this RDD into an RDD of integers.
Given a plan and a shape returns a list of integers representing the number of elements in the plan
Create a boolean mask from a list of indices.
Repartition the RDD.
Stack the elements of the RDD.
Align self with axis.
Returns the first element of the RDD
Compute the mean across records
Compute the variance across records.
Compute the standard deviation across records.
Compute the sum across records
Compute the maximum across records.
Reduction along axes with minimum value
Transpose the array.
Swap axis1 and axis2.
Reshape the array to the given shape.
Returns the index of the first matching key - value pair.
Cast each element of the RDD to a new type.
Return a new DStream where each RDD contains all the elements in the DStream with a
Convert to numpy array.
Convert argument into a tuple.
Pack args into a tuple.
Check that the shape is valid for the given axes.
numpy. allclose for numpy arrays.
Check that lst is a list of integers.
Convert slc into a slice with the given dimension.
Check if new and old can be transposed.
Check whether new and old are reshapeable.
Recursively stack all combinations of vals along the specified depth.
Iterate over the dimensions of an arry.
Lookup a constructor based on keyword arguments.
Create an array of given shape and type filled with ones.
Create an array of given shape and type filled with zeros.
Concatenate multiple numpy arrays.
Discrete log - likelihood.
Discretized maximum - likelihood approximation function.
Discrete alpha for discrete data with minimum value xmin.
Discretizes the best alpha for the given data.
Plot the probability density function.
Computes the lognormal distribution of the data.
Sanitizes the given HTML string for use in turbo tags and attributes.
Add an analytics entry to be used in Yandex.
Given a list of tags return a list of tuples where the first item is the tag name
Hash the decoded key using the MD5 algorithm.
Return the SHA256 hash of the private key.
Return the SHA512 hash of the key.
Convert a byte string to a long.
Decode a public key from its base64 - encoded form.
Process SSH public key information.
Process the ssh_dss type
Process the ecdsa_sha data.
Process ED25516 type 2 segment.
Parse the given keydata.
Returns a list of available mechs.
Main entry point for the script.
Initialize setuptools and distutils.
Context manager to create a wave file.
Return djfrontend_h5bp_css.
Return a versioned HTML string that can be used for djfrontend template rendering.
Return HTML for djfrontend fontawesome.
Render the djfrontend Modernizr template.
Return the HTML for the djfrontend_jquery_default setting.
Return HTML for djfrontend_jqueryui.
Return the HTML for the jQuery DataTables page.
Return djfrontend jQuery DataTables CSS.
Return djfrontend jQuery DataTables themeroller html.
Return HTML for a Django FormSet with the given version.
Scrolls the jQuery dashboard to a particular version.
Return HTML for a smoothscroll wheel for jQuery.
Return the HTML for the frontend frontend frontend frontend frontend css.
Return djfrontend GAN.
Generate auth hashes for the given user.
Calculate expiry time.
Generate a user token.
Override the default serialize method to add the user s username and permissions to the user s profile.
Update a user.
Raise meteorerror.
Validate the token and return the user object.
Check if the request is secure.
Get username for user.
Create a new user and return a token.
Logs in a user
Do logout.
Attempts to log in using a password or a resume token.
Attempts to log in using the given username and password.
Login with a resume token.
Forgot password signal.
Reset a user s password.
Recursively merge two dicts.
Return the meteor id for the given object or model instance.
Get meteor ids for the given list of object ids.
Get the object id for a given meteor_id.
Given a list of meteor ids return a dictionary of object ids.
Get object by meteor_id.
Set the forwards for the given operation.
Set the default reverse relation for a model.
Truncate the database forwards.
Truncate the database backwards.
Initialize meteor specific options.
Call finalize_options to finalize the options.
Convert a sequence of path arguments to a directory.
Seed the random number generator with the given values.
Return the current state of the state machine.
Returns a random string of the given length with the given alphabet.
Yield all API endpoints for the given object.
Clears the path map cache for all registered API providers.
Pretty print a value.
Called when the WebSocket connection is opened.
Callback called when the connection to the database is closed.
Called when a message is received from the client.
Yield frames from a DDP message.
Process a received DDP message.
Dispatch a message to the appropriate handler.
Receive a connect message from the backend.
Respond to pings from the server.
Receiver sub message.
Unsub a message from the chat
Recieve a method from the API.
Yields the sockjs - related information for the client.
Entry point for the script.
Print to stdout if verbosity is high enough.
Stop all servers and threads.
Start the worker thread and wait for it to finish
Run the main loop.
Monkey patch psycopg and psycogreen.
Generate a meteor ID.
Auto - discover dddp API modules.
Return the error as a dict.
Get an instance of the given class factory.
Format and emit a record.
Add a route for a resource object.
Send a message to this registration.
Send an alert to multiple registration_ids.
Fetch all inactive registration IDs from APNS.
Send a GCM message to a registration_id.
Send a message to gcm using the registration_ids.
Send a JSON message to the front - end.
Sends the data to the server and returns the response.
Get the model for the given module location.
Search using the GimPy API.
Translate a phrase using the Google Maps API.
Search for trending tweets.
Return a GIF object for the given GIF ID.
Return the screensaver object.
Upload tags to giphy.
Coerce all the keys in the data to ints.
Fetch data from the specified endpoint.
Search for trending images.
Lookup a GIF by its ID.
Upload a file to the GIF.
Convert the given access control to a list of extension elements.
Authenticate using the youtube API.
Youtube video entry upload.
Check the upload status of a video.
Update an existing video entry.
Delete a video entry.
Check if a video is available.
View for a video.
Get a list of videos owned by a user.
direct upload youtubedirect
Youtube upload page.
Returns upload_return url.
Deletes a video.
Fetches a single video.
Saves the video. If the video has no id it will create one.
Deletes the video.
Updates the metadata for this container.
Updates the value of a metadata field.
Update this item.
Parse a string and return a list of ParsedNodes.
Convert a list of newick trees into a newick string.
Load a YAML file into a Python object.
Loads a YAML file into a Python object.
Parse a string representation of a node.
Create a new str_ node.
Newick string representation of the node.
Returns the node with the given label.
Prune the tree rooted at this node.
Remove internal names.
Remove leaf names.
Clean up a JSON string.
Require a setting to be set.
Returns a list of arguments from the request.
Decorator to wrap a callback into a partial function.
Get a cookie from the cookie collector.
Delete a cookie.
Redirects the user to the authentication URL of the user.
Get the authenticated user.
Generate OAuth request parameters.
Redirects the user to the OAuth provider.
Concatenate url and args.
Parse a HTTP header line.
Add a header to the request.
Returns the value of the specified header as a list.
Parse a single line from a config file.
Parse headers into a header object.
Return the normalized header name.
Encodes the given value as UTF - 8.
Convert bytes to unicode.
Convert a value to a basestring.
Recursively converts all strings in the given object to unicode strings.
Check that all auth plugins are registered.
Select a policy based on the match strategy.
Returns the number of occupied points within the given spacing of the given grid.
Write a Gro object to outfile.
Write a PDB file.
Determine the number of molecules given the total number of molecules the absolute
Resize a PBC object to match the size of a hole.
Yield lines from a resource file.
Add a message to the user in the cache.
Message a list of users.
Get all messages for a user.
Add messages to the response if user is authenticated.
Check the config file for errors.
Verify that the profile name is in the config.
Retrieve data from config file.
Retrieve password from config.
Update the config data with the attributes of the given message.
Update the user password dictionary with information from the given message.
Create a new configuration profile.
Display the required items for a specific message type.
Get data from user.
Get the authentication data from the user.
Configure a profile.
Write data to the configuration.
Write authentication data to the password file.
Sends the message.
Create a message of the given message type.
Validate a user input.
Validate a phone number or URL.
Validate a SlackPost value.
Validate a WhatsApp value.
A co - routine to send messages using a threadpool executor.
Add a message to the message queue.
Read the file and return the content as a string.
Remove all non - string args from a dictionary of keyword arguments.
Send a message of the specified type with the specified arguments.
Get chat id for user.
Sends the message using the specified method.
Sends the message.
Get the SMTP server for the given address.
Generate the email message
Add the email header to the message
Add the body to the email message
Add the attachments to the email message
Establish a session and return it.
Returns a str_ ssl object for the SMTP connection.
Return a smtplib Session object with TLS enabled.
Sends the email.
Save tag collection to file.
Unload the image.
Get a region of the current image.
Validate that the configuration is correctly representable.
Remove all elements from the container.
Reads data from the file.
Delete this chunk and its parent chunk.
Resize the file to the specified size.
Insert a new chunk into the file.
Save the IDF to a file.
Deletes the record and clears the cache.
Parses the given file.
Processes a normal line.
Add lines to the source file as a sourceblock.
Draw a string in the given font.
Parse ISO 8601 time string into datetime object.
Takes a list of words and returns a string wrapped in HTML quotes.
Makes an HTML word.
Makes a HTML paragraph from a list of words.
Takes a list of lines and returns an HTML code block.
Makes HTML for a list of items.
Save metadata to a file.
Update the parents of the given atom in the given fileobj.
Run the main loop
Register a mapping for a given vendor ID and product ID.
Get the class for the controller.
Compute the HMAC - SHA256 of the string_to_sign using the AWS secret access
Generate the request headers to send to AWS.
Send a GET request to the API.
Send a POST request to the API.
Send a DELETE request to the API.
Convert a value to the specified kind.
Sends a change_record_sets request to the DCNM.
Returns the total size of the data packets in bytes.
Find the last page of a given serial number.
Sets the docsection for the specified section name.
Add markup to the document.
Process the content and return markups.
Returns the markup object for the given tag name. Returns none if there is no markup with that
Create the XML for a hosted zone file.
Attempts to lock the given file object.
Insert size number of bytes into fobj at offset.
Deletes size bytes from fobj at offset.
Convert bytes to UTF - 8.
Add a change to the change set.
Parses a change_info element and returns it as a dict.
Return the width of the string.
Returns a boolean indicating whether or not the object has been modified.
Remove this change from the hosted zone.
Save changes made to this changeset.
Read at most size bytes from the file.
Delete all the values starting with the key.
Add a loaded frame to the cache.
Update common apic objects.
Unload the Sound.
Set the loop points for the current song.
Return a list of glyph names and a list of values for adobe glyphs.
Filter GSFontNames based on a list of GSFontNames.
Dumps a list of encodings to a file.
Dumps the contents of the array to the file - like object write.
Check if a file exists.
Takes a list of filenames and returns a list of filenames.
Parse a list of hostedzones and return a hostedzone object.
Parse the delegation set element for a zone.
Write a list of Blocks to a string.
Add paddings to a list of blocks.
Delete all metadata blocks.
Saves the track to a file.
Parse the RRSet alias XML element.
Returns a list of strings representing the resource records.
Parse a Route53rrset element.
Add a record to a hosted zone.
Create a new mx resource record.
Create a new ns resource record.
Create a new ptr resource record.
Create a new spf resource record.
Create a new srvresourcerecordset.
Get the values of a change.
Write a single change to an XML file.
Writes a change record set to a file.
Initialize logging configuration.
Return the item corresponding to the given alias.
Freezes a dictionary so that its keys and values are sorted.
Join HTML attributes into a template string and a list of attributes.
Initialize the Flask application.
Initialize all of the bars in the container.
Bind a bar to the container.
Returns the arguments of the function as a dictionary.
Returns True if the current request is the same endpoint and view args.
Validate that the metric_class is properly configured.
Get a stat model by its name.
Calculates statistics for a given set of frequencies
Auto - discover all installed apps in installed_apps.
Dump metric statistics as CSV.
Manages statistics and resets them.
Returns a list of values from request. get.
Get the value of a GET variable as a boolean.
Returns the next colour.
Get the gecko parameters from the request.
Returns the number and cumulative count of a gecko board.
Creates the widget for the geckoboard rags.
Chart for geckoboard line charts.
Queries the geckoboard and returns the latest count
Returns a list of geckoboard funnels.
Returns a list of all active stats.
Register a gadget.
Returns the context dictionary to be passed to the template engine.
Prints message to stderr and exits with code.
Prompts the user for input until maxlines is reached. Returns the input as a string
Prompts the user for a list of items.
Prompt user for filename and output time.
Returns a DataFrame representing the schedule for the given year.
Returns the winner of the game.
Returns the season of the month of the year.
Surface of the project
Returns the coin toss for this team or none if the team is not coin tos
Return the weather table as dict.
Parses the ref_info table
Returns a pandas DataFrame containing the schedule information for the current season. kind can be either str_
Returns a DataFrame of all standings for the given team.
Parses the team stats table.
Returns DataFrame of roy holdings.
Returns a pandas dataframe with the linescore of the game.
Returns the season of the date
Returns a pandas dataframe of player stats.
Return a unique key for the given class instance.
Return the age of the person.
Get stats table as pandas DataFrame.
Returns a dictionary containing stats for each game in the game.
Returns a table of the totals for the given kind.
Returns a table of performance data for the specified type.
Returns statistics calculated for the specified type and percent of the time.
Return the stats table for the given kind and summary flag.
Returns a table ofshooting statistics for the specified kind.
Return the stats table as a PBP - formatted dictionary.
Returns a DataFrame of gamelogs for the given year and kind.
Get current value from session.
Expand details columns in a DataFrame.
Add team and opp columns to features.
Add team features to a DataFrame.
Returns the initial probability for a given line.
Returns a DataFrame of passes for this object.
Return a list of year awards for the given award ID.
Returns the team s name.
Return the boxscores for the given year.
Return the keyword value for a specific year.
Return a list of coach IDs and tenures for each game in the given year.
Return the schedule for the given year.
Return the off - coordinate for the given year.
Return the coordinate for the given year.
Returns the ID of the stadium for the given year.
Return the off scheme for the given year.
Returns the alignment string for the given year.
Returns dataframe of off splits for a given year.
Get html from given url.
Return the next put in the queue or None if there is none.
Return a boolean indicating whether the stream is currently closed.
Shut down the connection.
Get a batch from the HDF5 file.
Get the remainder of a file.
Get a generator from the queue.
Yield protobuf objects from an INI file.
Write the contents of one or more objects to a file.
Read a varint from the file.
Returns an iterator over all the objects in the file.
Close the file descriptor.
Writes a sequence of protobuf objects to the stream.
Flush the internal buffer to the output file.
Returns the directory where the game is stored.
Input text with keyboard emulation.
Evaluates traits and returns a list of trait descriptions.
Wait until the condition is met.
Repeatedly check element_with_traits for missing traits.
Add ignored exceptions to the internal exception list.
Executes the specified operation on the main volume.
Returns the main source for the given operator and value.
Send a message to the device.
Returns the status of the NAD.
Power off.
Power on.
Set the volume.
Select a source.
Deobfuscate a request.
Calculate the CRC of a plaintext string.
Obfuscate the given value.
Looks for missing schemas in html.
Returns a list of all hrefs and names in the html.
Check if song name exists.
Returns a list of hrefs for a song
Generates a URL for a Google song.
Parse google download url.
Parses a Google song website and returns the parsed URL.
Get html response
Download a file using requests.
Download a file using wget.
Returns a list of station codes in the specified city
Get observations for a given location.
Parse observation response from iaqi.
Returns a list of compilers for this file.
Returns the mimetype for the format extension.
The MIME type of the most recently compiled compiler.
Return the compiler format extension.
Register a processor for a mimetype.
Unregister a processor for a mimetype.
List of paths to look for finders.
Register default values for all of the extensions preprocessors and postprocessors
Try to import the qtcore Python module.
Get the netnode object for the current IDA settings.
Add a netnode plugin name to the meta.
Delete a netnode plugin name from the meta data.
Import settings from a config file.
Export settings from a dictionary.
Absolute path to the directory where the settings will be stored.
Iterate over all keys.
Simple error handler for Flask - RESTful exceptions.
Create an Amazon DynamoDB table object.
List tables in DynamoDB.
Returns a list of items in the specified category.
Return the ID of the metadata for the given item
Return the timestamp at which the metadata was updated on the given item
Fetch the owner team of a crate object
Fetch the owner user for a given crate id
Fetches the version downloads for a given crate id
Fetches the version_downloads attribute of a crate object
Returns a list of crates.
Returns a crate for the given crate_id.
Yields all the items for a given path.
Fetch all items for a given category.
Returns a generator of questions from the KATSune API.
Fetch data for the given category and offset.
Returns the timestamp at which the metadata was updated.
Determine the category of an event activity or user.
Yield events activity and user data.
Return list of buffers.
IO priority value.
Closes the connection to the AMQP server.
Submit a list of blocks to the IOLoop.
Cancel a pending IO block.
Cancel all submitted tasks.
Fetch all items for a given category.
Returns a list of all the cells in the spreadsheet
Parse feed and return events
Return the list of export formats for a given pid_type.
Permission factory.
Default view method.
Export a record.
Calls a callable and records the time taken.
Close the socket.
Remove client from pool.
Increment a counter metric by count.
Send a timing metric to the VI.
Add a timing information since the given start time.
Send a gauge metric.
Send a gauge delta.
Set a metric by name.
Request the next batch of data.
Create a batch client.
Return a client for interacting with the unit unit.
Flushes all pending batches to the remote socket.
Create a TCP batch client.
Flush all buffered batches to the socket.
Return a client for interacting with the unit unit.
Creates a new instance of any_model with the given settings.
Interpret x as an OpenMath symbol.
Interpret the given term as an OpenMath term using the given converter.
Converts an OMObject instance to a Python object.
Convert obj to openmath representation.
Initialize the Flask application.
Generate valid choices from a list of choices.
Create a value from the registry.
Returns a dictionary of form data and a dictionary of form files for any form.
Return the data for a decimal field.
Return data for an email field.
Generate data for a date field.
Generate random datetimes for a date field.
Returns any float value that can be converted to a string.
Returns the data for a boolean integer field.
Return random time.
Generate data for a choice field.
Generate data for a multiple choice field.
Return random data from queryset.
Encode a Python object as XML bytes.
Publish a message to the distribution server.
Tag the project with the given version number.
Load a python global variable.
Decode a byte string to a list of lists.
Convert the given value to a fixed precision.
Format a number.
Convert a blosc byte string to a numpy array.
Convert an array to a raw byte string.
Add a config file.
Remove a parameter from the configuration.
Returns a list of websockets
Returns the websocket object with the given name.
Checks if a repository exists in a workspace.
Sync the repositories for a workspace.
Clone a repository.
Check if the version is up and running.
Convert a numpy array to the indices of the voxels in the array.
Create a numpy array from a list of voxel numbers.
Prints the specified workspace or all workspaces.
Update a repository and print the update.
Add a console stream handler.
Executes the given command in the given path.
Load PNG file as numpy array.
Save a collection of numpy arrays to a PNG file.
Print status of a workspace.
Print the status of a repository.
Get the block size for a given token.
Post cutout without chunking blosc.
Load image from tiff file.
Save numpy array to tiff file.
Load a multi - page image from a TIFF file.
Write the configuration to the config file.
Clone this executable from the given url.
Get version of installed package.
Mix name and match.
decorator to create an option
Reserve a number of ids for a channel.
Merge a list of IDs into the RAMON server.
Propagates the data to the remote data store.
Returns a list of projects for the specified dataset.
Returns information about the specified remote dataset.
Returns a list of the datasets in this remote host.
Parse the subparser.
Show the specified workspace or all workspaces.
Show the contents of a workspace.
Show all workspaces
Returns the URL for the specified endpoint.
Guess file format from file extension.
Open a PIL image file.
Convert a file from one format to another.
Convert a list of RAMONs into a dictionary.
Return the RAMON type for the given type.
Deletes a channel.
Create a NDJSON string.
Create a dictionary with the dataset name imagesize timerange scalinglevels and scaling.
Create a dictionary of channel values.
Builds a project dictionary from a project name token name and public value.
Identify image dimensions.
Puts data to the server.
Find a path in the configuration.
Returns a list of public tokens.
Returns the project information for the given token.
Set metadata for a remote data upload
Make a GET request to url.
Make a POST request to the specified url.
Sends a HTTP DELETE request to the specified URL.
Load HDF5 data layers from a file.
Save array to hdf5 file.
Infer gaps in a tree.
Recover a NvimIO from a nvimiorecover.
Install jingo translations.
Exclusive namespace acquisition.
Return the percentage of data divided by the total.
Get stats from cache.
Get the slabs from the cache.
Add contextual data.
Return the server status.
Show the current cache stats.
Show cache statistics.
Show all slabs for a given server.
Return a human readable string representation of a number of bytes.
Find a config object in the children dictionary.
Add one or more directories to the environment.
Apply applicator to self. _fpath.
Returns the full path to the file.
Returns the contents of the file.
Write data to file.
Configure the logging system.
Create the file if it does not exist.
Applies the applicator to the configuration of this node and all descendants.
Returns the full path to the file.
Remove this directory.
Prepares this node and its children for execution.
Clean up this node and its children.
Returns the absolute path to the given relative path.
Lists all files in the directory.
Write data to filename.
Returns the contents of the specified file.
Add a file or a list of files to the children.
Save the current state of the state machine to disk
Loads the configuration file
Remove the cache file if it exists
Loads all plugins in the specified directory.
Return a new confignode representing the child at the given path.
Get the current value of the field.
Apply configuration to a string.
Build callback URL.
Read input from the socket and process the connection.
Sends the output to the NGPU.
Send the request.
Read socket input from socket.
Write socket output to socket_obj.
Returns a dictionary of string representations of the SNDettleMode and RCVettle
Configure the PN link.
The address of the source PN link.
The target address of the link.
Called when the session is closed.
Create a new sender and return it.
Request a sender for a message.
Create a new receiver for the given name.
Request receiver link.
Called when a link is destroyed.
Called when the session is closed.
Process an endpoint event.
Extend markdown.
Called when receiver link is remotely closed.
Called when the receiver failed to connect.
Get host and port from a server address.
Connect a socket to a host and port.
Create a server socket.
Returns a tuple of the readers writers and timers that need processing.
Return data from the transport without consuming it.
Create a new sender.
Reject a sender link.
Create a new receiver link.
Called when the connection attempt failed.
Called when the endpoint is active
Called when the connection is closed.
Handle connection error.
Returns the color string.
Returns a dictionary of font names to their source files.
Set compression flag.
Add an object to the PDF.
Write a stream to the output buffer.
Write stream to stdout.
Add a new page to the parent document.
Set the color scheme.
Set the default font for the document.
Add a new PDF page to the document.
Set the font size.
Add text to the PDF.
Add a newline to the current page.
Add a pie chart to the current page.
Output the pages.
Return list of page indexes that have orientation changes.
Output the list of fonts.
Output the images.
Output the image.
Transform the current transformation matrix.
Return the absolute position of x y.
Set the style of the line.
Rotate a point by num_ angles.
Set information about the project.
Set display mode.
Output the document to a file or string.
Write the PDF header to the output file.
Put the pages into the document.
Put resource dict.
Put information into the session.
Write a trailer to the output stream.
Fringe - D sequence generator.
Seqs is a list of strings. f is a function that returns the value of the
Yield the Gosper sequence of the given sequence.
Repeatedly brent a list of sequences.
Check if the current x value fits into the window.
Check if the y value fits into the window.
Checks if the x - coordinate is greater than the other coordinate.
Checks if the y - coordinate is greater than the other coordinate.
Return a copy of the cursor.
Add a dx to the x coordinate
Add a dy to the y coordinate.
Draws the current string.
List all tags.
Returns a list of labels with the given name.
Delete a tag by ID.
Creates a new label.
Returns a list of the user s roles.
Returns a list of tags with the specified label name.
Returns a list of hooks.
Sphinx extension setup
Returns the absolute path to the themes directory.
Perform a POST request
List all hosts.
Get a log set.
Corrected duration in days.
Update the attributes of the CTRL file.
Compute the transit data.
Quantum bin of the light curve.
Free the memory.
Receive data from the socket.
Generator that yields lines from the buffer.
Status of the connection.
Generate info message.
Generate an error message.
Return a list of capabilities supported by the network.
Read the mode from the device.
Send quit command and close socket.
Get a datetime object from the server.
Get help information from the server.
Generate new groups from a UNIX time.
Generate new news articles.
List active newsgroups.
List active times in the database.
List all newsgroups matching pattern.
Generate formatoptions for list overview messages.
List all extensions supported by the server.
Returns a generator for the specified keyword or all generators if keyword is none.
Generate a list of items.
Send an XZ compressed message header.
Generate information about a message matching a pattern.
Execute a Xfeature compress gzip command on the server.
Return the offset for the given value.
Make a POST request to the API.
Do an HTTP DELETE request to the API.
Perform an HTTP GET request to the API
Returns a list of scheduled queries for the current user.
List all the tags associated with this account
Get all tags with the given name or ID.
Delete a tag from your account.
Create a scheduled query
Delete an alert.
Parse the NEWSGROUP line.
Parse a header line.
Convert a dictionary of headers to a string.
Perform a POST request
Run a series of tests.
Generate a docstring for the defaults.
Set the value of the field.
Check that the value is of the correct type.
Return the value of the field if it exists.
Check if value can be converted to a scalar.
Returns the symmetric error.
Set the validation errors.
Set the bounds free errors and value.
Imports all the metric definitions into the database.
Extract a dictionary of metrics from a list of dictionaries.
Filters out metrics that do not match the filter.
Make an RPC call to the API.
Return the expression terminal for the given text.
Return an operator token for text.
Return an op add token that represents the given text.
Initialize the properties for this class.
Returns a list of parameters.
Return the parameter values as a numpy array.
Get the errors of all the parameters.
Clear all derived parameters.
Set method.
Get environment variables from os. environ
Call the API.
Validates that the sceneinfo is valid.
Verify the type of the satellite product
Get the size of a remote file.
Validate the bands parameter.
Establish a connection to Earth Explorer.
Normalize a datetime object to this timezone.
Join an iterable with the given delimiter and escape character.
Finds the positions of newlines in the given text.
Points the source code to the specified position.
Dump the relay output to stdout.
Filters out relays that don t have metrics control or plugins.
Create a new instance from a list of files.
Set the chance for each file in files.
Main entry point for the script.
Return text with the rule token concatenated.
Return a copy of the string with special handling.
The grammar of the input file.
Returns a list of rules.
List of comment tokens.
Returns a list of all directives found in the file.
Returns compiled source code.
Compiles the current state into a string.
Get the imports for this module.
Returns a string representation of the token type enumeration.
Returns the class definition for the parser.
Get the name of the entry point.
Return the source code for the given rule.
Get the transform to use for the given rule.
Convert an expression into an equivalent expression in an operator tree.
Convert a node to an ASN string.
Takes a list of operands and a predicate and returns a list of operands that match the predicate
Recursively remove grouping groups from the optree
Convert AST node to Python code.
Convert an AST node to Python code.
Convert an AST terminal to a list of Python code.
Convert an AST option group to a list of Python code lines.
Return a list of code lines corresponding to the given repetition group.
Convert an AST special handling to a list of strings.
Return code for an AST opalternate node.
Return a list of code lines representing the concatenation of all the operands of an AST operation.
Convert an AST OperationExclude to a list of Python code lines.
Return code lines for an AST operation multiply operation.
Return code lines for an AST operation that repeats the given operation.
Finds all directives that satisfy a given condition.
Return True if child is a string literal and its type is the same as parent.
Handle API results.
Returns wx. ID for given wx. ID
Remove a hotkey from a control
Adds the arguments to the argparse parser
Configure logging.
Validates that all required arguments are present.
Convert infix nodes to postfix operators.
Convert a list of nodes postfix to an optreenode.
Reduce a list of nodes to a single optreenode.
Loads the plugin manifest
Get the maximum column lengths of all the fields.
Get the maximum column lengths of all metrics.
Escapes any string underscores in the metric string.
Output all the fields in markdown format
Print the metrics in markdown format
Generate the HTML for the report.
Parses the given text and returns a parse tree.
Attempt to consume the given text.
Adds the arguments to the argparse parser
Try to parse a string into a datetime.
Outputs the data in CSV format.
Outputs a JSON formatted string.
Output raw JSON data.
Output the rough text as an XML string.
Return True if node is a trimmed terminal or empty string.
Pretty print a tree structure.
Returns a partial function that extracts repetitions from a string.
Return a terminal node if the text starts with the given value.
Calls the extractor and returns the text if the exclusion matches.
Count leading whitespace.
Call the extractor function on the given text.
The position of the current node in the tree.
True if all children of this parsenode are empty.
Add a string to the ignored list.
Check if the node is of the specified type.
Return a flattened version of the node.
Return a new parsenode with trimmed children.
Merge this parse node with another.
Return a copy of this node with a new type.
Return a compressed version of this node.
Returns the position of the current line and column.
Returns the position of the last read line and column.
Step forward to the next character.
Step forward to the next line.
Step forward to the previous line.
Returns the last readed line as a string.
Increments the cursor position. Returns the new position.
Saves the current context position.
Restores the previous context.
Return a string representation of the function call.
Set the name of the signature.
Count the number of variables in the signature.
Count the number of functions in the signature.
Add a signature list to the current scope.
Returns a new scope containing the union of the current scope and the given scope.
Updates the signature with the intersection of the given oset and the current one.
Returns a new scope that is the intersection of the current scope and the given signature.
Removes all signatures that are not in the given set.
Returns a new scope that is the difference of the current scope and the given scope.
Updates self to include only the symmetric difference between self and oset.
Returns a new scope that is the symmetric difference of the current scope with the given signature.
Add a signature to the scope.
Remove the signature associated with it from this scope.
Discard the signature associated with it.
Returns the first signature with the same number of parameters.
Returns the last signature in this chain.
Returns a new scope containing all symbols with the given name.
Get the signature corresponding to the symbol name.
Returns a new scope containing all polymorphic functions in this scope.
Call the asttranslatorinjector to inject the translation into the old node.
Recursively normalize an AST.
Set self to othernode.
Check if the hit is ok.
Get the compute signature.
Resolves all the symbols in this type to a weakref.
Returns a list of resolved names for the given type name.
Set the name of the resolved type.
Delete local file if exists.
Delete a file from s3.
Delete a file from S3 or local filesystem.
Save the contents of the temp file to the local file system.
Saves a temporary file to S3.
Save object to local or Amazon S3.
Find objects on S3 bucket based on the path.
Enumerate a set of integers.
Set one thing in the chainmap.
Read until the next character is EOF.
Push the rule nodes onto the stack.
Pops the rule nodes and their parents from the cache and returns True if there were any.
Return the value of the node n.
Add a stream to the parser.
Begins a new tag with the given name. Returns bool_ if successful False otherwise.
Mark the end of a tag.
Set the rules for the class
Set hooks for this class.
Set directives.
Evaluates the named rule.
Evaluate the hook with the given name.
Peeks text from the stream.
Read only one character from the stream.
Reads a single character from the stream.
Read until the stream is closed.
Read until the next non - blank character is encountered.
Check that the given hits struct is compatible with the cluster hits structure.
Add a rule clause name to the namespace ns_name.
Add a Rule object to a BNF dictionary
Add a new rule to the parser.
Adds the parser tree of cla to sequences.
Adds a parsing. alt node to the parser tree.
Add a range to the parser tree.
Add an RPT to the given sequence.
Add a capture to the given sequence.
Bind a CPT to a sequence.
Add a parser hook.
Set param. pair to be integer and param. pair to be int.
Strips string from param. pair and sets param. pair.
Set the value and pair of a param based on a character.
Set param. pair and param. node.
Set hook name
Add a parameter to hook. listparam.
Evaluates the rules and returns a parsed node.
Ignores C ++ characters.
Add a state to the state machine.
Returns a string representation of the graph in dot notation.
Writes the graph in DOT format to a file.
Writes the graph to a PNG file.
Return a string representation of the state machine.
Return the next state of the tree.
Remove all dead states from the list.
Infer the type of each element of the body.
Infer the type of a subexpression.
Infer a string literal.
Dump all rule nodes to stdout.
Return an ast. stmt that represents the exit scope.
Return a list of ast. stmts representing the if clause pt.
Visit a call node.
Visit a calltrue node.
Visit a hook node.
Visit a rule node.
Visit a capture node.
Visit a scope node.
Visit an alt node.
Visit the sequence node and return a list of combined statements.
Visit a repoptional node.
Visit a REPL0N node.
Return node s representation as ast. stmt.
Return dst after the last character of src indented by indent.
Recursively set indent for a list.
Recursively convert a list to a string.
Echo the given nodes.
Populate the graph from a sequence of match expressions.
Populate a state register from a sequence of sequences.
Build the state tree for this CFG.
Compare two nodes for equality.
Build a grammar from a BNF string.
Build a grammar from a file.
Parse the source string into a node.
Parse the given file.
Set node src to dst and cache results.
Set dst. value to the value of src as an integer.
Set dst. value to the expression expr.
Dumps the deposition state to a dictionary.
Get all the recids in Invenio version 2. x.
Get all the recids in Invenio 2.
Return a tuple of tuples. The first element is the number of the database and the second
Dump a Token object as a dict.
Get user.
Dump a User object to a json - compatible dictionary.
Get modified record IDs using invenio12.
Get modified recids invenio2.
Get restrictions for the given collection.
Get a list of revisions for a record.
Get all collections of a record.
Create a record and return its JSON representation.
Return the number of modified documents and their recids.
Dump a record.
Dump a RA object to a dictionary.
Load model_cls with data.
Load all things from all entry points.
Initialize Flask application context.
Get run SQL.
Run a SQL query and return the number of affected actions.
Dump a RemoteAuthToken object as a string.
Load token from dictionary.
Import record.
Return the value of a config variable or the default.
Dump a Crash object to a string.
Connect to the Invenio database.
Return number of users and all users.
Dump a User object to a dictionary.
Load data into a deposit file.
Create record and persistent identifier.
Load record from dump.
Load records from sources.
Get the profiling statistics from the yappi module.
Start web server.
Dump profile information.
Delete the profiler.
Delete the profiler.
Get the current status from the queue.
calc_translations_parallel computes the translations for all images in parallel.
Merge multiple images together.
Add zeros along the diagonal and return the result.
Create a new record from a dump.
Create record for given dump.
Update record with given revisions.
Create persistent identifiers.
Delete record.
Create a new file for the given bucket and key.
Delete all buckets associated with this record.
Return a list of pids that do not exist.
Prepares the list of files to be read.
Prepare pids list.
Return True if the record has been deleted.
Load community data.
Load featured community.
Dump a thing to JSON.
Check a thing.
Delete the widget from the peng object.
Returns the magnitude of the vector.
Normalizes a vector.
Apply the texcoords to the data.
Makes sure that the bones of the mesh are stored in the dictionary.
Set the length of the mesh.
Set the parent of the child.
Get the pivot point of the sphere.
start a new animation
Set the current state of the camera.
Unset the current state of the scene.
Set the state of the bone.
Unset the state of the transform.
Ensure that the modeldata for the given object exists.
Redraw the vlists for the given scene.
Draw the model on the canvas.
Set the model for this instance.
Writes the reports to a file.
Add a menu.
Redraw the label.
Redraw the label.
Draws the background.
Deletes a widget from the editor.
Redraw the label.
Register event handlers.
Register event handlers.
Add label main.
Quit dialog.
Updates the progressbar label.
Render all actors in the scene in 3D.
Render the world to 3D.
Return True if the resource exists False otherwise.
Add a category.
Returns the pyglet. image. Image for the missing texture.
Get a model by name.
Load a model by name.
Get modeldata by model name.
Add a widget to the group.
Draws the menu.
Draw the background and stencil.
Redraw scrollable container.
returns true if the mouse is over the center of the mouse
P - Value of the ratio.
Adds a layer at the specified z position.
Add an action.
Do the given action.
Register a new name in the registry.
Adds a layer to the network at the specified z_index.
Draw the widget and all layers.
Delete the layered widget.
Border of the widget.
Offset of the redraw area.
Returns the size of the widget.
Read a mesh from an hdf5 file.
Create a connectivity matrix for the given shape.
Set fields.
Add one or more fields to the message.
Check the types of the elements.
The space of the type.
Edges of the mesh.
Returns a pandas. DataFrame containing statistical information about the current mesh.
Convert an element set to a node set.
Convert a node set to a surface.
Convert surfaces to element sets.
Returns a pandas DataFrame with the metadata of the fields
Metadata as pandas series.
Make directories if necessary.
Run the gmsh command and return the mesh.
Read a history report.
Read a field - report file.
Convert a list to a string.
Returns the equation as a string.
Return a string representation of the set of labels for the DataFrame df.
Parse the response and raise errors if needed.
Make a GET request.
Write a XY report to a file.
Return the error message for this field.
Returns a boolean indicating whether the exception was raised by the calling method descriptor.
Contributes the data to the class.
Return the axis mode for the given axis.
Set the options for the plot.
Create a new class based on the given class name function and attributes.
Cycle through all the datafeeds and process them.
Try to convert a value to a float if possible.
Convert a string to an integer or float.
Render a graph.
Return the unicode representation of the given string.
Returns True if mime_type matches one in self. include_mime_types.
Cleans up a domain name.
Return a list of left - most cuts for a domain name.
Return a tuple of the token and the hash of the document.
Collect words from the SentenceInfo object si.
Index the given stream item.
Return the list of tokens whose hash matches the given hash.
Get the document frequencies for the given hashes.
Yield tuples of stream_id key value pairs for the given hash.
Yield all stream items from the given file - like object f.
Read a variable - length integer.
Read ASCII object from the stream.
Serialize StridedInterval key.
Convert a streamitem into a key and data pair.
Context manager for temporarily changing a working directory.
Strip a prefix from a string.
Strip suffix from string if it exists.
Check if needle is a subsequence of haystack.
Run the wsgiref server.
Shut down the HTTP server.
Returns a function that gets called when an error occurs.
Add a route to the router.
Resolves a route for the given method and path.
Searches for a non - literal route that matches the given path.
Return a tuple of the pattern type and the pattern.
Return the response as a list of bytes.
Add an HTTP header to the message.
Set a cookie header.
Return the status line of the response.
Content - type of the response.
Recursively delete a directory.
Returns a list of open file descriptors.
Attempt to fetch a work unit.
Returns a list of lines from a given file.
Generate a random species and describer pair.
Generate a random adjspecies pair.
Morph a sentence.
Get similarity of a query pair to a request.
Hiragana for a given sentence.
Find an entity.
Return the shortsum for a given review.
Get a keyword s scores.
List chronos of a sentence.
Initialize all the stages.
Run the writers.
Run the given incremental transforms on the given streamitem.
Returns a new streamcorpus pipeline instance with the config replaced with a new one.
Return True if all the mentions in target_mentions are in chain_mentions.
Check if any of the target mentions are mentioned in the chain.
Match a stream item with multiple token annotations.
Create a NER file using the specified template.
Terminate the child process.
Multiply a polynomial p by a constant n.
Yields all the sentences in the string clean_visible.
Make the label index for this stream item.
Create a list of sentences from the body of a stream item.
Create a cleansed file from a chunk of data.
Builds a NER file for the specified tagger.
Remove punctuation punctuation punctuation and whitespace from a string.
Instantiate the pipeline from the given config dict.
Generate a john -smith chunk of data.
Makes a clean visible XML file from the data in i_chunk.
Remove punctuation punctuation and whitespace from a string.
Main entry point for the script.
Load function from module.
Load external stages from a Python file.
Initialize a stage with the given configuration.
Read from idx_bytes until stopiteration is hit.
Filter hrefs based on config.
Return a list of label instances that can be used to render the cleaned html.
Yields all paths in input_dir.
Yields the tasks stored in the database.
Get a random entry from the available rows.
Returns a list of sentences.
Verify the MD5 hash of the data.
Get S3 bucket.
Decode the data into a stream.
Extracts a single chunk from GCS.
Convert a stream ID to a kvlayer key.
Convert a KV - layer key to a stream ID.
Given a StreamItem return a tuple containing the md5 hash of the absolute url and the stream
Main entry point for the application.
Build argument parser.
Given a list of sentences return a list of tokens corresponding to their character offsets.
Convert a sequence of Token instances to a sequence of character offsets.
Add an element to the document.
Return an XPath piece for the current element.
Return the index of the next text element.
Yield all descendants of the given element recursively.
Return a list of all the elements in the source list.
Selects all XML elements with the specified name.
Selects elements that match pat.
returns all following siblings of elem
Calls the inkscape command with the given arguments.
Call inkscape to export an image.
Convert an SVG file to a PDF file.
Convert an SVG file to a PNG file.
Returns a Jinja environment for the given file_path.
Sets up the template file and environment.
Fills self. file_content_ with doc_contents.
Save content to file.
Create a doctype from a template file.
Replaces svg code in doc_contents with svg code.
Render the document to a file.
Renders the template to a temp file.
Parse the source string using the specified expat callback.
Return a fragment of the HTML document.
Inserts text into the element.
Insert the node before the reference node.
Return a copy of this element.
Returns the string representation of the node s XML value.
Insert a child element at the specified position.
Parse the config file.
Get Google credentials.
Create event datetimes.
Create a new event.
Main entry point for the event CLI.
Get the extension of a file.
Add an extension to a filepath if it doesn t already exist.
Returns a named temporary file.
Remove all files with the given extension from the given workdir.
Convert a CSV file to a JSON file.
Replace a string in a file.
Parses the HTML document.
Check if next tag is blacklisted
Wraps the given tag if necessary to make it italicized.
Wraps the given tag with a strong character if necessary.
Wraps the given tag with an underline if necessary.
Parse the attributes of a tag.
Remove line breaks from a tag.
Parse the href and return the value.
Parses the value of the specified attribute of the specified tagname.
Given a dictionary and a list of translation keys translate the keys to the corresponding values in the translation
Returns a JSON string representation of the object.
Find all files in folder_path that match regex.
Concatenates multiple strings into a single string
Yields whether the full string starts with the part string
Checks if the full string contains the part string
Yields a boolean value of the given value.
Apply a foreach expression to a sequence.
Looks up a sequence of values in a table.
Replace characters for svg code.
Check if the input is a valid SVG file.
Merge multiple PDF files into one.
Embed a list of font files into a SVG file.
Embed a font into an SVG file.
Check that all inputs have the same type.
Checks that the function is callable and has the correct number of arguments.
Recurses through the inputs and outputs.
Render a Jinja2 template and return the output text.
Recursive function to recurse into the options.
Recursively convert an object into a string.
Convert an object to a sequence of numbers.
Convert an object into a sequence of booleans.
Yields a stringified version of the AST.
Change the encoding of an XML file.
Save text into a QR code file.
Launch an option in melody.
Calls the specified command with the specified arguments.
Convert a TeX file to a PDF file.
Returns a list of the options for this PostgreSQL.
Transform a geometry from one spatial reference to another.
Create a shapely geometry object from a string or geometry object.
Expand this range by expanding other into num_ parts.
Intersect this envelope with another.
Returns True if this envelope intersects the other envelope.
Return a polygon as an OGR geometry object.
Create from znm and znz.
Writes the DataFrame to a CSV file
Select a table based on a condition.
Return the table at the given nuclei.
Return a table that contains the intersection of self and table.
Return a table that is not contained in another table.
Return subset of elements with odd or even length.
Return subset of elements with odd or even number of elements.
Return subset of elements that are even or even.
Return a table of the errors relative to self.
Returns the binding energy of the system.
S2N Derivative of NFW profile
Derivative of the S1 number.
S2P Derivative.
Derivative of S1 p.
Returns a derived table.
Decorator for methods that use the database.
Derive the public key from the master password.
Create a database from the given database path or URI.
Search for domains by name.
Modify a domain.
Create a new domain with the given name.
extract_hbs is a generator that extracts the contents of a file - like object.
Return the vsi prefix for the given path.
Return the SRID of the project.
Main entry point for the script.
Update a file from a URL.
Returns a dictionary of available GDAL drivers.
Return image driver for given path.
Convert a geometry to an array.
rasterize a raster layer
Open raster raster object
Create raster from bytes.
Copies the data from the source raster object to the destination raster object.
Returns a dictionary of all available options.
Create raster at path.
Set geotransform.
Read the contents of this file as a numpy array.
The envelope of the raster.
Returns image driver
Returns a raster copy of the current raster
Return the masked array associated with the given geometry.
Returns the nodata.
Read raster data.
Resample the image to a new size
Save image to destination.
Set the spatial projection of the dataset
Warp this dataset to another spatial reference.
Calculate the number of chunks needed to encode a chunk of alph_len.
Lookup alphabet for charset.
Encodes the chunk at the given index.
Convert a chunk to a long integer.
Returns a chunk of data at the given index.
Return a compiled regular expression for the given file.
Normalize the format of a date.
Detect the timezone from the default locale.
Return a dictionary representation of the object.
Handle all the jobs in a single connection.
Worker main function.
Run the worker pool for the given job_handler.
Sets the classification of this Dataset.
Send a message to the link.
Turn on a light.
Turn on a switch.
Turn on with a given brightness.
Turn off a named vm.
Send all messages in the queue.
Send a message to the LWLink service retrying as necessary.
Sets the nature of this Notificant.
Set config files paths.
Yield the option name and value pairs for all options.
Create the config file at the specified index.
Update configuration from a dictionary.
Read configuration from a TOML file.
Reads the configuration files and returns them as a dictionary.
Return a list of possible option names.
Return a list of the sections for the specified command.
Build the argument parser for this command.
Parse command line arguments.
Returns a list of strings representing the command line options for bash - comp.
Do bash completion.
Start a new Alignak master.
Called by asyncio when a connection is established.
Called when a line of output is received.
Called when the connection to the worker is lost.
Called when a job is loaded.
Receive a response from the job.
Closes the connection to the ElasticSearch server.
Add a set of jobs to the pool.
Closes the connection to the server manager manager and workers.
Remove all waiters that are not done.
Add a result to the chain.
Wait for the task to be completed.
Load the next job from the queue.
Mark the job as done.
Add a result to the pool.
Cancel all the currently running jobs.
Wait for the number of jobs to be completed.
Distribute jobs among the ready callbacks.
Add a list of jobs to the pipeline.
Get a job from the active JavaScript object.
Return a job to the pool.
Add a result for a job.
Distribute jobs that have completed.
Close the browser window.
Remove duplicates from a list.
Recursively match a regex against an object.
Get AWS region.
Filters a list of entries based on a set of filters and excludes.
Get the public dns name for a given instance.
Create a new instance from a dictionary.
Get an attribute from the object.
Create a new instance from a boto instance object.
Returns True if the filter matches the attribute value.
Return a string representation of the IP address.
Add the gmtime to the event dictionary.
Create a structlog logger.
Setup a celery application.
Deletes a job.
Return a configuration section as an ordereddict.
Handler for config subcommands.
Prepares the rows of the table for insertion into the database.
Generate a hex color from a string.
Return a random string of the specified color.
Check if credentials are valid.
Check token for user.
Check if a process is running.
Dynamically import a module.
Get the IP address of the current host.
Make a request to the API.
Prepare post parameters.
Run the application.
Render the field as a string.
Streams a list of dictionaries of command dicts.
Return the number of network days between two dates.
Returns the full path to the specified command.
Build the ssh command string.
Create a LSIProfile instance from command line arguments.
Create a relationship between this model and a part.
Returns a list of related objects for the given type.
Load relationships from source.
Add a part to the container.
Load a part from the given data.
Return the name of the object that matches the given name.
Create an instance from an XML element.
Parse a chatl input string.
Builds the JWT.
Assign force field to AMPAL object.
Find the maximum radius and npnp in the FFM file
Make the forcefield parameters structure dictionary.
Return a file - like object representing the file.
Yields all matching segments for the given name in a zf file.
Returns a list of all filenames in the given directory.
Returns a list of all directories in the given directory.
Create a prefix for the given directory.
Deletes the specified file from S3.
Ensure that the user is logged in.
Return loud English.
Get the home URL for this project.
Return the number of hotspots in the tree.
Get the keeper token.
Upload a build to a directory.
Determine if a travis event should be skipped.
Confirm that a build has completed.
Recursively update a dictionary.
This is the main entry point for logging.
Edit a part. xml file
Print the contents of a directory.
Splits the given path into drive segments and tail segments.
Get the editor for the given filepath.
Processes a module node.
Generate html for chart.
Generate html for a chart.
Serialize a data object to a string chart.
Takes a JSON string and patches it in place.
Convert a JSON object to HTML.
Convert a dictionary to a pandas dataframe.
Write html to a file in folderpath.
Returns a chart class for the given dataframe.
Encode the given xfield and yfield.
Infer the URL for the tarball.
Create a new app.
Delete an app.
Generate a random binary string.
Generate a random IPv4 address.
Generate random date.
Create a session object.
Make a request to the API.
Create a new build.
Check the status of a build.
Generate a sequence of strings with the given prefix.
Registers all sub - commands to the given parser.
Returns the root argparser for this parser.
Returns the description of the method.
Get the help text for this command.
Run the parser.
Encode a single dataset.
Returns a list of all the athlete names in the cluster.
Get the last n activities.
Request the activity list of an athlete.
Request activity data.
Return an HTTP endpoint string for the given athlete.
Return the URL for the activity endpoint for the given athlete and filename.
Perform a GET request to the goldencheetah endpoint.
Creates a new build.
Generate a URL with API auth.
Returns a random title for the given languages.
Generate a random person.
Generate a random last name.
Renders the template and returns self.
Set dataset and series.
Render the current axes to the canvas.
Check if the type is in the types list and return it. Otherwise return type.
Returns the full url for this request.
Opens the document in a web browser.
Save the resource to a local file.
Return a file - like object for this URL.
Returns a PIL. Image object for the image file.
Write the contents of this URL to the given file - like object.
Return checksum string.
Return a random decimal amount.
Return unprotected and protected claims.
Return the signing keys as a JWKS dictionary.
Unpack a metadata statement from a JWS.
Signs a metadata statement.
Evaluate a metadata statement.
Corrects federation usage in metadata.
Extend a request with a set of SMS objects.
Parse the command line arguments.
Add commandline arguments to an argparse arg_parser.
Apply logging options to log files.
Log msg % args with severity VERBOSE.
Return a dictionary mapping each letter to the number of occurrences.
Find all the anagrams in a word.
Returns a tuple consisting of the class and the camel case version of the class.
Transform data from one timeseries to another.
Get the last value from a timeseries.
Validate a page number.
Get a page of items from an iterator.
Change the permissions of a file or directory.
Create an internal signing service.
Make a signing service.
Sign a request.
Create a new resource.
Update a metadata statement.
Update the signature for the given location.
Yields the contents of a bundle.
Create a new bundle from the given data.
Returns a list of URLs for the specified asset type.
Returns a string of HTML tags for the given asset type.
Returns the HTML tags for the registered asset types.
Return url with protocol if not present.
Find links in the given URL.
Listen for connections to a remote server.
Get the list of modules in the project
Import modules.
Select one or more fields from a nested document.
Apply date_map_list to doc.
Return the number of rows returned by the cursor.
Print the results of the query as a table.
Returns a list of topologically sorted digraphs of the do_tasks.
Add default department to project.
Add default dependencies and default sequences.
Create a new shot when a sequence is saved.
Create all tasks for a given element.
Get the value of a config option.
Add a factory for a specific identifier.
Remove a factory from the container.
Connect to the remote host using the given protocol factory.
Called when data is received on a connection.
Disconnect a connection from the specified connection.
Wrapper for remote. callremote.
Called when the connection to the remote factory is made.
Multiplexed connection made
Called when data is received from the socket.
Send data to the remote host.
Called when the connection is lost.
Returns the local protocol associated with the given connection identifier.
Called when data is received on the remote end of the connection.
Disconnect from the given connection.
Center a string on the current terminal line.
Prints mystring formatted as clock on the right.
Return the version number as a string.
Identify the framework of a target unit.
Assert that the given value can be converted to the given target unit.
Pad data_to_pad with leading zeroes to block_size.
Unpad data to block_size.
Sign a SmsRequest object with self - signer
Gather metadata statements for the specified context.
Pretty print the input word.
Argument parser for nagaram.
Main entry point for the script.
Process received data.
Disconnected event handler for unregistered types.
Create an RPC function stub for the given URL.
Ping a call to a remote peer.
Return a tuple of a command name and a dictionary of completions for the command.
Convert a string to a list of amp.
Return the string representation of the given object in the given protocol.
Verify that the metadata statement is valid.
Parse the remote response.
Return a list of databases.
Sync local files to S3.
Build all packages in the specified package.
Create a readonly fridge.
Load JSON data from file.
Create a self - signed JWT.
Create a JWT signed by signing keys.
Discovers all modules in the given test directory.
Main entry point for librarian.
Find the score of a letter in a string.
Calculates the score of a word based on the input letters.
Return a list of words.
Check if a word is a valid squrabble word.
Process a string received from the device.
Get command and responder for commandname.
Parse the request values based on the command.
Write a response to the client.
Stop pretending to send a string to the other end of the connection.
Build a JSON - AMP protocol object.
Convert a JWKS to a keyjar.
Load a JSON keyjar from a string.
Process a message using nova - process.
Process a customer event.
Process a neutron customer event.
Process a customer event.
Process a message based on event type.
Process a message based on keystone event types.
Process a heat event.
Run the wsgiref server for this instance.
Print msg to stdout.
Prints msg to stderr followed by a newline.
Register a sub - command class.
Register a new command class under the given class.
Return the string representation of the value.
Create an argument from a string.
Update completer dictionary.
Connect to ternya.
Initialize connection and consumer.
Initialize service modules.
Create nova consumer.
Initialize the cinder MQ consumer.
Create the neutron MQ consumer.
Initialize glance MQ consumer.
Create heat MQ consumers.
Enable notifications for a specific openstack component.
Get information about a song.
Downloads a song.
Execute the instructions of the basic block.
Load a global variable by its name.
Calls the function at the current stack position.
Dump a MySQL database to a file.
Call the atexit function if set.
Run the application.
Context manager to temporarily change working directories.
Recursively copies a directory tree.
Runs a post mortem debugging session.
Get the modification time of a file.
Check if a file has changed since the last time it was written.
Sync the database with the file contents.
Clears the contents of the configuration file.
Scrape an IPDB feed
Downloads the image and saves it to disk.
Check if image has changed since last modification.
Returns the filename line number and name of the caller.
Returns the defining component of a peptide.
Entry point for the command line tool xtuml.
Searches the stack for a symbol with the given name and kind.
Check if root is contained in pe_pe.
Check if pe_pe is global or not.
Get the name of the data type.
Get the related attributes of the r_rgo and r_rto objects.
Create a namedtuple enum.
Create a function that interprets the given semantic bridge.
Create a namedtuple of all the bridges in s_ee.
Create a function for interpreting a semantic sync.
Makes a constant from the given SYC Wilson coefficient.
Returns a classmethod that can be used to execute an operation on an object.
Build a property for a derived attribute.
Make a simple association.
Create an association for the given model and relation.
Build a Component from a BioPAX model.
Runs the call.
Accept a connection from the server.
Reject a call.
Raise an exception on reply_socket.
Establish a call and wait for it to finish.
Establish a connection to a call.
Dispatch a reply to a task.
Guess the type name of the given value.
Deserialize the given value according to the given ty.
Get a single feature from the index.
Put a collection of features into the collection.
Deletes the document with the given content_id.
Delete all documents from the index
Delete the index if it exists.
Yield features and fcs associated with a prefix.
Yield the prefix IDs associated with the given prefix.
Yield scan IDs for all scan IDs in the index.
Return a list of source feature names.
Return a list of filters for the given key_ranges.
Returns a dictionary mapping feature names to their index values.
Get the types of the fields in the index
Create a disjunctive list of indexes from a query.
Return the total number of features in fc_dict.
Count the number of bytes that pass the filter.
Return a pretty string representation of the feature counter.
Process docopt arguments.
Default formatter for error messages.
Convert an instance to a link.
Pretty print a unique identifier for the given instance.
Checks the uniqueness constraint of the given model.
Check the integrity of the link.
Check if the relationships between super_kind and rel_id are compatible.
Basic string encoder.
Delete all entries from the table and index table.
Internal implementation for scan_prefix_impl.
Store the given ids_and_fcs in the index table.
Store a value in the index table.
Yields the index keys for the given ids_and_fcs.
Return the index with the given name.
Add a direction to a string.
Get the type name of a data type.
Traverses the attribute tree of the given object and returns the referenced attribute.
Build the core type for the given s_cdt.
Builds an enum type for the given enumeration.
Build a struct type from a SDT tree.
Build user type from a udt.
Builds a python type from a data type.
Builds the class for the given object o_obj.
Build a component for the given class.
Build a schema for the given model.
Returns a pretty - printed version of the XML string.
Fetch a list of bikes from the server.
Sets the positional information for the given node.
Create a queue.
Deletes a queue.
List all queues
List all available exchanges.
Purges the specified queue.
Create a MIME multipart message.
Reads the image from the Tesseract server and returns the cached text.
True if the text is visible in the file False otherwise.
Main entry point for the bridgepoint script.
Serializes the given value for the given ty.
Serialize an Association instance into a string.
Return a string representation of the class.
Entry point for the script.
Partition a collection into two lists based on a condition.
Adds bidi context to the context.
Given two instances inst1 inst2 and a phrase find the link between them.
Compute the lookup key for the given instance.
Compute the index key for the given object.
Returns the type of the attribute with the given name.
Creates a new instance of this class and adds it to the storage.
Iterator over all the instances of all metaclasses.
Define a new metaclass with the given attributes.
Send a message using a socket. send_multipart.
Recieve data from socket.
Runs dead code in src.
Parse email addresses.
Decorator to wrap a function as an RPC function.
Return a mapping from rpc spec name to a tuple of value and rpc spec.
Normalize postcode middleware.
Returns the next string in the stream.
Accept all instances of s_sys.
Accept the children of a C instruction.
Accept EP Packages.
Returns the brightness of the image.
Matches the expression with the given arguments.
Finds the closest matching character in the document.
Returns the extra selection for the character at position.
Handles text cursor position change.
Return the traceback as a tuple.
Get instance of this class.
Append history to self. _history.
Moves the cursor up one line in the history
Handles the down key press.
Returns bool_ whether to replace the previous edit history item.
Move to the next edit in the history.
Handle a execute reply message.
Returns True if history is locked.
Returns the edited history item at the given index.
Sets the history to be displayed.
Stores the current buffer of the history edits.
Event handler for timetoclose.
Convert a collection into a pandas. DataFrame.
Set attributes from keyword arguments.
Subscribe to all topics.
Log a message.
Iterate remotely.
Convert notebook to this version of nbformat.
Get the importer for the given path item.
Wrapper around the cstringio module.
Override setuptools. setup. tools. override_setuptools.
Parse a requirement from a string.
Return the parsed package information as a string.
Collapse leading whitespaces into a single string.
Reimplemented to disconnect signal handlers.
Reimplemented to connect signal handlers and event filter.
Returns the current text cursor.
Update self. currentitem based on the current text.
Register models in the admin site.
Returns a list of disk partitions.
Return cputimes for the CPU cores.
Returns a list of cputimes per cpu.
Reads data from STDIN and returns it.
Read a block of data from stdin.
Updates the visibility of the tab bar.
Create a tab with the current kernel.
Add a tab with the given frontend.
Populates the magic menu with all available magics.
Message box for closing the window.
Checks a hashed passphrase against a hashed passwd.
Returns a string with the item s short title indented.
Returns True if the requesting user has permission to change the object.
Returns True if the requesting user has permission to delete an object False otherwise.
Recursively add the children of a node to the graph.
Make a binary tree for the given number of levels
Submit jobs to nodes in graph g.
Validate the tree.
Make a color table for the given instance.
Return a copy of this colorscheme.
Add a new color scheme to the registry.
Set the active color scheme.
Return the full path to the shared library.
Process IOPUB messages.
Run kernel until kernel is stopped or timeout is reached.
Set the style of the widget.
Returns the format for the given token.
Returns the format for the specified token in the specified document.
Returns a qtextcharformat object based on the token and style
Find a command in a list of paths.
Normalizes a path.
Check that all strings in value are contained in dist.
Check that entry points are valid.
Return True if src has at least the last blank line.
Returns True if src has at least two blank lines.
Transform assign system.
Replace assign magic in line with the command it came from.
Transforms a classic prompt into a stripped - down version.
Transforms an IPython prompt into a stripped - down version.
Find the number of indentation spaces and whether the line should be indented.
Stores the given lines in the specified store.
Reset source and source_raw.
Handles cell magics.
Appends a line to the cell magic part.
Transform a single cell.
Post a notification to all observers.
Returns a set of observers for the given notification type and sender.
Add a callback to be called when a message of the given type and sender changes.
Update the status of the jobs.
Report a group of jobs.
Flush all the jobs in the group.
Return a new status or a new one.
Report the status of the job.
Initialize background job attributes.
Insert a value into the field at the specified position.
Return a copy of the current instance
Declare a special variable.
Declare a list variable.
Declare a set variable.
Change of cwd.
Moves the route num_ items between the locked and unlocked ranges.
Returns the approximate energy of the specified route.
Return a dictionary with default values.
Check if the table exists and the types match.
Render a single check expression.
Formats a list of rows as a table.
Create a link.
Returns the js file for the given url.
Returns a css file for the given url.
Create an HTML img tag.
Subtracts arg from value.
Multiply a value by an integer.
Divide a number.
Modulus a value.
Get verbose name of model instance or modelform instance.
Split line on user input.
Add options to the parser.
Remove all builtin functions from the module.
Find the url_name relative to req. url_name.
Look for links with explicit links with the given rels.
Split a string on the shell platform into a list.
Main entry point for the coverage script.
Add an action to the command line.
Append action code to parser. values. actions.
Prints help information about the package.
Run the help command.
Check if args match options. actions.
Execute python code.
Debugging information.
Unserialize an object from a buffer.
Set the display hook.
Calls the given function with the given args and kwargs and logs any exceptions raised by the function
Checks if the given string is a valid URL.
Check that the given URL is valid.
Recursively validates a container of URLs.
Pull a value from the globals dictionary.
Select a number of random ports to use.
Map a list of sequences.
Return the last num_ lines from the readline history.
Set autoindent.
Initialize logappend logfile logstart magic.
Saves the current state of the sys module.
Restore module state to original state.
Register a function to be called after the command is executed.
Return a new main module for the current namespace.
Initialize user namespaces.
Returns a list of all namespaces referenced by this module and its main module.
Reset the state of the session.
Delete a variable from the namespace.
Remove all namespaces that match a regular expression.
Attempt to find a property in a struct.
Find a struct property by its name.
Inspect an object.
Initialize shell history.
Show the traceback of the given exception.
Print the traceback to stdout.
Show the traceback of a syntax error.
Inserts any necessary indentation before the next input.
Sets a custom completer for the specified position.
Set the completer frame.
Run a line magic.
Finds a magic by name.
Define a macro in the user namespace.
Run a system command in the user namespace.
Auto - re - write the input for the given command.
Returns a dictionary of user variable names and their values.
Convert user expressions to strings.
Return the value of expr as a string.
Executes the specified executable file in the current working directory.
Calls the cell magic with the given magic name on the given line.
Expand variables in the given command.
Create a temporary file and return the filename.
Perform any necessary at - exit operations.
Broadcast a message to all subscribers of sender.
Returns a list of all profiles in a given path.
Returns a list of bundled profiles.
Find dist matching req. key.
Returns the full path to a given file.
Returns the next line in the file.
Send a string to the child process.
Send a terminal integer to the child.
Converts unicode to a re. RegexPattern
Prepare regex pattern.
Search the string buffer for the longest substring that matches the string. Returns the index of the longest
Search the buffer for the next match to the buffer.
Unpack a directory.
Returns the last error message.
Executes the given command and returns the output.
Attempt to locate a source file for the given filename.
Returns a list of arcs executed.
Returns a list of arcs missing from the graph.
Returns a list of arcs that have not been executed yet.
Return a list of branch lines.
Return the total number of branches.
Returns a dictionary mapping branch names to arcs missing from the MBA.
Return a dictionary of exit counts for each branch line.
Set precision.
Returns the coverage of the whole CFG as a percentage of the number of statements covered.
Return a string representing the number of PC covered.
Highlight the given needles in the given haystack.
Highlights the given string using the given keywords.
Highlights the given string with the given keywords.
Runs the given function in the context of the current process.
Returns the unquoted end of a string.
Return a marquee version of the input string.
Format a string for the screen.
Dedent a string.
Wrap paragraphs in num_ columns.
Finds the optimal string length for a list of rows.
Returns the ith item of mylist or the default.
Build the kernel args to be passed to the kernel
Tunnel the kernel to the host via SSH.
Pretty print a Python object.
Pretty print a Python object.
Get the mro list for the given object class.
Default pretty print function.
Print a super - printer for the given object.
Print pattern and flags.
Prints the type name of the given object to the given printer.
Pretty print a function.
Pretty print an exception.
Decorator for registering a printer function for a type.
Register a deferred type printer function for the given type name.
Add a string to the output.
Appends a breakable string to the output.
End the current group and remove it from the queue.
Flush the buffer and output the output.
Pretty prints the given object.
Writes a single row into an ODS file.
Get the current clipboard content.
Get OSX clipboard.
Get clipboard content from tkinter.
Get the build prefix for the current user.
Rekey a dikt dict.
Recursively extract datetime objects from strings.
Recursively squash datetime objects into ISO8601 strings.
Return ISO8601 formatted date string.
Check for the existence of the pth_file in the target directory.
Write a script to the install directory.
Prints the id of the process and sleeps t seconds.
Creates an argument parser for this command.
Main function of DISambiguation.
Build packagefinder instance.
Callback when the log level is changed.
Return default log instance.
Check that the flags have been updated.
Prints the alias help for each class.
Prints the help for each flag.
Print the subcommands.
Prints all the commands options and help text.
Prints the examples to the screen.
Update the configuration with the given dictionary.
Initialize a subcommand.
Flatten the flags and aliases.
Parse the command line.
Load a configuration file.
Generates a string representing the configuration file for this class.
Downsamples the array by k.
Formats an info tuple into a string.
Write a message to the output.
This method is called when the configuration of a configurable class has changed.
Returns a help string for the given class.
Returns the help text for the given trait for the given class.
Clear the instance of this class from all its subclasses.
Formats a failed test.
lite crash handler for ipython notebooks.
Flush this sub - socket to the socket.
Start channels for the kernel manager
Read a notebook from a file - like object.
Read from a file - like object ignoring interrupts.
Split a string into a list of arguments.
Compress a DHT.
Add a magic function to the dictionary.
List the docstrings of all the magics.
Format a LaTeX string.
Set the default value of an option.
Page the ipython notebook with the gui reference.
Create a task from a callable string.
Get information about a task with the given label.
Returns the function object from the funcinfo dictionary
Calculates the next run time for the job.
Submit the task to the run_task_channel.
Run the task.
Calculates next run and submits the job.
Creates a new task and saves it to the database.
Runs the_callable once.
Find url file.
Bind the kernel to the engine.
Create an interrupt event in the kernel pool.
Run the thread.
Filter namespaces based on name pattern and type pattern.
List all namespaces matching a pattern.
Check that all lock options are in the dictionary.
Draw the current figure if interactive.
Flush all currently open figures.
Print a figure and publish the display data.
Loads the specified extension module.
Unload an IPython extension.
Yields n random ports starting at port.
Initialize the notebook webapp.
Signal handler for SIGINT signal.
Prompt user for confirmation to exit.
Shutdown all kernels
Generate stock prices and exchange options.
Replace multiple keys in a dictionary.
Render the prompt.
Create a ZIP file.
Fix the version in the file.
Check if obj is a mappable string.
Split a sequence into sub - sequences of length q.
Run the Python source file fname and return the output.
Run source code.
Download a PI file if it doesn t exist.
Reduce a frequency list to a single array of frequencies.
Compute the n - digit frequencies for a given file.
Reads a text file and yields digits.
Compute one - digit frequencies for a list of digits.
Generate two - digit frequencies from a list of digits.
Generate n - digit frequencies from a list of digits.
Plots two digit frequencies.
Plots one digit frequencies.
Evaluate a debug expression in the current frame and print it.
Same as urlresolvers. reverse except that the query string is appended to the base URL
Check if a string is private.
Runs debug_script on src.
Runs a script in a temporary directory and optionally in the post - mortem debugging mode.
Run a test script in the module and print its output in the console.
Return a dictionary of all the hashes under hashroot.
Compress the cache for the specified hashroot.
Return a list of the keys of the directory.
Returns True if the record should be allowed to be modified False otherwise.
Format an error for the given test.
Embed a terminal in a interactive shell.
Helper function to create writer instances for trans_writer and meta_writer.
Prepares the locale directories for the specified languages.
Writes the po entries to the po files.
Writes the po header to the specified file.
Subscribes a user to this subscription.
Initialize the option parser.
Run a python module.
Run a Python file.
Compiles a Python file into a Python code object.
Make a Python code object from a Python file.
Returns an HTML table representation of the item_matrix.
Set the current value.
Cancels the current completion.
Selects the index of the given row and column.
Updates the list with the specified number of items.
Return a dictionary of word frequencies.
Prints word frequency data.
Return a string representation of the XML document.
Writes the document to a file.
Validate a pin document.
Send a shared pin to one or more topics.
Delete a shared pin.
Send a pin to a user.
Delete a user pin.
Subscribe to a topic.
List all subscriptions for the authenticated user.
Begin the progress bar.
Context manager that starts a task and then closes the task.
Context manager for subtasking.
Update the total number of worked units.
Create a submonitor and add a listener.
Mark the task as done.
Move the build directory to the correct location.
Load a set of pyconfig files.
Load the configuration file.
Load a configuration flag from a dictionary.
Decodes the given argument list into a list of strings.
Loads the configuration from the given arguments.
Convert the parsed_data object to a ConfigParser object.
Find a module by name.
Calls the given function when the state of the motor changes.
Called when a new run is started.
Notify stop callbacks.
Interrupt the process then kill it.
Find the command line arguments for the program.
Start the launcher.
Copy a local file to a remote location.
Fetch a remote file from the remote host.
Returns the number of engines.
Start the specified number of engines.
Start a new job.
Return the default context dictionary.
Parses the output of the launcher command and extracts the job id.
Write the batch script to disk.
Start a batch of jobs.
Make a context menu for the current cursor position.
Append a JPG string to the internal buffer.
Append png to image.
Append an SVG string to the internal svg string.
Add an image resource to the document.
Copy an image to the clipboard.
Get the image for the specified image name.
Insert img data into cursor.
Insert a SVG string into the specified cursor.
Saves the selected image.
This method is called when a variable is exited.
Initialize the environment.
Prompts the user for input and re - writes the input.
Ask the kernel to exit.
Set the next input to be read.
Read a configuration file.
Get a list of values for an option in a section.
Returns a list of line numbers for the specified option in the specified section.
Determine if we re running in a timid environment variable
Set attributes from keyword arguments.
Load a configuration file.
Sets the attribute attribute to the value of the specified configuration option.
Set the list of delimiters to use.
Split a line into a list of strings.
Returns a list of global words that match text.
Return a list of words that match the attribute.
Greedy delimiters have changed.
Return a list of aliases that match the given text.
Return a list of matches for the given text.
Attempt to complete the given text.
Match one record with a set of tests.
Return a list of records that match the given dictionary.
Extract a subdict from a record.
True if quiet is enabled False otherwise.
Write output prompt to stdout.
Write format data to stdout.
Log output to the logger.
Raise an exception if the object is frozen.
Convert a MySQL timestamp string to a Python datetime. datetime object.
Called when an ioloop event is changed.
Do one iteration of the shell.
Publish a pyin code.
Send an abort request.
Send a clear request to the server.
Return the string representation of the topic.
Send a shutdown message to the shell.
Memorizes the module stack.
Remove modules from sys. modules after the context exits.
Returns the absolute path to the given relative or absolute path.
Check if the given name is a file - like name.
Checks if the given object is a class.
Check if the given path is a valid python package.
Return a string truncated to num_ significant digits.
Return a copy of cls transplanted from module.
Return cputimes in ntuple format.
Returns the command line for the process.
Returns a list of open file descriptors for the process.
Returns a list of connections to the process.
Check if user has group.
Resolves a class by its class path.
Return usage percent.
Login to Google Docs.
Get key from URL query string.
Ensure that the temp path exists.
Clears the temporary files created for the project.
Upload file to gdoc.
Downloads and merges CSVs from GDocs and merges them into one.
Downloads the CSVs from GDocs and writes them to a. po file.
Uploads the po files to Ods.
Deletes the contents of the temporary file.
Create a new Qt console
Check if the given URL has access.
Check if url contains contents.
Get the HTTP response code for a given URL.
Compares the content type of the given URL with the given content type. Returns True if the
Compare the response code of the given URL with the given code.
Validate the data.
Clear the output of both stdout and stderr.
Returns a list of codeunit instances for the given morfs.
Return the flat rootname of the module.
Opens the source file for this ZIP archive.
Determine if the file should be python or not.
Return the total number of seconds from a datetime. timedelta object.
Get a response or raise an exception.
Block until the result is available or until the timeout expires.
Get results as a dictionary.
Abort the current action.
Return the amount of time that has passed since the last measurement.
Block until the progress bar is displayed and then wait for the timeout.
Republish displaypub.
Blocks until all outputs have been received.
Block until the result is available or until the timeout expires.
Returns the absolute path to the given file.
Prepare a list of patterns to be matched.
Returns the separator for the given string s.
Find all python files under the given directory.
Remove the relative directory from the filename if present.
Returns the canonical filename for the given filename.
Get the contents of a. zip file as a string.
Returns True if the given fpath matches one of the patterns.
Returns True if the path matches one of the patterns. Returns False otherwise.
Maps the path using the registered aliases.
Loop over a Qt4 kernel.
Loop over a gtk kernel
Enable event loop for given gui.
Goe number.
Returns the difference in eigenvalues between the center of the matrix.
Generate ensemble differences.
Initializes the str_ object
Load the config file if it exists.
Writes the configuration file to disk.
Erase the entire file.
Dictionary with file name as key and sorted list of line names.
Dictionary with the names of all arcs.
Write data to a pickle file.
Read lines and arcs from a file.
Load data from a pickle file.
Read lines and arcs from a file.
Combine parallel parallel data such as lines and arcs.
Add line data to the editor.
Add arc data.
Add executed lines and arcs to hash.
Return a summary of the file contents.
Get pasted lines from terminal.
Main loop of the interact method.
Replace the rlhist multiline history item with the given string.
Prompt the user for a line of text.
Edit the last syntax error in the syntaxtb file.
exit from the shell
Return url and revision.
Create a new frontend master.
Initialize the colors for the given widget.
Return information about the object as a tuple.
Convert an r - like object to a numpy rec array.
Set the colors for the active color scheme.
Toggles the active color scheme.
Return the textual representation of the traceback.
Return a structured traceback.
Formats a list of extracted lines.
Write exception only information to the output.
Set the join mode.
Recursively import a module and its submodules and return the number of imported modules.
Add a line to the code.
Add a new section to the code.
Returns the code for the given function.
Returns the code for the given expression.
Render the template with the given context.
Apply dots to the value.
Render a template string with the given context.
Return a dictionary of default formatters.
Add a type printer function for a given type.
When the precision of a float is changed
Return a list of user config files.
Configure the logging system.
configurewhere - Configure the directory where the tests will be run.
Duplicate a stringng into num_ pages and print them.
Page a file.
Get pager command.
Get the start position of a pager.
Print a string to stdout and return the snip.
Pretty print o with unicode.
Convert an object to PNG format.
Pretty print to PNG.
Return True if o can be printed in LaTeX format.
Print o in LaTeX format.
Configures the plugin with the given options.
Validate a list of strings.
Validate a dict of string keys and values.
Run the ioloop loop.
Handle incoming messages.
Complete with the given text and cursor position.
Get information about an object.
Shutdown the server.
Flush the buffer.
Sends input to the server.
Starts all the channels.
Stop all open channels.
Returns True if any of the channels are running.
Loads the configuration from the connection_file.
Launch a kernel for this node.
Shutdown the kernel.
Kills the kernel.
Sends a signal to interrupt the kernel.
Send a signal to the kernel.
Check if the connection is alive.
Returns the shell channel object.
Interact with sub_channel_class
Returns the HB channel object.
Bind a kernel to a running kernel.
Print a debug message to stderr if the debug level is > = level.
Returns a list of all registered extension classes.
Pre - step checks all extensions in the list.
Walks an egg directory and yields tuples of base dirs and files.
Scan a module for safe imports.
launch a new instance of ipcontroller
Save connection dict to file.
Load config from json file.
Load the secondary configuration.
Enable auto - pixel execution.
Disable automatic pixelation.
Run a single cell.
Run tasks if the current time is greater than tick_freq.
Run the task with the given message.
Remove a task from a message.
Patch an object s attribute if it does not exist.
Accept a new connection.
Reject the connection.
Return a string_ representing the agent for this proxy.
Saves the form and then redirects the user to the success URL
Deletes the considered object and retirects the user to the success URL.
Overrides Django s custom pre_save hook to set the user object attributes.
Check all modules in sys. modules. If check_all is True then check all modules in
Opens a file in the editor.
Get clipboard content.
Add a function to the chain.
Get the metadata object for the given module or path.
Configures the debug mode based on options.
Import an item from a module.
Try to connect to a remote host using passwordless authentication.
Attempt to open a ssh session using pexpect.
Try to connect to a server using passwordless SSH.
Establish a tunnel connection to the given socket.
Open a tunnel to a remote host.
Stop scheduling tasks.
Unwraps the given exception and returns it.
Register a new engine.
Unregister an engine.
Handle a executereply message.
Flush all pending notifications to the notification socket.
Flush the results from the server to the client.
Flush control messages to the socket.
Flush any pending ignored control messages.
Flush all pending iopub messages to the database.
Spin the motor for interval seconds.
Stop spin thread.
Flush sockets.
Send an apply request over the specified socket.
Return the history of the hub
Query the database with the given query.
Return a set of opcodes for the given names.
Return byte parser.
Returns a set of line numbers that match one or more regexes.
Return the first line of a multiline string.
Returns a set of the first lines of the given list of lines.
Parse the source code and return the lines excluded from the compilation.
Returns a list of arc line tuples.
Returns a list of child parsers.
Yield tuples of byte line number and line number.
Find all the INDRA Statements in the file.
Return a string representation of the block stack.
Check that all chunks start with a minimum number of starts.
Yields the arcs of the file.
Returns a list of all the child parser chunks.
Returns a set of all arcs in this parser and its children.
Start the cover instance.
Runs the cover instance on the specified stream.
Check if file should be included in coverage.
Parse a distro name.
Return a urllib2. urlopen object with authentication
Get the parent class of an object.
Returns the root topic for the current engine.
Render a template using the given context.
Configure the recorder.
Format a test error.
Split data into num chunks.
Convert nb to this nbformat.
Convert hex color to rgb.
Return a dict of colors for the given stylename.
Returns the font for the given family. If fallback is given it will return the font for the
Handle execute reply messages.
Handle reply from history command.
Handle pyout messages.
Handle display data messages.
Called when the magic starts.
Execute the script located at the given path.
Process an execute error message.
Process the payload of the execute item.
Set the default style sheet.
Edit a file.
Create the in prompt string.
Make a continuation prompt.
Called when the stylesheet of the page has changed.
When the syntax style is changed we update the highlighter.
Transform data to a dict if it is a dict.
Return virtual memory usage information.
Return cputimes in ntuple format.
Get the process UIDs of the process.
Get the gids of the process.
Get all threads in the process.
Returns a list of open file descriptors for the process.
Return the commit hash for a given package.
Return package information as a dict.
Returns the number of CPU cores on Mac OS X.
Return the number of CPU cores on the machine.
Returns the number of rows in the next set of results.
Fetch a single row from the result set.
Fetch at most size rows from the current position.
Fetches a specified number of rows from the database.
Connect using the str_ com module.
Read a JSON string into a notebook object.
Read a Python object from a string in Python format.
Read data from a string or file - like object.
Write a notebook object to a file in the specified format.
Write a notebook to a file object.
Convert a notebook to a metadata file.
Set the value of the field from a dictionary.
Returns True if the given name matches the filter.
Check if the given class should be included in the test suite.
Return True if the directory should be included in the output.
Check if the given file should be included.
Check if the function needs to be declared.
Check if the given method should be called.
Check if the module needs to be imported.
Return a list of lines from a file.
Run a pydb list command
Prints the list of lines between first and last.
Implement pdef magic.
Calculate the conversion factor between two currencies.
Convert currency from one currency to another.
Compute the return on a given currency range.
Get stream encoding.
Return the default encoding for reading from stdin or sys. getdefaultencoding.
Write the connection file to disk.
start the heartbeat thread
Init session.
Initialize the IO sockets.
Initializes the kernel
Convert html to text.
Markdown to plain text
Convert a domain name to a FQDN.
Add options for nose - exclude to the given parser.
Configures the noseexclude flag based on the options passed in.
Return True if we want to exclude the directory.
Check if there are any links to dynamic libraries for this extension.
Calls each function in funcs with the given args and kwargs.
Calls each function in funcs reversely.
Append a partial function to the end of the chain.
Insert a partial function at the given position.
Format the usage string.
Write the PID file for this profile.
Remove pid file if exists.
Get the PID from a pid file.
Constructs a parser from a magic function.
Get the real name of a magic function.
Remove the prompt from the current block and highlight the string
Rehighlight the given block.
Overrides the default setformat method to add the current offset to the start of the highlighted text
Copy the focus to the clipboard.
Executes the given source.
Called when the prompt is finished.
Return True if a tab has been pressed.
Insert the copy action into the context menu
Override Qt method to handle key presses on the console.
Insert a continuation prompt
Handle a complete reply.
Handle reply messages from the kernel.
Handle kernel being died.
Handle replies to object info requests.
Handle pyout messages.
Handle stream messages.
Handles a shutdown reply from the GUI.
Execute the file located at path.
Interrupt the kernel.
Resets the internal state of the interpreter.
Restarts the kernel.
Sends a calltip request to the kernel
Performs completion on the input buffer
Process execute error messages.
Process the execute_ok message.
Called when the document contents changes.
Add a plugin to the list of plugins.
Call all registered plugins and return the result.
Generates a sequence of results from all the registered plugins.
Executes all registered plugins and returns the first result.
Configure the plugin.
Load the plugins from the entry points.
Load plugins for builtin nose. plugins
Convert latex output to PNG.
Convert latex output to HTML.
Check if the requirement exists.
Return the interval as a dictionary.
Returns the name of the process.
Get CPU percent.
Returns the memory percent of the machine.
Returns a list of memory maps.
Returns if the process is running.
Suspends the process.
Resumes the process.
Sends a signal to kill the process.
Waits for the process to finish and returns the result.
Wires the kernel into the main window and waits for it to finish.
Returns True if the namespace is shadowed by the given identifier.
Register a new transformer.
Unregister a transformer.
Register a checker function.
Unregister a checker function.
Register a handler for a name.
Unregisters a previously registered handler.
Prefilter line_info.
Find a handler for the given line_info.
Apply all transformers to the line.
Prefilter the given line.
Prefilter a list of lines.
Check if the given line is a valid prefilter.
Return the handler for the given line_info.
Check if the given line is a pre - filter.
Check if the given line is a prefilter handler.
Check if the line needs to be indented
Expand aliases in the line_info.
Handles the line according to pre - filter rules.
Return the command to execute based on line_info.
Handle the line_info.
Compiles the prefilter and executes it.
Override eventfilter to handle key presses and escapes.
Reimplemented to stop the hide timer
Overload the paint event to paint the paneltip label.
Show information about a call.
Handles cursor position change.
Canonicalizes the given path.
Masked representation of the object.
Check if the current virtualenv does not have a global file.
Word - frequency analysis.
Returns a list of default aliases for the current operating system.
Same as define_alias but soft - fail if the alias already exists.
Define an alias for a command.
Validate that the name is a valid alias for the command cmd.
Call an alias.
Transform an alias to a full command.
Expand aliases.
Implement autohelp directive.
Resets all attributes to their default values.
Returns a QColor object for the specified color and intensity.
Returns a QTextCharFormat instance
Generate a new JWT
Clean expired JWTs.
Check if a JWT has already been used.
Validate a JWT token.
Returns the longest common prefix of the given paths.
Returns the size in pixels of the scroll bar if paging is on.
Check if the cursor can be cut.
Returns True if the clipboard can be used False otherwise.
Clear the input buffer.
Cut the clipboard.
Get input buffer.
Inserts the given string into the prompt buffer.
Sets the current font for the tab and emits the font changed signal
Prints the control.
Moves the prompt to the top of the screen.
Resets the font to the default.
Append input to the control s prompt and return the result.
Appends html to the prompt. If before_prompt is set to True the html will be
Append html fetching plain text.
Append plain text to the prompt.
Clears the temporary buffer of the prompt.
Shows the completion widget with the given items.
Fills the temporary buffer with the given text.
Return whether the key is a control key down.
Create a Qt control object for this kind.
Creates the page control.
Filter page key press events
Returns the plain text selection of the given block.
Returns the end cursor
Return the column number of the cursor in the input buffer.
Get the current line from the input buffer.
Return the text cursor for the prompt.
Return a QTextCursor for the given selection.
Insert the continuation prompt.
Inserts html into cursor.
Inserts html into cursor and returns plain text.
Insert plain text at cursor.
Keeps the cursor in the buffer. Returns True if it was moved.
Handle keyboard quit event.
Appends text to the current page.
Called when the prompt is started.
Read a line from the terminal.
Set the continuation prompt.
Sets the top cursor position.
Adjusts the scrollbars for the current control if necessary.
Main entry point for the MetadataFormatter.
Copy a config file to the ipython notebook location.
Create a profile directory by name.
Find a profile directory by name.
Reads the contents of the specified file.
Create a temporary Python file.
Close the stream.
Write data to file and ostream.
Add a new heart handler.
Add a failure handler.
Handle a pong message.
Generate a list of mini - batches from a sequence.
Return the path and filename from a pathfile.
Print the elapsed time and the number of times it took to display it.
Return a tuple of elapsed average and estend time units.
Extract the configuration from a. wininst file.
Uncaches a ZIP directory.
Quote a string argument for use in a NetASCII string literal.
Check if there are any conflicts in the distribution.
Set fetcher options in config file.
Create the home path if necessary.
Check if file name is an archive file.
Return a new notebook node representing a new heading cell.
Create a new metadata node.
Create a new author node.
Returns True if path is a directory and is writable.
Unquote a filename.
Checks if the given filename is a valid Python file.
Returns the path to the XDG directory.
Get the current ipython environment directory.
Returns the absolute path to the ipython package directory.
Get the path to a module in the ipython package.
Returns the number of dependencies that are older than the target.
Returns the MD5 hash of the contents of a file.
Check for old configs that are no longer valid.
Update the suggestions dictionary for the given object.
Get suggestions for the given object with size.
Returns a list of suggestions for the given object.
Returns the relative path to the current working directory.
Returns a list of all files matching the pattern.
Returns the md5 checksum of the file.
Initialize profiler.
Print the profiling results to a stream.
Closes the connection and cleans up the stats file.
Disable the wx application.
Disable event loop for Qt4.
Enables GTK.
Enable tk to open a window.
Enable event loop integration with pyglet.
Histogram for wave saver
Initializes the database.
Runs SQL against the database.
Returns information about the given session.
Get the last n rows of the table.
Returns a generator of all lines in a given range string.
Get the name of the histogram file.
Change the name of the current session.
Reset the state of the session.
Yields a range of lines for the session.
Store the output for the specified line number.
Write out the input and output caches to the database.
Stop the worker thread.
Get the number of CPUs in the system.
Get system per CPU time for all CPU cores.
Return a list of partition tuples for all disks.
Return a list of all pids.
Return a nicely formatted string from a pair of start and end positions.
Format a list of statements and a list of lines into a string.
Return a string representation of the current stack.
Join a list of regexes into a single string. num_ is the number of regexes
Remove the file specified by path. If the file doesn t exist nothing happens.
Recursively update the MD5 hash of the given value.
Update self. profiles with the current profiles.
Stop cluster.
Find a command in the PATH environment.
Return the body of the process.
Find code units in the given morfs.
Runs the coverage report_fn for each code unit found in the morfs.
Set the stdout and the backtrace.
Initialize the extensions.
Runs all the code needed to initialize the shell.
Run all the exec lines
Run all startup files in startup_dir
Runs the executable files.
Runs the code_to_run from the command line
Runs the module specified in the module_to_run attribute
Returns the filename of the data file.
Returns the contents of a file as a string.
Escape a string so that it can be used as a URI reference.
Run the coverage report.
Copy static and extra css files to the report directory
Writes an HTML string to a file.
Return the hash of the file at the given location.
Index the files.
Reads the status file from disk.
Writes the status file in the specified directory.
Sorts lst1 and lst2 and returns True if they are equal.
Get a slice of a sequence.
Splits a sequence into chunks of the specified size.
Read the manifest file.
Convert a glob pattern to a regular expression.
Returns True if filename matches any of the patterns.
Returns a list of all the files that have been installed on the system.
Start a new kernel.
Shuts down the kernel with the given id.
Kills the specified kernel
Get a kernel by its identifier.
Get the ports of a kernel.
Returns the notebook associated with the given kernel.
Start a new kernel for a notebook.
Shut down a kernel and delete the mapping for it.
Interrupt a kernel
Restart a kernel
Create iopub stream for the specified kernel.
Create a shell stream for the specified kernel.
Create a HB stream for the specified kernel.
Resets the instance attributes to their default values.
Convert html to an XHTML image file.
Fix html to strip leading and trailing empty paragraphs.
Try to get a unique instance of the given class or return None.
Given a list of tokenized terms and a list of search_fields construct a query that includes
Return a query that matches the query_string with the search_fields in search_fields.
Returns a date greater than a given number of days.
Returns a query that will query the given date less than the given number of days.
Get the null or blank query for the given field.
Add case insensitive fields to fields_dict.
Add command line options.
Validate the attributes of this element.
Check if we want a method.
Rotates the text.
Return the websocket URL for the current request.
Reserialize reply message.
Inject a message into the request s cookies.
Start the HB stream if not closed.
Stop the HB stream.
Loads the file.
Get the block index.
Seek to the block at the given index.
Edit the block at the specified index.
Show the specified source code block.
Print the colored source code blocks to stdout.
Run a function on a sequence in a separate thread.
Return the source code lines and index for a traceback.
Find lines that can be inspected.
Create a countdown.
Send signals to all engines and kill the controller.
Decorator to save the IDs of all messages that have been processed by this client.
Synchronize the results of a function with the client.
Runs f and spins after self.
Get all the messages in the mailbox.
Get a message from the queue.
Parse a URL into a dict.
Return a list of modules rooted at sys. modules.
Returns a list of module completions.
Return a list of completions for the run command.
Quote an XML attribute.
Configure the plugin.
Writes the statistics and errors to the error_report_file.
Add an error to the error list for this test.
Add a failure to the error list for this test.
Record that a test was successful.
Returns a random two - binary number.
Generate a random weighted number of loads.
Register the engine with the graph.
Remove the specified engine from the registry.
Handle lost tasks.
Audit the timeouts of the depending jobs.
Fail an unreachable job.
Marks a job as depending on its dependencies.
Submit a task to the mon stream.
Unserialize and dispatch the result message.
Handle a result message.
Handle a transitive dependency.
Update the dependency graph. If dep_id is none and self. hwm is specified
Prints the current state of the log file.
Write a line to the log.
Write data to the log file.
Stops logging.
Return a new notebook node with the given name and cells.
Add a string to the chain.
Add a new regular expression to the chain.
Dispatch a key.
Returns a generator yielding all the matches for the given key.
Called when the directory of the notebook is changed.
List all notebooks in the notebook directory.
Generate a new notebook id.
Delete the notebook id notebook_id from the rev mapping.
Checks if notebook with notebook_id exists.
Find path for notebook with notebook_id
Returns the path to a notebook given its name.
Get notebook metadata
Get notebook object for notebook_id
Save a new notebook object.
Save a notebook object.
Save notebook object nb.
Delete a notebook.
Create a new notebook and write it to disk.
Copy a notebook to the current working directory.
Yield tuples of token type token text line number token. string token. comment token.
Load the default config file.
Return the default classes for this class.
Parse the command line for terminalipython.
Initialize the application.
Initialize interactive shell.
Initialize shell banner.
Represent the type of an object.
Parse a notifier name into a list of strings.
Returns a dictionary of traits for the given class with the given metadata.
Returns the value of a trait s metadata key.
Check if the value is a subclass of self. klass. If not raise an error.
Return the default value for this field.
Check if the set is consistent with the completed set and against the failed set.
Returns True if this set is unreachable from the given set.
Return the dependency as a dictionary.
Returns the depth of a node in the tree.
Print binary tree.
Attempt to disambiguate a DNS URL.
Apply function f to each element of the sequence and return the result.
Validate targets.
Dispatch monitor traffic.
Dispatch a query message.
Handles a new heart.
Handles the failure of a heart failure.
Unserialize and save a task request.
Save a message to the IOPub database
Send a connection request to a client.
Unregister an engine.
Finish the registration for the given heart.
Send a shutdown request to the server.
Purge results from the database.
Extract content and buffers from a record.
Sends the get_history command to the client.
Perform a db query.
Context manager to temporarily change working directories.
Decode the output of a completed command.
Runs a command under the root directory of the repository.
Dispatch a message to the appropriate handler.
Check if the message is from this session
Annotate self. morfs with self. annotation_file.
Returns the installed version of the named command or None if the command fails.
Recursively squash unicode strings in an object.
Extract header from message or header dict.
Check the packers and unpackers.
Create a message of type msg_type with optional content parent and subheader.
Sign a list of messages.
Send a message list to the given stream.
Receive a message from a zmq socket.
Saves a string to a SVG file. Returns the filename.
Converts an SVG string to the system clipboard
Convert SVG string to QtImage.
Return information about an object.
Get the docstring of an object.
Get the source code of an object.
Get the inspect. getargspec for an object.
Find the absolute file path of an object.
Find the source lines of an object.
Get the definition string for the given object.
Returns a header colored according to the active colors.
Prints msg % oname if oname is not None.
Print class or method definition.
Pretty print the source code of an object.
Print the contents of the source file of the given object.
Format the fields for the table.
Search for namespaces matching a pattern in a table.
Start threaded reactor.
Return a string representation of the document.
Returns the XML representation of the document.
Loads all modules in a set of packages.
Inverts the keys and values of a dictionary
Recursively convert an object to a primitive.
Returns a list of matplotlib figure objects.
Print a matplotlib figure.
Select figure format.
Find the gui and backend for a matplotlib application.
Activate a matplotlib backend.
Configure inline support for the given shell.
Starts the thread.
Stops the thread.
Start a new Tracer.
Install a tracing function.
Start collecting traces.
Stop collecting traces.
Pause all the tracers.
Resume all paused tracers.
Return line data as a dictionary.
Collect exceptions from a list of remoteerror objects.
Return a list of strings representing the traceback.
Process startup environment.
Return the canonical directory for the given MORF.
Returns the source file name for the given filename.
Determine if the given filename should be traced with the given frame.
Determine if we should trace the given frame.
Write a warning message to stderr.
Check for packages in self. source_pkgs.
Start the run.
Called at interpreter exit.
Returns a regular expression to be used to exclude a particular attribute from the configuration.
Save the data to the data file.
Combine all the paths specified in the configuration with the data.
Collect line and arc data from the collector and store it in the data object.
Performs the MOF analysis for the given model.
Analyze the given codeunit.
Run the report.
Annotate the given morfs with the given morfs.
Run xml - reporter on the given morfs.
Reload data from file or URL.
Find the path to a given command.
Run a shell command and return its exit status.
Forward a file descriptor to a zmq socket.
Read lines from file and send them to the socket.
Find the launcher class for clsname.
Start the daemon process.
Build a launcher for clsname.
Start the engine manager.
Start the application.
Return a wx application instance.
Returns True if the main event loop is running.
Start the main event loop of the wx application.
Get QApplication instance for QT4 kernel.
Return True if the event loop running in Qt4 False otherwise.
Start the Qt4 event loop.
Create a blank canvas.
Draw a cross.
Draw a line between pos1 and pos2.
Create an annotated image from a grayscale image.
Generate a UUID.
Generate a cache key from a dictionary.
Returns the domain part of the given URL.
Returns a dictionary of url query parameters.