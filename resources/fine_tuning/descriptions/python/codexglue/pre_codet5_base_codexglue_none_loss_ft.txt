Convert Saia XML to a list of URL strings.
Download a URL from a Dailymotion site. :param url: URL of the
Download a video from Sina. :param url: URL to download :param output_
Print the text to the terminal.
Print log message. Args: text (:class:`str`): text to print to stderr
Prints an error message to the console and exits if exit_code is not None.
Prints a message to stdout and exits if exit_code is not set.
Detects the operating system. :rtype: str :rtype: str :r
Get information about a ckplayer by parsing XML. :param ckinfo: :return:.
Get m3u url, segments size and segments_list. :param url: url
Tries to legitimate a text. :param text: text to legitize :
Download the CBS file. :param url: URL to download :param output_dir
Match all patterns in `patterns` and return a list of matches.
Parse a query parameter from the given URL :param url: the URL to parse :param
Parse a host string into hostname and port :param host: the host string :type host
Get the title of a topic-part of a Wanmen document. :param json
Wanmen download by course.
Download a wan-mention by a course topic and a course part.
Return True if the task instance is in the queue or in the running queue.
Get a copy of the event buffer for the specified dag_ids or all dag_ids
Get the connection to the Snowflake database :returns: the connection object :rtype
Get the AWS credentials from the snowflake_conn_id attribute of the connection object
Get a field from the extras. :param str field_name: Name of the field
Copy an EXPERIMENTS statement to a file. :param sql: The SQL
Save a table to a temporary file in bulk dump format. :param table: the table
Upload a file to Google Cloud Storage.
Prints the current state of a task.
Return the connection to the API. :rtype: client.Client :rtype:
Get the details of an instance. :param instance: instance name :param project_id
Creates a new instance with the given body. :param body: the instance to create :
Delete an instance. :param instance: Instance to delete :type instance: str :param
Creates a new database. :param instance: The instance to create :param body: The
Delete a database for an instance. :param instance: instance name :param database: database
Starts the proxy process if it does not already exist.
Stop the SQL proxy process.
Returns the SQL proxy version. Return None if the proxy version is not found.
Create a new connection to the database. :param session: the session to use for the
Retrieve a connection from the database. :param session: the database session to retrieve the connection
Delete a connection from the database. :param session: the db session :type session:
Return a CloudSQLProxyRunner for this project. :returns: a CloudSQLProxyRunner
Return the database hook.
Cleanup the database hook to clean up the database when the database type is not set.
Reserve a free TCP port number for the connection to the proxy.
Normalize the job id to be a valid mlengine job id :param job_id:
Extracts the error code from the error message Args: e (str): the error message Returns
Delete all DAGRuns in the database.
Clear all task instances from the database.
Set the paused state of all DAGs. :param bool is_paused:
Print the statistics of a task instance.
Check if there are any successful DAGs in the system.
Creates the specified path if it doesn't exist. :param path: Path to the directory
Attempt to convert a string to a float if possible. :param s: string to convert
Make sure a value is localized or localized. :param value: :param timezone:
Make a datetime object from a datetime.datetime.datetime object.
Wrapper around `dt.datetime` that uses the ``timezone`` keyword in ``kwargs`
Get a connection to the druid broker. :rtype: connection.Connection :rtype
Return a requests.Session object for the current connection.
Run the request and return the response. :param data: The request data :type data
Check if response is valid :param response: response to check :type response: :class
Run the request and check the response :param session: :param prepped_request:
Create a new session. :rtype: session.Session :rtype: session.
Reset the database to a fresh state.
Return a human-readable string representation of an exception :param e: the exception :type
Return a list of records for the given SQL. :param hql: The SQL to be
Execute the given SQL and return a pandas dataframe. :param hql: SQL statement :param
Run the SQL with the given parameters. :param str hql: the SQL to execute :
Insert rows into a table. :param table: The table to insert :param rows:
Return a CosmosClient instance.
Checks to see if a collection exists in the current database. :param collection_name:
Create a new collection in the database. :param str collection_name: Collection name :
Checks to see if a database exists. :param database_name: name of the database
Create a database with the given name :param database_name: the name of the
Delete a database :param str database_name: The name of the database to delete :
Delete a collection. :param str collection_name: Collection name :type collection_name
Insert a list of documents into the database. :param documents: list of documents to insert
Delete a document from the database :param document_id: The ID of the document
Retrieves a document from a database and collection :param str document_id: document ID :
Get all the documents matching the given SQL string :param sql_string: The SQL string
Get a function by name :param name: Function name :type name: str Return
Creates a new function. :param location: The location of the function :type location:
Update an existing function. :param name: The function name :type name: str :
Upload a zip file to a project's functions upload URL :param location: The location of
Delete a function. :param name: Function name :type name: str :rtype
Return the statuses of the dependencies of this task. :param ti: the ti of the
Return ``True`` if `dep_context`` is met.
Get failure reasons for a given dependency :param ti: Dependency object :param dep_context
Parse the s3 config file.
Get the current credentials for this region. :param region_name: Region name of the
Get a connection to the vertica server. :returns: connection object :rtype:
Flushes the buffer to the logger.
If fileloc is a zip file, return it. Otherwise return fileloc.
Construct and return a task instance for this task instance. :param session: A session object
Start the DAG process.
Terminates the DagManager. :returns: None :rtype: None :ra
Gracefully terminate the process and terminate the process.
Start the DAG in the background. :returns: None :rtype: None.
Starts the dag parsing process in a loop and puts the results in the result_queue.
Starts the parser in a separate thread.
Refresh the DAG directory if it has changed since last_dag_dir_list_
Print file processing statistics if they have elapsed since the last time it was called.
Clear any non-existent import errors from the database.
Log processing stats. :type known_file_paths: list :type known_file
Set the list of file paths to new_file_paths. :param new_file
Wait until all processors have finished.
Terminate all child processes and wait for them to finish.
Create a paramiko connection to the remote host. :returns: a paramiko.SSH
Create a transfer job with the given body. :param body: the transfer body :type
Get a transfer job by name :param job_name: the name of the transfer job
Return a list of transfer jobs matching the filter. :param filter: :return:.
Update a transfer job. :param job_name: name of the job to update :
Cancel a transfer operation. :param operation_name: name of the operation to cancel :
Pauses a transfer operation. :param operation_name: operation name :type operation_
Resumes a transfer operation. :param operation_name: The name of the transfer operation
Wait for transfer job to satisfy expected statuses. :param job: transfer job :param expected
Find all the task_reschedules for a particular task instance. :param task_instance
Return a list of slots that are currently open in the pool. :rtype: list
Run a command and return its output. :param command: command to run :type command
Allocates the ids for the given keys. :param partial_keys: The keys to
Begin a transaction for the project.
Commit the current state of the project :param body: the current state of the project :
Look up a set of keys. :param keys: list of keys to look up :
Rollback a transaction. :param transaction: The transaction to rollback :type transaction: dict :
Run a query. :param body: the query to run :type body: :class
Get an operation by name. :param name: operation name :type name: str :
Delete an operation. :param name: The operation name :type name: str :param
Polls an operation until the operation is done or polling_interval_in seconds is
Return the FQDN of the socket connection.
Get the connection to the Languageservice service :rtype: Languageservice
Return a list of template fields for the given template class name.
Process a template field role :param app: :class:`astropy.lexer.Lexer
Dispose the ORM session and the ORM engine.
Append dags_folder, config_folder and plugins_folder to sys.path.
Check if the target task id is available. :param context: :return:.
Return True if the ticket_cache variable is set. Return False if it's set.
Convert an Alchemy object to a dictionary. :param obj: :return:.
Yields chunks from a list of items. :param items: :param chunk_size
Reduce `fn` into `chunk_size` elements of `iterable` in chunks.
Given a list of tasks, chain them into a single task. :param tasks:
Render a filename for a given task. :param ti: task object :param try_
Get a connection to the server.
Wait for the specified operation to be done.
Safely coerce the content of a JSON object to a string. :param content:
Handle the execution of a datadabricks operator.
Run pig with pig-cli. :param pig: pig to run
Return the state of the celery task. Args: celery_task (list):
Returns the number of tasks that will be executed at the time of sending the given number of
Return the number of tasks that need to be executed per fetch process. :rtype:
Get a connection to the server. :returns: A connection to the server :rtype
Gets a job from the service.
Wait for a job to be done :param project_id: The project ID of the
Creates a new version of the model. :param project_id: the ID of the
Set the default version of the model.
Return a list of versions of a model. :param project_id: ID of the
Deletes a version of a model. :param project_id: the project id :param
Create a new model in the project. :param project_id: ID of the project
Retrieve a model from the database :param project_id: The project ID :param model
Writes batch data to dynamodb table. :param items: list of items to write :
Integrate plugins from Airflow.PluginsManager to Airflow plugins.
Return the default executor.
Return an executor instance for the given executor_name. :param executor_name: The
Called when an error occurs during a segment operation. :param error: error raised by segment
Return a pymsql.SQLDBConnection object. :returns: pymsql.
Trigger a single dag. :param dag_id: DAG ID :param conf:
Delete a DAG. Args: dag_id (int): ID of the DAG
Get information of a task. :param dag_id: DAG ID :param task
Get a list of pools.
Create a pool. :rtype: pool.Pool :rtype: pool.Pool
Create or update a container group in a resource group. :param resource_group: the
Retrieves the exit_code and detail_status of the current state of the named instance.
Get the messages for the specified instance. :param resource_group: The resource group :
Get logs of a container. :param resource_group: :param name: name of
Delete a container from a container group :param resource_group: the resource group to delete
Returns True if the container exists in the specified resource group. :param resource_group:
Construct an ingest query for the given static_path and columns :param static_path
Push a message to the pubsub pubsub channel. :param context: The context :type context
Get the task instances for this execution. :param state: The state of the task instance
Get the task instance for the given task_id. :param task_id: the
Get the previous DAGRun for this dag. :param session: the db session
Get the previous scheduled dagrun for this execution_date.
Verify that the task is in the DAG. :param session: The session to verify
Make a Jenkins request to the server and return the response body and headers.
Convert a task context to a dict of airflow_var_name_format_mapping
Triggers a conditionally trigger on the dag_run_obj.payload :param context:
Query a metric. :param query: The metric to query :param from_seconds_
Get a DAG from the DAGManager. :param dag_id: DAG
Kill the zombies of the task.
Bag a dag into a sub-dag :param dag: dag to bag :param parent
Collect all dags in the given dag_folder :param str dag_folder:
Return a string containing the summary of the dag-bag statistics.
Add a number of days to a given date. :param ds: date to add :
Return a list of files that match the regex pattern. :param context: :return:.
Check if the file exists and is empty. :returns: True if the file exists.
Clear all the task instances from the given list of tis. :param tis:
Returns the number of times this job should be run. :rtype: int.
Return the current state of the task instance.
Set the state to failed and commit to the database :param session: the session to commit
Refresh the state, start_date, end_date, hostname, executor_config,
Clear all xcom data associated with this task.
Return a tuple of the dag ID, task ID, execution date and try number.
Check if there are any dependents of this task. :returns: True if there are
Return the time at which this task should be retried. :rtype: datetime.datetime
Return whether the job is ready to be retried.
Return True if the task pool is full :param session: a valid session :type session
Return the DAGRun object for this DAG. :param session: A database session
Push a key-value pair onto the queue. :param key: The key of the
Initialize the run context. :param raw: if True, set the run context to the
Close the log file and upload the log to the remote log file.
Get the connection to the API. :returns: the connection to use :rtype:
Start an instance in a zone :param zone: the zone name :param resource_id
Get the instance template for the given resource. :param resource_id: the resource ID
Wait for the operation to be completed :param project_id: Project ID of the operation
Check if the bucket exists. :param bucket_name: name of the bucket to check
Create a bucket on S3. :param bucket_name: bucket name :param region
Check if a prefix is in the bucket. :param bucket_name: bucket name
List all prefixes in a bucket. :param bucket_name: Bucket name :param prefix
List all keys in the bucket. :param bucket_name: bucket name :param
Checks if the key exists in the bucket. :param key: The key to check :
Given a key, return the object. :param key: The key :type key:
Reads the content of a key from the S3 bucket. :param key: The key
Checks if a wildcard key exists in this bucket :param wildcard_key: :param delimiter
Returns the first matching key in the wildcard_key :param wildcard_key: wildcard key
Query cassandra session. :returns: cursor :rtype: cursor.Cursor :rtype
Convert a user type into a dictionary of data. :param name: the name of the
Return the connection to the Speech API. :rtype: `SpeechClient`
Execute the query. :param context: The context to execute the query :type context:
Load airflow plugins from entry points Args: entry_points (list): A list of
Validate plugin_obj and return True if plugin_obj is not in existing_plugins.
Set the state to skipped for the given tasks. :param dag_run: the dag
Return the AZuredLFilesystemClient object :returns: AZuredLFilesystemClient
Check if a file exists on the server. :param file_path: Path to the
Return a list of files in a directory.
Execute the query and return the result. :param context: The execution context :type context
Uncompress an input file into a temporary location :type input_file_name: str
Query the database using mssql :rtype: None :rtype:
Build a metrics dictionary for a task.
Create a cgroup for the given path. :param path: the path to the cgroup to
Delete a cgroup from the tree :param path: the name of the cgroup to delete.
Do the actual API call. :param endpoint_info: Endpoint info :param json:
Get a connection to the Salesforce server.
Make a query and return the results :param query: The query :type query: str
Describe an object :param obj: the object to describe :rtype: dict :r
Get the list of available fields for an object. :param obj: the object to describe
Get an object from salesforce :param obj: object to retrieve :type obj:
Convert `pandas.DataFrame` to Pandas `pandas.DataFrame` with timestamp type.
Get a MongoDB collection :param mongo_collection: MongoDB collection name :param mongo_db
Returns True if there are any mail attachments with the given name. Args: name (str
Get attachments by name :param name: Name of the attachment :param check_regex:
Get the filename and payload of the file part of the message.
Adds records to the delivery stream. :param records: A list of records :type
Check if the task is in the next rescheduled state :param ti: the task
Send an email to a list of recipients :param to: The email addresses to send :
Send an email using SMTP. Args: to (str): The email address to send.
Convert the timezone to UTC if it is not already. :param value: :return:.
Check if a blob exists. :param container_name: container name :param blob_
Check if a prefix exists in a container. :param prefix: the prefix to check :
Create a blob from a string. :param string_data: :param container_name
Reads a file from a blob in a container. Args: container_name (str):
Delete a file from a container.
Return a ftplib.ftp.FTP connection object. :param self.ftp_conn
Return a list of files in a directory. :param path: :param nlst:
Store a file in the local file system. :param remote_full_path: The
Get the modification time of a file. :param path: file path :type path:
Execute the webhook. :param context: the webhook context :type context: webhook_context
Get the connection object for this service. :rtype: FileService :rtype:
Check if a directory exists in a share :param share_name: Name of the directory
Check if a file exists.
List all of the directories and files in a directory. :param share_name: Name
Create a directory on the file system. :param share_name: The name of the
Loads a file from a file-like object :param file_path: file-path
Create a file from a string. :param string_data: :param directory_name
Returns the connection to the storage backend.
Download a blob. :param bucket_name: Bucket name :param object_name:
Upload a file to S3 :param bucket_name: S3 bucket name :param
Check if an object exists in S3. :param bucket_name: S3 bucket
Check if an object is updated after a given timestamp.
Delete an object from a bucket. :param bucket_name: :param object_name
Get the size of a blob in a bucket.
Return the crc32c of an object in a bucket. :param bucket_name:
Get the MD5 hash of an object in a bucket.
Returns True if the secondary training status has changed. :param current_job_description:
Return the secondary training status message Args: job_description (dict): Job description prev_
Upload a tar file to S3 :param path: Path of the file to upload :
Configure S3 resources. :param config: S3 configuration :type config: dict :
Check if an s3 url is valid :param s3url: s3 url :
Return a log connection to be used by the botocore client :returns: the log
Start the dataflow job.
Run migrations in a single transaction. :rtype: None :rtype: None :
Run migrations on the database online.
Delete an instance. :param instance_id: instance id :param project_id:
Delete a table. :param instance_id: the instance ID :param table_id
Updates the cluster with the given cluster_id. :param instance: cluster instance :param
Prepare the command line for the SQLAlchemy command. :returns: list of commands.
Prepare a hiveconf string from a given dictionary :param d: a dictionary of
Check if a table with the given name exists. :param table_name: table name
Get a connection to the hiveserver2 database. :param schema: the schema of
Fetch results of a query. :param hql: the query to fetch :param schema:
Execute a query and return a list of records. :param hql: :param schema:
Get results as a Pandas DataFrame.
Return an instance of the productsearch client :rtype: productsearchclient.Client.
Return the URL of the Airbrake API endpoint. :returns: Airbra
Bind the given parameters to the given operation. :param parameters: the parameters to bind :
Escape all characters in a string :param s: the string to escape :type s:
Given a string field and a BQ type, try to convert it to the appropriate type
Validate that the value is of the expected type. :param key: The key of the
Returns a connection to the BigQuery database. :rtype: connection.Connection :rtype
Return a service that can be used to interact with the API.
Check if table exists :param project_id: project ID :param dataset_id:
Cancels the running job if it's still running. :returns: None :rtype
Run table delete. :param deletion_dataset_table: Name of the table to delete
Upsert a table resource. :param dataset_id: the ID of the dataset :param
Get information about a dataset :param dataset_id: dataset ID :param project_id
Execute an SQL query. :param operation: :param parameters: :return:.
Executes the given operation on the given sequence of parameters. :param operation: the operation to
Return the next row from the buffer or None if there are no more rows to retrieve.
Execute the query against the PostGRE PostGRE API. :rtype: cursor
Create intermediate directories. :param sftp_client: sftp client :param remote_directory:
Run the command and return a subprocess.Popen.Popen object.
Close the cfg file if it exists and the run_as_user is set to True
Command-line entry point for the command-line tool.
Build HTML header from the header_css and header_js lists.
Build a javascript chart with the series data :rtype: None :rtype: None
Create a x-axis with the given name. :param name: name of the x
Create a new y-axis with the given name. :param name: name of the
Return a sqlite3 connection. :rtype: sqlite3.Connection :rtype:
Get the last DAGRun for the given dag. :param dag_id: the
Send the message to the queue. :param context: The context to send the message
Convert an object to a JSON response. :param obj: the object to convert :type
Open a file or file-like object if it's a zip file or file-like
Return a unique cache key based on the request.path and request.args.
Get the videointelligence service client.
Get the API key from the Airflow API. :raises AirflowException
Return a new requests.Session object with the connection id set to self.http_conn
Executes the job. :param dict payload: The job payload :type payload: dict :
Build the payload to send to the OpenSGenie server :rtype: dict
Execute the hook. :param context: The context of the hook :type context: Context
Get a connection to the database :returns: the connection to the database :rtype:
Runs a query and returns the execution ID of the query. :param query: the query
Check the status of a query execution :param query_execution_id: The query execution
Poll for the query status of the query execution_id :param query_execution_id
Get a connection to the remote host. :rtype: pysftp.connection.Connection
Handle rate limit exception. :param rate_limit_exception: :type rate_limit
Get a table from a database. :param database_name: the name of the table
Return the location of the table. :param database_name: The database name :type
Return the status of a cluster. :param cluster_identifier: the identifier of the cluster
Delete a cluster from the cluster manager :type cluster_identifier: str :param cluster_
Return a list of all snapshots of the cluster :param cluster_identifier: the cluster identifier
Restore a cluster from a snapshot :param cluster_identifier: Cluster identifier :param snapshot_
Creates a snapshot of a cluster. Args: snapshot_identifier (str): The identifier of
Execute the API call. :param kwargs: kwargs to pass to the API call :type
Create a new job flow with the given job flow overrides :param job_flow_overrides
Filter a result list based on the file size. :param result: :param size:
Remove extensions that don't match the ignored_ext pattern Args: result (list): The
Execute the mongo query and save the result to S3. :param context: the context
Get pool by name.
Create a pool with the given slots. :param name: pool name :param slots:
Delete a pool from the database.
Convert a dictionary to a protobuf object :param py_dict: Python object :param proto
Wait for the operation to complete. :param operation: Operation to wait for :type operation
Get operation details. :param operation_name: operation name :param project_id:
Appends a label to a cluster proto message :param cluster_proto: Cluster proto message :
Get the webhook endpoint from the http_conn_id. :param http_conn_
Build the payload to send to the Discord API. :rtype: str.
Execute the webhook. :returns: None :rtype: None :raises: None
Encrypts the given plaintext with the given key_name :param key_name:
Return a connection to the Texttospeech API.
Close the log file and upload it to the remote S3 file.
Get environment variables to be passed to the worker. :returns: environment dict :rtype
Return a list of Secret objects for the worker.
Get the security context to use for the worker. :rtype: dict :rtype
Return the extra links to the task. :param operator: the task instance :type operator
Start the DagFileProcessor. :returns: None :rtype: None :r
Wait for the process to finish and return True if the process has completed successfully.
Called when a signal is sent to the child process.
Update the import errors in the database. :param dagbag: the DAGBag object
Find all the task instances in the given DAG. :param dag: DAG instance
Get a map of task IDs to task IDs, and the number of tasks that are in
Set the state of the task instances to the requested state. :param list task_instances
Enqueues the task instances with their queued state. :param simple_dag_bag:
Changes the state of the tasks that failed to execute :param session: the database session :
Process events from the executor event buffer :param simple_dag_bag: DAGbag
Update counters of running and to_run states :param ti_status: ti_status
Update the executor state with the current state. :param running: the state of the executor
Get a DAGRun for the given run_date :param run_date: The
Return a list of task instances for the given dag run. :param dag_run:
Set unfinished dag_runs to failed state :param dag_runs: list of
This callback is called when the heartbeat of the task instance has been received.
Get a client for the given project ID. :param project_id: project ID :
Get an instance. :param instance_id: instance ID :param project_id:
Delete an instance. :param instance_id: Instance ID :param project_id:
Delete a database. :param instance_id: instance id :param database_id:
Check if mail attachment exists in IMAP folder.
Prepare the additional parameters to be passed to the API. :param additional_properties: the
Get a connection to the database. :returns: the connection to the database :rtype
Check if a table exists in the cluster :param table: the name of the table :
Returns True if a record exists in the database. :param keys: a dict of keys
Build a command to track the driver status :returns: the command to send :rtype
Submits a spark job to the spark cluster.
Process the spark submit log and extract information from the spark submit log. :param itr:
Process thespark_status log. :param itr: the list of lines to process :
Return a task runner for the local task job :param local_task_job: the
Wait for a job to end.
Execute a query against the MySQL database. :returns: cursor object. :rtype:
Configure a csv file. :param file_handle: file handle :type file_handle
Write local schema file to local file :param cursor: cursor to write schema file :type
Get column type dict from schema Args: self.schema (dict): The schema to get
Map mysql_type to field type. :param mysql_type: mysql type :type
Return the extra data as a JSON object :rtype: dict :rtype: dict
Scale time units in time_seconds_arr :param time_seconds_arr: :
Given a number of days ago, return a datetime.datetime.datetime.datetime object.
Initialize a role with role_name, role_name_vms and role_perms.
Delete a role from the database. :param role_name: The name of the role
Get a list of roles for the current user.
Returns a dict of all permissions and view_menu names for all user's roles.
Returns True if the user has a role with the given name. :param role_name
Checks if the user has permission for the given view menu name :param permission_name:
Remove all permissions from the database.
Merge permission with permission_name and view_menu. Parameters ---------- permission_name :
Update the administrator's permission view. :returns: None :rtype: None :ra
Create a permission for all the DAGs in the current user's account.
Returns the fernet multifernet object, or None if the fernet key is
Check if partition exists in database. :param context: :type context: instance of
Poke the queue for messages :param context: the context of the request :type context
Get the connection to the remote HDFS server :returns: Client object :rtype:
Get a connection to the WebHDFS cluster. :rtype: client.Client.
Check if a path exists in the HDFS. :param str hdfs_path: the
Return a connection to the PINOT broker. :param pinot_broker_conn
Return a string representing the current connection URL. :rtype: str :rtype:
Convert a date object to a dictionary. :param field_date: datetime.datetime
Convert a `datetime.time` object to a dictionary representation of a time object.
Get a redis connection to the database. :returns: Redis connection object :rtype:
Execute a SQL query and return the result as a Pandas DataFrame. :param sql: SQL
Run SQL on the database :param sql: SQL to execute. :param autocommit:
Sets the autocommit flag of the connection. :param conn: the connection object :type
Serialize a single cell. :param cell: the cell to serialize :type cell: str
Check the health of the scheduler. :param session: :class:`sqlalchemy.session
Get the cloudant connection.
Executes the webhook hook. :param context: the webhook context :type context: SlackWebhook
Get the credentials from the request. :raises: AirflowException if the request
Returns an authorized http client for the current user. :rtype: httplib2.
Return a list of unfinished jobs.
Prepare the command to be passed to the database. :param cmd: the command to be
Normalize the given tensor to the given mean and standard deviations Parameters ---------- tensor : torch.
Crop an image. Parameters ---------- img : `PIL.Image` or `PIL
Flip an image to the left and right direction of the image :param img: image to
Apply a set of startpoints and endpoints to an image using Pillow-Cubic
Flip the top and bottom of an image. Parameters ---------- img : Image or ANTsImage
Adjust the brightness of an image.
Adjust the contrast of an image to the specified contrast factor Parameters ---------- img : PIL image
Adjusts the saturation of an image using Pillow's color enhancer.
Convert a PIL image to a grayscale grayscale image Parameters ---------- img : PIL image or
Save a tensor to an image file. Parameters ---------- filename : str Filename of the image
Find classes in dir. :param dir: directory to find classes :type dir: str
Read the info file and return a long tensor with labels. :param data_dir:
Reads the matches files. Args: data_dir (str): Path to the data directory
Calculate the accuracy of the output. :param output: the output tensor :param topk
Download a URL and save it to a file :param url: URL to download :param
Return a list of all directories in a given directory.
Return a list of all files in a directory with a certain suffix. :param root:
Download a file from Google Drive.
Get a random set of parameters for an image. :param img: image to generate :
Get a random set of parameters for distortion_scale. Args: width (int):
Get a random set of parameters for an image. Parameters ---------- img : `PIL.
Generate a transform to transform an image based on a set of parameters. Parameters ---------- brightness :
Get parameters to be used to generate an image. Args: degrees (list): list of
Download a file from the remote repository.
Download all images from the URL and save them to training_set and test_set
Get the current theme name. :param override: If ``True`` is passed, the
Get themes from templates_path. :param templates_path: Path to templates directory :
Parse the response and return a list of results Args: resp (requests.Response): The
Return a TensorFluent for the multidimensional normal computation of `args` with
Calculate the Eight-schools log_prob.
Build a random variable from a custom distribution and shape. :param distribution: :param sample
Max-Mask non-finite array along a given axis. :param x: array of
Tensor's event size. :param event_shape: Tensor's event_shape :type
Evaluates all-one-hot distribution. Args: fn: the function to be evaluated.
Converts an identifier to a function that can be passed to a Tensor constructor Parameters ---------- identifier :
The number of components and component params. Args: num_components (int32): the
Build the input pipeline. Args: x (list): x, y (list): y
Check that map_values is a valid tensor shape. :param map_values: tf
Calls the function `fn` with the given `args` and returns the result of the
Call the function with the given arguments and return the result, extra, grads.
If from_structure is a tensor-like, broadcast it to the to_structure.
Leapfrog step. Args: leapfrog_step_state: leap
Metropolis hastings step. Args: current_state: The current state
Create an instance of LayerLayer from a configuration dictionary. :param config: Configuration dictionary :
Convert x to a Tensor or return None if x is None :param x: :param
Expand x to the event_shape of the event tensor. Args: x (Tensor):
Compute the softmax of the cat probabilities Args: log_probs: if True, return the
Ensure TensorFlow is installed on the system.
Logistic regression. Parameters ---------- features : tf.Tensor Feature Tensor Returns ------- tf.Tensor
Extract features and labels from SkyNet's covtype.
Helper function to create a positive axis for a given axis and ndims Parameters ---------- axis :
Squeeze `x` along `axis` Args: x (Tensor): x to squeeze
Calculate the z-axis for the distribution Parameters ---------- x : float Latent Tensor or Tensor
Inverse of z. :param z: :rtype: tf.Tensor.
Returns a linear trend transition matrix. Args: autoregressive_coef (array
Hazard transition noise for semilocal-linear trend. Parameters ---------- level_scale
Find primes that are less than or equal to `n` that are less than
Returns the eps value for a machine dtype. Args: dtype (tensorType): the dtype
Calculate the inner bisection of a line search. :param value_and_grad
Print the given values to the pass through tensor. :param pass_through_tensor:
Raises an error if the shape of the parameter does not match the expected shape.
Interpolate a grid at a given location. :param grid: :param loc:
Interpolate grid with scale. :param grid: grid shape of the grid :param scale
Concatenate vectors. Args: args (list): List of vectors to concatenate.
Calculate the log-product of vectors vs and ms. :param vs: tf.Tensor
Logarithm of a matrix vector. Parameters ---------- ms : tf.Tensor vs : tf.
Matrix multiplication of vectors and multiplicity. :param vs: Vectors :param ms:
Extract log probabilities from the distribution. Args: num_states (int): the number of
Choose a random direction from the current_state_parts :param current_state_parts
Call the function `fn` with `fn_arg_list` if `fn_
Build training posterior for training Parameters ---------- param : `tf.Variable` Parameters ---------- initial_
Returns the mean and variance of the masked time series.
Returns the initial value of the masked time series.
Create a mixtures family for mixing over posterior draws. Parameters ---------- means : list
Get the range of values in this range. :param name: The name of the range
Resolve a distribution name from a list of arguments. Args: dist_fn_args (
Build the distribution function. :param model: The distribution function :type model: list :
Return the sum of the entropy of each element of the distribution.
Create summary image. Args: seqs (list): list of sequences name (string):
Visualize `inputs` and `reconstruct` `inputs` and `reconstruct`
Visualizes a qualitative analysis. Args: inputs (TensorTensor): inputs to be visual
Summarize distribution parameters. Parameters ---------- dist : distribution distribution name : str name_scope :
Summarize the mean in NATS units and store it in the TensorFlow summary.
Call the multivariatenormal diag op with the given inputs.
Returns a zero state with the same shape as the previous_output. Parameters ---------- sample_
Call the convolution layer. Args: inputs (tensor): the input image to be converted.
Sample a batch of samples using the static prior. Parameters ---------- samples : list of `float
The TensorShape for the batch_shape of the prior Parameters ---------- batch_shape :
Returns the batch shape of the model Parameters ---------- batch_shape_tensor :rtype:
Vector size to square matrix size. Args: d (float, int, np.ndarray
Sort an array. Args: values (:class:`~astropy.astropy.units
Sorts a series of values along a given axis.
Returns a Tensor-like for the n-ndtr function. Args: x (Tensor
Log-n-n-tr asymptotic series for log-n-
Calculate the Euclidean distance from x to x in the range [0, 1).
Text messages joint log probability. Parameters --------- count_data : tf.Tensor The
Returns `True` if the index_points is a multidimensional marginal.
Get or set the index points. :param index_points: The index points of the
Returns the outer squared difference between x and y Parameters ---------- x: tf.Tensor, shape
Returns the value and batchjacobian of the function f at x :param f: function
Split covariance into marginals Parameters ---------- block_sizes : list of block sizes Returns ------- margin
Return a string representation of a numpy array. Args: tensor (tensor.Tensor): numpy
The shape of the sample. :rtype: tf.TensorShape.
Returns the sample shape tensor.
Returns the value of the distribution. :returns: the value of the distribution :rtype
Return a numpy array representation of the EagleTensor.
Return the unit norm of a uniform distribution Parameters ---------- dimension : int Dimension of the distribution shape
Returns the log-normalization of the concentration matrix. Args: name (str
Returns the common dtype of the given list of arguments.
Broadcasts tensor_to_broadcast to the given target_tensors.
Return the value of the pdf at the current peak.
Compute the effective sample size for a single state. Args: states (tensor): The states
Create a potential scale reducer for a single state.
Compute the size of the axis along the x tensor. :param x: input tensor :
Given a list of states, return a list of states to be broadcasted to.
Removes the specified field from the mapping :param field: the field to remove :type field
Return the merge of the old and new values :param old: the old value to merge
Convert a dict or list of dicts into a tuple of dictionaries.
Given a function and a dictionary of keyword arguments, return the kwargs of the function.
VGG convolution block. Args: filters (list): number of filters to convolution kernel (
Checks if there is no u-turn between states. :param state_one: state
Return the next state, next state, next target log prob, next momentum and next
Calculate the log-joint of the current momentum and current target log-prob.
Random Bernulli random variable. :param shape: shape of tensor :type shape
Convert a nested structure into a TensorFlow tensor :param struct: nested structure :param
Return a dictionary of attributes to be passed to tf.tensor.overloadable_operators
Create a mixture prior with given mixture_components Parameters ---------- latent_size :
Pack images into rows, cols, rows, and depth. :param images: images to
Download a file from a given directory to a local file system. :param directory: directory
Call volatility_fn_results and grads_volatility_fn_results.
If the volatility is broadcast, then add zeros to each part of the volatility.
Call `fn` with `x` with `self._batch_shape_tensor`
Call the function and reshape the output. :param fn: function to call :param event
Helper function to compute the BDTR. :param k: :param n: :
Generate a flat list of sample distributions for a given sample shape :param sample_shape:
Return a list of strings for each topic in the list of topics_words Parameters ---------- topics
Adds EMA control-dependencies to the vector quantizer. :param vector_quantizer
Save an array of numpy arrays to a file. Parameters ---------- x : array of numpy array
Cast a TensorFlow dtype to a numpy array type. :param dtype: TensorFlow dtype
Return the base dtype of the given dtype. :param dtype: the dtype to be converted
Check if the given dtype is a boolean dtype :param dtype: the dtype to check :
Check if `dtype` is a complex type.
Calculate the maximum value of a given dtype.
Given a dtype, return its name.
Returns the size of the given dtype. :param dtype: tf.dtype or tf.
Assert that all items have the same base type as the expected type. :param items:
Return a function that accepts a reflected objective. :param simplex: :param objective_
Expansion function. Args: objective_function (function): The function that will expand the
Shrink the simplex until the best vertex has been shrunk.
Replace the element at a given index with a replacement element at a given index.
Prepare arguments to be passed to objective_at_initial_simplex and objective_at
Prepare the arguments for the objective function with the given initial vertex. :param objective_function
Build a fake MNIST data object.
Return a dictionary of configuration values for the Keras configuration. :rtype: dict.
Creates an instance of this class from the given config. :param config: configuration of the
Matrix multiplication of two matrices. :param a: matrix :param b: matrix :param
Helper function for _std_var_helper.
Pick a scalar condition from the predicate.
Finishes the log probability for a single fiber.
Finish prob for one fiber. Args: y (tf.Tensor): The fiber
If rotate_right is set to True, rotate the dimensions of the input tensor.
Raises an error if the given layer is not a batchnormalization layer.
Return a dictionary of parameters that are slices of the distribution Parameters ---------- dist : `ferm
Apply a single step to the distribution Parameters ---------- dist : distribution.Distribution Parameters ---------- params_
Applies a series of slices to the distribution Parameters ---------- dist : `numpy.ndarray` A
Returns the number of columns in the input tensor. Args: x: the input tensor of
Get a static value for a predicate :param pred: The predicate to evaluate :type pred
Returns the rank of the tensor given the shape of the input tensor.
Returns true if the scale is a diagonal scale. :param scale: scale to check :
Pads the mixture dimensions to the end of the input tensor. Args: x (
Check that ``x`` is non-negative and an integer form.
If x is None, return x. If x is None, return x.
Check whether `dt` is known to be an unsigned type.
Return True if the dtype is known to be signed by. :param dt: the dtype
Return the largest integer value of the dtype. :param dt: the dtype of the dtype
Return the largest integer value of a given dtype. :param dt: the dtype of the
Check if `dt` is an integer-like `dt` Parameters ---------- dt : Tensor
Generate a new seed for the given seed and salt. :param seed: The seed to
Dimension size of a tensor along a given axis Parameters ---------- x : array_like, shape
Raises error if rightmost_transposed_ndims is not an integer.
Raises an error if `perm` is not an integer or a tensor shape.
Return the event shape for the given permutation. Args: shape: the shape of the event
Returns the list of dimensions of x.
Build a backward pass step for the given timestep. :param get_transition_matrix_
Performs a Kalman transition between the mean and the covariance matrix and the transition noise.
Propagate mean across a line. Parameters ---------- mean : tf.Tensor `tf.Tensor
Propagate a covariance matrix to the dist matrix. :param cov: the covariance matrix
Compute the joint mean. Parameters ---------- self.joint_mean : list[Tensor] The
Returns the joint covariance matrix for the state prior.
Pushes latent means and latent covs to the observation matrix. Parameters ---------- latent_means
The log-normalization matrix for the concentration matrix.
The mode of the concentration in the mean direction :rtype: tf.Tensor
Rotates the input tensor. :param samples: the number of samples to rotate :type
Sample from a 3-D distribution.
Return a copy of the function. :param fn: The function to copy :type fn
Remove all keys with a given value from a dictionary. :param dict_: :param
Replace all values in a dictionary with their values in a pretty way.
Get samples from the distribution. Args: dist (DistTensor): The distribution to use.
Returns ``True`` if x is a ``NamedTuple`` or ``False`` otherwise.
Return a new `NamedTuple` with the result of `is_accepted` and `
Calls a function with the given arguments and returns the result and the gradient of the function.
Raises an exception if shape is not an integer shape or shape is invalid.
Return a list of all convergments that were converged or failed. :param conver
Update the position in the state with a new position. :param state: the state
Check if convergence is converged. :param current_position: :param next_position
Broadcasts a value to a target tensor :param value: the value to broadcast to :
Compute the harmonic number of the given tensor. :param x: the tensor to
Get a field from a kernel_results object.
Returns the variance scale term. Args: tf.Tensor Returns: tf.Tensor.
Return a TensorTensor or TensorTensor where the condition is true for tval and fval
Returns True if both values are finite. :param val_1: :param val_
Bootstrap the kernel and return the kernel results. :param init_state: the initial
Resnet block. Args: x (:obj:`tfp.Tensor`): x to
Deep Exponential Family. Args: data_size (int): data shape of the
Initialize the parameters for the Gaussian distribution. :param amplitude: The amplitude to compute :param
Returns the KL function for the given types. :param type_a: the type
Reads image from file and returns it as a TensorFlow image. Args: filepath (str
Download sprites zip to data directory. Args: data_sprites_dir (str
Creates a character from the given hair, top, and pants arrays.
Create a sequence of frames for a character. :param character: The character :param direction
Creates a random sequence of actions. :param character: :param action_metadata: :
Flattens a list of kernels into a single list of kernels.
Flattens a list of kernels into a single list of product kernels.
Build train, test, and test data from a random subset of images.
Insert back and keep dimensions. Args: x (tensor): The tensor to be inserted.
Make a list of non-negative dimensions for a given axis.
Sorts a tensor according to the top-k order. :param tensor: the tensor to
Assert that ndims is statically equal or greater than expect_ndims Parameters ---------- x :
Batch gather with broadcasts. :param params: :param indices: :param axis:
Broadcasts event and samples to all events in event_ndims.
Returns the control inputs for the inv_hessian. :param inv_hessian:
Transposes a tensor in batch mode :param mat: matrix to transpose :type mat:
Returns a TensorFluent for the sum of the right-most dimensions.
Given a list of tensors, return the common dtype of the tensors.
Returns the initial state of the optimizer Parameters ---------- value_and_gradients_function :
Mask for PSD problem. Args: x (:obj:`tf.Tensor`).
Get initial arguments for the initial population and objective function. Args: objective_function (function
Find the best value in the population. Args: population (:obj:`list` of
Check if the values of the values in the population are in a convection of the
Ensures that a tensor_or_list is a list. :param tensor_or_
Return a tensor with a tensor with a value equal to or greater than the given tolerance.
Build input pipeline. Parameters ---------- train_images : list of tensor_slices batch_size
Plot generated images. Parameters ---------- images : list of images Returns ------- fname : path to
Converts a list of production rules into a string.
Call the LSTM algorithm. Args: inputs (list): The list of inputs
Returns a multivariatenormal representation of the model Parameters ---------- inputs : tf.
Integrated Hat. :param x: input tensor :type x: tf.Tensor
Inverse of _hat_integral_inverse. Args: x (float, or Tensor
Return a list of assertions for the Lu algorithm. :param lower_upper:
Sparse block diag. Args: sp_a (:class:`tf.sparsetensor
Raises a TypeError if a is not a valid numpy matrix or if validate_args is
Generate a list of row and column slices. :param num_blocks: number of blocks
Generate a mask for a given number of blocks.
Creates a list of random integers for the given input size. :param input_size:
Creates a list of masks that should be applied to each input in the input list.
Returns a zero-dimensional multivatenormal diagonal matrix with a covariance function.
Convert the parameters to weights Parameters ---------- params_to_weights : list of tf.Tensor
Build the distribution for the given model :param model: the model to build :type model
Build and return the seasonal transition matrix for the given seasons.
Build seasonal transition noise. Parameters ---------- drift_scale : int, shape = (
Build a function that computes a combination of seasonal transition noise and its scale tril.
Validate that the shape of the observation data is fully defined and the shape of the observations shape
Returns the result of calling the BigDL function ``bigdl_type`` to add the
Set the checkpoint of the simulation to the specified checkpoint trigger. :param checkpoint_trigger:
Sets the range of the value to be scaled to be between min_value and max_
Optimize the layer. Parameters ---------- self : Layer The layer to optimize. Returns ------- layer
Set the summary information of the training process. :param summary: summary of the training process
Set the value's summary.
Set the training data of the model.
Get news20 texts from source_dir Args: source_dir (str): source directory
Download a GloVE W2V file and return a dictionary with W2V values
Compile the given optimizer, loss and metrics into the bigdl library. :param optimizer:
Evaluate the value on X and y. Parameters ---------- x : array-like, shape =
Predict the type of an RDD or local dataset Parameters ---------- X : RDD or
Read MNIST dataset. Parameters ---------- sc : `~fermipy.graphics.
Pre-process the MNIST dataset. Args: sc: `pandas.DataFrame`
Return the end trigger for the given options. :param options: the options :type options
Validate the optimizer with the given test data. :param optimizer: the optimizer to validate :
Returns the value of the field.
Calls the specified Java function on the specified bigdl_type. :param bigdl_
Convert an RDD to a Java Java object. :param rdd: The RDD to
Convert Python object to Java object. :param gateway: Java gateway instance :type gateway:
Return an activation layer given its name :param activation_name: Name of the layer to
Return the label of the object.
Read a parquet file into a bigdl_data_frame. :param path:
Write parquet data to a file using bigdl. Parameters ---------- path : str Path
Get an image from the camera :param float_key: the key of the image :
Returns the image of the tensor. :param float_key: The key of the tensor
Get the label of the tensor.
Get the predictive value of the variable. :param key: the key of the variable
Predicts the type of input data. Parameters ---------- X : numpy array or RDD of
Returns the Java representation of the transformed value. :param dataset: dataset to be transformed
Save Keras model definition as json file :param keras_model: keras model :type
Build a Keras model. Parameters ---------- keras_model : str Returns ------- keras_model
Predict the class of the data set. :param data_rdd: the data set
Gets the weights of the tensor.
Run the training function on the model. :param is_training: True if the training
Given a path to a file, return a Layer object representing it.
Load Keras model from JSON or HDF5 file Args: json_path (str):
Construct a new criterion with the given jcriterion and bigdl_type :param jcriterion
Load weights from weights json file Args: def_json (dict): The json of the
Load the imdb dataset from disk.
Build a keras model.
Return the input shape of the simulation.
Return the output shape of the function.
Read the MNIST dataset. Args: data_type (str): The data
Read movielens data sets from zip file. :param data_dir: directory
Return the path to the bigdl classpath.
Return True if the spark version of pyspark is greater than 2.2.0.
Export a checkpoint to a dictionary of tensors. :param checkpoint_path: path to checkpoint
Given a dictionary of tensor tensors, save them to a bigdl file.
Expands a tile of units along a given axis. :param units: :param axis
Simple attention. Args: memory (tf.TensorTensor): memory to be attected.
Attention layer. Args: inputs: list of inputs att_size: int of
Create a log file for this agent.
Writes log data to self.log_file :param utterance: Input utterance :type utterance
Summarize the gradient updates for each variable.
Read data by config :param dict config: configuration of the dataset :type config: dict
Perform interactalice request. :param agent: the agent to interactalice :type
Convert labels to one-hot format Parameters ---------- labels : list of labels classes: list of
Convert a list of probabilistic probabilities to one-hot classification model. Args: prob
Return a tf.Session configured with ConfigProto. :rtype: tf.Session.
Load the load_path into the net file if it exists. :rtype: None
Returns the momentum variable of the model.
Update learning rate and momentum variables in the graph :param learning_rate: learning rate
r"""Round-f1 macro. :param y_true: :param y_
Process a word and return a list of words. :param word: word to process :
Drop-out variational dropout. Parameters ---------- units : tf.Tensor keep_prob :
Build the model. Args: word_inputs (list): list of input words.
Build a basic network with pre-outputs and lstm outputs :param word_outputs:
Train the model on a batch of data. Args: data: list of data to train
Predict on a batch of data Args: data (:obj:`list`): list of tuples
Convert a list of words to a vector of words. Args: sent (list): The
Given a list of tags, return a numpy array of tag indices. Args: tags (
Calculate BLEU measure for a set of features. Args: y_true: a
Verifies that the given URL is a valid SC URL. :param url: the URL to
Extract a list of x509 certificates from a string of PEM certificates.
Verifies that the signature is valid. :param amazon_cert: :param request_body
Verify cert signature chain. :param signature_chain_url: :return:.
Return a JSON representation of all controls in this group.
Returns a list of bot frameworks for all controls in this group.
Returns a list of the telegram messages for all the controls in the control list.
Return a list of AlexaControl instances for all controls in the group. :rtype
Calculate the accuracy of the prediction. Args: y_true: A list of lists of
Computes the accuracy based on the accuracy of the true and the predictions. :param y_
Read data from a file. :param data_path: :param args: :param
Creates a bot agent for the hello bot :returns: bot agent :rtype: bot
Convert an array into a one-hot unit tensor Parameters ---------- x : array-like
Converts a list of tuples of metric names to numbers of decimal places, rounded to ``precision
Load the model from the checkpoint file. :param exclude_scopes: the list of scopes
Save the current model to the save_path. :param exclude_scopes:
Create a TensorFlow train op for this optimizer. Args: loss (:class:`tf.
Search for a word in the trie :param word: Word to search :param d:
Starts the timer. :rtype: None :rtype: None :rtype:
Handle a request. :param request: The request to handle :type request: dict :
Process a single utterance. :param utterance: :type utterance: str :param utterance:
Generate the response to be sent to the client. :param response: the response to be
Handle an intent request. :param request: intent request :param slot_name: slot
Handle the launch request :param request: the request to be executed :type request:
Handle unsupported requests :param request: HTTP request :type request: dict :rtype:
Pretty print the current state of the object.
Takes a list of losses and returns the average loss as a percentage of significant losses.
Build a Chainer model. Args: config (dict): the chainer config file.
Interact with the model. Args: config (dict): The model to interact with.
Run the model on a stream of input files.
Read input file and return a list of word_sent, pos_sent, tag_
Return a function from a string. Args: name (str): name of function Returns:
Get metric by name Args: name (str): name of metric to retrieve Returns:
Return the decay type corresponding to the given label. :param label: label of the decay
Get the best value based on the losses. :param values: :param losses:
Encode a list of tokens into a list of word vectors. :param tokens: list of
Read requirements.txt from requirements.txt file.
Log loss function. :param y_true: :param y_predicted: :
Return a string showing the details of the given data :param item_data: The data
Build and return an EcommerceAgent instance.
Run the bot framework server. Args: app_id (str): ID of the bot
Download source_url to dest_file_path Args: dest_file_path (
Untans a file to a folder.
Recursively update a dict with the values of editing_dict.
Set the MD5 hash of the given URL. :param str url: The URL to
Set a query parameter in a URL.
Return the alexa data.
Return a JSON representation of this control.
Return a dict that can be sent to the ms bot framework. :rtype: dict
Return a JSON representation of the control.
Generate a bot-framework for the activity :returns: the bot-framework for the activity
Calculate F1 using Squadad v2. :param y_true: list of
Calculate the recall at a given k-th sample. Args: y_true: list
Check if the GPU is available on the system. :returns: True if the GPU
Parse a single property of a configuration object :param item: the value of the property :
Parse a config file. Args: config: Config file to parse Returns: dict :r
Expands a path to a full path. :rtype: str :param path:
The main loop. It handles incoming and outgoing requests. :returns: None :rtype
Delete a conversation. :param conversation_key: conversation key :type conversation_key:
Refresh the list of certificates that have expired since the last time the certificate was expired.
Verify the signature of the request :param signature_chain_url: :param signature:
Handle a request from the server :param request: A request object :type request: dict
Import and return a class from a string.
Get a model from the registry. :param name: The name of the model :type
Get the GLM regularization path for a model. :param model: the model to
Make a glm model from a list of coefficients Args: model (Model): The model
Convert a list of key-value pairs into a CloudV3 object :param keyvals
Shut down the H2O connection :param bool prompt: Whether to prompt for shutdown
Return True if H2O is running. :returns: True if H2O is
Lists all the jobs in the H2O cluster.
Return a list of time zones.
Fill this H2OCluster object with properties from another H2OCluster object.
Stabilizes a given test function. :param test_func: test function :param
Get the summary of a key :param key: The key of the key :param column
Delete a frame from a key :param key: The key to delete :type key:
Get a list of model builders. :param algo: the name of the algorithm :type
Validate model parameters. :param algo: algorithm name :param training_frame: training
Compute metrics for a given model and frame :param model: name of the model :param
Delete a model by name :param key: name of model :param ignoreMissingKey:
Run multiple EC2 instances. Args: count (int): The number of instances to run
Terminate an EC2 instances. :param instances: list of instances to terminate :type instances
Stop the specified instances in the ec2 region :param instances: list of instances to stop
Start the specified EC2 instances. :param instances: list of instances to start :param
Reboot multiple instances. :param instances: list of instances to reboot :type instances: list
Wait until one of the given ips is available on the remote host. :param ips:
Get the fully qualified name of a function.
Returns a string representation of the function arguments. :param func: the function to call :
Wrap the input text at `wrap_at` characters. :param text: the text
Wait for the job to complete and resolve the model. :returns: None :rtype
Train the model on X and Y Parameters ---------- X : `DataFrame` Parameters ---------- y :
Returns a dictionary of parameters for this estimator.
Signal handler function. This is called when a signal is received. This function is called when
Wipe the output directory.
Remove a sandbox directory. Args: parent_dir (str): parent directory. dir_
Scans stdout to get the port number from the output_file_name and stores it in
Scrapes the cloud size from the stdout. Args: nodes_per_cloud:
Stop the child process and wait for it to exit.
Stop all nodes in the cluster and stop all nodes in the cluster :returns: None.
Return the IP address of the node.
Return the port number of the node. :returns: the port number of the node.
Determine the vector size based on pre-trained data.
Calculate H2O mean relative error. Parameters ---------- y_actual : array-like,
Calculate mean squared error. :param y_actual: :param y_predicted:
Calculate the median absolute error between predicted and actual data Parameters ---------- y_actual : array
Compute the H2O-Explained variance score. :param y_actual:
Check that a variable is of one of the given types :param var: variable to check
Raise an exception if the value does not match the given regular expression :param v: the
Raises an exception if ``v`` does not satisfy ``cond``.
Check if a variable is of type vtype.
Get a human-readable type name for the given type. :param vtype: type to
Check if the variable is of any type. :param var: variable to check :type
Check if a variable is a constant. :param var: The variable to check :type
Get the configuration of the H2OConfigReader object. :rtype: dict.
Read config from candidate log files. :rtype: list :rtype: list.
Yields candidate log files for use with log.add_to_log and log.
Store model progress. :param res: :param now: :param self._next_
Recalculates the model parameters based on the current time and the current time.
Estimate the completion time based on the current time of the completion. :param now: The
Guesses the interval at which the next job should be processed. :rtype: int
Compute the progress at time `t` Args: t (float): The time of the
Get the time at which the progress is at x_target :param x_target:
Draw text on screen. Args: txt (str): Text to draw. final (bool
Compute widget sizes. :rtype: int :rtype: int :rtype:
Get terminal size in bytes.
Set the encoding to use for the bar file :type encoding: str :param encoding:
Fits the table into the given frame.
Flushes the cache of the current execution context.
Return the type of the given column. :param col: column name :type col:
Print the summary of the table. :param return_data: Return summary of the table
Describe the current chunk of the video file :param chunk_summary: if True, show
Returns the first `rows` rows and `cols` columns in this `DataFrame`.
Multiplies the elements of the matrix into the elements of the first row of the table.
Return a list of the levels of this H2OFrame. Args: self (H
Returns the number of levels.
Set the level of this H2O window. :param level: the level of the
Set the levels of this node. :param levels: the levels to set :type levels
Rename the columns in this table. Args: columns (dict): The columns to rename.
Set the names of the variables in the expression. :param names: the names of the
Set the name of the column. :param col: column number :type col: int
Return True if the first frame is in the second frame. :param item: the item
Return a H2OFrame where each H2O frame is a H2O Frame
Stratified k-fold column.
Print the structure of the H2O H2O matrix.
Pops the column at the given position. :param i: the position of the column
Concatenate an array of frames into a single DataFrame. Parameters ---------- frames : array_like
Create a new H2ODataFrame from a sequence of `DataFrame`s `data`
Create a H2OFrame from a list of rows or columns. Args: data (
Group the elements of the sequence by the ``by`` argument. :param by: the
Return a new `H2Oframe` with ``method`` applied to ``self`
Return a re-level expression for the given value. :param y: the value to
Insert missing values into the H2O dataset.
Return the factor representation of this H2ORecord as a h2o_result.
Split the table into rows that match the pattern. :param pattern: The pattern to split
Return a copy of this sequence with rows removed from the start of the sequence.
Calculate the entropy of the table.
Return the number of valid substrings.
Create a `DataFrame` from `data` or `data2` if `dense`
Substitutes the pattern with the replacement string. :param pattern: Pattern to replace :
Convert the frame to upper case. :rtype: `~astropy.frames.
Return a new expression that only has the last row in the frame.
Return a ``H2ONode`` representing the first row of the H2O table
Return a `~astropy.core.frame.frame.Frame` instance.
Return a ``minute`` expression. :rtype: `astropy.expression.Expression
Run the DataFrame if seed is None or if seed is None, return the result.
Apply `fun` to this H2OFrame.
Parse the given text into a Python code object.
Parse a file into a Code object. Args: filename (string): The file to parse
Move the cursor to a new location. Args: drow (int): Number of rows
Unparse the current token and return the result as a list. :rtype: list
Return the list of centers of the cells in the model Returns: list of list of
Return the standard centers of each cell.
Send a POST request to the H2O API endpoint :type endpoint: str :param
Check version of H2O cluster to make sure it's newer than H2O.
Import a file or directory into a list of files or directories that match the pattern.
Parse the raw data into a Frame object. Args: setup (dict): A dictionary of
Make a deep copy of the `data` `data` with `xid` `xid
Return the model for the given model ID. :param model_id: id of the
Get a grid by id. :param grid_id: ID of the grid :type
Get a single frame from the H2O Frame object.
Download the model as a POJO file :param model: The model to download :type
Download a H2OFrame to a CSV file. Args: data (H2O
Run the demo function. :param str funcname: Name of the demo function :param
Load a dataset from the H2O installation.
Make metrics API request. Args: predicted (h2oFrame): predicted frame actual (
Upload a file to a new key :param file_path: Path to the file to
Check that the frame ID is valid. :param frame_id: Frame ID to check
Return a human-readable string representation of a number of bytes.
Convert a slice into a slice of a given total. :param s: the slice to
Return ``True`` if `slice` is normalized.
Wait for the job to complete, then remove it from the queue. :rtype:
Return a map of model_id to a list of deep features for the test data.
Print the summary of the models. :param header: print the header of the table :
Print a table of hyper-parameter values for each model. :returns: None :r
Return list of hyperparameter values for model with given id. :param id: id of
Return hyper parameters as a dictionary. :param id: Id of the model to get
Get the list of available archetypes for the given test data :param test_data:
Generates a scree plot of the variances of a model Parameters ---------- type : str or
Translate the given name to lower-case and upper-case. :param name: the
Decrements the indent level of each line of the text :param ind: indent level (
Main function to extract the run-into file from the command-line argument list.
Close the session and clean up any resources associated with it. :rtype: None.
Return the session ID of the current user. :rtype: str :rtype:
Start logging to the given destination. :param dest: destination to log to :type dest
Convert data payload to string :param data: Data payload :type data: dict :r
Prepare a file payload for sending to the H2O API. :param filename:
Log the start of a transaction. :param endpoint: The endpoint :type endpoint: str
Log the end of a transaction. :param start_time: the start time of the
Write a message to the log file.
Print a message to stdout. :param msg: the message to print :param flush:
Get an automl project from the leaderboard. :param project_name: project name :
Download a POJO from the H2O leader to `path`. :param path:
Download the mojo to the given path. :param path: Path to the mojo
Compute the mean and standard deviations of the data Parameters ---------- X : :class: `
Transform input data. Parameters ---------- X : numpy.ndarray, numpy.ndarray, shape=
Apply the inverse transform to the matrix Parameters ---------- X : array_like X: array of
Extract a true string from the string content.
Find the node_name in each_line and remove it from temp_func_list
Given a list of tests, find out if the build timeout is found in the list of
Find build failure in build_failed_message, and store it in g_build_
Find build id in each line of the test output file. :param each_line:
Extracts the job build URL from the build URL string. Args: url_string (str
Grab all java messages from the java file and store them in the global global variables.
Save the dictionary of failed test info to a file. :param dict g_failed_
Write the summary text file to g_summary_text_filename.
Write the file content to the file2read file. :param file2read: file
Writes a java message to the text file. :param key: the key of the message
Load the java messages to ignore.
Normalize an enum constant. :param s: enum constant :type s: str :r
Find synonyms for a word. :param word: The word to find :type word:
Polls the job for status changes :param verbose_model_scoring_history:
Write the H2O object to a POJO file :type pojo_name: str
Fits a frame to this image. Args: fr (:class:`h2o.
Return a dictionary of default values for all parameters in self.parms :rtype: dict
Get the actual parameters for the model Parameters ---------- actual_params : list of parameters to
Get a deep features from the test set Args: test_data (TestData): The
Get the history of the scoring of the model. :returns: Scoring history :r
Show the summary of the model :returns: None :rtype: None :raises
Returns a dataframe of the cell values of the model. Parameters ---------- use_pandas : bool
Return the list of residual degrees of freedom. :param bool train: if True,
Return the model's coefficients as a dictionary. :rtype: dict :rtype:
Download a POJ file. :param path: path of the file to download :param
Download a mpojo from the H2O API.
Saves the model details to a file :param path: path of the file to save
Raises an error if the length of y_actual and length of y_predicted
Returns a list of models for cross validation Parameters ---------- cvmodels : list A list of
Wait for a keypress to be pressed.
Return the data frame of the cell as a pandas dataframe.
Print the table to the screen :param header: if True print the header of the table
Search for a jar in the current working directory.
Generator of paths for jar files in PATH_POINTER_JAR_JARS
Returns a csv.DictWriter that writes a CSV file to a file-like object.
Convert a directory path to a relative URI. :param dirpath: The path to the directory
Return a list of module names that are contained in the package. :rtype: list
Write the API documentation for the modules in this project to the given directory.
Return a list of the values of the cell. :rtype: list.
Load the java messages dictionary from the java.sql.file. :returns: None.
Adds a new message to the global message_dict.
Save java message dictionary to a file. :returns: None :rtype: None.
Print a list of java messages to the ignore_text_filename of g_java_
Parse command-line arguments. Args: argv (list): List of command-line arguments
Print usage text and exit with an error code.
Given a root directory, return a list of all files in that directory.
Find a magic in a file.
Main entry point to test test. Args: root_dir (str): root directory of
Return a new H2OFrame with the given `data` transformed into the pipeline.
Summarize the failed runs in the summary.json file and add them to g_summary
This function extracts all the intermittens and writes them to a CSV file.
Plot the metric. Args: type (str): the type of the metric to plot.
Check if the builder is available. Return True if available, false otherwise.
Cleans up the failed test data back to the given month tokep. :param month
Return a dict of all endpoint names and endpoints in this project.
Update the default site forward.
Return a JSON representation of the given data :param data: data to serialize :type data
Comment a user :param str user_id: ID of the user to comment :param
Try to get a user's password from the secret file.
Like a user. :param str user_id: Id of the user to like :
Like a hashtag. :param hashtag: The hashtag to like
Check if a user is not in the blacklist or blacklisted list.
Read a list from a file. Args: file_path (str): Path to a
Set the schedule time for this message. :param schedule_time: The schedule time
Defer delivery of the message.
Guess the service info from the spec path Args: spec_path (str): Spec path
Return the request's URI. :param request: the request :type request: :class
Returns a connection to the target host :param request: the request object :type request:
Perform a request on the server. :param request: The request :type request: Request
Returns the authorization server of the authorization server.
Validate request URI. :param uri: URI to validate :type uri: str :
Returns the CLI profile from the CLI environment. :returns: Profile object :rtype:
Open a request. :param method: HTTP method to use :type method: str :
Set the request timeout in seconds. :param timeout_in_seconds: The timeout in
Set the request header. :param name: Name of the header :param value: value
Get all response headers. Return a list of all response headers. :rtype: list
Send the request to the client. :param request: the request to send :type request
Return the status of the request.
Get the status text of the current request. Return the status text :rtype: unicode
Return the body of the response. Return the body of the response. :rtype:
Set the client certificate for this request. :param str certificate: the client certificate :type
Send a PUT request to the server. :param method: The HTTP method :param uri
Add a header to the request. :param name: Name of the header :param value
Send the given request body to the client. :param request_body: the request body
Get the response from the request. :returns: A Response object. :rtype:
Given an id_name and an id_prefix_to_skip, return the id
Return the serialization name for the given element name.
Extract entry properties from entry node. :param entry: entry node :param include_id
Get children of node from given path :param node: node to get children :param path
Find namespaces from a child node.
Convert an XML string to a ServiceBusNamespace. :param xmlstr: the XML string
Converts a service bus region XML string to a ServiceBusRegion object.
Convert an XML string to a namespace availability response object. :param xmlstr: the XML
Converts a service bus management XML to a metrics object. :param xmlstr: XML string
Updates an existing knowledge base. :param kb_id: :param update_kb:
Build a package from a PR number.
Replace the word alterations of a word. :param word_alterations: list of
Retrieves the storage account properties for the specified service. :param service_name: The service
Retrieves the storage account keys for the specified storage service.
Regenerates the storage account keys for the specified service. :param service_name:
Deletes the storage account with the specified service name. :param service_name: the name
Checks if the specified storage account name is available. :param service_name: the
Retrieves the hosted service properties. :param service_name: Name of the hosted service :
Deletes a managed service. :type service_name: str :param service_name:
Deletes the specified deployment. :param service_name: Service name :param deployment_name
Swaps a deployment of a production. :param service_name: Name of the service
Updates the status of a specified deployment. :param service_name: The service name :
Walks up the upgrade domain of a service in a deployment. :param service_name
Reboots a role instance in a service deployment.
Deletes the role instances specified by role_instances_names from the specified service.
Checks whether the specified service name is available on this host. :param service_name:
Returns a list of certificates for the specified service.
Retrieves the certificate associated with the specified service. :param service_name: the service name
Adds a service certificate to this subscription.
Deletes the certificate for a service. :param service_name: Name of the service :
Gets the management certificate for the subscription. :param thumbprint: the thumbprint of the
Adds a new management certificate to this subscription. :param public_key: the public key
Deletes the management certificate from this subscription. :param thumbprint: the certificate to delete :
Retrieves the properties of the specified affinity group. :param str affinity_group_name:
Creates a new affinity group within this subscription.
Deletes the specified affinity group from this subscription. :param affinity_group_name: the
Retrieves a list of subscription operations for the current user. :param start_time: :
Deletes a reserved IP address. :param str name: Name of the reserved IP address
Associates a reserved IP address with a virtual IP address. :param name: Name of the
Disassociates a reserved IP address with a service.
Gets the reserved IP address of a reserved IP address.
Retrieves a role in a deployment. :param service_name: Service name :param deployment
Deletes a role from a service in a deployment. :type service_name: str :
Starts a role for a service in a deployment.
Starts roles for the specified roles in a service. :param service_name: the service
Restarts a role of a service in a deployment.
Adds a DNS server to the service. :param service_name: Name of the service
Updates the DNS server for the specified service. :param service_name: Name of the
Deletes the specified DNS server from the specified service and deployment. :param service_name:
Lists the versions of a resource extension. :param publisher_name: Name of the publisher
Unreplicates a virtual machine image. :param vm_image_name: Name
Share a virtual machine image with a permission.
Deletes a virtual machine image. :param str vm_image_name: name of the
List VM images. :param location: The location of the VM image :param publisher
Deletes the specified image from OpenStack. :param image_name: the name of the
Gets the data disk for the specified lun in the specified service in the specified deployment.
Deletes the data disk for the specified lun for the specified service and deployment. :param service
Updates a disk. :param disk_name: disk name :param has_operating
Deletes a disk. :param disk_name: disk name :param delete_vhd
Builds the receiver object for this link. :returns: None :rtype: None.
Create a new shared access key from a connection string :param str conn_str: Connection
Returns a list of subscription clients for the given topic. :param topic_name:
Parse the response headers to an asynchronous operation result :rtype: AsyncOperationResult.
Perform a GET request on the given path :param path: The path of the request :
Perform a PUT request. :param path: the path of the PUT request :param body
Retrieves the status of the operation associated with the specified request. :param request_id:
Update the management header of a request. :param request: the request to update :param
Build a travis package from the travis_tag environment variable.
Retrieves the list of regions associated with this service. :returns: List of region objects.
Lists all available namespaces. :returns: List of namespaces. :rtype: list of
Get the namespace for this service. :param name: Name of the service :returns:
Creates a new namespace. :param name: Name of namespace to create :type name:
Deletes a namespace. :param name: Name of the namespace to delete :rtype:
Checks if the named namespace is available in this service. :param name: Name of the
Fetches a list of topics for a topic. :param name: topic name :type name
Gets all notification hubs with the given name. :param name: Name of the notification
Gets a list of Relays associated with this account. :param name: Relays name
Gets the metrics rollup queue. :param name: name of the metric rollup queue
Get the metrics rollups for a metric topic. :param name: the name of the
Get the metrics rollups notification hub. :param name: metric name :param hub_
Gets the rollups for a metric relay. :param name: The name of the metric
Create a new environment in the given directory. Args: env_dir (str): the
Create a virtualenv with the given packages.
Creates a new SQL Server. :param admin_login: The SQL Server admin login :
Sets the administrator password for a server. :param server_name: The name of the
Fetches a list of quotas for the specified server.
Deletes a firewall rule from a server. :param str server_name: Name of
Retrieves the firewall rules for the specified server. :param str server_name: Name of
Returns a list of service level objectives for a particular server.
Delete a database from the server. :param server_name: Name of the server
Retrieves a list of databases with the given name. :param name: The name of the
Get the session state of the session :param session_id: the session id :type
Set session state. :param state: session state :type state: string :param state
Validate the challenge. :param challenge: the challenge to validate :type challenge: str :
Return an error handler for the given error. :param error: the error to process :
Creates a queue. :param queue_name: Queue name :param fail_on_
Deletes a queue. :param queue_name: Name of the queue :param fail_
Retrieves a specific queue from the specified queue. :param queue_name: Name of the
Creates a topic. :param topic_name: topic name :param fail_on_
Retrieves the topic with the given name.
Creates a rule for a subscription. :param topic_name: The topic name :param
Gets a rule for a topic in a subscription. :param topic_name: Topic name
Retrieves a list of rules for the subscription. :param topic_name: Name of the
Creates a subscription for the specified topic. :param topic_name: The name of the
Retrieves a subscription from a topic. :param topic_name: Name of the topic to
Returns a list of subscriptions for the specified topic. :param topic_name: The topic
Sends a message to a topic. :param topic_name: Name of the topic
Unlocks a subscription message. :param topic_name: Name of the subscription :param
Sends a batch of messages to a queue. :param queue_name: The name of
Unlocks a queue message. :param queue_name: Name of the queue to lock
Receive a message from a queue. :param queue_name: Queue name :param
Receive a subscription message :param topic_name: topic name :param subscription_name:
Creates a new event hub in Azure Hub. :param hub_name: Name of the
Updates the event hub with the given hub. :param hub_name: The name of
Retrieves an event hub. :param hub_name: the name of the hub :
Sends an event to the hub. :param hub_name: Name of the hub
Updates the service bus header based on the HTTP request. :param request: The HTTP request
Get the authorization string for the given request :param request: :param httpclient: :
Checks if the token is expired :param token: The token to check :type token:
Get a token from the token store. :param str host: the host name of the
Update the request URI query with the values from the request.path and request.query.
Delete the message from the queue or subscription :rtype: None :raises:
Unlocks the current queue or subscription :returns: None :rtype: None :ra
Renews the lock of the queue or subscription :rtype: None :raises:
Add the appropriate headers to the request. :param request: the request object :type request
Return the body of the request as a dict suitable for a batch request :rtype:
A generic error handler that raises an AzureHttpError. :param http_error: the
Handle redirect requests. :param r: redirect request :rtype: :class:`~
Set the profile to be used by this object.
Delete an SQS queue :param str queue_name: Queue name :param bool fail_
Deletes the topic with the given name Args: topic_name (str): The name of
Create a Shared Access Key from a connection string. :param conn_str: Connection string
Get the properties of the resource.
Return True if the lock is expired or False otherwise.
Return a list of results from the results queue. Args: results_queue (list):
Task collection thread handler. :param results_queue: Queue of tasks to be processed.
Build a configuration from the given configuration. :param config: The configuration to build :type
Create a Message instance from a response. :param response: The response to send :param
Convert a ``etree.Element`` to a `Rule` instance.
Converts an entry element to a queue. :param entry_element: the entry element :
Converts an XML element representing a topic into a `Topic` object. :param entry_
Convert a ETREX entry element to a Subscription object. :param entry_element:
Parse a list response from an enum operation. :param response: the response :type response
Get the properties of an entry element. :param element: the entry element :type element
Return a list of QueueClient objects. :rtype: list of QueueClient objects.
Returns a list of topic clients. :rtype: list of topics :rtype:
Retrieves the site details for the given website. :param webspace_name: The name of
Deletes the site identified by the website name. :param webspace_name: name of the
Update an existing website. :param webspace_name: The name of the website
Restarts a website. :param webspace_name: The name of the webspace to restart
Retrieves historical usage metrics for a given website. :param webspace_name: :param website
Fetches the list of metric definitions for the given website. :param webspace_name: The
Gets the publish profile XML for the given website. :param webspace_name: Name of
Retrieves the publish profile for the given website. :param webspace_name: The name of
Creates a new cloud service. :param cloud_service_id: The ID of the
Checks if a job collection is available in a cloud service. :param cloud_service_
Retrieves a job collection. :param cloud_service_id: :param job_collection
Cancel scheduled messages :param sequence_numbers: sequence numbers to cancel :type sequence_
Re-establish the connection to the broker and wait for it to be re-est
Extracts a certificate from a publish settings file. Args: publish_settings_path (str
Load cookies from cache and restore them to the http session.
Calculate terminal width of a string. :param value: value to compute :type value:
Return the cut-prefix of a string of length `max_len` from the terminal
Print a message in-place. Args: msg (str): the message to print.
Format a file size as a human-readable file name. :param size: file size
Formats the elapsed time into a human-readable string. :param elapsed: the elapsed time
Create a status line with the given parameters. :param params: :return:.
Prints a progress bar for the given iterator with the given prefix. :param iterator: the
Return the number of segment numbers that are available in this period. :rtype: int
Yields all segments in this region. :param kwargs: kwargs of the segments :type
Wait for the task to finish. :param time: Time to wait :type time:
Add a segment to the queue. :param segment: The segment to put :type segment
Queue a value to be added to the given queue. :param queue_: The queue
Generate the request parameters for a pvswf request :param pvswf: pvsw
Extract the nonce from the last redirect request.
Find vpid for a given url :param url: url to the mediator :param
Parses a JSON string and validates it :param data: data to parse :param name:
Parse XML data into ElementTree.ElementTree :param data: data to parse :type data
Parse the data as a query string into a dictionary of values. :param data: The
Search for a key in a dict or list :param data: a dict or list :
Yield tags from HTML. :param html: HTML string :type html: str :param
Determine the encoding of the given sample as a JSON string. :param sample: The sample
Parse the content of the response as JSON. :param res: the response :param args
Parse XML response. :param res: :param args: :param kwargs: :return
Parse a list of cookies and add them to the current request cookies :param cookies: A
Parse HTTP headers. :param headers: HTTP headers :type headers: list :rtype
Parse a list of query parameters and store them in the self.params :param cookies:
Get the message to send to the client. :rtype: str :rtype:
Create a log record with the given name, level, function, message, args, exc
Login the user. :param email: The email address of the user :param password:
Load a support plugin from a given module name :param name: name of the plugin to
Update the qsd of a URL. :param url: the url to update :param
Iterate over the tags of the file descriptor. Args: fd (file-like object):
Generator that yields the required arguments of the argument. :param name: The name of the
Check if file exists and return file output :param filename: filename to check :type filename
Create an output stream for the given plugin :param plugin: The plugin :type plugin:
Create an HTTP server. Args: host (string): the host to bind to port (
Yield HTTP requests for a player.
Output a passthrough stream to a player output file. :param stream: the stream
Open a stream and return the file descriptor and the prebuffer. :param stream: the
Output a stream of player data to a player output file. :param plugin: The plugin
Read data from the stream into the output. :param stream: The stream to read :
Handle a single stream from a dictionary of streams. :param streams: dict of streams
Fetch streams from the plugin. :param plugin: the plugin to fetch streams :type plugin
Attempt to fetch streams from the plugin, retrying if necessary. :param plugin: plugin to
Resolve the name of a stream by looking for the name of a synthesized stream.
Print a list of available plugin names.
Open a browser to authenticate with Twitch. :param twitch_client_id:
Load all streamlink plugins in a list of directories. Args: dirs (list): list
Sets the streamlink HTTP session options based on the command line arguments. :rtype:
Load plugins from the plugins_dir if it exists. :param extra_plugin_dir
Log the current versions of the system.
Get the stream ID from the given text. :param str text: The text of the
Extract an iframe from the given text. :param text: The text to parse :type
Returns the value of the option specified by key. :param key: The key of the
Set plugin option. :param plugin: plugin name :type plugin: str :param
Get the value of a plugin option :param plugin: plugin name :type plugin: str
Resolve the given URL to a URL. :param url: the URL to resolve :param
Load all plugins in the package at the given path :param path: path to plugins
Return the number of hours, minutes and seconds in a human-readable format.
Find the URL of the player.
Load data into a M3U8 object. :param data: data to load :
Check if a command is supported by a player :param cmd: Command to check :type
Extracts the stream id from the given html. :param html: the html to parse :
Extract stream info from HTML stream info. :param html: stream info :type html:
Login to the server. :param username: username of the user :param password: password
Apply a function to a key in the map :param func: the function to map :
Call CrunChyroll API. :param str entrypoint: :param dict params:
Start a new session with the API. :returns: session id. :rtype:
Get information about a media. :param media_id: ID of the media :param
Create the crunchyroll API object.
Output a character as a string. :param c: character to output :type c:
Read 'n' bytes from the stream.
Return the value of the code at the current index.
Return the explanation of the code.
Set the decodetable to be a dictionary of symbols and their lengths.
Set the length table for this symbol. Args: lengthTable (dict): A dictionary of
Read a single symbol from a stream. :param stream: stream to read :type stream
Return a human-readable explanation of the bit pattern at the index of the bit pattern.
Return the value of the index in the range [lower, upper) :param index:
Return the lower and upper bounds of the extracatable array at the given index.
Get the value at the given index and add the `extra` to the end of the
Return the mnemonic for the symbol at the given index. :param index: the index
Return the mnemonic string for the given index. :param index: the index of the
Compile actions into a list of actions :returns: list of actions :rtype: list
Do the given action on the given widget. :param w: the widget :type w
Make a string containing the hex representation of the stream data at the given position in the stream
Parse the metablock length. :returns: True if metablock length.
Print an uncompressed version of the input stream. :returns: True if the input stream is
Read and store block type. kind: kind of the block type kind: kind of block
Take a list of values and return an IMTF-style vector. Parameters ---------- v :
Read prefix array. :param kind: kind of prefix array :type kind: int :
Patch ``f`` so it can be used as a function name. :param f:
Add the virtual columns to the model with a proper motion to vperpendicular.
Run the app. Args: args: The command line arguments for the application. kwargs:
Open a list of files and return a dataframe. Parameters ---------- filenames : list of strings Returns
Load data from a SAM file and return as a numpy array :param username: :
Create an `astropy.table.Table` from a `astropy.table.
Convert a dictionary of scalar values to a numpy array. :param kwargs: a dict of
Read data from a CSV file :param filename_or_buffer: a file-like
Return a REST API server. :param url: :param kwargs: :rtype:
Computes the zeldovich matrix of `n` times `dim` with `n
Concatenate all elements in a dfs. Args: dfs: a list of nodes to concatenate
Return a column virtual range. Parameters ---------- start : integer Start of the column stop : integer
Opens the dataset at the given path. :param path: Path of the dataset to open
Evaluate an expression against this dataset. :param expression: Expression to evaluate :type expression:
Return the list of columns which are depending on the current selection. :param ds: the
sorts the list of pairs and indices according to the given order :param ncol:
Wait for all jobs to be done. :returns: None :rtype: None.
Opens the given document in the current operating system :param document: the document to open :
Write a file to a file-like object. :param f: file-like object
Split masked arrays and combine masked ones into a single masked mask. Parameters ---------- arrays : list
Calculate the median approximation of the expression with the given percentage. :param expression: expression to
Plot a 2d plot of the dataset Parameters ---------- x : list x,y : list
Plot a 3D plot of the volume Parameters ---------- x : list of x,y,
Return the data type of the expression. :param expression: expression to evaluate :type expression
Return the private directory for this file.
Remove the virtual_meta directory from the private directory.
Write the virtual meta data to a JSON file :returns: None :rtype: None
Write the meta data to a JSON file. :rtype: str :rtype:
Add a variable to the scope. :param name: The variable name :type name:
Evaluate a variable. :param name: Name of the variable :type name: str :
Evaluates the selection mask for the given indices. :param name: the name of the selection
Return a dictionary representation of the table.
Returns a copy of the dataframes Parameters ---------- column_names : list of column_names
Convert the main dataframe to an arrow table.
Return an astropy.table.Table object for this table.
Add a column to the DataArray :param name: The column name :type name:
Rename a column. :param name: Name of the column :param new_name:
Add virtual columns from cartesian to polar coordinates :param x: :param y: :param
Add virtual columns with cartesian velocity to polar coordinates. :param x: x coordinates :param
Add virtual column polar velocities to cartesian coordinates.
Add a rotation to the virtual columns :param x: :param y: :param angle
Add virtual columns spherical to the cartesian basis Parameters ---------- alpha : array-like A
Add virtual columns with cartesian coordinates to the spherical harmonics. :param x:
Add a virtual column to the model. :param name: The name of the virtual column
Delete a virtual column :param name: name of the virtual column :type name: str
Add a new variable to the model. :param name: variable name :param expression:
Deletes the variable with the given name :param name: The variable name :type name:
Return the last `n` elements of the sequence.
Prints the top and the last ``n`` rows of the table. :param n:
Concatenate i1 and i2 in the specified format. i1 and i2 must
Sets the current row of the table :param value: the row to set :type value
Return a copy of this dataframe with the columns removed.
Create a new dataframe with the given indices. :param indices: indices of the columns to
Returns a copy of the range with all elements removed from the range.
Undo the selection of the given name :param name: The name of the selection.
Redo a selection. :param name: The name of the selection :type name:
Check if selection can redo :param name: name of the selection :type name: str
Select a rectangle on the map :param x: x coordinates :type x: int :
Select a circle from the image. Parameters ---------- x, y : int The coordinates of the
Creates a selection of the given name :param name: The name of the selection :param
Find a valid name for the given initial_name. :param initial_name: The
Return a graphviz representation of the tree.
Categorize a column in the dataset.
Return a new dataframe where the values in `values` correspond to the values in `values
Return the data of the table as an object of class datas. :rtype: object
Returns the number of elements in the image.
Add columns from the other table to this table :param prefix: the name of the
Concatenate `self` and `other` together into a new DataFrameConcatenated object.
Add a new column to the dataframe.
Given a function, patch it with the name of the function. :param f: function
Fill in a column or numpy array with a value :param ar: column or numpy array
Get the autotype of a numpy array Parameters ---------- arr : numpy array A numpy array
Return a numpy.recarray of the attributes of the object :rtype: numpy.
Store properties in a file-like object :param fh: file-like object :param
Write a comment to a file-like object.
Writes a property to a file-like object. :param fh: file-like file
Universal newline characters in a file or file-like object. :param fp: file
Show the versions of the modules and their dependencies.
This function is called when a function is renamed to a new name. :param old_
Set the numpy library to use for the Fourier transform :param lib: the numpy library
Download beat track. Args: input_file (str): filename of file to be uploaded
Adjust the tuning of an audio file by taking harmonic tuning and tuning
Hz-to-Mel conversion. Parameters ---------- frequencies : array-like Hz
Convert Mel to Hz Parameters ---------- mels : array_like, array_like
Return a list of frequencies for the Fourier Transform Parameters ---------- sr : int, number of
Filter the Fourier transform using the constant-spectrum-q filter Args: sr (
Trim off the last n_bins elements of the CQT response.
Compute the response matrix using the CQT algorithm Args: y (array-like):
Return the number of bytes to downsample at least `n_octaves` samples.
Perform an early downsample of the given sample type.
Create a transition matrix of uniform states Parameters ---------- n_states : int The number of
Sets the current image to the provided image.
Check that `axes` is an instance of `~matplotlib.axes.Axes`.
Scale axes. :param axes: Axes object :param ax_type: Axes
Compute the frequency-heterogeneity basis for a given number of coordinates using the fft
Coordinate-mel-Hz basis for N-quaternions.
Coord-cqt-hz function Args: n (int): The index of the
Returns a list of chroma bins for a given number of octaves Parameters ---------- n :
Generate a time series for a given number of frames. Args: n (int): number
Return the stretch of a time series Parameters ---------- y : array-like A time series
Convert HPSS beat tracks to time series.
Helper function to filter neighbors of a set of neighbors Args: r_ptr: list of
Calculate the number of bandwidths for a given window. :param window: window name
Fill a window-squeezing stream with a window-squeezing window.
Calculates the Jaccard distance between two intervals.
Match the query intervals to a list of candidates that overlap with any of the given intervals.
Match intervals between intervals_from and intervals_to Parameters ---------- intervals_from : np.
Load a audio file into a list of channels. Parameters ---------- path : string Path to the
Convert an audio sequence to a mono sequence of mono samples Parameters ---------- y : array
Return a set of files that match the extensions. :param dir_name: The directory
Stretch an audio file to the desired speed. Parameters ---------- input_file : str The
Parse command-line arguments and return a dict of variables.
Perform a HPSS test and save the result to the output file :param input_
Beat Tracker. :param onset_envelope: :param fft_res:
Compute beat local score for onset_envelope :param onset_envelope:
Return backlink and cumulative score for Beat track. Parameters ---------- localScore : np.
Return the last beat of the median score. :param cumscore: cumulative score of
Detect on-set and save to output_csv Parameters ---------- input_file : file path
Check that ``x`` is an integer and cast it to ``cast``.
Reads a single image from the image file.
Read a single frame from the file and return it. :param int frame_id:
Write a cvt file to a directory Parameters ---------- frame_dir : str Path to the
Create a progress bar for a task or a list of tasks :param func: function to
Flip an image in place :param img: image to flip :param direction: direction of
Rotates an image with a given angle around a given center :param img: image to
Given a list of bboxes, return a numpy array of bboxes clipped to the same
Return bboxes scaled by a given scale factor. :param bboxes: bboxes of
Pads an image with the given shape with the given pad_val.
Returns an impad image that is a multiple of `divisor` pixels.
Scale a image size by a given scale. :param size: image size :type size
Resizes an image to a certain size :param img: image to resize :param size
Resizes the image to fit into the destination image :param img: image to be
Register a file handler for one or more file formats.
Get a priority from a string or integer. :param priority: The priority value :type
Dequantize an array. :param arr: array to dequantize :param min
Draws a PIL image. Args: img (PIL.Image): JPEG image to draw
Dequantize a flow matrix Parameters ---------- dx : array_like, array_like,
Load a checkpoint file into a model Parameters ---------- model : `torch.model.Model
Convert a dict of state weights to CPU weights :param state_dict: dict of state
Save model checkpoint to file. :param model: the model to save :param optimizer:
Initialize optimizer with model parameters. Parameters ---------- optimizer : torch.Optimized optimizer Returns ------- optimizer
Initialize the logger. Args: log_dir (str): The directory of the log file
Return the current learning rate for the current optimizer Parameters ---------- current_lr : list Returns -------
Register a new hook with the given priority. :param hook: Hook to register :
Run the workflow on the given data_loaders. :param data_loaders:
Register training hooks. Parameters ---------- lr_config: a list of training hooks optimizer_
Cuts a video file from a given start and end position.
Concatenate a list of video objects into a single output file :param video_list:
Returns a list of items from a file. Args: filename (str): filename to list
Create a dictionary from a file. Args: filename (str): filename of the file to
A 3x3 convolution with 2D-D convolution Args: in_planes (
Wrapper for cv2.imread. :param img_or_path: path to
Read an image from a byte array. :param content: bytes of image data :param
Writes the image to file_path. :param img: image to write :param params
Convert a BGR image to gray scale image.
Converts a gray scale image to a grayscale BGR image Parameters ---------- img : array
Iterate over `inputs` and cast to `dst_type` Parameters ---------- inputs : iterable
Checks if a sequence is of the expected type. :param seq: the sequence to check
Slice a list into a list of lens values. lens is a list of lens values
Calculate the average of the values in the history. :param n: the number of
Scatter the input to the given devices and stream. :param input: the input to
Return a color value from a color string or color tuple or numpy array. :param color
Check if the given timer has passed since the last check. :param timer_id:
Starts the simulation. :returns: None :rtype: None :rtype: None
Return the elapsed time since the start of the timer.
Return the amount of time taken since the last check.
Print a flow in a window. :param flow: the flow to show :type flow
Create a color-wheel image from a set of bins. :param bins: list of
Compute the accuracy of the given target. Parameters ---------- output : `torch.Tensor`
Given a list of inputs and a list of kwargs, scatter them into inputs and kwargs.
Perform the request and return the response object :rtype: :class:`response``.
Returns a JSON object. :param encoding: :param loads: :param content_type
Corresponds to the URL request method aws_text. :param encoding: optional encoding
Handle AWS callback. :param aws_callback: :param response: :return:.
Perform multiple requests. :param urls: list of URLs :param is_gather:
Send a request to the given url :param url: The url of the request :param
Start the master process.
Normalize a task to be run in version 2.0.0 :param task: task
Return the name of the wheel distribution.
Return the basename of the wheel archive.
Add additional requirements to the package metadata file :param str metadata_path: path to the
Create a new activity with a text. :param text: the text to be entered :
Creates an activity with a list of suggested actions. :param actions: :param text:
Renders the given attachment as a list. :param attachment: The attachment :param text:
Activity for a list of attachments. :param attachments: List of attachments :type attachments:
Create an attachment with the given URL and content type. :param url: :param content
Sets the telemetry client. :param value: The telemetry client :type value:
Read multiple keys from the container :param keys: list of keys to read :type keys
Write the changes to the database. :param changes: The changes to write :type changes
Delete one or more items from the collection. :param keys: List of keys to delete
Create a StoreItem from a result dict. :param result: The result dict :type
Create a dictionary from a store item. :param si: store item :return:.
Sanitize a key so that it can be used as a key in the form of a
Create the database and container. :param db_id: The name of the database to
Get or create a database. :param doc_client: client to use :param id
Gets or creates a container. :param doc_client: the doc-client to
Fill QNAs event. Args: query_results: A list of query results.
Returns a conversation reference for the given activity :param activity: the activity :type activity:
Get the name of the step at the given index :param index: the index of the
Return True if the channel_id supports suggested actions. :param channel_id: channel
Check if a channel supports card actions. :param channel_id: ID of the channel
Get the channel ID from the turn context. :param turn_context: :return:.
Returns True if the token is from an emulator token. :param auth_header:
Creates an HeroCard attachment. :param card: Hero card :rtype:
Set the classical control register to the given value :param classical: The classical
Return a shallow copy of this object.
Append the name of the control to the given string :param string: The string to be
Generate a qasm query string for the function. :rtype: str :rtype
Run the circuit and return the resulting circuit. :param circuit: The circuit to run :
Performs a single pass through the DAG. :param pass_: The DAG
Returns a list of all the passes in the working list. Return a list of strings.
Dump all the passes of the flow controller as a dict.
Factory method for instantiating a flow controller. :param passes: :param options: :
The u-base function. :param theta: :param phi: :param lam:
Returns the parameters of a single gate. :param gate: The gate :type gate:
Return a matrix for a single-qubit gate Parameters --------- gate : `Gate`
Convert a circuit to a DAG. :param circuit: The circuit to convert :type
Calculates the fit of the log-likelihood. Args: x (float): the number of
Calculate the Oscillator fitting function. Parameters ---------- X : array-like A
Plot the coherence of a particular gate Parameters ---------- xdata : list or list of
Create a list of numpy arrays representing the mean and standard deviation of the raw_rb.
Plot the survival probabilities of the data Parameters ---------- xdata : list of data to plot
Composes a U3 gate from a two-qubit grid of qubitsets.
Convert from yzy to yzy, zyz. Parameters ---------- xi : list of
Check that the input state is a matrix of dimensionality 2. :param quantum_state
Trim an image to the background image.
Get gate span from qreg list. :param qregs: list of qreg
Run the algorithm on the DAG. :param dag: the DAG :type dag
Append a barrier to the circuit :type qargs: list :param qargs: The
Process bit ID nodes. :param node: the node to process :type node: :
Process a Gates node. :param node: A G gate node :type node:
Process a CNOT node :param node: A CNOT node :param node: A
Process a measure node. :param node: The measure node to process :type node:
Process an If statement node :param node: The If statement node :type node: If
Create a new instance of the op_class specified by name :param name: the name
Return the duration of the given channels :param channels: :param channels: :return:.
Return the start time of the given channels. Args: channels (list[str]):
Return the stop time of the given channels :param channels: :param channels: :return
Insert instructions into the schedule.
Dumps additional data into valid_data. :param valid_data: :param many:
Load additional data into the valid_data :param list valid_data: the valid data
Validate an instance against its schema :param instance: instance of the instance to validate :type
Return a dictionary representation of the model. :rtype: dict :rtype: dict
Create a new instance of the class from a dict. :param dict dict dict_:
This function is the same as the qft function, but it's used to generate the
Chop a real-or-negated array into a real-or-symmetric
Calculate the inner product of two vectors. Parameters ---------- vector1 : array-like, array
Given a state matrix, return the number of non-squares of the state matrix.
Estimate of the entropy of a state matrix Parameters ---------- state : np.ndarray The state matrix
Computes the mutual information of a state. :param state: the state of the state
Computes the entangled entropy of a sequence of states. Parameters ---------- state : array-
Return the quaternation of the quaternation of the quaternation of the
Flattens the schedule into a single schedule. Args: schedule (Schedule): the schedule
Shift a schedule to a given time. :param schedule: schedule to shift :type schedule
Insert a child schedule into the schedule. :param parent: Parent schedule component :param time
Append the child schedule to the parent schedule.
Build a u3 gate. :param theta: :param phi: :param lam:
Return the current status of the backend. :rtype: backend_status.BackendStatus
Starts the iteration of the iteration. :type iterations: int :param iterations: The number
Time remainingest est. :param completed_iter: number of completed iterations :rtype
Disassemble a Qobj into a list of circuits, run_config, user_
Compute the hamming distance between two strings.
Create a quaternion from a rotation around an axis Parameters ---------- angle : float The angle of
Compute the quaternion from an euler angle and a rotation matrix Parameters ---------- angles : list of
Return a copy of this quaternion with its normalized components.
Convert this vector to a 3x3 matrix.
Return the rotation matrix as a vector of euler angles. :rtype: np.
Process data and return a dictionary of labels, values. Parameters ---------- data : dict The data
Check if the type of the parameter is a list of values. :param value: The
Raise an exception if j is out of range. Args: j (int): The index
Returns True if the matrix is a square matrix :param mat: the matrix to check :
Check if a matrix is a diagonal matrix :param mat: the matrix to check :param
Check whether `op` is a symmetric matrix with respect to `rtol` and `
Check if a matrix is a hermitian matrix Parameters ---------- mat : numpy array or
Check whether ``mat`` is positive ``semidefinite ``mat`` Parameters ---------- mat
Check if the matrix is identity matrix Parameters ---------- mat : matrix to check ignore_phase :
Check if a unitary matrix is considered to be unitary :param mat: matrix of
Convert a list of data into a list of Chai objects Parameters ---------- rep : str
Convert operator to superoperator. :param rep: operator to convert :type rep: str
Convert data to kraus Parameters ---------- rep : string or list of strings.
Convert data to a Chi or Chi matrix Parameters ---------- rep : str or list of
Convert a sequence of samples to a point-to-point-list.
Helper function to convert a sequence of data to a stinespring sequence of input dimensions.
Convert input data to an operator Parameters ---------- rep : str or list of strings to be converted
Convert a binary operator to a list of numpy ndarrays. Parameters ---------- rep : str The
Convert a stinespring array to an operator that can be used. :param data:
Convert superoperator to Choi. :param data: :param input_dim: :
Reshuffle the data according to the input and output dimensions. :param data: the
Convert a kraus matrix to a column-wise covariance matrix Parameters ---------- kraus
Return kraus components of a Hermitian or Hermitian matrix.
Convert a list of stinespring vectors to a list of kraus vectors.
Converts a stinespring matrix to achoi matrix.
Convert a list of kraus matrices to a list of stine matrices.
Convert kraus matrix to superoperator Parameters ---------- kraus_l : list of
Convert a `chi` to `choi` in `data` Parameters ---------- data :
Transform a data matrix from Choi to Chi. Parameters ---------- data : array_like
reravels between two matrices. :param mat1: matrix :param shape1
Transform the data matrix from pauli basis matrix to a unitary basis matrix.
Check that the input_dim and output_dim have the same number of qubits.
Hides the tick lines and the labels of the axis :param axis: the axis to
Set the label of the plot based on the convention. :param convention: the convention to
Clears the current state of the object. :rtype: None :rtype: None
Add one or more vectors. Args: vectors (list|np.ndarray): list of
Render the main figure and axes.
Plot the front of the sphere.
Show the figure. :param title: Title of the figure :type title: str :
Returns the top layer of the map. :rtype: str :rtype: str
Return the MID as a string with padding and padding.
Return the bot string with padding and padding. :rtype: str :rtype:
Return the length of the message in the message.
Return a list of parameters for the label of the given instruction.
Return the label for the instruction in the textdrawings box. :param instruction: The
Returns a LaTeX representation of the scope.
Add a deprecation filter to the warnings.warnings module.
Return a dictionary of information about the local hardware. :rtype: dict.
Check if a connection to a host exists :param hostname: hostname to connect :type hostname
Check if the job status is in the HTML format :param job_var: the job
Create a constant time series Parameters ---------- times : np.ndarray A numpy array of
Returns the square of the time series. Args: times (ndarray): The time series.
Return the triangle of a time series. Args: times: The time series of time points
Calculates the cosine of a signal. Args: times: :param amp: :param freq
Calculate the derivative of a gaussian distribution Parameters ---------- times : np.ndarray A list of
Apply a Gaussian function to a set of times. Parameters ---------- times : array-like,
Return the default pass manager.
Create a default pass manager with a list of basis gates. :param basis_gates
Check if the given register is a quantum register or a classical register.
Return a copy of the circles in the order in which they were passed in.
Returns the inverse of this circuit in reverse order.
Append an instruction to the QIS.
Raises an exception if the number of qubits is not the same as the number of qubits
Check that all arguments in the qargs are in the correct range.
Checks that all arguments are valid classical registers.
Check that all elements in self.qregs and rhs.cregs are compatible.
Returns the QASM representation of the instruction.
Return the number of ops that would be required to perform the gate operation of this instruction.
Returns the width of the memory space in bytes of all the memory registers in this region.
Count the number of operations in this instruction.
Returns a copy of this circuit with the given parameters bound to the given dictionary of values.
Binds the given parameter to the given value :param parameter: the name of the parameter :
Map all free gates in the given layout. :param layout: The layout of the
Calculates the distance between the layout and the coupling map gates. :param gates
Compute the score of a single step. :param step: the step to compute :type
Copy circuit metadata from the source DAG to the target DAG.
Return a copy of the given gate with the given layout applied to it.
Return a list of SWAP ops from the given edge. :param edge: edge of
Runs the transpiler on a DAG. :param dag: Dag object :
Add a physical qubit to the connectivity graph :type physical_qubit: int :r
Add an edge to the networkx graph.
Return the subgraph of the graph with the given list of nodes.
A list of all physical qubits connected to the graph nodes. Returns ------- list of physical qubits
Return True if the network has been connected. :rtype: bool :rtype:
Compute and store the distance matrix of the vertices.
Computes the distance between the physical qubits of the coupling between the given physical qubits.
Create a new `CU1` gate with the given arguments. :param theta:
Returns a copy of the instruction as the inverse of the instruction.
Apply an arbitrary number of q-regs to the instructions of this circuit.
Apply a classical condition to this gate. :param classical: Classical expression :
Subscribes the given callback to the specified event :param event: The event to
Dispatch an event to all subscribers. :param event: Event name :type event: str
Unsubscribes the given callback from the given event :param event: The event to
Publish an event to all subscribed subscribers :param event: the event to publish :param args
Initialize the circuit with the given parameters and qubits. :param params: A list of parameters
Define the circuit. The circuit is a disjoint circuit, the circuit is a disjoint
Create an uncompute circuit for the circuit.
Calculates the angle of a pair of complex numbers, using Bloch's algorithm.
Return a circuit for a multiple circuit. :param list_of_angles: list of
Check if value is a virtual register or a tuple of registers and int values.
Return a copy of this layout.
Combines this layout into another layout into a single edge map.
Add a control chain to the pipeline. :param ctl1: the control chain :param
Insert a schedule into the schedule. :param start_time: Start time of the schedule
Raise an exception if the given name is not fenced :param name: name of
Convert a list of gates into a list of indices for the given q-registers.
Run the mapper on the given DAG. :param dag: DAG to process :
Group a number of qubits into multiple pauli combinations. :param number_of_qubits
Create a Qiskit object from a label string. :param label: label string :
Initialize a new QisKer object from boolean components. Args: z (bool):
Return the product of p1 and p2, where p1 and p2 are
Convert the quantum matrix to an operator. :rtype: :class:`Quantum
Convert the circuit to an instruction.
Update the z-axis Parameters ---------- z : np.ndarray or list of np.ndarray
Update the _X attribute with a boolean array or list of indices. :param x:
Append a list of paulis to the simulation. :param paulis:
Remove a set of qubits from the Quaternion Parameters ---------- indices : list or list of
Create a random set of qubits. Args: num_qubits (int): number of qubits
Create a PauliQuaternion with a single Pauli label Parameters ---------- num_qubits :
Get the measure outcome of the qubit. :param qubit: the qubit to measure :type
Add a sample measure to the state vector. Parameters ---------- measure_params : list of
Add a QASM measure to the circuit.
Add a QASM reset to a qubit. :param qubit: The qubit to reset
Validate that the initial state vector length is correct.
Initializes the state vector with the initial state vector Parameters ---------- self._initial_statevector
Return the state vector of the state machine. :rtype: np.ndarray.
Check if measure sampling is enabled. :param experiment: The experiment to validate :type experiment
Run a job from the backend. :param job_id: The id of the job
Validate that the given QEMUQ object is valid. :param qobj: Q
Validate that the initial unitary is of the correct shape.
Initialize the unitary of the circuit.
Get the unitary of the circuit.
Run a single job and return a Result. :param job_id: job id :
Validate that the given QOS is consistent with this QOS. :param qobj:
Return True if the argument is a bit. :param obj: the argument to check :
Run the coupling algorithm on the given DAG. :param dag: the DAG
Returns True if this interval overlaps with the given interval. :param interval: interval to check
Return a new interval shifted by `time` in `self` to `self`.
Shift the channel by the given time. :param time: the time to shift :type
Returns the start time of each channel in the given list of channels. :param channels:
Return the stop time of the specified channels.
Returns True if the given timeslots are mergeable. Args: timeslots:
Merge two timeslots into a new timeslot collection. Args: timeslots:
Returns a new timeslot collection shifted by the given time. :param time: the time
Report a commit as a comment or issue. :param branch: branch name :param commit
Plot state in paulivec mode.
Add a Rzz gate to circuit. :param theta: rotation angle :type theta:
Add a cswap operation to the simulation. :param ctl: :param tgt1
Create a program graph from a DAG. :param dag: DAG object :type
Select the next edge in the pending_program_edges that is not mapped to a program
Select the best item from the list of available hardware qubits that meet the cost of the gate
Select the qubit of the best available hardware qubits. :param prog_qubit:
Return a list of all instructions in this gate.
Return a copy of this gate with its inverse gate applied.
Apply Q-regs to all gates in this gate.
Adds a classical gate to the gate stack. :param classical: Classical gate
Check if the matrix is unitary.
Matrix of the conjugate of the matrix.
Return the transpose of the input data :rtype: `~astropy.operator.
Power operator. Parameters ---------- n : int The power of the operator Returns ------- QIskit
Return a tuple of output and input dimensions, with the same order as the input dimensions.
Convert an instruction to an operator. :param instruction: instruction to process :type instruction:
Update the Dagcircuit with a swap mapper layer update. :param i: the layer
Separate a bitstring into a string of substrings. :param bitstring: the
Format a level 0 memory array into a complex array. :param memory: array of memory
Format a single level 1 memory list into a list of 2-D numpy arrays.
Format a list of level 2 memory objects into a list of strings. :param memory:
Format a dict of counts into a key-value pair.
Format a state vector. Args: vec (numpy.ndarray): the state vector to format
Return a unitary representation of the state vectors in `mat`. Parameters ---------- mat : list
Submit the job to the pool. :returns: None :rtype: None.
Return the status of the job.
Returns True if the LB is within lo_freq. :param lo_freq:
Plot a multivector bloch state.
Decompose the operation nodes of the given DAG into a new DAG.
Returns the k-th element of a list of numbers n - the number to choose k
Given a list of strings, return the index of the first k elements of the list.
Return a list of all registered backends with unique names.
Method to get the operation of the QIskit object. Args: self (:class:`
Creates a ``SamplePulse`` with the specified ``duration`` and ``amp``
Make a pulse with a zero value :param duration: Duration of the pulse :param name
Sample a square pulse. Args: duration: :param amp: :param period: :
Sample `sawtooth` with `duration` and `amp` `period`
Generates a sine-sine pulse for a triangulation. Args: duration:
Sampled cosine pulse. Args: duration: Duration of pulse. amp: amplitude of pulse
Sample a pulse in sine at a given time. Args: duration (float): Time
Create a new pulse for a gaussian distribution. Args: duration (float): Duration of the
Calculate the derivative of a gaussian distribution at the given time.
Convert the tree to a string.
Get an instance of the backend class. :param backend_cls: backend class :type
Remove all named operations from the graph. Args: opname (str): The name of the
Add a QuantumRegister object to the circuit.
Add a classical register to the DAG.
Add a wire to the graph.
Raise an exception if the condition is not in the cregs list :param condition: The
Return a list of all bits that appear in the condition. :param cond: The condition
Adds an operation node to the multi graph. Args: op (:class:`~astropy
Apply an operation to the back of the output graph. :param op: the operation to
Check the validity of a wiremap.
Map the condition from wire_map to the condition. :param wire_map: the
Extend the current graph with the given dag. :param dag: the graph in which the
Check that the input wires are the same length as the input wires list.
Given a node and a set of nodes, return a pred_pred_succ_
Return the full pred_map and full_succ_map for the given input
Return the topological nodes of the multi-graph.
Yield edges from the multi-graph. :param nodes: list of nodes or list of
Returns a list of nodes of ``op`` nodes in the multi-graph.
Return a list of gate nodes.
Return a list of named nodes. :param names: list of named nodes :type names
Return the list of two-quite-quite-quite-gate nodes.
Return the list of predecessors of a given node.
Return the predecessors of the given node in the quantum graph.
Return all the ancestors of the given node. :param node: the node to analyze :
Returns a list of the quantum successors of the given node. Args: node (int
Remove a node from the graph.
Remove all ancestors of the given node :param node: the ID of the node to remove
Remove all descendant nodes of the given node.
Remove all nodes that are not ancestors of the given node. :param node: the node
Remove all nodes that are descendants of the given node :param node: The node to remove
Yields a list of topological operations for each topological operation in the state machine.
Generator of multi-degree multi-graph layers. :rtype: list.
Return a generator of nodes on a wire. :param wire: wire of the wire (
Count the number of operations in the topological order. :returns: op_dict.
Return a dict of the properties of the Tensor.
Create a tomographic basis object. Args: basis (list): basis array for tomographic
Applies a pauli operation to the circuit. :param circuit: the circuit in which
Return a list of data for a tomography circuit Args: results (list): list of
r"""Projector operator for a list of op_list Parameters ---------- op_list :
Compute the tooo-linear inverse of an operation. Parameters ---------- freqs : array_like
Returns the wizard matrix of the given matrix.
Calculate the Wigner data for a set of qubits Args: q_result:
Execute the gate function for the given circuit and operation. :param circuit: the circuit to
Check if a text message is not too long. :param job: the job to check
Monitor the status of a job. :param job: Job to monitor :param interval:
Simplify a u gate.
Run the operation on the given DAG with respect to the QRegs of the layout
Displays the history of jobs for the given backend. :param backend: the backend to display
Append a Cu3 gate to the circuit.
Build a bell-circuit.
Transpiles a circuit using the given circuit_config_tuple :param circuit_config
Return the drive channel. :rtype: `DriveChannel` :rtype: `
Return the control channel for this pulse. :rtype: `ControlChannel` :r
Return the first measure channel in this pulse. :rtype: `MeasureChannel`.
Get a acquire channel for the pulse. :returns: A `AcquireChannel` instance.
Perform the input state of the circuit. :param circ: :param q: :param
Remove the qiskit logger handlers.
Plot a hint on state using iplot. Parameters ---------- rho : list of xarray.
Read data from the input stream. :param data: data to read :type data:
Pops the lexer off the stack and sets self.filename and self.lineno.
Pushes the current lexer onto the lexer stack. :param filename: the filename of the
Get the bound method for an instruction. :param instruction: the instruction :type instruction
Convert an acquire instruction to a Q-OBS command. :param shift: shift
Convert a frame change instruction into a QObject.
Convert a persistent value instruction into a persistent value QObject. :param shift: Amount of
Convert a drive instruction into a QObjectModel. :param shift: :type shift:
Convert a snapshot to a QObject model :param shift: the shift of the snapshot :
Update the annotations of the given discretized_pulse. :param discretized
Convert a DAG to a Circuit.
Convert a matrix observable into a dictionary of states and their values. Parameters ---------- matrix_obser
Add an object to the symtab. Raises an exception if the object is already in
Verify that the symbol is a bit symbol.
Verify that all expressions in the expression list are not already in the current symtab.
Verify that the `obj` is a QASM gate.
Verify that the register object is within the region of the global symbol table. :param obj
Verifies that all children of the given object is registered in the registry. :param obj:
Finds the column position of the given token in the input string. :param input_:
Parse debug mode. :param val: debug mode :type val: bool :param
Parse qasm data. Args: data (str): The qasm data to parse.
Parse data and return the result as a string :param data: The data to parse :
Parse the qasm file and return a list of QAssembly objects.
Create a Crz gate. Parameters ---------- theta : int, the value of the C
Get the state of a basis basis basis. :param str_state: The basis basis
Project a state matrix into a density matrix. Parameters ---------- state : array-like The state
Return the purity matrix for the state matrix.
Build the property_set based on the given DAG. :param dag: the D
Run CX runs on the given DAG. :param dag: The DAG :
Get a QiSkit backend. :param name: Name of the backend :param
Return a tuple of input and output dimensions for the bipartite algorithm.
Get the register specs for each bit label in the bit_labels :param bit_labels
Return a string representation of a floating point number Args: matchobj: a regex match object
Generate a LaTeX representation of the image in LaTeX format Parameters ---------- aliases :
Return the number of columns and the number of columns in the image.
Calculate the beamer page size based on the sum_row_heights and sum_
Load schema from file. :param file_path: path to file :type file_
Load all schemas and validators from the default schema paths :returns: None :rtype:
Return a random unitary matrix of size dim.
Generate a matrix from a set of rows and columns. Parameters ---------- nrow : int,
Random population of Hermite distribution. Parameters ---------- n : array_like rank : int
Random density bures. Parameters ---------- n : int rank : int The rank of the
Return a list of call names.
Calculate the power of the data matrix. Args: n (int or np.integer):
Composes a sub-system of this operator with another operator :param qargs:
Converts an instruction to a superoperator. :param instruction: instruction to convert :type instruction
Run the optimizer on the given DAG. :param dag: the DAG instance :
Run the decomposition on the given DAG. :param dag: A DAG object
Define a single gate in the unitary space.
Check that the value is a collection of items. :param value: The value to check
Check that value is a list of values for the given attribute Parameters ---------- value : list
Set the atol of the QIS model. :param atol: The atol of the Q
Set the Rtol attribute of the QIskit object. :param rtol: float
Reshape the input and output dimensions to match the input and output dimensions. :param input
Return a tuple of input dimensions. :param qargs: list of input dimensions :type
Returns a tuple of the output dimensions. :param qargs: :type qargs:
Returns a copy of the image.
Calculates the power of this QIS object :param n: number of elements of the
Return a tuple of dimensions to use in the QISkit algorithm. Args: dims:
Try to deserialize the given value. :param value: The value to deserialize :type value
Try to serialize the given value to JSON. :param value: The value to serialize :
Check if the value is of the correct type. :param value: the value to check
Computes the SVD of the matrix A using the SVD function. func - function to
Returns the inverse of the state Parameters ---------- self : state_machine Returns ------- state_machine
Set the label of this object.
Return True if ``self`` is unitary, otherwise False. :param str atol:
Converts the matrix to an operator :rtype: :class:`~astropy.operator
Converts the circuit to an instruction.
Returns a Transformer that can be used to transform the data into a Channel or Quantum
Patch the strptime library to use strptime_time instead of strptime_time.
Check if a list of tokens is valid. :param tokens: list of tokens.
Split a string into a list of tokens. :param string: The string to split :
Parse a time string. :param date_string: The date string to parse :type
Returns True if the given date string is a valid date string. :param date_string
Translate a date string. :param date_string: The string to translate :param keep
Try to parse date_string with a list of date_formats. :param date_
Convert an exception string to a net address. :param param1: :param success:
Try to convert an exception to a HTTP code. :param param param1: the exception
Compose the configuration file for PhantomJS and PhantomJS streams. :rtype:
Return a dictionary with information about the current state of the simulation.
Log the stdout and stderr of the process :param log: the log :param comment:
Expands the time string into a number of seconds. :param str_time: The
Read the configuration from the command line.
Read the cached options from the cached file :returns: the cached options :rtype:
Write cached options to json file :param si: the si object :type si: si
Create a new STPD file with the current settings.
Create and return a new instance of LpStep. :param rps_schedule:
Calculate the number of rps at time `t` :param t: time to calculate
Executes a command. :param cmd: Command to be executed :type cmd: str :
Given a list of data, return a list of points, one for each host and the
Return a list of points for a given label Args: data (:class:`dict`):
Publish a key with a value to the broker. :param key: the key of the
Count codes matched by codes_regex in codes_dict :param codes_regex: regex
Stops the worker thread and waits for all tasks to be processed. :rtype: None
Feed the stpd plan into the task queue.
Add the user options to the core. :returns: None :rtype: None :
Configure the plugin with the given options. :param options: The options to configure :type
Collect data and stats from the queue and store them in self.data_cache.
Notifies the listeners of aggregated data :param data: the aggregated data :param stats:
Discover the UDP port of the J-meter process. :returns: the UDP port
Gracefully terminate the process.
Read the stats data from the stats file Args: lines (list): A list of lines
Create a criterion from a criterion string :param criterion_str: criterion string :type criterion
Get the host config from a file :param filename: File to parse :type filename:
Create a startup config file for the host.
Check if disk space is not exceeded. :rtype: None :rtype: None
Check memory usage. :raises RuntimeError if memory limit is exceeded :raises RuntimeError
Get the right line of the right panel.
Add a info widget to the list of info widgets. :param widget: the info widget
Fill rectangle with spaces, and return a tuple of the width of the rectangle.
Return the number of characters in the line that are not in the markup variables.
Add an info widget to the screen.
Makes a HTTP request to the writer endpoint. :param params: :param json: :
Load plugins from config.
Returns the plugin of the given class. :param plugin_class: the class of the
Get a list of plugins of type `plugin_class` Args: plugin_class (
Copy a file to the artifacts directory. :param filename: The file to copy :param
Add a new artifact file to the list of artifact files to add. :param filename:
Create a temporary file name with the given suffix and prefix.
Load configuration files. Args: configs (list): List of configs to load :rtype
Write the current configuration to a file. :param filename: Name of the file to write
Get a list of option names and their values from the config file. :param prefix:
Find all sections whose prefix matches the given prefix. :param prefix: the prefix of the
Decode the stats data from a chunk of benchmarks. Args: chunk (dict): The
Installs agents and artifact files. :rtype: None :rtype: None :
Polls the list of agents and returns the number of collected data. :rtype:
Send the collected data to all the registered listeners.
Detects if configuration is a telegraf or monitoring configuration. :rtype: str.
Handle data items. :param host: host name :param metric: metric name :type
Subscribe to one or more channels :param channels: list of channels to subscribe :type channels
Subscribes to channels and closes the websocket connection. :param initial_channels: list
Close the websocket connection and close all open connections :returns: None :rtype: None
Perform a single request to the API. :param method: :param url: :param
Submit a new order for a particular symbol. :param symbol: the symbol of the order
Get a position for a given symbol. :param symbol: symbol of the symbol :type
Return a list of assets for the current user. :param status: The status of the
Check that the ``obj`` is of ``key_type`` or ``value_type
Check that a dict parameter is of a given type. :param obj: :param obj
Construct a logger that logs the event to the event_record_callback :param event_
Construct a logger that logs events from a json file :param json_path: path to
Load a config file from a given path.
Returns the pipeline with the given name. :param name: pipeline name :type name:
Get a list of all pipelines in the pipeline registry. :rtype: list.
Get the next event from the queue. :param process: Process instance :param queue:
Executes a single pipeline through a queue.
Wait until all processes have finished processing.
Returns a field definition for the given dagster type :param dagster_type: the
Build the execution plan for the pipeline. :param pipeline_def: Pipeline definition :param
Returns the solid with the given name. :param name: The name of the solid :
Construct publish commands. :param additional_steps: list of additional steps to publish :type
Create a new version of the given version. :param version: Version number :type version
Wrap the given text into a block of lines with the given prefix. :param text:
Download a file from S3 to the target path.
Upload a file to S3 :param file_obj: file-like object to upload
A context-manager that raises an exception when a user-code exception occurs during execution.
Creates a new directory, if it does not exist.
A context manager that runs a user code function and returns a generator that yields the result.
Create a context free log for the given run. :param run_config: :param
Returns True if any of the step expectations have a step_success event, otherwise False.
Return True if any of the step expectations are skipped :returns: True if any of the
Return a dictionary of transformed values for this step.
The failure data of each step in the pipeline. :rtype: list[str]
Checks if the given value is a valid dataset :param config_value: :return:.
Check if the given config value is a valid table. :param config_value: the
Coalesces the execution_plan into a single execution_plan with the same solid
Return a dictionary of connection parameters based on the settings_dict :rtype: dict.
Create a new connection to the database :param connection_params: Connection parameters :type connection
Create a new cursor for the database. :param name: The name of the cursor :
Closes the database connection.
Make a model instance from a model_dict :param model: Model class :param model
Convert a list of dictionaries into a list of MDL objects.
Return a form field that can be used to fill the form with a list of values.
Convert the given value to an instance of the model_container. :param value: the
Apply filters to the queryset. :param queryset: The queryset to apply :param queryset:
Compute NFPS for a uniform distribution Parameters ---------- cum_counts : list of counts,
Compute real NFPS from counts and sizes. Args: counts (int): counts of
Return a list of optimal partitions for a given number of part sizes. :param sizes:
Calculate the Cartesian of a1, a2, and a r1, r2
Set the seed and hash values of the slot.
Calculate the size of the hash value. :param byteorder: The byte order of the
Merge this seed with another seed into this one. :param other: The seed to merge
Return the union of ``mhs`` Args: mhs (:class:`MH`
Query the key store for the given minhash. :param minhash: hash of the
Calculate the weighted minimum hash of a sequence of numbers. Parameters ---------- v : array_like
Remove a key from the hashtable.
Count the number of non-zero bits in the register. :rtype: float.
Merges the registers of other into this one. Parameters ---------- other : array-like, array
Clears the memory of the registemics.
Compute APK score. :param actual: actual list :param predicted: predicted list
Compute the mean apk for the actual and predicted labels. :param actual: array of
Sort hashtables by hash.
Returns a list of keys that match the given hash. Args: minhash (string):
Close all currently open connections to the server.
Return the user data from the JWT. :param obj: :type obj: dict :
Set the social_login state to connect to the social login. :param args: :
Select a text from a list of text objects. :param text: List of text objects
Parses a scoped selector into a tuple of scope and selector Args: scoped_selector (str
Parse a statement in the form of a module, a binding key, or a binding
Parse the current value. :returns: parsed value. :rtype: str.
Advances the parser to the next token in the current line.
Parse a configurable reference.
Write out the config file and save it to the output directory. :param session: tf
Ensure that a function is wrapped in a function that has wrappability.
Try to parse the given value and return it as a string, otherwise return None.
Clears the current configuration. :param clear_constants: Clear all constants :type clear_
Returns True if the given function or class may have a parameter with the given name.
Return the cached argument spec for the given function.
Returns a list of positional parameter names that are supplied to the function. :param fn:
Parse a config file. Args: config_file (str): Path to the config file
Parse the given value. :param value: The value to parse :type value: str
Yields the values of a nested nested value. :param value: the nested value to
Iterate through all configurables that have a reference to the to function. :param config
Create a list of constants from an enum. :param cls: The enum class :param
Return a list of all matches for the partial_selector. :param partial_selector:
Return the minimal selector of the given complete selector. :param complete_selector: the
Convert a query dict to a search query string :param query: query dict :type query
Parse the HTTP Retry-After header of the response. :param response: :return:.
Validate that the value is a valid value for this property. :param value: the value
Return the property description as a dict.
Set the value of the field. :param value: the value to set :type value
Get a thing by its index.
Initialize with things and hosts. :param things: :param things: :param hosts:
Set the default headers for the request.
Check if the host is in the list of known hosts. :rtype: None.
Get a thing :param thing_id: The thing id :type thing_id:
Processes a POST request. :param thing_id: The id of the thing to process
Deletes a action from a thing :param thing_id: Id of the thing to delete
Starts the service. :returns: None :rtype: None :raises: None
Return the action description for this action. :returns: the action description :rtype:
Starts the thing. This method is called when the thing's start operation has finished.
Mark the thing as finished and set the status to "COMPLETE" and time_completed.
Return a dictionary representation of the event. :rtype: dict :rtype: dict
Get the IP address of the host. :returns: str :rtype: str.
Get a list of all IP addresses that are available on the system. :rtype:
Set the value of this property.
Notifies the external_update signal of the change of the value. :param value:
Return the description of the thing.
Set the href prefix for this resource. :param prefix: the prefix of the resource :
Returns a dictionary mapping property names to descriptions of the property values.
Return a list of ActionDescription objects for the given action_name :param action_name
Get a list of EventDescription objects for the given event name. :param event_name
Adds a property to this resource. :param property_: Property to add :type property
Removes a property from this object.
Returns the value of the named property, or None if the property does not exist.
Returns a dictionary of property names and their values. :rtype: dict :rtype
Set the value of a property. :param property_name: The name of the property
Return the action with the given name and id.
Add an event to the list of events.
Add an available event with the given name and metadata. :param name: the event name
Performs an action on this resource. :param action_name: The name of the action
Remove an action by name and id :param action_name: Name of the action
Add an available action. :param name: Name of the available action :type name:
Remove a subscriber. :param ws: the subscriber to remove :type ws: subscriber.
Add a subscriber for an event with the given name :param name: the name of the
Remove a subscriber from the list of subscribers for an event :param name: the name of
Notify all subscribers of a property change :param property_: Property to notify :type property
Send an action message to all subscribers. :param action: Action object :type action:
Send an event to all subscribers. :param event: event to send :type event:
Annotate the model with the given annotations :param dict annotations: The annotations to annotate :type
Update records in the table. :param fields: fields to update :type fields: list
Create a new record in the database.
Create a new record with the given fields and return the new model. :param fields:
Build the insert compiler. :param rows: :return: insert compiler :rtype:
Check if the field is a magical field. :param model_instance: the model
Called when a new model is created or a new instance is created or updated.
Called when a model instance is deleted.
Resolve expression and return a new HStoreValue. :param args: :param kwargs:
Return the key-value pair as a SQL string.
Return a copy of the target with the given relabels. :param relabels
Add a list of conditions to the query. :param conditions: The list of conditions to
Checks if the given field is an HStoreField.
Create a required HSTORE constraint. :param table_name: table name :param
Renames a required field in a hash store. :param old_table_name:
Drop a constraint from the hstore store. :param table_name: The name of
Return the name of a required constraint for a given field :param table: The table name
Return the SQL statement for creating a new index. :param model: The model to create
Retrieve the backend base class from settings.
Prepare the database for use.
Prepare the value to be stored in the database. :param value: the value to be
Create the returning part of the query. :rtype: str :rtype: str
Return a list of SQL statements that can be used to insert a new row into the table
Rewrite insert statement. :param sql: :param params: :param return_id:
Rewrite insert and update statements.
Rewrite the insert_nothing statement. :param sql: SQL statement :type sql: str
Return the model field for the given field name. :param name: field name :type
Format field name. :param str field_name: field name :rtype: str
Return the value of the field specified by the field name. :param field_name:
Create a unique constraint in the hstore. :param model: The model to create the
Renames a unique constraint in the hstore. :param old_table_name:
Drop a unique constraint on the hstore. :param keys: the unique keys :type
Return the name of a unique constraint for the given field. :param table: The table
Yield all the keys that are unique for the given field.
Add a condition to the query. :param field: The field name :param value:
Return the prepared SQL with the extra conditions added to it. :param compiler: The SQL
Return the t-dist-95 configuration level for a specific dataframe Parameters ---------- df : int
Calculates the variance of a sample between two sets of samples. Parameters ---------- sample1 : list
Compute the t-score of the two given samples.
Check if the sample1 and sample2 have a significant critical value :param sample1:
Given a list of nodes, return a list of nodes sorted according to their position in the
Generator over queens of a given count. :param queen_count: number of
Select a random position from the list of unexplored positions. :param board:
Randomly plays a playout on the board.
Filter benchmarks based on benchmark_funcs and base_version. :param benchmarks:
Expand benchmark name. :param bm_name: benchmark name :param bench_groups:
Initialize the benchmarks. Parameters ---------- n_values : int, optional number of benchmarks
Returns the domain of the line as a tuple of degree, and length of the line.
Fetch the posts for a given category and date. :param category: The category of the
Parse posts from raw_posts JSON :param raw_posts: raw_posts as
Get information about a user. :param user: user name :type user: str :
Fetch all items for a given category. :param category: Category of items :type category
Fetch a list of items from the API :type category: str :param category:
Setup the command parser for the backend.
Fetch data for a specific category. :param category: :param from_date: :
Get bugs for a given date. :param from_date: date of the date to
Get comments for a list of bug IDs. :param bug_ids: list of bug
Returns a list of bug history for the given bug_ids. :param bug_ids
Get a list of bug attachments for a given bug. :param bug_ids: bug
Fetch merge requests for a given date. Args: from_date (datetime.datetime):
Get a list of merges for a given date. :param from_date: date to
Get merge metadata for a given merge id. :param merge_id: ID of the
Fetch merge versions for a specific merge. :param merge_id: ID of the merge
Merge a version of a given merge. :param merge_id: ID of the merge
Return a list of notes for a given item. :param item_type: item
Fetch a list of emojis of the given item type. :param item_type
Fetch emojis for a note.
Calculate the time to reset the rate limit. :returns: Time to reset :rtype
Fetch all of the items for a given path. :param path: The path of the
Initialize the rate limit of the repository. :returns: None :rtype: None.
Setup command-line parser.
Fetch all messages for a given category. :param category: category of messages :type category
Return a unique identifier for a metadata item.
Get the number of members in a conversation. :param conversation: The conversation :type conversation
Returns information about a channel. :param channel: channel id :type channel: str :
Get information about a user. :param str user_id: ID of the user to
Sets up the command parser for the command line interface.
Return the time at which the metadata was modified. :param item: The item to be
Parse a buglist from a raw csv string.
Parse bugs details from a raw XML string.
Logout from CGI server. :returns: None :rtype: None :rtype
Retrieve the metadata for this issue. :rtype: dict. :rtype: dict
Get a list of bugs from the CGI server. :param from_date: The
Get a list of bugs for a set of bug IDs.
Returns the activity information for a bug in a bug.
Fetch events for a given date range. :param category: The category of events :param
Fetch all the events for the group. :param category: The category :param kwargs:
Returns a generator of events for the given group. :param group: The group of events
Get comments for an event. :param group: Event group :param event_id:
Returns a generator that yields the vrsvps of the given event. :param group
Fetch the question from the API. :param question: The question to fetch :type question
Fetches comments for a question. :param question: The question to fetch comments :type question
Build the question object from the html_question. :param html_question: the html
Get a list of questions from the API at the given path. :param path: The
Get html question. :param question_id: the id of the question :param page
Get comments for post_id.
Parse question container. :param html_question: html_question to parse :returns:
Parse the number of html pages.
Parse user_info element and return a dict with user_info, user_info,
Fetch all items for a given category from the Gerrit API. :param category: The
Parse reviews from raw data :param raw_data: raw data :rtype:
Fetches reviews from the Gerrit service. :param from_date: datetime of the
Return the current version of Gerrit.
Execute a review command. :param last_item: the last item to reviews
Retrieve the next item in the group. :param last_item: The last item of
Execute the given command in the archive. :param cmd: the command to execute :type
Executes a command from a remote shell.
Create and return a command-line argument parser for the backend command-line interface.
Fetch issue data from API. :param issue_id: ID of issue :type issue
Fetches the attachments of an issue from the API. :param issue_id: The issue
Fetch all issue messages for the given issue ID Args: issue_id (str): The
Fetch all activities for an issue :param issue_id: The issue ID :type issue
Fetch user data from the API. :param tag_type: :param user_link
Get a user by name :param user_name: User name :type user_name
Gets the raw text for an issue. :param issue_id: ID of the issue
Get a single issue collection. :param issue_id: :param collection_name:
Fetch data from the API. :param str path: The url of the resource :type
Get a list of subscriptions for the current user. :param per_page: number of
Find the group ID for the current group. :param group_name: The group name
Fetch data from the given url :param url: URL to fetch :param payload:
Setup the command parser for the backend. :param cls: the backend :type cls:
Find all the backends for the given top-level package. :param top_package:
Fetch items from the archive.
Filter the item based on its classified fields. :param item: The item to filter :
Parse the command line arguments and return a parsed args object.
Add the auth arguments to the command line group.
Set the arguments for the `archive` command. :returns: None :rtype:
Add the output arguments to the command line.
Run the plugin. :param str category: Category of the plugin to fetch :type category
Initialize the archive manager. :param str archive_path: path to the archive to be
Return the datetime of the last metadata was updated. :param item: the metadata item to
Parse a mbox file and return messages as a list. :param filepath: path to
Fetch and parse messages from mailing list. :param mailing_list: Mailing
Copy a mbox to a temporary file.
Validate the message. :param message: The message to validate :type message: dict :
Convert a casedict message to a dict.
Get a message from the mailbox. Args: key (str): The key of the message
Fetch a list of items from the Git repository.
Parse a git log from a file. :param filepath: the path to a git log
Add git_log and git_path to parsed_args.git_path.
Set up the command line parser for the backend.
Parse the input stream and return a list of commit IDs for each line in the stream.
Clone `uri` to `dirpath` Args: uri (str): The URI
Counts the number of objects in this repository.
Returns True if the repository is detached, False otherwise. :rtype: bool.
Update the working directory with the latest changes made to this repository.
Synchronize the repo with the repository. :returns: A list of commit IDs.
Read commits from pack file and return them as a list of strings. :param packet_
Update references with new refs. :param refs: list of refs :rtype: list
Return a list of gitrefs for this repository. :param remote: Return a list of
Update a ref. :param ref: the ref to update :type ref: :class
Execute a command in a separate thread. :param cmd: Command to execute :type cmd
Reads the stderr of the process and sets the failed_message to the failed_message if
Execute a command and return output. :param cmd: Command to execute :param cwd:
fetches tweets for a given category :param category: the category of the tweets
Setup the command line parser for the backend.
Fetch all hits for a given category. :param category: category of hits :type category
Fetch a list of hits. :param category: :param kwargs: :rtype:
Parse the hits from the hit_raw response. :param str hit_raw: The
Get a list of google hits for a given search query. :param keywords: list of
Return the timestamp of the last metadata was updated on. Args: item (dict): The
Return the category of a metadata item. :param item: the item to search :type
Fetch pull requests for a given date range Args: from_date (datetime): The date
Fetch repo details. :returns: a list of repo information :rtype: :class
Get all the reactions for an issue comment.
Get the requested reviewers for a pull request. :param pr_number: the pull
Return a list of commit hashes for a pull request. :param pr_number: pull
Retrieve the reactions for a pull review comment :param str comment_id: ID of the
Get user data. :param login: username of the user :type login: str :
Method for issue_reactions. :param issue_number: issue number :type issue
Get a listing of issues for a specific date. :param from_date: The date
Returns a generator of pull requests for this repository. :param from_date: date of
Get requested reviewers for a pull request. :param pr_number: Pull request number
Pulls all commits from a given pull request number. :param pr_number: pull
Pulls review comment reactions for a given comment. :param comment_id: The ID
Fetch a user by login. :param login: login of user :type login: str
Retrieves the list of orgs for a user. :param login: The login of the user
Fetch the rate limit for the given token. :param token: The token :type token
Return a list of token-rate-limit pairs for each token in `self.tokens
Selects the best API token for the current session.
Check to see if we need to check the token usage.
Fetch the archive and update the current rate limit. :rtype: :class:`~
Initializes the metadata for the archive.
Store the given data in the archive. :param uri: The URI to store :param
Retrieve an entry from the archive. :param uri: The URI of the entry :param
Create a new archive. Args: archive_path (str): The path to the
Verify that the archive exists and has the required number of entries and metadata rows.
Load the metadata from the metadata table.
Return the number of rows in the given table.
Create an archive with a unique identifier. Return archive object :rtype: archive.Archive
Remove the archive at `archive_path`. :param archive_path: path to the
Search for archives matching origin, backend_name, category, and archived_after.
Search for all files in the directory and return a generator of location strings. :rtype
Generate a range of months. Parameters ---------- from_date : datetime.datetime Start date to
Remove invalid xml characters from raw_xml.
Parse issues json. :param raw_json: raw JSON string :return:.
Get a list of issues for this account.
Get details about an issue :param issue_id: ID of the issue :type issue
Get a user by id Args: user_id (str): ID of the user
Make a call to the API. :param resource: resource name :param params: dict
Fetch all docker hubs for a category. :param category: category of the dockerhub
Fetch items from the repository. :param category: The category of the items :param kwargs
Return the content of a repository. :param owner: the owner of the repository :type
Returns a dictionary of custom fields that can be used in a query.
Parses a raw issues page into issues :type raw_page: str :rtype:
Get a list of issues from the given URL. :param from_date: The date
Retrieve issues for a given date. :param datetime from_date: The date of the
Get comments for an issue.
Get the fields of the resource. :rtype: str. :rtype: str
Fetch a list of items for a specific category. :param category: Category to fetch :
Get the list of builds for a job. :param job_name: The name of
Parse a raw question page into a list of questions :param raw_page: The
Get a list of questions for a given date. :param from_date: The date
Sets up the command-line parser for command-line arguments.
Fetch items from the mediawiki API. :param category: :param from_date:
Given a list of reviews, return the timestamp of the most recent review.
Fetch pages from ARV 1.1.1.1.2.2.1
Retrieve all pages in a namespace. :param namespace: Namespace of the pages :param ap
Get the most recent pages for a list of namespaces :param namespaces: list of namespaces to
Parse messages from raw_json :type raw_json: str :param raw_
Filter message by chats :param message: message to filter :param chats:
Returns a list of updates for the current account. :param int offset: the number of
Fetch items from the API. :param category: The category of the item :type category
Add metadata to the given item :param item: The item :type item: dict :
Parses a raw article string into a dict. :param raw_article: the raw article
Fetch data from remote or archive. :param method: method name :param args:
Fetch a single article from the handler. :param article_id: ID of the article
Fetch data from remote service.
Fetch data from the archive. :param method: :param args: :type args:
Creates an HTTP session with the given headers.
Set up the rate limit handler.
Sleep if rate limit is less than min_rate_to_sleep.
Update self.rate_limit and self.rate_limit_reset_ts based on
Parse a supybot log file. Args: filepath (str): path to supy
Retrieve a list of archives from the supybot archive directory for a given date.
List all of the supybot archives.
Parse the supybot stream and return a list of supybot items.
Fetch all items for a given category from a given date. :param category: The category
Parse the topics page :param raw_json: The topics page :type raw_json
Get details about a topic. :type topic_id: str :param topic_id
Post an existing post. :param post_id: The ID of the post to post
Fetch a list of tasks from a given date. :param category: :param kwargs:
Given a raw json string, parse it and return a list of tasks :rtype:
Yield users from raw_json. :param raw_json: raw json :type raw
Get a list of tasks for a project. :param from_date: datetime to start
Retrieve transactions from a list of PIDs. :param phids: list of PIDs
This interface is used to get a list of users for a given phab.
Get a list of phab_id's associated with a list of phab_id
Make a call to the conduit API. :param method: The method to call
Return a unique identifier for a metadata item. :param item: the metadata item :type
Parse the contents summary from a raw JSON string :param raw_json: the raw
Returns a list of contents of the directory.
Returns the historical content for the given content_id. :param content_id: the
Parses the result element of the result element and sets the result attribute to the correct value
Build a URL for the capabilities endpoint. :param service_url: The URL of the
Read the XML document at the given URL. :param url: the URL to read :
Read an XML string from a string. :param st: the string to read :type
Parse the result tag of the result tag and store the result in self.result.
Build the URL with the given path. :param path: The path to the url :
Construct a schema from a list of elements. :param elements: list of elements :type
Return the describe feature type URL.
Process a complex data input with a reference. :returns: None :rtype: None
The `movie_list`` API endpoint: https://www.youtube.com/
Get a list of TV objects. :type kwargs: dict :rtype: list
Returns information about the resource. :rtype: dict. :rtype: dict.
Gets the alternative titles for the current user. :param kwargs: kwargs: :return:.
Gets the credits for this account. :param kwargs: additional keyword arguments :type kwargs
The list of external ids. :param kwargs: :returns: the list of external ids
Retrieves a list of keywords. :returns: a list of keywords :rtype: list
The recommendations resource provides a list of recommendations for the account. :param kwargs:
A list of release dates for the current user. :param kwargs: :return:.
Get a list of releases. :param dict kwargs: :rtype: list of releases
Retrieves translations for this entity. :param kwargs: keyword arguments :rtype: dict.
Gets similar movies. :param kwargs: keyword arguments :type kwargs: dict :r
Returns a list of reviews for the current user. :rtype: list of re
The upcoming endpoint. :type kwargs: dict :rtype: dict.
Get the currently playing playlist. :param kwargs: keyword arguments for the playlist :type kwargs
Gets the popular details. :param kwargs: the popular details :type kwargs:
A top-rated resource. :param kwargs: :return:.
Method is used to retrieve a list of states for a given account. :param kwargs:
Create a new rating for the user. :param kwargs: :type kwargs: dict
The list of credits for a given movie. :param kwargs: :rtype:
The ``tv_credits`` API endpoint provides information about the tv_credits resource
Returns information about the resource. :rtype: dict :rtype: dict :r
The "list" API endpoint. :type kwargs: dict :rtype: list.
Gets information about the session. :param kwargs: dict of parameters :type kwargs: dict
The ``watchlist_movies`` API method is used to retrieve a list of
Creates a new token resource. :param kwargs: keyword arguments :type kwargs: dict Return
Validate the token using the token_valid_with_login method. :param kwargs:
Create a new Session or update an existing one. :param kwargs: :return:.
The guest session new resource:type kwargs: dict :rtype: dict :rtype
The `movies` endpoint provides a paginated view of the movies that are rated
The item_status endpoint provides information about the current status of the item :param kwargs:
Create a list for this user. :param kwargs: :returns: :rtype:
Removes an item from this collection.
Clear the list of sessions. :param kwargs: :returns: list of session ids.
Get the content ratings for this resource. :param kwargs: dict of keyword arguments :
A similar resource. :param kwargs: :param kwargs: :rtype: :class
The Air service. :param kwargs: :rtype: dict :rtype:
Return information about the Season Number of a series. :param kwargs: :return:.
Retrieves the credits for a season. :param kwargs: the kwargs of the credits
Returns a list of external ids for the given series. :param kwargs: :return:.
Gets information about the season number of the season. :param kwargs: keyword arguments for the
Return the credits for the season.
Get a list of external ids. :param kwargs: additional kwargs :rtype: list
Set the attributes of the object to the values of the response. :param response: The
Get a collection resource. :param kwargs: :return: Collection resource :rtype:
The company for this account. :param kwargs: The keyword arguments for the company :type
Get a single keyword. :param kwargs: keyword arguments :type kwargs: dict :r
Execute a GET request with multiple options. :param kwargs: :return:.
Normalize ``s`` to a list of ``toks`` in ``s``.
Given a list of reference names, return the number of reference names and the number of
Count the number of n-grams in a reference string. Args: ref (str):
Calculate the ERFCC of a number.
Align source_blocks to target_blocks. Parameters ---------- source_blocks : list of
Yields descriptors of all classes in the given module. :param mdl: the module
Registers a list of descriptor objects from a JSON representation. :param obj: A list of
Register the given descriptor with the given version. :param desc: descriptor of the descriptor :
Prints the given string to the given file, with the given end character.
Returns True if the descriptor is a class of the same type. :param desc: the
Return a JSON representation of the current state of the state :rtype: dict.
Return the current coordinate of the particle in meters.
Return the atomic radius of the sphere at point i.
Returns the surface area of each rads in the plot.
Create a new VDW object from a Molecule object.
Create a descriptor from a JSON object :param obj: the object :type obj:
Fill missing values with ``value`` if they are missing.
Return a copy of this molecule with missing values removed.
Returns an iterator over the key and value pairs of the key-value pairs.
Return a dict representation of this object.
Return the name of the descriptor.
Print a progress message with the given arguments. Args: msg (str): The message to
Prints a message to stdout with the given arguments.
Print an error message and exit with the given status code. :param message: the error
Create a temporary file and return the path to the file. :param str target: The
Set tempfile to target file or remove tempfile if it exists.
Clean up any temporary files that have already been created.
Returns the fixed path of the file.
Return a list of valid parameters for the given API method. :param method: API method
Merge the parameters of the opt object. :param method: The method to use :param
Add options to the command line parser :param parser: Command line parser :type parser:
Terminate the task queue and wait for it to become empty :param exc_info: exception
Add a task to the scheduler. :param str func_name: name of the task
Wait for all workers to complete.
Increment `self.processed_tasks` by the number of tasks in the queue.
Get the s3 keys from the environment variables :returns: a tuple of s3 keys
Return the s3 keys from the given command line. :param opt: the command line
Return S3 keys from s3cfg.ini or s3cfg.ini.
Initialize s3 keys from command line or from environment variables or from S3 config file.
Establish a connection to the S3 server.
Returns a list of all files under the given basedir. :param basedir: the basedir to
Expand a source list into a list of strings. Args: source (list): list of
Put a single file to an S3 bucket.
Put source files into target directory. :param source: source of files :param target:
Create an S3 bucket if it doesn't already exist. :param source: S3
Update the permissions of the target object.
Print the contents of one or more S3 sources. :param source: S3 sources
Download a single file from an s3 source to the target path.
Get all files from source to target.
Copy a single file from a source path to a target path.
Copy files from one or more sources to another. :param source: sources to copy :
Delete files from S3 source.
Walk a directory and return a list of paths relative to the directory. :param dir:
Copy files from one directory to another. :param source: source directory to copy :param
Calculate the MD5 hash of a file. :param filename: filename of the file to
Return the md5 hash of the file. Returns: MD5 hash of the file.
Create a directory if it doesn't exist. :param target: path to the target directory
Check if the remote key is in sync with local md5 :param md5cache:
Return True if path and filter_path match.
Recursively walk an S3 URL. :param s3url: :param filter_path
Add a conditional object to the result list :param result: A list of objects :type
Get the permissions of a source file. :param source: the source file :type source
Look up an object in S3. :param s3url: S3 url :
Read a chunk of data from a file. Args: source (str): file to read
Verify that the downloaded file size is the same as the downloaded file size.
Write a chunk of data to a file. :param target: file path :param pos
Run a command. Args: args (list): A list of command arguments to run.
Validate arguments. :param format: Format to validate :param args: Arguments to validate :
List S3 buckets. Args: args: list of S3 Buckets to list.
Create a new bucket in the S3 database. :param args: list of command line
Put handler to upload files to S3.
Get a file handler for the given source and target. :param args: list of strings
Handle cat command.
S3 dsync handler. :param args: list of arguments :type args: list
Handle cp command. Args: source (str): Source path to cp target (str):
Copy a file from one set of sources to another. :param args: :return:.
Delete a file handler from an s3 source.
Handler for S3 DU commands. :param args: list of arguments :type args
Total size of files in S3. Args: args (list): List of S3
Match date. :param value: The value to match :type value: str :return
Match a time. :param value: The time to match against :type value: str
Match delta and return delta and value. :param value: value to match :type value
Check that the value is a dictionary.
Get data from hub :param sid: sid of the hub :type sid: str :
Push data to all registered callbacks :param data: data to push :type data: dict
Returns a string representation of the token.
Handle exceptions raised in the job.
Create a stream handler for the log file, if it does not already exist.
Get the first request found in one of the available requests :rtype: request.Request
Report a message to the log. :param message: the message to report :type message
Create and return a logger for the agent log file. :param str log_file:
Build person data from rollbar_person and rollbar_person_prop.
Add the lambda context data to the given data dictionary.
Add the request data to the data dict.
Check if a new frame is added to the next frame.
Build the request data from the request object :param request: The request object to build :
Build the server data to send to the server. :rtype: dict :rtype
Build a payload for sending to the API.
The main entry point for the rollbar server.
Compose a chosung, joongsung, and jongsung.
Decomposes a hangul letter into a pair of letters. :param string hangul_
Return True if the letter is a jong. :param letter: the letter to check
Attaches a josa to a word.
Check if the given node is inside an exception handler. :param node: the exception handler
Return True if node is inside lambda.
Returns an iterable of all elements of the given node. :param node: :class:`
Check whether an assignment should be clobbered in an exception block. Args: node (ast
Check if the node is a super node of the built-ins module.
Check if `node` is an `astroid.Raise` or `astroid.
Return ``True`` if ``node`` is a function decorator.
Return True if the given node is an ancestor of any of its base classes.
Return the parent node of the given node or None if node is not an astroid.
Parse a format string into a list of string fields. :param format_string:
Returns the argument of the function at the given position of the call node :param call_
Return True if the given node inherits from the standard exception module. :param node: the
Check if the function is decorated with a property.
Check if ``func`` is decorated with ``qnames``.
Find the first try-except wrapper node in a try-except wrapper node. :param
Return True if `node` is a try-except block that doesn't have a fallback
Return a list of exception handlers for a given exception.
Return True if the given node should ignore the given exception. :param node: node to
Return True if the given class node is an abstract class.
Infer the value of the node, returning None if the inference is not possible.
Return the type of a node. :param node: The node to infer :type node
Check if postponed evaluation is enabled.
Given a module name, return a list of fully qualified names.
Given an astroid.ImportFrom node, return the absolute name of the imported module.
Return a string representation of a python tree. Args: data (dict): The data to
Make a dependency graph for a given file :param filename: name of the file :param
Check if the import exists in the same module as the current one. :param node:
Check that the imported module is in the correct order. :param node: ImportFrom node
Check if the node is the first non-import node. :param node: the node
Record the import of the given module node and the imported module name. :param node:
Check that the imported module is not relative to the imported module. :param modnode:
Add imported module to the import graph :param node: astroid node :type node:
Check if a module is a deprecated module :param node: The node to check :type
Check if a module is preferred in the preferred_modules list. :param node: The
Report the external dependencies.
Return a graph of all packages that are dependencies of this package. :param internal:
Get the default options from the rc.rc file. :returns: a list of options
Insert all default options into sys.argv.
Return True if the given node's visibility is set to 'hidden' :param node:
Return the callbacks for the given node. :param node: the node to get callbacks for
Visit the given node and call all of its methods. :param node: The node to
Check that all messages have the same ID. :rtype: None. :rtype
Check if a function call can be inferred. :param node: Function call node :type
Checks if the node is a datetime node :param node: the node to check :type
Check that the mode argument is a valid mode name.
Adds a message to the list of messages. :param msg: The message to add :
Return the title for the given node :param node: The node to get the title :
Sets the default options based on the configuration. :returns: None :rtype: None
Return true if the given node is a built-in node :param node: the node
Add the given node to the class diagram. :param node: The node to add to
Get all ancestors of a given node.
Return a list of nodes that are associated with the given klass_node :param klass_
Recursively extracts all classes from the given node.
Return a tuple of the package and class diagrams.
Add `node. modname` to the packagediagram if it is not already there.
Return a class diagram for the given class. :param project: project instance :param klass
Get the DIA definitions for this project. :param project: the project to analyze :
Return True if the owner is ignored in the list of ignored classes. :param owner:
Return a list of node names that are similar to an attribute name.
Return ``True`` if the member of the given node is not a member of a class
Return whether the given node is a parent of the given type. :param node: The
Return True if the name is used as a variadic.
Check if we're not in a starred context or in a variadics function.
Check if variable is assigned to a function or a function. :param node: :param
Check that the call result of a function is not uninferable. :param node:
Visit `UnaryOp` and add errors to `node`s type_errors.
Yield interfaces implemented by the given node. :param node: the node :type node:
Create a project from a list of files.
Generate unique ID for each package entry in the package. :param node: node to visit
Set the locals_type attribute to a list of types. :param node: The function
Assign a variable name to a function or class or class or class definition :param node:
Set the type of the attribute of the given node :param node: The node to set
Handle imported modules. :param node: the import node :type node: :class:
Import all modules from the given context file. :param node: The import from node.
Return the module name for the given context name :param context_name: The context name
Add the imported module to the module dependences list :param node: the imported module
Register the reporters for the linter.
Write a message to the log. :param msg: The message to write :type msg
Write a message to the console. :param msg: the message to write :type msg
Open a graph. :param args: attributes of the graph to open :type args:
Write an edge. :param from_node: the node to write the edge :param
Process a non-raw string token :param prefix: the prefix of the string :param
Write section section. :param layout: Layout object :type layout: Layout :type layout
Format the evaluation section of the layout. :param layout: The layout of the evaluation section
Prints out the table. :param layout: the layout of the table :type layout:
Add a renamed message definition :param old_id: Name of the renamed message :param
Registers messages from the checker. :param checker: The checker to check :type checker:
Registers a message in the model. :param message: Message to register :type message:
Raise an exception if the msgid is not the same as the symbol of the alternative message.
Raise an exception if there is a duplicate symbol. :param msgid: :param symbol:
Raise an exception if there is a duplicate message ID. :param str symbol: The
Generate the extensions documentation for the extensions.json file :param app: The app to be
Count CPU cores. :rtype: int :rtype: int.
Add messages statistics to the report :param sect: the report section :param stats: the
Fixes the import path of the Python interpreter. :param args: list of python paths
Load plugin modules from a list of module names :param modnames: list of module names
Load plugin configuration from dynamic plugins. :rtype: None :rtype: None :
Set the value of the named option. :param optname: the name of the option
Register a checker to be run when a new checker is created :param checker: The checker
Set python3 porting mode if needed. :rtype: None :rtype:
Return a list of all the checkers that are registered with this object.
Returns a sorted list of checker names.
Return a list of checker instances that can be run on the server.
Expand a list of modules into a list of module names. :param modules: list of
Sets the name of the module and file path of the current module. :param modname:
Check that the module is pure Python. :param ast_node: The module to check
Report the evaluation of the current state of the state machine.
Help message handler for command-line options. :param optname: Option name :param
Called when ``full-documentation`` command is received.
List messages stored in the messages store. :rtype: None :rtype:
List the groups of checks that should be run in the same directory.
Given a text, wrap it to a given line_len. :param text: text
Get the module name and frame id from a node. :param node: the node to
Try to decode the given line with the given encoding, fall back to the default encoding.
Return True if base_name matches a blacklist pattern :param base_name: base
Register all plugins in the given directory.
Returns a comment for the given string. :param string: The string to comment :type
Format the value of an option. :param optdict: :param value: :return
Format a section. Args: stream (file-like): File-like object stream.
Format the contents of an INI file. :param stream: :param options: :
Inserts a new child at the given index :param index: the index of the child
Append a node to the end of this node's ancestors.
Return all parents of this node and all its descendants.
Format the given layout with the given stream. :param layout: The layout to format :
Compute the content of a table and return it as a list of strings.
Yields the content of the layout as a string.
Collect the lines of the module that are part of a single block. :param msgs_
Add a message to the list of ignored messages. :param state_scope: The state
Registers a checker report. :param reportId: :param report_title: :param
Add one or more statistics to the stats dictionary :param kwargs: The statistics to be added
Returns the name of the setter property of the given function node or None if there is no
Get the setter property for the given node :param node: The node to get the setter
Check if the given return_node is a function call Return True if it is a function
Return a list of possible exceptions for the given node.
Process a module. :param module: The module to process :type module: str :
Check that the module's file encoding is correct. :param module: The module to check
Check for disable options and notes in the tokens. :param list tokens: List of tokens
Return True if the statement is a future import of the given name.
Return True if `stmt` is in a for-else branch of `parent`.
Return the first overridden method of the given name, or ``None`` if not found.
Get extra info to be used when unpacking a node.
Return True if the name_node is assigned to the same as the name_node.
Mark a node as consumed and remove it from the list of to_consume.
Check if the node has a homonym in the upper function scope :param node: The
Check whether the unpacking of a tuple or a list of targets can be unpacked.
Check metaclasses of the given class node.
Get a list of packages in the given directory.
Run the install_lib.py script.
Print a report of the similarity of the given stats to the given ``sect```.
Run the simulator with the given arguments.
Append a file-like object to the document.
Compute a list of sims that overlap each other in the list of sims.
Pretty-prints sims. Args: sims: list of sims.
Find common lines between the lineset1 and lineset2 Args: lineset1:
Iterate over the simulations of the linesets.
Iterate over stripped lines. :param start_at: Start of the stripped lines.
Return a dictionary mapping each line number to a list of line numbers.
Check if the attributes of node_a and node_b are equal.
Return True if the original and overridden parameters have the same positional and keyword only parameters.
Try to infer the call result of a given node. :param node: the call result
Set the accessed state of the given node. :param node: The node to be accessed
Check if class is a subclass of the same class. :param node: :return:.
Check if the node's mro is consistent with its mro. :param node:
Check that all bases of the given node are valid classes.
Check if the node is a function call. :param node: The node to check :
Check if the node's slots are in the same slot as those in the parent class.
Visit the name of a node. :param node: The node to visit :type node
Check if the given node is a method parameter with the same name as the last attribute.
Returns True if the body contains a raise node. Args: body: the body of the
Check if the cause is a valid exception context :param node: the node to check :
Displays the report of the given layout. :param layout: The layout to display :type
Return True if ``node`` is a typing_namedtuple.
Check if a class node is an enum class.
Return True if `node` is a dataclass. Args: node (astroid.
Check if the number of parents is greater than max_parents. :param node: Class
Verify that all public methods in a class are within the maximum allowed methods. :param node
Return `node`s branches if `node.orelse` is a boolean expression
Check whether `node` has at most `max_bool_expr` boolean expressions.
Check that each line of the docstring is well-formed.
Format this object with the given template. :param template: the template string :type template
Check if the given node is an `elif` node. :param node: the
Check that `node` is simplifiable if. :param node: AST node to check
Check if a stop iteration is inside a generator.
Check if an exception is inherited from a stopiteration.
Check if there are nested blocks in the scope of the given node :param node: The
Find all duplicated isinstance objects in a function. :param astroid.Node node: A
Check whether ``node`` is a'merging' type. :param node: :
Return True if node is an AND-or-ternary node :param node: A
Check that the node has the same number of return nodes. :param node: Return node
Check if graphviz is available. :param output_format: output format :type output
Execute the diadef shandler command. Args: args (list): list of
Writes packages from a diagram to the printer. :param diagram: diagram object :type diagram
Write out the class information for each object in the diagram.
Set the printer to a dot file. :param file_name: the name of the
Set the printer to be used for the graph. Args: file_name (str):
Return True if the task may be emitted based on the minimum and maximum version of the
Format the help text for the checker. :param checkerref: The checker reference :type
Return the environment variables to be passed to the process.
Get all cycles of a given vertex. :param graph_dict: graph dictionary :param
Generate graphviz graph from graphviz source and map file.
Helper function to format a single section of an option list. :param stream: stream stream
Disable a message. :param msgid: :param scope: :param line: :type
Enable a message. Args: msgid (msgid.Message): The message to enable.
Given a message id, return the symbol of the message definition :param msgid: the message
Check if a message is enabled for a given confidence level. :param msg_descr:
Add a message to the end of the message list :param msg_descr: the message
Return the indent length of a line.
Return a hint line for the given bar positions. :param bar_positions: list of
Return the indentation of the token at the given index. :param idx: index of
Handles the start of a line. :param pos: position of the start of the line
Get the valid indentations for the current position of the token at the given position in the
Hanging indentation after a bracket. :param bracket: :param position: :return:.
Given a bracket and a cursor position, return a _continued_Indent instance.
Push a new token onto the token stack at the given position.
Check if a new line is present in the list of tokens. :param line_start
Check if the token has a valid type annotation :param tokens: List of tokens.
Check for equality spacing at the i-th token in the list of tokens.
Check if the token is surrounded by a space.
Check if the line of the given node is in the same line as the previous line of
Check if the given node is a multi-statement statement. :param node: the node
Check that the indent level of the string matches the indent level of the expected indent string.
Return True if the given node is in an iterating context. :param node: The
Return True if the parent node is a conditional import.
Check if the name of the given node is a built-in identifier.
Check that the node's value is an instance of the same type as the node's value
Check if an attribute of the given node is an instance attribute of the same name.
Check if the raise expression is a value in the inferred type of the raise expression :param
Find and return the path to the pylintrc.py in the current directory.
Validate that the value is of the correct type. :param value: :param optdict
Register a option provider. :param provider: The provider to register :param own_group
This function is called when a provider option has been set to a specific value.
Set a global option to the given value :param opt: option name :param value:
Generate a configuration file from the configuration providers.
Parse the config file and save the options to the global config object :rtype: None
Load the command line configuration from the command line. :param args: list of command line
Add a help section to the command line. :param title: Title of the help section
Returns the help text of the command line. Args: level (int): level of the
Load the default values for the options.
Return the attribute name of an option. :param opt: the option name :type opt
Get the default value of an option. :param opt: The option to get the default
Returns a list of section and option values sorted by section name. :rtype: list
Check if a function is a method call. :param func: the function to call :
Check if the node is a complex format string. :param node: The node to check
Visit logging modules. :param node: logging module node :type node: :class:`
Add logging names from import from. Args: node (:class:`astropy.Node`
Add logging module names to ``self._logging_names`` ``self._logging_names
Check that format_string is correctly formatted :param node: :param format_arg:
Check if `node` is inside a loop.
Get the parent loop node of a loop node :param break_node: the node to
Check if loop exits early. :param loop: the loop to check :type loop:
Return a list of property classes and a list of property names from the given configuration.
Determine the type of the function name of the node. :param node: The node to
Generate a nice report of node type and total number of documented items in node type.
Return True if the call is an astroid.Call that has exactly one positional argument.
Check if a variable is starred in a function call.
Check if the function is abstract :param node: the call node :type node:
Check if ``node`` has a "else" clause.
Check that the given node is part of an astroid.For or astroid.While
Opens the module. :returns: None :rtype: None :raises: None
Check if expression is a constant or a function call. :param node: Expression node :
Check if the given node is an "assert" statement :param node: the AST node
Visitor for `dict` node. :param node: dict node to visit :type node
Check that the given node is not in the finally chain.
Check that a function call has a reversed argument. :param astroid.Node node:
Check that the docstring of a function is not too long. :param node_type:
Raise an error if the literal is not a constant or a constant. :param literal:
Parse the subgraph of the given node. :param node: the node to parse :param
Parse a subgraph. :param node: the node to parse :param pathnode:
Walks the module hierarchy of the given node and adds messages to the self.messages.
Walk the AST tree, calling all registered callbacks. Args: astroid (Node): The
Add a relationship between two objects.
Return the relationship object for the given relation type. :param from_object: the object
Return a sorted list of attributes for the given node :param node: The node to get
Add an object to the diagram :param str title: the title of the object :type
Return a list of class names from a list of class nodes.
Return a list of class objects.
Return the class with the given name. :param name: the name of the class :
Return a list of all module objects in the AST.
Return the module with the given name.
Return the module with the given name. :param name: the name of the module :
Add `from_module` to the list of dependencies of this module. :param node
Delete an entry from the cache :returns: None :rtype: None :rtype
Query the model. :rtype: sqlalchemy.Query :rtype: sqlalchemy
Get a user by username and password :param username: username of user :param password:
Get an access token or refresh token :param access_token: :param refresh_token
Add a token to the session. :param token: The token :param request: the
Add a new grant to the session :param client_id: client ID :param code
Get a client from the database. :param client_id: client id :param code
Prepare the request to be sent to the server. :param uri: the URI of the
Initializes the application with the state of this instance :param app: the application :type app
Create an OAuthRemoteApp with the given name. :param name: the name of the
Authorize the user. :param callback: The callback function to call :param state: The
Handles OAuth1 response. Args: args: OAuth1 request args :type args: dict
Handle OAuth 2.0 response. :param args: OAuth2.0 request args :
Handle the response from the OAuth2 server. :param args: the request arguments :type
Return a hashed version of the token. :param application: the application to hash :type
Makes a client with the given token :param token: The token :type token: str
Create a client from an access token and secret. :param token: The access token :
Temporarily disable transport in case of debug mode. :rtype: :class:`
Confirms the authorization request and returns the authorization response :rtype: :class:`
Get client secret. :param client_key: client key :type client_key:
Get the secret for a request token. :param client_key: The client key of
Get the secret for an access token. :param client_key: the key of the
Return a list of realms for the given request token :param token: The request token
Get the redirect_uri for the token. :param token: the token :param request
Gets the RSA key from the client key. :param client_key: The client key
Validate the client key and store it in request.client :param client_key: client
Validate request token. :param client_key: The client key :type client_key
Validate an access token and store it to request.access_token :param client_key
Check that the timestamp and nonce are valid for the request. :param client_key:
Validate redirect_uri. :param client_key: Client key :param redirect_uri
Return True if the realms provided in the request are a superset of the realms
Validate a token against the verifier. :param client_key: The client key to validate
Verify request token. :param token: token to verify :type token: str :param
Verify that the token matches one of the realms. :param token: the access token
Confirm an authorization request. :param request: The request to confirm :type request: dict
Authenticates the client. :param request: :param args: :return:.
Authenticate client id. :param client_id: client id :type client_id:
Get the scopes of the refresh token. :param refresh_token: The refresh token :
Confirms that the refresh token has one of the provided scopes.
Get the default redirect_uri for the client.
Return the default scopes for the client. :param client_id: The client ID to
Invalidate an authorization code grant for a given client_id :param client_id: client
Save the authorization code to the request client :param client_id: the client_id
Save the bearer token and return the redirect_uri :param token: the bearer token :
Validate the bearer token and return True if valid Return True if token is valid Return True if
Validate that the client id is valid. :param client_id: the client id
Return True if code is valid, otherwise False :param client_id: client_id
Validate grant type. :param client_id: client id :param grant_type:
Validate refresh token. :param refresh_token: Refresh token :type refresh_token:
Validate that the response type is allowed by the client. :param client_id:
Validate that the given scopes are present in the client's default_scopes set.
Validate that the user is valid. :param username: username of the user :type username
Revokes an access token. :param token: The access token :param token_
Update the data to be passed to qq_api_request. :param dict data:
Convert the keys of a dictionary to strings.
Change the Weibo auth header to the same value. :param uri: :param
Create a remote application with the given oauth. :param oauth: :param name: :
Create a new remote app. :param oauth: :param kwargs: :return:.
Extract parameters from the request object.
Convert a string to bytes if it is not already bytes_type. :param text:
Decode base64-encoded text. :param text: text to base64 decode :param
Create a response object with the given headers, body and status code. :param headers:
Return a list of cached clients.
Add a remote_app to the remote_apps dictionary :param remote_app: The
Add a remote application to this account. :param name: the name of the remote application
Check X509 certificate for public key. :returns: None :rtype: None :
Generate keys for small certificate creation. :rtype: None :rtype: None :
Check if private key can be loaded using load_private_key function.
Check that the load_private_key_callback_incorrect method is called.
Check if load_private_key_callback_wrong_type is called.
Return a CRL with a revocation list of the given number of iterations. :rtype:
Check that no duplicate entries in the x509 revoked list is used.
Create a X.509 certificate request.
Create an X509 certificate from a request object. :param req: request object :param
Set the SSL context to use the given certificate chain file. :param certfile: The
Use a certificate file to upload a certificate. :param certfile: Path to the certificate
Use an X509 certificate for this connection. :param cert: the certificate to use for
Add an extra chain certificate to the context.
Use a private key file on this context. :param keyfile: The private key file to
Use a private key for authentication. :param pkey: The private key to use :type
Load a client CA file. :param cafile: The file to load the client CA
Set the verify depth of the SSL context. :param int depth: verify depth :type
Load the temporary temporary DH parameters from a file. :param dhfile: path to the
Set the cipher_list of the connection. :param cipher_list: The cipher list
Set the client certificate authorities. :param list certificate_authorities: The list of
Adds a certificate authority to this SSL context's client CA list. :param certificate_authority
Set the SSL context to use SRTP profiles. :param profiles: :class:`
Set the callback function to be called when the NPN callback is called.
Set the ALPN protocol of the connection. :param protos: list of bytes.
Set the callback function to call when the ALPN address is selected. :param callback:
Sets the OCSP helper and the OCSP data. :param helper: The OCSP
Set the SSL context to use. :param context: SSL context to use :type context
Get the name of the SSL server.
Set the name of the TLSExt host for this SSL object. :param name:
Receive data from the socket. :param bufsiz: size of the buffer :type
Read `bufsiz` bytes from the BIO.
Returns ``True`` if SSL renegotiate is pending. :rtype: bool.
Shuts down the SSL connection.
Get a list of ciphers supported by the server.
Get the list of client CA names. Return a list of x509Name objects.
Set the SSL shutdown state.
Return a random string of length `length` from the server.
Return a random string of random bytes from the client's key.
Return the master key of the SSL certificate. Returns None if the master key does not exist
Export a keying material using SSL_Export_Keying_Material.
Return an SSL session object. :rtype: ``ssl.ssl.Session``.
Return the name of the cipher associated with the current SSL connection. Return None if the cipher
Return the cipher bits used to encrypt the message. Returns: a list of cipher bits.
Return the cipher version of the SSL connection. :rtype: str.
Return the SSL protocol version string.
Get the next protocol negotiated message.
Set the ALPN protocol of the SSL certificate. :param protos: The ALPN protocol
Get the SSL ALPN protocol negotiated string.
Convert a bio object to a string. Args: bio (biobio.bio): bio
Set the ASN.1 time of a boundary. :param boundary: The boundary to set
Retrieves the ASN.1 string representation of a timestamp. :param timestamp: The timestamp
Get the elliptic curve with the given name.
Dump a public key to a PEM or ASN.1 file Args: type (str):
Load an public key from a string or file-like buffer.
Sign data with a private key. :param pkey: private key object :param digest:
Verify a signature with a given data object. :param cert: The certificate to verify :
Dump a CRL to a PEM or ASN.1 file.
Convert the private and public key to a cryptography key :returns: The cryptography key
Check the validity of the key. Return True on success Raise an exception on error.
Load and return a set of all possible Elliptic curves.
Load and return curves from elliptic curves.
Return a pointer to an ECKey object. Return pointer to the ECKey object.
Derive a string representation of the X.509 name.
Return a list of components of the name. Returns: list of (name, value)
Get the short name of the object. :returns: the short name of the object.
Returns the extension data as a byte string.
Return the request as a cryptography.hazmat.crypto.CertificateSigningRequest.
Set the public key of the certificate :param pkey: the public key :type pkey:
Return the public key of the private key of the certificate. Return the public key of the
Return the subject name of the certificate.
Add a list of X509 extensions to the request's list of extensions.
Returns a list of the extensions associated with the certificate. :returns: list of x509
Verifies a PKey object. :param pkey: pkey to verify :type pkey: pkey
Return a cryptography.hazmat.hazmat.Certificate object representation of this
Set the version of the x509 certificate :param version: the version of the x509
Return the public key of the certificate. Return the public key of the certificate :rtype
Sets the public key of this x509 certificate. :param pkey: the public key to
Signs the certificate with a private key. :param pkey: The private key to sign
Get the digest of the certificate. :param digest_name: the name of the digest
Set the serial number of the certificate.
Return the serial number of the certificate. :rtype: int :rtype: int
Adjust the not after time of this certificate to the given amount.
Adjust the notbefore time of the certificate to the given amount. Args: amount (int
Return ``True`` if the notification has expired, otherwise ``False`` is returned.
Get the issuer name of the certificate. :returns: the name of the certificate issuer
Set the issuer name. :param issuer: the name of the issuer :rtype:
Get the subject name of this certificate. :returns: the subject name :rtype:
Set the subject name of the certificate. :param subject: the subject name of the certificate
Add one or more extensions to this X509 certificate.
Return the extension at the given index.
Add a certificate to the hash table. :param cert: The certificate to add :type
Add a certificate CRL to this X509 store.
Set the certificate time of the X509 certificate. :param vfy_time:
Initializes the certificate store context.
Create an exception from the current context.
Verify that a certificate is signed by this context. :rtype: None.
Set the serial number of this certificate. :param hex_str: the hex hex string
Get the certificate serial number of the certificate..
Set the reason code of the certificate. :param reason: The reason code of the certificate
Get the reason for the certificate. Return the reason string :rtype: str.
Set the revocation date for this certificate. :param str when: The time when the certificate
Convert this certificate to a cryptography object. Return A cryptography object :rtype:
Get a list of Revoked objects from the CRL. Return list of Revoked objects.
Return the name of the issuer of the certificate.
Sign the message. :param issuer_cert: The certificate to sign :param issuer_
Export an X.509 certificate to a key pair.
Return the name of the type of the object.
Sets the list of x509 certificates to use for the certificate list :param cacert
Sign the message with the private key. :param pkey: The private key to sign :
Verifies that a key is a valid key for this SPKI. :param key:
Return a base-64-encoded version of the SPKI object.
Get the public key of the public key of the private key.
Sets the public key of the SPKI. :param pkey: public key of the
Raise an exception from the error queue. :param exception_type: exception type.
Get the metadata for this service. :returns: dict of service metadata :rtype:
Yield issues for each board in the list :param board: board name of the board :
Build a list of annotations for a card.
Get a list of boards. :returns: list of boards :rtype:
Get lists from board :param board: board id :type board: str :param
Get a list of cards for the specified list ID :param list_id: list ID
Get all comments for a card.
Return the URL to the API. :param path: the URL path :param context:
Get the results of a GET request :param url: The url of the request :param
Convert a human-readable field to a dictionary. :param str field: A human-
Get all issues that match the query string :param query: the query string :type query
Return a list of pull requests for a given pull tag :param tag: pull tag (
Aggregate issues from multiple targets into a single target. :param conf: configuration file :type
Get a config value or a default value. :param key: The key of the config
Returns True if the issue should be included in the report.
Convert a list of lists to a rst table. :param grid: list of lists :
Execute an oracle command and return the result. :param command: the command to execute :
Try to get an integer value from a configuration file.
Pulls issues from the repository. :type dry_run: bool :param flavor:
Get data from url :param url: url to get data from :type url: str
Get a collection of objects from the API. :param url: The URL of the collection
Parse the Sprint string into a dict. :param sprint: The Sprint string
Get the credentials from the credentials_path. :rtype: dict :rtype:
r"""Corrects p-values according to P-values. Parameters ---------- pvals :
Compute the Z-score of a 2D array Parameters ---------- data2d : 2D
Adjust the axes spines to match the given spines. :param ax: Axes
Prepare an argument parser to be passed to the command line tool. :returns: argument parser
Adds the command line parser for the enrichr operation.
Calculate the p-value for a GSEA distribution Parameters ---------- es : array_like
Get the names and descriptions of the marts.
Get datasets for a given mart Args: mart (str): The mart
Get the attributes of the given dataset :param dataset: the name of the dataset :type
Return a DataFrame of filters for the given dataset Args: dataset (:class:`pandas.DataFrame
Set the number of cores to use.
Load a list of genesets from a GATT file or GATT file.
Get a list of library names in a database. :param str database: The database to
Download libraries from enrichr.org.
Build the heat matrix for the pheno_pos and pheno_neg.
Load data from CSV or CSV file. Parameters ---------- cls_vec : class_
Run the GSEA algorithm for each sample in the permutation. Parameters ---------- df : dict
Write out to a CSV file. Parameters ---------- outdir : str Path to the output file.
Parse the genesets.txt file and return a list of gene sets.
Send a list of Gene objects to the given URL. :param gene_list:
Check that all genes in gene_list are present in usr_list_id.
Apply a cube filter to the script Parameters ---------- script : `mllib.script.script
Create an icosphere filter on the script Parameters ---------- script : `ScriptScript` The
Build a script that draws a set of hires points on a plane.
Get red, green, blue values from color name file.
Check that a variable is a list of num_terms. :param var: a list
Make a list of elements.
Write a filter to a mlx.FilterScript or ml.FilterXML file.
Merge the given script vertially into the current script. :param threshold: threshold to merge
Split vert on non-manifold face.
Translates the script to the given value. :param script: the script to translate :param
Rotates the script to the given axis.
Scale a script to a number of numbers. :param script: the script to scale :
Run cython and co function on the script. :param script: script object :type
Wrap a cylinder into a cylinder with the specified radius and taper and taper
Deform the script to a curve.
Converts a VC script to a LaTeX script. :param tex_name:
Write a mesh2fc filter. Args: script (str): The script of the mesh
Perform a Voronoi filter on the input script Parameters ---------- script : Poisson
Filter script.xml for all-face-vert filtering. :param script: script to
Write quality filter to script.xml file :param script: :param min_quality:
Perform a cylindrical transform on the specified radius. :param script: script to
Performs a spherical-vert script. Parameters ---------- script : `scriptlib.script.
Rename the current layer in the script :param script: :param label: :param layer
Changes the current layer of the filter script. :param script: The filter script to change
Duplicate the current layer of a mlx script :param script: mlx.Filter
Delete the lower layer of the script. :param script: the script to delete :param
Begin the script and merge the files in file_in and mlp_in.
Add a layer to the layer stack :param label: label to add :type label:
Save the filters to a script file :param str script_file: The file to save
Apply a per-triangle filter to the script. :param str script: the script
Measure the topology of a mlx.FilterScript.
Parse hausdorff log file. Args: ml_log (str): log
Return a 2-dimensional mathematical floating point representation of y and x.
r"""Cross product of u and v. Args: u (list): list of
Multiply a vector by a scalar :param scalar: scalar :param v1: vector
Write a depth filter script to the filter.xml. :param iterations: number of iterations
Sorts a PolyLine file into a list of polyline vertices and a log file Args: f
Measure all geometry and topology Parameters ---------- fbasename : string Name of the file to measure :
Lowercase the extension of a filename.
Return the upload set configuration.
Return the URL for a file in this set. :param filename: The file to be
Return a path to a file in the destination folder. :param filename: name of the
Return True if the given file extension is allowed according to the config.
Resolve a conflict in target_folder. :param target_folder: target folder to resolve
Extract the version number from the vprof version file Args: filename (str): The v
Remove duplicates from a list of objects. :param list objects: list of objects :r
Get the difference of the objects in objs1 and objs2. :param objs1:
Format the count of objects in a list of objects.
Trace memory usage. :param frame: stack frame to trace :type frame: StackFrame
Return a list of events that occur at the end of each line, line number, mem
Return the number of overhead of the object.
Compute and store memory overhead in self.mem_overhead.
Profile the package and return a tuple of profile object and package name. :rtype:
Return the profile module and None if profile is not available. :rtype: tuple.
Runs the profile function and returns the result as a tuple of the profile and the result.
Return a list of objects that have been added to in-memory and have been removed.
Return a list of all module names in the package. :param package_path: path
Run a function in a separate process, and return the output.
Get the type of the run object Args: run_object (str): The run object
Initialize the run object with the run object. :param run_object: The run object
Initialize the profile package. :param run_object: the run object :type run
Initializes the profile function and the run object :param run_object: The object to run
Replaces sys.argv with run_object and run_args Args: self._run_
Called by the signal handler whenever a new signal is received from the signal loop.
Given a stack of functions, insert them into the call tree. :param stack:
Fill the sample count of the node with the sum of the sample counts of all children.
Format the tree. :param node: The tree to format :param total_samples:
Format the call tree. :rtype: dict :rtype: dict :rtype
Return a dict of information about the profiling package. :returns: dict of information about the
Profile the source code for the object. :rtype: dict :rtype: dict
Run the object and return a dictionary of information about the object and the result of the call
Transform the profiling statistics into a list of records.
Get profile package info. :returns: Profile package info :rtype: dict.
Get the profile module for the current object :returns: a dict of profile stats :r
Run the profiling function and return the result as a dict. :rtype: dict.
Show the guestbook. :returns: the guestbook as a string :rtype:
Add an entry to the database.
Start stats server. :param str host: host name :type host: str :param
Read the profile html file and return the content of the file. :returns: (str
Handle static files that don't need to be included in the static directory :rtype:
Handle a GET request and send it to the client :param self.path: The path
Do a POST request. :param str post_data: The data to send :type
Send a response to the client. :param http_code: HTTP status code :type
Check if the given module path is a standard directory.
Record a line of code in the code file.
Yields lines without the standard lib in self.lines :rtype: list.
Fill the heatmap with the number of lines in each line without the stdlib file.
Return a list of lines that should be skipped based on skip_map. :param src
Return the profile package file as a dict.
Format a heatmap as a dictionary of values. :param filename: :param heatmap: :
Generate the profile module for the run object :rtype: str :rtype: str
Profile function. Return a dict with information about the result of the function. :rtype
Run the profilers. :param run_object: The run object :param prof
Run profilers. :param func: the function to run :param options: the
Predicts the probability of each sample in X. Parameters ---------- X : array-like,
Predict log-probability for a block-like object.
Fits the model on the given data. Parameters ---------- z : `numpy.ndarray`
Count the number of unique features in each document. :param list analyzed_docs: list
Sorts a vocabulary into a map index where each entry in the vocabulary is a term value pair
Limit the number of features in X to a specified number of document frequencies. :param x
Performs the fit transform on the input dataset.
Transform matrix `z` according to this model's vocabulary. :param z: matrix
Return a Scikit-style StandardScaler object.
Fit the model to a spark dataset. :param cls: the class :param z:
Predict using Spark's prediction method :param cls: the class to predict :param args:
Performs a linear regression on the given data Parameters ---------- z : `numpy.ndarray` The
Fits the model to a series of data Parameters ---------- z : array-like A list
Fit the model to the given data and transform the data to fit into the model Parameters ----------
Returns the score of the model at time `z` with respect to the last step.
Return the score for the given estimator and z_test. :param estimator: the estimator
Train a sparkk clustering model Parameters ---------- z : `numpy.ndarray` or `dict
Return the predicted value for each element in X.
Predicts the class of X. Parameters ---------- X : array-like, shape=2
Check if the given RDD has the expected data type :param rdd: RDD
Performs a truncated Singular Value Transform on the input dataset Parameters ---------- z : SDRs
Transform matrix or dict-like RDD into a matrix-like RDD.
Yield a block of elements from an iterator that can be iterated over in blocks of `b
Yields tuples of a given number of elements of a sequence. :param iterable iterator:
Return an RDD of RDDs with a block of specified size and type.
Return a new RDD with the transformed data. :param fn: :param dtype:
Returns the shape of the first RDD of the RDD. :rtype: tuple
Convert the RDD to a numpy array. :rtype: np.ndarray.
Return the bit value of a given permission and position in the file. :param s:
Returns True if `path` is only a root write. :param path: Path to
Check if config file exists. :param file: config file to check :type file
Read the config file and update the config with it's contents :rtype: dict.
Run a command as a user. :param cmd: command to run :type cmd:
Execute a command and return its stdout and stderr. :param cmd: command to execute :
Executes a command over an ssh session. Args: cmd (str): The command to execute
Validate that the configuration is valid. :rtype: None :rtype: None :
Get the headers of the response.
Build the URL for the execute_home_assistant page.
Returns the URL for the event.
Return the text representation of the packet. :param pkt: Packet object :rtype:
Print the discovery packet to stdout. :param pkt: Packet to print :type pkt:
Scan for devices on the given interface.
Execute the command. :param root_allowed: if True, will execute the root command
Send a message to the confirmation channel.
Called when a device is pushed to the queue. :param device: The device to push
Execute the given device. :param device: the device to execute :type device: Device
Run the plugin. :param bool root_allowed: Whether to scan for the root
Return the path to the ledger file or None if no ledger file is found.
Installs compatibility tests. Args: session (Session): Session object. install (Session):
Create a new PrecalculatedTextMeasurer object from a JSON file. Args: f:
Generate supported characters in deja-vu-sans font :param deja_
Generates a sequence of characters that can be encoded using the given encodings. :param characters:
Return a mapping from a character to its length. :param measurer: :param characters
Write JSON to file. Args: f: file-like object deja_vu
Convolve an image with a 1-D Gaussian kernel. Parameters ---------- image : 1-
Calculate the gaussian kernel Parameters ---------- gaussian_kernel_width : int The width of the kernel
Convert an ANTsImage into a numpy array of gray scale and alpha values Parameters ---------- img
Main function for the ssim command line tool.
Compute the SSSIM value of the target image :param target: the target image :
Computes the SSSM distance between two images Parameters ---------- image1 : array-like image
Destroys the widget. If the widget is not destroyed, it will be destroyed.
Set the version of the code. :param newversion: the new version of the code
Return a dict with the current state of this node.
Print the status of the job.
Return the node connected to the given connection :param conn: the connection :type conn:
Try to bind to the server if it is not in read-only mode.
Called when a new incoming connection is established :param conn: :type conn: :class
Callback to send out the result of a command.
Check if this node should connect to the given node. :param node: The node to
Attempt to connect to the given node, if it is not already connected. :param node
Called when the outgoing connection is established :param conn: the connection to connect :type conn
Called when a message is received from the broker. :param conn: WebSocketConnection object :
Called when a connection is lost.
Add a node to the cluster. :param node: The node to add :type node
Drop a node from the cluster. :param node: the node to drop :type node
Send a message to a specific node :param node: The node to send :type node
Adds the given item to the end of the file. :param item: the item to
Add an item to the queue.
Get the item from the heap.
Attempt to acquire a lock. :param lockid: Lock ID to acquire :param callback
Called when the lock with the lockid is acquired. :param lockid: the lock
Release a lock. :param lockid: Lock ID of the lock to release :param
Sets the hosts to connect to. :param hosts: The hosts to connect to :param
Create the indexes. :param names: the names of the indexes :type names: list
Migrate one or more index names into another. :param list aggregate_indexes: list of
Strip metadata from report and return report object :param report: report object :type report:
Save aggregate reports to kafka.
Extract an XML file from a file or file-like object. :param input_:
Parse an aggregate report file. Args: _input (str): Input file to parse.
Convert a list of reports to a CSV file.
Parse a report file from a file-like object or file-like object.
Return the capabilities of the IMAP server. :param server: the IMAP server
Save forensic reports to splunk server. :param forensic_reports:
Decodes a base64-encoded string :param data: base64-encoded string :r
Given an IP address, return the reverse DNS hostname. :param ip_address:
Convert a human-readable timestamp into a datetime.datetime object.
Get information about an IP address :param str ip_address: the IP address :param
Convert outlook message to rfc822 format. Args: msg_bytes (bytes): out
Convert a string to a list of strings. Args: s (str): the string to
Parse a report file. :param file_path: file path :param sa:
Drains all the subscriptions in this broker.
Publish a message to the broker :param subject: the topic of the message :param payload
Publish a request. :param subject: The subject of the request :param reply:
Publish a message to the broker :param subject: The subject to publish :param reply:
Subscribes to a subject :param subject: The subject to subscribe :type subject:
Unsubscribe from the subscription :param ssid: Subscription ID :param max_msgs:
Send a ping request and wait for the response. :param timeout: timeout in seconds.
Select the next server in the pool :returns: None :rtype: None :ra
Process an error message received from the NATS connection :param err_msg: error message
Process an operation error. :param e: Operation error :rtype: None.
Return the command to connect to the server. :rtype: str :rtype:
Process the next Pong in the queue. :rtype: None :rtype:
Process a message from the broker. :param sid: the session id :type sid:
Process server info. :param info: dictionary of server info :type info: dict
Flushes the pending data to the IO stream.
Read data from the socket and parse them. :rtype: generator of bytes.
Load feature images from a numpy array Parameters ---------- features : numpy array The array of features
Load features from images. Parameters ---------- images : list of images names : list of
Return the Pearson correlation between the images in `imgs_to_decode`
Compute the dot product of the feature images. :param imgs_to_decode: The
Select features based on feat_select Parameters ---------- feat_select : str The feat
Given a list of feature names, return the index of the feature in the list.
Classifies the data using the specified classifier and returns the result as a dict.
Fits the classifier on the data. Parameters ---------- X : list of numpy arrays X
Set the class weight Parameters ---------- class_weight : str or dict class_weight
Perform a cross-val fit using sklearn's cross_validation module Parameters ---------- X :
Fit the classifier to the input dataset Parameters ---------- dataset : `astropy.model.Dataset
Get random voxels from the masker :param dataset: The masker :param n
Get the top n_top_words words from the model's components :param model:
r""" Pearson correlation coefficient. Parameters ---------- X : array-like, shape (
Calculate the FDR. Parameters ---------- p : array-like, array-like, array
Load the activations from a CSV file.
Create an image table for the current image. :param r: the image number to create
Get a list of ordered feature names for the given features :param features: list of features
Returns a dictionary of feature counts, where the key is the feature name and the value is
Load a dataset from a filename. :param filename: filename of the dataset to load :
Save the current state of the feature table to a pickle file. :param str filename:
Return a list of feature names ordered by feature names Parameters ---------- features : list of feature names
Search for features based on a list of strings or list of strings. :param search:
Get unique ids by expression Args: expression (:obj:`pandas.DataFrame`): expression to
Convert the SDF data to a CSR data matrix :rtype: :class:`~
Transform a matrix into a foci matrix Parameters ---------- foci : array-like Mat
Convert foci to a matrix Parameters ---------- foci : 2D array-like, shape
Apply the transformation to the given foci. :param name: The name of the transformation
Returns a mask of all layers in the image. :param layers: layers of the image
Load a set of images from a list of filenames. :param filenames: list of
Save masker image to filename :param data: image data :type data: numpy.
Set the logging level. :param level: The level of the logging to set :type
Parses an address into a list of Address objects.
Convert a dict to a Python object :param item: a dict :type item:
Get the price for a ticker. :param ticker: The ticker :param startdate:
Get bulk news data from the API. :param file_id: id of bulk news
Send a request to the API. :param method: :param url: :param kwargs
Get information about the Bearer for the current spotify client.
Make a request to the given route. :param route: :param kwargs: :return
Get a list of tracks in a Spotify album. :param spotify_id:
Return a list of artists associated with a given spotify ID. :param spotify
Get the album albums for a specific spotify id.
Return a list of top tracks in a artist. :param spotify_id: spot
Given a spotify id, return a list of artists related to it.
Request artists for a list of Spotify ids. :param spotify_ids:
Get information about a category :param category_id: category ID :param country: country
Get a paginated list of playlists for a particular category. :param category_id:
Returns a list of categories for the current user. :param limit: number of categories to
Get a list of all featured playlists. :param locale: the locale of the
Get a list of releases for a new account. :param limit: the number of releases
Given a list of artists or users, return a list of artists.
Get albums for this artist. :param limit: limit of albums :param offset
Get a list of all albums for this artist. Return A list of album objects.
Get the total number of albums for this artist.
Get the currently played track info.
Get the currently played player. :returns: Player instance :rtype: Player.
Get a list of available devices.
Get recently played tracks Returns a list of recently played tracks :rtype: list
Replace playlist tracks. :param playlist: Playlist to replace tracks :type playlist: playlist
Create a new playlist. :param name: Name of the playlist :type name: str
Returns a list of playlists for this playlist.
Get all tracks for this album. :param limit: :param offset: :return:.
Get all tracks in this album.
Return the OAuth2 URL for the current user. :param redirect_uri: :param
Get a single album by spotify ID.
Get the artist of a spotify artist Args: spotify_id: Spotify ID
Get information about a track from Spotify. Args: spotify_id: Spotify
Get a user by spotify_id.
Get a list of albums for a list of IDs. :param ids: list of
Get artists. Args: ids: list of artist ids Return list of Artist objects
Return the id of the given string. :param string: the string to convert :type
Create a new client from an existing client :param client: the client :param args:
Generate OAuth 2.0 authorization URL. Args: client_id: :param redirect_
Return a dict of the attributes that can be passed to the API endpoint as a query parameter
Returns a string of the parameters of this parameter. :rtype: str :rtype
Return a list of tracks for the playlist.
Get all tracks in this playlist.
Transfers a device to the user's account. :param device: device to transfer :
Create a new instance of the class using the href of the resource.
Check to see if the user has permission to access this record. :returns: None.
Given a month number, convert it to a short month if it is in the short month
Update the code urls of all files in the current directory. :rtype: list.
Check if the current version is greater than or equal to the version in the YAML file.
Check if the current branch is a dev version. :returns: True if the current branch
Checks if the current version of the yaml file is older than the version of the yaml file
Create a backup of the current configuration. :returns: None :rtype: None :
Restore the configuration from the backup file. :param str file_to_restore: The
Check to see if the given line is to be ignored :param line: the line to
Parse domain options. :param options: list of options :rtype: list of strings
Extract the base URL from a URL. :param element: the URL to extract :type
Format decoded data. :param to_format: list of strings :type to_format
Return the status code of the requested resource. :rtype: int :rtype:
Get the http_code from pyfunceble.http_code :returns: http
Check if a domain is valid. :param domain: The domain to check :type domain
Check if the domain is a subdomain.
Check if given IP address is a valid IPv4 address. :param ip: IPv4
Check if an IP address is a valid IPv4 address :param ip: IPv4 address
Check if given URL is valid :param url: URL to check :type url: str
Load the configuration from the current directory. :param under_test: if true,
Stay safe. This function is used to do a few heuristics that can be
Check if the passed URL is a valid URL and download it if it's a file.
Download the entry management URL if it's not already there.
Print the header of the table. :returns: None :rtype: None :r
Handle file decision. :param current: Current file number :type current: int :param
Print out the domain name and status of the file. :param domain: the domain name
Print the URL of the file. :param url_to_test: :param last
Print the logo to the screen.
Convert a domain name into a human readable domain name. :param str extracted_domain:
Extract the domain from the file.
Return a list of files to be filtered.
Return a list of URLs for each file in the list of files to be filtered.
Get the expiration date of this task. :rtype: ``datetime.datetime``.
Generate the catched status file. :type catched: str :param catched:
Get the structure from the API. :rtype: dict :rtype: dict.
Create a directory if it doesn't exist.
Delete all uneeded files in the directory. :rtype: None :raises:
Given a path to a configuration file, return a tuple containing the path_to_
Download the production configuration file.
Download the iana config file.
Installs a psl config file to the current working directory, if it doesn't exist
Download and save the directory structure file.
Merge the upstream configuration with the upstream configuration.
Load config from user input and merge it with the current config.
Split a version string into digits and non-digit parts.
Check if the local version is newer than the upstream version. :param local: list of
Check if the package is already been cloned Return True if the package is cloned Return False if
Handle a non-existant index :returns: None :rtype: None :ra
Returns the output directory for the analytic host file.
Print out a unified file.
Generate the status file for this domain.
Check if the file should be created for this domain. Return True if the file should be
Add one or more extensions to the public_suffix_db.
Load the contents of the file into the intern dictionary.
Return the standard version of the given element. :param element: the element to be converted
Load the iana database if it's not already loaded.
Returns the referer of the IANA record if it exists, otherwise return None.
Get the extensions from the iana.org. :rtype: generator.
Update the iana database with the data from the source database. :rtype: str
Do a GET request and return the mined URL. :rtype: list.
This method will retrieve the data from the file and store it in the local cache.
Write a backup of the current state of pyfunceble to self.file.
Add elements to the list of elements to be added to the list of elements to be
Remove the element from the list of elements in the list of elements in the list
Return a list of all the elements that have been mined.
Run the mine and add the mined objects to the internal list of objects.
Returns the content of the file as a dictionary.
Write the content to the file. :param content: The content to write :type content
Writes the record to the `output_directory`. :param record: The record to
Write the expiration date to the output directory. :param extracted: extracted data :type extracted
This method is called when a referer is not found. :param extension: the file extension
Write the header link to the output file if it hasn't already been written.
Construct a list of strings representing the header of a table. :param data_to_
Return a dictionary of the data to print for the given size. :param size: the
Return a list of the size in bytes of the header. :type header: dict :
Colorify the given data. :param data: the data to colorify :type data
Print the data to a JSON file.
Print the contents of the data_to_print to the output file. :param data
Calculate the time difference between the start and end times. :param start: start or end
Format the execution time of the simulation.
Return a list of files to delete from the output directory.
Return a list of databases to delete from the current directory.
Delete all files in the current directory. :param clean_all: If True,
Calculate the hash of the file.
Hashes the data. :param algo: the hash algorithm to use :type algo: str
Compute the hash of the file, file, file, and data for the given algorithm.
Executes the command and returns its output. :rtype: str. :rtype:
Remove a key from the main dictionnary :param key_to_remove:
Rename a key in the main dictionnary :param key_to_rename:
Merge the main dictionnary with another dictionnary :param to_merge
Save the main dictionnary to a JSON file :param destination: Path to the
Serialize the main dictionnary to a YAML file :type destination: str :param
Fixes the path and returns it as a string :param str splited_path:
Write the data to the file. :param data_to_write: data to write
Read the file and return the contents of the file as a string :rtype: str
Return a list of strings sorted by lower case.
Merge a list of dictionaries or lists into the main list. :param to_merge:
Return a list of strings that do not match the pattern.
Match the regex against the data. Return True if match is successful, False otherwise.
Replace all occurences of the substring with the given replace_with.
Count the number of events in this job. :returns: None :rtype: None
Calculate the number of times a period has passed.
Check if the given URL is valid.
Check if the domain is valid Args: domain (string): The domain to check subdomain_
Check if the domain is a subdomain. :param domain: The subdomain to check :type
Check the status of the remote host.
Reformat historical formating error JSON file. :rtype: None :rtype:
Retrieve the database from the database file if it exists. :rtype: None :r
Create a backup of the inactive database. :returns: None :rtype: None.
Return the timestamp in seconds of the database. :rtype: int :rtype:
Returns a list of the content of the function.
Returns True if the user is present in the user's configuration.
Retrieve the whois database if it's available.
Write to the whois_db_path, if authorization is required. :rtype
Returns True if the user is in the database. :returns: True if the user is
Return True if the current user is older than the time of the current time.
Return the expiration date of the current user. :rtype: datetime.datetime.
Perform Travis permissions on the build directory of the current project.
Perform travis permissions checks. :returns: None :rtype: None :rtype
Look up the namespace name. :returns: None :rtype: None :raises
Send a whois request to the local whois server. :param whois_server
Check if URL is valid and return it. :rtype: :class:`url`
Returns the referer or None if the domain_extension is not set in pyfunceble
Returns the current object, if it exists, otherwise a new instance of it.
Return a generator of the standard library paths.
Generate a list of standard package names from standard paths.
Return the line numbers of unused imports.
Extract unused imports from messages.
Yield the line numbers of star-import-used messages. :param messages: list of
Parse import star usage messages with an undefined name. :param messages: :return:.
Yield line numbers of unused variable messages.
Yield line numbers for duplicate key-literal messages.
Check the given source against the PyFlakes API.
Extract the package name from a package line.
Return True if the line is a multiline import statement. :param line: the line to
Return True if the line is a multiline statement. :param line: the line to be
Filter imports that are not used in the given unused_module. :param line: :
Break up an import statement into a single import statement.
Given a list of messages, return a dict of line number to message.
Replace star import with `undefined_name` in ``line``. :param line:
Filter a line number to avoid duplicate lines. :param line: line number :type line
Check if a dictionary entry has a specific key :param line: :param key: :
Check if a value is a literal or a name. :param value: the value to
Generator yielding line numbers of line numbers that do not appear in a pass.
Yields lines that do not contain any line numbers that do not contain any line
Return the indentation of the line.
Return the line ending of a line.
Fix the source code so it can be used in the code module. :param source:
Split a comma separated string into a set of strings.
Check if the file is a python file.
Return True if filename is in the exclude list. :param filename: filename to check :
Reads a response payload from the given input stream. :param input_stream: The stream
Writes the message to the output stream.
Write this CancelRequestPayload to the output stream.
Reads this cancel response payload from the given input stream.
Create a Name from name_value and name_type Args: name_value (string
Read a digest from an input stream.
Writes this message to an output stream. :param ostream: output stream :param km
Read an application-specific information element from the stream.
Writes this application-specific information object to the given byte-stream.
Create a new ApplicationSpecificInformation object. :param application_namespace: application namespace :param
Reads a DerivationParameters object from a byte stream.
Writes this DerivationParameter to the output stream.
Reads a request payload from an input stream. :param input_stream: input stream
Writes this GetRequestPayload to the given output_stream. :param output_stream:
Reads a response payload from the input stream. :param input_stream: the input stream
Writes a response payload to an output stream.
Write the message to the output stream :param output_stream: the output stream :param
Reads a signature verify response payload from an input stream.
Builds an error response. :param version: The version of the response :param reason:
Process the template attribute. :param template_attribute: The template attribute to process :type
Retrieves attributes from the managed object :param managed_object: the managed object :param attr
Sets the attributes on the managed object.
Sets the attribute on the managed object. :param managed_object: the managed object
Returns True if the operation is allowed for the given policy. :param policy_name:
Write this EncryptionRequestPayload to the output stream. :param output_stream: output stream
Create an object of type `secret_type`. :param secret_type: Secret
Sets the value of a certain setting. :param setting: The setting :type setting:
Load settings from file. :param path: path to configuration file :type path:
Processes the bind parameter. :param value: :param dialect: :return:.
Process result value. :param value: value to process :type value: int :param
Read an integer from the specified stream.
Write long integer to output stream.
Check that the value is a valid long integer. :raises: ValueError if the value
Reads an integer from the stream. Args: istream (io.BytesIO): stream
Writes a BigInteger to a file-like object.
Validate that the value is a valid integer type.
Validate that the value is an integer and is not greater than or equal to min.
Read a value from an input stream. :param istream: input stream :type i
Write the value to the specified output stream. :param ostream: the output stream :
Serializes this boolean into the OStream stream.
Validate that the value is a boolean type.
Reads an interval from the given byte stream.
Validate that the interval is correctly representable. :raises ValueError: if the value is
Validates that the key is correctly representable Args: value (bytes): The value of the
Validate that the cryptographic usage is correctly representable :raises: TypeError if the crypt
Validate that the value is a byte string and the opaque_type is a byte string.
Convert an attribute name to tag :param value: the name of the tag :type value
Converts an attribute tag to the name of the attribute. :param value: the tag to
Get a bit mask from a list of enumerations.
Get a list of enumerations based on a bit mask. :param enumeration: List of
Returns True if the given enumeration is a bit mask of the given potential_mask.
Writes this key to the output buffer. :param output_buffer: the output buffer :
Reads a CreateKeyPairResponsePayload from a byte stream.
Write a CreateKeyPairResponsePayload message to the output_buffer. :param output_
Reads the get_attributelistRequest payload from the input buffer. :param input_
Write this message to an output buffer :param output_buffer: Output buffer :type output
Writes the payload to the output_buffer. :param output_buffer: The output buffer
Return a list of json files in directory `p`.
Start the monitoring loop :returns: None :rtype: None :rtype: None
Get a certificate from a connection object. :param connection: the connection object :type connection
Return the extended_key_usage attribute of the certificate. :param certificate: the certificate
Returns a list of the common names of the certificate. :param certificate: The certificate to
Get the client identity from a certificate. :param certificate: The certificate :type certificate:
Reads a CreateRequestPayload object from a byte stream.
Writes this CreateRequestPayload object to the output buffer. :param output_buffer: stream
Reads this CreateResponsePayload tag from a byte buffer.
Writes this object to the output buffer.
Converts an object to a PieKey or PieCertificate or PieSecretData object
Read a response payload from a byte stream. :param input_stream: the byte stream
Writes this object to the output buffer. :param output_buffer: The output buffer :
Checks if the given attribute is supported by this product. :param attribute: The attribute
Check if the attribute is deprecated. :param attribute: attribute name :type attribute: str
Checks if the given attribute is applicable to the given object type. :param object_type
Check if the attribute is multivalued :param attribute: the attribute name :type attribute
Reads a CheckResponsePayload tag from an input stream.
Writes this check response payload to the output stream.
Reads this attributereference tag from the input buffer. :param input_buffer:
Writes this AttributeReference to output_buffer. :param output_buffer: output buffer.
Read attributes from input_stream. :param input_stream: input_stream :param
Write attributes to output stream. :param output_stream: :param kmip_version
Reads a nonce from the input stream.
Writes the nonce to the output stream.
Reads a username-password credential from an input stream.
Writes the username and password to the output stream.
Writes this device credential to output_stream. :param output_stream: :param km
Reads this Credential from the input stream.
Writes the credential to the output stream.
Reads a MACSignatureKeyInformation tag from an input stream.
Writes this MACSignatureKeyInformation to the output stream.
Writes this keywrapping data to the output stream.
Reads a KeyWrapingInformation tag from an input stream.
Writes this key wrapping specification to the output stream.
Read extension information from a byte stream.
Writes this extension information to the given output stream. :param ostream: stream to write
Read a revocation reason from a byte stream.
Writes this RevocationReason to the given byte stream.
Check that revocation_code and revocation_reason_code are of type str.
Reads the object defaults tag from the given input buffer.
Writes this object defaults to the output buffer. :param output_buffer: :return:.
Writes the MKIP message to the given output buffer. :param output_buffer:
Reads the ProfileInformation tag from the given byte stream.
Writes the profile information to the output buffer. :param output_buffer: the output buffer
Writes the contents of the stream to the output buffer. :param output_buffer: The
Shut down the socket and clean up any resources associated with the socket.
Writes the contents of this object to a byte buffer. Args: output_buffer (
Reads a located response payload from an input buffer.
Writes the response payload to the output buffer.
Create an RSA private key from a byte string. :param bytes: bytes of RSA private
Reads a SignResponsePayload object from the given input stream.
Writes this SignerResponsePayload to the given output stream.
Reads a usage allocation request payload from the given input stream.
Convert a ``ProtocolVersion`` to a ``kmip_version`` enum value.
Reads the protocol version from the given input stream. Args: input_stream (bytes):
Write a KMIP protocol version to the output stream :param output_stream: the
Reads the credentials from the input stream. :param input_stream: the input
Write this authentication to the given output stream.
Reads the poll request payload from the input stream.
Reads a certificate from a byte stream.
Writes this X509Certificate to an output stream. Args: ostream: file-like
Reads this archiveresponse payload from the given input stream.
Writes this archiver response payload to the output stream. :param output_stream: output
Perform the handshake and process the message loop :rtype: None :rtype: None
Reads a rekey response payload from an input stream.
Return True if the conformance_clause and authentication_suite are supported.
Get the attributes of a resource. :param uuid: UUID of the resource :param attribute
Retrieves a list of attribute values. :param uid: attribute uid :type uid: str
Perform a query. :param bool batch: If True, the query will be batched
Opens the connection to the Kafka Kafka broker. :returns: None :rtype: None
Close the connection to the server. :returns: None :rtype: None :ra
Register the given managed object. :param managed_object: The managed object to register :
Retrieves the attributes of a user. :param uid: the uid of the user :type
Activates the service. :param uid: the ID of the service to activate :type
Build cryptographic parameters. :param value: The cryptographic parameters :type value: dict
Build the encryption_key_information object from the provided value.
Build a `cobjects.MACSignatureKeyInformation` instance from a dictionary.
Build a KeyWrappingSpecification object from the given value.
Build a list of common attribute objects for the operation policy. :param operation_policy_
Build a name attribute. :param name: The name of the attribute :type name:
Read a KMIP query request payload from a byte stream. :param input_buffer
Write the message to the output buffer. :param output_buffer: the output buffer :
Reads the GetAttributesResponse payload from the given input buffer.
Writes the message to the output buffer. :param output_buffer: the output buffer
Get a single entry point by group and name :param group: group name :param name
Get a group by its name :param group: The group name :param path: The
Return a list of all the entries in the group.
Load the module and return the object :rtype: object :rtype: :class
Create an entry point from a string. :param epstr: entry point string :param
Generate a new controller with the given controller_name Args: args (dict): A dictionary
Rewrites the source file and copies it to the destination file :param src_file:
Check if url is valid.
Serialize an object to a string using the secret key stored in the app's config.
Decode the given ``something`` from the ``secret_key``. :param something:
Return an absolute url for the given endpoint and values. :param endpoint: the endpoint to
Sign in a user :param user: User object :param permenent: True
Get the currently logged in user :returns: User object :rtype: User.
Create the Flask Flask application.
Write a `DataFrame` to a csv writer. :param writer: :param delimiter:
Read a CSV file and return a Pandas Dataframe.
Serialize a `DataFrame` into a `pandas.DataFrame` with the given `data_
Deserialize a `Dataframe` from a `Reader` into a `data_type_
Returns the URL to the contents of the file.
Opens the intermediate dataset as a remote node :returns: None :rtype: None :
Read the contents of the intermediate dataset as a binary file. :rtype: str.
Read the contents of this port as text.
Reads the file as binary data and returns it as a `pandas.DataFrame`.
Return an intermediataset of the specified data type. :param node_id
Get a workspace's experiments Args: workspace_id (string): ID of the workspace
Get workspace datasources :param workspace_id: workspace ID :rtype: list
Get information about a dataset in a workspace :param workspace_id: ID of the workspace
Return a list of all global variable names in a code object.
Return a copy of this pen.
Look up a color by name or return None if not found. :param c: color
Draw the polygon to the given canvas.
A cubic-bernstein-extrema algorithm to find the point on the
Cubic Bezier tessel function. >>> _cubic_bernstein
Build a list of choices for a given tree. :returns: list of choices.
Initialize the cache. This will initialize the cache if it doesn't already exist.
Empty the cache and initialize the database. :param kwargs: dict of kwargs :type kwargs
Get an entry from the cache. :param entry_name: the name of the entry
Update the value of an entry :param entry_name: the name of the entry
Add an entry to the cache :param entry_name: Name of the entry :param
Initialises the controller. :param context: the context :type context: :class:`
Resolve a tree alias to an i18n_tree_alias. :param alias:
Check if the current app is the admin.
Calculate the depth of an item by adding the depth of the item, up to depth.
Return the current item in the tree :param tree_alias: The tree alias of the
Returns the URL for the given sitetree item. :param sitetree_item: The
Initialize the sitetree and return a tree_alias and sitetree_items.
Returns the value of the attribute of the current page :param attr_name: The attribute
Returns the ancestor item of the given item.
Check if the user is allowed to access this item.
Return a list of the items in the tree :param tree_alias: The alias of
Returns the children of the given parent_item :param parent_item: The parent item
Return the children of the given item in the tree. :param tree_alias: The
Update the has_children property of tree_item.has_children :param tree_
Filter a list of items based on a navigation_type. :param items: List of
Returns the item that is ancestor of the given base_item :param tree_alias:
Climb an item from a tree to another item. :param tree_alias:
Given a variable name and a context, resolve it and return it. :param varname:
This function is used to create a site-tree from a template tree. It is used
Returns a `SiteTreeNode` representing the children of a `SiteTree` node.
Template tag handler for ``sitetree.breadcrumbs`` tag. :param parser: :param
Render the given template using the given tree items :param tree_items: The list of
Creates an alias for a template tag.
Get the URL name for a model for a given page :param model_nfo:
Registers the tree admin.py admin.py admin.py admin.py admin.py
Create a redirect handler for a given path.
Redirect the user to a new page.
Redirect to the post_url_continue if post_url_continue is not None.
Redirect the user to the tree view. :param request: The request object :param obj
Create a choice field for a tree item :param request: :param obj: :return
Get a tree. :param request: :param tree_id: :param item_
Move an item in a tree. :param request: :param tree_id: tree
Save the model to the database. :param obj: the model to save :param
Return the list of urls to redirect to the tree admin.
Dumps the current model tree to a json-serialized file. :param request: the request
Import the app's sitetree module. :param app: the app name :type app
Get the model class for the given settings entry name.
Create a new configuration object from a mapping. Args: mapping: A dictionary of key-
Create an instance of this class from a Python file.
Create an instance of this class from a TOML file :param filename: path to file
Creates an instance of the class from an instance of an object. :param instance: The
Create the HTTP headers to be added to a new span. :param context_stack:
Return a tuple of zipkin attributes and the current span for this trace.
Start the tracer and push zipkin attributes to the tracer. :rtype: :class
Stop the transport. :param _exc_type: :param _exc_value:
Update self.binary_annotations and self.logging_context.tags with extra_annotations
Add a SaBinary annotation to the client. :param port: :param service_
Overrides the span name of this span with the name of the span name of the logging context
Copy an endpoint object with a new service name :param endpoint: Endpoint object :param new
Build a `_Span` from this `Span` instance.
Encode a list of Span objects to a protobuf string. Args: pb_spans (list
Creates a protobuf span from a Span object. :param span: Span object to create :
Convert a hex string to a byte string.
Return the protobuf kind for the given kind. :param kind: the kind of the protobuf
Convert an endpoint object to a zipkin endpoint object. :param endpoint: endpoint to convert
Convert a dict of annotation values to zipkin_pb2.Annotation objects.
Create an annotation. :param timestamp: :param value: :param host: :
Create a BinaryAnnotation object. :param key: the key of the binary annotation :param
Create an endpoint object from the given port and service name. :param port: port
Returns a copy of endpoint with a new service name.
Build a list of annotation objects from a dictionary of key-value pairs.
Build a list of zipkin binary annotation objects from a dict of binary annotation values.
Create a Span object from the span_id, parent_span_id, trace_
Convert a thrift span to a byte stream. :param thrift_span: the thrift span
Encode a list of Thrift objects to bytes. :param binary_thrift_obj_
Detects the span version and encoding of a message. :param message: The message to
Convert spans from input_encoding to output_encoding :param spans: spans to convert :
Push zipkin attributes onto thread local stack.
Encodes a v2 span to a Thrift-compatible byte string :param v2_span
Create a json_endpoint based on the endpoint details. :param endpoint: Endpoint object :
Encode a Span as a list of ProtobufSpan objects. :param span: Span to encode
Decode spans into Thrift spans. :param spans: spans to decode :type spans: list
Convert a thrift endpoint to an Endpoint object.
Decode Thrift annotations into a tuple of annotations, local_endpoint, kind, and duration.
Convert thrift binary annotation into local and remote endpoint tags :param thrift_binary_annotations:
Converts a Thrift Span to a Thrift Span.
Convert a trace id to a hex string :param trace_id: trace id to convert
Convert an unsigned long into a lower-case hex string.
Write a 16-bit hex value at a specific position in the stream.
If the date is in the month range of the year, set it to the maximum day
This function is used to set the transaction code for a given tag. :param transactions:
Set the ID of the IPH tag. :param transactions: The list of transactions :
Set the tag's TRNR. :param transactions: :param tags: :
Join the lines of a string into a single string. :param string: the string to
Convert response body to JSON or text. :param response: Response object :type response:
Limit the execution time of the task to `until` in milliseconds. :param until:
Get bot info :param bot_id: bot id :type bot_id: str
Get a list of bots. :param limit: number of bots to return :
Read the packet from the socket and return the Term object. :rtype: Term.
Write a message to the stream. :param message: The message to write :type message
Decode a string to a Term and return its term and its data. :param string:
Encodes a term into a string, compressing if necessary. :param term: term to
Add a source address to the multicast socket :param addr: the source address :type addr
Send the next message in the queue. :rtype: None :rtype: None
Set the callback to be called when a remote service is found. :param str types:
Stop the remote server and stop the remote server thread :returns: None :rtype:
Clear the local services list.
Returns a list of remote services that match types and scopes. :param types: list of
Creates a message based on the action of the specified environment. :param env: the environment
Discover log files. Args: scope (str): Name of log file. loglevel (
Returns the manager of the related object.
Get all the child relations of the given model :param model: the model :type model
Get all child m2m relations for a model.
Save the object to the database. :param list update_fields: The list of fields
Validate that the unique fields are not already present in the queryset.
Returns True if any of the formsets have changed, otherwise False.
Return a copy of this address with a valid checksum.
Generates a checksum for this address.
Prompt the user for a seed.
Get the key at the given index and iterations. :param index: index of the
Get the private key for the given address :param address: The address to get the private
Create a key iterator for the given start and step and security_level Parameters ---------- start :
Create a sponge for the given index. :param index: the index of the
Absorb a sequence of trits to a sequence of length `length` from `offset
Squeezes the given trits into the given length. :param trits: the
Transform the state of the state machine. :returns: None :rtype: None.
Add two trits together. :param left: the trajectories :param right:
Return a list of trits from an integer.
Add two trits. :param left: :param right: :param left: :
Add two trits together, and return the result of the sum of the trits.
Output a seed to the user. :param seed: The seed to print :type seed
Return a command that returns a list of transaction IDs for the given bundles. :param bundles
Use this command to promote a transaction. :param transaction: Transaction to promote :type transaction
Resolve the given uri to an adapter instance. :param uri: the URI to resolve :
Send a JSON-RPC request. :param payload: JSON-RPC request :param kwargs
Log a message at the given level.
Send an HTTP request to the specified URL with the given payload. :param str url:
Interprets the response and raises a BadAPIResponse if the response is not valid.
Adds a digest to the message :param digest: The digest to add :type digest:
Generate a multisig address from the digests of the message.
Creates an iterator for the given start and step number of keys. :param start: start
Create an address from a digest.
Generate an address based on a key iterator. :param key_iterator: A key iterator
Return a list of transaction objects for a given transaction. :param adapter: :return:.
Return an iterator over addresses that are used in a given transaction. :param str seed:
Returns a list of bundle hashes from the given transaction_hashes. :param adapter:
Check if the codec is a trytes codec. :param encoding: the encoding of the
Get codec info.
Encode `input` into `binary_type` and `len` bytes.
Decode the given input into a sequence of bytes. :param input: input to decode :
Returns a list of addresses for a given seed address, starting at the given index.
Add a command to the router :param command: command name of the route :param adapter
Create a transaction signature from a list of trytes.
Convert the transaction to a JSON-compatible format.
Returns a list of trytes to validate the signature.
Sets the is_confirmed flag for all transactions in this transaction group.
Returns a list of messages in the transaction group. :param errors: the error message
Returns a list of all transactions in the block, in which each transaction is a group.
Discovers all commands in the given package and returns them as a dict.
Execute the command. :param request: The request to send :type request: dict :
Apply a filter to a given value. :param value: The value to filter :type
Get the URL for a specific job. :param job_id: The job id to
The list of errors returned by the validator. :returns: List of errors :rtype
Return True if the validator is valid. :rtype: bool Return True if the validator
Yields a list of error messages for each transaction in the bundle. :rtype:
Return a list of signatures that can be found in a bundle.
Return error message when group signature is invalid. :param group: group to validate :type
Traverse the bundle tree of a transaction. :param txn_hash: transaction hash :param
Start the REPL. :param api: the instance of the API :type api:
Generate a random string of the given length.
Return the digest of this key.
Sign input transactions. :param bundle: bundle to sign :param start_index: start
Pretty print representation of the object. :param p: the pretty printer :param cycle:
Write a trits to the hash. :param trits: a list of trits
Adds a context to an exception. :param exc: the exception to add :type exc
The security level. This is a list of integers representing the security level of the address.
Increments the legacy tag with one of the trits. :rtype: tag.
Return the tag of the last transaction in the list, or ``None`` if no tag
Add a transaction to the transaction pool. :param transaction: Transaction to add :type transaction
This method is called when the transaction is finished. This method is called when the transaction is
Sign all inputs in the transaction.
Creates input transactions for the given address. :param addy: the address of the
Convert value to a standard unit. :param value: value to convert :type value:
Decompress G1. :param z: G1 compressed integer :type z: int
Calculates a prime-field inverse of a prime. A is an integer, i.e
Create an instance of the class from a json file. Args: filename (str): filename
Split a description into a list of words.
Returns a list of category names.
Generate a random component. :param component: component name :type component: str :param
Create a timescale class from a name of a timescale class. :param name:
Return a list of Decor objects from an image file. Args: filename (str):
Return a CSV representation of this table. :rtype: str :rtype: str
Return the maximum width of all rows in the table.
Get the decor for the given component. :param c: the component to get the decor
Plot the contents of this list. :param fmt: Format to plot :type fmt:
Deprecated. Use `component` instead of `component` instead of `component` instead of
Process a single row of text. :param text: The text to process :param columns
Parse a canstrat.txt text. :param text: the canstr
Return a list of unique elements in the sequence.
Given a list of tops and a list of values, return a list of intervals
Clean long-itudinal data. :param data: dict :type data: dict
Extract intervals from petrel file Args: filename (str): path to petrel
Create an Interval object from a Canstrat file :param filename: filename of the
Return a copy of the log.
Convert the list of log objects to a CSV file. :param filename: name of the
Convert the dataset to a las3 format string. :param bool use_descriptions:
Find overlapping regions in the document. :param index: index of the document :type index
Find all gaps in a list of gaps. :param index: index of the gaps
Return a copy of the strip with no more elements than `limit` or `n`
Anneal a strip.
Return a copy of this sequence, with gaps filled with the given component.
Return the union of the elements of the two striplog objects.
Intersects two intervals. Args: other (:class:`Interval`): The interval to intersect
Merge overlapping segments into a single segment Parameters ---------- self : `Segment` `~ferm
Invert each element in the sequence. :param bool copy: If true, return the
Crop this strip log to the given extent. Args: extent (int or tuple): The
Return quality information for a list of tests. :param tests: a list of tests to
Returns a tuple of the field_name, field_name, args and kwargs.
Returns a list of jobs with a given prefix. :param prefix: the prefix of the
Parse a HCL string into a Python object. :param hcl: the HCL
Updates an existing access token :param id: ID of the access token :type id:
Get all allocations associated with the given prefix. :param prefix: the prefix of the allocations
Fail a deployment :param id: the id of the deployment to fail :type id:
Pauses a deployment. :param id: the id of the deployment :param pause:
Drain a node. :param id: ID of the node to drain :param enable
Drops a node with a spec :param id: ID of the node :param drain
This method makes a node eligible. :param id: ID of the node :param eligible
List files in a directory. :param id: ID of the directory to list files
Get a stream of files from a file. :param id: the id of the file
Returns information about a file. :param id: the id of the file :type id
Join agent with given addresses. :param addresses: list of IP addresses to join :type
Update a list of servers. Args: addresses (list): List of addresses to update
Forces a node to leave. :type node: str :type node: str :
Returns a list of all nodes in the cluster. :param prefix: The prefix of the
Returns a list of evaluations for a given prefix. :param prefix: The prefix of
Returns a list of namespaces. :param prefix: The prefix of the namespace :type prefix
Registers a job with the queue. :param id: ID of the job to register :
Plan a job. :param id: ID of the job to plan :param job:
Dispatch a job to a specific job :param id: Job ID :param payload:
Revert a job to a specific version. :param id: the ID of the job
Revert a stable job to a new version. :param id: The ID of the
Deregister a job. :param id: Job ID to deregister :param purge:
Returns the current configuration for this account. :param stale: Return the configuration for this account
Delete a peer. :param peer_address: The address of the peer to delete :
Get a listing of all deployments for a given prefix. :param prefix: The prefix
Get a random value of the given object type.
Get a mutator for the given object. :param obj: the object to mutate :
Get a random string from the polyglot_attacks list. :param obj:
Safely convert a buffer of bytes to a unicode string. :param buf: buffer of
Create a custom HTML file. :param filepath: Path to the file :type filepath:
Serve the test case. :param request: the request to serve :type request:
Spawns a new process with the given command.
Get the output from the process.
Starts a thread to read the output of the process and waits for the process to finish.
Terminates the process and closes all the streams.
Starts the fuzzing process. :returns: None :rtype: None :raises
Execute a command. :param obj: The command to execute :type obj: str :
Build a random string of length `self.length` from `pre` or `pre
Build and return a string representation of the set of values. Args: pre (list):
Return a string representation of the query.
Build a random value from self.values Args: pre (list): list of values to
Build the optgram. Args: pre (list[int]): list of words to
Build a reference from a list of references. Args: pre (list): list of references
Build an opt-gram from a list of pre-word lists, or a list of
Shuts down the process and waits for it to finish. :param args: list of
Spawns a child process and monitors its return code. :rtype: bool.
Starts the monitor process. :param standalone: True if the monitor is running in standalone mode
Generate a random number between ``a``, ``b`` or ``a`` if ``
Perform fuzzing on the given JSON object.
Return a list of fuzzed elements. :param indent: :param utf8: :
Handler for the SIGTERM signal.
Quit the cli process. Args: msg (str): The command to quit :type msg
Pause a running process. :param msg: The command to pause :type msg: str
Resume a paused or paused state.
Stop the running process. :param msg: The command to stop the running process :type
Restarts the running process. :param msg: The message to restart :type msg:
Returns a list of skype_events.Event objects representing the events that have occurred.
Set user mood. :param mood: user mood :type mood:
Set user avatar. :param str image: image to set avatar :type image:
Get meta information about the given URL :param str url: URL of the URL to
Fetch a contact by its ID. :param id: the id of the contact :type
Get a user from skype :param id: The user id :type id: int
Get a list of bots for the current user.
Get a bot by id. :param id: id of the bot :type id:
Search for users. :param query: string to search for :type query: str :
Return a list of skype_client.Request objects for this user.
Create a new skype instance from raw data. :param skype: skype instance
Merge the contents of another object into this object.
Merge an object into the cache.
Reads the token file and stores it in the self.tokens attribute.
Write out a token file to the file system.
Verify that the current token is valid for the given authorization token. :param auth: the
Refresh the skypett token and store it in the self.tokens dict.
Get user id from API user token :returns: userid :rtype: str.
This method is used to get a new token from the auth token provider :rtype:
Synchronizes all endpoints with the skype-endpoints API. :returns: list of endpoints
Check if a user exists. :param user: User ID :type user: str :
Authenticates the user using the given token. :param token: The token to auth
Set the config of this message. :param name: the name of the message :type
Ping the device. :param int timeout: how long to wait for the device to ping
Get recent chats. :returns: dict of recent chats :rtype: dict
Get a chat by ID. :param id: ID of the chat :type id:
Create a new chat. :param members: list of users :param admins: list of
Extract the user's ID from a URL.
Try to extract a chattoid from a URL.
Convert text to unicode string.
Detect the format of the given text. :param text: the text to detect :type
Parse a text string into a dictionary of metadata and content. :param text: The text
Return a dictionary representation of the file.
Load YAML data from file-like object fm -- file-like object fm -- file-
Export metadata as a YAML string. :param metadata: metadata to export :type metadata:
Export metadata as a JSON string. :param metadata: Metadata to export :type metadata:
Match the string with the pattern. Return True if the string matches the pattern, else False
Return a list of the items in the string.
Returns a list of lists representing the sub-lists of the item at position i.
Move the start position of the match to the given new start. :param newstart:
Return a list of arguments for the receiver.
Returns a list of lists matching `pattern` in the argument list. :param pattern:
Return a trie from a list of strings. :param strings: list of strings :r
Generate a regular expression pattern for a trie. :param trie: the trie to parse :
Check that the key is in the range of the span. :param key: The key
Insert the given string at the index ``index`` in the list ``lststr`` at
Partition a char into lststr and lststr0. :param char: char to partition
Return the subspans of the given type. :param type_: The type of the
r"""Shrink the update to rmstart, rmstop. rmstart - rmstart rm
Insert `index` into `length` spans of `length` in each span.
Return the nesting level of this node.
Return the shadow of the span string. :rtype: bytearray :rtype: bytearray
Helper function to set the "shadow" attribute of an external link.
Return the type_to_spans mapping from the type to the spans of the lststr
Deprecated. Use ``pprint`` instead of ``pprint.pformat``.
Returns a list of Parameter objects representing the parameters of the function.
Return a list of parser functions for each span in the list of spans. :rtype
Returns a list of template objects for this type.
Return a list of ``Wikilink`` objects.
Return a list of Comment objects.
Returns a list of the external links of this type.
Return a list of tables in the lststr object. :rtype: list.
Return subspans of the given type. :param _type: the type of the
Return all ancestors of the given type. :param type_: type of the type to
Return the parent element of the given type. :param type_: The type of the
Returns the mode of a list of objects.
Get an argument by its name Args: name: the name of the argument :type name
Remove the first argument of any duplicate names.
Return the argument with the given name. :param name: The name of the argument :
Return True if the command has an argument with the given name and value :param name:
Delete an argument from the function. Args: name (str): The name of the
Convert a CRS code to a string.
Find the first matching ellipsname in the system :param ellipsname: name of ellips
Create a GeoJSON object from a URL. :param url: URL to the GeoJSON
Parse a GeoJSON file into a GeoJSON object :param filepath: Path to a Geo
Create a new CRS object from an EPSG code.
Create a CRS object from an ESRI code. :param code: ESRI code
Create a CRS object from a CRS code. :param code: CRS code
Convert a text representation of a CRS or CRS code into an CRS object.
Write the record header and record data to the given file-like object.
Create a VLR object from a data stream. :param data_stream: data stream
Given a list of VLR objects, return a list of GeoTiffKeys.
Parse a geotiff key directory vlr into a list of geotiff keys.
Return the dimensionsignedness of the extra dimension type. :param type_index:
Return the ID for an extra dimension type. :param type_str: the type to
Create a new point record from another point record.
Copy the fields from another record to this record :param other_record: :return:.
Appends zeros to the array if the length of the array is smaller than the number of
Return a set of all the dimension names of the underlying data type.
Create a `PointData` instance with an array of ``point_count`` points.
Create a `Points` object from a stream of bytes.
Create a `Point` from a compressed compressed buffer.
The x-coordinate of the object, scaled by the X-coordinate of the object.
Scale the y-axis dimension to match the y_scale and y_offset attributes.
Scale the z-dimension of the mesh.
Add an extra dimension to this point's data.
Write a VLRs to out_stream.
Writes this LazFile object to a file. Args: filename (str): The file
Given a dict of point format dimensions, return a dict of point format dimensions.
Build the dtype for the unpacked point formats Args: point_formats_dimensions (dict):
Convert a numpy dtype to a point format string.
Get the minimum file version for a point format.
Check if a point format ID is compatible with a file version.
Extract VLRs of type vlr_type from the list of vlrs.
Read a list of VLR objects from a data stream. :param data_stream:
Check if las_files have the same point format id. :param las_files:
Return True if all las files have the same dtype.
Raise an exception if the file signature doesn't match the signature of the las file.
Read the header from the file.
Reads a list of VLRs from the file.
Reads a point record from a VLRs object.
Read compressed points data. :param laszip_vlr: :param point_format
Reads the internal waveform packet from the input stream.
Reads the list of EVLRs from the file.
Warns if the stream is not at the end_of position.
Create a new lasdata object from a lasfile header :param header: lasfile header
Merge multiple las files into a single las file Parameters ---------- las_files : list of
Write las to a file and read the file again :param las: the las file
Return a datetime.date.Date object representing the creation date. Returns: datetime.date
Set the creation date of the object. :param date: datetime.datetime :type date
Array of x, y, and z values with the minimum values.
Set the x_min, y_min and z_min values to the given value
Return the maximum values of the image.
Set x, y, and z_max based on the given value :param value:
Return the scale values of the Vector.
Array of offset values for the x, y, and z components Returns ------- array of
Reads the major and minor version from a file-like object. :param stream: stream
Convert a header to a new version.
Unpack an array of uint8 values from a mask into a numpy array of uint8 values
Return a list of dimension names that are completely lost in point format Parameters ---------- point_fmt
Return a dictionary of sub-fields keyed by the composed field name and the sub-field
The number of bytes required to store the extra dimensions in self.extra_dims.
Returns True if the image has a waveform packet.
Main entry point for the demo command :param ip: IP address :type ip: str
Calculate the checksum of a command. :param command: the command to compute checksum :type
Prints a hex dump of a sequence of characters. :param data: the sequence of
Verifies and strips the checksum of the given response. :param resp: the response to
Returns a list of set bits in a sequence of bits. :param r: sequence of
Generates a query string from the command string. :param command: The command string :type
Connect to the server and monitor the status of the server. :param host: the host
Establish a connection to the device. Return True on success False on failure.
Start monitoring data. :returns: None :rtype: None :raises: None
Disarm a message with partition_list. :param code: code to disarm :
Send an alarm command to the server. :param code: the alarm code :type code
Set the output of a command. :param code: the command code :param output_
Keep the connection alive. :param keep_alive_timeout: The amount of time to
Monitor the status of the alarm. :param alarm_status_callback: A function that
Close the writer if it is connected.
Purge the user's database. :returns: None :rtype: None :rtype
Guess the file type based on the file extension. :param path: Path to the file
Get the file id for a file. :param path: The path to the file :
Get a notebook record from the database. :param path: :param content: :return
Return a model dict from a record and its content. :param record: The record to
Get a directory from the database :param path: Path of the directory :param content:
Convert file records to notebook and file models :param file_records: list of file records
Return a directory model from a database record.
Create a model object from a file record from a database record :param record: the record
Save a notebook to a file. :param db: Database object :type db: :
Save a file. :param db: Database instance :param model: Model to save :
Rename a file. :param old_path: :param path: :return:.
Delete a file or directory at the given path. :param path: Path to the file
Ensure user_id is unique in the database. :param db: the database to be
Purge all files and directories associated with the given user_id from the database.
Create a new directory in the database. :param db: the database. :param user
Return a query to check if a user is in a directory. :param user_id
Delete a directory. :param db: SQLAlchemy database object :param user_id
Check if a directory exists in the database. :param db_dirname: the directory
Return a list of all files in a directory. :param db: database object :param
Return all directories in a directory. :param db: database instance :param user_id
Return a where clause for a file. :param str user_id: ID of the
Select files for a user. :param user_id: User ID :param fields:
Return a list of default fields to be passed to `File` model.
Get a single file from the database. :param db: the database :type db:
Retrieve a file from the database. :param db: Database object :param user_id
Get the file ID for a user. :param db: the database object :type db
Check to see if a file already exists in the database.
Renames the directory at ``old_api_path`` to ``new_api_
Save a file to the database. :param db: Database instance :param user_id
Delete all remote checkpoints for a user.
Reencrypt the content of a row.
Reencrypt the content of a user's files and checkpoints.
Derives a single-fernet key from a password and user_id.
Returns the name of a column like object. :param column_like: A column
Convert a row of data to a dictionary with no content. :param fields: List of
Convert a row of data into a dict with the field names as keys and the decrypt_
Creates a checkpoint for the given notebook and saves it to the given path.
Create a checkpoint of the file at the given path :param content: the content of the
Delete a checkpoint. :param checkpoint_id: ID of the checkpoint :param path:
Get the content of a checkpoint. :param checkpoint_id: The ID of the checkpoint
Return a list of checkpoints for the given path.
Renames all checkpoints. :param old_path: The name of the checkpoints :param
Delete all remote checkpoints for a path. :param path: path to delete :type
Clears all remote checkpoints in the remote database.
Resolve a path to a resource manager and path. :param path: the path to resolve
Apply a prefix to a model.
Handle changes to the managers property. :param name: the name of the manager :type
Get a directory. :param path: Path of the file to retrieve :param content:
Normalize the API path and return it. :param api_path: The API path.
Split the API file path into name and dirname Args: path (str): The path to
Write NBS object to a base64-encoded string. :param nb: notebook object
Read reads from a base64-encoded notebook. Args: nb (str): base64
Decode an unknown value from a base64 encoded string. :param str bcontent: the
Decode a file from base64 encoded data. :param path: :param bcontent:
Return a list of directories starting with the given path. :param path: Path to
Creates a user on the Postgres database. :param db_url: :param user
Given a list of models, return a list of directories and files.
Recursively walk a directory tree. Args: mgr (:class:`DirectoryManager`): :class
Iterate over all files in `mgr` and yield file-like objects. Args: mgr
A generator that yields the contents of all the files in a directory tree. Args: mgr
Re-encrypt a single user :param engine: :param user_id: :type
Unencrypt all users. :param engine: :param old_crypto_factory: :
Re-encrypt the content of a single-user session.
Creates a temporary alembic.ini file with alembic_dir_
Upgrade alembic to a specific revision. :param db_url: ale
Convert the embed data to the internal value :param block: the block to serialize :type
Queue an instance of the embed_type for the given data. :param embed_type
Load instances of embed_type from ids. :param embed_type: the embed type
Insert a new instance into the block :param dict block: The block to insert :type
Load the embed data for each embed type. :param dict embed_type: embed type
Validate the given data :param data: the data to validate :type data: dict :
Administration page. This page contains the information about the administration of the dispatch system.
Return a json representation of this object.
Hide all fields that are not authenticated by the user. :rtype: :class:`
Exclude fields from the queryset.
Override the get method to add version and preview_id to the kwargs.
Return a queryset that includes only tags, section, headline, tags, and author.
Return a queryset of Publishable objects based on the `q` query parameter.
Returns ``True`` if the attribute is set to ``True`` otherwise ``False``
Validate a widget. :param widget: widget to validate :rtype: widget.
Raise an exception if the zone is not valid :param zone: The zone to validate :
Returns True if `id` is a valid UUID string. Args: id (str):
Returns the permissions for this user.
Modifies the permissions of this user.
Validates author data. :param data: data to validate :type data: list.
Save the zone to the DB. :param validated_data: The validated data :type
Return a dictionary of the field values, keyed by field name :rtype: dict.
Prepare the data to be saved to the database.
Render the template. :param data: The data to render :param add_context:
Get the settings of this integration.
Callback function to get access token from Facebook :param user: :param query: :return
Get integration settings. :param integration_id: ID of the integration to retrieve :type
Update integration settings. :param integration_id: integration id :type integration_id:
Sign up an invite. :param uuid: The invite id :param uuid: The invite
Given a tag name and a list of elements, return a string of the tag name
Render zone widget. :param zone_id: zone ID :type zone_id:
Save a featured image for this instance. :param dict data: :type data:
Save article subsection. :param subsection_id: ID of the subsection.
Returns the extension of the image.
Returns the URL of the media item. :rtype: str :rtype: str
Save the image to the database. If pk is None, the image will be saved.
Save the thumbnail of the given image. :param image: the image to save :param
Return the connection to the MySQL database. :rtype: mysql.mysql.mysql.
Return a BandwithLimitStream object for the given file-like object.
Read amount bytes from the file-like object. :param amount: amount of bytes to
Consume the requested amount of a request :param amt: Amount to consume :param request_
Process a scheduled retry token. :param token: the scheduled retry token :type token:
Calculates the proposed rate based on the exponential moving average of amt and time_at_consum
Record the current consumption rate. :param amt: :param time_at_consumption
Waits for the transfer to be completed and returns the transfer's result. :param transfer_
Get a list of callbacks for each subscriber.
Returns a copy of the original_dict with keys in whitelisted_keys.
Decrement the counter by one.
Called when the job is finished.
Check if a file is a special file.
Attempt to acquire a lock on the semaphore. :type tag: str :param blocking:
Release the semaphore. :param tag: tag of the lock :param acquire_token:
Adjusts the chunksize of the file to a new file size. :param current_chunk
Queue a file-like object to be written to. :param fileobj: file-like
Return the download output manager class for the given file object. :param transfer_future:
Writes the given data to the file-like object ``fileobj`` at the given offset
Request a write of the data to be written. :param offset: the offset of the
Checks if a file-like object is seekable :param fileobj: file-like object
Shuts down the process.
Cancel all tracked transfers :param msg: the message to cancel :param exc_type:
Wait for all tracked transfer coordinators to finish. :rtype: None :rtype
Wrap the data into a file-like object. :param data: file-like object
Return the upload manager class for the given fileobj. :param fileobj: The file object to
Set the exception of the transfer.
Sets the result of the operation :param result: the result of the operation :type result
Set the exception of the future.
Wait for the future to finish and return the result of the future.
Cancels the announcements. Args: msg (str): the message to send to the
Submits a task to an executor. :param executor: The executor to submit the task
Add a function to be called when the job is completed.
Add a failure cleanup function to the list of failure cleanups.
Called when the operation is done.
Uploads a file to S3. :param filename: filename to upload :param callback:
Download a file from a bucket to a file-like object :param bucket: Bucket
Get the value of step from the decorator, if it is a string or a list of
Refactor a step. :param old_text: :param new_text: :
Return the value of a step decorator. :param decorator: The decorator :type decorator:
Refactor the step. :param old_text: the old text of the step :
Update a membership. :param membershipid: The ID of the membership :type membership
Delete a membership. :param membershipid: ID of the membership :type membershipid:
Get a list of all available catfacts. :rtype: str :rtype
Create a new person in the room.
Delete a membership. :param membershipid: The ID of the membership to delete :type
Validate that the base_url is valid. :param base_url: the base_
Check if a string is likely to be a web url :param string: a string
Open a local file. :param file_path: local file path :type file_
Check if ``o`` is an instance of one of ``acceptable_types``.
Create a dictionary from a list of dictionaries and a list of items.
Check the response code and raise an exception if it is not the expected response code.
Convert a json string or dict to a dict. :param json_data: :return
Parse a string representation of a date string into a datetime.datetime object.
Create a new team. :param title: The title of the team :param teamid
Update a room. :param roomid: ID of the room :param title: Title
Delete a room. :param roomid: The room ID of the room :type room
List organizations. :param orgid: Organization ID (optional) :param orgid:
The datetime of the last time this actor was created. :returns: datetime.datetime.
Get an OAuth access token from the environmental variables.
Updates a webhook. :param webhookid: ID of the webhook to update :param name
Deletes a webhook. :param webhookid: ID of the webhook to delete :type webhook
Set the value of wait_on_rate_limit.
Update the headers of the request session :param headers: a dict of headers :type headers
Return the absolute URL of the given URL.
Make a GET request to the API. :param url: URL of the resource :param
Get a list of pages from a given URL. :param url: :param params:
Send a PUT request to the given URL. :param url: The URL :param json
Make a DELETE request. :param url: The URL to delete :param kwargs: The
Create a new object with the given subject, displayname, issuertoken, expiration
Delete a message. Args: messageid (str): Id of the message to delete.
Get a person by id :param personid: ID of the person to retrieve :type
Delete a person from the Maker. :param personid: The ID of the person
Gets the authenticated user. :rtype: User :rtype: User :rtype
Returns a list of objects. :param request_parameters: :rtype: list of
Create a new object. :param name: The name of the object :param request_
Update an existing team. :param teamid: ID of the team :param name:
Delete a team. :param teamid: Id of the team to delete :type team
Serialize the given data into a Python object. :param data: The data to serialize :
Returns the last activity date of this user. :rtype: datetime.datetime.
Create a new message in the chatroom. :param json_data: :return:.
Get Ngrok public tunnel URL. :rtype: str :rtype: str
Delete webhooks with the given name.
Create a new Ngrok webhook. :param api: the Ngrok API
Main entry point for ngrok-webhooks.
Read the telegram data from the device.
Read telegram data and put them into the queue :param queue: queue of telegram
Create the DSMR protocol :param dsmr_version: DSMR protocol version :param
Create a serial connection to the DSMR service.
Create a TCP connection to the dsmr server. :param host: The host to connect
Called when a new data is received from the bot. :param data: the data to
Called when the connection is lost. :param exc: :type exc: bool :param
Handle the telegram received from the server. :param telegram: the telegram
Parse telegram data. :param telegram_data: Telegram data to parse :
Retrieve the version of the module from a file. :param file: path to the file
Ensure that `specs` is a valid python version.
Return a list of package names in the top directory.
Run a command. :param cmd: command to run :type cmd: list or tuple
Given a list of data_specs, return a list of tuples of path and
Get the package data from the root directory.
Compile a regular expression pattern into a regular expression match. :param pat: pattern to compile
Split a path into a list of paths. :param path: The path to split :
Translate a glob pattern into a string. :param pat: The glob pattern :type pat
Join the translated parts into a string. :param translated_parts: a list of strings
Translate a glob pattern into a regular expression :param pat: glob pattern :type pat:
Execute truncate SQL against the specified table. :param table: The table to truncate :type
Write the specified table to the database. :param table: The table to write :type
Write indexes to a table. :param table: table to write indexes to :type table
Write triggers to the database.
Write the constraint SQL to the database. :param table: The table to write constraint to
Write the contents of the given table to the given file. :param table: Table to
Write the indexes of a table to the file. :param table: The table to write
Write the constraints for the given table to the file-like object ``self.f`
Write triggers to the file. :param table: The table to write :type table:
Returns the number of items in the queue. :param extra_predicate: the predicate to
Enqueue the given data into the database.
Start the queue. :param block: True or False :param retry_interval:
Build the predicate part of the query :param extra_predicate: the predicate to build :
Return the ISO 8601 representation of the given object. :param obj: the object to serialize
Re-establish a connection to the database. :returns: None :rtype:
Executes the query and returns the first row of the result set. :param query: the
Get a connection to the database. :param db: the database to connect to :type
Run benchmark. Runs benchmarks in a separate thread.
Establishes connection to the aggregator pool :rtype: pool.Connection :rtype
Looks up a file by its errno. :param errno: the errno of the file
Return the total number of connections and connections in the pool. :rtype: int.
Handle connection failure. :param e: Connection failure exception. :type e: :class
Create a simple expression with the given fields. :param joiner: :param fields: :
Return the SQL UPDATE query for the given table :param table_name: the name of
Connect to the database. :param str host: The database :param int port: The
Delete all tables in the database.
Start a step by adding a step_name to the list of steps to start.
Stops a step. :param step_name: Name of the step :type step_
Parse the raw_steps and return the raw_steps as a dict.
Disconnects from the server and closes the connection to the server. :returns: None.
Closes the connection to the server. :rtype: None :rtype: None.
Create a websocket connection to the server. :returns: None :rtype: None :
Receive a message from the websocket. :param ws: WebSocket connection :type ws: WebSocket
Stop the timers used to manage the connection and ping requests :returns: None :rtype
Send a Pong message to the server.
Check to see if we have received a pong from the client.
Send data to the websocket connection. :param api_key: The API key :param
Unpauses the connection to the server :returns: None :rtype: None.
Handler for events from the system. :param data: Event data :type data: list
Handler for error messages. :param data: error data :type data: dict :ra
Called when data is received from the server :param data: :param ts: :return
Subscribes to all channels in the channel_configs dict. :param soft: If
Handle channel authentication. :returns: None :rtype: None :raises: None
Handle a configuration event. :param dtype: the data type :param data: the data
Updates the last_update dictionary with the given channel_id. :param chan_id
Send a reset message to the broker.
Return a list of candles for a given pair. :param pair: pair number
Set bitfinex config. Args: decimals_as_strings (bool): if true,
Subscribes a ticker to a pair :param pair: The pair to subscribe :type
Unsubscribes from a ticker pair :param pair: :param kwargs: :return
Subscribes a symbol to an order book. :param pair: The symbol to subscribe
Unsubscribe a pair from the order book. :param pair: The pair number :type
Subscribes to a pair of raw orders. :param pair: pair number :param
Unsubscribe a pair from the order book. :param pair: pair number :type pair
Subscribes to a pair of trades :param pair: pair number :type pair
Unsubscribe from trades. :param pair: pair of trades :type pair:
Subscribes to a pair of candles.
Unsubscribes from a pair of candles :param pair: pair to subscribe
Authenticates the client using the API key and secret key. :rtype: None
Cancel an order. :param order_identifiers: list of order identifiers :type order_
Called when an incoming command is received from the broker. :param client: client object :
Called when a device command message is received :param client: :param userdata: :param
Callback for when a message is received from the client :param client: The client to send
Create a new devicetype. :param devicetype: the devicetype to
Update a device. :param deviceuid: device UID :type deviceuid: deviceuid
Returns a list of client status objects. :param status: The status of the client :
Returns a list of users. :rtype: list of users :rtype: list
Create a new video file. :param dmedata: The video file to create :
Updates a schema. :param schemaid: ID of the schema to update :type schema
Disconnects from the broker and stops listening for events.
Called when the MQTT connection is established.
Called when a message is not recognized by the broker. :param client: :param userdata
Handle device events. :param client: :param userdata: :type userdata: list :
Called when a device status message is received from the client.
Called when the application status message is received :param client: :param userdata: :return
Get the last event for the given deviceuid and eventid. :param deviceuid:
Get all events for a deviceuid. :param deviceuid: deviceuid to get all
Make a request to the APIC server. :param parameters: A dict of parameters to
Initiate a request. :param request: request to initiate :type request: Request :ra
Get the status of a request. :param requestid: the id of the request :
Closes the connection to the server and releases all resources associated with it :raises IOError
Return the bounding box of the bounding box of the object :param coordinate_interleaved:
Load a byte array from the page.
Check the return value of the function. :param result: The return value of the function
Load the application and return it as an application. :rtype: application.Application.
Serve the gunicorn app. :param workers: The number of workers :param kwargs
Return a URL that can be used to display the image in the image field.
Crops the image and saves it to a file :param Image image: Image to
Converts an image to a bytes file. :param image: Image object :param image_
Process an image and return the image file. :param image: image to process :type
If data is an image, open it for use in the form. :param data:
Process the placeholder image, saving it to disk if necessary. :rtype: None.
Update the versatile_image field before saving the file :param model_instance: The
Update the ``ppoi`` field of the ``File`` instance.
Overrides the default field to add ppoi_field and ppoi_field.
Get the string representation of the field from the given object :param obj: the object to
Autodiscover the versatile image field registry.
Unregisters the sizer with the given attr_name Args: attr_name (str
Unregisters a filter from the filter registry. :param attr_name: Name of the
Return the URL for the field.
Build filters and sizers for this field.
Returns the path to the root folder of the filtered image field.
Return the path to the Sized root folder for this image field.
Returns the path to the filtered root folder. :returns: the path to the root folder
Delete all matching files from the storage.
Preprocess Gif images. :param image: Image to preprocess :param kwargs:
Preprocess jpeg image. :param image: image to process :type image: PIL.
Retrieve image from storage :param path_to_image: path to image to retrieve :
Save image to file :param imagefile: image file to save :param save_path
Return the PPOI as a string.
Create and save a resized image :param path_to_image: path to the image
Render the widget using the template name.
Build the context for the ClearableFileInputWithImagePreview widget.
Build a dictionary of attributes from the base_attrs and extra_attrs :param base_
Get the path to the resized file.
Returns the path to the file filtered by filename_key :param path_to_image
Validate that the sizes parameter is a list of size keys. :param sizes: list of
Get image url from image key. :param image_instance: Image instance :param image
Get the rendition key set for a given image field. :param key: the
Return a string representation of the instruction. :param instruction: The instruction :type instruction:
Format the bytecode of a function body. :param func_body: function body :param
Decode the given bytecode into a sequence of instructions. :param bytecode: the bytecode to decode
Convert a module into a list of module fragments.
Establish a connection to the server :returns: A task that will fire when the connection
Read the result of the AGI command.
Parse the agi result from the command line. :param line: the line to parse
Check the agi code. :param code: code to check :type code: int
Resets the generator for all instances. :param uid: User ID of the instance to reset
Return a list of instance names for this instance. :rtype: list[str]
Return the distro metadata as a dictionary. :param path: Path to distro metadata :type
Return a list of the primary keys of a model. :param model: the model to
Deserialize a single instance of the related model :type value: dict :rtype value:
Get an existing instance of this relationship. :param query: :param value: :return
Return a list of fields that should be declared in the model. :param mcs:
Load the model from the data :param data: The data to load :type data:
Split the model's kwargs and association attributes. :param dict data: The association data :
List snapshots. :returns: a list of snapshots :rtype: list.
Restore a snapshot from a snapshot file or a snapshot file from a snapshot file or a snapshot
Set self.indexes to an array of random indexes.
Cleans up text according to textacy rules. :param text: text to clean :type
Apply a function to a list of data using a pool of threads. Args: func:
Process the given text. Args: text: The text to process. Returns: List of
Process `data` using `process_text_constructor` on each `n_cores
Generate statistics about the document length as well as the huerogeneity of the documents.
Return a pandas DataFrame of word counts.
Map a parameter type to a list of parameter types. :param param_type: the
Parse the list of interfaces and return a dict of method definition. :param interfaces: dict
The inverse of the matrix. This is the inverse of the matrix :param self: the
Update an item, rollbacks if necessary. :param on_dup: If True,
Return a copy of this instance.
Return a copy of the receiver.
Compares two mappings, preserving order-sensitively. :param other: A mapping
Return a tuple of tuples of values and keys that are not present in `arg`.
Clears the internal state of the socket.
Move a key to the end of the list. :param key: The key of the
Write the given text to a temporary file and return the name of the temporary file.
Merge command-line arguments into a command-line configuration. :param args: command-
Load address books from a list of names. :param list names: list of names
Create a new contact from a list of books :param selected_address_books:
A comma-separated list of vcards and their birthdays. :param vcard_list
The phone-sub command for finding phone numbers. :param search_terms: :param
List the contacts of a list of vcards. :param vcard_list: list of
Modify a vCard with a new contact or a new contact from a user input file.
Remove a subcommand from the selected vcard.
Starts a subprocess to source the selected_vcard to the editor. :param selected_
Merge a list of vcards into a single target_uid :param vcard_list:
Return the action name for the given alias. :param alias: the alias of the action
Create a new Contact object. Args: address_book (AddressBook): The address book
Create an instance of this class from a file.
Create a Contact from a user input.
Creates a new contact object from an existing contact with a new user input.
Return a list of the names for a given part of the vCard :param part:
Add a category to the vcard. :param categories: List of categories to add :type
Parse the type value from a list of types. :param types: A list of types
Convert a list of items to a string. :param list input: list of items to
Convert a string to a datetime object.
Return the number of times uid1 and uid2 are the same, i.e.
Search for all contacts that match the query string :type query: str :rtype:
Search for contacts whose full name matches the given query.
Searches for contacts with the given query. :param query: the query to search for :
Searches for names or uid in the database :param query: :param method: :return
Returns a dict of short UIDs, each UID is a unique identifier, which is
Return a string of the short form of a UID. :param uid: the short form
Find the vCard files that match the search pattern in the source_files directory.
Load all vCard objects matching the given query. :param query: The query to
Returns the Abook with the given name. :param name: Name of the Abook
Return a list of available architectures. :rtype: list of architectures
Return list of available architectures.
Try to guess the type of the argument. :param kwargs: keyword arguments :type kwargs
Replace the current query with a new query. :param kwargs: keyword arguments to replace the
Return the first entity in the result set.
Delete the first blocksize rows of the result set in the result set. :param blocksize:
Like redis.lua.lua.prefix.lua.prefix.lua
Estimates the work_lua for the given index. :param index: The index
Count the number of items matching the given filters :param conn: a database connection :param
Return the connection to the database. :param obj: the object to connect to :type
Convert a string to a list of strings, strips all whitespace from the string.
Add an object to the session. :param obj: the object to add :type obj
Return the object with the given primary key, or ``None`` if it's not known
Write the lua data to redis. :param pkey: the entity to write :type pkey
Save the model to the database. :param bool full: If True, save only the
Delete this object from the database.
Get one or more objects from the database. :param ids: a list of ids to
Open a sem file handle. :param name: name of the sem file to open :
Sends back a result to the result queue. :param result_queue: the result queue
Add a pending work item to the call queue. :param pending_work_items:
Ensure the executor thread is running. :rtype: None. :rtype: None
Start the server process. Args: initializer (callable): A callable function to call when the
Duplicate a file descriptor to a new file descriptor. :param fd: file descriptor to
Wait for all pending work items to complete. :rtype: None.
Prepares the current process to run with the given data :param data: the data to run
Close all file descriptors that are not in `keep_fds`.
Recursively terminate a process without psutil.
Recursively terminate a process. :param pid: PID of the process to terminate :type pid
Get the exitcodes of all terminated processes. :param processes: A dict of processes :
Return a string representation of a list of exitcodes. :param exitcodes: list of
Ensure that the process is running. :rtype: None :rtype: None.
Process an event. :param frame: :param event: :param arg: :return
Split the given string into a list of arguments. :param s: the string to split
Get a stack from a traceback object and a traceback object. :param f: traceback object
Run a list of hooks on an object. :param obj: the object to be run
Resets the internal state of the stack and the current frame to be garbage-collected.
Get the value of the argument as an integer. :param arg: the value of the
Process all commands in the debugger.
Add the cmdfile to the queue. :param cmdfile: the cmdfile to be
Find the next non-blank token in the input string. :param start_pos:
Print an error message to the console. :param msg: the error message :param prefix
Read a command from the input stream. :param prompt: The command to read :type
Close input and output streams.
Disassemble `msg` into `msg_nocr` and `msg_nocr
Count the number of frames in a frame. :param frame: The frame to count :
Return the name of the function at the given frame. Return None if not found.
Print the stack trace of a process object.
Look up a sub-command with the given prefix.
Displays the short help of a sub-command.
Add a subcmd_cb to the list of subcmds.
Run the sub-command with the given argument.
Show the available commands for a specific category :param category: category of the commands to show
This function is called when the user wants to enter a new line in the file.
Given a frame, find the frame that contains a debug variable. :param frame: The
Returns an integer from arg or raises an exception if the arg is not an integer.
Set the onoff value of the debugger setting.
Sets the value of an integer property.
Show the boolean value of the value of the property. :param obj: the object to
Show the integer value of the variable.
Show the value of a variable. :param obj: Run object :param name: name
Check if the line is a declaration statement.
Check whether the given line is a class definition.
Threaded quit function. This function is called when the debugger quit signal is raised.
Set the default background color based on the environment variable 'TERM' or 'TERM' if
Check if an RGB color is dark or dark.
Returns a tuple of the signature name and filename and first line number of the frame.
Return a list of all display names.
Return a list of display names for the given frame :param frame: frame to display :
Read the next message from the TCP connection.
Send a debug message to the trepan API. :param frame: The trepan frame
Run the debugger. Args: args: The list of arguments. Returns: True if the
Pretty-print a list.
Look up signal name by signal number.
Look up a signal's signal name. :param name: name of the signal :type
Return the canonic signature name for the given signal number. :param name_num:
Set signal replacement. :param signum: Signal name :param handle: Handle of signal
Check and adjusts sighandler if necessary Args: self.sigs (dict
Print information about a signal. :param args: list of signal names :type args:
Handle signals. Args: arg (str): The command to be executed :type arg:
Set the print method of the signal. :param signame: name of the signal
Called when a signal is received from the signal handler. :param signum: signal code to
Given a filename, return the module name, or None if it's not a module name
Search for a filename in a list of directories. :param filename: filename of the file
Given a python script name and a list of directories, return the path to the file.
Return a list of names of the py files in the caller's caller directory.
Write a message to the output stream.
Run the process. :param args: Arguments for the process :type args: list.
Return a columnized version of the given list of commands. :param commands: list of
close the connection to the server :returns: None :rtype: None :rtype
Write a message to the socket.
Complete the identifier of the current frame. :param prefix: the identifier of the current frame
Add a command to the queue of commands to be processed.
Add one or more frames to the ignore_filter :param frames_or_fns
Given a filename, return the path to the canonic file. :param filename: filename
Returns the filename of the mainpy file of the debugger, or the filename of the main
Returns True if the tracer is started.
Checks if the given frame is a stop point or not. :param event: The event
Set the next frame to be processed. :param frame: the frame to be processed :
Prints the stack trace of the function f.f :param f: the function to print
Deletes a breakpoint from the debugger. :param bp: breakpoint to delete :type bp:
Delete a breakpoint by number Args: bpnum (int): The number of the breakpoint to
Enables or disables all breakpoints in the simulation. :param do_enable: True or False
Enable or disable a breakpoint by number :param bpnum: the breakpoint number :param do
Delete all breakpoints for a particular line number.
Opens the input stream. :param inp: the input stream to open :type inp:
Read a line from the input stream.
Prompts the user for a confirmation and returns the result.
Add a query to the pool and return a new future. :param query: The query
Revert the login of the user to the original login of the logged in user.
Load a module and return the `can_login_as` attribute.
Iterates over all the documents in the database. :param client: the client object :param
Transcode a json file to a file-like object, and return a file-like
Helper function to normalize the date values in a data stream. :param stream: list of
Convert a date string to a float or float. :param date_string: :param
Detects file encoding. Args: filename (string): Path to the file. Returns:
Stream lines of a file as JSON. Args: file (str or file-like
Transcode a file to UTF-8 and return a file-like object.
Open a CSV file on Python 2.7 and Python 3.6 and use UTF-
Read a csv from a csv file. :param reader: csv file to read :param
Main entry point for the transcode script.
Save a token to a json file :param token: The token to be saved :type
Send a request to the luminos server.
Performs a DELETE request. :param path: The path to the DELETE request :type path
Return the root url of a given URL. :param url: The root URL of the
Save the token to a file. :param token_file: The filename to save
Send a request to the Luminoso API and return the result as a dict.
Makes a POST request with the given data and content_type. :param str path:
Get the documentation of the current resource. :returns: the documentation of the resource :r
Make a GET request and return the raw text response. :param path: :param params
Print a list of rows to a csv.DictWriter.
Read parameters from input_file, json_body and p_params. :param input
Simplify a single document. :param doc: The document to simplify :type doc:
Create a project with a list of docs.
Upload the docs from a json file to a project in a given language.
Upload a stream of documents to Lumino Project.
Upload a file from a file-like object to a Google Cloud Storage account.
Entry point for the command line tool to upload a file from a given date format.
Creates a LuminosLogin object from username and password. :param username: username
Login to the server. :returns: None :rtype: None :raises:
Perform a login request to the linky server. :rtype: bool :rtype
Fetch data for each period of time.
Load the view class and add it to the view class. :rtype: :class
Initialize the view. :returns: None :rtype: None :rtype: None
Render the demo view and write it to the response. :param args: :param kwargs
Called when a message is received from the client.
Update the menu attributes based on the change. :param change: :type change: list
Return a list of default handlers for this site. :rtype: list of handlers.
Called when a message is received from the viewer.
Called when the DOM changes. :param change: DOM change :type change: dict :
Create a subelement for this element.
Initializes the widget from the declaration of the widget element.
Destroys the component and removes it from the widget hierarchy.
Add a child component to the component widget.
Remove the child widget from the widget list. :param child: child to remove :type
Returns a generator that yields the widget instances for all children of this widget.
Set an attribute of the widget :param name: Name of the attribute :param value:
Updates the proxy with the given change. :param change: The change :type change:
Notify the root object that a change has been made to this reference.
Find all nodes matching the XPath query :param query: XPath expression :type query: str
Initializes the widget. If the widget has a source, the source will be set to the
Set the source of the component.
Called when the mode of the block is changed :param change: :type change: dict
Removes the block from the list of children and refreshes the list of items.
Called when a child of the node has changed. :param change: Change object :type
Returns the contents of the file at the given ``pathComponents`` as a string.
Print an error message and exit with the given exit code.
Print a message to stderr and exit with an error code :param msg: message to print
Returns the product with the given name. :param name: the name of the product :
Create a new Session object. :param session: Session object :type session: Session :
Reset the session store to the token stored in the session cookie :rtype: dict.
Returns a list of stores matching the search term. :param search_term: The search
Set the delivery system for this store. :param store: Store instance :param postcode
Retrieves the current menu for a store. :param store: the store to get the
Add `item` to the basket :type item: `Item` :type item:
Adds a new pizza to the basket.
Adds a side to the basket.
Remove an item from the basket. :param idx: The index of the item to remove
Set the payment method for this account.
This endpoint is used to process a payment. :rtype: :class:`dict`
Make a GET request. :param path: Path of the file :param kargs: Dictionary
Make a POST request. :param path: API path :type path: str :param
Call the API. :param verb: the API verb :param path: the API path
Add a new item to the menu :param item: Item to add :type item
Add the exit item to the end of the item list if it's not already there.
Draws the menu to the screen :rtype: None :rtype: None :r
Process the user input and move the cursor to the correct position.
Select an item from the list of selected items.
Parses the old menu data. Args: menu_data (dict): A dictionary of
Convert a string to a datetime :param column: column name :type column: str :
Convert datetime to str. :param df: :param column: :param format: :
Apply a basic math operation to a column of the given dataframe :param df: :param
Function to calculate the cumsum of a column of a dataframe. Parameters ---------- df : pandas.
Remove a given number of entries from a cachedir that are older than the given limit.
Add an offset to a date object. :param dateobj: :param hr_offset
Compute the learning updates for the model Parameters ---------- self : `fermipy.models.
Return a list of training parameters, excluding fixed parameters.
Optimizes the parameters with respect to gradients. Parameters ---------- params : list of list of parameters
Perform the first glimpse sensor. :param x_t: the 2-D
Prepare the encoder, decoder, and target inputs for the training pipeline.
Computes the final cost of the computation of the input tensor :param x: the input tensor
Apply a function to each of the training and validation sets. :param func: function to
Vectorize the target dataset. :param size: The number of elements to vectorize.
Report a report about the training and validation results. :rtype: list.
Train the network using the provided train_set, validation_set, valid_set,
Generate a single sample of the model with the specified number of steps. :param input:
Compute alignments based on previous state and precomputed values. :param prev_state:
Compute the context vector of a state. :param prev_state: :param inputs:
Concatenate `vars` into a new `Tensor` along `axis` Parameters ---------- vars
Pads the training and validation sets to the specified length. :param side: :param
Generator for the RMS propagation core. Parameters ---------- params : list A list of parameters
Print a percentage of elapsed time since the start and end time of the timer.
Run the computation. Args: data_x: The data to be computed. Returns:
Run the benchmark and compare with the sum of the data. :rtype: dict.
Build the loop variables to be passed to the loop_loop_loop_loop function.
Scan a single variable for each node in the network. :param vars: dict of variables
The core function for the momentum algorithm :param params: :param gradients: :param
Branch for training if-else branch. :param then_branch: :param else_
Sets the number of batches to skip. :param n_batches: number of batches to
Load parameters from a file and store them in self.best_params :param path:
Train the model on the given training set.
Run a single epoch of the training process. :param epoch: The epoch number :type
Run a single valid step of the problem. :param epoch: The epoch number of the
Report the score map to the network. Args: score_map (dict): a dictionary
Returns the current data set, or None if data_split is not specified :type data
Applies a function to the neural variable :param func: The function to apply to the
Report the usage of the parameters. :returns: None :rtype: None :ra
Create a variable for a given tensor type Parameters ---------- tensor_type : string Type of the
Create a list of neural variable variables from the dataset data :param dataset: the dataset
Set the shared variable Parameters ---------- value : array_like Name of the shared variable.
Stack a number of layers on top of the stack, appending them to the encoding_lay
stack a number of decoding layers onto the end of the decoding_layers list.
Apply the encoding network to the input data. :param x: input data :type x
Decodes the given input. :param x: input to decode :type x: numpy.
Creates a 2-D gaussian kernel. Parameters ---------- dim : int The dimension of the gaussian
Add a new layer to the model. :param layer: layer to register :type layer
Add a monitor for each layer to the training_monitors dictionary :param layer: Layer
Return a list of all parameters.
Set up the input variables and test variables. :param input_tensor: the input tensor
Compute the model with the input data. :param x: input data :type x:
Save parameters to file Parameters ---------- path : str Path of the file to save Parameters ---------- new
Load parameters from a file :param path: Path to file to load :type path:
Print out information about the problem.
Register a list of updates for a given key. :param dict updates: list of updates
Register training updates. :param updates: training updates to register :type updates: tuple
Register a number of monitors. :param monitors: A list of monitors :type monitors:
Return the multiple-l2 norm of the given `tensors` Parameters ---------- tensors :
Pick a single element and write it to a file-like object :param elt_to
Yield elements from a file-like object. The file-like object is returned as a
Load model parameters from a file.
Decodes the state from a URL-encoded state string. :param state: state to decode
Parse credentials response from X-Credentials request. :param credentials: :param data: :
Filter access token request elements. :param request_type: :param request_elements:
Login the user using the given provider name :param provider_name: The provider name :
Return a normalized copy of the given dictionary.
Convert a list of key-value pairs to a dictionary. :param items: list of
Parses the body of a request as JSON and returns a dictionary of query parameters.
Resolve a provider class to a fully qualified class name. Args: class_ (str):
Creates a cookie string for this object. :param bool delete: If True, the cookie
Save the session data to the cookie.
Get the cookie data from the request. :rtype: dict :rtype: dict
Return the data of the object. :rtype: dict :rtype: dict.
Generate a signature for the given parts of the message :param parts: The parts of the
Serialize a value to a string that can be sent to the backend. :param value:
Returns true if the token is valid according to its expiration time.
Return True if the cookie has expired after ``seconds`` seconds. :param int seconds:
Return a comma-separated list of provider_id and provider_type_id.
Check if a string is a binary string. :param content: the string to check :
Returns the content of this response as a binary string.
Return information about the user in the Bitbucket account. :rtype: dict.
Login to the GAE account :type identifier: str :rtype: None :ra
Return the key used to store the session data. :param key: the key to store
Sets a session value. :param key: the key of the session :type key:
Generate a CSRF token. :param secret: The secret to generate :type secret: str
Log a message. :param level: level of the message to log :param msg:
Return True if the given status is in the given category. :param status: the status
Split a URL into a base and a query string.
Set the CORS headers on the response :param req: :param resp: :return:.
Return a dictionary of keyword arguments for an app instance.
Return a string representation of an iterable of objects.
Ensure `inst` is an iterable. If `inst` is not an iterable, return
Return ``True`` if ``a`` is close to ``b``.
Deserializes an audio segment from a string :param bstr: The string to deserialize :
Create an audio segment from a file. :param path: file path :type path:
Create a ``pydub.AudioSegment`` from a numpy numpy array.
Reduce this segment and all others into one segment :param others: A list of others.
Return a string representation of the state of the object.
Choose a front_id from a list of candidate_offset_front_ids.
Given a list of offset_front_ids, find the offset_front_id that
Return the ID of the offset front after the onset front. :param onset_
Match onset_front_id to offset_front_id.
Find consecutive and overlapping fronts of onset_front and overlapping offset_fronts.
Return the ID of the front item based on the index of the front item.
Given a list of onset_fronts, return a list of front ids.
Return the offsets corresponding to the given onset_fronts, onset_front_
Remove overlapping segments from segmentation_mask :param segmentation_mask: segmentation_mask :
Remove fronts that are too small.
Merge adjacent segments in the given mask into the same mask.
Separate a list of masks into a list of masks with a threshold and threshold size.
Downsample one or more stfts into one or more mask and stft_indexes
A SASA task. Parameters ---------- q : `queue` `list` of `
Band-pass filter. Parameters ---------- data : array-like Returns ---------- data : array-
Lowpass filter on the data Parameters ---------- data : array-like, shape = (
Convert a list into a TensorFlow input matrix and a list of outcomes.
Expand the dataset and standardize it. :param response_index: the index of the
Return True if `a` and `b` have equal elements, ignoring the order of
Load the confusion matrices from an audit.json file Args: filename (str): A
Converts a list of rows to a TensorFlow input matrix and a list of outcomes.
Update the `index_url` and `pypi_api_url` based on
Autodetects the requirements files in the project directory.
Raises an exception based on the given error code. :param errcode: the error
Get information about the LSL object. :param int timeout: Time to wait for the
Opens a stream for reading from the LSL object. :param timeout: timeout in seconds
Return the child element with the given name. :param name: Name of the child element
Return the next sibling of the current element, or the first sibling of the current element.
Return the previous sibling of the current node.
Set the name of this LSL object. :param name: the name of the object
Set the value of the LSL. :param value: the value of the LSL
Append a child element to the end of the element.
Return a new child element with the given name. :param name: name of the child
Append a copy of an XML element to the end of this element's element list.
Return a copy of the element at the start of this element.
Removes the rightmost child of this node from the rightmost node. :param rhs:
Returns a list of streaminfo objects for all the results found in the resolver.
Pair a word with a key.
Perform autocomplete on the edge-n-gram of the given query.
Compute the edge n-grams of a token. :param token: token to compute edge
Yields a list of processors from a pipe. :param pipe: pipe to process :
Unordered version of imap.imap that takes a function, an iterable of chunks, and
Performs a fuzzy search on the given word :param word: The word to search :param
Do a fuzzy search on a word. :param word: Word to search :type word
Fuzzy index. Args: word (:obj:`str`): The word to index.
Extend extrapoling relations with many-to-many relations. :param helper:
Help for a given command or all commands Args: command (str): name of the command
Command to print information about the redis database. :param args: :type args: list
Print the contents of a single key in the database. :param key: The key to
Perform a geohash on a latitude and longitude. :param latlon: the long
Execute the index action :param _id: ID of the document to index :type _
Get the best score for a word.
Send the request to the client. :param r: the request object :param stream:
Map a list of requests to a list of responses, returning a list of responses.
Get a bit value from a Python array. >>> get_bits_from_array('
Convert a reinteresting harray to a list of bits. :param typeFrom:
Convert a slice of values to a slice of values of a given width.
Find files matching a pattern in a directory. :param directory: Directory to search for files
Returns True if ``sigorval`` is an element of ``iterable``.
Return a list of statements for each item in `items` in `bodyfn`.
Return the highest integer value less than or equal to x and less than or equal to x
Returns true if num is a power of 2. :param num: number to check :
Add a case statement to the Switch on statement :param caseval: The case value :
Add a default statement to the statement list. :param statements: list of statements :type
Register all the interfaces of the given object in the given parent. :param object obj:
Befores a synthesised unit. :param simulator: Simulator instance :
Log a change to the VCD writer. :param nowtime: :param sig:
Return the code for the process body.
Auto-add agents to all the interfaces in the unit. :param unit: unit to
Get the clk associated with this unit and its parent.
Yields elements from an iterable that do not match a given predicate in the order they were
Group the items in a collection by a function :param collection: :param fn:
Flatten a list of iterables into a series of nested lists. :param iterables: :param
Merges a single IfStatement into this IfStatement :param ifstm: :return:.
Remove unconnected signals from netlist. :param netlist: :return:.
Check whether the statement is a simple assignment. :param proc: the statement to check :
Merge proca and procb into proca and procb and return proca.
Reduce a list of processes into a list of processes.
Called when a request is made to write data to the device at the given address.
Given a list of statements, return the name of the process with the highest output name.
Cuts off all the drivers of a signal. Args: dstsignal (str):
Generate a synthesized HW process.
Given a STM, return the ID of the next STM in the STM.
Get the maximum id of statements in the statement list. :param proc: the statement :
Writes the given data to the interface's data. :param sim: Sim instance object :
Set the direction of this interface to the master direction of the interface :rtype: :
Loads the declarations for the interface and all its subinterfaces. :rtype: None
Return a list of signal objects for this entity interface.
Return the physical name of this port.
Return the bit length of this interface.
Return the sensitivity value associated with a given operation.
Convert this value to a value of totype, returning a value of sigorval.
Reinterpret a bit string into a HStruct. Parameters ---------- sigorval : list of
Return the number of words in the range [start, end) in the range [start
Return a list of words grouped by word width. :param transaction: Transaction object :param
Pack the data into a typeof word. :param data: The data to pack :type
Clean all signal meta-data.
Given a list of statements and a list of outputs, return a set of the outputs
Discover the sensitivity sequence for a signal sequence.
Get the right hand hand hand hand hand hand hand hand hand hand hand hand hand hand hand
Called when a reduce operation is started. Args: self_reduced: True if the
Merge two STMs into this one.
Return True if stmsA and stmsB are mergable.
Merge a list of statements into a single stm and return a tuple of stm and
Merge stmsA and stmsB together into a list of stmsA and st
Try to reduce a list of statements. :param statements: list of statements to reduce :
Called when a parent event is dependent on each of the stems in the list of ST
Sets the parent STM for this statement.
Given a list of statements, add them to the ``target``.
Destroys the driver and removes it from the context. :returns: None :rtype
Clean up all of the interfaces and private interfaces that this entity has connected. :rtype
Walk through the fields of a ``sigorval`` that are flattened into a list of
Given a signed value, return a new value where the sign bit is the sign bit.
Add a process to the list of sensitivity simulations. Args: proc (:class:`
Determines whether a simulator is satisfied by a list of conditions. :param simulator:
Set the port of the destination unit to the original port of the source unit :param sim
Return a vector of ``width`` bits from ``val`` :param val: value to
Register the output of the given statement. :param proc: the statement to process :param
Return the value of an RTL parameter or the default value if it is None.
Set the value of the field. :param val: the value of the field :type
Given a list of interfaces, return a HType object. :param interfacemap: list
Remove all memories from the memory manager. :returns: (int, float): number
Return the index cascade of the rtlSignalBase.
Convert a value from Python object to this object's value representation :param v: value to
Cast the given signal to the given type :param sigorval: The signal to cast
Cast the given sigorval to the type totype :param sigorval: The
Given a intf and a set of discovered parameters, yield all the parameters in the intf
Return a list of signal objects connected to the given srcPacked packet.
Packs the given interface into the given masterdireq to the given masterdire
This method is the main entry point for the Tortl interface. :param targetplatform
Register a new interface with the interface manager. :param iname: the name of the
Try to reduce the values of a signal to a single value. :param sig: sig
Try to reduce `sig` to `val` where `val` is signed by `
Return a Basennamescope for this class. Args: cls (:class:`
Return True if the object can be serialized as a unit. :param obj: the object
Get the condition that can be used to check if the condition is a not condition.
Simulate bit-sampler. Args: width: bit-sampler width signed:
Return the constant name of a constant. :param val: the value of the constant
Cuts off drivers of the given signal :param sig: the signal to cut off
Load from an array of bits. :param dtype: the bit dtype :type dtype:
Load data from a HDR struct into this object. :param dtype: the HDL
Load data from a HDLType into this object. :param dtype: the HDL
Get the number of items in the array.
Recursively walk the tree of bits and hsets in the tree. :param offset: :
Return a sign-fix for a number of bits. :param val: value to sign
Return the indent string for a given number of spaces.
Raises an exception if the specified property is not available in the given object.
Adds a parameter to this parameter definition :param pname: name of the parameter :type pname
Update the parameters of the receiver with the parameters of the other object :param otherobj:
Register a unit with this instance. :param uname: name of the unit :type uname
Add an interface to this service. :param iname: Name of the interface :type
Register a list of items as an attribute of this object. :param name: name of
Return the first driver in the list of drivers. :returns: the first driver in the
Evaluates the result of the operation as a statice value.
Create an RtlSignal from an operator definition and a list of operands.
Return a copy of this context with a new indent level.
Try to connect to destination unit if it's not already connected to another unit.
Propagate the clk to all units in the object.
Propagate the CLK and RSTN relation to the CLK and RSTN
Propagate clk and rst for all units.
Connect all units to the RSTN. :param obj: :rtype: `
Propagate all units to the units of an RST file. :param obj: the
Yields bits of sigorval in order of sigorval's bit length.
Return True if the object should be serialized and False if the object should be serialized.
This function is called when a parent unit is serialized. This function is used to serialize the
Return True if the parent unit is the same as the parent unit, and False otherwise.
Returns the fully qualified name of this object.
Make association with all objects in the collection :param args: :param kwargs: :return
Convert the given unit to a SimModel object :param unit: the unit :type unit
Re-connect all subinterfaces of the synthesisedUnitorInterface to the model class
Run a simulation with a set of stimul functions. Parameters ---------- simModel : sim
A context manager to register a signal callback function to be called when the signal callback is called
Connect this unit to the given signal :param signal: the signal to connect to.
Register a signal in the receiver's direction. :param signal: the signal to register.
Connect this endpoint to the destination driver. :param direction: The direction of the endpoint :
Get the signature of the instruction in or out of the instruction. :returns: the signature
Determines if the given signal is dependent on the given process. :param sig: The signal
Add a process to the event queue. :param proc: the process to add :param
Add a proc to the proctorun of the simulation. :param trigger: the trigger
Schedule a process to be called when a one-plan of priority agents has been updated.
Schedule applying the values to the combination and sequence processes. :rtype: None :ra
Returns an update strategy that can be used to resolve the new value with a conflict strategy.
Re-run all of the combiner processes that have been run on this instance.
Run all the sequence processes in a separate thread.
Apply values to the sequence. :param list va: list of values to apply :type
Read the value of the signature. :param sig: the signature to read :type sig
Writes a value to the signal. :param val: the value to write :param
Add a process to the event queue :param proc: the process to add :type proc
Simulate the given synthesised unit. Args: synthesisedUnit: Synthes
Given a list of statements, return a list of RTLSignalBase objects.
Calculate the distance between two hashes. :param left_hash: the hashes to be compared
Calculate the average hash of a file. Args: image_path (str): path to
Calculates the distance between two images. :param image_path: the path to the image
Set up the device platform :param hass: the Hass instance :param config:
Updates the power state. :returns: None :rtype: None :rtype:
Mute the volume on or off. :param mute: Whether to mute the
Moves the volume up to the next step. :returns: None :rtype: None
Volume down. :rtype: None :raises: None :rtype: None
Sets the volume level of the device :param volume: volume level :type volume: int
Reset the board to its initial state.
Returns the piece at a given square. :param square: square of the piece :r
Remove the piece at the given square from the board.
Set the piece at the given square to the piece at the given hand.
Checks if the move was a suicide or check by a pawn move.
Return True if the character was suicide in the turn. :rtype: boolean
Checks if the game is over the four-fold repetition. :rtype: bool
True if move is a checkmate. :returns: True if move is a check
Returns True if the zobrist is a four-fold repetition.
Pops a move from the move stack.
Generate a SFen string for each square. :param square: square of square :
Push a USI move on top of the move list. :param usi: U
Return the zobrist hash of the board.
Return a string representation of the piece type.
Create a piece object from a piece symbol. :param symbol: the symbol to create :
Return a USI string representation of the piece.
Create a square from a USI string. :param usi: A USI string
Parse a list of commits from a string containing a list of strings. :param data:
Parse a commit from a list of parts. Args: parts (dict): A list of
Executes the command line with the given config.
Generate a YAML string from the initial configuration.
Casts the given value to the correct type. :param val: The value to cast
Returns a list of dates between first_date and last_date.
Parse a date string. :param string s: the date string to parse :rtype
Load currency file from file-like object :param currency_file: file-like object
Set missing value to None for all dates between first_date and last_date.
Returns the rate of the given currency for the given date. :param currency: The
Animate text. Args: frames (list of strings): list of strings to animate
Reads a record of size `n` from the file ``self.file``.
Write a record of length `n` to file `data` :param n: number
Map a range of words from start to end. :param start: Start position of the
Return a string of comments from a fward fward fward record.
Close the DAF file and remove all of the data from the segments of the DAF
Given a tdb and a tdb2 number, return the position of the tdb
Close the DAF file and remove the segments data.
Return the initial epoch, interval length and coefficients from the DAF file.
Check a call to see if it's a valid logging statement. :param node: the
Check if a binary operation occurs within the logging statement and if so, add a violation.
Check that keys in node are not in self.whitelist.
Check if a joined string is in a logging statement and if so add a fstring
Check if the keyword is not in the whitelist.
Visit an exception handler node.
Detects the logging level of a function node.
Gets the name of the exception handler. :param node: The exception handler node :type
Return the id attribute of the value. :param value: the value :type value:
Return True if the given node is a bare exception.
Check exception info. :param node: exception info node :type node: :class:`
Deletes the file if it has the same filefield_name as the filefield_name
Render the rendered content.
Render the PDF template and return the response object.
Quote a string for use in an HTTP request :param string: The string to be quoted
Configure options from a module or dictionary of attributes. :param module: the module to configure
Convert a string to an underscore-cased string.
Automatically index the given collection. :param mcs: the mcs to index :type
Parse a file and return a list of Price objects. :param file_path: path
Load a list of lines from a file. :param file_path: path to the
Parse a single line of text into a PriceModel. :rtype: PriceModel.
Translate a symbol into a human-readable string :param in_symbol: the symbol to
Loads all available symbol maps from the repository.
Get the session object to use for this request :returns: session object :rtype:
Import price data from CSV file. Parameters ---------- filepath : str File path to CSV file.
Returns the latest price for the security symbol. :param str symbol: The security symbol to
Download a price file from the database.
Prune security symbol. :param symbol: security symbol :type symbol: str :param all
Return the default database session.
Add a new map to the database. :param incoming: incoming symbol :param outgoing:
Lists all symbolmaps in the database.
Get a symbolmap by its ID. :param symbol: The symbol to return :type
Read lines from a CSV file. :param file_path: :return:.
Map a price entity to a price model. :param entity: Entity to map :type
Convert a price model into a price entity :type model: PriceModel :type model:
Reads the config from the given file path. :param file_path: path to the
Return the path to the configuration file. :returns: the path to the configuration file.
Create the user config file.
Returns the path of the config file.
Get the contents of the config file as a string. :rtype: str.
Set the value of an option in the config file.
Return the value of an option in the configuration. :param option: the option to get
Save the configuration to a file. :returns: None :rtype: None :r
Parses the mnemonic symbol into namespace and mnemonic. :param symbol: the mnemonic
Add a price to the invoice. :param price: Price model :type price: Price
Download a price for a symbol and currency :param symbol: symbol of the price :param
Get the session to use for requests :returns: the session :rtype: session.
Returns all prices for the given date and currency. :param date: The date of the
Get the price at the given date on the given symbol. :param on_date:
Delete all pricerequisites and return the number of deleted pricerequisite
Delete prices for a security symbol.
Download a price for a symbol. :param symbol: :param currency: :param agent
Return a list of securities for a given currency, agent, symbol, and namespace
Return a partial of the current state.
Update the arguments of all child calls.
Return a generator that yields all descendents of this node and its children. :param include
Verify that the student process has a chosen option :param state: The state of the
Return a copy of the items that are defined in this object.
Get an extension attribute from the parser. :param parser: the parser to use :param
Tests if `state` contains a loop in `exact_names` in `state`.
Check if the solution has a context with the given name.
Check that the student part is present in the solution. :param part_msg: the
Check if the part at the given index is present in the solution part :param index:
Get the true anomaly of the trajectories.
Initialize the ldap3_login_manager with the given app. :param app: the
Add a server to the pool :param hostname: hostname of the server :param port:
Remove a connection from the ldap3_manager_connections list :param connection: the connection
Tear down the ldap3 manager. :rtype: None :ratype: None
Authenticate the user using the given credentials. :param username: The username of the user :
Bind to the LDAP server using the username and password. :param username: the username
Returns a list of groups for a user :param dn: the user name :param group
Return information about the user identified by the DN. :param str dn: The distinguished
Get the user info for the given username :param username: the username of the user :
Get a single object from the server :param dn: DN of the object to retrieve :
Return the connection to the ldap3 server.
Create a new connection to the database. :param bind_user: The username and password
Make a connection to the ldap server.
Destroys a connection. :param connection: The connection to be destroyed :type connection:
Search for objects matching the given query :param query: The query to search :type query
Search for objects matching the query :param query: search string to search :param args:
search for all artifacts in collection :param collection: collection name :param job_id:
Send a speak request to the client.
Announces the given command to the console.
Update the secrets and base secrets.
Update the headers of the request :param fields: dict of key-value pairs :param
Check if the client's secrets are present in the secrets dict Parameters ---------- params : list of
Download a url to a temporary file :param url: url to download :param file_
stream url to stream_to :type url: str :param stream_to:
Update the Authorization header with the current access token :param dict headers: A dictionary of headers
Get or create a folder. :param folder: Folder name :type folder: str :
Read a message from the response. :param response: the response to read :type response
get bucket name from S3 Buckets list :param str bucket_name: name of
Update self.secrets and self.base from secrets.json file.
Initialize the client and load the secrets :returns: None :rtype: None :ra
Load secrets from config file and set them to self.auth and self.transfer.
Get logs for a given name. :param name: name of the log :type name
list all logs in the bucket :returns: list of logs in the bucket :rtype
create an endpoint folder :param endpoint_id: endpoint ID :type endpoint_id:
Initialize the transfer client to be used for this transfer. :returns: None :rtype
Search all containers. :returns: list of results :rtype: list.
Show the status of the client_secrets file. :param backend: the backend to
add a variable to client secrets :param backend: name of the backend :param variable:
remove a client secret from a backend :param backend: backend name :type backend: str
Activate the client secret backend :param backend: the backend to activate :type backend: str
Delete a specific backend from client secrets :param backend: name of the backend :type backend
Update the base image. :param image: the image to update :type image: str
Generate a basic authentication header. :param username: username of the user :param password:
Generates a signature for the given payload and secret. :param payload: the payload :param
Generate a signature for a request header. :param payload: :param request_type:
make a DELETE request to url :param url: url to request :param headers: headers
send a HEAD request to the given url :param url: url to fetch :type url
Perform a GET request with pagination. :param url: :param headers: :type headers
Return True if SSL check is disabled.
remove an image from the registry :param image: the image to remove :param force:
Returns a dictionary of version information for the current version of the python package.
Return a list of install requirements for the given lookup :param lookup: the lookup dictionary :
get singularity version from command line :param singularity_version: the singularity version
check if software is installed. :param software: name of the software to check :type
Returns the absolute path to the directory where this package will be installed.
Return the path to the thumbnail directory.
Run a command and return the output. :param cmd: the command to run :param
Get metadata from the dbx_metadata attribute. :param image_file: name of
update the secrets of the current user :returns: None :rtype: None :ra
Print the output of the S3 operation to a file-like file. :param response
Kills all the commands specified in `commands` Args: args (list): The list
List logs of a container.
Return a list of all collections in the account :returns: list of collections :rtype
Update the secrets setting from the environment variable `SECRETS` Args: env (str):
The main entry point for the ipython program.
Get a list of manifests for a given repository. :param repo_name: name of
Get a manifest of a repository.
Create a temporary directory for downloading files. Args: destination (str): Destination directory subfolder (
Extract the environment variables from the config file. :returns: the environment variable :rtype
Update self.base, self.api_base, self.artifacts, self.job
Update the authentication token with the API key. :rtype: None :rtype:
Return a dictionary of metadata for this job. :rtype: dict :rtype:
Get settings from client_secrets.json file. :param str client_name:
Get the value of a required setting. :param name: the name of the setting :
Update client secret settings with new values. :param name: name of client secret :param
Generate an authorization token. :param names: :param payload: :param request_type
List builders. :param project: project name :type project: str :param zone:
Load templates for a given template name :param name: template name :type name: str
Get the IP address of an instance. :param name: instance name :type name:
Run the build process. :param config: the build configuration :type config: dict :
list all containers in the bucket Return list of containers :rtype: list :rtype
List all containers in the bucket and return them as a list of tuples.
Execute the ls command. Args: query (list): The list of queries to execute.
Main entry point for the Docker registry main function.
init db and db_path :param str db_path: path to the db
Get the build template.json file from the build directory.
list the endpoints :param query: the endpoint query :type query: str :rtype
List an endpoint :param endpoint: Endpoint name :type endpoint: str :param query:
create a shared link to a dropbox image :param query: name of the image to
Read the client_secrets.json file or from the secrets.json file.
Get the bucket service and compute service. :param str version: version of the version of
Delete an object from S3. :param service: S3 service :type service:
Delete an object from S3. :param name: name of object to delete :type
Destroy instance. :param name: instance name :type name: str :rtype:
Return a dictionary of choices and sub-parsers for the given parser. :param parser:
Generate a string representation of the descriptor, a number of characters, and a list of characters
Get a unique temporary directory name. :param requested_tmpdir: the temporary directory to
Extract a tar archive to an output folder.
Extract a TAR archive to the specified output folder Args: archive (str): path to
Calculate the hash of the given file. Args: filename (string): The file to hash
Read file and return content as a string. :param filename: filename to read :type
Read a json file. Args: filename (str): JSON file to read. mode (
clean up files that do not exist :param files: list of filenames to remove :type
Push image to S3 :param path: path of image :param name: name of
Get or create a collection. :param name: name of the collection :type name:
Get the collection with the given name :param name: the name of the collection :type
Get a container by name :param name: name of the container :param collection_id
List containers. :param query: list of containers :type query: string :param query
Inspect a container. Args: name (str): Name of the container to inspect Returns:
rename image to path :param image_name: name of the image :param path:
move image to path :param image_name: name of the image :param path
delete an image from the docker container :param image_name: name of the image
Parse a header from a recipe. :param recipe: the recipe name :param header:
Find a single recipe that matches the given pattern. :param filename: the filename of the
Create a build package tar.gz file for each package_file in package_files.
Update the metadata of a blob.
Format a container name to be used as a container name. :param name: Container name
Return True if the user wants to use the color of the output streams, otherwise False.
Return True if the log message should be emitted as an error :param level: level of
Write a message to the stream. :param stream: the stream to write :param message
Print a table. :param rows: :param col_width: column width :type
push image to remote endpoint :param path: path of image :param name: name of
get a template by name :param name: name of the template :type name: str
Get manifest of image with tag :param repo_name: repository name :param tag:
get build template from file name if name is None, get build template from base directory.
update the client secrets setting and read the cached credential cache if needed :rtype: None
Raises S3 errors. :param path: The path to the file :type path
Factory method to create a new file-like object.
Returns the gravatar URL for the given user or email address. :param user_or
Get gravatar URL. :param str email: Email address :type email: str :
Check if an email has a gravatar :param email: email address :type email:
Return the gravatar profile url for an email address. :param email: The email address
Generate a list of chimera blocks. Parameters ---------- m : int Number of chimer
Given a set of blocks, generate a Chimera-Block-quotient graph.
Return a list of Moltosmiles for resonance smiles.
Return a list of resonance structures in the given mol.
Apply a transform to a molecule.
Given a molecule, return the most likely tautomerity of the tautom
Validate a list of smiles. Args: smiles (list): list of smiles
Standardize a smiles file. Args: smiles (str): a smiles
Enumerate the tautomers from smiles. :param smiles: smiles
Canonicalizes the smiles of a tautomer moll file Args: sm
Return the tautomer parent of the given mol.
Given a molecule, return the largest fragment of the molecule. :param mol: the molecule
Copy a molecule to the parent mol, remove the ``stereal-chemistry``
Set the isotopes of all atoms of a molecule.
Charges the parent of a molecule into a single molecule. :param mol: the molecule
Main entry point for the molvs command line interface.
Remove all fragments from a molecule.
Choose a molecule from a list of chemical fragments :param mol: the molecule to choose
Integrate an ivp distribution. Parameters ---------- u0 : array_like mu : array
Get the list of memories of an organization. :rtype: list.
Get the teams of the organization and store them in the self.teams_json.
Get all the repos in this organization. :param repo_type: :param organization:
Get the total contributors of a repository. :param repo: Repository object :return:.
Get the number of open and closed pull requests for a repository. :param repo: Repository
Get a list of issues for a repository.
Get the README of a repo. :param repo: the repo :type repo:
Search for license in repo.
Get the commits of a repository and add them to self.commits_json :param repo
Write a JSON file with the given organization and date. :param dict_to_write
Write a summary of the total number of repos and the total number of teams in the file
Write the languages file for a given date. :param file_path: the path to
Check if a directory exists :param file_path: Path to the directory to check :
Remove a date from a CSV file Args: file_path (str): Path of the
Get a list of github organizations for Govs. Return list of github organizations for G
Create a new GitHub session for the given GitHub URL. :param url: GitHub URL to
Check the rate limit for API requests. :param gh_session: the session :param
Establish a connection to the GitHub API. :param url: URL of the GitHub API
Query a list of repositories for a given org.
Retrieve an organization from the GitHub GitHub API Args: organization_name (str): The organization
Write the list of stargazers to a file. :param file_path:
Create a new project from a gitlab repository.
Return a dictionary with license information for a given license type. :param license: license type
Get the traffic data for each repo in the organization :returns: None :rtype:
Get the list of releases for a repository. :param str url: URL of the release
Fetch referrers from referrers API Args: url (str): referr
Get data from a given url and store it in the data_json dict_to_
Write a JSON file for a given date. :param dict dict_to_write:
Write the data to a CSV file. :param referrers_file_path:
Check the redundancy of the data files. :param file_path: path to the
Write data to a CSV file. Args: file_path (str): Path to file
Writes a log of referrers to a file. :param str file_path:
Process a JSON file and return a list of records.
Process a URL and return a list of records. :param url: :param key:
Process a JSON or URL or URL. :param filename: filename to process :type filename
Login to the GitHub API.
Gets the memebers of the organization.
Write logins to a file. :param str file_path: path to the file
Establish a connection to the given url and username. :param url: URL of the
Connect to the GITLAB repository. :param url: Gitlab URL :param
Given a list of repos, return a list of projects. Args: gl_session (
Compute labor hours for a song's location. :param str sloc: str
Remove all None values from a dictionary, removing them from a dict. :param dictionary:
Read a GQL query from the file at the given filepath :param filepath: Path to
Await for a reset of the system to be reset. :param utctimestamp:
Wait up to ``waittime`` seconds, sleeping up to ``waittime``.
Load the data from the file at the given filepath. :param filepath: path to the
Save the data to a JSON file :param filepath: Path to the file :param update
Create a new connection to TFS. :param url: The URL of the TFS
Create and return a TFS project analysis client :param url: URL of TFS project
Create a TFS core client :param url: The TFS URL :param token:
Create a TFS connection and return a TFSGitClient. :param url: :
Create a TTFVC client for the given URL :param url: :param token:
Get a list of repositories for a project in TFS. :param url: URL of
Get the list of branches for the current project. :param url: :param collection:
Calculate the total number of commits for a given year :param username: The username of the
Calculates the total number of commits in each week. :param starting_commits: number
Writes the commits to a file. :rtype: str :rtype: None.
Log timing information. :param stat: the stat to log :type stat: :class
Log a histogram. :param stat: :param value: :param tags: :return
Roll up the metrics. :rtype: None :rtype: None :rtype
Convert a value from the database to the corresponding enum value. :param value: The value
Convert the given value to its python representation.
Return the name of the enum, or None if the value is not a valid enum.
Resolve a path into a set of objects that can be iterated over. :param obj:
Given a list of USLs and a list of USLs, return a
Returns the mean of the values in the histogram.
Mark a value in the counter. :param value: the value to mark :type value
Calculates the mean rate of the recorded values.
Marks the given value as being the last value of this sequence. :param value: the
Send a metric to the queue. :param metric: the metric to send :type metric
Serialize a metric. :param metric: the metric to serialize :param m_name:
Format a metric name and value as a string. :param name: name of the metric
This function is used to send a buffered metric to the backend. :param metric_str
Get the value of an option in a section of the config file.
Ensure that the input data is JSON-safe. :param data: input data :type
Returns the value of the option or the default value if the option is not set.
Returns a mapping of ledger codes to their guids. :param codes: list of ledger
Get a list of possible divisions for the current user.
Map exact invoice numbers to foreign invoice numbers.
Create a view in the given injector :param injector: injector of the view :type injector
Create a form view and inject it into the injector :param injector: the injector :type
Create and return a method view in the injector :param injector: the injector :return:.
Create and return a view that can be used to render the API. :param injector:
Create a generic api view and inject it into the injector. :param injector: the injector
Create a ModelViewSet. :param injector: The injector to inject :type injector:
Stream a file descriptor to an asyncio event loop. :param fd: file descriptor to stream
Called when the connection is ready to accept data :returns: None :rtype: None
Close the connection. :param error: The error message to close the connection :type error
Add a path to the list of requests to watch :param path: Path to watch :
Remove a watch from the inotify file descriptor. :param alias: the name of
Setup a watch on the inotify file descriptor. :param alias: The name of
Set up the connection to the server. :param loop: the event loop :type loop
Read a single event from the stream.
Trigger a touch event on the message.
Decreases the interval of the unit, adjusts short and long units if necessary.
Add short and long interval to self.short_interval and self.long_interval.
Closes all connections and stops the redist_periodic thread :returns: None :r
Connect to a nsqd host :param host: nsqd host :param port: ns
Perform a query to the LookupD API.
Set the maximum number of in-flight requests for this connection. :param max_in
Log a warning about a message giving up to the client. :param message: the message
Add a callback to be called when a listener of the specified name is triggered.
Remove a listener. :param name: the name of the listener :type name: str
Triggers the event named `name` with `args` and `kwargs` Args: name
Publish a message to a topic :param topic: topic to publish :param msg: message
Set feature transform mode and degree of training data Parameters ---------- mode: str or list of strings
Run the prediction on the input data Parameters ---------- input_data : str or list of strings
Clean up any unpaired fastq pairs.
Read depth file and return depth_dic_coverage from depth_file :param depth_
Set the template path. :param template: name of the template :type template: str
Set the name of the main channel. Args: input_suffix (string): The name
Render a Jinja template with the given context :type template: str :param context:
Return the template as a string.
Update the main_forks of the sink. :param sink: :type sink:
Update the attributes of this object. :param attr_dict: Dictionary of attribute-value
Set the secondary inputs of the channel. :param dict channel_dict: dict of channel
Parse the assembly file and populate the contigs and contigs Args: assembly_file (
Return the GC content for the given sequence. :param sequence: The sequence :param length
Return the number of contigs in the assembly, including those that are not filtered.
Writes the assembly file for each contig in the contigs. :param output_file:
Writes the report to a file :type output_file: str :param output_
Remove all inner-forks from the given text.
Perform all insanity checks on the given pipeline. :param pipeline_str: the pipeline
Get the lane of the source process. :param fork_process: list of fork
Parse the lanes string into a list of lane tokens. :param lan
Given a list of connections and a lane, return a list of connections.
Add unique identifiers to pipeline_str.
Remove unique identifiers from the pipeline links. :param identifiers_to_tags: list of
Check that the trace and log files exist. :rtype: :class:`eh
Convert a header string to a mapping of positions to the header string. :param header:
Convert a HMS string to a number of decimal places. :param s: the string
Given a string, return the size coverter of the string. :param s: the
Read pipeline processes from log file and store them in self.processes :returns: None.
Clear all information about the process.
Update barrier status.
Retrieve the log from the file at the given path. :param path: the path to
Assess CPU and MEMS for resources that are not too old. :param process:
Update the inspection with log and trace calls :rtype: None :raises:
Display the overview of the current screen.
Move the top line up or down to the top of the screen. :param direction:
Move right and left padding to the screen. :param direction: :rtype: int
Get the last n lines of the log file. :param n: the number of lines
Prepare static information about the pipeline. Return dict of pipeline_files :rtype: dict
Read the DAG file and return a dict of the DAGs.
Calculate the hash of the nextflow log file.
Get the nextflow file path from a log file. :param log_file: The
This function reads the assembly file and creates the assembly file with the sample ID.
Runs Brew innuendo on the given input processes.
List all recipes. Args: full (bool): list of all recipes to list
Validate that the pipeline string is a valid pipeline string Args: pipeline_string (str):
Build upstream for a given task. :param process_descriptions: list of process
Builds the downstream pipeline for the specified task :param list process_descriptions: list of process
Define and build a pipeline for the given tasks. :param tasks: list of tasks to
Return a string representation of a component. :param component: component name :param params:
Write a report to a file. Args: storage_dic (dict): Dictionary of sample
Parse the log files and store them in the log_storage.txt file Args: log
Fix contig names in Asseembly output file.
Clean up reads from a FASTQ file :param fastq: fastq file to clean up :
Parses a list of files into the parser. :param fls: list of file paths
Parse the file and store it in the self._storage dictionary.
Extract the contig ID from a contig string. :param str contig_str: the contig
Write the plot and table data to the report file.
Parse the assembly_file and store contigs in self.contigs Args: assembly_
Get the summary statistics of the contigs, counts, and total contigs, and total
Given a window, return a list of contig_id, contig_id, contig
Calculate GC property. Args: s (str): string length (int): number of lines
Returns a list of chromosome contigs sliding over the given window of contigs.
Run the skesa command to get the sample ID and version of the skesa
Generate a JSON report from the input data. :param sample_id: ID of the
Parse the bowtie log file.
Parse the process name from the name of a process. Args: name_str (str
Add a process to the dependency list :param p: :param template: :param pid
Searches the lane tree for a process with a given template and parent lanees.
Build the header part of the file.
Add the footer to the template.
Sets the inputs of the init process to the inputs of the main process :rtype:
Set the secondary channel for each source.
Set the status_channels of the status and report_channels of all of the processes.
Generate the manifest string for the pipeline. :rtype: str :rtype: str
Sets up the configuration for the process :returns: None :rtype: None :ra
Write the dictionary representation of the DAG to a JSON file :param dict_viz:
Write the configs to a JSON file :param project_root: path to the project root
Exports the parameters of the current process to a JSON file.
Export directives for all processes in the pipeline.
Build the NF project.
Set the number of kmers to use. :param max_read_len: number
Get report ID from report_file if watch flag is set, otherwise, the report ID
Updates the trace_watch file with the new trace_file.
Update the size of the log file. :returns: None :rtype: None :
Sends a live report to the server.
Initiates the live reports for the given report_id. :param report_id:
Close the connection to the broadcast address :param report_id: report ID :type report
convert adatpers to adap.fasta format :param adapter_fasta: path to
Main function of the Mash analysis process. Args: mash_output (str):
Print a message with a color label. :param msg: the message :type msg:
Collect process information from process_map and print them to stdout and exit on error.
Given a string, return a range of characters in the qual_str.
Filter the assembly file to only contain contigs that are not within a minimum coverage range.
Returns the number of contigs in an assembly file and the size of each contig.
Run filter_assembly and filter_filtered_bam on filtered assembly and filtered bam files.
Convert camel case to lower case.
Return a dictionary mapping process name to component class.
Generate a report from a newick file Args: newick (string): The newick
Map weights to data. Parameters ---------- self.W : np.ndarray The weights to map
Median filter. Args: x (ndarray): The data to filter. m (int
Compute the Krnl gaussian distribution. Parameters ---------- m : int The number of
Compute the spherical harmonic similarity molecular distance. Args: x (:obj:`
Compute NC matrix. Parameters ---------- x : array_like G : array_like Returns
Apply a Gaussian filter to an array of data. Parameters ---------- x : array_like A
Computes the minimum and maximum NC of a sequence of points. Parameters ---------- x : list
Returns a circular shift of a matrix. Args: x (array): input array Returns:
Embedded space function Parameters ---------- X : array-like, shape = (n,n)
Plotting function. Parameters ---------- title : str Name of the plot. algo_ids
Plot all boundaries. Parameters ---------- all_boundaries : list of 2D arrays, one
Plot labels. Parameters ---------- all_labels : list of labels to plot. gt_times
Return a list of feature segments that overlap the feature boundaries. :param bound_idxs:
Given a list of feat_segments, return a 2-D numpy array of
Fit the model to data. Parameters ---------- X : array-like, shape = (n
Reads the reference information from the Jam file. :param audio_path: path to
Find estimation in Jam. Args: jam (jam.Jam):
Returns a list of all supported boundary algorithms. :returns: list of algo_ids.
Get the configuration for a particular feature. :param feature: The feature :param annot_
Return a list of FileStruct instances for each audio file in the dataset.
Read the hier references from a Jams file. Args: jams_
Get the duration of the features file :param features_file: File name of the features
Write mirex times and labels to mirex file.
Return the path to a dataset file.
Aligns a song's segmentation with a song's segmentation.
Estimate the time and number of beats in each track. :rtype: tuple.
Read beat information from annotation file Args: self.file_struct (:class:`jam
Compute beatsync features and beatsync times from beat frames and beat times.
Returns a list of the names of the parameters that should be included in the request.
Compute the time-series of the framesync features.
Returns a list of time times for each of the framesync features in this feature.
Returns a list of features for the audio file. :rtype: list of features.
Check that the feature_str is in `valid_features` :param valid_features
Removes empty empty segments from the est_idxs and est_labels. Parameters ---------- est_
Entry point for the command-line tool.
Print the mean of the results. :param results: list of results :type results:
Compute information gain from ann_inter and est_inter Parameters ---------- ann_inter :
Process a single track file_struct and return a list of results. Parameters ---------- file_
Get the name of the results file. Args: boundaries_id (int): ID of
Compute all features for a given audio file struct.
Compute all features from a file or a set of dataset files :param in_path:
Compute the cost of a gaussian distribution.
Log-normalize a fraction of a number with respect to min_db.
Normalize a numpy array of numbers to the range [f, f+1, f+
Return a list of time frames for the given time duration. :param dur: the time
Remove empty segments. Args: times (:obj:`datetime.datetime`): :obj:`
Sonify audio using click times Parameters ----------- audio : numpy.ndarray Sonify
Synchronize labels with unfolded labels Args: new_bound_idxs (list):
Processes a single segmentation level and returns a list of est_times and est_labels.
Aligns the end hierarchies of two hierarchies. Args: hier1
Calculates the distance of a point to a point in the curve.
Estimates the k-means of the k-knee distribution Parameters ---------- th : int
Get clustered data. Parameters ---------- X : array_like labels : array_like labels
Run the k-means algorithm. Parameters ---------- x : array_like x : array_
Compute the BIC distribution. Args: d (ndarray): array of data to be
Returns the magnitude of a number of real and imaginary components.
Convert a json file to a list of bounds Parameters ---------- segments_json : str
Load bounds from a json file Parameters ---------- bounds_json : str The JSON file containing the
converts a segments_json file to a list of labels.
Load a json file and convert it to a list of beats Parameters ---------- beats_
Compute 2-D Fourier transform using 2-D Fourier Transform :param x:
Find the labels of a given rank. Parameters ---------- x : array-like A list of
Filter activation matrices. Parameters ---------- g : np.ndarray, np.ndarray R : array
Get the module containing the boundaries. :param boundaries_id: The ID of the boundaries
Return the module for the given labels_id. :type labels_id: str :
Perform hierarchical segmentation on the audio file. Parameters ---------- audio_file : file_like
Given a file_struct, computes the segmenter of the audio file. Parameters ---------- file
The main entry point for the translate command.
A context manager to set a task to be run in a separate thread :param translator:
Spool the given iterable to the given number of words. :param iterable: iterable
Send data from an input stream to a target stream. :param inputstream: input stream
Return the translation table for a given language. :param language: The language of the translation
Print the translation table for a language code. :param language: language code :type language
Remove nodes from the network. :param network: Network object :param rm_nodes:
Write a network to a Pandas file in HDF5 format. Args: network (:class:`
Create a network object from a pandas hdf5 file.
Process a node. This method takes a node and converts it to a dictionary of tags.
Make a query to the OSM database. :param query: The query to query :
Build a query string for a node :param lat_min: :param lng_min
Returns true if the value is a regular expression, false otherwise :param value: the value
Compare the value with the expectation. :param value: the value to compare :type value
Compare an expression with a given value. :param expr: The expression to compare :param
Trigger all methods on the response object. :param instance: the instance of the response
Returns the matcher with the given name or None if none was found. :param name:
Initialize a matcher with the given name and optional set of arguments :param name: Name of
Sets the body of the request.
Set the request body to a JSON-serializable string :param data: the data to
Set a key-value pair in the container. :param key: The key of the
Append a list of items to the target list. :param items: List of items to
Trigger an instance of a Request object with the given request attributes. Args: instance (Request
Set the request headers. :param headers: the headers to set :type headers: dict
Add a header present matcher for the given names. :param names: names of the headers
Set the headers that are present in the response. :param headers: the list of headers
Add a list of parameters to the URL.
Set the body of the request :param body: the body of the request :type body
Sets the request's JSON value. :param json: the JSON value :type json:
Sets the request XML content. :param xml: the XML content of the request.
Reads a file from disk and writes it to the request body. :param path: The
Set the persist status of the transaction. :param status: the status of the transaction
Set the error of this exception :param error: the error to be raised :type error
Return a response object with the given status. :param status: the status of the response
Matches a request with this mock.
Set the mock engine to use. :param engine: the mock engine to use :type
Add a new mock to the engine. :param str url: The URL of the mock
Removes a mock from the list of mocks. :param mock: The mock to remove :
Activate the engine. If the engine is already active, the engine will be re-activated
Disables the mock engine.
Check if the request should use the networking.
Given a request, return the first mock that matches the request, or raise a pook
Return a copy of this request.
Context manager to enable or disable the engine. :param network: If True, activate the
Add one or more interceptors to the interceptor chain :param interceptors: :type interceptors: list
Removes the interceptor with the given name. :param name: interceptor name :type name:
Get a setting from the settings dictionary. :param connection: :param key: The key
Get the SQL to decrypt the column's data. :param compiler: :param connection:
Add the original value to the model_instance before saving. :param model_instance:
Return the SQL placeholder used to encrypt the given value. :param value: The value to
Returns a decrypted column instance for this field. :param alias: :param output_field
Gets the placeholder value for this field. :param value: :param compiler: :return
Base function for the regression. Parameters ---------- q : array_like, shape=None.
Return the covariance matrix of the matrix.
Recurses through the tree of nonterminals and computes the variance of each branch.
Calculate averages for all non-terminals in the tree.
Return the explained variance of the nonterminals in the tree.
Calculate a linear regression of the current state of the model. Args: slope (float):
Set the number of traffics to be merged with the number of traffics to
Calculate the number of times each branch is present in the tree. :rtype: int
Calculate the cost of the merger at t_node at time t_node.
Attaches the merger cost to all clases in the tree.
Given a profile, return the normalized profile and its log. :param in_profile:
Sets the GTR value. :param value: the GTR value :type value:
Set the GTR instance to use. :param in_gtr: GTR instance
Set the length of the sequence in bytes. :param int l: length of the sequence
Attach sequences to all terminals of the GTR tree. :rtype: list.
Prepare the tree to be reconstructed into the current state.
Prepare the nodes of the tree, updating the root and the bad branches. :rtype
Calculate the distance between the root node and the root node of the tree.
Compute the mutation matrix for the branch profile. :param node: The branch profile :param
Expands the sequence of the given node into a reduced sequence of the same length.
Return the fitching state of a node at a given position. :param node:
Returns the left hand hand corner of the sequence at position `pos` if `full_
Compute and return the log-likelihood of ancestral of the GTR tree.
Convert branch length to GTR. :param node: :param min_branch_length
Return the optimal length of the branch of a node.
Return the reconstructed alignment as a ``MultiPySequenceSequence`` object. :rtype
Calculate the Q-matrix for each element of the matrix Parameters ---------- W : array-like
Create a new GTR with a custom distribution Parameters ---------- mu : float Latent variable (
Fixes the q matrix so that it contains only one element of the diagonal matrix.
Optimize a sequence pair of sequences to a sequence pair of sequences. :param seq_
Returns the probability of the given profile pair at time `t` :param profile_pair
r"""Evolve the profile matrix at time t. Parameters ---------- profile : array_like
Return the log-likelihood of a sequence.
Set the branch_length_mode, based on the branch_length_mode parameter.
Plot the root to the tip of the model.
prints the left-heterozygosity of the sequence, marginal and coal
Add a coalescent model to the tree.
Find the best root node in the tree :param covariation: if True, this will
Assure that a tree is a valid input file Parameters ---------- params : dict Parameters ---------- params
Create a GTR model. Args: params (Params): A GTR model Parameters:
Reads a VCF file, if it's not already in a VCF file Parameters ---------- params :
Calculates the FWHM value of the distribution Parameters ---------- distribution : `fermipy.
Creates a delta-function distribution. Args: x_pos (int): The position of
Assign a date constraint to each node in the tree. :returns: None :rtype
Sets up the treeregression function to use for the treeregression algorithm.
Create a time tree for the model. :param bool time_marginal: True or
The log-likelihood of the timetree :rtype: int. :rtype:
Convert dates to human-readable format.
Calculate date uncertainty due to rate for a given node Parameters ---------- node : np.ndarray
Calculate the minimum value of an interpolation object Parameters ---------- interp_object : interp_
Calculate the median interpolation of a grid. Parameters ---------- interp_object : np.ndarray The
Return the number of days since January 1st. :param dt: The datetime to
Creates a ClockDetector object from a clock_model. :param clock_model: a
Closes the connection to the broker. :returns: None :rtype: None :ra
Receive a line of text from the client.
Send data to the server. :param data: data to send :type data: str
Sends an instruction to the device. :param instruction: the instruction to send :type instruction
Convert unicode string to utf-8 string :param unicode_str: unicode string :type
Load instruction into a Term object. :param instruction: instruction to load :type instruction:
Encode an argument to be used as an argument for a command. :param arg: The
Encode this instruction into a byte string.
Return the URL for the class. :rtype: str :rtype: str.
Return the URL for the instance of this resource.
Return a string representation of the given class.
Download the file to the given path. :param path: Path to the file to download
Return the parent object of this job.
Ask for username, email and password.
Login to solvebio using interactive mode :returns: None :rtype: None :ra
Who is the user who is who who is the owner of the current user.
Print a user's information. Args: user (dict): The user data :type user
Filter genomes within a given range. :param chromosome: chromosome to filter :type chromosome
Set the chromosome and position of the genomic sequence :param chromosome: chromosome name of the
Return a list of facets for the current query.
Convert a list of filters into a list of filters. :param filters: List of filters
Returns the next item in the buffer.
Execute the query and return the result. :param offset: the offset of the query :
Run the migration. :param target: Target to migrate :type target: :class:`
Parse the command line arguments and pass them to the ``solvebio`` function.
Construct an instance of the class from the given values. :param values: :return:.
Logout from OAuth 2.0.0.0. :returns: HTTP response.
Return the child object of this task.
Parse SNPPEFF information. :param info: info dict :type info: dict
Returns the first credentials found in the netrc file or None if not found.
Save the configuration to a file. :param path: Path to the file :type path
Format a value to a string. :param val: The value to format :type val
Builds a row from a list of cells. Args: cells (list): List of
Build a single line from a list of colwidths. :param colwidths: list of
Return the attributes of a mediawiki cell. :param row: :param colaligns
Create a migration between this dataset and a target dataset. :param target: the target
Upload a file or a folder to a vault :param args: :type args: dict
Validate a full_path and return a tuple of full_path and path_parts.
Validate the API host URL. :param url: URL to validate :type url: str
Annotate a list of records with the annotation of each one. :param records: list of
Evaluate the expression with the given data :param data: The data to evaluate :type data
Set the name of the format to use. :param format_name: Format name to
Register a new format handler. :param format_name: Format name :param handler:
Table adapter. :param data: :param headers: :param table_format: :
Return the path to the user-specified configuration file.
Return a list of system configuration files.
Return a list of files that should be included in the output file.
Write the default config to the user config file. :param overwrite: overwrite the file.
Read config files. :param files: list of files to read :type files: list
Truncates a string to a maximum length. :param value: :param max_width
Replace all occurrences of `replace` in `s` with ``replace``.
Calls a sequence of commands in a subprocess.
Apply an option to a command. :param cmd: Command to apply :param option:
Initialize the options for the linting tool.
Run the branch. Return None. :rtype: None :rtype: None.
Run the clean_docs_cmd, html_docs_cmd, view_docs_
Convert a string representation of a table into a table of rows and columns. Args: data
Format a single row of data into a single string. :param headers: A list of
Helper function to wrap vertical_table to allow user-specified columns. :param data:
Convert a list of strings into a list of strings for display. :param data: list
Check if the type is a number type. :param type: the type of the key
Return True or False depending on the type of authentication. :param type: type of authentication
Checks if the given type is a binary type :param type: the type to check :
Generate a key for a template. :param template: The template to generate :type template
Generate a new keypair for a template. :param templatepub: The template to generate :
Find all objects in a template. :param template: The template to find objects :type
Insert an image to the QR Code. :param qr_img: The image to insert
Export a single panel of variants or chromosomes to a list of chromosomes.
Given a weekday, return the first day of the week.
Repeats the occurrence of the given day. :param day: The day to repeat
Repeats days between start and end. :param start: start date :param end
A helper function for biweekly.
Handle a single-chunk event :param event: A single-chunk event :type event
Export the variants of a document. :param adapter: The adapter to export :param collab
Convert a list of variants into a list of strings that can be written to a MMT
Add or update the role of a user :param user_id: ID of a user
List variants of institute. :param institute_id: institute
Get sv variant data. :param institute_id: institute ID :
Retrieve information about a single variant :param institute_id: ID of the instance
Verify a variant. :param institute_id: ID of the instit
Export a clinvar. :param institute_id: ID of the
Return a list of cancer variants for institute_id and case_name.
Create a new acmg for a variant. :param institute_id:
Process an evaluation request :param evaluation_id: evaluation id :type evaluation_id:
Return the ACMG for the specified criteria.
Upload a file to a HGNC panel. :param institute_id:
Download the verified file for the current user's email address :returns: None :rtype
Given a list of HGNC gene IDs, return a dictionary mapping HGNC
Add `incomplete_pentr_id` to `genes` based on `hpo
Send a request to the Matchmaker API. :param url: URL of the request :
Return a list of nodes for a given token :param mme_base_url:
Get the coordinates of the cytoband at the given chrom and pos.
Get the sub-category for a given category and ref_len Parameters ---------- alt_len
Get the length of a file, given the length of the file, the length of the
Get the end position of the BND sequence.
Parse coordinates of a single variant.
Update the panel. :param panel_id: ID of the panel :type panel_
Export a panel as a PDF. :param panel_id: id of the panel
Edit a gene panel. :param panel_id: ID of the panel :param h
Load a delivery report from a case.
Return list of HPO terms in a query string Args: store (pandas.DataFrame):
Display a list of user names to be whitelisted in the user's list of user names.
Given a phenotype ID, return a dict representing the phenotype. :param phenotype_id:
Given a HGNC ID, return a dictionary of gene IDs. :param store:
Convert a list of genes to a list of json terms :param store: the HGN
List institute institute_id, institute_id, panel_
List of transcripts for a build.
Return a list of day events for a given month. :param year: :param month
Return a dictionary of variants for a single sv. Parameters ---------- store : `openquake
Retrieve variants for a case. :param store: :param institute_obj:
Retrieve information about a variant. :param store: the store object :param institute
Returns the CSV header for variants export. :param case_obj: :return:.
Return a dictionary of predictions for each gene. Args: genes (list): A list of
Given a BAM file, find a BAI file.
Generate a dictionary of variant observations for a variant in a variant_obj :param store:
Parse a Gene object to get a list of transcripts and refseq transcripts.
Return a string representation of a transcript. :param transcript_obj: transcript object :param
Return the position of the end of the variant.
Returns the most common frequency of a variant.
Generate a human-readable representation of each clinsig.
Return thousandg link for variant. :param variant_obj: Variant object :
Generate a URL to link to a cosmic variant.
Returns a link to the beacon for a variant object :param variant_obj: Variant object
Generate a URL to link to a Variant object. :param variant_obj: Variant object
Return a human readable representation of a variant.
Return a list of expected inheritance for each gene in a variant object Args: variant_obj
Returns a list of calls for the given category. :param variant_obj: Variant object
Return a list of variants for a given institute and case.
Export CLINVAR into a dictionary of information about a clinute and a variant.
Get clinvars for a particular submission.
Generate ACMG criteria for a variant in an institute case.
Add a variant to an institute case, and return a list of evaluations.
Convert the evaluation object to a dictionary of attributes. :param store: the store :type
Upload HGNC symbols to institute_id. :param institute_
Export verified variants to an Excel file. :param store: :param institute_
Export a list of gene objects from the given adapter. :param adapter: the adapter to
Parse clnsig signatures. Args: acc (int): The account of clnsig
Parse compounds. Args: compound_info (String): compound_info (string):
List all genes for a given build. :param build: :param json: :param
Get case details by institute id and case name :param institute_id
List available collections.
Institute a user or list of recipients. :param internal_id: User ID or
Return a file handle for a given file path.
Get the net of a request. :param req: A request object :type req:
Get the next and previous number of the network. :param net: number of network to
Check that the year is in the range of the current year and month. :param year
Check if a given date is a valid weekday.
Parse the list of individuals from a list of samples. :param samples: list of
Parse a PED stream and return a tuple of family_id and list of samples.
Build an evaluation object for a variant.
Given a list of acmg terms, determine if the acmg is likely to
Find variants in a case :param case_id: :param query: :param
Get all sanger variants for a particular institute and case :param institute
Get a single variant for a given document. :param gene_panels: list of
Returns a collection of variants that match the query. :param query: the query to
Given an institute_id, return a list of validated variants.
Returns a list of causatives for a case. :param institute_id
Check if institute's causatives are present in institute_caus
Return a generator of variants that are not in the same case as this variant.
Delete variants of a case. :param case_id: case ID :param variant_
Returns a list of variants that overlap with the given variant. :param variant_obj:
Return a list of all variants in a case. :param case_id: case id
Returns a list of variants for a given sample.
Get a connection to the database. :param str host: :param int port: :
Given a list of variant ids, and a dict of form fields, return a list of
Given a list of clinvar objects, return a dict of clinvar
Given a list of submission objects, return a list of lines that can be used to
Loads a panel from the database.
Build an exon object from exon info.
Delete a panel. Args: panel_id (str): ID of the panel to delete
Remove all indexes from the database.
Delete a user from the database. :param mail: The email address to delete :type
Delete genes from the database. :param build: The build flag :type build: bool
Drop all exons for a build.
Delete a case. Args: case_id (int): ID of the case to delete
List all individuals for institute and causatives. Args: institute (
List cases. Args: institute (str): institute name of the case
Load a user from a user email address :param user_email: email address of the
Perform a login with the given email address. :param str user_email: Email address
Build institute object. :param internal_id: internal id :param display_
Delete an event :param event_id: ID of the event to delete :type event
Get events for institute :param institute: institute :type inst
Get a list of events for a user. :param user_obj: :return
Remove a phenotype from a case :param institute: The institute :type
Given a variant and a list of individuals, return a list of genotypes.
Check if the coordinates are in the correct range of chromosomal coordinates.
hpo_terms endpoint. :param str search_term: :param int limit:
Print all transcripts for a build.
Load the list of exons for a build from the ensembl_exons database
Load a region of chromosomes from a HGNC case.
Get all events that occur on a given month. :param year: :param month:
Get all instances that are live at a given time.
Parse install requirements from requirements.txt file :param req_path: path to requirements file
Return the gene object for an existing panel. Return None :rtype: None.
Update a gene panel. :param store: :param panel_name: name of
Create a new institute panel :param store: the store instance :param instit
Export a panel as a JSON-RPC response. :param panel_obj: :return
Return archive information. Args: database: Database object archive_info: archive case Returns:
Migrate a scout case to a scout archive.
Get HPO terms. :param term: HPO term :param description: HPO
Configure extensions with the given app :param app: the Flask application :type app: Flask
Register blueprints. :param app: Flask Flask app :type app: Flask Flask Flask
List aliases for a build. :param build: build id or symbol :type build:
Build a panel object from a panel info dict Args: panel_info (dict): panel
Export the verified variants for the collaborator. Args: collaborator (str): Collab
List variants in a document.
Generate a VCF entry string from a variant object. :param variant_obj: variant object
Serve a mongo server. :param config: :param host: :param port: :
Generates a md5 hash of a list of strings Args: list_of_arguments (
Initialize the database connection with the given `app` :param app: the `app`
Set the attributes of the HGNOSType object. :param database: Database object
Update or load all indexes in the database.
Set up the Scout database with the given user_name and user_mail.
Sets up the demo module.
Set up the context. :param context: the context to setup :param institute
List institutes. Args: institute_id (str): institute
Parse genetic models from a models_info string Args: models_info (str):
List panels of institute. :param institute: institute id
Add an institute object to the database. :param institute_obj:
Get institute by ID :param institute_id: institute id
Match date. :param date: date to match :type date: str :param date
Get a date object from a date string. :param date: The date to parse :
Print a list of HPO gene IDs for each term in the term list.
Parse the rank score from the rank score entry. :param rank_score_entry:
Add a user to the database. :param institute_id: list of inst
Check if a Mongos connection is established. :param str host: :param int
Load a delivery report into the report_path. :param report_path: path to
Add a new user to the database :param user_obj: User object to add :
Generate a pileup file from BAMs and BAI files.
Load a list of exons from an Ensembl request or a list of exons
Update the compounds of a case.
Add links to the HGNC gene and add them to the gene_obj.
Show genes in HGNC format for a given build. Args: hgnc_
Parse HGNC gene lines. Args: lines (list): A list of lines in
Get the clinvar submission for a given institute. :param user_id
Update a clinvar submission by id :param clinvar_id: clin
Returns clinvar_subm_id for given submission id :param submission_id
Add one or more submission objects to the database. :param submission_id: ID of
Update the status of a specific submission :param user_id: the id of the
Get a list of submissions for a given user and institute id.
Delete a clinvar object :param object_id: clinvar object ID :
Return a dict of clinvars for a case. :param case_id: case
Parse a list of lines from HPO into a list of dictionaries.
Return a list of genes for the HGNC. :param gene_id: gene
Get a list of genes for a given hgnc_id or hgnc_
Return a list of genes for a given gene query Args: query (string): gene
Get institute object and case object if case_name is None, return case object
Return a list of institute IDs for the login_user.
Get the HGNC gene ID from the gene info. :param gene_info:
Update an existing panel. :param str panel: Name of the panel to update :param
Load disease terms from mim files. Args: api_key (string): API key
Load the disease terms from the hpo diseases file :param genemap_
Parse the frequency of the variant. :param Variant variant: the variant to parse :type
Parse SV frequencies from variant.info file Args: variant (str): Variant object Returns:
List all users. :returns: list of users :rtype: list.
Returns a set of genes that are not in the panel that are in the panel.
Update mim version. :returns: None :rtype: None :rtype:
Add a gene panel to the database :param panel_obj: the panel to add
Get a panel by id :param panel_id: id of the panel to retrieve :
Delete a panel. :param panel_obj: Panel object :type panel_obj:
Return a gene panel with the given panel id and version. :param panel_id:
Returns a list of all panels for a given panel_id and institute_id
Convert a list of panels to a list of panel names. :param case_obj:
Update a panel. :param panel_obj: :param version: :param date_
Add a pending action to a panel. :param panel_obj: :param hgn
Return a list of clinical symbols for a case. :param case_obj:
Get a list of case objects from the server. :param str case_id: case
Emits a record to the SMTP server.
Load indexes into the database.
Update the indexes of the collection.
Drops all indexes in the indexes list.
Builds a mongo query for a variant. :param query: :param category: :param
Create a clinsig query from the query :param query: The query :param
Apply coordinate filter to the query :param query: :param mongo_query: :return
Filter the query to only the gene fields that are present in the mongo query :param query
Wipe the database.
Parse a list of genes into a list of panel genes. :param csv_stream:
Load a list of gene objects into the HGNC database. :param gene_objs
Load a list of Transcript objects into the database :param transcript_objs: list
Load a list of exon objects into the database.
Get a gene object from the HGNC database :param hgnc_identifier:
Return the HGNC ID for the given symbol and build. :param hgnc
Get a list of genes for a given HGNC symbol :param hgnc_
Return a list of all the genes for a given build. :param build: the build
Return the number of genes for a given build.
Drop all genes of a given build. :param build: build id :rtype:
Drop all transcripts associated with a build or all transcripts associated with a build.
Drop all Exons for a given build.
Get all ensembl transcripts for a given build. :param build: build id
Convert a HGNC symbol to a GeneSymbol object :param build: build name
Get gene by alias :param symbol: symbol name of the gene :param build: build
Return a list of genes that have an alias of their HGNC ID.
Return a list of ensembl gene ids for a given build.
Convert gene list to a HGNC gene name :param hgnc_alias:
Add a hgnc ID to each gene.
Return a list of coding intervals for the genes in the given build.
Load an object from the OmniMim panel. :param api_key:
Get a list of cases for a given institute. :param institute_
Get the institute and case details. :param institute_id: inst
Matchmaker match. :param institute_id: :param case_name:
Matchmaker match. :param institute_id: :param case_name:
Delete an institute from matchmaker. :param institute_id: :
Generate a PDF report for a case. :param institute_id: instit
Diagnose an institute in a case. :param institute_id
Update or archive the status of the institute case :param institute_id
Assign an institute to a case. :param institute_id: inst
Return a list of terms for a given query. :param query: the query :type
Mark a variant as validation for the institute. :param institute_id
Mark a variant as causative :param institute_id: institute
Get the delivery report of a given institute. :param institute_id
Share an institute with a case.
Rerun a case. :param institute_id: :param case_name
Research an institute. :param institute_id: institute
converts vcf to cytosure.
Execute multiqc command. :param institute_id: Institution ID :param
Returns a list of cases in case_query.limit is the maximum number of cases
Return a list of clinvar submissions for the user with the given institute id
Export Mt variants to an Excel file :param store: Mt Store object :param
Given a list of HPO ids, return a list of diseases.
Given a vcf, return a tuple with the name and name of the vcf.
Get a dictionary of institute and case objects for a single institute.
Return a list of unevaluated variants for the user in the sanger.
Delete a case from the MME server. :param case_obj: :return:.
Return a list of matches for a case. :param case_obj: :param inst
Perform a match using the matchmaker API. :param str case_obj: the case
Download HGNC and HGNC genes for a given build.
Parse callers info from variant info. Returns a dict of caller names to call names.
Build a Transcript object from the transcript info. :param transcript_info: a dict
Load the institute object for the internal_id and display_name.
Parse the cadd value from the variant info. :param variant: Variant object :type
Create a case object from a case config file.
Update a variant. :param variant_obj: Variant object :type variant_obj:
Update the rank of variants in a case. Parameters ---------- case_obj : dict Case
Update variant compounds. :param variant: Variant to update :param variant_objs:
Update variant compounds for a set of variants Args: variants (list): List of variants
Update all compound variants in MongoDB :param bulk: list of variants to update :rtype
Load a variant into the database :param variant_obj: Variant object :type variant_
upserts a variant into the database :type variant_obj: dict :param variant
Load a set of variants into the database.
Assign a user to a case. :param institute: :param link: :
Share a user with a case :param institute: The institute of the
Issue a diagnose event. :param institute: The institute of
Mark a case as checked :param institute: :param case: :param
Perform order verification on a single variant :param str institute: The institute
Get sanger ordered by institute_id or user_id.
Validate a variant. :param str institute: :param str case: :param
Mark a variant as causative.
Dismiss a variant. :param institute: :param case: :param
Update the acmg attribute of a single variant :param acmg_str:
Return a dict of ids for a single variant.
Return a simple ID for the given reference and altitude. :param chrom: chrom of the
Generate a unique identifier for a document. :param chrom: :param pos: :param
Convert a list of genes to a list of HGNC gene IDs.
Return variant ID from variant object Args: variant_obj (dict): Variant object Returns:
Returns the number of cases that belong to the institute_id :param instit
Update a case's dynamic gene list :param str hgnc_symbols: list of
Get a case. :param case_id: :param institute_id:
Delete a case :param case_id: case ID :param institute_id
Add a case to the case collection :param case_obj: the case to add :
Replace a case with a new one. :param case_obj: the case to replace
Update the case ID of a case. Args: case_obj (dict): The case
Submits an evaluation for a particular variant.
Get the list of evaluations for a given variant. :param variant_obj: Variant
Parse a list of transcripts from Ensembl into a dict of transcripts.
Parse the response from the Ensembl GeneRequest request.
Parse an ensembl transcript request.
Parse ensembl genes from a list of lines. :param lines: list of lines
Parse a list of lines from an Ensembl output file.
Parse the response from the ensembl-exon request.
Initialize a logger with a file handler or a formatter and log level. :param logger:
Given a genemap file, return a dictionary of the phenotype names as keys and the
Executor for `globus mim` command. Args: morbid (str):
Converts a string to a number. :param string: the string to convert :type string
Format a month. :param theyear: Month of year :param themonth: Month
Set the URL for the given day. :param day: Day of the month :type
Format the month name. :param themear: :param themonth: :return:.
Generate popover data for the event.
Extract panel info from a list of panel lines. :param panel_lines: list of
Parse the gene panel file :param str path: :param str institute:
List all diseases. :returns: List of diseases :rtype:
Load all HPO terms from the database.
Return a list of users and their events in the store. :param store: the store
Parse the conservations of a variant into a dictionary.
Parses the conservation of a variant. Parameters ---------- variant : Variant object The variant to
Get the general case information. :param institute_id: the institute
Returns a list of groups of cases for a given institute_id or slice_
Render the given context to a JSON response. :param context: :param kwargs: :
Return the year and month for the current request.
Check for cancelled events :param d: The date of the event to check :type d
Get the HPO term associated with the given id :param str hpo_id:
Search for HPE terms :param query: search term :param hpo_term:
Get a disease term by its identifier :param disease_identifier: the disease
Return a list of disease terms for a given HGNC ID.
Load a disease term object into the database :param disease_obj: dict with
Given a list of terms, generate a list of gene IDs for each term.
Read data from an HDF5 file :param filename: file name :param f_start
Set up the time axis Parameters ---------- t_start : float Time axis t_stop :
Compute the last position of the molecule.
Set the channel to the median of the channels of a coarse channel. :param n
Calculates the extent of the plot. Parameters ---------- plot_f : list or tuple of
Plot waterfall. Parameters ---------- f_start : list or tuple or list of
Plot the time series of the simulation Parameters ---------- f_start : `datetime.datetime`
Write the signal to the filterbank file Parameters ---------- filename_out : str Filename of the
Calibrate the band pass of the image.
Convert data to coarse format Parameters ---------- data : array_like chan_per_
Return the number of stokes in the stokes file. :param str str
Write a list of polfils to a file.
Return the index of the element closest to a given value :param xarr: array of
Rebin a numpy array into n_x and n_y dimensions Parameters ---------- d :
Unpack a byte array into an array of bytes. :param data: The data to unpack
Get the diff between the stokes and the stokes of the stokes
Plot calibrated diode. Parameters ---------- dio_cross : numpy.ndarray
Calculate the selection size based on the current time and channels. :rtype: int.
Calculate the shape of the selection Parameters ---------- n_int : int The number of
Set the start and stop values based on the start and stop values of the channel.
Populate the list of timestamps with the values in self.t_start, self.t
Calculate the number of channels to use for a coarse channel calculation Parameters ---------- chan_b
Calculate the number of blobs in the dataset.
Checks if the data array is heavy. :returns: True if the data array is
Read all data from the file and return them as a numpy array.
Read a single row of data from the file.
Reads data from the container :param f_start: file start :param t_start
Update the header with the data from the container :returns: None :rtype: None
Print basic information about the input file.
Write the container to a file Args: filename_out (str): The name of the
Write the container to an HDF5 file Args: filename_out (str): Name of
Write the image to an HDF5 light dataset :param filename_out: path to the
Calculate the dimensions of the blob dimension for the given chunk dimension. :param chunk_dim
Get the dimensions of each chunk in the file Parameters ---------- chunk_dim : (int,
Grab data from the plotter Parameters ---------- f_start, f_stop, t
Run guppi-raw tool.
Reads the first header of the file.
Finds the number of data blocks in the file. Returns the number of data blocks found.
Print the statistics of the data in the next data block :returns: None :rtype
Plots a histogram of the next block of data. Args: filename (str): name of
Generate a filterbank header. :param nchans: number of chans :type
Find the size of the header of a file. Args: filename (str): the
Integrate the frequency domain of each channel in a waterfall dataset. Parameters ---------- name :
Calculate the center frequency Parameters ---------- frequencies : array-like chan_per_coarse :
Calculates the F-ratios. Parameters ---------- calon_obs : `numpy.ndarray
Calculate the TSys of the diode. Parameters ---------- calon_obs : list of
Return the length of the header in a file.
Check if the file is a filterbank file :param filename: The file to check :
Generates a header string for the signature processor :param f: signature processor :type f:
Return the number of ints in a file.
Return a dict representation of the traceback.
Add a sub-command-line argument parser to `subparsers` to process records.
Creates a command line parser for the zonefileeline command. :rtype: str.
Remove comments from the given text.
Add a default record name to the given text. :param text: The text to add
Parse a list of lines of text into a dict of zone data.
Parse a zone file into a list of lines.
Returns a copy of the data with the given field converted to a quoted string.
Parse a JSON schema string into a Schema object :param schema_string: schema string Return
Convert a list of classes to a python package.
Serialize a record to a JSON-compatible format. :param record: the record to serialize
Load a JSON record from a dictionary of dictionaries. :param dict dct: dict of dictionaries
Deserialize a JSON string into a record_class instance. :param s: the string to
Add a schema to the schema map.
Return the schema for the record name. :param record_name: name of the record
Return a dict representation of this field.
Get the schema dict for a record.
Get the schema dictionary for a record. :param record: The record :type record:
Read lines from input_stream as JSON objects. :param job: Job object :param
Write multiple outputs to a single output stream :param job: Job object :param outputs:
Add a key-value pair to the front of a dict, returning a new dict.
Queries the search query string for this search. :param params: the query string :type
Get the raw results of this search. :param filters: a list of filters to
Return a list of entities with the specified attributes. :param attributes: attributes to include :
Parse the href of the entity to create a new collection. :param result: the result
Given a single quote, return the one that is not already in the quotes list.
Escape a string so that it can be used as a filter. :param o: The
Create an elementary rotation matrix for the given axis and rotation angle.
Compute the v-acceleration error for a given spt.
Calculate the parallax error from the GMAG and minimum minimum error.
Calculate the magnitude error of a Gaussian distribution. Parameters ---------- G : array-like Returns -------
Return the magnitude error of G at a given number of obs. Parameters ---------- g :
Compute the average number of transits for a given beta distribution. Parameters ---------- beta : float
Returns the angle of the angle between two points. :param phi1: :param theta
Rotates x,y,z coordinates using the rotation matrix. :param x: x
Transform the sky coordinates. :param phi: Vector of the sky coordinates :param theta:
Transform the covariance matrix using the Jacobian given by phi,theta and the covariance matrix
Returns the error scaling factor for the given observable and beta.
Unquote a value so that it can be used as a value in a SQL query.
Apply a list of functions to each element of the collection :param funcs: A list of
Return a copy of this list with elements that do not pass a truth test.
Filter the items in the collection using a predicate. :param func: The predicate to filter
Returns a new collection with elements that satisfy a condition that evaluates to true.
Return a new collection with items removed while applying a function to each element in the collection.
Return a new collection where the elements in the collection are the elements of the others collection.
Find the first node matching the given criteria.
Get the path to the serach directory.
Given a list of events, build a list of all runs that need to be run.
Print out a report of the results to the output file. :param output_file:
Print out the results of the evaluation of the LCE to the given output_file.
Clean up the given code. :param code: code to be cleaned :param comments:
Round a number to the next base. :param x: number to round to :type
Given a list of indices, return a list of block indices that overlap the boundary of the
Calculate cache access based on predictor results :returns: None :rtype: None :
Calculate cache access and total cycles. :returns: dict of results :rtype: dict
Strip and uncomment each line of a list of Assembly lines. :param asm
Strip unreferenced labels from a list of Assembly lines Args: asm_lines (:obj
Given a list of blocks, select the best block. :param list blocks: list of
Ask the user for an integer increment.
Insert a marker at the start and end line of a asm file. :param asm_
Generator that yields the specified number of numbers between the start and stop integers. :param start
Return the last modified datetime of the files in the directory. :param dir_path:
Check the arguments passed to the command line. :param args: the command line arguments :
The main entry point of the command line interface.
Main entry point for ``update`` command.
Symbol position and int. :param args: :param kwargs: :return:.
Transform a multidimensional array declaration to a 1D declaration.
Convert multidimensional array references to 1D references. :param aref: A
Recursively find all nodes of node_type in the AST.
Check that the model contains at least one variable. :rtype: str :rtype
Set the value of a constant. :param name: the name of the constant :param
Substitute all constants in `expr` to `self.constants`. :param expr:
Return the variable size for each variable in self.variables :param in_bytes: True
Calculate the offset of a variable relative to the base dimensions. :param name: the variable
Remove any duplicate accesses from destinations and sources.
The total length of the iteration of the loop stack. Parameters ---------- dimension : int, optional
Get the loop stack and return a generator of tuples. :param subs_consts:
Return list of free_symbols for all sources and destinations. :param sources: list of
Return a list of accesses for each variable in self.sympy_accesses
Compile relative distances of variables in a list of sympy_accesses Parameters ---------- sympy
Convert a global iterator to a base iterator for each variable in the loop stack.
Return the global iterator of the loop.
Return the global iterator with the given indices. :param indices: indices of the global iterator
Get the maximum iteration of the global iteration of the loop stack Args: self (:class:`
Print information about the kernel. :param output_file: file-like object.
Print the variables and their info to the output file Args: output_file (str):
Print constants info. Args: output_file (file-like): File-like object
Print the kernel code to output_file.
Convert a `math_ast` to a `sympy.Symbol` representation.
Get the offsets of the given arrayref or subscript of the given arrayref Parameters ---------- are
Get the basename of an array reference.
Return the index type of the first statement in the loop nest Parameters ---------- loop_nest :
Build a list of declaration nodes for constants.
Return the array declarations of the kernel.
Return a list of loop-nest nodes from the kernel AST.
Build the list of declarations for the array and return them as a 2-tuple of (
Recursively find the most inner most loop in the loop_nest :param loop_nest:
Build array initializations. :param array_dimensions: array dimensions of the array :type
Build a dummy function call that will be used when the kernel is not defined in the kernel
Build an ast.FunctionDeclaration node representing a kernel function.
Build scalar declarations from the kernel block Args: with_init (bool): if True,
Get the kernel code for the current machine Parameters ---------- openmp: boolean, if True,
Build an ast.funcCall node with the given name. :param name: Name of
Get the main code of the kernel. Args: as_filename (bool): If True
Perform the iaca analysis on the assembly.
Return the SHA256 hash of the file contents. :rtype: str :rtype
Get the last modified datetime of the file :rtype: datetime.datetime.
Get the compiler name and flags for the executable. :param compiler: The name of the
Parse a perfctr event into a tuple of parameters Parameters ---------- perfctr : str
Enforce no overlap between start_at and end_at in self.data.
Returns the path to the package header file. :rtype: str :rtype:
Aligns the iteration boundary with the C-boundary of the C-boundary.
Get the load factor for each cache level in the machine. :rtype: list.
Return a list of hit percentage for each cache level in the machine.
Return a list of misses for each cache level in the machine.
Return a list of all stores in the machine. :rtype: list.
Get the number of times a machine has been evicted. :rtype: list.
Get infos for each cache level. Parameters ---------- first_dim_factor : float Returns -------
Fix an environment variable to a certain value. :param name: the name of the
Add command line options to a command line argument group.
Parse the description of the package into a string.
Helper function to build the item to use for a purchases. :param course_
Record a purchase. :param sailthru_client: SailthruClient
Get the course content from Sailthru.
Get the content of a course from an ecommerce cluster. :param course_id:
Updates the list of unenrolled URLs. :param sailthru_client:
Send course refund email. :param str email: Email address of course refund :param int
Sends an offer assignment notification email. :param str user_email: The email address of
Attempts to retry the order if the number of retries is greater than max_fulfillment
Fulfill the order with the given email address :param order_number: The order
Get the sailthru client for the site code. :param site_code:
Retrieves the value associated with the given key. If the key is not in the cache,
Add an object to the cache. :param key: The key of the object :param
Get the value of a configuration variable.
Get the filename to override from the environment. :param variable: the variable to override :
Get a value from a dictionary by version. :param dict d: dictionary of values :
Returns the EPLA version of the EPLA module. :rtype: str
Populates the table with data from JSON data :param json_data: data to populate :
Returns a list of all external files in the database.
Set the default values for all rows in the schema.
Set the extensible_info attribute of the field descriptors :returns: None :r
Return a dictionary of short reference names as keys and a list of short reference names.
Returns the value of the given column. :param column_name_or_i:
Update the value of the field at the given index. :param index: the index of
Update the device with the given data :param data: data to update :type data:
Add one or more fields to the end of the field list. :param args: list
Remove the cycle at the given index from the end of the list. :param index:
Insert a value at a specific index. :param index: index of the field to insert
Remove the record from the table.
Register a record hook to be called when a new record is created. :param hook:
Register a link to this record.
Create a regular expression to match intent_name in line :param line: line to match
Returns the remaining time in seconds since the given time. :param time: Time in seconds
Return a dict suitable for JSON serialization. :rtype: dict. :rtype:
Make an HTTP request to the given URL.
Get a list of service endpoints for a service type Args: service_type (str):
Try to create a directory. :param directory: directory to create :type directory: str
Configure a service. :param str service: Name of the service :type service: str
Register CA status. :param status: The status of the CA status :type status:
Set the state of a recording.
Update the status of the event. :param event: The event to update :type event
Update the agent state. :rtype: str :raises: None :rtype
Return the path to a configuration file.
Update the configuration file with the given configuration file.
Check for errors. :rtype: None :raises: None :raises:
Initialize the logger. :returns: None :rtype: None :raises: None
Return a list of events for a particular service.
Serve an image from the preview directory. :param image_id: ID of the image
Run all modules in parallel.
Parse a VCALENDAR string and return a list of events. :param vcal:
Get the schedule of upcoming events.
The main loop for the service control.
The control loop for the agent.
Make a response with an error message. :param error: error message :param status:
Make a data response. :param data: the data :type data: list :param
Return the internal state of the service. :rtype: :class:`~jit
Return a list of upcoming events and recorded events. :rtype: list.
Get a recorde event by its unique ID. :param uid: the unique identifier
Delete an event. :param uid: the event id :param hard_delete: if
Modify an event. Args: uid (str): UID of the event to be modified.
Start a capture of the given upcoming event. :param upcoming_event: The
Render the html to a ``Fragment`` instance.
Return a list of all resources in this collection.
Returns a dictionary representation of the resource definition.
Create a new Fragment object from a dict. :param dict pods: a dict of
Add content to the end of the content list.
Set the function to call when the javascript function is called. :param js_func:
Converts the list of resources to HTML.
Converts the given resource to HTML. :param resource: resource to convert :type resource:
Handles GET requests. :param request: :param kwargs: :return:.
Render the given fragment to a standalone HTML response :param request: :param fragment:
Render the given fragment to a standalone HTML fragment.
Calculate p-values and q-values. Parameters ---------- pvalues : list of p-
Convert a list of values to a one-dimensional array of values.
Given a list of scores, return a list of p-value, p-ep,
Given a dataframe, return a new dataframe with only the rows in that table that overlap the
Summary error table. Parameters ---------- df : pandas.DataFrame DataFrame qvalues : list of
Compute error statistics. Parameters ---------- target_scores : list of target scores decoy_scores
Find the cutoff frequency for the scores. :param tt_scores: the scores :param
In-place version of ipf. Args: infile (file-like object): file
Infer peptide from a file to an output file.
Infer proteins from infile and save to outfile Args: infile (str): file to
Subsample infile to outfile with subsample_ratio. Args: infile (str): path
Reduce an input file to a output file. Args: infile (str): Input file outfile
Perform oswr backpropagation using oswr.
Get a group by its ID :param str group_id: group ID of the group
Creates a group. :param group: Group to create :type group: Group :r
Delete a group. Args: group_id (string): Group ID to delete.
Gets all members of a group. :param group_id: Group ID :type group
Update members of a group. :param group_id: The group ID :param members
Returns the effective member count for the group.
Checks if the group has an effective member. :param group_id: group ID :
Decrypts a secret key. :param key: the key to decrypt :type key:
Returns a file-like object that can be used to read from the stdin stream.
Return the stdout of the command.
Return a file-like object for the stderr of the process. :param os_path
Get the debug output of the command. :param os_path: path to the debug
A context manager that yields a subprocess.Popen.Popen instance of the subprocess.
Returns a context manager that yields the stdout of the process. :param os_path:
Context manager that yields stdout and stderr as a file-like object :param os_path
A context-manager for running a debug sub-command on the device. :param os
Writes an error message to the file. :param msg: error message :param file:
Prints the help message to the given file.
Print usage information to the command-line argument file.
Print the current version of the program.
Try to resolve an option from the configuration file. :param options: :param section_
Return a shallow copy of this context.
Writes the given headers to the given file-like object :param fp: file-like
Generates a temporary URL for the given method. :param method: :param url: :
Quote a value. :param value: The value to quote :type value: str :
Get a client from the queue or create a new one if it doesn't exist.
Decrypt data from stdin using AES-256CCBC. Args: key (string): The
Add an account to a user's account list. :param context: :param body:
Upload a container. Args: path (str): The path of the container to upload.
Return the body of a manifest request :param context: the request context :param prefix:
Create a container and return the prefix for the container. :param path: path of the
Print the trans_id to stdout. Args: context (trans_id): ID of
Check if stream is empty.
Encrypts the data using the provided key :param key: The key to encrypt :type
Get the status of a given commit.
Get information about a single pull request.
Return a list of all pull requests for the repository. Args: repo_config (dict
Set is_published flag to true for all titles in the model. :param orm:
Returns the list of SliderItems for the current request, optionally limited by `amount`
Render the Hero Slices for a given request. :param context: :return
Acquire the reader lock.
Decrements the number of readers in the pool.
Acquire the writer lock for writing. :returns: None :raises: None :r
Remove a task from the queue. :param task_id: task id :type task
Get a task from the queue. :param task_id: task id :type task
Return a list of tasks sorted by task_id.
Return a dictionary representation of the object. :rtype: dict :rtype: dict
Create a new instance of the class from a dictionary. :param config: A dictionary of
Initialize the archive manager :param archive_path: the path to the archive.
Create an index if it doesn't exist. :param idx_url: URL of
JSON encoder. :param args: :param kwargs: :return:.
Write a generator of items to a writer. :param writer: :param items_
Add a new task to the scheduler :param str task_id: The task_id
Remove a task from the scheduler. :param task_id: task id Return True if
Yield the items stored in the queue :returns: iterable of items :rtype:
Validate task arguments. :param task_id: Task ID to validate :param backend:
Parse archiving arguments and return a ArchivingTaskConfig object.
Publish the job to the pubsub_channel :param job: the job :type job:
Schedule a task for a job in a queue. :param queue_id: The
Cancel the job with the given task_id :param task_id: the task
Start the event loop :returns: None :rtype: None :raises: None
Listen for events on the pubsub channel and call the handler function on each of the results.
Schedule the scheduler to be run. :rtype: None. :rtype: None
Schedules a task to be executed in the scheduler :param task_id: the task
Cancel a job task. :param str task_id: task ID Return None.
Builds the job arguments to be passed to the job. :param task: the task to
Register the view to the router. :param view: The view to register :type view
If the current request is not a version, use the url_name to get the
Return the view name. :param str respect_name: Return the view name.
Return a version string for the given version.
Resolve the key to the value of the cursor. :param cursor: the cursor to resolve
Return the engine for the given scheme :param scheme: the scheme to use :type scheme
Parse a path into database name and schema name. :param path: Path to parse :
Parse a database URL and return a DatabaseInfo object.
Create a new user. :param request: Request object :type request: :class:`
Return a list of users. :param request: Request object :type request: Request :
Create a new password. :param request: request data :type request: Request :param
Build the URL field for this view. :param field_name: The name of the
Parse a boolean value. :param value: value to parse :type value: str :
Parse string representation of an integer into int. :param value: value to parse :type
Return a parser function for the given type.
Create a new model from the given fields and named_fields. :param model: the
Encode a string as a base64-encoded string.
Create a field from a field info. :param field_info: field info
Create a validator for the given data structure. :param data_struct_dict: A
Given a list of parameters, return a list of unique points.
Change the logging kwargs to use the default values in the logging dictionary. :param kwargs:
Try to create directories if they don't exist.
Given a list of strings, return a list of strings. Args: args: list of
Set the logger for this instance. :param str name: name of the logger :type
Extract environment variables, set name and run name from a TrainResult object.
Check the args of the command line parser and replace them with the values of rename_func
Writes the parser to a file-like object and returns it as a file-like object
Find the multiproc options in a parser. :param parser: the parser :type
Find a multiproc dictionary from a dict. :param dictionary: a dictionary :type
Parse the log config file and return a NointerPolationParser instance.
Convert log_config into a dictionary of log_files. :param log_config:
Create logging handlers and tools for the current process. Args: multiproc (bool):
Clean up the state of the tool and remove all handlers. :param remove_all_
Start the ``steam`` with a new ``stdout`` instance.
Writes the contents of the buffer to the log file.
Return True if two results are equal :param a: :param b: :return
Returns True if two parameters are equal. Parameters: a -- A parameter object b -- A
Decorator to set up getattr and setattr methods to prefix the names of the classes.
Add parameters to the given trajectories. Parameters ---------- trajectories : dict Traject
Run the network on the input dataset :param traj: input dataset :type traj
Euler similarity scheme :param traj: Trajectory object :param diff_func:
Add parameters to the trajectories function Parameters ---------- trajectories: Trajectories Tra
Calculate the diffusion of a value using the LORENGZ method Args: value_
Return a storage service object and a list of keyword arguments that can be passed to the
Create a storage service. :param str storage_service: Name of the storage service
Add parameters to the trajectories Parameters ---------- trajectories : `pandas.DataFrame`
Calculate the difference between a and b using the roessler's method Parameters ---------- value_
Return True if there are any explored parameters in the group.
Build model eqs from trajectories Parameters ---------- trajectories : list of tra
Check if the model needs to be built before building. :param traj: Trajectory
Build the model, if it's not already been built. :param traj: Tra
Build a single model from the given trajectories :param traj: Trajectories
Pre-build the trajectories if they are not already in the group.
Build the brian network. :param traj: traj object :param b
Add parameters to the trajectories Parameters ---------- traj : `fermipy.tr
Compute Fano factor. :param spike_res: Spike resource :param time_
Compute mean fano factor for a list of neuron_ids.
Compute the mean fano factor of the sub-runs.
Add monitor objects to the network.
Make print folder if it doesn't exist. :param traj: Trajectory object :
Plot the result of the training.
Print the graph of the spike monitor. :param traj: Trajectory object :param
Analyse a brian network.
Get the batch number from the command line. :returns: batch number :rtype:
Explore a batch of trajectories. Parameters ---------- traj : Trajectories
Get a reference to the vars associated with this node. :returns: a reference to the
Return the function that is used to call the node.
Rename the name. If full_name is not empty, the name is removed from the
Set the depth, branch, and run_branch attributes.
Return the message type of a node. :param store_load: :type store_
Delete a node from the state machine :param node: the node to delete :type node
Removes a node or leaf node from the tree.
Translate a shortcut name into a string and a wildcard.
Given a start node and a node name, determine what type of the node is.
Create a link to an instance. :param act_node: :param name: :
Check that split names are valid. :param split_names: :param parent_node
Set the details of a tree node. :param parent_node: :param name:
Iterating nodes. :param node: The node to iterate over :type node: `
Return an iterator over the children of the given node. :param node: the node to
Recursive traversal of a node, using breadth-first-search. :param node:
Search for a key and return the node and its depth. :param node: The node
Performs a backwards search of the name of the split. :param start_node:
Returns a list of NodeKID objects for this node. :rtype: list of
Add a group from the storage interface. :param args: :param kwargs: :return
Add a leaf to the topology. Args: args (list[str]): list of
Returns a list of the directory data for this node. :rtype: list.
Return a debug representation of the tree :rtype: :class:`OrderedDict``.
Return the parent node of the current node :rtype: `Element` :rtype
Remove a link from the network :param name: link name :type name: str :
Remove this node from its parent's ancestors. :param recursive: If True, remove all
Get the value of the attribute with the given name. :param name: name of the
Get children of this node. :param copy: Return children of this node :type copy
Return a list of groups. :param copy: If True, return a copy of
Return a copy of the list of leaves. Args: copy (bool): If True,
Returns a copy of the ``_links`` dictionary. :param copy: If True,
Store the current state of this group. Args: recursive (bool): If True, store
Add a result group to the network interface :param args: :param kwargs: :return
Add a derived parameter group to the model. :param args: :param kwargs: :
Add a derived parameter to the model. :param args: :param kwargs: :return
Function to add a config group to the Networking interface :param args: :param kwargs
Add a new config to an existing configuration group. :param args: :param kwargs:
Add commit variables to the trajectories file :param traj: Trajectories
Create a new git commit. :param environment: :param git_repository: git
Given a nested dictionary and a separator, return a flattened version of the nested_dict.
Nest a flat dictionary into a nested dictionary. :param flat_dict: a flat
Get the signature of a function and return its arguments and whether it uses a starstar.
Given a function and a dictionary of keyword arguments, return a dict of the keyword arguments
Given a timestamp, return a string representation of the timestamp. :param timestamp: The timestamp
Convert a port number to a TCP address. :param port: the port to connect to
Create all of the directories under the given path, creating them if they do not exist.
Resets the internal state of the interval.
Returns the remaining time in seconds for the given index. :param index: the index of
Returns a copy of the dictionary, or a copy of the dictionary if ``copy`` is
Remove an attribute. :param key: the key of the attribute :type key: str
Return a string representation of the F annotation.
Make an ordinary result for the given key and trajectory. :param result: the result
Make a result object that can be shared with another result object Parameters ---------- result : `pandas
Store access data for a request. :param request: :param args: :param kwargs
Get the current node's data. :rtype: dict :rtype: dict.
Returns True if the shared result supports the given item. :param item: The shared result
Creates a shared data object for the item with the given name :param name: The name
Manually store the current process name in the traj.results.f_store.
Locks a request. :param name: name of the lock :param client_id:
Send a "done" request to the server.
Terminates the context thread and closes the socket if it is still open. :rtype
Starts listening for connections to the socket. Args: test_connection (bool): if True
Send a request to the server and wait for a response :param request: The request
Acquire a lock on the lock server. :rtype: bool :rtype: bool
Listen for incoming requests and put them into the queue.
Put a message to the queue :param data: data to put :type data:
Detects the PID of the child process in which this process is forked.
Handle data messages. :param msg: :param args: :param kwargs: :return
Receive data from the storage service and process it :returns: None :rtype: None
Receives the data from the queue and returns it. :rtype: None.
Receives data from the connection.
Store the data into the database. :param args: The data to store :type args
Store a message in the reference map. :param msg: the message :param args:
Stores the references. :param references: A dictionary of references :type references: dict :
Collect options from a section. :param section: The section name :type section: str
Collect configuration parameters from config file. :rtype: dict :rtype: dict.
Interprets the command-line arguments and returns a dict of the command-line arguments
Add parameters and configuration to the given Trajectory object.
Plot a pattern to a file.
Returns the cellular automaton for a given number of steps. Parameters ---------- initial_state
Update the state of the node.
Return the overview group for this user. :rtype: str :rtype: str
Load a single item from an iterable of items. :param iterable: The items to load
Check the properties of the hdf5 dataset.
Stores multiple items in the message store. :param iterable: iterable of items to store :
This routine is called when we are done with a closing routine. This routine flushes the
Extracts the file information from the given kwargs. :param kwargs: :returns: None :
Create a backup of a trajectories.
Reads a single row from the table and returns it as a dictionary of column names to values
Prepare to merge a run with a new traj :param traj: Traj object
Check if version matches the current version of Python. :param version: Version string :param
Load exploration parameters from the overview table.
Store the explorations of the given traject. Parameters ---------- traj : :class
Store the trajectory in the HDF5 file :param Trajectory trajectory: Trajectory to store
Create a new instance of the leaf class. :param str name: Name of the leaf
Store nodes in a tree. :param parent_traj_node: TrajectoryNode node
Store a parameter or result table entry. :param instance: the instance to store :param
Get or create a table if it does not exist :param str where: The name of
Get the node with the given name from the trajectory file. :param name: Trajectory
Insert values from insert_dict into row. :param row: :param insert_dict
Cut a string to max_length if it is longer than max_length.
Create a group if it doesn't exist. :param name: name of the group :
Recursively create a trajectory group or all of its children. :param key: Trajectory key
Store the annotations of an item in the node's attributes. :param item_with_
Load annotated attributes from the node. :param item_with_annotations: :class:`
Store a group. :param TrajectoryGroup traj_group: Trajectory group :
Load a group. Parameters ---------- traj_group : `~fermipy.ml
Load all the data from the traj node into the hdf5 group.
Extract missing flags from data_dict and flags_dict. :param data_dict:
Add a summary entry to the PRM meta table. :param instance: PRM instance
Add meta-information to the group. :param instance: the instance to add :type
Write a shared array to the shared array file :param key: key of the shared array
Write a shared table for this group. :param str key: the group name :param
Write a dictionary into a table. :param data_to_store: the dictionary to
Write data to HDF5 file in pandas format :param key: The key of the group
Write `data` into `other_array` Parameters ---------- key : str Name of the
Write the data into an array. :param key: the key of the array to write
Delete a link from this trajectory. :param link_name: Name of the link to
Return the column of the table. :param key: the column name :type key:
Given a list of strings, return the longest length of each element in the list.
Reads a dictionary of values from a leaf. :param leaf: Leaf object :param full
Read the shared data of a shared node. :param shared_node: The shared node
Reads an array from the file and returns it as a list of dictionaries. :param array
Load a Trajectory Parameters ---------- name : str Name of the trajectories to load index
Make a set name from a set index. :param idx: the index of the set
Set the properties of the network. :param kwargs: :param name: name of the
Add dynamic imports to the _dynamic_imports list :param dynamic_imports: list of
Sets the default parameter to be passed to the function. :param name: Name of the
Check if a run is completed or not :param name_or_id: name of
Remove all of the parameters that are currently exploring.
Updates the run information with the given run information dictionary :param run_information_dict:
Add information about a single run. Args: idx (int): index of the run
Locks all the parameters in the simulation.
Lock all derived parameters.
Finalize the simulation. Args: store_meta_data (bool): If True,
Function to load the skeleton into the model Parameters ---------- self_name : str Name of the
Create a list of translated wildcards for this run. :param str old_length: number
Merge other_trajectories into the trajectories of the same type.
Merge the runs of the other_trajectory into the runs of the other_trajectory
Renames the full_name of a trajectories. :param str full_name
Merge the configuration of the other_trajectory into this trajectories Parameters ---------- other_
Merges this trajectory with the other_trajectory, taking into account the rename dict.
Merge results of two trajectories into one :param other_trajectory: Tra
Restores the default value of the parameter list.
Set the access level of all the parameter objects to the given index. :param idx:
Make a single run of the graph.
Returns a list of the names of all the runs in the simulation.
Start a new run in the simulation. :param run_name_or_idx:
Sets the start time of the crun.
Set the run_info_dict to be set after the execution of the Crun.
Construct an instance of the given constructor. :param constructor: The constructor :type constructor:
Helper function to return a dictionary containing the values of the parameters in the parameter_dict.
Finalize the run by removing all nodes from the list of new nodes in the run.
Delete a set of links from a list of links :param iterator_of_links:
Remove all children of this node :type recursive: bool :param predicate: predicate to remove
Handle a single-run pooling signal.
Perform a single run frozen_pool.f_set_crun with the given kwargs
Configures the pool single-run to use the storage service specified by ``pool_single_
Configure the frozen_pool_single_run.py and frozen_pool_niceness
Process a single run of the sigint process :param kwargs: kwargs :type kwargs:
Run a single scoop run. :param kwargs: keyword arguments :type kwargs: dict
Configure the logging manager. :param kwargs: :type kwargs: dict :param kwargs:
Configure the niceness of the process. :param kwargs: :param niceness: nic
This function handles sigint, sigint, sigint, and sigint_handling.
Configure logging and wrap sigint handling in a separate thread. :param kwargs: the kwargs
Import and return a class from a full class string Args: full_class_string (
Creates a class based on the class_name and a list of dynamic_imports.
Return the length of the range of the function.
Return the value of the function call as a string. :rtype: str.
Return the range of the function. :param copy: if True, return the range of
Stores the current state of the object in an object table :rtype: dict.
Load the parameter data from the specified dictionary. :param load_dict: dict of the
Loads the parameter list from the given dictionary. :param load_dict: The dictionary of
Check if two values are of the correct type. :param val1: :param val
Check if data is a supported matrix :param data: data to check :type data:
Build a list of names for this parameter. :param name_idx: index of the
Reconstruct an SPSP matrix from a list of data. :param data_list
Load the data from a dictionary. :param load_dict: the dictionary of the data
Store the data in a dictionary. :param self: self to store :type self:
Load the data from a dictionary.
Given a key, translate it to the v_name if needed. :param key:
Returns a string representation of the values in the file.
Returns a copy of the object's data, or a copy of the object's data.
Set a single data item :param name: Name of the data item :param item:
Return True if the item is a sparse matrix, False otherwise :param item: The item
Serialize the data into a dictionary that can be inserted into the database.
Load the data from a dictionary. :param load_dict: the dictionary of data to
Set a single item in the dictionary. :param name: name of the item to set
Store the data in a dictionary suitable for passing to the pickle API. :rtype:
Load the data from a dictionary of values.
Main entry point for merge_all_in_files_with_dynamic_imports.
Create a session with user_id and user_pass.
Merge trajectories into a single JD.
Start all jobs in a session. :param Session session: the session to start :type
Multiply trajectories. Args: traj (:class:`pandas.DataFrame``):
Run the neuron of the simulation. :param traj: the simulation object :type
Process the result_list after processing of the neuron.
Add the parameters to the trajectories Parameters ---------- traj : `fermipy.
Add explore to traj.f_explore :param traj: Tra
Extract all sub-runs from the trajectories Parameters ---------- traj : Trajectories
Execute a network run. :param traj: Trajectory data :type traj:
Add parameters to network_runner Parameters ---------- traj: traj to add Parameters
Build the network and execute the network runner :param traj: Trajectory object :type
Generates a filename from a trajectories of explored parameters. Parameters ---------- traj :
Return the next item in the chain.
Handle SIGINTs. :param int signum: :param frame: :return:.
Try to load config from file :param filename: filename of config file :param config:
Request a PIN request to get a PIN. :returns: None :rtype
Request the access token and refresh token from the authorization code.
Refreshes the access token and refresh token. :param refresh_token: Refresh token.
Retrieves a list of thermostat names for the current user. :rtype: list
Write access token and refresh token to the config file Args: self.config_filename (
Set the hvac mode for a thermostat.
Set the fan min on time for a thermostat.
Set the climate hold for a thermostat :param index: the thermostat
Delete a vacation from a thermostat. :param index: the thermostat
Resumes a program. :param index: the index of the program to resume :type
Send a message to a thermostat at the given index :param index: the index
Generate a random delay selecting between 0 and 1.
Generate the time to wait for the renew request to expire. :param lease: the lease
Generate renewing time. :param lease_time: lease time :param elapsed:
Return a copy of this state machine's attributes. :rtype: :class:`~
Reset the device to a new state. :param iface: The device to reset :param
Get the timeout function for the given state and function :param state: the state of the
Set the timeout of a function in a given state. :param state: state of the
Select the next offer in the queue and send it to the client.
Send a request to the broker.
Set the timers for the renewal and rebinding of the client. :returns: None
Process a received NAK packet. :param pkt: Packet to process :rtype:
Initialize the state to the initial state :param int delay_before_selecting: The
Timeout to select offers. :raises: :raises: :raises:
Check if disover_requests is above max_attempts_request. :rtype:
Timeouts the renewing of the current request if the number of requests in the disover
Timeout the rebinding of the current request if the number of request attempts is greater than
This function is called when an offer packet is received from the client.
Process a received ACK requesting packet :param pkt: Received ack requesting packet :ra
Receive a Nak request from the client. :param pkt: Received request packet :type
Process ACK_RENEWING packets. :param pkt: Received ack packet :type pkt
Handle nak renewing packets.
Callback for acknowledgement rebinding of the acknowledgement of the broker. :param
Process a received NAK rebinding packet :param pkt: Received NAK rebinding
Called when a lease is renewed.
Set a parameter to a new value. :param name: The name of the parameter :
Add a parameter to the parameter list. :param name: The name of the parameter to
Returns a copy of the QuerySet with the given name and value removed.
Get the status of the supervisor. :param options: options to use :type options:
Read tdms file and return ch_names and ch_data.
Convert a tdms file to a fcs file Parameters ---------- tdms_file : str
Return True if the tree is equal to the given cwd.
Create a patch in Quilt.
Delete the patch after the first patch in the series.
Delete a patch from the collection.
Check if a file exists in a patch :param filename: The filename of the file
Create a backup of the given file. :param file: the file to backup :type
Add a file to the archive. :param filename: The filename of the file to add
Run the command and wait for it to finish :param str suppress_output: suppress output
Create the directory if it does not exist yet.
Copy this directory to a new destination. :param dest: destination directory :type dest:
Create a symbolic link to this file. :param link: link to the file :type
Copies the file to the given destination.
Returns a directory object representing the file's directory. Returns None if the file does not exist
Create a backup of the given file. :param file: the file to backup :param
Unapply a patch, removing all the patches after the patch with name `patch_name
Apply a patch to the current series :param patch_name: Name of the patch to
Apply the patch to the next patch in the series.
Apply all the patches in the series.
Reads the patch file into self.patchlines and self.patch2line.
Save the series to a.series.txt file.
Add a patch to the list of patches.
Insert a list of patches into the patch2line dict.
Add patches to the document. Args: patches (list): List of patches to add.
Remove a patch. Args: patch (str): the name of the patch to remove.
Return the list of patches after the given patch.
Return a list of patches before the given patch. :param patch: the patch to get
Get the list of patches until the given patch is found. :param patch: the patch
Replace old_patch with new_patch.
Create the version file if it doesn't already exist.
Check that the version of the database is correct. :param version_file: version file
Adds this argument to the given parser. :param parser: :type parser: argparse.
Add this command line argument to the given `argparse.ArgumentParser` instance.
Add this command line option to a sub-command-line argument parser.
Set the subparsers args and kwargs to be passed to the ``set_subparsers_args
Add the subparser to the given parser :param parser: the parser :type parser:
Checks if a file exists in the patch directory Parameters ---------- filename : str Name of the
Check if file exists in next patches :param str filename: file name of the file
Revert a file to the original location of the original file. :param filename: The
Copy a patch to quilt.patches Args: patch_name (str): name of
Import a list of patches into the quilt_patches directory.
Add a way to the world. :param w: The way :type w: way
Yield node ids that are not present in self.node_ids.
Add a node to the graph Args: n (Node): The node to add.
Build a route object from a relation.
Create a short route name based on the relation id and the short_name.
Get the agency ID from the relation. :param relation: The relation :type relation
Process the relations and create a nodehandler and a wayhandler for the relations.
Add a relation to the relation list :param rel: the relation :type rel: Rel
Patch agencies to make sure agency_id, agency_url, agency
Create dummy trip stops for a given trip. :param trip_id: :param stop
Write a zipped version of the file at `filepath` to a zip file.
Writes all the files to the destination directory. :param destination: the destination directory to write
Build an agency object from an agency relation.
Extract stop objects from a WheelChair relation Args: relation (WheelChair
Given a relation node and a list of ways, return a list of shape objects.
Returns a list of the supported versions of the device. :returns: list of supported versions
Send an APDU to the device. Args: ins (int): the instruction to send
Try to authenticate a device using u2f. :param devices: list of u2
Send a register request to device. :param device: device to send :param data:
Authenticate the request. :param device: The device to authenticate :param data: The request
Register a device with the device list :param devices: list of devices to register :param
Convert unicode string to unicode string :param data: unicode string to convert :type data:
Wrap a class with error decorators. :param cls: class to wrap :param error_
Check if a filepath matches one of the patterns in the only_blame_patterns.
Given an email address, return the corresponding email address or None if it's not in the
Get an entry from the entry tree. :param entry: entry to find :type entry
Convert markdown to rest format. :param text: text to convert :type text: str
Serve flawless services. :param conf_path: path to flawless configuration
Download image from url and return ImageIO object. :param url: url of image to
Convert a string representation of an image file to a PIL Image object.
Check if image is big enough to fit in size. :param image: Image to be
Raises ImageSizeError if width is larger than image's width.
Check if the height of the image is big enough to fit into the image :param image
Parse the category of an item. :param item: The category of the item :param
Parses the value of the ``totals`` field of ``item`` as an integer.
Get all the items in the source document.
Save error message. :param data: :param exception_info: :return:.
Parse items from the source file and save them to the database. :rtype: None
Parse an item into a dictionary of data. :param item: The item to parse :
Get an instance of the model based on the given data :param data: :return:.
Save an item to the database :param item: the item to save :param data:
Download a file from the given url to the given destination path :param str url:
Loads the source file into memory.
Get a list of items from the CSV file.
Set whether or not network access is allowed. :param value: True or False.
Add files to the sandbox. Args: filenames: The list of files to add to
Add a new file to the sandbox and rename it to the sandbox working directory.
Returns a list of canvasEnrollments for a given course.
Get all enrollments for the given sis_course_id.
Returns a list of canvasEnrollments for a section. :param section_id:
Get all enrollments for a section by its SIS ID :param sis_
Get a list of enrollments for a given registration ID.
Enrolls a user into a course :param course_id: ID of the course
Returns a list of roles in an account.
Returns a list of roles associated with an account's SIS. :param account_s
Get the effective course roles in the specified account. :param account_id: the id
Get a role for a given account :param account_id: ID of the account
Get role by account_sis_id :param account_sis_id:
Get a single course. :param str course_id: ID of the course :param
Get a single course by its SIS ID :param sis_course_id:
Get courses in an account. :param account_id: ID of the account :param
Get courses in account by sis id. :param sis_account_id:
Get the list of courses published in an account. :param account_id: ID of
Get a list of courses that have been published to an account. :param sis_
Get a list of courses for a user with the given regid Parameters ---------- regid
Creates a new canvacourse for the given account.
Update the sis ID for the given course ID :param course_id: ID of
Get activity by account ID and term ID :param account_id: ID of the account
Get the grades of a term by their account ID :param account_id: ID of
Get statistics of a term in an account. :param account_id: ID of the
Get activity by SIS course ID. :param sis_course_id: the
Get a list of assignments by sis course ID. :param sis_course_
Get student summaries by sis course ID. :param sis_course_id:
Get the student activity for the given sis_user_id and sis_course
Return the student messaging for the given sis_course_id and sis_user
Get a list of external tools in an account. Args: account_id (string):
Get a list of external tools in a course. :param course_id: ID of
Create an external tool. :param context: The context to create :param context_id
Update an external tool with the given id :param context: the id of the context to
Deletes an external tool from a specific context. :param context: the context to delete
Check that all required parameters are present in the object's attributes. :param obj: The
Get user details. :param str user_id: ID of the user.
Returns a list of users for a given course. :param course_id: ID of
Get users for a given sis course. :param sis_course_id:
Create a new user in a canvas account. :param user: :param account_id
Gets a user's logins. :param user_id: ID of the user
Update user login. :param login: Login object :param account_id: Account ID
Return the next page URL from the response header.
Get a single resource from a URL :param url: The URL of the resource :param
Return a resource that is paged. :param url: :param params: :param
Get a resource from a given url with the given parameters :param url: the url to
Do a PUT request to the API. :param url: :param body: :return
Helper method for POSTing a resource. :param url: URL of the resource :param
Performs a DELETE request to the given URL. :param url: URL of the resource to
Get a list of CanvasAdmin objects for the given account ID :param account_id:
Create a new admin for a user.
Create an admin user by its SIS account ID :param sis_account_id
Delete an admin from an account :param account_id: ID of the account :param
Delete an admin of a user by SIS account ID :param sis_account_
Create a new grading standard for a given course. :param course_id: ID of
Get a section. :param section_id: ID of the section :param params:
Get a section by its SIS ID :param sis_section_id: S
Get a list of sections in a course :param course_id: ID of the course
Get all sections in a course given its ID. :param sis_course_id
Returns all sections with students in the given course.
Returns a list of sections with students in a course. :param sis_id
Creates a new section. :param course_id: The id of the section :param
Update a section. :param section_id: ID of the section to update :param
Get a list of quizzes for a course.
Get an account. :param account_id: ID of the account :returns: Account
Returns a list of sub-accounts for a given account id.
Updates an account. :param account: Account to update :type account: Account :param
Update a SIS Account ID. :param account_id: ID of the SIS
Get the authentication settings for the given account. :param account_id: ID of the
Update the authentication settings for an account. :param account_id: ID of the account
Returns the term with the given sis_term_id Args: sis_term
Import a CSV string into a canvas account. :param csv: The CSV to be imported
Import a directory into the canvas account. Args: dir_path: Path to the directory
Get the status of an import. :param sis_import: SisImport model
Builds the zip file for the CSV file. :param dir_path: Path of the
Returns a list of assignments for this course. :param course_id: ID of the
Updates an assignment. :param assignment: The assignment to update :type assignment: assignment :
Returns a list of available report types for the given account. :param account_id:
Returns a list of Report objects for a given report type. :param account_id:
Create a new report for an account. :param report_type: The report type :
Creates a course provisioning report.
Shortcut for creating a SIS export report :param account_id: ID of the account
Create an unused Course report :param account_id: ID of the account to report
Get report data from a report object :param report: report object :type report: report
Returns the status of a report. :param report: Report object :type report: Report
Delete a report. :param report: the report to delete Return True on success.
Moves all detections in a label to a specific location.
Flip the detections along the x and y axis Parameters ---------- label : dict of detections
Get a dict representation of the given object. :param obj: the object to be
Get the configuration for the inplace edit request :param request: :param kwargs: The configuration
Returns the empty value to use when editing an empty string.
Creates metrics for the given metric configurations. :param metric_configs: The metric configurations to
Set up logging for the logger.
Configure the process registry. :type include_process_stats: bool :param include_
Create the metrics for the given metric configs. :param configs: a list of metric configs
Get a metric. :param name: the name of the metric :param labels: the
Handle the home page.
Handles the metrics request :param request: the request to handle :param response: the response
Wolframalpha query. Args: client: wolframalpha client.
Fixes the httpmessage.get_content_type and http_client.httpmessage
Perform a query to the server. :param input: The input to query :param params
Returns a list of information about the pod's assumptions, pods, warnings and pods.
Returns a list of the results of all the pods in this group.
Encode the given data to JSON. :param data: The data to encode :type data
Perform a GET request. :param url: :param params: :return:.
Makes a DELETE request to the specified URL. :param url: the URL to delete :
Sends a PUT request to the given URL. :param url: The URL of the file
Make a POST request. :param url: :param params: :param data: :
Group sentences into groups of total_nb_sentences. :param total_nb_sentences
Disambiguate a PDF file.
Disambiguate a query. :param query: The query to disambiguate :type
Segment a text into a text file. :param text: text to segment :type text
Get the language of a text. :param text: the text to be translated :type
Get a single concept by its ID. :param conceptid: concept id :param lang
Fits the classifier on a list of features and classes. :param features: list of
Score the given features. Parameters ---------- features : list of features : list of classes to score
Fit a model and predict with a list of class_labels. Parameters ---------- features : list
Score the given features with the given class labels. :param features: features :type features
Transform a feature vector into a new feature. Parameters ---------- features : array_like, shape
Returns the score of each group of features in feature_map Parameters ---------- features : list of
Create a new vector. Args: members: :param meta: :return:.
Return a new vector of members. Args: members: members of type t. meta:
Evaluate the given file. Args: filename (str): The filename of the file to evaluate
Evaluate the given form stream with the given compiler context :param stream: the stream to eval
Evaluate the given string representation of a form. Args: s: string representation of the form
Bootstrap a REPL namespace. Args: which_ns: REPL namespace. Returns:
Evaluate the given file_or_code with the given namespace. :param file_or
Add a method to a key in a map :param m: :param key: :
Adds a method to the multifunction. :param key: the key of the
Remove a method from a map. :param m: the map to remove :type m
Remove a method from the multifunction. :param key: the key of the method
Return ``True`` if ``v`` is a macro.
Return the location of the line and column of the input iseq.
Raise an exception if we are not a recurred operation. :param node: the node
Assert that ``node`` is the last node in the recursion tree.
Resolve a symbol in the current namespace to a VarRef or maybeclass.
Resolve a form symbol to a real symbol in the form namespace.
Parse the input form as an AST and return the result as a Node instance.
Return True if warn_on_shadowed_var is set, otherwise returns False.
Return a string representation of a list of dictionaries. Args: entries: :param start:
Return a string representation of an iterable of objects. :param iterable: iterable of objects :
Return a human-readable representation of the given object. :param o: the object to
Fix locations that are missing from the source code. Parameters ---------- start_loc: Location of
Compile the form and execute it in the module :param form: The form to compile :
Compile `py_ast` into `mod` in `source_filename`.
Compile a list of forms into a module.
Compile `code` into `module` with the given `gctx` context.
Given an iterable, return the first element of the sequence as a sequence.
mungemungeMungeMungemungeMunge
Returns a fraction of ``numerator`` and ``denominator`` Parameters ---------- numerator : int
Return a logging handler. :param level: level of logging :param fmt: format string
Map a list of key-value pairs to a list of key-value pairs.
Partition a collection into n elements, each element in the collection is a list of elements
Read the namespace and name from the context reader. Args: ctx: the context to read
Read a list of elements from a list or set of elements from a list or set.
Read list. Args: ctx: Reader context. Returns: llist.List.
Reads a vector from the reader.
Read a map. Args: ctx: a MapParser context Returns: a MapParser.
Reads a string. Args: ctx: Context object. allow_arbitrary_esc
Reads a symbol from the context.
Read `kw` from `ctx` and return a `keyword.Keyword` object.
Read the meta information of an object. :param ctx: the reader context :type ctx
Reads and returns a list of quoted form tokens from the current reader context.
Expand a syntax quoted form into a list of forms. :param form: The form to
Read a quoted syntax form from the reader. :param ctx: Context to read :type
Read Deref form from the current reader position. :rtype: lispforms
Read a single character from the reader.
Reads a regular expression from the context text.
Read the next token of a reader-like expression. :param ctx: the parser context
Read the next consumer comment.
Read the next token from the reader.
Read a string from a string.
Read data from a file. Args: filename: The file to read :type filename:
Update the position of the last character in the string.
Pushes the last item to the end of the list. :rtype: None.
Read the next token from the input, updating the location of the input stream and returning it
Return the bytecode bytes. Args: mtime: The timestamp of the file. source_size
Return a list of bytecode objects for the given file name. Args: fullname (str):
Return the cache file path from the package source. :param path: the path to the
Hook to add imports to sys.meta_path.
Find and return the module spec for `fullname` in `path` Parameters ---------- fullname :
Execute cached module with cache data.
Execute Python module. :param fullname: Python module name. :param loader_state:
Execute the given module and save it in the current namespace :param module: The module to
Create a new symbol. :param name: Name of the symbol :type name: str
Return a list of all keywords in `text` that are in `kw_cache`.
Get or create a new keyword object for ``h`` in ``kw_cache``.
Return a unique keyword. Args: name: Name of the keyword. ns: Namespace of
Chain a generator of generated Python ASTs into a single Python AST node.
Generate AST from a collection of AST nodes. :param form: :param ctx: :
Return an ast with the correct line and column number. Args: py_ast: the
Return a function that takes a node and returns the line and column of the generated AST.
Wrap a function to return a generated AST with its source line and line number and column.
Return ``True`` if ``v`` is a dynamic object.
Return ``True`` if ``v`` is redefable.
Return an ast.Expression if e is an ast.Expression, otherwise return e.
Return an ast.FunctionDef with the given arguments. Args: fn_name: name
Convert a Do node to a Python AST.
Return the name of the function. Args: s (str): the name of the function
Return a list of ast.Args and ast.Body AST for the function's arguments.
Convert a single function call to a Python ast.
Convert a function call to a Python ast object.
Return the Python AST representation of the body of the given node. :param node: The
Generate an AST representation of an invoke call. Args: ctx (GeneratorContext): generator context
Convert a quote node to a pyast.
Generate Python AST for `recur` node. :param node: :param ctx:
Convert a recur node to a python ast.
Convert `SetBang` node into `ast.Assign` or `ast.Variable
Convert the `Throw` node to a Python AST. :param ctx: the `Generator
Convert a try statement into a Python AST.
Converts a local symbol to a Python ast object :param node: :param is_assign
Find a variable with the given name in the given namespace. :param var_name:
Given a varref node, return an ast.ast.ast.ast.ast.
Convert a `HostField` node to a `GeneratedPyAST`. Args: ctx:
Convert a maybeclass node into an ast.Generator instance.
Return ``ast`` for ``maybe_host_form`` node.
Convert a const value to a Python AST node.
Convert a collection of literals to a Python AST :param form: The form to convert :
Return generated Python AST node. Args: ctx: generator context lisp_ast:
Generate the import statements for the given context. :param ctx: The context :type ctx
Return an ast.ImportFrom ast.Import from the module `_var_alias`.
Return an ast.Assign object with the namespace variable. Args: py_ns_var
Create a new set from a list of members. :param members: the list of members
Return a new set containing members.
Return a new ast.excepthandler node. :param node: The ast.excepthandler
Return node if it's a constant, name, number, string.
Return node's AST representation as function def.
Return ``node``s representation as `ast.While` node. :param node:
Convert dead code to dead code :param node: ast.Try node Return new ast.
Create a new module with the given name and doc. :param name: module name
Return the first element of an ISeq, or None if it's not a sequence.
Return the rest of the sequence.
Returns the i-th element of the coll, starting at the i-th element.
Return the next n-th element in a collection.
Return a list of the elements of the first `seq` whose elements are the elements of
Converts an object to a sequence.
Concatenate one or more sequences into a single sequence. Args: seqs (iseq.
Associate a set of key-value pairs with a map.
Conjuncts a list or list of lists. Args: coll (IPersistentCollection
Dereference an object. :param o: the object to deref :param timeout
Compares two values, returning true if they are equal, false if they are not.
Divide two numbers. :param x: :param y: :return:.
Sort the given collection. :param coll: The collection to sort :param f:
Checks if a given key is contained in a collection. :param coll: collection to check
Get a key from a MapEntry or MapEntry object. :param m: MapEntry
Converts an object to its LISP representation :param o: the object :param keyword
Convert an object to a Python sequence or a list of objects. :param keyword_fn
Return a string representation of the object. :param o: the object to be printed :
Takes a list of positional arguments and returns a list of positional arguments. :param args:
Mark a function as a basilisp function and return it. :param f: :
Resolve an alias for a symbol. :param s: the symbol to resolve :param ns
Resolve a variable name. Args: s (sym.Symbol): The name of the variable
Add `generated_python` to the ``var_name`` of the current namespace.
Intern a variable. :param ns: Name of the variable :param name: Name of
Intern `name` with `name` as a variable name in `ns`.
Find a symbol in a namespace :param ns_sym: namespace symbol :param name_
Find the variable in the given namespace.
Try to find a variable with the given ns_qualified_sym. Raises a runtime exception
Add a module as a default import to the list of gated imports.
Add an alias to a namespace. :param alias: The alias to add :type alias
Add an intern symbol to the scope. :param sym: Symbol to intern :param var
Interns a symbol into a new variable in the map. :param m: :
Find the variable associated with the symbol sym :param sym: The symbol to find :return
Add `sym` to the import list of the module `module` :param sym:
Return the import module for the given symbol. :param sym: the symbol to import :
Add `var` to `self._refers`.
Return the reference symbol of the symbol in the symbol table. :param sym: the symbol
Given a list of references, return a list of references to all the members of those references
Referes this namespace to the given namespace. :param other_ns: the namespace
Get or create a namespace from the namespace cache or create a new one if it doesn't
Get or create a namespace. :param name: name of the namespace :param module:
Get the value for the given name. Args: name: name of the name of the
Remove an element from the namespace. :param name: The name of the element :type
Completes aliases. Args: prefix: The prefix of aliases name_in_ns:
Completes imports and aliases. Args: prefix: The prefix of the module to complete.
Completely complete interns. :param value: :param include_private_vars:
Return a complete list of references for the given value. :param value: :return:.
Return a list of complete imports and refers. Args: text: The text to complete
Returns a tuple of the arguments to be passed to the function. :rtype: tuple
Return a list of members. :param members: A list of members :type members:
Return a list of members. :param members: list of member names :param meta:
Decrypts a JWE token and returns the decrypted payload :param token: The JWE
Encrypts the given JSON using the JWE key store. :param json: The JSON
Remove an item from the cache. :param args: The item to delete :type args
Return a tuple with the selector, comparison and argument as Python code.
Parse a FIQL expression string into a FIQL expression. :param fiql
Dump a NDB model to a file-like object. :param ndb_model
Decode dates and convert to strings.
Decode a date string into a datetime.date or datetime.datetime.datetime object.
Decode the value to a date and return it. :param val: The value to decode
Encode the given object to JSON using the appropriate encoder for the given object. :param obj
Validate the leicacam version string.
Performs a strongly-connected topological sort of a directed graph.
Set the parent of this object :param parent: the parent of the object :type parent
Returns the parent expression of this fiqlobject :raises fiqlobject
Adds an element to the working fragment. :param element: The element to add :type
Create an AND expression. :param elements: :type elements: list :rtype:
Add an OR operation to the expression.
Parse a receive message into a list of dicts.
Convert a list of tuples to a dict of strings.
Check a list of messages for a specific command. :param msgs: a list of messages
Prepare a message to send to the server :param commands: the commands to send :type
Flush all buffered messages to the socket.
Enable a slide on a Welly slide. :param slide: slide number :param
Save a template to a file. :param filename: filename to save template :type filename
Get information about the server. :type about: str :param about: The information about
Locate the systemjs package.json file.
Parse the package.json file.
Handle an API exception with a JSON response. :param http_exc: :param json
Validate a response from the Yourls API. :param response: The response to validate
Hemogenize the waves. :param wave_a: The waves :
Interpolate `indep_vector` with `interp` and `indep_vector
Return the range of indep vectors of wave_a and wave_b.
Verify that the differences between `wave_a` and `wave_b` are compatible
Load the systemjs manifest and return a dict of bundle_file_name -> bundle_
This function is used to generate a trace file for the given module name Parameters ---------- mname
Expand a short name. :param short: short name to expand :type short: str
Get URL statistics for a short url. :param short: Shortened url.
Get statistics for a given filter. :param limit: number of items to return :param
Get database statistics. :return dbstats.DBStats :rtype: dbstats.
Returns an iterator that yields a chunk of ``chunksize`` elements from ``iterable``.
Flattens an iterable. :param iterable: :param map2iter: Map
Print a list of strings as a list of strings. Args: table (list): List
Make a dummy type with ``name`` and ``attrs`` as attributes.
Return a Number from a human-readable string. :param human_readable_str:
Trace a module with docs.support.trace_support.run_trace.
Print out links to all dependencies in the dependencies json file Parameters ---------- mobj: `fer
Add a common entry to plist. :param plist: list of entries :type plist:
Make a multi-version entry from pkg_pyvers. :param plist: list of
Convert a list of operators to a list of words. Args: item (str):
Split noise data into chunks of noise data Parameters ---------- noise : dict The noise data to be
Yield data points from data_matrix in a single chunk format Parameters ---------- freq_vector :
Calculate the bound waveform for a given range of input indep_min and indep
Build a set of units based on the op and `dep_units` and `in
Create a copy of the wave, with the given operation. :param wave: the wave
Calculate the running area of the dependency vector :param indep_vector: the input
Validate that both indep_min and indep_max are valid.
Calculate the arccosine of a wave object Args: wave (:obj:`wave.
Calculates the arccosh of a wave Parameters ---------- wave : `pex.Wa
Calculate the sine of a wave object.
Calculate the hyperbolic tangent of a wave.
Return a copy of the wave object with the same dependencies. :param wave: wave object
Return the delay of the wave in a group. Parameters ---------- wave : `WAVE`
Calculates the log of a wave matrix.
Calculate the square root of the wave Parameters ---------- wave : `wave.wave` Returns -------
Return a copy of a WAVE object with a complex vector. :param wave: W
Convert a wavevector to a wavevector of floating point floats.
Return a copy of the input WAVE file.
If the systemjs output_dir is specified, return a list of system.js files
Given a long description, returns the first line of the long description. :param long_
Build an expression from a sequence of tokens. Args: tokens (list): A sequence of
Remove the last delimiter from a list of items, and return the item after the delimiter.
Return a list of functions in an expression. :param expr: The expression to evaluate :
Parse `text` into `expr` and `ldelim` and `rdelim`.
Remove consecutive delims from a sequence expression :param expr: sequence expression :param ldelim
Converts a number from a scientific notation into a sex_eng_tuple.
Return the string representation of the number without its exponent.
Convert a peng decimal number to a floating point number. :param str snum:
Calculate peng_frac from a string. :param snum: :param peng
Convert a string to a peng-mant number.
Return True if the app needs to be included in a javascript file :rtype: bool
Bundle a JSPM project to a file in the current working directory.
Return the trace of the given app. :param app: name of the app to trace
Return True if the MD5 hash of the modules in the dependency tree matches the hash of
Format a string of bytes in a hexdump format :param arg: a list of bytes
Parse a docstring into parameters and return parameters and return types. Args: doc (str):
Return a list of all built-in functions that can be used in the function.
Add a module to the context. :param str add_action: :return:.
Split a line into parts, removing quotes if posix_lex is True.
Check if initialize context exists and invoke all init commands.
Return the help text for the current function or directory.
Find a function in the function registry. :param context: The function to find :type
Returns a string listing of the functions in the given context :param context: The context to
Return True if arg is a flag, otherwise False. Args: arg (string): flag
Extracts the value of an argument from a list of remaining arguments :param arg_name:
Invoke the method on the given line of text. :param line: The line to invoke
Classify a section name into the appropriate class. :param section: section name :type
Classify a single line of text.
Given a list of lines of text, return a list of strings of paragraphs.
Convert the value to the given typename. :param value: the value to be converted :
Convert a binary value to the specified type. :param binvalue: the value to convert
Returns the size of the given type. :type type: str :param type: the
Returns True if the type_name is in the list of known types.
Split a type name into base, subtype, and subtypes. Args: typename (str
Instantiate a type with the given base type and subtypes. :param typename: name of
Check if the type has the given format :param type: type of the type :param
Load all types from a module and inject them into the type registry. :param module:
Adds a parameter to the signature. :param name: Parameter name :type name: str
Set the return_info field to a typed return value. :param type_name:
Add a custom return value to the message.
Match a short name to a list of possible names. :param name: Name of the
Returns the type of the parameter with the given name or ``None`` if it's not
Format the return value of the function. :param value: the value to format :type
Convert an argument at the given index to its string representation. :param index: the index
Convert an argument to the type of the parameter :param arg_name: name of the
Return a string representation of the exception. :param str exclude_class: exclude the class
Return a dict representation of the error message and parameters. :rtype: dict.
Executes the function with the given arguments. :param func: The function to execute :param
Parse a list of validators into a list of name and value pairs. :rtype:
Given a container object, return a dictionary of all the elements in the container.
Given a module, return the name of the module, the context of the module.
Returns the help text for the given function.
Decorate a function so that it can be called from the docstrings of the function.
Decorator to add metadata to a function or function. :param name: name of the function
Returns the short description of the function.
Loads all commands from the project module and its sub-modules.
Installs the tasks in the registry. Return the number of tasks installed. :rtype
Print the list of tasks to the console.
Uninstalls the kronos breadcrumb. :returns: number of deleted comments :rtype
Create an instance of the appropriate schema for the given URI. :param uri: The URI
Load projects from yaml file.
Save the projects to the project configuration file.
Return the projects that this project depends on. :param recursive: Return a dict of projects
Initialize the project. :param project: the project to initialize :param path: the path
This method is not implemented in this class, it is used internally to implement the function.
Apply the function f to the pure state :param f: the function to apply :type
Return the value of the fold. :param state: the state to view :type state
Return a list of the folds in the state machine. :param state: a state
Applies the given function over the value of the current state and returns the result of the function
Set the current state to the given value :param state: the current state :type state
Apply a function to iterate over an iterable. :param state: The state of the function
Return the kind of optic.
Main loop for the main loop of the main loop.
Return a vector that is the step of going to the other vector :param other: The
This function handles the input of the game. :param input: the input of the game
Advance robots.txt to the player's crashes. :rtype: self.
Ends the game game. :param message: the message to send :type message: string
Moves the player to a new position in the board. :param board: board to move
Start the game loop. :returns: None :rtype: None :rtype:
Make a move on the board. :param x: x position of the move :type
Return the winner of the game. :returns: the winner :rtype:
Yields a sequence of potential wins. :rtype: generator of tuples.
Add item to the list of items and upload if needed.
Set the time of the spider to UTC and set the time stamp to the time stamp of
Upload a single chunk of data to S3 :param spider: Spider instance :type
Create a file-like object for writing to the file-like object.
This interface is used to get the state of an account.
Gets the current state of an asset :param asset_id: the ID of the asset
Returns the block hash at the given block index. :param block_index: the block
Get the system fee for a given block. :param block_index: block index :
Get the state of a contract. :param script_hash: the hash of the script
Get the transaction with the given hash. :param tx_hash: hash of the transaction
Retrieves the value of the given key in the storage stored at the given script_hash.
Get the output of a transaction. :param tx_hash: the hash of the transaction
Invoke the contract at the given script_hash with the given parameters and return the result.
Invoke a function on a script with the given script hash and operation with the given parameters.
Invoke the given script on the server. :param script: The script to invoke :type
Use this method to send a transaction directly to the server. :param hextx:
Validate that the given address is a valid address :param str addr: the address to validate
Make a call to the server. :param method: The method of the call :param
Check if a string is a hash256 string :param s: the string to check :
Returns True if the given string is a valid hash160 string.
Encode the parameters that need to be sent to the contract. :param params: a list
Decode the invocation result. :param dict result: the result to decode :type result:
Apply this unit to the given datetime.datetime object with the given ``timezone``.
Render the template and save the output to file. :param filename: name of the file
Render the barcode and return the raw bytes.
Render the given code with the current background color.
The main command for the config-file-edit command. :type edit: bool :
Downloads a remote file to a local file. :param remote_path: :param local
Upload a local file to S3 :param local_path: local file to upload :
Downsync the configuration file to the local config directory.
Get the diff of the current config file with the given section. Parameters ---------- section : str
Parse an environment variable into a key and value tuple.
Set the username and password to be used when creating a new client. :param username:
Add API key to config.api_key :param str api_key: API key
Get json content from folder. :param folder: path to the folder :type folder:
Returns a dict of schema names to their corresponding schema objects.
Return the schema of the model. :rtype: :class:`dict` :r
Return a jsonschema.RefResolver object for this schema.
Validate an object against the schema. :param object: object to validate :type object:
Returns a list of valid examples.
Get a list of invalid examples from the schema.
Return the authorization URL for the user. :param scope: the scope of the user :
Parse auth url and return auth code :rtype: str :raises apia
Get the auth token. :param check_scope: Check if the token is valid :
Get the user id.
Gets a list of files in a folder. :param folder_id: Folder ID of
Creates a new directory. :param name: Name of the directory to create :param
Add a comment to an existing message. :param obj_id: The ID of the
Decode a Python object to unicode. :param obj: the object to decode :type obj
Set the drop target for the given object.
Start drag operation on the window. Args: evt (wx.DragEvent): The event
Sets the default tlw for the designer and inspector :type tlw: tlw
Inspect an object and return it as a Toolkit object.
Migrate old font to new one :param font: font to migrate :type font: dict
Loads a page from a file in the WxInput object. :param location: location
Send a message to the user.
Displays a wellcome tip on top of the screen :param wx_obj: wx object
Called when the user clicks on a mouse button on the screen.
Move the mouse to the start and end of the grid. :param evt: Mouse event
This method is called when a key is pressed on the grid :param event: wx.
Delete all selected objects.
Duplicate the objects in the selection :rtype: None :rtype: None :r
Refresh the snapshot of the object. :rtype: None :rtype: None :
Calculates the best position of the widget in the tooltip window :param widget: the widget to
Get the python data for a given item :param item: the item to retrieve :type
Sets the data for the item :param item: the item :param py_data:
Finds the data for a specific py_data. :param start: the start of the
Deletes the item from the list :param item: the item to be deleted :type item
Deletes all items from the wx list :returns: None :rtype: None :ra
Clear the table and remove all columns from the table :rtype: None :rtype
Sets the selection of the control. :param index: index of the control :type index
Returns the string selection of all selected strings.
Set client data. :param n: client id :param data: client data :type
Append a string to the end of the list :param a_string: :param data
Return the wx component with the given name. :param obj_name: name of
Add a child widget to the widget's sizer. :param child: child widget :
Set parent of component :param new_parent: parent of component :type new_parent
Draw the background of the bitmap.
Callback for erasing the background of the bitmap. :param wx.Event evt: :
Paint the label of the widget.
Return a list of all column header controls, sorted by column index.
Resets grid to its initial state.
Updates the values of the grid. :param grid: the grid to be updated :type
Updates the attributes of the columns in the given grid. :param grid: the grid instance
Sorts the data of a column. :param col: The column name :type col:
Removes all items from the list, removing all items from the list.
Creates a combobox and binds it to the event handler. :param parent: wx.
Called when the user presses Enter on the edit button :param row: :param col
Change the start value of the cell. :param row: row of the table :param
Return true if the key is a shift key.
This function is called when a starting key is pressed.
Enable all the items in this list. :param value: True or False :type value
Check if all items in the menu are enabled :returns: True if all items are enabled
Enable all items in the menu. :param value: True or False :type value:
Return True if all items in the menu are enabled.
Remove a menu from the menu list :param menu: the menu to remove :type menu
Set the attributes of an object based on the attributes of this tag. :param object:
Fixes the text of each row of the table. :param node: :return:.
Return the appropriate Documenter for the given object. :param obj: the object to document
Given a signature string, mangle it and return it as a string.
Import module by name and return module and parent module. :param str name: name of
Return a role node for autolinking.
Shows an alert dialog. :param message: the message :param title: the title of
Prompts user for input.
Select a font and return the selected font :param message: The message :param title:
Select color. :param message: :param title: :param parent: :return:.
Open a directory dialog and return its path. :param message: :param path: :
Find a word or phrase in the user's list of words. :param default: string
Sets whether the tree item has children :param has_children: True if the tree item
Set the icon of the wx object :param icon: the icon to set :type icon
Parse the RRC file. Parameters ---------- filename : string Name of the RRC file.
Save a file to a text file. :param filename: File name :type filename:
Build the window. :param res: dict :rtype: dict :rtype:
Build a component from a dictionary of parameters. :param res: dict of parameters :param
Convert a property name to a new property name :param name: name of the property :
Sets text or bitmap data to the clipboard. :param data: The data to set
Find the autosummary in the docstring of a module. :param name: The name of
Load an object into the tree :param obj: the object to load :type obj:
Inspect an object in the tree :param obj: the object to inspect :type obj:
Activate the specified child item in the tree :param child: The child item :param edit
Update an item in the tree :param obj: The item to update :type obj:
Show a context menu for an item in the tree :param item: the item to show
Convert the value to a hyperlinked image thumbnail. :param value: the value of the
Returns True if the current path has the given parameters. Args: path (str): The
Return True if the current path does not exist. :param path: :param kwargs:
Select an option. :rtype: None :rtype: None :rtype:
Returns the webdriver object for the given browser_name :param browser_name: the browser
Returns the XPath representation of the expression :param exact: :type exact: boolean :param
Switches to a specific frame.
Accept an alert. :param text: Text to accept :type text: str :param
A context manager that allows the user to enter a modal modal dialog with the given text.
Dismisses a confirmation dialog. :param text: Text to dismiss :type text:
Accept a prompt to the user :param text: :param response: :param wait:
Dismisses a prompt on the current page.
Save the page to a file. :param path: path to save the page :type
Save a screenshot to a file. :param path: Path to file :param kwargs:
Raises server error if there is one. :raises ``CapyBara.
Test if element identified by `locator` has a checked field :type locator: str :
Shortcut for ``has_no_selector`` that checks if the element identified by ``locator
Check if element has unchecked field :param locator: locator of field :type locator:
Shortcut for ``has_no_selector``.
Assert that the element has the given title. :param title: The title of the element
Returns True if the page has no title. :param title: The title of the page
Return the inner content of a node.
Return the inner text of the given node as a string. :param node: The node
Normalize the given URL. :param url: the URL to normalize :type url: str
Return True if the error should be handled. :param error: :param errors: :
Compare the count of results. :param count_opt: :param min_opt:
Return ``True`` if the result iterator is at least ``size`` bytes.
Returns True if the options expect a non-None value :param options: the options to
Generate a failure message based on the options. :param description: The failure message :type
Returns True if the given number of options matches the given count. :param count: number
Converts a string of text to a string of whitespace. :param value: The value to
Remove any leading and trailing whitespace from a string.
Convert the given text to a regular expression. :param text: the text to convert :
Determine if the current url matches the expected_path.
Resizes the window to the specified width and height :param width: width of the window
Starts the server and waits for it to be ready to accept connections :rtype: :
Set the function to be invoked when calling the property of the property :param fcget:
Setter for the instance method. :param imeth: The method to call :type im
Set the class method for this class. :param cmeth: :param cmeth:
Return the full traceback of the current exception. :rtype: str :rtype:
Returns the source of the object. :param instance: :param owner: :return:.
Return the logger associated with the given instance of logging.Logger. :param instance: instance
Set the logger to use for logging. :param logger: The logger to use :type
Calls the API. :param method: the method name :param params: the params to
Return a list of channels associated with this account.
Get a list of users for this account.
Creates a message from the given text and channel. :param text: the text of the
Translate a message to a user or channel name. :param message: Message to translate :
Send a slack message to a channel. :param message: a message to send :type
Read a message from the channel layer. :returns: None :rtype: None.
Start the Slack API client.
Run a channel layer. :param args: :param object_path: :return:.
Return a dictionary containing the difference of two dictionaries. Args: prv (dict): The
Colorize a message. :param msg: :param color: :return:.
Playbook on start of a task. :param task: The task to playbook on
Print a summary of the stats of each host. :param stats: the stats of the
Print the reason of the task being skipped. :param result: Task result :type result
Convert a network prefix to an IPv4 or IPv6 address string. :param value:
Add a model instance to the resource. :param model: The model to add :type
Load all filters defined in Jinja2_Filters and return them as a dict.
Return the full path of the yang file for a given profile and filename.
Make an HTTP POST request to the given URL. :param url: The URL of the
Build the authorization_code_uri.
Get a valid OAuth token :param code: :type code: str :param params:
Return a dict of query parameters from the URL. :param url: the URL to query
Remove the query part of a url. :param url: the url to dequery :
Build a URL from a base URL and optional query parameters.
Called when an exception occurs during the execution of the task.
Make a response. :param body: :param headers: :param status_code:
Make a response to redirect to the given redirect URI with an error message :param redirect_
Make a JSON response. :param data: :param headers: :type headers:
Generate an authorization code and store it in the client_id :param response_type:
Generate a new access token using a refresh token.
Get an access token from an authorization code grant :param grant_type: grant type :
Get the authorization code from a URI. :param uri: the URI to get the authorization
Get a token from POST data :param dict data: POST data :type data: dict
Get authorization object from the authorization header. :returns: Authorization object :rtype: Authorization
Open the bus. :param bus: The bus number to open :type bus: int
Read a single byte from the device. :param addr: address of the byte to read
Read a number of bytes from the specified address of the device. :param addr: address
Read a single byte from an i2c device.
Write a buffer of bytes to the device. :param addr: the address of the device
Write a byte data to the device :param addr: The address of the device to write
Write a block of data to the i2c device.
Create a copy of this effect. :param effects: A list of effects to copy :
Create a local copy of an effects.
Construct a File object from a file_info dict Args: file_info (dict):
Uploads a file_obj to a specific store. :param file_obj: file_
Returns a list of file CDN URLs for this group. :rtype: list.
Construct a group from group_info.
Create a new group from a list of files :param files: list of files to create
Perform operations on the storage endpoint. :param method: :rtype: :class:`
Yields UUIDs of all files in the sequence Returns ------- list of UUIDs.
Return a list of objects for a given starting point and ordering Parameters ---------- api_list_
Draw a progress bar. Args: iter_content (:obj:`list`): iterator of
Get the status of the user's home mode. :param kwargs: :type kwargs:
Return a list of cameras. :param kwargs: :return: list of cameras
Get information about the specified cameras. :param camera_ids: list of camera ids
Get a snapshot of the camera. :param camera_id: ID of the camera to
Enumerate motion events of a camera. :param camera_id: camera id :type
Save parameters for camera event md Parameters ---------- camera_id : string Id of the camera
Update the motion settings of this camera event. :rtype: list of camera_id
Return True if the li is the last in the list. :param li: li object
Yields data for a single-list node. :param li: node of the list
Gets the ILV number from a li element. :param li: the li element
Return the v-merge attribute of the tc element. :param tc: the tc element
Get the grid span of a tc element. :param tc: etree.Element :return
Return the td at the given index. :param tr: the tr element :param index
Returns True if style is set to False. :param style: style string :type style
Check if an element is bold or not :param r: element to check :type r
Return ``True`` if the resource is a italics resource. :param r:
Return ``True`` if ``r`` is underlineed or not.
Check if the element is a title element :param p: the element :type p:
Yields the content data of the run-content element of the run-content element.
Get relationship information for given media. :param tree: :param media: :return:.
Return ordered list type based on meta data :param meta_data: meta data :param
Given a table, build an etree.Element object for each row. :param table:
Returns the text content of a tag.
Strip tag from all elements in a tree. :param tag: tag name :type tag
Download a dataset from a URL and return its filename. :param dataset: dataset to download
Load MNIST.pickle file. :param bool flatten: Return tuple of (tim
Plot a series of images on a line. Parameters ---------- imgs : list of 2D array
Plot a set of weights as images. Parameters ---------- weights : list of weights to be plot
Plot filters. Parameters ---------- filters : `~astropy.filters.Filter` Returns -------
Encode a string into a list of characters. :param str txt: the string to encode
Add a convolutional weight matrix to the model Parameters ---------- name : str Name of the
Decode the given layer into a single output. :param z: the layer to decode :
Use the auto-encoder algorithm to encode the data. :param x: data to encode
Predict the value of the last layer layer Parameters ---------- X : array-like, shape =
Predicts the class of X for the last layer :param x: :param kwargs:
Predicts the logit for the given input data. Args: X (list[float
Returns a list of variables that will be used to evaluate the weighting of the target.
Calculate the accuracy of the target. :param outputs: list of outputs :type outputs:
Build an activation function from a name and a layer. :param name: name of the
Reservoir function. Args: xs: a list of x-vectors n:
Set the loss of the model. :param args: :param kwargs: :return:.
Train the model with the given arguments. :param args: :param kwargs: :return
Build a networkx graph with all layers connected to the network. :param regularizers:
Returns a list of input layers.
Returns a list of variable names in the model.
Save the object to a file or file-like object :param filename_or_handle
Load a model from a filename or handle. :param filename_or_handle: filename
Calculate the loss of the network.
Build a graph of updates from the given kwargs. :param kwargs: :rtype:
Return the shape of the output image.
Resolve the input shapes for the layers.
Resolve the input and output shapes to the shape of the output image :param shape: shape
Log information about the activation and its input shapes. :returns: None :rtype:
Log the number of parameters. :returns: the total number of parameters :rtype:
Format the given string into a string that is suitable for printing to the user's output.
Given a layer name and a list of layers, return the shape and shape of the layer
Find the parameter with the given key. :param key: The key of the parameter :
Add a bias to the distribution Parameters ---------- name : str The name of the bias to add
Convert the instance to a spec suitable for sending to the backend. :rtype: dict
Calculate a loggaborian environment for a given band. Parameters ---------- x_pos :
Return the image of the loggabor at the specified positions Parameters ---------- x_pos :
Add a tier to the simulation.
Removes the tier with the given number of tiers. :param name_num:
Returns the tier with the given name. :param name_num: the name of
Create an EAF object from this tiers and annotations. :param skipempty
Adds a point to the tier. :param point: the point to add to the tier
Add an interval to the list of intervals for this tier. Args: begin (int):
Removes an interval from the schedule. :param time: The time of the interval :type
Remove a point from the list of intervals. :param time: The point to remove :
Get all intervals. :param bool sort: If ``True`` is set to True,
Get all intervals in the tier, sorted by start and end position.
Indent the given element by the given level. :param el: The element to indent :
Add a new annotation to a tier :param id_tier: Tier to
Adds a description to a specific CV. Args: cv_id (int): C
Add a reference to an external type. :param eid: :param etype: :param
Add a new reference to a lexicon. :param lrid: :param name:
Add a linguistic type to the model. :param lingtype: the l
Add a locale to the locale map. :param str language_code: language code :
Remove all slots that are not in the timeslots dict :rtype: None.
Extract EAF data for a given time range. :param start: start of time range
Generates an annotation ID based on the number of timeslots. :param timeslots
Generate a unique time stamp. :param time: Time stamp to generate :type time:
Get child tiers for a given tier. :param id_tier: tier ID
Get the full time interval of the simulation. :returns: tuple of (min, max
Get the ref annotation data after the given time. :param id_tier: The
Get the annotation data before the given time. :param id_tier: The
Returns list of tier IDs for a given linguistic type. :param ling
Remove all annotations from a given tier.
Remove a description from the controlled_vocabularies table :param int cv_id:
Removes a license from the licenses list :param str name: Name of the license :param
Remove all linked files from the media descriptor list. Args: file_path (str):
Remove a property. :param key: The key of the property :type key: str
Remove the reference annotation from the annotation table. :param id_tier: ID of
Remove secondary linked files. Args: file_path (str): Path of the file to
Removes the tier with the given id :param id_tier: the ti
Remove one or more tiers from the simulation.
Rename a tier. :param id_from: Name of the tiers to rename :
Shifts the annotation of each tier to the given time. :param time: time of
Print out debug information about a storage dictionary. :param storage: a storage dictionary :param
Get the embedding levels for the given text. :param text: The text to get the
Explicitly override embedding level and directional level according to X2-X5 mapping.
Set the neutral type for each character in the sequence.
Reverse a sequence of characters in a list of chars.
Reorder resolved levels. :param storage: :param debug: :return:.
Read the current file from the command line and save it to the context's data.
Add an attribute to an object. :param object: the object to add :param
Command line interface for the convert command. :param args: command line arguments :return:.
Maintain backwards compatibility for Python 2.6.0 and 3.5.0
Show the gui for the current object.
Discover the first gui in the list of guis and return the first one found.
Add to the file menu, if not already there.
A context manager for maintained selection.
Context manager to keep the time of the context of this context manager. :rtype:
Display a message box with no GUI.
Returns the cumulative sum of the set of sets in the dataset.
Return a list of values for a single axis of the dataset Parameters ---------- axis : int The
Draws the constant line. :param value_label_style: the style of the line
Load the transform parameters for the visualization.
Return a copy of the mapping with keys and values removed from the original mapping.
Generator that yields floats from start to stop in floats between start and stop.
Validate and add data to the data list :param conf: The data to add :type
Burns the graph and returns the rendered HTML :rtype: str :rtype
Adjusts the left margin of the border_left to account for labels and labels.
Calculates the margin for the right border of the key box :rtype: int.
Add top margins to the top of the graph if show_graph_title or show_
Add a popup to the visualizer.
Calculate the bottom margin of the text.
Draw the graph of the plot.
Make a single data point element.
Draw the x labels.
Draw the y labels on the screen.
Draw x guidelines. :param label_height: height of the label :type label
Draw guidelines at the top of the graph. :param label_height: height of
Draw the titles of the graph.
Add inline styles to the root node :returns: None :rtype: None :ra
Create the SVG element.
Return a list of stylesheet resources.
Run the bot_class on the IRC server :param bot_class: The bot
Sends the given data to the socket. :param data: the data to send :type
Connects to the server :returns: True on success Return False on error :rtype:
Send a message to a channel or nick. :param message: the message to send :
Return a tuple of patterns that match the patterns.
Create a new nickname and register it with self.nick :rtype: str.
Handle ping message. Sends ping message to client :param payload: ping payload :type
Handle registered requests. Sends messages to the server. :param server: server to send
Enter an event loop, dispatching each pattern found in the socket file, and calling the
Register with the boss server.
Process the task queue and execute the task functions. :returns: None :rtype:
Returns a list of command patterns to be used in the command line.
Called when a successful message is received from the server. :param nick: The name of
This function is called when a worker sends a command to a task queue. :param nick
Add a worker to the queue.
Send a validation email to the current user's site.
Sends a password reset notification to the current user.
Verify token. :param request: :param kwargs: :param request: :return:.
Delete the user's avatar. :param request: :param args: :return:.
If the request method is POST, return True. Otherwise return False. :param request:
Return the docker.Client instance to use for the current environment. :rtype: docker
Returns a tuple with the TLS client certificate and key, or None if not set.
Get the name of the service to use for this instance. :rtype: str.
Helper to call a method on the docker client :param method: :param args: :
Submit a docker call to the API. :param method: docker method to call :param
Check if there is a task running in the service. Return None if no task is running
Stop the running service. :param now: If True, stop the running service :type
Filter the queryset by lowercasing the email address.
Validates the password before updating the password. :param instance: the instance to update :type
Update the password of an existing user. :param validated_data: :return:.
Validate that the user's email address is valid. :param email: email address of the
Create a token for the logged in user :param request: The POST request :type request
Deletes a token. :param request: the request to delete the token :type request:
If the user is authenticated and the email address is not the same as the user's email
Handles a POST request by validating the user's data. :param request: The POST request
Update the expiry time of the object. :param commit: If ``True`` is True
Generate the context for a password reset email. :param notification: The email notification :type
Send an email to the user. :param notification: The notification to send :type notification
Handle the password reset notification.
The default handler for the email validation email. :param notification: Notification object :type notification
Authenticates the user with the key provided in the request data. :param request:
If the token is not expired, raise an AuthenticationFailed exception. :param key: The
Display the notebook content of a notebook in the notebook manager. :param obj: :param
Process HV plots. :param widgets: :param plots: :type widgets: list
Generate the custom javascript code that will be executed when the change is added to the plot.
Returns the widget for the given parameter name :param param_name: the name of the
Return the rendered object. :param obj: The object to render :type obj:
A wrapper for ``TextInput`` with a `text_widget` keyword argument.
Convert a list of named objects into a list of named objects.
Return the owner of the given method. :param meth: the method to get owner :
Assign user and password values from the http_auth parameter. :param http_auth:
Ping the remote host. :param params: optional parameters :type params: dict Return True
Perform a info request to the server.
Perform a health check on the device. :param params: dict of parameters :type params
Converts a number of bytes into a human readable string. :param num: number of bytes
Return the total load for each CPU. :returns: system load + user load + other
Return the memory size of the memory. :param human_readable: if True,
Get the current network up. :param bool human_readable: if True, return human
Get a list of volumes in this instance. :returns: list of volumes :rtype
Get volume by ID Args: volume_id (string): Volume ID (int): Volume
Returns the total volume size of the volume. :param volume: The volume to return :
Return the percentage of used in the volume :param volume: The volume :type volume:
Return the average disk temperature for a volume. :param volume: volume data :type volume
Returns the maximum temperature of a volume disk :type volume: dict :param volume: volume
Get a disk by id. :param disk_id: disk id :type disk_
Perform the login. :returns: True if successful otherwise False :rtype: bool.
Perform a GET request to the API. :param url: The URL to retrieve :type
Execute a GET request to the given URL :param request_url: The URL of the
Update the utilisation and storage objects with the access token. :rtype: None.
Get the utilisation object. :rtype: :class: :py:class:`
Return the storage object for this account. :rtype: :class: :class:`
Create a webhook context for the given request. :param request: The request :param body
The tenant token to use for authentication. :rtype: str :rtype: str
Build the attributes of the widget :param extra_attrs: the attributes of the widget :
Add apps to installed_apps. :param apps: A list of apps to override.
Disable apps from ``settings.INSTALLED_APPS`` or ``settings.INSTALLED
Return the global settings as a dict.
Handle a GET request.
Change a value in the config file :param key: Name of the section :param value
Migrate the old config file to the new one.
Start the oauth2-util server thread :param str authorize_url: URL of
Wait for the server to send a response.
Get the new access information from the oauth server.
Check if the access token and refresh token are available. :raises: KeyError.
Set the access credentials of the client. :param _retry: number of times to retry
Creates the manifest table in the given table name.
Split a full path into bucket and path Args: path (str): full path to split
Checks to see if a prefix is a prefix of an Amazon S3 bucket.
Remove None values from a dictionary. :param dict dict: :rtype: dict :
Add run_id to the manifest.
Check if a run_id is in the manifest. :param dynamodb_client: AWS
Extracts the schema from the URI. :param uri: the URI to extract :type uri
Fix the schema name to lower case and remove the underscore from the schema name :param prefix
Parse the unstruct into a schema and inner_data tuple :param unstruct: The
Transform a single line of events into a JSON-formatted event. Args: line (str
Convert a snowplow event into a json-schema-compatible json-schema.
Returns the name of the template used in the response, if it exists, otherwise None.
Prints the context as a list of strings. :param context: The list of dictionaries
Return a string representation of the variables. :param context: The context to use :type
Pformat a SQL string to be used in HTML output. :param sql: SQL string
Pretty-print an object for display in the Django context. :param object: The object
Format the summary HTML for a dictionary. :param dict: dict to format :type dict
Style the given text for display. :param text: text to style :type text:
Return a formatted string representation of the object. :param object: :param context: :
Format the given object to the given stream. :param object: the object to format :
Get a token from the string at the position `pos` in the string `s`
Return a list of LaTeX nodes for the given string.
Convert a string of LaTeX syntax to text. :param content: the string to
Convert a LaTeX string to text. :param latex: LaTeX string :
Unescape Unicode characters in string `s` :param s: string to decode :return
Retrieves organisation information. :param query_params: A dict of query parameters.
Returns a list of boards for the authenticating user. :param query_params:
Get a list of members. :param query_params: :return list of members
Updates an existing organisation. :param query_params: :return:.
Removes the member with the given ID from the member list. :param member_id:
Adds a member with the given id to this group.
Adds a member to the membership list. :param email: Email address of the member :
Gets the list information for a list. :param query_params: Dictionary of query parameters
Method to add a new card to the current account :param query_params: A dict
Retrieves information about the labels associated with this entity. :param query_params: :return
Gets a list of items in this collection. :param query_params: :return:.
Update label name. :param name: label name :type name: str :rtype
Updates the label with the given query parameters. :param query_params: :return:.
Build and return the authorisation url for the application.
Fetches card information. :param query_params: optional query parameters :rtype: dict
Gets a board. :param query_params: A dictionary of query parameters :type query
Get a list. :param query_params: :return:.
Returns a list of checklists for this account. :param query_params: A list
Adds a comment to the current user's account. :param comment_text: Comment text
Adds an attachment to a file. :param filename: filename of the file :param open
Add a new checklist to the current user's account. :param query_params:
Adds a label to the user's list of labels. :param dict query_params:
Method to add a label to the model. :param label: label to add :type
Adds a new member to the group. :param member_id: the ID of the
Retrieves member information for the current user. :param query_params: :return:.
Returns a list of Card objects representing a list of cards. :param query_params:
Returns a list of organisations for the current user. :param query_params:
Creates a new board. :param query_params: :type query_params: dict
Gets board information for this board. :param query_params: :return:.
Gets a list of lists. :param query_params: :return:.
Get a list of labels for this resource. :param query_params: :return:.
Method to retrieve a single card. :param card_id: card id :type card
Returns a list of checklists for this account. :rtype: list.
Get a list of organisations for the current user. :param query_params:
Updates the board. :type query_params: dict :param query_params:
Adds a new list to the current user's account. :param query_params: :
Add a label to the list. :param query_params: :return:.
Gets the checklist information for the authenticated user. :param query_params: :return
Get card details from the checklist. :returns: the card information :rtype:
Get a list of checklist items for this checklist. :param query_params:
Updates a checklist. :param name: name of the checklist :type name:
Adds a new item to this collection. :param query_params: :return:.
Removes the specified item from this collection. :param str item_id: The ID of
Updates the name of a checklist item.
Update the state of the checklist. :param state: The state of the checklist
Adds the API key and user_auth_token to the query_params.
Raise Trolly.Unauthorised and Trolly.ResourceUnavailable exceptions.
Build the URI from the given path and query parameters :type path: str :param path
Fetch a JSON response. :param uri_path: :param http_method: :
Create an organisation in Trello's organisation service.
Create a board. :param board_json: board json :type board_json:
Create a label from a label JSON. :param label_json: Label JSON :type
Create a new list in this trollo cluster. :param list_json: List
Create a new card. :param card_json: Card JSON :type card_json
Create a new checklist. Args: checklist_json (dict): The checklist
Create a member in this trollo instance. :param member_json: member JSON
Get an organisation. :param id: Id of the organisation :param name:
Get a board by its ID. :param id: board id :param name: board
Get a list. :param id: ID of the list :param name: Name of
Get a card by id :param id: card id :param name: card name :
Get a checklist by ID and name :param id: checklist ID :param name
Get member by id or name :param id: member id :param name: member name
Return the domain part of the given URL. :param str url: The url to be
Given a string, convert it to a list of raw text. :param str keep_
Set a password for a service. :param service: service name :param username: username
Split text at given locations. :param text: text to split :type locations: list
Mark all matches that match the regex in the text with the split_locations dictionary.
Mark the start and end of a regular expression. :param regex: The regular expression to
Entry point for the command-line tool. Args: argv (list): list of
Create a cipher from a password and salt. :param password: password to encrypt :param
Return the cipher mode. :param mode: the cipher mode :type mode: str :
Get the priority of this job.
Check that the scheme is correct.
Invoked when a publish message is received from the broker. :param topic: topic name :
Make a unique ID for this object.
Return a Deferred that fires when a connection is made to the state machine. :param request
Called when a connection is acknowledged by the client. :param response: The response to
Encode a string into a sequence of bytes that can be used as part of a query.
Decodes a base64-encoded string and returns a tuple of the base64 and base64
Encodes an unsigned 16-bit integer into a 16-bit value.
Encode the given value to a byte string. :param value: the value to encode :
Given an encoded string, return the length of the encoded string. :param encoded: the
Encode the header as a byte string.
Encode the client info to be sent to the server.
Decode the given packet into this object. :param packet: the packet to decode :type
Encodes the result into a byte string that can be used to encode the result.
Decode the given packet and store the resultcode and session. :param packet: the packet
Decode a packet into this message object. :param packet: packet to decode :type packet
Encode the message as a byte string. Return byte string. :rtype: bytes.
Encodes the message header into a byte string.
Decode the given packet. :param packet: the packet to decode :type packet: bytes
Encode the message to a byte string. :rtype: byte string :rtype:
Encode the message header and return the encoded header as a string :rtype: str.
Decode the packet and store information about the topic length and topic length. :param packet:
Decode the packet into this message. :param packet: The packet to decode :type packet
Returns the URL for the request. :param str method: The method to call :param
Make an HTTP request to the API. :param method: Method to call :param kwargs
Refresh the internal state of the comm. :returns: None :rtype: None.
Format the data according to the analytes in self.analytes Parameters ---------- data :
Fit the fit to the given data. Parameters ---------- data : list The data to fit Returns
Fit K-means cluster. Parameters ---------- data : array_like n_clusters : int
Predict the clusters for the given data Parameters ---------- data : list-like A list of
Map clusters to ids. Parameters ---------- size : array-like size of clusters sampled :
sorts clusters of data based on the sort_by parameter Parameters ---------- data : list of
Get date string from datetime string :param datetime: datetime string :param time_format:
Returns the total number of points in the given dictionary.
Get the maximum time span of the time span of each di in the dictionary :param d
Generate a unit picker string from an array or numpy array or numpy array Parameters ---------- a :
Convert a string into a human-readable representation of an element. :param s: the
Convert an analyte name mass string to name mass string.
Convert analyte name to a massname :param str s: the name of
collate files in input_dir into output_dir.extension can be a file extension
Return an array of indices of the boolean values in bool_array. Parameters ---------- bool_
Convert a list of tuples to a boolean array of bools Parameters ---------- tuples : list,
Perform a fast smooth algorithm on an array of numbers. Args: a: array of numbers
Fast gradient of matrix `A`. Args: A (numpy.ndarray) win (int
Find the minimum and maximum values in x and y Parameters ---------- x : array_like,
Cluster data using meanshift Parameters ---------- data : array-like Parameters ---------- bandwidth :
Cluster data using K-means clustering Parameters ---------- data : array-like n_clusters :
Read the defined srms from srm_file.
Read configuration from latoolscfg and return as dict. :param config: name of
Read LatoolSCfg configuration file and return config file and configparser.ConfigParser.
Copy the srm file to the destination directory.
Exclude downhole pixels from the filter. :param filt: filter array :param threshold:
Plot the autocorrelation range of the signal Parameters ---------- analyte : str or list of
Set up self.ns, self.bkg, self.sig, self.tr
r"""Calculate the ratio of a set of analytes to the standard. :param internal
Calibrate the given analytes using the given calibrated_ps.
Return a dictionary of ablation times for each number in self.ns.
Calculate the correlation between the two data points x_analyte and y_analy
Add a new filter. Args: name (str): name of the filter. filt_
Get parameters to be passed to the filter function :rtype: dict :rtype:
Plot a histogram of the data. Args: dat (dict): data to plot.
Load GID reference data from a GID file. :param str name: GID
Calculate the number of elements in a molecule. :param molecule: the molecule to calculate :
Generate a named tuple of namedtuples. Args: args (tuple): list of namedtuples
Annihilate a predicate into a stack of predicate-like elements. Args: predicate
Returns a copy of the stack with elements removed from the top of the stack.
Calculates Gauss-Weighted Statistics for a given distribution Parameters ---------- X : array_like
Gaussian distribution Parameters ---------- x : array-like x : array-like P :
Compute the standard error of an array.
Return a list of samples for the given subset. :param subset: name of the subset
Calculates the ratio of the samples in the dataset.
Makes a subset of samples. Parameters ---------- samples : list or list of samples Returns ------- name
Apply a classifier to a set of samples. :param name: name of the classifier
Filter the data by number of removed. Args: filt (bool): filter the data.
Filter the reports. Args: `filt_str` (str): The name of the
Export traces to a CSV file. Parameters ---------- outdir : str or list of str or
Save the log to a file. :param directory: directory to write to :param log
Apply a function to the left-hand side of the FoldLeft folding.
Calculate Bayes scale of a signal Parameters ---------- S : array-like Bayes
r"""median scaler. Parameters ---------- s : np.ndarray Returns ------- np.ndarray
Perform a noise despike on the given signal. Args: sig (ndarray): The
Exponential decay despike. Parameters ---------- sig : array-like expdecay_coef
Add a new component to the dataset. Parameters ---------- name : str The name of the component
Remove a parameter or list of parameters from the model Parameters ---------- name : list or list of
Clear the current state of the model.
Remove all unused components from the model.
Return the key of a component that matches the given fuzz key. :param fuzzKey:
Grab a set of filters from the input dataset Args: filt (dict or string):
Returns a string with information about the component.
Writes the log to a log file. :param log: the log to write :param
Reads a log file and returns a list of arguments that can be passed to the run
Get basic information about the modem account.
Send a message to a modem phone.
Parse a file or string into an SQLAlchemy object. :param file_or_
Given a URL, return a URL that can be used to link to the URL.
Generate the HTML markup for the thumbnail div. :rtype: str :rtype:
Return the code div for the code example. Return None if the code example is None.
Returns the code example of the notebook, if it's set, otherwise returns the code example
Return the url of the page.
Return the name of the output file with the given ending. :param ending: optional file
Create a python file from the notebook notebook. :param nb: notebook object :param force
Return a data download string. :param files: list of files to download :type files
Create a thumbnail for the image. :returns: None :rtype: None :r
Scale an image to the given max width and height Parameters ---------- in_fname : str
Save the reference image to a thumbnail file Parameters ---------- image_path : str The path to
Copy the thumbnail figure from ``self._thumbnail_figure`` to ``self.outfile
Returns the URL for the given notebook file. Args: nbfile (str): The notebook
Get language codes from db_table_fields :type field_name: str :param
Process a thumbnail file. :param thumbnail_file: The thumbnail file :type thumbnail_
Save the image before the save. :param model_instance: The model instance :param
Get the list of thumbnails for this resource. :returns: list of thumbnails :rtype
Creates a thumbnail of the source image. Args: size (int): size of the thumbnail
Delete the thumbnail for the given size. :param size: the size of the thumbnail
Create a thumbnail. :param source_name: Name of the thumbnail :param size:
Get a thumbnail for the given source name and size :type source_name: str :
Delete a thumbnail of a given size :param source_name: :param size: :
Called when a new message is received from the client.
Subscribe to a specific number. :param number: The number to subscribe :param callback:
Return the set of states that this message is in.
Send a message to the appropriate provider. :param message: Message to send :type message
Return a dictionary of blueprints for the receiver's blueprints. :rtype: dict
Receives a message from the queue.
Receives a status message from the gateway. :param status: the status message :type
Forward an object to one or more clients. :param obj: the object to forward :
Given a transaction object, sign it and return a tuple of the transaction and its hash.
Estimate the gas of a transaction using a web3 client. :param safe_address:
Estimate the gas used to sign the transaction. :param safe_address: The safe address
Write data to the file :param towrite: data to write :type towrite:
Read a line from the serial port.
Return True if the message has bad headers :param default_from: the default
Attaches a file to the message.
Add a service to the service registry. :param services: Service definitions :type services:
Import a configuration from a module. :param module_name: Name of the module
Add one or more resources to the resource registry. :param dict resources: A dictionary of
Returns the value of the key, raising an error if the key does not exist.
This method is called when an exception is raised during iteration of the iterator.
Setup the service. :param data_manager: The data manager :type data_manager
Return the number of nucleotides at a given wavelength. :param wavelength: wavelength of
Calculate the cauchy equation. Args: wavelength (float): the wavelength of the
Execute a DELETE request. :param endpoint: The endpoint to delete :param headers: The
Determines if two files are the same. :param path1: The path to the file
Create a reparse point in a directory.
Initialize the logger with the given arguments :param args: the arguments to initialize the logger.
Raise an error. :param message: the error message :type message: str :ra
Given a list of file_readers, return a list of file_readers that
Get the new column header for the VCF file. :param vcf_reader: :return
Given a list of file_readers, return a tuple of unclaimed_
Initialize population stats. Args: vcf_reader (openfile.Reader): vcf file.
Return a list of unclaimed_file_readers and claimed_vcf
Split the data into lines using self.line_terminators and self.line_termin
Return the first character of the line_terminators of the given data. :param data
Returns the suffix of the line terminator of the given data if it is one of the
Seek to the next line in the file, handling line-terminators and line-termin
Seek to the position of the previous line in the file.
Returns the last lines of the file. :param lines: the number of lines to
Returns the first lines of the file.
Yields the lines of the file, ignoring trailing line-terminators and line-termin
Claim all strelka files in input file_readers. :param file_read
Parses a VCF line and returns a VCFRecord object.
Convert a list of sample tag values into a dictionary of tag names to sample tag values.
Return a list of tags for this sample.
Join field names and values into a string. :rtype: str :rtype:
Return the format field to use in the format field.
Generate a string representation of the tag values for a particular sample. :param sample: The
Return a string representation of this VCF record.
Add a sample tag value to the tag values dictionary. :param tag_name: The
Add or replace filter if it is not already present :param new_filter: filter to
Returns a list of available category names for the given products.
Form used to display a list of products for a category. :param category: The category
Create a form for staff products.
Add an error to a product. :param product: The product to add :type product
Return a form factory for the model's fields. :param model: the model to be
Returns the list of items that are pending or purchased.
Sends an email to the given email address :param to: Email address :param kind:
Parse the OSM file into nodes, ways, relations. :param f: The file
Yields notes from OSM. :param feed_limit: :param interval: :
Returns True if the given user passes the condition. :param user: :class:`User
Check if a user is met. :param user: The user to check :type user
Returns the amount of quantity remaining for the given user. :param user: the user to
Filter products that are not in user's cart. :param queryset: list of products
Filter products that are in user's cart. :param queryset: list of products to filter
Filter the queryset before filtering. :param queryset: The queryset to filter :type queryset:
Filter queryset to only those that the user is not a presenter or a presenter or
Filter the list of conditions for a given user. :param conditions: The list of conditions
Create a new cart for the given user. :param user: The user to create.
Add a reservation to the cart if there are any vouchers in the cart.
Add a voucher to the cart.
Fixes vouchers that are not available in the cart.
Remove all discounts from the cart and add them to the cart.
Yield rows of a given content_type. :param content_type: :type content
Returns the form from the GET request. :param request: The request :type request:
Render the given data to HTML. :param data: The data to render :type data
Return a list of all available reports. :returns: list of reports :rtype:
Return a report of all items that have been sold.
List of payments. Return a report of the payments in the invoice. :rtype:
Reports the refunded credit notes :returns: A queryset report. :rtype: :
Return a list of cart status of all products in a list of products and their categories.
Displays a list report of the status of the given discounts. :param form: the
Returns a list of product line items for a given set of products. :param form:
Returns a list of invoices that have been paid for a particular date.
Reports credit notes. :param form: credit_notes form :type form: :class
List of invoices for the current invoice.
List all attendee profiles. :returns: list of attendees :rtype:
Return a list of people that have a speaker profile.
Return a list of categories that are not available for the user.
Returns the number of credit notes available for the user. :rtype: int.
Return True if the current user is sold out and the ticket has been unregistered.
View function for editing a profile.
Handle a profile request.
Handles product items. :param category: :param products: :param prefix: :return
Handle a voucher form and apply it to the current cart.
This action is used to form the invoice for manual payment. The form is submitted to the
Refunds the invoice. :param request: the request context :param invoice_id:
Extend the reservation of a user to a given amount of days. :param days: The
Sends an email to the user for each invoice in a category, product, and status.
Create a badges form for the invoices with product and category IDs.
Render a badge for a given user.
Return a list of available discounts for the given user.
Annotate with past uses. :param queryset: The queryset to annotate with :type queryset:
Return list of products for given category and products :param user: :param category: category
Applies this credit note to an invoice.
Return the cancellation fee for the credit note :param percentage: the percentage of the credit note
Generates a random access code.
Return an object from the name of an object.
Generate an invoice for a cart. :param cart: cart object :type cart: cart
Create a new invoice for the given user. :param due_delta: :type due
Applies credit notes to the invoice if credit notes were not unclaimed.
Return True if the given user can view the invoice. :param user: the user
Refresh invoice data from database.
Validate that the invoice is allowed to be payed to the cart.
Update the status of the invoice. :returns: None :rtype: None :r
Mark the invoice as PASLED :rtype: None :rtype: None.
Returns True if the invoice's cart revision matches the invoice's cart revision.
Update the validity of the invoice. :returns: None :rtype: None :ra
Mark the invoice as void.
Perform a refund of the invoice. :raises ValidationError: If the invoice is marked as
Sends an email to the user of the given kind to the invoice.
Update this object with the given data. :param data: dict of data :type data
Flattens a single field into a flat dictionary. :param field: The field to
Print the downloads of the files in the annotation. :rtype: None :rtype
Download a specific field from the GeneCloud file. :param field: The field to
Get all processors. If no processor_name is given, return all processors.
Print the inputs for a particular processor. Args: processor_name (str): The
Runs data from a string. :param strjson: string to run data :type str
Upload fields to a specific processor :param project_id: ID of the processor :param
Upload a file to S3 :param fn: File to upload :type fn: str
Download a list of data_objects from the Gendata API. :param data_
Get all subclasses of ``c`` that are subclasses of ``c``.
Get repo and project from command line Args: repo (str): repo name of the
Given a list of variant IDs, return a list of suggested changes for each of the variants
Generate final variants from a list of variants that have suggested changes to be merged into a single
Update the object's attributes from the cache. :param allow_partial: If True,
Return a copy of the input sequence with duplicate elements removed.
Authenticates with github and returns True if authentication is successful, False otherwise.
Prompts the user for a value from a list.
Get issue data for a saved issue :param issue: The saved issue :type issue:
Move saved issue data to the other one. :param issue: the issue to move :
Get the task data for a saved task :param task: The task to get
Gets the asana task with the given id. :param asana_task_id
Apply a key-value pair to the data dictionary. :param key: The key to
Wait for the queue to be empty and put the item in the queue. :param callback
Create a new issue task in the asana workspace. :param asana_workspace_
Return a list of the data types for this job.
Log a message to the EKM. :param logstr: the message to log
Initialize the serial port. Return True on success Return False on error. :rtype:
Set the maximum number of times to wait before waiting for a message to be polled.
Render the json readssince query. :param timestamp: The timestamp of the query :
Set context for EKM. Parameters ---------- context_str : str The context to set
This function is used to calculate the cost of a PF. :param pf: P
Set the EKM max-demand period. :param period: The period of
This command is used to set the meter password. :param new_pwd: the
Get the buffer of months in the given direction :type direction: int :param direction:
Assign a schedule to the EKM. Args: schedule (int): The schedule to
Assign season and schedule parameters to self.m_seasons_sched_params.
Assign a holiday date to the parameter m_holiday_date_params.
Request a list of reads from the DCNM. :param tableset: the number
Reads the month-tariffs from the USB device :param months_type:
This function is used to read the holiday dates from the EKWH server.
Return True if the settings file is well-formed.
Writes a command message to the terminal. :param msg: the command message to write :
Sends a password auth command to the EKM device. :param password_str:
Update all registered observers with the current request :returns: None :rtype: None :
Send a request to the EKM. :param send_terminator: if True
Requests a meter from the meter device :returns: the mean value of the meter.
Function to read a byte value from the device. :returns: byte value :rtype
Make sure that all fields in M_blk_a and M_blk_
This function is used to set the LCD display list. :param display_list:
Set the relay status of the device. :param seconds: The amount of seconds to set
Send a command to the EKM serial port. :rtype: None.
Send a SET_PIO_INPUT command to the EKM. :param line_
Send a zero-reset-table-wh command to reset the EKM.
This function is used to set the LCD to the given password. Args: password (
Iterate over the fields in the schema. :param fields: The fields to iterate :type
Iterate over a schema and yield tuples of field_schema, field_name, field_
Return a random text of the given length.
Generate a human-readable summary of elapsed and result. :param elapsed: :param result
Return the text with the given color. :param color: color to use :type color
Prints the given text on the screen. :param text: the text to print :type
Return the summary of a test result.
Parse command-line arguments. Args: argv (list): list of command-line arguments
Setup the result manager. :param config: Config object :rtype: :class:`
Run the main loop of the ivode.
This function runs the `transform` command with the given `config` and returns the result
Transform describe node. :param node: AST node :param context_variable: context variable
Transform the describe body of a group into a list of examples.
Transform an example node into an ast.FunctionDef.
Transform the body of an example statement into a list of AST nodes. :param body:
Return an ast.Arguments object that contains only the ``self`` argument.
Register this class as a hook to the filefinder.path_hook.
Convert source bytes to Python source code.
Apply an argument parser to the command line arguments. :param argumentsparser: the argument parser
Load module by name.
Load imports from a given path. :param path: Path to import from :type path
Discovers all files in the given path and yields them in the filter_specs.
Remove a file from the places config.
Add restart message to message list Args: places (list): list of places to restart with
Call the function with the results. :param results: The results to call :type results
Make a service with the given options :param dict opt: the options :type opt:
Refresh a session for a node. :param node_id: id of the node to
Remove expired nodes from the cluster :param node_ids: The list of node ids to
Remove a node from this node list Args: node_id (int): ID of the
Get the last time this node was last updated. :param node_id: The node
Get all nodes from redis. Return dict with node_id as key and nodes as value
Refreshes the session of the nodes in the node list.
Increment the times modified counter.
Given a list of values, return a list of values separated by a delimiter.
Check that all files in the given path are corrupt. :param path: The path to
Merge the given status with this one. :param status: The status to merge :type
Return a query that matches any token that matches the given token. :param value: the
Return a query that matches the given value.
Creates a new service instance based on the given options. :param opts: :return:.
Parse the contents of the given reader until EOF is reached. :param parser: Parser instance
Returns an optional parser for the given parser. :param parser: the parser :type parser
Repeats a parser into a repeated parser. :param parser: The parser to use
Return a repeated parser. :param parser: the parser to use :type parser: parser
Repeats the given parser with the given separator. Args: parser: the parser to
Return a parser that accepts a repeated sequence of tokens, separated by the given separator.
Close the connection. Raises an exception if the connection has already been closed.
Check if the URL is valid and return True if it is valid. :rtype:
Create a heart service and set its parent to the master service :param master: master
Wrap a heart service into a multiservice. The heart service is wrapped in
Freezes the graph from a checkpoint. Args: input_checkpoint (tf.Graph
Freezes the model. Args: sess (tf.Session): the session to freeze
Save a graph only from a checkpoint to a file. :param input_checkpoint: The
Save weights from checkpoint. Args: input_checkpoint (tf.checkpoint, str): The
Load the saver from a checkpoint. :param sess: tf.Session :type sess
Parse ``tag`` tag. :param parser: the ``parser`` instance :type parser
Render the tag. This method is not implemented in the tag renderer.
Validate the number of arguments. :param tag_name: name of tag :param args
Get the context data of this tag.
Parses the template tag. :param parser: the template tag parser :type parser: `
Get the context data to be passed to the template tag. :param parent_context:
Converts a caffe model to a tensorflow session :param caffe_def
Freez the inputs using the caffe_to_tensorflow_session.
Save the graph of the caffe model to a file. :param caffe
Split a sequence into rows of `num_columns` columns. :param num_
Yields the elements of the given iterable that are the elements of the other iterable.
Remove duplicates from an iterable. :param iterable: The iterable :param key: The key
Take an iterable and return the next item in the iterable.
Suppress exceptions from a list of callables. :param callables: list of callables
Assert that items in iterable are ordered according to `comp` and `key` is
Swap partition results on miss. :param partition_result: The partition result :type partition
Get the first n queues from the queue list. :param n: the number of queues
Reset the iterator to the saved state. :rtype: :class:`itertools.
This function is used to parse the AS_VAR portion of the given token. :param
Return the public child of the chain at `chain_path` as a public keychain
Yields the nodes of the given object. :param obj: an object or list of
Return True if the object matches the given selector. :param obj: the object to
Parse the given selector. :param selector: the selector to parse :type selector: str
Return list of nodes that are parents of the given list of nodes.
Returns the siblings of the left-hand side of the left-hand side of the expression
Match all nodes in an object against a set of validators :param validators: List of validators
Send a GET request to the given URL. :param url: :param method: :
Expire all keys that have expired since the given age. :param age: The age of
Set a key-value pair in the store.
Returns a tuple of the value of the specified key. :param k: the key of
Check if a key exists in the store. :param k: the key to check :
Check if the given timestamp is a valid chain.
Create an instance of this class from a JSON string. :param input_json: The
Create a new instance of this class from an XML string. :param input_xml:
Use the minified version of the template name to get the minified version of the template
Get a list of lines from the log file. :param fn: :param max_
Returns a list of rows from the table. :param max_lines: maximum number of
Validate the token. :param token: The token to validate :param expected_data:
Return the Fernet engine object for the current app.
Validate a digest token using one of the supported digest algorithms. :param cls: :param
Create a token using the secretlink serializer. :param obj_id: ID of the
Computes a counter from a and b values. delta can be a float between 0 and 1
Calculates a 64-bit counter function using the `delta` parameter :param a: the
Calculates the average duration of a given total_duration. :param total_duration: total
Set up the sources. :param config: The configuration of the sources :type config:
Add one or more events to the event queue for a given source. :param source:
Called when a source watchdog is started.
Parse the given format string into a list of names and types. :param format: The
Parse a single line of a CSV file into a dictionary of key-value pairs.
Validate that expires_at is valid for the field's data. :param form: :
Verify a secretlink token and store it in the session :returns: None :rtype
Get the name of the device, if it's a mobile device, otherwise return the name
Print a warning message to the node. :param msg: :param args: :return
Connects all receivers to the notification service.
Create a link to the secret record.
Send an accept notification to the sender. :param request: the request object :param message
Sends email notifications to the sender of the receipt of the record. :param request: The
Send email email validation notification to the sender. :param request: request object :type request
Send a reject notification. :param request: Request object :param message: Message to send
Send notification email. :param to: The recipient number :param subject: The subject of
Create a new link. :param str title: The name of the link :param str
Validate the token. Return True if the token is valid, else False. :param token
Revokes this link. :returns: True if successful. :rtype: bool
Create a new request. :param recid: recid :param recid: rec
Get a receiver by request ID and receiver user ID. :param int request_id:
Confirms the email address of this request.
Create a secret link and return the secret link :param title: The secret title :param
Returns a SHA-512 hash for the given parameters.
Verify a message signature. Args: timestamp: The timestamp of the message signature.
Check if record is an embargoed record. :param record: Record to check
Validate and store an access request. :param pid: :param record: :return:.
Confirm an email for a record. :param pid: The record id :param record:
Return a new SSHCommandClientEndpoint instance.
Reverse the order of a column. :param col: column name :type col: str
Returns the name of the item that has been selected. Return None if the item has not
Return the list of items based on order_by and ascending. :rtype: list
Get the version of the interpreter. Return version string :rtype: str.
Set the version of the file to new_version :param new_version: the version
Starts the timer. :param int inter: The number of seconds to wait for the timer
Queue a single event to be sent to the queue.
Delete a list of secret links.
Stop the tester process and close all open connections to the tester. :rtype
Empty the queue of events and send them to the factory. :rtype: None.
Add one or more events to self.events if self.maxsize < self.max
Creates Elasticsearch client. :param str server: Elasticsearch server to connect to :type server:
Encodes an event into a protobuf event.
Encode the given events as a protobuf message. :param events: the events to encode :
Decode message from binary data :param data: bytes :type data: bytes :rtype
Sends a series of events to the device. :param events: list of events to send
Generate previews for a given image.
Retrieve preview data. :param str preview_id: ID of the preview to retrieve :
This is the main loop for the worker. :param t_q: :param r
Return True if log_time is more than log_interval seconds since last hot-loop
Abort the connection to the SASL server. :rtype: (int, float).
Mapping function for SASLPrepare. This function is called by SASLPrepare.
The `admin_footer` tag is used to generate the `admin_footer` tag
Build payment parameters from amount and client_ref. :param amount: Amount of the payment
Build the parameters for registering a credit card. :param client_ref: the client reference
Pay with an alias. :param amount: The amount to pay :param alias_registration
Get a short version string for the version of PyPI. :param version: Version string
Called when the constructor is finished.
Create and configure the shortcuts for the navigation up button :returns: None :r
Activates the item at the given index :param index: the index of the item
Select an item :param selection: the selection of the item :param previousSelection:
Navigate to the item at the given index :param index: the index of the item
Set the resource source and resource target path.
Fetch children of this node from the database. :rtype: list.
Returns the icon of the source at the given index :param index: index of the source
Executes the given command with the given arguments and returns the pid of the child process.
Get the maximum file descriptor supported by the server. :rtype: int.
Closes a file descriptor. :param fd: file descriptor to close :type fd: int
Closes all open file descriptors that are not in the exclude_fds list.
Redirect a stream to a target file. :param stream: stream to redirect to :type
Sets the widget attributes for the form fields.
Import app module and return sub module :param app_name: app name :param module
Import all modules in the project's INSTALLED_APPS and return them as a list
Include a template file or a dynamic template file or a dynamic include file.
Check if path is a valid file system path :param path: path to file system
Returns True if the url is a valid S3 URL. :param url: the S
Given a filename, return the absolute path to the template file.
Return a list of objects in the S3 bucket. :param s3_folder:
Build the JSON for the worklfow task :rtype: str :rtype:
Execute the workflow. :param override_wf_json: A dict of WF
Create an archive file from a folder.
Recursively create a directory, if it does not exist. :param p: path to create
List files that match the given pattern. Args: pattern (list): list of patterns to
Restore the folder to the latest version of the project. :param folder: the folder to
Creates a new client. :param access_token: The access token for the client :
Returns a list of file names for the given path :param path: The path of the
Download a file from Google Storage. :param path: The path of the file to
Checks if a file with the given path exists :param path: the path to the file
Get the parent of the given storage path :param path: the storage path :type path
Create a directory. :param path: the path to create :type path: str :
Upload a local file to the server. :param local_file: local file to
Deletes a file or folder. :param path: Path to file to delete :type path
Validate storage path. :param path: path to validate :type path: str :param
Create a new instance of the class. :param access_token: A valid access token
Creates a new OAuth2 token. :param access_token: The OAuth2 token
Gets entity metadata. :param entity_type: Entity type :param entity_id:
Deletes a project. :param project: project to delete :type project: uuid :r
Deletes a folder. :param folder: The folder to delete :rtype: None.
Copies the content of the source file to the given file ID. :param source_file
Returns the signed URL for the file specified by its UUID. :param file_id:
Emits a record to the database. :param record: The record to emit :type
Convert a service name to a service URL. :param service: Service name :type service
Set the response headers. :param headers: The headers to set :type headers: dict
Returns a copy of this request with the specified parameters added to it. :param params:
Throw an exception with the given exception_class. :param exception_class: The class
Return a list of field names that should be displayed in the list_display attribute.
Add a map job to the given job :param job: job :param func: function
Run oncotator on a single vcf. :param job: Job instance :param
Sorts the elements of the list using the given function. :param f: The function to
Return a list of datetime objects.
Load the port information from the loadexport.json file Args: folder (str
Shift the time of each element in the sequence by t. Args: t (float):
Return the sum of all the data in the image.
Collect RFXs from RFX.com. :param device: :return:.
Create a new user with the given username and password. :param username: username of the
Parse VN results. Args: soup (BeautifulSoup): BeautifulSoup object Return list of
Parse release results into a list of dictionaries. :param soup: BeautifulSoup object Return list of
Parse a list of producers from prod-staff.results.html :param soup:
Parse the character results and return a dictionary of character results :param BeautifulSoup soup: BeautifulSoup object
Parse tags results. :param soup: BeautifulSoup object :type soup: BeautifulSoup :return:.
Parse the results of a user request. :param soup: BeautifulSoup response to parse :return
Create a tar file containing a list of file paths. Args: tar_name (str
Applies the operation to each file in `file_paths` :param file_paths:
Copy a file from a job into a temporary directory. :param job: job to copy
Add docker_parameters to the list of docker_parameters to add to self.actual.
Refresh the metadata of the file.
Return a list of streams.
Export the stream data to a JSON file :param directory: the directory of the file
Parse search results. :param stype: Type of search result :type stype: string :
Reset the API key for this device. :returns: API key :rtype: str
Return a list of users in this user's account.
Run BWA index on a reference ID.
Establish a connection to the OrderDB server. :rtype: :class: :
Add a new stream to the schema :param streamname: name of the stream to add
Add a new stream with the given schema to the database. :param str streamName:
Insert a new value into a stream. :param streamname: The name of the stream
Start the syncing thread :rtype: None :rtype: None :rtype
Stop the syncthread thread.
Download a job from a given URL :param job: the job to download :param name
Uploads a file to S3. Args: job (Job): The job to upload file
Print a list of labels for a given ontology.
Print a list of all the parents of a given ontology. Args: ontology (str):
Returns the mean insert size of a BAM file.
Create a new file in the database.
Export data to a JSON formatted file in a directory. :param directory: directory to save
Return the device associated with this path.
Get a list of labels for a given ontology. :param ontology: A list of strings
Get the hierarchy of the ontology. :param ontology: The ontology to return :type ontology
Generate empty config file and remove it.
Get the path of the mount point for the current container :returns: path to the mount
Add an option to the argument parser. :param arg_parser: the argument parser :
Create an argument parser for the command line interface.
Create the command to create a pipeline.
Sets basic auth for the connection to the websocket connection. :param user_or_apikey
Handler for responses returned by the API. :param r: :param r: :return
Perform a ping request to the server.
Create a new resource. :param path: Resource path :param data: Resource data
Update a resource. :param path: The resource to update :type path: str :
Delete a resource. :param path: path to the resource :type path: str :
Subscribe to a stream :param stream: the stream to subscribe to :type stream: stream
Return the list of devices in this cluster.
Runs the cutadapt tool. :param job: :param r1_id:
Run samtools-faidx on a ref_id :param job: job object :
Run samtools index on a BAM file.
Run the sambamba markdup tool on a BAM file.
Run samblaster using samblaster.
Use Picard to mark duplicate BAMs and Bai files.
Run picard sort on a bam file.
Run a kallisto job. :param job: :param r1_id
Get the user affinity for a test. :param test: the test dataframe :rtype
Send a command to the websocket. :param cmd: the command to send :type cmd
Subscribe to a stream :param stream: stream name of the stream :type stream: str
Connect to the websocket server :returns: True if successful, False otherwise :rtype:
Starts the reconnect timer. :rtype: None :rtype: None :rtype
Resubscribe to all subscribed messages. :returns: None :rtype: None :
Called when the websocket connection is opened.
Called when the WebSocket connection is closed.
Called when the websocket connection has failed to connect :param ws: WebSocket connection :param err
Invoked when a websocket message is received. :param ws: websocket connection :param msg:
Ensure that the websocket connection is alive :param ping_timeout: :type ping_timeout
Run GATK select variants using GATK. :param mode: GATK
Check whether a BAM file exists in the local directory. :param bam_path:
Write the configuration to the config_path :param configuration: the configuration to write :type
Get the config.json file and return it as a dict :rtype: dict.
Get a single term from the ontology :param ontology: the ontology name :type ontology
Search for an ontology by name :param name: name of the ontology :param query_
Suggest a name from a list of ontology names Args: name (str): name
Iterate all descendant terms of a given iri. :param ontology: :param iri: :
Return an iterator of descendants of the given ontology. :param ontology: :param iri:
Iterate over the labels of a given ontology. :param ontology: the ontology to iterate :
Returns an iterator over the terms in the hierarchy. :param ontology: the ontology to
Run fastqc and return a tar of output files. :param job: :return:.
Add a stream to the query :param stream: Stream to add :param t1:
Start a job and return the hostname of the job. :param job: Job to start
Start a job in the spark container. :param job: the job to start :type
Starts the HDFS container. :param job: The job to start :type job:
Stop the spark container and remove it from the given filestore object.
Check the status of the spark container. Return True if the spark container exists, False otherwise
Given a zone name, return the name of the zone, or None if it does not
Fetch all the configuration chunks for a given zone. :param zone: Name of the zone
Merge multiple configuration chunks into a single configuration element. :param cfg_chunks: list of
Validate a changeset. :param changeset: the changeset to validate :type changeset: str :
Minimize the number of members by their fitness score :param members: A list of member
The average fitness score for each member in the group.
Calculates the average cost function value for each member of the process.
Return the median cost function value for each member of the group.
Returns the average of the parameter values for each member of the process :rtype: dict
Returns a list of member objects.
Add a parameter to the function. :param name: Name of the parameter :param min
Return a dictionary with key-value pairs converted to key-value pairs. Args: items
Return a list of environment variables that can be used as environment variables. :rtype:
Raise an exception to the callable. :param callable: The callable to throw :param exceptions
Transform a list of hits into a list of packages.
Transform the result of a function call to the appropriate type. :param typ: The result
Convert a HTML document to an XHTML document.
Convert an xhtml element into a html element.
Open a document in a web browser.
Drop this node from its parent node.
Drops the tag from the parent's list of tags.
Execute a css selector. :param expr: expression to evaluate :type expr: string :
Returns a list of namedtuples for each member of a log handler.
Get counts from environment variables. :returns: counts dict :rtype: dict.
Check if this is a single class class.
Returns True if the current module is a single module, False otherwise. :rtype:
Check that the request has a "params" key.
Check if the id is set in the request. :param request: The request dict :
Try to decode the given path using the filesystem encoding. :param path: the path to
Escape a list of parameter names and values in an object. :param obj: :param
Return the codec name for the given encoding. :param encoding: The encoding to use :
Detects the encoding of a UTF-8 string or UTF-16-LE string.
Return the remote address of the given forwarded_for list. :param forwarded_for:
Convert an object into a decimal.Decimal if it's not already a decimal.
Parse a string into a list of elements. Args: data (string): The string to
Parse the given file and return an etree.ElementTree.
Convert a ``BeautifulDocument`` to a ``BeautifulSoup`` tree.
Get the traceback of the current exception. :type ignore_system_exceptions: bool :
Return a string representation of the exception. :rtype: str :rtype: str
Render the HTML summary for this error. :param include_title: include the HTML summary
Yields a plaintext traceback of the tracebacks.
Render the source table.
Check if the given egg info matches the given search_name. :param egg_info
Return list of links sorted by their eggs. :param links: list of links :
Get the content-type of a given URL. :param url: the URL to get
Yield the links from the document. :rtype: list of Link objects :rtype
Check if the message is verifiable based on the version of the API. :returns:
Find data files for package in src_dir. :param package: package name :param
Exclude data files from package data.
Parse requirements file and return list of requirements. :param filename: path to requirements file :
Given an iterator of strings, join each line of the iterator into a single string.
Given an iterator of lines, remove comments from the line.
Validate that the node is of the allowed type.
Replace `node` with `node.attr` with `node.value.id`.
Coerce the given value to a number and return it. :param value: the value
Push the current app context onto the stack of _app_ctx_stack.
Pop the current app context from the stack and send the app context popped signal.
Return a copy of the current request.
Try to match the request url to the view args.
Push the current request to the top of the request context stack.
Check if a distribution is editable Args: dist (DistPackage): distribution to check Returns:
Add a function to be applied to the url value of the field.
Decorator to register a function as a URL default function.
Return the absolute root path for the given import name.
Return a Jinja2 loader that will load templates from the template folder.
Run the completion script.
Return the cookie domain for the given app. :param app: The app :type app
Checks if there is a purelib wheel in the wheel directory. :param name: name
Return a list of paths to uninstallation files for the distribution.
Check that the given version is compatible with the given version. :param version: the version
Build one wheel into a temporary directory and return the wheel path. :param req: The
Yield all symbol names, constants, and non-symbol names in a code object.
Writes the delete_marker_message file to the given directory.
Return True if the current process is running under the virtualenv. :rtype: bool.
Return the username of the current user.
Get the scheme dictionary for a distribution from the distutils command line Args: dist_name
Parse the cache-control header from the response headers.
Cache the response. :param request: :param response: :param body: :param
Loads the template from the given dev_path. :param dev_path: path to
Save a file to disk if it is dirty. :rtype: None :rtype
Convert the given value to the correct type. :param value: the value to convert :
Add the given filters to the filterer. :param filterer: the filterer
Adds handlers to the logger. :param logger: logger instance :param handlers: list of
Add handlers and filters to a logger. :param logger: the logger :param config:
Execute a file with the given globals and locals :param filename: The filename of the file
Override tempfile.tempdir with a replacement directory.
Replace "git" with "git" and "git" with "git" to get
Try to get an item from an object. :param obj: :param argument:
Generate the source file with the given name. :param source: source file :param name
Return the default cache path for the current application.
Find all eggs in a zip archive :param importer: :param path_item:
Find all distributions in a given path. :param importer: :param path_item:
Declare a package's namespace. Args: packagename: the name of the package
Returns the mro of the given class :param cls: Class to get the mro
Find the appropriate adapter for the given object. :param registry: Registry of adapters :type
Ensures that the directory exists. :param path: The path to be checked :type path
Iterate over all entry points in the distribution. :param group: group name :type group
Check if the given distribution can be added to this repository.
Evaluate the marker in the given text :param text: the text to evaluate :param extra
Evaluate `text` with ``markerlib``.
Format a log record. :param record: the log record to be formatted :type record
Get a decimal quantum. :param precision: Decimal precision :type precision :type precision
Returns the decimal precision of a number. :param number: The number to convert :type
Return the scientific notation of the number :param value: The number of
Return the class that is unpatched by this class. :param cls: the class
Check the requirements.txt against the requirements.txt file. :param dist: The distribution
fetches the build egg from the setuptools.command.easy_install.
Roll a dice. :returns: None :rtype: None :rtype:
Convert a price string into a PriceClass object :param obj: price string to parse :
Return an instance of PriceValidator. :param args: :param kwargs: :return:.
Validate the request. Args: request (Request): The request to validate Returns: None.
Get the method from the command arguments. :param args: command arguments :type args:
Apply the given method to the given arguments :param method: The method to call :param
Return the module name for this blueprint.
Return the blueprint to use for the current request.
Make an abstract distribution for the given req_to_install :param req_to_
Walk through the list of requirements to install and apply the handler to each of them.
Return a list of all namespace packages.
Return a serialized representation of an object. :param obj: the object to serialize :type
Tokenize the given docstring with the given annotation. :param doc: the docstring to tokenize
Merge the annotations of tokens_old and tokens_new. :param tokens_old:
Copy annotations from src to dest :param src: source tokens :param dest: destination tokens
Compress a list of tokens into a single list of tokens. Args: tokens (list):
Given a list of `Token` objects, return a list of ``markup_func``
Expand a list of tokens into a list of HTML tags. :param tokens: list of
Locate an unbalanced end and remove it from pre_delete and post_delete
Fixup HTML tags and tags from a list of chunks. :param chunks: list of
Flattens an element and yields a list of HTML elements.
Split a text into words. :param text: Text to split :type text: str
Returns the start tag of the element. :param el: :rtype: str.
Return a string representation of the end tag of the element. :param el: Element to
Serialize an element as an HTML fragment. :param el: :param skip_outer:
Fix up ins and del tags in the XML document. :param doc: the XML document
Build a cache URL for the current operation. :param kwargs: :type kwargs: dict
Auto-link the text of the given element into a list of elements. :param el
Remove all conditional comments in `doc` element.
Parses the given HTML string and returns a Document object.
Export the current version of the repository to the given location :param location: location of the
Get the revision number of the files in the directory at `location`. :param location:
Return the name of the package.
Determine whether to propagate exceptions. Return True if exception should be propagated, False otherwise.
Returns the path to the instance file in which this package has been imported.
Update the template context with the data from the template_context_processors :param context:
Handle an exception. :param e: the exception to handle :type e: :class
Handle an exception thrown by the client. :param e: Exception to handle :type e
Raises a routing exception if debug is enabled and request.routing_exception is a
Perform a full dispatching of the request and return the response. :rtype: Response
Return a default response for OPTIONS requests. :rtype: Response :rtype: Response
Create the url adapter. :param request: The request to bind to :type request:
Inject default values into the endpoint. :param endpoint: :param values: :return:.
Remove any duplicate values from an iterable. :param iterable: An iterable of values :type
Handle the may_requires section of the pkg_info file. :param pkg_info
Convert a requirement object to a requirements distribution string. :param requirement: The requirement :type
Convert pkginfo to metadata.
Yields all modules found in the package. :rtype: list :rtype:
Iterate over all the classes in the test suite.
Returns a generator of method names for all methods in the class.
Check if the given path is a module path :param path: the path to check :
Walks up the given basedir, ignoring directories that start with system_d.
Set default values for ``dump_arg_defaults`` and ``dump_arg_default
Loads the default values of the keyword arguments passed to the function. :param kwargs: dict
Set multiple key-value pairs. :param mapping: :param timeout: :return:.
Increment the value of the given key by delta :param key: The key to increment :
Return a string representation of the given object. :param value: the value to dump :
Build a dict of options from a request string. :param req: the request string Return
Populate the `link` attribute of this `Package` with information from the `finder`
Ensure that the source directory exists and has a source directory. :param parent_dir:
Delete the temporary source directory if it exists, otherwise delete the temporary build directory.
Return the distribution from the egg_info.txt file.
Return a list of site-config directories for the given app name. :param appname:
Yields the files of all modules in sys.modules and their sub-modules.
Restart with a reloader.
Returns the text representation of the given string or None if ``blank_if_none``
Try to find a CA bundle, or return None if it's not found.
Parses the given document using the specified treebuilder. :param doc: the document to parse
Parse the HTML document from the given stream. :param stream: the stream to parse :
Parse a fragment from a file-like object or file-like object. :param stream
Translates a word to a list of transmissions. :param word: word to translate :
Convert a list of tokens into a tdict and a list of tokens.
Starts the http server and binds it to self.host and self.port.
Print a report message to the console.
Load a bytecode from a file-like object or file-like object.
Convert a dictionary of stylesheet parameters to a dictionary of stylesheet parameters.
Run a command on this process.
Return the impl version string from the config file or sys.version_info if not set
Given a location and a distribution name, return a list of distribution objects.
Given a URL and a page, return a list of URLs to external pages.
Opens a local file or URL.
Remove paths from sys.path that have not already been added to sys.path.
Return a set of directories that can be found in the sys.path.
Add a package to sys.path and add it to ``known_paths``.
Add a sitedir to sys.path if it's not already there.
Check to see if usersite is enabled for the current process.
Use codecs.lookup to find the preferred encoding for the current locale. :rtype:
Set the character encoding of the current environment.
Add the globaleggs to sys.path if it's not already present in sys.
Fixes the system classpath to include all the classes in the sys.path list.
Wrapper for subprocess.Popen that enqueues stdout and stderr when the subprocess is closed.
Return True if we have pyrex installed.
Convert pyx sources to lang.
Run the application in the context of the given environ. :param environ: :type environ
Return the content of the given file as a file. :param request: :return:.
Return true if the given name is a URL. :param name: Name of the URL
Unpack a file from a URL to a local location. :param link: :param location
Download a URL to a temporary location.
Check download_dir to see if download_dir does not already exist :param link:
Formats a currency. :param code: currency code :param symbol: currency code :param
Register an exchange function to the component. :param component: The component to exchange :param
Decode the data. :param data: The data to decode :param decode_content:
The default template context processor.
Render the template with the given context and send a message to the user.
Render a template with the given context :param template_name_or_list:
Render a template string with the given context. :param source: The template string :param
Parse a version string into a Python version string. :param str version: the version string
Return True if the given name is declared in this context. :param name: Name of
Add name to the list of declared identifiers and add to the list of undeclared identifiers.
Handle `From` and `FromImport` nodes.
Service factory. :param app: the app instance :param host: the hostname of the
Return a unicode representation of the given object in a URL-encoded form. :param obj
Return a list of wheels that match the requirement.
Populate a `RequirementSet` with the given `RequirementList` Args: requirement_set
Exports the file at `location` to a temporary directory. :param location: the location
Looks up an item in a response group. :param str responsegroup: Name of
Iterate over all pages in the result set.
A amazonbrowsnode object for the ancestor of the element. Returns: amazonbrows
Return list of children of current element.
Get the element at the given path. :param path: the path of the element
Safely get element text :param path: path of the element :param root:
Safe get element date. :param path: :param root: :return:.
Retrieves the price and currency, if it is present, returns price and currency.
List Price and Currency. :rtype: tuple[float, currency] :rtype
Send the request to the client. :param request: :param kw: :return:.
Build the response and cache the response if needed. :param request: :param response:
Converts a string to title case. :param s: the string to title :rtype
Compare two constant time values. :param val1: :param val2: :type
Verify that ``sig`` matches the signature of ``key`` and ``value``.
Derive the key from the secret key. :param str key_derivation: The
Return the signature for the value. :param value: the value to sign :type value
Generate a signature for the given value. :param value: the value to sign :type
Verifies that the signature is a valid signature for the given value :param value: The value
Unsigns a signed value :param signed_value: the signed value to unsign
Sign the given value with this key.
Validate that a signed value is signed by this key. :param signed_value: signed
Serialize an object to a string using the given salt.
Raises an exception for a server-side error. :param request_id: the
Given a list of packages, require all parent packages to be in the list of packages.
Yields relative paths of all subdirectories in base_path. :param base_path:
Prepare the response to send to the client. :param request: the request :param cached
Unsign a wheel file.
Unpack the wheelfile into the given destination directory.
Install scripts for distributions in ``distributions`` Args: distributions (list): list of distribution
Create a new graph and arrange all of it's data :returns: None :r
Redraw the canvas of the graph. Returns: None :rtype: None :ra
Return the node with the given id, or None if the id is not found.
Called when a directed edge is changed :param new: if true, set new to false
Callback for each edge of a graph. :param object: graph object :param name:
Called when a component has changed.
Called when the left-click of the tool is pressed.
Called when a new diagram canvas is changed.
Clear the canvas of the diagram.
Called when the domain model is changed in the diagram. :param obj: the diagram object
Unmap a model object from the map.
Map a single element to a diagram.
Parse a string of data into a list of dictionaries.
Process the 'font' token.
Process ellipse. Args: tokens (dict): list of tokens. filled (bool):
Process polygons. Args: tokens (list): List of tokens. filled (bool):
Process a polyline. :param tokens: list of tokens :type tokens: list :r
Process text. :param tokens: list of tokens to process :type tokens: list of
Process image. Args: tokens: list of tokens to process Args: tokens: list of
Render a single file as a grid response.
Save an object to a.dot file :param obj: the object to save :
Load the.dot file and return the object :rtype: dict :rtype:
Check if a point lies on the rectangle :param point_x: x and y
Draw the bounding box of the object :param gc: the context manager :type gc:
Open a graph wizard. :param event: :returns: None :rtype: None
Start the database. :param context: the context to use :type context: :class
Parse dot code fired into a graph.
Create a new model from the given info object :param info: The info object :type
Open the file dialog and parse the file.
Save the model to a file. :param info: :param save_file: path
Save the model to a file :param info: :param info: :return:.
Configures the graph. :param info: the model info :type info: :class info
Configure the nodes of the model :param info: :type info: :class info
Configure the edges of the model. :param info: the info of the model :type
Show the godot details.
Add a new node to the graph :param info: the node info :type info:
Adds a new edge to the graph. :param info: the info of the edge :
Add a subgraph to the current request graph. :param info: the request info :type
Add a new cluster to the graph :param info: The cluster information :type info:
Return the selected graph or the default graph if none is selected :param parent: the parent
Godot options editor. :param info: GODOT info widget :type info
Configure the dot code to be displayed.
Called when the user clicks on the exit button :param info: Info object :type info
Move the components to the origin of their components. :param components: The components to move
Save data to a file-like object :param flo: file-like flo: file
Load an object from a file-like object. :param flo: File-like object
Save data to a file. Args: filename (str): Name of the file to save
Load an object from a file-like object. :param filename: The file-like
Create a property alias for an attribute of an object. :param name: Name of the
Parse a text file into a list of words. Parameters ---------- filename : str Path to file
List of start words.
Add a chain to the chain. Args: name (str): The name of the chain
Remove a chain from the chain list :param name: name of the chain to remove :
Build a chain from a list of source sources.
Create a DOT file with the given program and format. :param prog: program name :
Delete a node from the graph.
Return the node with the given id :param id: the id of the node :type
Delete an edge from the graph.
Adds a subgraph to the graph Args: subgraph_or_id (godot.
Called when a program is changed.
Set the _nodes attribute of all the edges of the graph.
Parse a graph from a dot file. Args: filename (str): path to graph file
Parse a DOT file or file-like object into a dictionary.
Build a top-level graph. Args: tokens: list of tokens of the graph.
Return time units and multiplier for a given number of seconds in seconds. :param seconds:
Formats the duration in seconds into a human-readable string. Args: seconds (float):
Loads the graph from the file path.
Create a graph tree view and return it :param parent: :class:`~graph.
Yield windows of an iterable.
Returns a list of children nodes and subgraphs for the given object.
Append a child node or subgraph to the given object. :param child: The child node
Insert a child node into the graph.
Delete a child node or subgraph from an object.
Called when the children has been removed from the parent object :param object: The object to
Called when the children of an object has changed.
Return the label for the given object.
Set the label of an object.
Called when the label of an object is changed. :param object: The object to be
Initialize the model. :param parent: Parent of the model :type parent: :class
Updates the editor with the current state of the object.
Add listeners to the node and edge events of the object.
Called when a node is replaced with a new node :param object: The node to be
Callback for nodes_changed. Removes nodes from the graph and adds them to the graph.
Add nodes to the graph. Parameters ---------- features : list of Feature objects Returns ------- None.
Remove old edges and add new ones.
Handle a edges change.
Add edges to the graph. :param list features: list of features :rtype:
Parse a xdot directive.
Called when the user clicks on the Drawing button.
Create a node for the given row_factory_kw Args: row_factory_kw
Return an edge object for the given row factory. :param row_factory_kw:
Create a mongoengine proxy to the database connection.
Parse the xdot-drawing directive :param new: the xdot-drawing
parse xdot label directive :param new: xdot label directive :type new: str
Called when the drawing property of the widget has been changed Args: old (int): The
Called when the position of the component changes.
Called when the position of the widget has changed.
Called when the user clicks on the right-down button of the tool.
Print a list of style definitions for a given style. :param style: Style name.
Draw the main layer.
Checks if a point lies inside the polygon :param point_x: x position of
Draws the mainlayer. The mainlayer is drawn from the start point to the end point
Dispatches an event to all registered engines. :param event: The event name :type
Run the function in the queue until the queue is empty or the stop signal is set.
Return a full URL for a given page number. :param page_number: the page
Render the previous and next links. :param scheme: :type scheme: str :param
Render previous and next and canonical links in SEO format. :param scheme: URL scheme
Create a URL identifier from user and password. :param user: :param password: :
Return a list of modules found in the given directory. :param directory: the directory to
Return a list of modules found in the given directory. :param directory: directory to search
Return a list of modules under the given module name. :param mname: module name
Ensures that the directory exists. :param path: the path to the directory :type path
Add the contents of a string to this blob. :param key: the key of the
Check that the card number is a valid Luhn card number.
Load the module with the given name. :param module_name: name of the module
Add a path to the list of paths.
Find and return a module in the list of paths. :param str module_name:
Split a line into two lines, taking into account the indentation of the line.
Remove all namespaces from the root element of the etree.
Check version consistency. :param desired_version: desired_version :param include_package
Create an instance of this class from a dictionary of keyword arguments :param kwargs: Dictionary of
Merge the new_dict into the current one. Args: new_dict (dict):
Execute the actions on the system. :param cwd: the working directory to execute :
Add the details to the error message :param message: The error message :type message:
Emit a record and send an email to the sender. :param record: Record to send
Add the image rendition to the template context :param value: The template to render :
Log a single attempt. :param key: The key of the attempt :type key:
Add a URL to the queue. :param url: The URL to add to the queue
Start all workers. :param workers_per_task: number of workers to start.
Set a key to a value in the kvstore :param k: the key to set
Get a key from kvstore :param k: Key to get :param wait:
Returns a dictionary of entries for a given key. :param k: key to search for
Search for a given key. :type k: str :param k: The key to
Delete a key from the kvstore :param k: the key to delete :type k
Plot a HEALPix map from a set of features. :param x: list of
Add a number of months to a timestamp. :param months: amount of months to add
Add a number of months to a date object. :param months: number of months to
Checks if the current day of the year is a valid christmas period.
Use the music service specified in `service_name` :param service_name: The
Use a storage service. :param service_name: name of the storage service :
Read data from CSV file and return as list of lists. :param label_column:
Return a list of items from a JSON file. :rtype: list of items.
Writes the given data to a JSON file. :param x: input data :param y
Return a list of elements from x to y that have the reference label `ref_label
Calculate the mean value of a labeled sequence of data. :param x: :param
Restores the data from the session. :param data_dict: the data to restore
Merge a, b into a :rtype: dict :rtype: dict :r
Import all blocks installed in installed_apps.py and add them to block_registry.
Verifies that the given block is valid :param block_type: The block type to verify
Register a block of the given block type. :param block_type: The block type
Unregister a block type from the registry. :param block_type: The block type to
Convert a mp3 file to a mp3 file. :param file_name:
Check if the desired version is a reasonable version. :param desired_version: The desired
Check if SSL is enabled and redirect to the correct URL. :returns: None :r
Parse a string representation of a Content-Type header. :param str content_type:
Parse a comma-separated list of values. Args: value (:obj:`list`):
Resize an image to fit the specified width :param image: The image to resize :type
Download a video from Youtube. :param url: URL of the video to download :
Establish a connection to the SABnzbd Server.
Upload a file to the server. :param file_name: File name to upload :
Create the music folder if it doesn't exist.
Update the filenames of the sky file.
Read the A-PHI from a file. :param file_name: name of
Scale the A-Hilbert-Hamiltonian. scale_parameter: scale
Reads the `a_water` absorption file. :param file_name
Reads the pure water scattering file from disk.
Reads the iop file from disk and returns the iop value :param file_name
Write iop to file Args: iop (numpy.ndarray): iop to write
Calculates the b value based on scattering_fraction. :param scattering_fraction:
Build self.A. Parameters ---------- self.a : list of lists of lists of
Build the C matrix. :returns: None :rtype: None :rtype:
Builds all IOPs. :returns: None :rtype: None :raises
Sets the batch parameters of the model. :param saa: list of SAA
Read a parameter file and return as a dictionary. :param file_name: path to
Converts a comma-separated list of strings into a list of floats.
Set the signal handler for the given signals. :param signals: list of signal names.
Callback for SIGHUP and SIGQUIT signals. Args: signum (int): The
Called when a SIGKILL signal is received. :param signum: Signal number :param
Pauses a signal. :param signum: Signal to pause :type signum: int :
Abort the process with the given signal code. :param signum: the signal code :type
Triggered when the process is listening to the status signal. :param int signum: Signal
Remove an event from the event list :param event_list: The event list to remove
Fetch a metric and return a list sorted by time. :param args: :param kwargs
Set self.pargl, self.kargl, self.kargl,
Copy signature information from a partial instance to this object :param inst: The partial instance :
Return a tuple of the new argv and extra_argv. :param new_pargs
Check if we should ignore certain metainf files.
Generate a key for a file based on the file name.
Convert a VLQ string to a 32-bit integer. :param data: A
Parse the header of the user data file.
Convert seconds to a string representing the duration in hours and minutes. :param seconds: seconds
Print human-readable information about the player.
Reads the data from the UI and stores it in the self.data :returns: None
Search the file dialog and display the result grid :returns: None :rtype: None
Writes a single report to a file. Parameters ---------- file : str File path to
Do the data processing of the result file :returns: None :rtype: None.
Display the connection to the graphic. :returns: None :rtype: None.
Displays the error message label. :returns: None :rtype: None :rtype
Hides the error message label :returns: None :rtype: None :ra
Run the batch process and display the progress bar. :returns: None :rtype:
Cancels the planarrad dialog :returns: None :rtype: None :r
Ask the user to quit the GUI :returns: None :rtype: None :ra
Saves the figure to disk.
Open the log file and show it.
Open the documentation page and display it in the main window :returns: None :rtype
Set the prerequisite actions. :returns: None :rtype: None :ra
Clicks the context menu if the current tab is the normal tab mode.
Move the mouse to the target area.
Display the graphic at the given x and y coordinates.
Create a lockset for the given genesis block, signing it with the given private key.
Sign this message with a private key.
Return the SHA-3 hash of this message.
Check that the dataset is valid and has at least one quorum and no no-quorum
Issue funds. :param amount: Amount of funds :param rtgs_hash
Returns the last lock for all rounds in the pool. :rtype: str.
Returns the last voted block proposal.
Returns the last valid lockset for all rounds.
Return the round timeout for this proposal, taking into account the round_timeout_factor.
Called when a proposal is ready to be processed by the client :param proposal: the proposal
Generates a list of private keys for a given number of colors. :param num: number
Add a delay to the latency of a packet. :param sender: :param receiver
Delivers a packet to the given sender. :param sender: :param receiver:
Convert an address to a native contract class. :param address: address to convert :type
Add data to the filter list :param data: The data to filter :type data:
Calculate the image coordinates from a VGG image vector Parameters ---------- x : array-like A
Convert a numpy array to vgg format Parameters ---------- X : numpy array A numpy array
Returns a function layer for the given layer name :param layer_name: layer name :
Returns the outputs of the layer with the given name :param name: layer name :type
Get features for each layer. :param x: input data :param layers: list of
Create a key file with a base64-encoded base64-encoded base64-encoded
Finish the process and return the exit code. :rtype: int.
Release this table. :returns: None :rtype: None :raises: G
Returns a list of table names to use in Giraffe.
Remove flags from the compiler_so list. :param remove_flags: list of flags
Try to find the latestteradata version.
Get a value from the configuration file.
Set the value of the given key to the given value. :param key: The key
Process the output of the table command :param line: the line to print :type line
Writes the default configuration to a yaml file.
Set the names of the columns to filter. :param names: list of names to filter
Returns a string representation of the current object in the database. :param str delimiter: The
Convert a string representation of a floating point number to a floating point number.
Given a string representing a list of gains, return a dictionary of those gains.
Parse a device settings string. :param string: string to parse :type string:
Wrap the given text with the given indent. Args: text (str): the text to
Detects devices. Args: soapy_args (str): soapy_args (
Sets the center frequency of the PSD. :param center_freq: the frequency of the
Compute the result of the Fourier transform operation Parameters ---------- psd_state : numpy.ndarray
Wait for the result of the PSD operation. :param psd_state: :return
Updates the PSD using Welch's method Args: psd_state: the PSD state
Reads a PWR file from the file-like object f.
Writes a PWM file to a file-like object. Args: f (file-
Submits a function to the work queue, setting max_queue_size_reached
Convert a time value into a repeated time value. :param bins: number of bins to
Create a histogram buffer with the given number of repeats. :param bins: number of bins
Sets up internal data structures. :param bins: number of bins :param repeats: number
Stop writing data to the device, and close the stream if running in streaming mode.
Run cmake.cmake with the given arguments.
Return a set of datetimes within the given time range, optionally filtered by `number`
Mask a datetime object to mask hour, minute, second and microsecond fields. :param dt
Given a datetime, return a `datetime.timedelta` of `firstweekday` days
Convert datetimes to a list of datetimes to be deleted. :param datetimes:
Given a list of dates, return a list of dates that should be kept.
Given a list of dates, return a list of dates to delete.
Return SPI control register pattern. :param read_write_cmd: the read-write
Read a single bit from memory. :param bit_num: bit number :param address
Write a single bit to the memory. :param value: True or False :type value
Return the number of bits in a bit pattern. :param bit_pattern: bit pattern
Export the interrupt pin into the userspace.
Set the edge of the gpio interrupt device.
Wait for a file to exist, raising an exception if the file does not exist.
Register a callback to be called when a specific pin is selected. :param pin_num
Deregisters one or more pin function maps for a given pin. :param pin_
Enables interrupts for the GPIO pin. :returns: None :rtype
Send some bytes to the IOC device. :param bytes_to_send: bytes
Renders the tab as a HTML string.
Return True if there are any errors attached to the form field. :param form: the
Render a link to the form. :param form: the form :param template_pack
Extract the version number of the package.
Add 'container_id' to the form kwargs. :param str form_id:
Check the status of the response. :param response_json: The response to check :
Make a GET request to the API. :param url: The URL of the request :
Calculate the humidity from a temperature to a dewpoint in celsius.
Calculates the Dewpoint of a temperature. Args: temperature (float): temperature in degrees
Publishes the message to the server.
Calculates the CRC of the given data.
Verify if data is a valid vprocrc file :param data: data to verify :
Unpack a Storm date into a string. :param date: Storm date :type
Returns True if archive_rev_b flag is set, otherwise False.
Wake up the device.
Send a command to the device. :param cmd: Command to send :param args:
Get the new archive fields from DMPAFT. :returns: dict of new fields
Parses the fields of the archive. :returns: dict of fields :rtype: dict
Update all pub_sites for a given station. :param station: :param interval:
Initialise the log handler. :param quiet: if True, set the log level to
Return a list of pub_services for the given options. :param opts: dict of
Return the value of the record.
Set some parameters to be passed to the Wind object. Args: pressure (str):
Set the arguments to be passed to the command.
Publish the command line arguments to a file.
Check if the requirements satisfy the requirements list. :param requirements: A list of requirements to
Push a new context onto the stack.
Remove the override context from the stack.
A context manager that overrides the context of the context. :param override: The context
Pushes an additional context onto the stack. :param additional: The additional context to push
Pops the top of the stack and raises an exception if the stack is empty.
Add additional items to the stack. :param additional: Additional items :param use_parent
Given a list of field names, return a list of duplicate field names.
Return a string representation of the results.stats dictionary.
Extract params from the query. :param query: The query :param user_ns:
Returns a dataframe containing the data of this object. :rtype: pandas.DataFrame.
Return a networkx Graph object for the results of the query. :param directed:
Returns a plot of the points in the grid. Parameters ---------- title : str title of the
Generate a CSV file from the table.
Add the widget to the context.
Returns the list of widgets sorted by widget name, widget name and widget position.
Returns a list of widgets that need updating :returns: List of widgets that need to be
Register a widget to the widget registry :param widget_cls: widget class :param widget
Unregisters a widget class :param widget_cls: the widget class :type widget_
Get the last update of the dashboard widget.
Save the setting with the given name and value :param setting_name: The name of
Check if we need to be updated. :rtype: bool :rtype: bool
Concatenate two arrays together into a single numpy array.
Check if arguments are compatible with SparkContext or SparkArrayspark Parameters ---------- args : list of
Format axes into a list or tuple of axes. :param axes: :type axes:
Convert a function to an RDD of RDDs Parameters ---------- func : function
Aligns the matrix with the given axes :param axes: :param key_shape:
Convert this array to a spark-compatible array Parameters ---------- sc : SparkSession The SparkSession
Drop-in replacement for numpy.ndarray.tordd.
Given a plan, return the number of chunks in the plan. Parameters ---------- plan : list
Returns a boolean mask for a given set of indices.
Return a new RDD with npartitions elements reparted. :param npart
Stack the underlying numpy array. :param size: size of the array :type size:
Aligns the shape with the given axis :param axis: The axis to align :type
Returns the first item in the RDD. Return the first item in the RDD.
Return the mean over each group Parameters ---------- axis : `axis` : `xarray.
Variable along along axis Parameters ---------- axis : `~astropy.units.Unit` `
Return the standard deviation over each group Parameters ---------- axis : `~astropy.units.
Return elements summed across `axis` and `keepdims` Args: axis (int
Calculate the maximum value of each element in `axis` Parameters ---------- axis : int, optional
Select the minimum value along an axis. :param axis: :param keepdims: :
Returns the transpose of this array Parameters ---------- axes : array_like A list of numpy.
Return a new matrix with the first and second axes swapped.
Reshapes keys and values to a new shape. :param shape: shape of the
Reshapes the key-value matrix to a new shape. :param shape: The
Cast all elements of the RDD to a given type.
Clip each value in the RDD to a given range. Args: min (int):
Convert this RDD to an array of the same shape :rtype: numpy.ndarray
Convert an argument to a tuple if it's not already a tuple :param arg: The
Packs a list or tuple into a list or tuple of tuples, lists or ndarrays
Check if shape is valid for given axes :param shape: shape to check :type shape
Returns True if numpy arrays a and b are all equal, i.e.
Takes a list of integers and a dim and returns a list of integers.
Convert a slice into a slice of dimensions `dim` :param slc: the slice to
Check if new and old can be transposed. Args: new (list): list of
Check that the product of two values are equal.
Recursively concatenate a list of values into a single-dimensional array. Parameters ---------- vals : list
Expand an array with extra dimensions Parameters ---------- arry : array The array to expand.
Lookup the correct constructor for the given arguments. :type args: list :param kwargs:
Construct one-dimensional array of given shape with given dtype and order Parameters ---------- shape : shape
Construct an array of given shape and type, filled with zeros.
Concatenate `arrays` into a BoltArrayLocal Parameters ---------- arrays : `numpy.ndarray
Calculates the discrete likelihood of the data at a given location. Parameters ---------- data : numpy array
Calculate the most likely alpha for a given range of values Parameters ---------- data : list of
r"""Alpha estimation for discrete MLE. Parameters ---------- data : array_like xmin :
Find a discrete best alpha value for a given set of alpharar ranges.
Plot plot of the mean and standard deviation of the data Parameters ---------- x : array, shape
Compute the lognormal distribution of the distribution Parameters ---------- doprint : boolean, if
Remove tags and attributes that are not allowed in `turbo_allowed_tags`.
Add a Yandex request to the analytics service.
Return a list of tags for the given tags. :param tags: list of tag names
Returns the MD5 hash of the key.
Returns the SHA-256 hash of the private key. :rtype: str.
Returns the SHA512 hash of the private key. :rtype: str :rtype
Parse a string of bytes to a long. :param data: bytes :rtype:
Decode a base64-encoded public key :param str pubkey_content: The public key
Process the SSH_RSA key. :param data: The bytes of the key :type
Process the DSS data. :param data: The data to process :type data:
Process ECDSA SHA data and store the key and curve information. :param data:
Process ED25516 data. :param data: data to process :type data:
Parses the keydata. :param keydata: The key data to parse :type key
Returns a reference to the list of all known mechanisms for the account. Returns: list
Main entry point for the CLI. Args: properties (:obj:`dict`): The properties
Initialize the setuptools distribution with the given minimum version. :param minver: minimum version
Create a WAV file and return it :rtype: None :rtype: None
Return the css file for a given version of h5bps. :param version:
Return a normalized version of the static page. :param str version: the version of the
Generate a fontawesome page.
Return the Django frontend modernizr page.
Return a link to the static page with the given version number. :param version: version
Return a link to the jqueryui static page :param version: the version of the jquery
Returns the Django datatables template. :param version: The datatables version :type:
Return a css tag for the datatables page. :param version: the version of the
This function is used to render the datatables-themeroller.html.
Return the Django frontend formset. :param version: The version of the formset.
Return a string with the HTML tag for the scrollto page. :param version: the
Return a Jinja2 smoothscroll template. :param version: the Jinja2 version
Return the HTML code for the Twbs static page :param version: the twbs version
Return a string suitable for setting the Django frontend's ga_setdomainname setting.
Generate the authentication hash for the given user. :param user: User to authenticate :param
Calculates the expiration time for a given number of minutes. :param minutes_valid: :
Generate a token for the user. :param user: the user object :param purpose:
Serialize a user object into a dictionary of fields. :param obj: User object :type
Update a user profile :param selector: Profile selector :type selector: dict :param update
Send a message to the user_login_failed signal if the credentials are not None.
Validate a user. :param str token: The token to validate :param int minutes_
Check if the current request is secure :param request: :rtype: bool :r
Get the username of a user :param user: The user to get the username of :
Create a new user and return a token for the user. :param params: Dictionary of
Perform a login and update the user subscriptions. :param user: The user to log in
Unsubscribes the current user to the current user. :rtype: None.
Login with a password or resume token. :param params: :type params: dict :
Authenticates the user with the given username and password. :param params: Dictionary of
Attempts to login with the resume token. :param params: The resume token :type params
Send a signal to the sender of a password reset. :param params: :param params
Reset the password of a user.
Recursively merge two dictionaries together. :param lft: :param rgt: :return
Return the meteor ID for the given object. :param obj_or_model
Return the meteor_ids for a given list of object_ids.
Return meteor_id if meteor_id is None.
Given a list of meteor_ids, return a dict of mete
Get meteor_id from meteor_id_field or meteor
Set default forwards for the operation. :param app_name: the application name :
Set the default reverse operation for the operation. :param app_name: :param operation
Truncates the database backwards :param app_label: the name of the application :param
Truncate the database backwards :param app_label: :param schema_editor: :
Initialize the build options.
Finalize the options to be passed to the build_py.build_py method.
Join a list of strings to a directory path.
Seed the random number generator. :param values: a list of values :type values:
The state of the state machine. Returns ------- state : dict: state of the state machine
Generate a random string of given length using the given alphabet.
Generator over all API endpoints in the given object :param obj: the object :type obj
Clears the api_path_map_cache attribute of all API providers.
Pretty-print a value.
Called when the websocket connection is open.
Called when the connection is closed :param args: :param kwargs: :return:.
Called when a message is received from the websocket connection :param message: The message to process
Take a JSON message and return a generator of data frames. :param message: The message
Process ddp messages. :param dict data: ddp messages :type data: dict
Dispatches a message to the appropriate handler. :param msg: The message to dispatch :
Create a new connection to the backend. :param version: version of the version of the
Receive a ping from the server. :param id_: the ID of the ping
Receive a sub request. Args: id_ (int): ID of the sub
Unsubscribes to the channel. :param id_: ID of the channel to
Receive a method call to the API. :param method: method name :param params:
Return a list of information about the DPP sockjs server.
Command-line entry point for the command-line tool.
Print a message only if the verbosity level is greater than 0. :param msg: the
Stop all servers and wait for them to exit. :rtype: None.
Starts the worker thread and waits for all threads to be started.
Execute the main loop of the psycopg2 process.
Turn on green and patch psycopg.py to use psycopg2
Generates a random meteor ID.
Autodiscover DDDP and return a new API object.
Return a dictionary representation of the error.
Get an object by name using a factory. :param name: The name of the object
Emits a new log record. :param record: the log record :type record:
Add a resource object to the router. :param path: :param resource: :param
Send a message to the GCM device. :param message: the message to send :
Send a message to one or more registration_ids to the push server.
Fetch inactive registration id's from APM.
Send a GCM message to the given registration_id.
Send a bulk message to a list of registration_ids :param registration_ids:
Send a JSON request to the device and return the result :param ids: A list of
Send the data to the API. :param data: the data to send :param content
Import and return a model from the given module_location. :param module_location:
Search giphy. :param term: search term :param phrase: search phrase :
Translate a phrase using a giphy API key :param term: :param phrase:
Get a list of trending giphy objects. :param limit: number of
Return a Giphy object for a given gif_id :param gif_id:
Screensaver function. Args: tag (str): Screensaver tag.
Upload a file to GIPHY :param tags: list of tags to upload :
Make sure the values in the dictionary are converted to integers.
Make a request to the API endpoint_name is the endpoint_name of the
Fetch giphy images from the Giphy API. :param rating: the rating
Returns a GiphyImage object for the given gif id. :param gif_id
Upload a file to the Giphy API. Args: tags (list): list of
Return an `ExtensionElement` with the appropriate ``access_control`` value. :param
Authenticate using the Youtube API.
Upload a video to Youtube using a POST token. :param title: Title of the
Check the upload status of a video entry. :param video_id: The ID of
Update a video entry. :param video_id: ID of the video to update :
Delete a video entry. :param video_id: ID of the video entry :type
Check video availability. :param video_id: video id :type video_id:
View view for a single video :param video_id: video_id of the video
List all videos for the authenticated user. :param username: The username of the video :
Upload a video to a youtube.swf.io or youtube.org.
Upload a youtube video to the current user's account. :param request: the request
Upload a video to the youtube upload page. :param request: :param status:
Remove a Video object from the database. :param request: :param video_id:
Returns a list of entries for the video.
Save the video entry. :param args: :type args: :class:`~~
Delete a video :param args: :param kwargs: :return:.
Updates the metadata of this resource. :param params: Dictionary of metadata to update :
Update an existing metadata field with a new value. :param field: The name of the
Update this item. :param attrs: Attributes to update :type attrs: dict :r
Parse string `s` into a list of nodes. Args: s (str): str
Return a string representation of a list of trees. :type trees: list :type trees
Load a file-like object from a file-like object.
Read data from a file and return as a dict. :param fname: file name :
Parse a node from its string representation. Args: s (str): The string to parse
Create a new node. :param name: name of node :param length: length of
Return a string representation of this node's descendants, with a newick label.
Return the node with the given label, or None if not found.
Remove any descendants that are not in `leaves` and not in `leaves`
Removes all internal names from the node tree.
Remove all leaf names from the node's attributes.
Return a copy of the input json_str with all the attributes that should be disposed
Raise an exception if the setting does not exist :param name: the name of the setting
Return a list of arguments for the given argument name.
Returns a function that takes a callback function and a set of arguments. :param callback:
Get a cookie from the cookie monster. :param name: Cookie name :param default
Clear a cookie from the response. :param name: the cookie name :type name:
Redirects the user to the OpenID provider. :param callback_uri: The URI of the
Get the authenticated user from the request cookie :param callback: The callback function :rtype
Return the request parameters to be passed to the OAuth service :param url: The URL of
Redirect the user to the given OAuth scope.
Concatenate a URL with a list of arguments. Args: url (str): The
Parse a single line of a header line. Args: line (str): The line to
Add a new header value to the end of the existing header value.
Gets a list of values associated with the name. :param name: the name of the
Parse a line of text into a dictionary.
Parse a string of headers into a HHeader object :param headers: a string of headers
Normalize the given header name. :param name: The header name :type name: str
Convert the given value to UTF-8 string.
Return a unicode string representation of the value. :param value: the value to convert :
Converts a bytes object to a unicode string.
Recursively convert bytes to unicode. :param obj: The object to convert :type obj:
Check that this plugin is not used twice in the same plugin.
Select the best matching policy for this request. :param origin: :param request_method
Given a grid of points, find the points that are occupancy from the grid.
Write a GRO box to a GRO file. :param outfile: path to G
Write a PDB file with the given atoms. :param outfile: path to the PDB file
Determine the number of molecules in a list of molecules. :param total: total
Rescales a PBC to a certain area for a list of proteins Parameters ---------- pb
Iterate over the contents of a package resource file. :param str filename: name of the
Adds a message to a user's message list.
Sends a message for a list of users. :param users: list of users :type
Get all messages for a user from the cache.
Adds messages to the response if the user is authenticated. :param request: the request
Check if config file exists, and update if save is True. :param msg: :
Verify that the profile name is set in the config data.
Retrieve data from config and store it in the message. :param msg: message to retrieve
Retrieve the password from the configuration. :param msg: The message :param cfg: The
Update the config data for the given message :param msg: The message :param cfg:
Update the config_pwd with the auth information from the message Args: msg (Message):
Create a profile for a message type Args: msg_type (string): The type of
Display all required items for a given message type.
Get data from user for a given message type :param msg_type: type of message
Get authentication details from the user.
Configure a profile for a message type. :param msg_type: message type :param
Write data to config.data. :param msg_type: :param profile_name
Write auth info to config.cfg.pwd.
Send the message to the server. :param encoding: encoding of the message to send :
Create a message of the given type Args: msg_type (string): The message type
Validate the input of a message. :param msg_type: Message type :param attr
Validate that ``value`` is valid for ``twilio`` attribute. :param attr:
Validate a slackpost attribute. :param attr: The attribute to validate :param value:
Validate ``whatsapp`` attributes of ``whatsapp`` attributes.
Coroutine to send a message to RabbitMQ.
Add a message to the message queue. :param msg: Message to add :type msg
Reads the body of the file specified by the ``kwds`` argument. :param kwds:
Return a dict of keyword arguments that are not in the original keyword arguments list.
send a message to a message_type :param msg_type: Message type :param
Returns the chat ID for a user. :param username: username of the user to get
Send the content of the message to the server. :param method: the method to send
Construct and send the message to the broker.
Given an address, return a tuple with the server name and port number. :param address
Create the email object and add the headers, body, and attachments to the email message.
Adds the subject, from, to, to, to, cc and bcc to the message
Add the body to the message :param self.body: the body to add :type
Add attachments to the message :param self.attachments: attachments to add :type self
Get the SMTP session to connect to the server :returns: Session object :rtype:
Get an SSL connection to the SMTP server. :returns: SSL connection :rtype:
Create a new SMTP session and start TLS on it :rtype: smtplib.
Send the message to the specified recipients. :returns: None :rtype: None.
Save tags to a file Args: filename (string): The filename of the tags to save
Unloads the image from the file system.
Return the region of the image.
Validate that all keys and values in the dictionary are valid. :rtype: bool.
Remove all elements from the list.
Reads data from the file-like object.
Delete this chunk from the file-like object :rtype: None :rtype:
Resize the file object to data_size bytes :param data_size: size of the
Insert a chunk into the file. :param id_: ID of the chunk to insert
Save the framed data to a file. Args: filename (str): filename of the
Delete a file or directory from the file system.
Parse a file. :param filename: filename to parse :type filename: str :param
Process a single line of a source file.
Add a new line to the source file's `self.blocks` attribute.
Draw a string in a font at `x` and `y` to `font`.
Parse an ISO-8601 time string into a datetime.datetime.
Converts a list of words into an HTML string.
Convert a word into an HTML string. :param word: The word :rtype:
Make HTML code for a list of words. :param words: list of words to be
Make HTML code from a list of lines. :param lines: list of lines to
Make an HTML string from a list of items. :param items: List of items to
Save the metadata to a file. Args: filename (str): The filename of the file
Update parents. Args: fileobj (file-like object): The file-like object to
Starts the game thread :param game: The game thread :type game: Game :param
Register a mapping from vendor_id to product_id :param vendor_id: vendor
Get a controller from the registry. :param controller: Controller instance :type controller: Controller
Calculate the HMAC-SHA256 hash of the string_to_sign :param string_
Get the headers to be added to the request. :rtype: dict :rtype
Send a GET request to the API endpoint. :param path: the path of the request
Send a POST request to the API. :param path: :param data: :param
Send a DELETE request to the API. :param path: the path to delete :param
Convert a value to a value of the given kind.
Change a resource record set. :param change_set: The resource record set
Return the size of the packet header.
Find the last Ogg page for a given serial number :param fileobj: file-like
Set the section for this document. :param section_name: the name of the section
Adds the markup to the document.
Process the content of the file.
Returns the markup for the given tag name. :param tag_name: tag name
Create a hosted zone writer. :param name: Name of the zone :param caller
Attempt to lock a file-like object :param fileobj: file-like object to lock
Insert a chunk of `size` bytes into `fobj` with offset `offset`.
Delete a number of bytes from the file-like object.
Returns the UTF-8 encoding of the given data. :param data: The data to
Add a change record to the change list. :param action: :param record_set
Parse change info. :param e_change_info: :return:.
Measure string width. :param str: string to measure :type str: str :r
Return True if any of the attributes of this object have changed since the last time this method
Delete this resource record. :returns: A list of the resource record changes :rtype
Save the record to the database. :rtype: dict. :rtype: None
Perform a full read of the file. :param size: number of bytes to read
Delete all key-value pairs under the given key. :param key: Key to remove
Add a loaded frame to this tag's tags. :param tag: tag to load :
Update all pics with genres, if version < 2.2.0.0
Unload the sound. :rtype: None :raises: None :rtype
Set the loop points of the ouput stream. :param start_sample: start
Return list of glyphs and values from adobe_glyph_list.
Filter glyph names. :param alist: list of glyph names to filter :type al
Dump a list of encoding values to a file object.
Dump the contents of an array to a file-like object :param the_array:
Check if a file exists. :param pathname: Path to file :type pathname: str
Make a list of all files in the current working directory.
Parse a Hosted Zone element. :param e_zone: :param connection: :
Parses a delegation set element into a Zone object Args: zone (Zone): A
Write a series of blocks to a byte string. :param blocks: list of blocks
Add padding blocks to the end of a list of blocks. :param blocks: list of
Delete all metadata blocks from self.metadata_blocks :param str filename: The filename of
Save the audio file to disk. Args: filename (str): The filename of the audio
Parse an alias recordset recordset record into a tuple. :param e_alias:
Extracts the values from the RRSet record values. :param e_resource_records:
Parse an RRset record. :param e_rrset: the rrset record :
Add a record to this zone.
Creates a new MX record. :param name: name of the record :param values:
Create a new namespace record with the given values. :type name: str :param values
Create a new PTR record. :param name: Name of the record :param values
Create a new SPF record. :param name: name of the record :param values
Create a new SrvRecord. :param name: Name of record :param values:
Get the initial values of a change.
Write a single change into the XML document. :param change: the change :type change
Write a ChangeResourceRecordSet document. :param change_set: ChangeResourceRecordSet
Initialize logs. Return logname :rtype: str :rtype: str.
Return the item with the given alias. :param alias: The name of the alias :
Freezes a dict into a sorted list of key-value pairs :param dict_
Join HTML attributes into a template and a list of attributes. :param attrs: list of
Initialize the app with the app context :param app: app context :type app: Flask
Initialize all bars. :param sender: sender of the bars to initialize :param kwargs:
Bind bar to self.bars. :param sender: :param kwargs: :return:.
Returns the arguments to be passed to this function as a dictionary. :rtype: dict
Return True if the current request is the same as the internal request.
Validate that metric_class is a metric class :param metric_class: metric class
Get a statistic by its name :param stat_name: The name of the statistic :
Calculates the statistic for each statistic and frequencies Args: stat (class): The statistic to calculate
Autodiscover modules from INSTALLED_APPS_APPS_APPS_
Dumps a metric summary to a CSV file. :param uid: UID of the metric to
Handles the maintenance command :param args: :type args: list :param kwargs: :
Get an array from a GET request :param request: :param fail_silently:
Get a boolean parameter from the GET request. :param request: the request :param var
Get the next colour in the list of colours :returns: the next colour :r
Get the Gecko parameters. :param request: the request :param uid: the
Geckoboard number widget. :param request: the request :param request:
Gecko drag widget. :param request: request object :param count: number of times
Generate a line chart for geckoboard.
Geckoboard version of geckometer.metrics.latest_count.
Get metrics from Geckoboard for the given frequency. :param frequency: frequency
Get the active stats for all gadgets. :returns: list of active stats.
Register a Gadget instance to the registry :param gadgets: Gad
Returns a dictionary with the context data for the view. :param kwargs: The context data
Print error message to stderr and exit with code. :param message: error message :type
Prompt the user for a long input. Args: prompt (:class:`str`): The
Print a prompt to the user for a list of lines and return them as a list.
Open a file in the same directory as the current working directory, with the given extension.
Get the schedule for a given year Parameters ---------- year : int The year of the schedule
Return the game winner. Return None if there is no game winner.
Return the season of the year.
Return the surface of the gitable object. :rtype: np.ndarray.
Get the coin_toss table from the doc. Return None if not found.
Return a dictionary of weather information for the current user :rtype: dict :rtype
Return the information about the reference. :rtype: :class:`sportsref.
Return a list of team_stats for a given schedule kind -- The schedule kind -- The
Return the standings of the team.
Get the table for the team stats :param selector: The selector of the table :type
Retrieve the roy voting data from the roy voting service.
Return a pandas DataFrame with the contents of the sports table as columns.
Return the season of the year.
Return the player stats as a Pandas DataFrame :param table_id_fmt: Format of
Given a class instance, return a key that can be used to identify the class instance.
Return the age of the year, month, day of the birth date :param year:
Return a dataframe of stats for the given table_id. :param table_id:
Get statistics for all games in the game.
Get the total stats of a particular resource type. :param kind: The kind of resource
Return the statistics for each year in the table. :param kind: :param summary:
Statistical usage of the per-100 metric. :type kind: str :param
Return a stats table for the current user :param kind: :type kind: str :
Get stats table shooting. :type kind: str :param kind: kind of
Return a `pbp` stats table. :param kind: Type of stats table :
Return the basic gamelog data for a given year.
Get the current value from the session and delete it from the session :rtype: None
Expands the details column of the dataframe. Parameters ---------- df : `pandas.DataFrame`
Add team and opp columns to features.
Add team features to the given dataframe :param df: DataFrame of team data :type df
Calculate the initial win probabilities for the given line. :param line: line to
Return a dataframe containing the results of the passing operation. :param kind: :type kind
Return a list of awards for a given year. :param award_id:
Get the name of the team. Return name :rtype: str :rtype:
Return a list of box scores for a given year.
Parse the PQ tag for a given year. :param year: The year to parse
Given a year, return the list of coach IDs and the number of games in the
Get the schedule for a given year.
Retrieve the off-coordinator for a given year.
Return the coordinator name for the given year. :param year: The year to
Return the stadium ID for a given year.
Return the off-scheme for a given year. :param year: The year to
Return the default alignment for the given year. :param year: The year :type year
Retrieve the off-splits for this year. :param year: The year of the
Get HTML from url and return HTML string :param url: URL of the page :type
Directly put a read into the read queue.
Get an item from the queue without removing it from the queue :rtype: :class
Put the close signal on the read queue and put the close signal on the write queue.
Get a batch of examples from HDF5. Args: path (str): The path of
Get the remainder of a block of blocks at `path` of size `block_size
Get a generator that yields a single batch of rows from the queue. :param path:
Parse a file-like object from a file-like object. :param ifp:
Dump pb_objs to a file-like object :param ofp: file-like
Read a varint from the file descriptor.
Yields a group of objects from the file descriptor.
Flushes the buffer and closes the file descriptor :returns: None :rtype: None
Write a list of objects to the file. :param pb2_obj: list of
Flushes the write buffer to the file descriptor.
Return the game directory for the user. :param username: username of the game :type
Emulate input text with keyboard emulation.
Evaluate the traits and return a list of the traits that should be evaluated.
Wait until the condition is true or the timeout is reached. :param condition: The condition
Wait for all available traits to be present. :param element_with_traits
Add a list of exceptions to ignored_exceptions. :param ignored_exceptions: list of
Execute the command 'volume' :param operator: the operator of the command :param value
Main function to get the source number of the given operator. :param operator: the operator
Send a message to the remote host :param message: the message to send :type message
Return the status of the NAD. :rtype: dict :rtype: str
Power off.
Turn on the device. :rtype: int :rtype: None :rtype
Set the volume of the device. :param volume: the volume to set :type volume
Select a source. :param source: The source to select :type source: str :
Deobfuscate a URL using a key. :param key: The key to decrypt
Calculate the CRC of a plaintext. :param plaintext: the plaintext to calculate :type plaintext
Perform an obfuscation of a value. :param value: The value to obfuscate :
Look for missing schemas in the given HTML file :param str html: The HTML file :
Get a list of all href links.
Check if a song name is present in the html. :param html: the html
Parse the given URL and return a list of hrefs. :param url: url of
Generate a google url from song name and website. :param song_name: song name
Parse a Google page and return the download URL. :rtype: str :rtype
Parses a song into a website URL. :param song_name: song name :param
Returns the html content of a given url. :param url: url to get the html
Download a file using requests :param url: The url to download :type url: str
Download a file using wget :param url: url to download file :type url:
Search for station codes by city name :param city_name: city name :type city
Get the location observation for a given location. :param lat: latitude and lng: longitude
Parse the response from a observation request. :param json: the response of the observation request
Returns a list of compilers registered with the compiler extension.
Returns the mime type of the output file.
Returns the mimetype of the first compiler in the list of compilers. Returns None if
Returns the extension of the compiler file, or ``None`` if it's not in the
Register a processor for a mimetype :param mimetype: The mimetype of the processor :type mimetype
Unregisters a processor for a given mimetype. :param mimetype: The mimetype to unregister :
Returns the list of paths to be found in this project. :rtype: list.
Register the default values for the media types, preprocessors and postprocessors.
Import qtcore from PyQt5 or PyQt4 if has_ida is True
Create a Netnode object from the IDA_CONFIG_APP_ORG and IDA
Add a plugin_name to the netnode's list of plugin_names.
Removes plugin_name from the list of available plugin names.
Import settings from a config file. Args: settings (dict): Settings to be imported.
Export the given settings to the given config_path Parameters ---------- settings : dict Dictionary of
The directory of the IDA plugin. :returns: the directory of the IDA plugin
Iterate over all keys in the directory, user, system, IDB, directory, and
A simple error handler that returns a JSON-RPC response. :param exc: the exception
Return a Table object for the given table name :param name: table name :type name
Return a list of all tables in the DynamoDB database.
Fetch crates or summary items. :param category: crates category :param from_
Generate a unique ID for a metadata item. :param item: Metadata item :return:.
Return the time at which the item was updated. :param dict item: the item
Fetch the owner team of a crate object :param crate_id: ID of
Fetch the owner_id from the crate server :param crate_id: C
Fetch the versions of a crate.
Fetch crate version downloads attribute from the server. :param crate_id:
Fetch all crates for the current category. :param from_page: number of cr
Fetch a specific crate. :param crate_id: ID of the crate
Fetch items from the API. :param path: :param page: :return:.
Fetch a list of items for the given category. :param category: The category of the
Yields a generator of questions from the kitsuneclient. :param offset:
Fetch all events for a given category. :param category: Category event :param offset:
Get the timestamp of the last update of the metadata. :param item: the metadata
Returns the category of the given metadata item :param item: the metadata item :type item
Get a list of items for a given category :param category: The category of the items
The list of buffers to be processed by the libaio thread. :rtype:
The priority of the IOCB. :returns: the priority of the IOCB.
Close the connection and release the context.
Submit a list of blocks to be submitted to the IOCB.
Cancel the block. Return None if the block was cancelled by libaio.
Cancel all of the submitted blocks and return a list of the cancelled blocks.
Fetch data for given category :param category: category_event category :type category: category
Fetches the raw cell data from the API and returns it as a list of strings.
Parse the feed and return a generator of events. :rtype: generator of events.
Return a list of export formats for the given pid_type :param pid_type:
Return the permission factory to use for this request. :returns: the permission factory :r
Default view method. Sends a record_viewed signal to record_viewed.
Export a record to a template.
Time a callable function. :param name: Name of the callable :param target:
Close the connection to the remote server.
Remove a client from the pool. :param client: The client to remove :type client
Increment the named metric. :param name: the name of the metric :type name:
Send a timing metric. :param name: name of the metric :param milliseconds: time
Add a timing measurement that occurred since the given time. :param str start_time:
Send a gauge metric. :param name: name of the metric :param value: value
Send a gauge delta request to the metric service :param name: Metric name :type name
Set the value of the metric with the given name :param name: the name of the
This method is used to send a request to the backend. :param data: data to
Create a batch client with the given batch size. :type size: int :param size
Return a new client instance configured to connect to the unit service. :rtype: client
Send all the pending batches to the socket. :returns: the socket :rtype:
Create a batch client with the given size. :param size: the size of the batch
Flushes all pending batches to the server. :rtype: object :rtype:
Return a client instance configured with the configuration. :return client :rtype: client.
Create a user with a password, or a set of groups, and permissions.
Interprets `x` as an Openmath expression. Args: x (Any):
Convert a term to an OpenMath expression. :param term: the term to convert :
Converts an om.OMObject to a Python object. :param omobj: ``om
Convert an object to an openmath number.
Initialize the application. :param app: the application to use :type app: :class
Yields valid choices from a list of choices Args: choices (list): A list of
Create a field value from the given arguments. :param args: :param kwargs: :
Return a dict of form data and a dict of form_fields and form_files.
Return field data as decimal.Decimal.
Returns the data for an email field. :param field: :param kwargs: :return
Generate data for a date field. :param field: :param kwargs: :return:.
Generate datetime data for datetime field. :param field: datetime field :param kwargs: datetime
Return floating point data for a field, using ``float```, ``precision`` and
Return a string containing the minimum and maximum values for an integer field. :param field:
Generate a random datetime.datetime.datetime object for a time field. :param field:
Return a randomly selected value from the field's choices. :param field: The field to
Returns a string representation of a multiple-choice choice field. :param field: The field
Return a random choice from a field's queryset.
Encode a Python object as a byte string.
Publish to sdist, sbuild, or sdist, upload to sdist.
Tag the current build with the given version. :param version: version to tag :type
Load a global module from a python module.
This function decodes the given data into a byte array.
Converts the given value to a string with the given precision. :param value: the value
Format a number. :param number: number to format :type number: int :param
Convert data to a numpy array :param data: data to convert :type data:
Convert a byte array to a raw byte array.
Add a file to the config file :param name: The name of the file :param
Remove a key from the config dictionary :param name: The key of the key :type
Return a list of all websockets to send to the client :rtype: list
Get a single ws by name :param name: name of the ws :type name:
Check if a repository exists in a workspace :param workspace: workspace name :param repo:
Synchronize repositories to a websocket. :param ws_name: name of the websocket.
Clone a repository into a new path. :param url: URL of the repository :param
Checks if the version is different than the current version.
Convert an array of numpy.ndarray to a numpy.ndarray of Vecxels.
Convert a list of voxels to a numpy array.
Execute the command. Args: args (dict): The command-line arguments.
Update a repository. :param repo_name: Name of the repository to update :type
Add a console handler to the logger. :param debug: debug level :type debug:
Executes a command on the remote system.
Load an image from a png file :param png_filename: png file to load :
Save a collection of numpy data to a single file. Parameters ---------- png_filename_base
Print workspace status to stdout :param name: workspace name :type name: str :
Print the status of a repository. Args: repo_name (str): Name of the
Returns the block size of a token.
Post a cutout without chunking BLOSC data. Args: token (str):
Load an image from a tiff file. :param tiff_filename: path to
Save numpy data to a tiff file Args: tiff_filename (str): filename
Load a tiff file as a multipage image Parameters ---------- tiff_filename :
Write the configuration to a YAML file.
Clone a remote repository into this repository.
Return the version of the installed package as a string. :rtype: str.
This function takes a name, a greeting string, and a greeting string, and
Option decorator to print a greeting message to the user. :param name: name of
Reserve a number of ids. :param token: :param channel: :param quantity
Merge a list of IDs into a channel. :param token: :param channel: :
Propagates data to a channel. :param token: Token to propagate data to :param
Returns a list of projects for the specified dataset name :param dataset_name: dataset name
Returns a dataset with the given name :param name: dataset name :type name: str
Returns a list of all available datasets. :param get_global_public: list of
Add the sub-command parser to the sub-command parser :returns: None :r
Execute the command. :param args: Command arguments :type args: argparse.Namespace :
Show the list of repositories in a workspace. Args: name (str): Name of the
Show all the workspaces in the workspace manager :returns: None :rtype: None :
Return the URL for the given endpoint. :param endpoint: The endpoint to use :type
Try to guess the format from the file extension. :param ext: the file extension :
Open an image file. Parameters ---------- in_file : string or file path in_fmt
Convert a file to another format.
Convert a list of ramons to a dict of ramons.
Return the ramon type of the given type. :param typ: the type of the
Delete a channel. Args: channel_name (string): Name of the channel project_
Return a JSON representation of the ND Args: dataset (dict): Name of the dataset
Returns a dictionary representation of a dataset. :param dataset_name: dataset name :param
Generate a dictionary for a channel.
Build the project_dict for the API. :param project_name: Project name :
Identifies the dimensions of an image, given the image type and the image file path.
Send data to the OOO server :param data: data to send :type data
Find a path for a given repository name :param name: name of the repository :param
Returns a list of public tokens for this account.
Retrieves information about the project with the given token. :param token: The token of the
Set the metadata of a remoted-data token :param token: the remoted-
Get the URL for the user. :param url: URL of the user :rtype
Send a POST request to the given url :param url: :param json: :param
Delete a URL using a token. :param url: URL to delete :param token:
Load the data layers from an hdf5 file Args: hdf5_filename (str):
Save a numpy array to a HDF5 file :param str hdf5_filename: path
In-place Gaps in a tree. Parameters ---------- df_seq : pandas.DataFrame
Return the result of the NVIM operation on the NVIM operation on the given
Installs Jingo translations in Jingo's Jingo.env.
Executes a thunk in an exclusive state with the given guard :param guard: :param
Return the percentage of a given part to a given total. :param data: :param
Get stats for the cache server.
Get the information about the slabs in the cache. :param server_name: the
Return a dictionary of context data for the given request. :param data: Dictionary of context
Get the status of the server. :rtype: str :rtype: str :
The dashboard page. :param request: the request context. :param mc_client:
Get cache stats. :param request: :param server_name: :return:.
Returns a list of all slabs in a given server. :param request: :param
Converts a number of bytes to a human readable string. :param value: number of bytes
Find a named config in the children dictionary :param children: :return:.
Add a sub-environment to the environment. :param kwargs: :type kwargs: dict
Apply applicator to the config file. :param applicator: Applicator
Return the full path to the file. :rtype: str :rtype: str
Returns the contents of the file. :returns: the contents of the file :rtype
Write data to the file :param data: the data to write :param mode:
Configure the logging module with the configured config values. :returns: None :rtype:
Creates a file if it does not exist.
Apply the given applicator to the configuration of this node. :param applicator
Return the absolute path to the file.
Remove the file from the filesystem :param recursive: If True, remove all files in the
Prepare the environment for this node.
Clean up all references to this node and remove it from the list of references to this node
Return the full path of the file to the file at the given path. :param path
Returns a list of all of the files in the directory.
Writes data to a file. :param filename: Path of the file :param data:
Reads a file from disk and returns its contents as a string :param filename: file name
Add a file or list of files to this tree.
Save the state of the state to a YAML file :rtype: str :rtype
Loads the yaml file at ``self.path`` into the ``self.d``.
Remove the file from the filesystem if it exists. :returns: None :rtype:
Load all plugins in the given directory.
Return a child config node with the given path. :param path: the path of the
Get the current value of the container :returns: None if not found :rtype:
Apply the config to the string representation of the given object. :param obj: The object
Build the url to be used for redirecting to the message's callback URL :param request
Process incoming pyngus data from pyngus socket. :rtype:
Send output to pyngus. :returns: None :rtype: None :
Send the request to the recipient.
Read input from socket_obj and process it.
Write the output data to the socket. :param socket_obj: the socket object to
Get the settle modes of the remote device. :param pn_link: the pro
Configures the connection. :param target_address: The target address :param source_address
Return the source address of the PN link. :rtype: str.
Get the target address of the PN link.
Called when the Session is closed :returns: None :rtype: None :rtype
Create a new sender link. :param name: Name of the sender link :type name
Create a sender link for the given pn_link. :param pn_link: the
Creates a new receiver. :param name: Name of the receiver :type name: str
Add a request receiver to this message. :param pn_link: The URL of the
Called when a link has been destroyed :param link: The link to be destroyed.
Called when the endpoint is no longer needed to close the session :rtype: None.
Process a state change event :param event: The state change event :type event: :
Add a mark tag to the inline pattern.
Called when the remote connection is closed. :param receiver_link: the link to the
Called when a receiver has failed due to an error. :param receiver_link: The
Parse the server address to get the host and port from it. :param server_address
Establish a connection to a remote host and port. :param str host: host
Create a socket for a server. :param host: host name :param port: port
Return a list of all connections that need processing :returns: tuple of readers, writers,
Return the output data of the connection, or None if the connection has no output data.
Create a sender link for the given source and target address. :param source_address:
Reject a sender link :param link_handle: link handle :param pn_condition:
Create a receiver. :param target_address: target address :param source_address:
Called when the connection has failed to connect. :param error: error message :type error
Called when an endpoint is active :returns: None :rtype: None :rtype
Called when the connection is about to close the remote endpoint :returns: None :rtype
Called when an error occurs during a connection. :param error: :type error: str
Return a string representation of the color. :rtype: str :rtype: str
Build a dictionary of font families from the search path :returns: dictionary of font families.
Set the compression flag. :param value: the value of compression :type value: bool
Add an object to the buffer. :param flag: flag of the object to add :
Write a stream to the buffer :param stream: stream to write to :type stream:
Write a stream. Args: stream (Stream): The stream to write.
Add a page to the document.
Set the draw, fill, and text color scheme.
Create a default font object and add it to self.fonts :returns: None :r
Adds a page to the document. :param page: the page to add :type page
Sets the font size. :param size: size of the font :type size: int
Adds text to the document. :param text: Text to add :type text: str
Add a newline to the current page.
Add a pie chart to the PDF document.
Print out out the output of the pages. :returns: None :rtype: None
Return a list of page indices of the pages that have a "orientation change" attribute.
Outputs the fonts in the list of fonts.
Output all images. :rtype: None :rtype: None :rtype:
Outputs the image to the screen. :rtype: str :rtype: str.
Transform the current matrix by the given values :param a: A list of values to transform
Return the absolute position of a point in the matrix.
Sets the style and underline flag depending on the family. :param str style: the style
Rotates a point on the sphere. :param pointx: :param pointy:
Set information about the object :param title: :param subject: :param author: :
Set display mode. zoom: zoom level layout: layout level :type zoom: int or
Writes the document to a file or file-like object. :rtype: str.
Writes the header of the PDF file to the stream.
Put all pages in the current page list into the current page list.
Put a dictionary of fonts, images, fonts, fonts, and images to the file.
Put information about an object. :returns: None :rtype: None :raises
Write the trailer to the file. :returns: None :rtype: None :
Perform floyd on a list of sequences. Args: seqs (list): List of
A naive version of ``f`` that uses a list of sequence-like objects.
Give a list of sequences, each of which is a list of sequences, which are
Given a sequence of values, return a generator of the values of each pair of values.
Return True if x + test_length is larger than self.x.
Test if the y + test_length is larger than the current y.
Tests if the coordinate x is greater than or equal to the coordinate x. :param test
Return True if y is greater than test_ordinate.y :param test_ordinate:
Return a copy of this cursor.
Add `dx` to the x-axis. If `dx` is not specified,
Add `dy` to the current line's y position. :param dy: :param
Draws the current row of the table.
Returns a list of all tags that have been added to this tag. :rtype:
Returns a list of labels with the given name. :param name: name of the label
Delete a tag. :param id: ID of the tag to delete :type id:
Creates a new label with the given label ID :param label_id: label id
Return a list of the user's accounts. :rtype: list. :rtype
Get tags by label SN Args: label_sn (string): label SN Returns: list
Returns a list of all registered services. :returns: List of services. :rtype
Setup the Sphinx extension and the mapping for intersphinx. :param app: the
Return the path to the themes directory.
Make a POST request to the API. :param request: :param params: :return
Returns a list of log records. :rtype: list of log records :rtype
Get a log set. :param log_set: the log set name :type log
Compute the duration of a period of time, in seconds, as a function of time.
Update the model with the given parameters. :param kwargs: :type kwargs: dict :
Compute the parallax model using the transit and limbdark settings.
Return the binning of the transit's limbark.
Free all memory allocated to the array.
Receives data from the socket and writes it to the buffer. :param size: number
Generator that yields a line of text from the buffer. :rtype: list.
Return the status code and message of the NTP message. :rtype: tuple.
Generates an info message for a given code and message :param code: The code of the
Return an info message with the given code and message. :param code: the code of
Get a list of capabilities of the device. :param keyword: list of capabilities of the
Return true if mode is set to READ_MODE. Return True if mode is set.
Sends a quit command to the server and closes the socket. :rtype: None.
Return a date.datetime.datetime object from the NNTP command `date`.
Run the command "help" and return the output. :rtype: str.
Generate new groups for the given timestamp. Args: timestamp (datetime.datetime.datetime):
Generate new news. :param pattern: The pattern of the news :param timestamp: The
List active groups. :param pattern: pattern to list of active groups :type pattern:
Generate a list of active times.
Generate a list of new group names and descriptions. :param pattern: the pattern of the
Generate a list-overview format string from nntp command.
Generate a list of available NNTP extensions. :returns: list of available NNT
Return a generator for the given keyword. Keyword Arguments: keyword (str): keyword of the
Return a list of values for the specified keyword and argument. :rtype: list.
This command is used to extract a message header from an OpenXC message. :param
Generator function for xpat. :param str header: :param int msgid_range:
Compress a gzipped file using the xfeature command `xfeature_compress_gzip`.
Calculate the offset of a value in the range 0-9 to -1, -1
Make a POST request to the API. :param url: The URL to post to :
Helper method to perform a DELETE request to the given url. :param url: The URL
Make a GET request to the API. :param url: url of the resource :param
List scheduled queries for this account. :rtype: list. :rtype: list
Get a list of all tags associated with this account.
Returns a list of tags with the given name or id. :param name_or_
Delete a tag. Args: tag_id (int): ID of tag to delete.
Create a new scheduled query :param str query: The query :param change: The change
Delete an alert with the given tag ID :param tag_id: ID of the tag
Parse a newsgroup line into group, low, high, status.
Parse a line of text into name and value :param line: line to parse :return
Converts a dict of header names to a string of header values. :param dict hdrs:
Send a POST request. :returns: None :rtype: None :rtype:
Run the tests. :param tests: A list of tests to run :type tests:
Generates a docstring for the defaults section of the docstring.
Set the value of the field.
Check that the value is of the correct type. :param value: the value to check
Return the value of the field.
Check that the given value is a scalar type. :param value: the value to be
Return the number of errors raised in the sequence.
Set the errors of the response. :param errors: List of errors :type errors:
Sets the values of the object. :param kwargs: keyword arguments :type kwargs: dict
Import the metrics into the metric definition v2 :param metrics: the list of metrics to
Extract a dictionary of metrics from a list of metrics. :param metrics: list of metrics
Filter the metrics based on the filter_expression Parameters ----------- filter_expression : list of
Call the RPC server. :returns: None :rtype: None :raises:
Return the expression in the terminal of the given text. :param text: the text to
Match an operator. :param text: the text to match :type text: str :
Add text to the start of the text. :param text: text to add :type
Initialize the required properties of the parameters.
Returns a list of Parameter objects for the given parameter names :param pnames: list of
Returns a list of the values of the specified parameters in the model Parameters ---------- pnames :
Returns a numpy array containing the errors for all parameters in the model Parameters ---------- pnames :
Clear the derived value of each parameter.
Set the method name. :param value: The method name :type value: str :
Retrieve environment variables from the environment.
Call the API and return the result.
Validate that the scene name and prefix are in the satellites map.
Verifies that the product type is correct. :param satellite: the satellite name :type satellite
Get the size of a remote file. :param url: URL to download :type url
Check if bands is a list of valid band names. :param bands: list of bands
Establishes a connection to the Earth Explorer.
Return a copy of the ``dt`` with ``tzinfo`` set to this instance's
Join the elements of an iterable with the given delimiter. :param iterable: The elements of
Return the positions of the newline characters in the text.
Point to a specific position in the source string :param source: the source string :param
Dump the result of the `relay query` to stdout :rtype: str.
Remove metrics, control, and metrics from the relay dictionary. :rtype: None.
Create a new fortune object from a list of files Args: files (list):
Set the chance of each fortune in `files` :param files: list of
Run the application and exit if the result is not wassureful :param context:
Return a rule from the input text.
Parse special handling. :param text: The text to parse :type text: str :
The grammar for the input source. :param input_source: input source :type input
Returns a list of Rule objects representing the rules in the grammar.
The list of comment tokens in the grammar.
Returns a list of directive declarations contained in the file.
Returns the compiled output source of the command.
Compile the token definition into a string. :rtype: str :rtype: str
Return a string containing the import directives. :rtype: str :rtype: str
Return a string representation of the token type.
Return a class definition string.
Return the name of the first rule in the rule definition.
Return the source code for the given rule. :param rule: The rule :type rule
Get the transform to be applied to the rule :param rule: rule to transform :type
Convert an expression to an ASN representation Args: expression (:class:`ast.Node`):
Return an ASN.1 representation of the given node. :param node: The node to
Given a list of operands and a predicate function, return a list of operands.
Remove the grouping groups from the optree.
Convert an AST node to its code representation.
Convert an AST AST node to a Python code object. :param node: AST node :
Convert a terminal into a list of code blocks. :param terminal: The terminal to convert
Convert an `ast.OptionGroup` into a list of code lines.
Converts a repetition group into a list of code lines. :param repetition_group: The
Convert a special handling node to a list of code blocks. :param special_handling:
Return a list of code lines for `OP_ALTERNATE` opnodes.
Convert `ast.OpNode` to `ast.Code` representation Args: opr
Convert `ast_op_exclude` to `ast_to_code`.
Returns the code lines for a multi-ply operation :param opr: the operation to
Convert a `ast.OpRepeat` object to a `ast.Code` object.
Find directives by predicate or name Args: pred (function): The predicate to find directives.
Check if the given node is an expression of the same type as the parent node.
Print the result of the API call. :rtype: None :rtype: None
Get a wx.ID from a wx.ID or wx.NewID object.
Remove a key from a control's list of hotkeys. Args: control (wx.
Add command line arguments to the command line parser :returns: None :rtype: None
Configure logging. :returns: None :rtype: None :raises: None
Validate the arguments. :returns: True if the arguments are valid :raises: False
Convert an infix tree to a post-fix tree. :param nodes: list of
Given a list of nodes, return the first node that is an optreen node.
Reduce a list of operator nodes to a list of nodes.
Load the manifest from file_path and store it in the self.manifest.
Returns the maximum length of the field names and their descriptions as a tuple of field names and
Return the display and desc length of the metrics.
Escape all underscores in metrics so that they can be used as keys in the metrics dictionary.
Print the field header and field data in Markdown format.
Print a markdown summary of the metrics.
Generate a markdown representation of the metric definitions, field definitions, and dashboard definitions.
Parse the given text and return a tree. :param text: The text to parse :
Update most_consumed and most_consumed based on the length of the original text.
Add command-line arguments to the command-line parser.
Parse a time date from a string. :param str s: the string to parse :
Outputs a csv file. :param text: The CSV file :type text: str :
Pretty-prints the output of the metric. :param text: the output of the
Pretty-prints the given text as a JSON string. :param text: the text
Parse the given XML string and return a new XML document. :param text: the XML
Return True if `node` is an empty parsenode node and it's terminal is
Pretty print a node. :param root: root node :param space_unit: space
Get a function that returns a function that can be used as a placeholder for the repetition.
Return a ParsNode that represents a terminal token.
Get the exclusion for the given text. :param extractor: function to extract the exclusion :
Count the number of leading whitespace in the given text.
Call the extractor function with the given text :param text: the text to extract :type
Return the position of the node in the tree.
True if all children of the ParsNode are empty. :rtype: bool.
Add `ignored` elements to the list of ignored elements.
Check if the node's type matches the given value :param value: the value of the
Return a flattened version of this ParsNode.
Return a copy of this ParsNode, trimmed by the given predicate.
Merge this node and another node into this one. :param other: the node to merge
Return a new instance of a type with the same children as this instance.
Return a new ParaNode with a compressed representation of this ParaNode.
Return the position of the cursor in the file.
Return the position of the maximum location in the progress bar.
Move to the next character and move to the end of the line.
Move to the next line.
Moves the cursor to the previous line.
Returns the last line in the file, or None if there are no more lines.
Return the position of the next character in the string. :param length: the number of
Saves the current cursor context to the list of contexts. Return True on success Return False on
Restores the context of the current cursor. Return True on success Return False on error.
Return a string representation of the function. :param bool with_from: If True,
Sets the name of the Hilbert signature. :param name: the name of the
Count the number of variables in the HGNC signature.
Return the number of function signatures in this HSTig.
Update this scope with the given list of scopes. Args: sig: list of scopes to
Return a new scope that is the union of the current scope and the given signature.
Update this scope with the intersection of the given scopes :param oset: scope to update
Return a new scope that is the intersection of this scope and the given signatures.
Update scope to remove scope from oset :param oset: scope to remove :r
Return a copy of this scope with the difference of `sig` from this one.
Update the scope with the symmetric difference of `oset` :param oset: the
Return a new scope, which is the symmetric difference of this scope and the given signature.
Add the given signature to this scope.
Remove a signature from this scope. :param it: The signature to remove Return True if
Discard a signature from this scope. :param it: the signature to discard Return True if
Return the first signature in the chain.
Get the last signature in the signature chain.
Get a scope by its symbol name :param name: name of the symbol :type name
Get a signature by name :param name: Name of the signature :type name: str
Return a list of all polymorphic return signatures. Returns: a list of all polymorphic
Calls the injector of the receiver's parent. :param old: The node to call :
Normalize an AST. Args: ast: the AST to normalize Args: ast: The AST
Set the attributes of this node to the values of the othernode.
Return True if the hit is within the specified range of charges. :param hit:
Return a function signature that can be used to compute this type.
Resolve the signature to a set of possible types. :returns: The resolved types :ra
Returns a list of resolved names for the given type name :param type_name: The
Set the resolved name of the type. :param ref: the reference of the type
Delete a local file. :param filename: the filename to delete :type filename: str
Delete a file from S3 :param filename: File to delete :param bucket_name
Delete a local file or S3 file. :param filename: :param storage_type
Save a file from a temp file to a local file :param temp_file: file
Save a temporary file to an s3 bucket.
Save a single file to a file-like object :param temp_file: The file
Find a file by s3 path :param path: :param bucket_name: :
Create a class that can be used to define an enum value for a given set of sequential
Set a single object in the chainmap.
Read end of line and return True if end of line is found.
Pushes rule nodes onto the rule_nodes list.
Pop the rule nodes from the stack.
Return the value of a node.
Add a parsed stream to the stream list. Args: content (str): The content of
Starts a tag with the given name. :param name: tag name :type name:
End the tag with the given name :param name: name of the tag to end :
Set the rules for this class. :param rules: A dictionary of rules :type rules
Set the hooks for the class. :param hooks: dict of hooks :rtype:
Set the directives. Args: directives: a dict of dir_name -> dir_pt
Evaluate a rule. :param name: Name of the rule :type name: str :
Evaluate the given hook. Args: name (str): The hook name ctx (list):
Check if the current position of the given text is at the end of the stream.
Reads one character from the stream. :returns: True if a single character was read.
Reads a single character from the stream. :param c: Character to read :type c
Read the stream until the end of the stream has been reached. Return True if the stream
Return True if we should ignore any blanks at the end of the stream.
Check that the hits data structure compatible with the cluster hits data structure Parameters ---------- hits : list
Add the given rule clause to the given ns_name. :param ns_name:
Add a rule to the parser tree.
Add a rule to the grammar. :param rule: :param rn: :param al
Add `cla` to `sequences` :param sequences: :param cla:
Add `alt` to `alternations`.
Add a range to the parser tree. :param sequence: The sequence to add :param
Adds a parser node to the parser tree. :param str sequence: The parser tree to
Add a capture to the given sequence. :param sequence: The sequence :type sequence:
Adds the cpt value to the sequence's parser tree. :param sequence: The sequence to
Add a hook to the sequence.
Set the number of the given parameter. :param n: the number of the parameter :
Set the value of the parameter to the string representation of the value of the parameter.
Set the ``param`` pair to the value of the character ``c``.
Set the pair of the parameter's name and value. :param param: The parameter
Set the name of the given hook to the name of the given number of parameters.
Add a parameter to the hook's list Parameters ---------- hook : Hook object Returns ------- True
Return the rules associated with this rule. :rtype: parsing.Node.
Ignore Cxx context. Return True if context is valid, False if context is not.
Add a state to the simulation.
Return a string representation of the state as a dot-formatted string.
Write a graph to a dot file. Args: fname (str): The path to the
Writes the image to a png file. Args: fname: name of the file to write
Return a string representation of the state machine.
Return the next state of the given type :param newstate: the new state :param
Reset the living state of the simulation to its initial state.
In-place inferring of a block of nodes.
Infer the type of a subexpression. :param expr: the subexpression :type
In-place inference of a literal. :param args: :type args: tuple :
Print out all nodes in the tree. Return True on success Return False on error.
Return an ast.stmt for the exit scope of the loop.
Return a list of ast.Statement objects representing a non-empty list of non-empty
Return `node`s result as `node`s result as `node`s result
Return an ast.Expr for the `calltrue` statement. :param node: The
Return an ast expression for the hook.
Return an AST node for the rule. :param node: The rule :type node:
Return `ast.Capture` or `ast.Expression` if `node` is a
Return an ast.Name representing the scope of the function. Args: node (ast.
Return an ast.Statement for the `alternate` statement. :param node: The
Compile `node` into an ast.Seq or ast.Expression.
Return `node`s AST representation of `repoptional` or `node`s
Return an ast.Statement node for Rep0N nodes Args: node (ast.
Return `node`s representation of `node` in `node` with `node`
Concatenate `src` into `dst` and `dst` with `indent`.
Sets the indent level of each element of the list. Args: lst: list of elements
Recursively convert a list of indentable objects to a string. Args: lst: list of
Print the contents of the given nodes and return True on success Return True on success Return True
Populate a list of state states from a list of state states. :param seq: list
Given a list of sequences, populate a state register with the sequences. :param all_
Build the state tree and populate the root_edge :param tree: The state tree :
Given a node and a value, return true if it's equal to the value of the
Create a grammar from a grammar string :param bnf: grammar string :param entry:
Create a grammar from a file. Args: fn (str): Name of the grammar to
Parse the given source into the given entry. Args: source (str): The source of
Parse a file. Args: filename (str): The filename of the file to parse entry
Set the destination node to be the source of the transformation. Args: dst (:class:`
Sets the value of a node to its integer representation :param dst: the node to set
Return a subnode of the dst node. :param dst: the destination node :param
Dumps the deposition to a dictionary.
Return a list of recids from the invenio-12 database. :param from
Return a list of record IDs for invenio at a given date.
Get the check information from the database. :returns: (str, list, list)
Dump an access token object into a JSON-serializable format.
Returns a count of users and users in this account. :param args: :param kwargs
Dump a User object to a dictionary. :param u: User object :param from_
Return set of modified recids in invenio 12.0.1.1.
Get all record IDs that have been modified since the given date.
Get the list of fireroles and users for a collection. :param collection:
Get all revisions of a record. :param recid: Record ID :param from_
Return a list of restricted collections for a given record. :param recid: record ID
Create a record from a marcxml file and return it as a JSON string.
Return a list of modified recids, optionally filtered by `query` and `from_
dump a single record into a JSON or MARCXML dump. :param recid:
Return a dictionary representation of the RA. :param ra: :param with_date:
Load data from a model into a database. :param model_cls: Model class :
Collect things from entry points.
Initialize the app context.
Return the SQL to be used when running the query. :returns: the SQL to be
Get a list of actions for the given query :type query: str :param query:
Return a JSON-serializable representation of the RT :param rt: :param from_
Load a token into the given data dict :param dict data: The token to load :
Import a record from data into the database Args: data (dict): Data to import from
Return import path or default if imp is not found.
Return a string representation of the object. :param obj: :param from_date:
Get users in Invenio 1.1.0.0.0.0.
Get users from invenio 2.0 :rtype: tuple :rtype:
Return a dict representation of a user.
Load the deposit data into the database.
Create a new deposit record and a persistent identifier for the depid.
Load a record from a record_dump. :param record_dump: the record to
Load records from a list of records, optionally with a record ID.
Get profiler statistics as a list of dicts. :param sort: sort of stats :param
Main function to start the tornadrofiler application. :param port: port to
Dump the profiling stats to a file.
Delete the profiler and all of its stats. :returns: None :raises: None
Delete the profiler and stop the profiling process.
Wait for the process to finish.
Calculates translations of images in parallel. Parameters ---------- images : list of `Image` or `
Given a list of images, merge them into a single image. Parameters ---------- images : list
Adds ones dimensions to an array. :param arr: array to add :type arr
Create a new record from a dump.
Create a new record for the given dump. :param DumpDump dump: The dump to
Update a record with the given revisions. :param revisions: The list of revisions :param
Create persistent identifiers for the given pids. :param record_uuid: UUID of the record
Delete a record from the persistent identifier table. :param record: The record to delete :
Create a file in the bucket. :param bucket: Bucket name of the bucket :param
Delete all buckets in a record. :param record: record to delete :type record:
Returns a list of PIDs that do not exist. :rtype: list.
Prepare list of files to be uploaded. :rtype: list :rtype: list
Prepare the list of PID objects to be fetched from the repository.
Returns True if the record was deleted. :param record: The record to check for the
Load a community and save it to the logos_dir.
Load a featured community from the database. :param data: dict of data to load
Dump a thing to a JSON file :param thing: The thing to dump :type thing
Check a thing. Args: thing (str): The thing to check :type thing:
Delete this widget and all event handlers from the peng :returns: None :rtype
Returns the magnitude of the vector v. :param v: vector of points :type v
Return a normalized version of a vector.
Transform the tex coordinates to fit into the image coordinates Parameters ---------- data : array-like,
Make sure the bones are present in `data` Parameters ---------- data : dict Returns -------
Set the blength of the bones in the data dict :param data: data to
Sets the parent of this node :param parent: parent node :param parent: parent node
Get the point of the pivot to the given data point Parameters ---------- data : array-like
Start animation. :param data: :param jumptype: :return:.
Set the state of the GLS3 object.
Sets the current state of the graphics object to their default value.
Sets the state of the texture to the state of the region. :returns: None.
Unsets the rotation state of the target material.
Make sure there are modeldata for the given object. :param obj: The object
Redraw the vertices and tex coords of the regions of the given object.
Draws the modeldata of the given object to the batch3d.
Sets the model to be used when creating a new instance of the model class :param model
Writes the report report to a file. :param relative_path: The path to the
Add a menu to the peng. :param menu: the menu to add :type
Redraws the label. :rtype: None :rtype: None :ra
Redraw the label.
Draws the current window and all the widgets in the widget list.
Delete a widget from the widget list :param widget: The widget to delete :type widget
Redraws the label.
Register handlers for mouse-motion and mouse-dragging events.
Register the event handlers for the actor's crouch down and jump down events.
add a label to the window :param label_main: The label to add :type
Called when the user clicks on the exit button of the menu widget.
Update the progress bar. Args: n (int): number of items in the progress bar
Renders all the actors in the actor list using the given view. :param view: The
Draw the static world in 3D.
Returns True if a resource with the given name already exists, False otherwise.
Add a category to the image.
Returns a pyglet.Image.Image or pyglet.Image.Image.
Return the model object with the given name. :param name: the name of the model
Load a model with the given name into the peng instance. :param name: name
Get the model data for the given model name :param name: name of the model to
Adds a widget to the widget list :param widget: the widget to add :type widget
Draw the sub-menu if the submenu is not a container, otherwise do nothing.
redraw the background and stencil if the background is a background object, this will redraw the
Redraws the scrollbar to the top left corner of the container :rtype:
Returns true if the mouse is in the range [pos, pos+size[i]
The percentage of the number of items in the range [0.0, 1.0
Add a layer to the layer list :param layer: layer to add :param z:
Add an action to the model. :param action: Action name :type action: str
Execute all actions for the given action. :param action: Name of the action :type
Register a new name with the registry. :param name: Name of the new name
Add a layer to the network. :param layer: Layer object :param z_index
Draw the layered widget and its layers.
Delete all layers and remove them from the layered widget.
Returns the border of the widget. :rtype: list of border elements. :r
Return the offset of the widget. :param _offset: the offset of the widget :
Returns the size of the widget in pixels.
Read an HDF5 file and return a mesh object.
Create a connection matrix for the given shape. Parameters ---------- shape : np.array shape of
Set the fields to be added to the query :param fields: list of fields to set
Add one or more fields to the query.
Check that all elements are of the same type.
Return the space of each element in the argument list.
Return the edges of the matrix.
Return a pandas DataFrame of the CV and edges of this geometric mesh.
Add an element to the nodeset. :param tag: the tag of the element :
Convert a node set to a node set to a surface. :param tag: tag of
Convert surface to element sets. :param tag: name of the surface :type tag:
Return the metadata for each of the fields in the table.
Return the metadata of the step as a pandas DataFrame.
Make the working directory if it does not already exist.
Run GMSH on the mesh.
Read a history report from a CSV file Parameters ---------- path : str Path to history report
Read the field report from a csv file. Args: path (str): Path to the
Convert a list of numbers to a string. Args: l (list): list of numbers
Generate an equation string for the equation. Parameters ---------- nodes : list of nodes, a list
Return a string representation of a unsorted set. :param df: :param label:
Parse the response and return the payload. :param response: the response object :type response
Send a GET request to the server. :param method: :param kwargs: :param
Write the xy report to file. Parameters ---------- odb : `pandas.DataFrame` Parameters
Return the error message for this field. :param instance: the instance of the field :
Return True if exception was thrown by descriptor. :rtype: bool :rtype:
Set the data of the curve Parameters ---------- self.data : dict The data to be set
Returns the mode of the given axis. :param axis: the axis of the axis :
Set options based on x, y, and mode Args: _options (dict): The
Create a class with the given name, function, and attributes. :param clsname:
Cycle through all datafeeds and process them. :returns: None :rtype:
Try to convert the value to a float.
Convert a string representation of an integer into a float or int. :param str_value
Draws the graph of the given graph. Parameters ---------- token : `astropy.graph.
Force the given unicode string to be unicode. :param raw: unicode string :type raw
Check if mime_type matches one of the include_mime_types.
Clean up the domain name from the raw_string. :param raw_string: The
Return a list of domain names cuts from the beginning of the domain name.
Return a tuple of the hash and the hash of the given token. :param tok:
Return a dictionary of words, based on tags, tags, and words. :param si
Index a single stream item. :param si: Stream item to index :type si:
Given a hash, return a list of hash keyword values.
Return document frequencies for the given hashes. :param hashes: list of hashes :rtype
Return the tf for the given hash. :param h: the hash to look up :
Given a file-like object, return a list of tuples of all items in the stream
Read a varint from the stream.
Reads an A block from the stream. :param cls: the class to read :type
Serialize the si key to a string. :param si_key: si key to serialize
Convert a streamitem into a key and data tuple. :param si: the streamitem
Context manager to temporarily change the working directory of a file. :param path: The file
Strips the prefix from the beginning of the string ``s`` :param s: string
Strip a suffix from the end of ``s`` :param s: the string to strip
Return True if haystack is a subsequence of needle :param needle: :param haystack:
Start the server. :param host: The hostname of the server :param port: port
Shut down the server and close it :returns: None :rtype: None :
Returns a function that will be called when an error occurs on the response.
Add a route to the router. :param method: the method name :param pattern:
Given a method and a path, resolve it to a route. :param method:
Resolve a non-literal route for a given method and path. :param method: The
Given a pattern, return the pattern type and pattern. :param pattern: the pattern to
Return the response as a list of strings. :rtype: list of strings.
Add a new header to the request :param name: The name of the header :param
Sets a cookie with the given name and value. :param name: Name of the cookie
Returns a string representation of the current status code and phrase. :rtype: str.
Return the content-type of the request as a string.
Recursively remove a directory. Args: path (str): The path to be deleted followlinks
Get a list of open file descriptors for the process. :param verbose: Return list of
Try to fetch data from the server. :param work_unit: work_unit to
Returns a list of lines from a file. Args: file_name (string): Name
Return a pair of species and a random species for the describer.
Generate a random pair of adjacent species. Args: maxlen (int): maximum number of species
Morph a sentence. Args: app_id (str): App ID. sentence_file
Get similarity for a query pair :param app_id: Goolabs app ID :
Run Goolabs Hiragana. Args: app_id (string): The
Generate entity entities. Args: app_id (str): Goolabs application ID.
Shortsum a list of reviews.
Search for keywords in a body file. Args: app_id (string): Gool
Given a Goolabs sentence file, return the chronoed words in a sentence file.
Initialize all stages. Return a tuple containing reader, incremental_transforms, batch_transforms,
Run all writers. :param start_count: Start count of source :param next_
Run the list of transforms on a single stream item :param si: the stream item to
Replace the stages in the pipeline with the stages defined in the config. :param config:
Given a list of target_mentions and a list of chain_mentions,
Returns True if any of the target_mentions is in the chain_mentions.
Match multiple tokens in a stream item.
Create a ner file from a cleaned-visible file.
Shut down the child process.
r"""Multiplies p by n polynomials. Parameters ---------- p : array-like P
Takes a string and returns a list of start,end,sent_str.
Set the label index based on the annotation_id of the stream_item.
Given a stream_item, turn it into a list of Sentences.
Make a temporary cleansed file for the given chunk. :param i_chunk: list
Create a temporary NER file for a given tagger. :param tagger_id: tag
Strip punctuation and whitespace from a span. :param span: span string :type span:
Instantiates a pipeline configuration from the given pipeline configuration. :param config: Pipeline configuration.
Generate a john-smith chunk from a list of files. :param path_
Make a clean_visible.xml file for a chunk of data. :param i_
Cleans up a span of text and returns it as a string. :param str span:
Main function for the script. Args: path (str): Path to the html file.
Try to load a function in the given module and store it in the self.stage.
Load the stages from an external file.
Create a new stage with the given name and configuration. :param name: The stage name
Read from `idx_bytes` to `stop_bytes` and `run_bytes
Return True if the given href is valid. :param str href: :return:.
Return a list of label objects for the given offset type. :param clean_html:
Yields the paths of all files in the input_dir.
Generator that yields the tasks in the queue. :param key_prefix: the task key
Get a randomly selected row from the list of available rows. :param max_iter:
Parse the ner_dom and return a list of sentences, relations and attributes.
Verify that the md5 of the data is equal to the md5_expected.
Get the bucket name from the config :param config: The config :type config: dict
Decode the given data into a stream_corpus.Chunk or fcchunk.Chunk.
Get a single chunk of data from a key.
Convert a stream ID into a KvLayer key :param stream_id: stream ID
Convert a key to a stream id. :param kvlayer.kvlayer.kvlayer
Return a key for a stream item. :param si: the stream item :type si
Main entry point for the command line interface.
Build an ``argparse.ArgumentParser`` for the command line tool.
Convert a list of sentences into a list of tokens that contain a character.
Convert a list of SiTokens into a list of character offsets. :param si_
Add a tag to the end of the element list Args: tag (str): The tag
Returns the piece of text in the current tag. :returns: the piece as a string
Return the position of the text element in the document.
Returns a list of descendants of ``elem`` in the order ``elem``, ``elem
Select elements from a list of source elements. :param source: source element or list of
Select elements with the given name. :param source: :param name: :return
Select elements whose name matches the pattern `pat` :param source: :param pat:
Returns an iterator over the ``elem``'s following ``siblings`` of ``elem`
Call the inkscape command line interface. Args: args_strings (list): list
Export an input file to a new file using the Inkscape command line tool.
Convert an SVG file to a PDF file.
Converts an svg file to a png file.
Return a Jinja2 environment for the file at the given path. :param file_
Set up the template file and template environment.
Fill the file content with the given doc_contents. :param doc_contents: the
Save the content of the object to a file :param file_path: Path to the
Create a Document from a template file path :param template_file_path: path to
Fill the svg document with the contents of ``doc_contents`` :param doc_contents
Render the image to a file. :param file_path: path to the file to
Render the file to a temporary file :param file_path: the path to the file
Parse the source and return a Parser object. :param source: the source to parse :
Return the fragment of the HTML source as a string. :param str source: the source
Insert text data into the document.
Insert a node before a refnode. :param node: node to insert before :type
Return a copy of this node.
Return a string representation of an XML node.
Insert a child node into this node. :param child: child node :param index:
Parse the config file and return a dictionary of config data. :param options: The options
Try to get Google credentials from user input.
Create the event datetimes for the event. :param options: :param config:
Create a new event in the event service.
The main entry point for the command line tool. This is the entry point for the command
Returns the extension of the file at the given path. Args: filepath (str): The
Add a file extension to a filepath if it doesn't already exist.
Returns a tempfile.NamedTemporaryFile with the given suffix. Args: suffix (str): The
Remove all files with the given extension from the working directory. Args: workdir (str):
Write a CSV file to a JSON file. :param csv_filepath: CSV file path
Replace the content of a file with a new one.
Parse HTML tags. :rtype: list of strings :rtype: list.
Check the next sibling of an element tag and add it to the blacklist.
Wrap the given HTML tag with a "italic" element. :param tag: The
Create `strong` tag if it doesn't already exist. :param tag: tag to
Underline the given tag if it has a 'underlining' style attribute.
Parse the attributes of a tag. :param tag: tag to parse :type tag:
Remove line breaks from tag.
Parse the href and return the query string :param href: the href to parse :type
Parse the href attribute of a tag.
Translates key-value pairs. :param adict: dict of key-value pairs :
Return a string representation of the object as a JSON string. :rtype: str.
Find files in a folder whose name matches a regular expression. :param folder_path:
Concatenate a list of strings. :param strings: :param strings: list of strings
Yields true if full starts with part :param full: full path :param part:
Check if the full string contains the part. :param full: full string to check :
Generate a boolean representation of the object. :param obj: the object :type obj:
Yields a sequence of strings from a given expression :param seq: :param expr:
Look up a key in a table.
Replace the characters in `svg_content` in `svg_content` by their entity
Check that the input is a valid SVG file. :param svg_file: The SVG
Merge a list of pdfs into a single file.
Embed a font file to an svg file. :param filepath: path to svg file :
Embed a font file to an svg file.
Raise an exception if any of the inputs are not of type `Input` type.
Check that the _function is callable and has the correct number of arguments.
Recurse through the list of inputs. :param inputs: list of inputs :type inputs
Create an input template from a list of input values. :param option: list of input
Recursively walk through the tree of inputs, appending the output to the list of options.
Yields a string representation of the given object :param obj: the object to convert :
Convert an object to a number. :param obj: the object to convert to a number
Converts an object to a boolean value.
Serialize an expression into a sequence of tokens. :param xp_ast: expression to serialize
Change the xml encoding of a file :param filepath: :param src_enc:
Save text into an QR code.
Launch the specified option. :param option: The option to launch :type option: :
Call a command on the system. Args: cmd_name (str): Name of the
Convert a LaTeX file to a PDF file :param tex_file: :param
Return the list of options for each invoke of my_psy :param my_ps
Transform a geometry to a spatial reference :param geom: the geometry to transform :param to
Create a geometry from a WKT or WKT object or a WKT
Expands `other` into self.ll, self.ur, and self.ll
Intersect this envelope with the other envelope.
Returns True if this bounding box intersects with another bounding box, False otherwise.
Return a shapely polygon geometry.
Create a new instance of this class from a ZID and a number and a number of
Write the main dataframe to a CSV file :param path: Path to the CSV file.
Select rows whose rows satisfy the given condition :param condition: :type condition: :class
Return a table representing the nucleotide at the given nuclei Parameters ---------- nuclei
Return the intersection of this table and another table :param table: The table to return :
Return a table with rows that are not in another table :param table: :return:.
Return a sequence where each element in the sequence is an odd number or even number.
Returns a copy of the vector with even and odd digits selected.
Return a copy of the sequence with only even numbers, even numbers.
Returns a new table with the errors of this table. :param relative_to: The
Returns the binding energy of the model Parameters ----------- self : `astropy.core.
Generate a sequence of s and n-s, where n-s is a sequence of
The S1-N rule.
Convert from s to p. Parameters ---------- s2p : array_like Returns: array
The S1-p formula.
Return rows derived by the given formula. :param name: The name of the table :
Execute the function ``func`` in the context of the transaction. :param func: function
Derive a new key from the master password.
Bootstraps the database. :param path_or_uri: the path to the database
Search for a domain by name. :param query: The name of the domain :type
Modify a domain. :param domain_name: Name of the domain to modify :param
Create a domain with the given name. :param domain_name: Name of the domain
Extract messages from a hbs file :param fileobj: file-like object :type fileobj
Return path with vsi-type prefix. :param path: path to be converted to
Return the EPSG ID of the EPSG authority. :rtype: int
Main entry point for the script.
Update a file from a URL. :param url: URL of the file to update
Return a dictionary of drivers available in GDAL.
Return the driver for the given file path. :param path: the file path :param
Create a raster raster array from a geometry Parameters ---------- geom : Geometry to be converted to
Create a GeoRaster object from a GeoRaster layer and a GeoRaster2 object.
Open a GDAL raster from a file path or file-like object.
Create a GDALRaster object from bytes.
Create a copy of the source raster to the destination raster file :param source: the source
A dictionary of options for the search request.
Create a GDAL Dataset of the given size and return it as a Raster object.
Set the geotransform to use for the dataset. :param affine: the geotransform to
Read an array from the file. :param envelope: the envelope of the file to read
Return the envelope of the raster.
Return an instance of the driver to use for this connection. :rtype: driver.
Create a new raster object with the given size and optional affine. :param size: size
Return an array masked by the envelope of the envelope and geometry of the envelope.
Returns the value of the nodata attribute of the node. :returns: the nodata
Read a raster from the file-like object Args: args (int,str): number
Resamples the image to the specified size using the specified interpolation. :param size: the
Save the file to a file-like object. :param to: the file to save
Set the spatial reference to use for the projection :param sref: the spatial reference
Warp this image to a spatial reference.
Calculate the number of bins and enclen for the given alph_len.
Look up the alphabet for the given character set. :param charset: the character set :
Encodes a single chunk of data into a byte string. :param data: data to encode
Convert a single chunk of data to a long integer.
Get a single chunk of data from the data array.
Return a compiled regular expression for the given file name.
Convert a date format into a datetime.datetime.date object.
Detects the timezone of the locale. :returns: the timezone of the locale :r
Return the swagger object as a dictionary.
Handle jobs from the job handler :param job_handler: Job handler :param host:
The main worker function for the job handler. :param job_handler: the job handler
Run a worker pool. :param job_handler: job handler handler :param host:
Sets the classification of this ServicePackageQuotaHistoryResponse.
Send a message to the LWLink thread. :param msg: The message to send
Turn on a light. :param device_id: device id :param name:
Turn on switch. :param device_id: :param name: :return:.
Turns the device on with the given brightness. :param device_id: ID of the
Turns off a device. :param device_id: device ID :param name: name
Send all messages in the queue.
Send a message to the remote LWLink. :param msg: the message to
Sets the nature of this ServicePackageQuotaQuotaHistoryResponse.
Set the list of config file paths to use.
Return a generator of SCTs and option names and their values. :rtype:
Create a config file with the given index. :param index: the index of the config
Update configuration values from a dictionary of config values. :param conf_dict: dictionary of
Read a config file into a dictionary :param cfile: the config file :type c
Read all config files and return them as a dictionary of section-key-value pairs.
Return a list of possible names for the given option. :param section: The section to
Return a list of sections for the given command, or all sections if cmd is specified.
Build and return a parser for this command. :rtype: argparse.ArgumentParser.
Parse the command-line arguments. Args: arglist (list): list of command-line
Returns a bash comprehension command for the given command. :param cmd: command
Complete bash command. :param path: path to bash file :param cmd: bash command
Start a master process. :param host: :type host: str :param port:
Called when the connection is made.
Receive a line from the server. :param line: the line received :type line:
Called when the connection to the worker is lost.
This method is called when a job has been loaded. :param job: the job to
Called when a response is received from the broker. :param response: the response to
Close this job. :returns: None :rtype: None :rtype: None
Add a list of jobs to the queue. :param job_list: list of jobs
Close the server and all of the worker connections.
Changes the state of the future to the current state of all waiters in the queue.
Add a result to the result list. :param result: the result :type result:
Wait for the future to be completed.
Load the next job from the queue.
Called when the job is done.
Add a result to the result queue.
Cancels the currently active jobs. :rtype: None. :rtype: None
Wait for all active jobs to finish.
Distributes jobs to the pool of jobs that are ready to be executed.
Add a list of jobs to the job queue. :param job_list: List of
Get a job from the currently active job queue :param callback: The callback function to be
Return a job to the pool. :param job: Job to return :type job:
Add a result to a job's result set.
Called when a job set is done :param js: the job set :type js:
Cancels all queued JavaScript objects and cancels all queued JavaScript objects. :returns: None
Uniquify a list of objects. :param _list: list of objects to
Returns True if the object matches the given regular expression. :param regex: The regular expression
Returns the region name of the current AWS account. :returns: region name :rtype
Filter entries based on filters and exclude. :param entries: list of entries to filter :
Get the public DNS name of an EC2 instance :param name: the EC2 instance
Create an entry object from a dictionary.
Get the value of an attribute of the element.
Create a new instance from a boto instance. :param instance instance: boto instance object.
Check if this query matches the given filter. :param _filter: The filter :type
Return the public IP address as a human-readable string. :rtype: str.
Add the timestamp to the event_dict.
Return a logger that can be passed into the `structlog.logger` function.
Set up the celery task manager.
Deletes a job. :param worker_id: ID of the job to delete :type
Return the section of the configuration file. :returns: a dict of config values :r
Handler for config commands. :param conf: :param config: :type conf: Config
Prepare the rows of the table. :param table: list of rows :type table:
Get a color hash from a string. :param string: string to hash :param _
Return a random color from the range ``_min`` to ``_max``.
Check if a username and password is valid. :param username: username :param password:
Checks if a token is valid and returns a User object or None if token is invalid.
Check if a process is running :param process: the process to check :type process:
Import the module at `mod_path` and return the object at `obj_name
Return the IP address of the self-server. :param public: True or False.
Make a REST API request :param method: :param url: :param query_params
Prepare parameters to be passed to a POST request. :param dict post_params: Dictionary
Serve an app. Args: app_docopt (dict): A dict of docopt
Render the template with the given name and value. :param name: name of the template
Stream a list of command dictionaries to be streamed. :param commands: list of command
Return a `WorkDays` object for a given date range. :param from_date
Get the path of a given command.
Build SSH command. :param hostname: :param username: :param idfile: :
Load a LsibleProfile from the command line arguments. :param args: Command line arguments
Add a relationship to this model. :param part: :param id: :return:.
Return a list of packages that are related to the given type. :param reltype:
Load relationships from the given data source.
Add a part to the collection. :param part: The part to add :param override
Load a part of a given rel_type from the given data. :param rel_
Find an extension for the given name. :param str name: The name of the extension
Create an instance of a class from an XML element. :param element: XML element.
Parse input_string. :param input_string: input string :param prefix:
Build a JWT. :param secret_key: The secret key of the JWT :type
Assign a force field to each atom in the AMPAL object.
Returns the maximum number of rad and npnp Parameters ---------- max_rad : int Number of
Return a dictionary of force-field parameters as a dict of force-field-parameters.
Return a file-like object as a file-like stream. :rtype: file
Get all matching segments of a given name. :param zf: file-like zf object
Return a list of all filenames in a directory. :param dirname: the directory to list
Return a list of the directory names in a directory. :param dirname: the directory to
Create a prefix for the bucket. Args: dirname (str): The path to the bucket
Delete a file from the S3 bucket.
Make sure we have a valid login token. :returns: None :rtype: None
Return the loud version of the current language. :param lang: the language of the
Return the home URL. :returns: the home URL :rtype: str :ra
Returns a list of hotspots for each line in the tree.
Get a keeper token from Keeper. :param host: keeper host :param
Upload a new build to Amazon Travis. :param product: Product ID :param
Check if we should skip the travis event. :param on_travis_
Confirm a build with Keeper. Args: build_url (string): The URL of
Recursively update dict d with dict u.
Main entry point for the keeper daemon. Args: log_level (str): The
Edit a part of an XML file. Args: path (str): File path to edit
Command for packing a directory into a list of files. Args: path (str):
Split a path into drive, head and tail parts.
Return the editor to use for the given file. :param filepath: path to the file
Process a module node :param node: the node to process :type node: Node :
Generate HTML chart. :param slug: :param name: :param dataobj: :
Generate the HTML code for a chart.
Serialize a dataobj into a chart.
Patch the json object. :param json_data: The data to patch :type json
Convert a JSON object to HTML. :param slug: The slug :param json_data
Convert a dictionary to a pandas.DataFrame :param dict obj: the dictionary to be converted
Writes the given HTML to a file in the folder specified by `slug` :param slug
Return a chart class based on chart_type :param df: Dataframe :type df
Encode the x and y fields using the given time_unit and scale.
Infer the URL of a tarball from the app.json file.
Create a new app with the given tarball_url and env.
Delete an app from the GitHub GitHub API. :param auth_token: The auth token
Generate a random binary string of given length. :param length: length of the string
Generate an IPv4 address.
Generate a random date from a start and end date.
Create a session object with the auth_token set. :rtype: session.Session
Make a request to the API. :param method: The API method :param endpoint:
Create a build for a tarball :param tarball_url: URL of the tarball to create
Check the status of a build. :param build_id: ID of the build to
Generator that yields a sequence of strings. :param prefix: prefix of the sequence :param
Register all sub commands to the parser. :param parser: the parser to register the sub
Return the root argument parser.
Get the description of this element.
Return the help text of the command.
Run the sub-command. :param args: Command arguments :param args: Command arguments
Encode an array of data into a string, using the given encoding code :param args:
Gets a list of all available athletes. :returns: A list of
Get the last n activities.
Request the activity list for the given athlete. :param athlete
Request the activity data for a given athlete. :param athlete
Return the endpoint for the given athlete.
Return a URL for the activity endpoint.
Make a get request to a goldencheetah endpoint.
Create a build. Args: tarball_url (str): URL of the build tarball
Return a URL with an authorization object. :param regex: :param view: :param
Generate a random title from a list of languages. :param languages: list of languages to
Return first_name, last_name, first_name, first_name, first
Get a random last name for a given language. :param languages: list of languages to
Render the options. :rtype: dict :rtype: dict :rtype
Set the dataset of the model. :param data: the data of the model :param
Render the plot into a dictionary.
Check if the type is in the list of supported types. :param type: type of
Returns the URL for this resource. :rtype: str :rtype: str.
Open the current page in a web browser.
Save the image to a file :param fname: file name :type fname: str :
Open a URL for the current URL. :rtype: file-like-object.
Return an PIL Image.Image object from the URL.
Write the contents of the URL to the file-like object-like object ``fp``
Return the SHA-256 checksum of the contents of this path.
Generate a random amount. :param min: minimum value :param max: maximum value :
Return a dictionary of claims that are not in the supers and are protected.
Return a list of signing keys as JWKS. :rtype: list of JWKS
Unpacks a metadata statement into a MetadataStatement object :param ms_dict: :param
Packs a metadata statement. Parameters ---------- metadata : `metadata.Statement` or `metadata
Evaluates the given metadata statement and returns a list of lessorequal expressions :param metadata:
Corrects a federation usage in the metadata :param metadata: The federation_usage
Add SMS information to the request object :param req: :param sms_dict: :
Parse the command line arguments and return a list of command-line arguments.
Add command line arguments to the argument parser.
Apply logging options to log_levels and log_files.
Log a verbose message :param msg: :param args: :type msg: str :
Return a dictionary mapping letters to number of occurrences of letters in word. :param word:
Yields words that are anagrams in the specified range of start and end positions.
Convert class name to upper case and return as a tuple of the class name and upper case
Given a timeseries, return a list of points that intersect the given start and end times.
Returns the last value in a timeseries.
Validate page number. :param number: number of page to validate :type number: int
Get the next page of an iterator. :param iterator: the iterator :param page_
Chmod the file at `path` to `mode` :param path: the path
Return an instance of the internal signing service. :param config: :param entity_id
Create a signing service based on the config and entity_id. :param config:
Create a signature of the request. :param req: request to sign :type req:
Make a POST request to the API. :param req: :param kwargs: :return
Updates a metadata statement :param location: the location of the metadata statement :param req:
Update the signature of a file. :param location: Location of the file to update :
Yield the contents of the bundle. :param data: The contents of the bundle :type
Create a bundle from the given data :param data: The bundle data :type data:
Return a list of URLs for the given asset type.
Generate HTML tags for the given asset type :param str asset_type: The asset type
Generate HTML tags for each asset type. :param args: :param kwargs: :
Given a url, make sure that it has a protocol. :param url: The url
Given a URL, return a list of links to the URL. :param url:
Called when a client is connected to the server.
Returns a list of module names for all packages in the project. :rtype: list
Import all the modules specified in the command line Args: self.get_modules (list
Select fields from field_list :param doc: :param field_list: :return
Map a list of date-like objects to a list of time-like objects.
Print a cursor to a CSV or JSON file. :param fieldnames: fieldnames of the file
Print the cursor to stdout. :param fieldnames: field names to print :type fieldnames:
Get a list of tasks from a list of do_tasks :param do_tasks:
Add default dependencies to project.
Add default dependencies and types to the project if they haven't already been added.
Post save event handler for sequence post_save. :param kwargs: dict :return:.
Create all of the tasks for the given element :param element: the element to create :
Get the value of the given key in the section. :param section: section name :
Add a factory with the given identifier. :param identifier: The identifier of the factory :
Remove a factory with the given identifier from the registry. :param identifier: The identifier of
Establish a connection to the given protocol factory :param factory: the protocol factory :type
Called when a data packet is received from the client. :param connection: Connection number :
Disconnects a connection from this broker :param connection: the connection to disconnect :type connection
Call a remote command. :param command: command to call :type command: string :
Establishes a connection to the remote system.
Called when the connection has been established. :param dict response: The response to the connection
Send data to the client.
Send data to the client. :param data: The data to send :type data:
Called when the connection is lost.
Return the protocol for the given connection identifier. :param connectionIdentifier: the connection identifier :
Called when a data frame is received from the remote protocol.
Disconnect a connection from the broker. :param connection: the connection to disconnect from :type
Takes a string and returns a string centered on the left side of the input string.
Prints the clock on the right side of the given string. :param string mystring:
Return a version number as a string.
Identifies the appropriate framework for the given unit :param target_unit: The unit to
Assert that the given value can be converted to the given target unit Parameters ---------- name : str
Pads data_to_pad to block_size.
Unpads the data to block_size with padding at the end of the data.
Sign a request using the self-signer :param req: The request to sign :
Gather metadata statements for a given context. :param context: The context to gather metadata statements
Pretty-print a word. :param input_word: input word :param anagram
Parse command line arguments. Args: args (list): list of command line arguments.
Main function for printing a list of words. Args: wordlist (list): list of
Process received data. :param data: data to process :type data: bytearray.
Called when a type key is unregistered.
Create a function stub for the given URL. :param url: the URL of the endpoint
Ping to the remote peer. :param PeerId peerId: Peer ID :type Peer
Return a regex matching for the command.
Convert a string representation of `proto` into a string of `value` type `proto
Convert an object to a string representation of a protobuf-style representation of the object.
Verify that the metadata statement is valid :param kwargs: The verification parameters :type kwargs:
Parse the response from the remote server. :param response: The response from the remote server
Returns a list of all databases in the current database.
Synchronizes a folder with S3 :param path: path of the folder :param bucket
Build all the modules in the given package. :param path: the path to the package
Creates a new Fridge object with read-write access.
Load the data from the file into the internal state of the object. :rtype:
Creates a self-signed JWT. :param keyjar: keyjar :param iss:
Create a signed request using the key jar. :param keyjar: :param iss:
Given a test directory, load all files in the test directory into the test directory.
Run the tests and return the result.
Return the score of a letter.
Score a word. :param word: word to score :param input_letters: list
Yield words from word list.word_list can be a list of strings or strings.
Checks if a word is a valid scrabble word. :param word: the word
Process a string received from the server.
Return the command and responder function. :param commandname: the name of the command to
Parse the arguments of a request. :param request: the request object :param command:
Write the response to the transport. :param response: the response to write :type response
Stop receiving boxes and disconnect from the remote server.
Build a JSON-ASN.1 protocol for the given address :param addr: the address
Converts a JWKS object to a Keyjar object :param jwks: the JWKS
Load a JWKS bundle from a JSON string. :param jstr: JSON
Process nova notifications. Args: body (dict): nova_customer_process):
Process Cinder events. :param body: Cinder event :param message: Cinder
Process an event. :param body: Event body :type body: dict :param message
Process glance events. :param body: the request body :type body: dict :
Process a swift message. :param body: the body of the message :param message:
Process keystone event. :param dict body: The event body :param message: The
Process the given event body. :param dict body: the event body :type body:
Serve the application. :param server: :param server: :type server: :class
Print a message to stdout. :param msg: message to print :param log: log
Print `msg` to stderr with `log` if `log` is not None.
Register a command subclass to be executed when the command is executed.
Registers a command subclass with the given class :param class: class to register :type class
Returns a string representation of the argument.
Create a new argument from a string. :param string: The string representation of the argument
Update a completers dictionary with a new completers dictionary :param completers: dictionary of
Initialize connection and connect to ternya. :returns: None :rtype:
Create a connection to the MQ and return it :rtype: MQ connection :rtype
Load the service modules from the config file :returns: None :rtype: None :
Create a Nova consumer with the MQQueue. :param mq: MQConsumer instance :
Create the cinder consumer with the MQ queue. :param mq: the MQMQ
Initialize the Neutron consumer with the given message queue. :param mq: message queue
Create and configure the glance consumer :param mq: MQConsumer instance :type mq:
Start the heat consumer. :param mq: queue manager :type mq: MQConsumer
Enable component notification. :param openstack_component: Openstack component identifier :type open
Get information about a song. :param songid: Song ID or list of S
Download a music.mp3 file from music.mp3 :param song:
Execute the instruction. :param globals_: the globals of the instruction :param globals_
Return the value of the variable with the given name :param name: name of the variable
Called when a function call is made.
Dump a MySQL database to a file :param str filename: filename to dump :param
Call the default atexit function if it exists. :rtype: None :ratype
Execute the application. :param args_list: list of args to run :type args
Change the working directory to the given path. :param path: The path to change :
Copy a source directory to a destination directory :param src: source directory :type src:
Set the debugger. This will be called when the debugger is being run.
Get the mtime of a file. :param fname: file name :type fname: str
Return True if the item has been modified since the last time this was called.
Sync all files in the directory with the database. :rtype: dict :rtype
Remove all files from the file-like object.
Scrape a feed from URL and store it in the IPDB. :param url:
Download the image from the url to the local cache directory. :rtype: str.
Check if the image has changed since the last time it was last modified :rtype:
Finds the caller filename, line number and name of the calling function. :param stack_
Return the defining component of the given pe_pe or None if the pe_pe is
Command-line entry point for the metamodel command line tool.
Find a symbol in the symbol stack.
Return True if root is contained in ``pe_pe`` :param pe_pe:
Check if a PEPE is a global PE. :param pe_pe: pe
Get the data type name of the given data type. :param s_dt: the
Get the attributes of the related objects. :param r_rgo: :param r
Create an enum object from an EDT. :param s_edt: EDT
Create a bridge function for a bridge :param metamodel: metamodel :param s_
Given an entity, return a named tuple of bridge functions and bridges.
Make a function that can be used to run a function on a sync. :param met
Make a constant value from a cnst_syc object. :param cnst_
Make an operation from an OperationType. :param MetaClass metaclass: :param o
Make a derived attribute from the given object attribute. :param metaclass: the metaclass
Make a simple association between two objects of the same type. :param m: :param
Create an association object from the given association model. :param m: the association model :
Make a component domain. :param bp_model: the model :param c_
Run the call and return the result of the call. :param socket: The socket to
Accept a reply from the client. :param reply_socket: The socket to accept the
Reject a reply. :param reply_socket: :param call_id: :
Send a reply to the server to raise an exception. :param reply_socket:
Wait for a call to be sent to the broker. :param hints: list of hints
Establish a connection to the result queue.
Dispatch a reply to the result queue. :param reply: The reply to process :type
Guess the type name based on the type of the value. :param value: the value
Given a type and a value, deserialize it into a value. :param ty: Type
Get a feature from the index. :param content_id: :param feature_names
Put a list of features into the index. :param items: list of features to put
Delete the given content_id from the index. :param content_id: the content
Delete all mappings of this type from the index :returns: None :rtype: None
Delete the index from the elasticsearch cluster :returns: None :rtype: None :ra
Given a prefix, return a sequence of DIDs and FC objects. :param prefix
Get a list of DID's associated with a prefix. Args: prefix (str):
Return a list of scan IDs for a single index scan :param fname: name of the
Convert a list of feature names into a list of feature names. Parameters ---------- feature_names
Returns a list of filters for the given key_ranges. :param key_ranges:
Return a dictionary mapping indexed features to their corresponding indices :rtype: dict.
Return a list of field types for the given field type.
Return a list of index names that are disjunction from the query :param query_fc
Returns the number of bytes in the FCP file. :param fc_dict: dict
Count bytes matching the filter_preds. :param filter_preds: list of
Return a string representation of a counter.
Process the command-line docopts.
Format the error message with HTML-escaping if necessary. :param error: the error
Return a string representation of the given link. :param inst: the instance of the
Given an instance and an identifier, return a string representation of the unique identifier.
Check that the attributes of a model are unique Parameters ---------- kind : str The type of the
Check integrity of a link :param link: the link to check :param m: the
Check that the `super_kind` is a subtype of the `rel_id`
Transform a value into a string that can be used as a binary string. :param val
Delete all rows from the table and index tables :returns: None :rtype: None
Scan the prefix of an index. :param idx_name: name of the index
Put an index into the kvl index table. :param idx_name: name of
Store the given value in the given index as a raw value. :param idx_name
Return a list of unique keys for a specific index. :param idx_name: name
Return the index object for the given name :param name: The index name :type name
Add a direction to a string. :param value: the string to add :type value
Return the name of the type of the given type. :param s_dt: the
Given an attribute reference, return the attribute that was referenced by it :param o_attr
Build a core type element from a core type definition. :param s_cdt:
Build an XML element for the enum type of the specified element. :param s_ed
Build the type element of the type element :param s_sdt: :type s
Build a user type XML element :param str s_udt: :return:.
Build a type for a given dt :param dt: the dt to build :type dt
Build a class element from the given object. :param o_obj: the object to
Build a component element from a component object.
Build the schema for a given model. :param m: the model :param c_
Given an XML string, return a pretty-printed version of the XML string.
Fetch a list of bikes from XSRF. :param xsrf_token:
Sets node's position and character_stream attributes to the position of the node :param node
Create a queue with the given name :param name: name of the queue :param strict
Delete a queue. :param name: queue name :type name: str :param
List all queues. :returns: list of queues :rtype: dict :rtype
Return a list of exchanges for the current user :rtype: list of exchanges
Purge a queue. :param name: The queue name :type name: str :param
Create a message from the given arguments. :param to: The recipient of the message :
Reads the image from the tesseract server and returns it as a string.
Returns True if the text is visible, False otherwise.
Parse command line arguments and run function. Args: args (list): The command line arguments
Return a serialized value for a given type. :param value: the value to serialize :
Return a string representation of a association.
Serialize a class to a string.
Command-line interface for the command-line tool. Args: query (list): The
Partition a list into two lists, where the first list contains all items that satisfy the given
Return the bidi translation context. :param request: the request object :type request:
Find a link between two objects.
Compute the key to use for a lookup. :param from_instance: the instance to
Compute the index key for the given object. :param to_instance: the object to
Returns the type of the attribute with the given name :param attribute_name: The name
Create a new instance of this MetaClass. :param args: :param kwargs: :
Return a generator that yields instances of all the metaclass's storage classes.
Define a new metaclass with the given attributes. :param kind: Kind of the meta
Send a message to a Kafka socket :param socket: the socket to send :type socket
Receive data from a socket. :param socket: socket to receive data :param flags:
Run a non-interactive command to run the code in a temporary directory.
Parse emails from a string or list of strings. :param values: list of strings or
Returns a function that can be used as a decorator for rpc calls.
Given an application object, return a dictionary of RPC specifications and their values. :param app
Normalize the postcode for the request. :param request: :param handler: :return
Get the next item from the queue.
Accept the `System` and `System` instances. :param inst: :class:`
Accept a C or C-style instruction. :param inst: The instruction :type inst
Accept an instance of `PEPEPackage` or `PEPPackage` instance.
Get the brightness of the current image :returns: the brightness of the image :rtype
Match the expression with the given list of arguments. :param args: a list of
Find the position of the first character that matches the search_char in the document.
Returns the selection for the character at the given position. :param position: The position of
Called when the cursor position has been changed.
Return exception information as a tuple. :rtype: tuple. :rtype: tuple
Get an instance of the class with the given name :param name: name of the
Add the input buffer to the history if necessary. :type source: str :param hidden
Called when the up button is pressed. :param shift_modifier: Shift modifier of the
Return True if the cursor is on the right side of the prompt. :param shift_
Find the previous occurrence of a substring in the history buffer. :param substring: The substring
Move to the next edited history. :param substring: The substring to move :type substring
Handle execute reply messages. :param msg: The reply message :type msg: dict :
Returns True if history is locked and the cursor is not the end of the input buffer.
Get the value of the history_edits property for a given index. :param index
Sets the history. :param list history: The history to set :type history: list
Store the current state of the history buffer.
Called when the user closes the connection :returns: None :rtype: None :ra
Convert a collection of records to a dataframe. :param collection: collection of records :type
Set the attributes of the object. :param kwargs: dict of key-value pairs :
Subscribes to all topics.
Log a message. Args: raw (tuple): the message to log.
Yields the contents of the given remote object.
Convert a notebook to this notebook format :param nb: notebook object :param orig_version
Return the importer for the given path_item.
A wrapper for ``cStringIO.stringIO`` that works with CStringIO.
Check to see if we need to override setuptools with a setuptools version.
Parse a requirement string into a requirement object. Args: src (string): The requirement string
Parse the pkg_info string and return as a dict.
Collapses leading whitespace into a single string. :param header: :param txt:
Hides the widget and disconnects the widget from the event filter. :param event:
Called when the completion widget is displayed. :param event: the show event :type event
Return the current text cursor. :returns: the current text cursor :rtype: :
Updates the selection of the currently selected item. :returns: None :rtype: None
Registers all models in the admin site for the app. :param str appname: name of
Get partitions of all disk partitions. :type all: list of partitions :rtype:
Get system CPU times as a list of time-tuples.
Get the system CPU times per CPU. :returns: A list of CPU times per CPU
This function is used to read a file from STDIN and convert it to a string.
Read a raw block of data from stdin.
Update the visibility of the tab bar.
Creates the tab with the current kernel. :returns: None :rtype: None :
Add a tab with a frontend to the tab widget :param frontend: The frontend to add
Populates the all_magic_menu_dict with the contents of the list of magic
Show a dialog to close the active window :param event: The close event :type event
Checks if the password matches the hash of the password. :param hashed_passphrase:
Return an indented short title for the given item. :param item: the item to
Check if user has permission to change an object.
Check to see if the current user has permission to delete this object. :param request:
Add a list of nodes to the graph. :param parent: The node to add :
Make a bintree graph from a list of levels. :param levels: list of
Submit a list of jobs to each node in the graph.
Validate that all nodes in the graph are finished. Args: G (:obj:`Graph`
Make a table of color names and values for the given class. :param in_class
Return a copy of this color scheme.
Add a new color scheme to this color map :param new_scheme: a color scheme
Set the active scheme name. :param scheme: scheme name :type scheme: str :
Returns the path to the home directory of the library. :param home: the home directory
Handle iopub messages from the iopub channel.
Waits for the kernel to be running.
Set the style of the element. :param style: the style of the element :type
Get the format associated with the given token :param token: the token to get the
Return the format of the given token in the given document. :param token: the token
Create a format object from a style. :param token: the token to format :type
Given a command and a list of paths, return the path to the command.
Normalize a path to be used as a relative path. :param path: the path to
Check that `attr` is in `value` Args: dist (distlib.Distribution
Check that the value is a valid entry point map.
Return True if the last line of src is a blank line.
Return True if there are two blanks in the source string. :param src: source
Transform assign system to assign system to system name. :rtype: str :rtype
Transform `assign_magic` to `cmd` and `lhs`, `cmd`
Transform a line of text to a classic prompt.
Transform a single line from an IPython prompt into a single line. :rtype: str
Find the number of spaces to use to indent the line. :param line: the line
Store a line of text in the buffer.
Reset the source stream to its raw state and return the new source and the raw state.
Handle cell magic. :param lines: lines to process :type lines: list :r
Append lines to the end of the cell magic parts.
Transforms a single cell into a new cell.
Posts a notification to all registered notification subscribers. :param ntype: Notification type :param
Return a set of observing for the given notification type and sender. :param ntype
Add a callback to be called when a notification of a given type is received. :param
Update the status of the jobs in the job queue.
Print a group report of the jobs in the group. :param group: :param name
Remove all jobs from the group.
Update the status of the report. Return True if the report was updated, False otherwise.
Report the status of the job. :param verbose: the verbose level :type verbose:
Initialise the thread. This method is called when the thread is started.
Insert ``value`` at ``idx`` of ``self._value``.
Return a copy of this file.
Declare a special type. :param name: name of the special type :type name
Declare a list variable with the given name. :param name: The name of the
Declare a special set variable.
Set the current working directory. :param value: The path to the working directory :type
Move a route to a new state.
Calculates the total energy of the cities of a given state. :param state: state
Return a dictionary of default values for the given keys. :param keys: list of keys
Check to see if the keys and types are the same. :rtype: bool.
Return a list of expressions for the given check. :param check: The check :type
Generate a table from a list of strings. :param rows: a list of strings
Generate a HTML link tag. :param url: URL to link to :param classes:
Return a javascript file from a URL.
Generates a CSS file from a given URL.
Create an img tag with the given attributes.
Sub ``arg`` to ``value`` If ``value`` is not numeric, ``arg
Same as ``math.multiply`` except that it raises ValueError if value or arg are
Divide `value` by `arg` :param value: :param arg: :
Returns the remainder of the value with the remainder of the argument.
Return the verbose name of a modelform or model object. :param obj: the object
Split the user input into pre, esc, ifun, and the rest.
Add command-line options to the parser. :param parser: the command-line parser
Deactivates the built-in module and removes it from the built-in dict.
Given a url_name, find the base path of the url.
Given a set of ``rels`` and ``rels``, return a ``Link
Convert a string of shell commands into a list of commands. :param string s: the
The entry point for the coveragescript command-line script. Args: argv (list
Add an action to the action list. :param dash: the dash :type dash:
Append the action code of an option to the list of actions. :param option: The
Prints the help message for the given topic or error. :param error: the error message
Handle the help command. :param options: the command line options :param args: the
Check if the arguments passed to the command are allowed to be passed to the command.
Execute the code coverage. :param options: Command options :type options: CommandOptions.
Display debug information. Args: args (list): list of information to print.
Unserialize an object from a list or tuple of buffers.
Sets sys.displayhook to self.hook, if it's not already set.
Logs an exception thrown by the given function. :param f: function to log :param
Check if the given URL is a valid URL. :type url: str :param url
Check that the given URL is valid. :param url: URL to validate :type url
Validate that a container is a valid URL. :param container: container to validate :type
Pulls a value from the user namespace. :param keys: The value to pull :
Select a number of random ports and return them. :param n: number of ports to
Map sequences to a sequence of sequences :param sequences: sequences to map :type sequences:
Return a list of the last n lines of the current line history.
Set the auto indent setting. :param value: auto indent value :type value: int
Initialize the logstart magic. :returns: None :rtype: None :raises
Save sys.sys_module state to self._orig_sys_module_state.
Restore sys state to the original sys module state.
Register a post-execute function to be called after the query is executed. :param func
Create a new main module with the given ns. :param ns: namespace of the module
Initialize the user namespace and update the user_ns_hidden with the user_ns_
Return a list of all namespaces that reference the main namespace.
Reset the state of the global namespace manager to a new state :param new_session:
Remove a variable from all registered namespace references :param str varname: name of the variable :
Remove all selective variables that match the regex. :param regex: the regular expression to
Helper function for OFIndProperty :param oname: Name of the property :param info
Return the value of the ``oname`` field in the OFInd object. :param
Inspects the object with the given name.
Initialize history manager and add it to configurables list :rtype: :class:`
Print the traceback of the exception tuple. :param exc_tuple: exception tuple :param
Print the traceback of an interactivetB to stdout :param etype: the type of
Show the traceback of an exception that was raised in a syntax error. :param filename:
Write the current line of text before reading the next line. :rtype: None.
Add a custom completer to the list of completer matchers.
Set the global namespace and local namespace of the completer. :param frame: the frame to
Run a line magic on a given line. Args: magic_name (str): The
Given a magic name and a magic kind, return the magic object corresponding to it.
Define a macro in the user namespace. :param name: the name of the macro :
Run a system command. :param cmd: the command to run :type cmd:
Prompt the user for input and rewrite the input with the output of the command.
Given a list of user variables, return them as a dictionary. :param names: list
Evaluate a dict of expressions to a user namespace. :param expressions: dict of expressions :
Evaluate an expression in the context of the current user namespace.
Execute a file in an ipython notebook.
Run a cached cell magic with the current magic body. :param magic_name: name
Expands a function call into a function call. :param str cmd: The command to
Create a temporary file and add it to the self.tempfiles. :param data:
Called by the subprocess when the process exits.
Broadcast a message to all targets in the cluster. Args: client (SQLiteClient):
Return a list of profiles in a directory. :param path: the directory to look for
List all profiles in bundled package directory.
Returns the distribution with the given key, or None if no distribution with that key exists.
Returns the path to a file in the PATH environment. :param filename: filename to which
Returns the next token from the stream.
Send a string to the child process. :param s: the string to send :
Send a vintr character to the child process.
Prepare a regular expression pattern to be used for parsing. :param p: :type p
Prepare a regex pattern to be used as a regular expression :param p: the pattern to
Searches for a string in the buffer. :param buffer: string to search :param fresh
Search for the best match in the given buffer :param buffer: The buffer to search :
Copy files from a directory to extract_directory. :param filename: the directory to extract
Return the last error from the log.
Executes the given command and returns the output of the command. :param cmd: the command
Try to find the source of a given filename.
Return a list of arcs executed in the source file.
Return the list of arcs that have not been executed.
Return a list of unpredicted arcs, excluding those that are not in the executable.
Return a list of branch lines, excluding those that have exit count greater than 0.
Return the total number of branches in the tree.
Return a dict of missing branch arcs.
Return branch statistics as a list of tuples.
Set precision to use. :param precision: precision to use :type precision: int :
Return the number of points covered by the executed statements and branches. :rtype: float
Return a string representation of the line number covered by the line number.
Highlight needles in haystack.
Highlight a string with a list of keywords :param string: string to highlight :type
Highlights words in a string using a list of keywords Args: string (:class:`str
Runs a function in the context of the thread. :param func: The function to run
Given an input string, this will return a string with the first and last parts of the
Generate a marquee of the given text. :param str txt: :param width
Format screen data. :param strng: string to format :type strng: string
Dedent text. :param text: text to dedent :type text: str :
Wrap the given text in paragraphs and return a list of paragraphs. Args: text (str
Given a list of rows, find the optimal row and column numbers, and return a dict
Return the item at the i-th item in the list, or the given default.
Build the kernel's command line arguments to be passed to the frontend.
Initialize the SSH server if it's not already set.
Pretty-prints the given object to a string. :param obj: the object to
Pretty-prints an object. Args: obj (object): The object to print
Return the mro of an object class.
Pretty print an object to the printer. :param obj: the object to print :type
Pretty print super class and super class.
Pretty-prints a re pattern.
Print the name of the object in a human-readable format.
Pretty-print a function to the given ``p`` object :param obj: the function
Pretty print an exception.
Register a printer for the given type. :param typ: Type to print :param func
Register a function that will be called when a type of the given name has been found.
Write a single line of text to the output. :param obj: the object to write
Break a group of lines with `sep` at the end of the group stack.
End a group. Args: dedent (int): Number of lines to be dedented.
Flushes the buffer to the output stream.
Pretty-print an object. :param obj: Object to pretty print :type obj:
Writes a row to an ODS workbook. Args: ods (:class:`ods
Get the contents of the clipboard. Returns the contents of the clipboard as a string.
Get the contents of the clipboard.
Get the clipboard contents of the user's browser.
Get the build prefix to use for the build.
Rekey the keys of a dictionary. Args: dikt (dict): The dictionary
Extract datetime objects from a dict, list, list or dict of datetime objects.
Squash dates in a dict, list, and datetime objects.
Return the ISO8601 representation of a datetime object. :param obj: the object to be
Check if site directory is present in site_dirs.py.
Write a script to the install directory. :param script_name: name of the script
Sleep for ``t`` seconds. :param count: :param t: :return:.
Create an argument parser for the given command.
This is the main entry point for zmq-disambiguate. This is the main entry
Build a PackageFinder object. :param options: :param index_urls: list of
Called when the log level has changed.
Create a logger with default log level and log format. :rtype: None.
Check that the flags have been changed.
Print the alias help for each class in self.aliases :returns: None :rtype
Prints the help text of the flags.
Print the sub-commands of this command.
Prints the help message for the command. :param classes: if ``True`` print the
Print the list of examples.
Update the config with the given config. :param config: the new config :type config
Initialize a sub-command with the given command-line arguments. :param subc:
Flattens the flags into a dict of flags, and a list of aliases.
Parse a command line argument list. Args: argv (list): A list of command line
Load a config file into the configuration object :param filename: The filename to load :type
Generate the configuration file for this class.
Downsample an array. Args: array (:obj:`numpy.ndarray`): array of
Format a list of labels and data as a list of strings. :param info: list
Writes the given message to the output stream. :type msg: str :param msg:
This method is called when a configuration value has been changed. This method is called when the
Get the help text for a given class. :param cls: instance of the class :
Returns a human-readable description of a trait.
Clear all instances of this class.
Format a test failure. :param test: :param err: :param err: :
Print a message to stderr if the interpreter is not initialized :param etype: exception type :
Flushes the connection to the system.
Start all channels and emit a started_channels signal :rtype: None :rtype
Read data from a file-like object :param file-like fp: file-like
Reads data from a file-like object, without interrupting if the file-like object
Split a string into a list of tokens.
Compress a dhist into a single dhist. Args: dh (list): list of
Record a function as a magic in a dictionary. Args: dct (dict): dictionary of
Return a dictionary of documentation for each magics in the library. :param brief:
Format LaTeX output to LaTeX format. :param str strng: La
Set the default option for the given file name.
Give a reference to a page object that can be used as a GUI reference.
Create a task object from a callable string.
Get task info for a given label :type label: str :rtype: dict.
Returns the callable object from the function info :returns: the callable object :rtype:
Calculate the next run time based on the last run time of the schedule.
Submits this task to the run queue. :param timestamp: The timestamp of the task
Run the task with the given message. :param message: The message of the task :
Calculate the next run time and save it to the database. :returns: None :r
Create a task with a callable and run iterations. :param the_callable: callable to
Runs the callable at most once in a series of time.
Find the url file for the profile. :param str url_file_name: The
Bind the kernel to the engine. :param kwargs: :returns: None :rtype
Create a kernel interrupt event.
Wait for all processes to be finished.
Given a namespace, return a dictionary of objects that match the given name_pattern and type
List all objects in a namespace. :param namespace: namespace to list :param type_
Check that all keys in ex_op are in dict. :param dict: dict of
Draw the current figure, if interactive mode is enabled.
Flushes all figures that are currently in use to draw the figure to the backend.
Send a figure to the display.
Loads an extension from the ipython_extension_dir. :param module_str:
Unloads an extension from the IPython notebook. :param module_str: name of the
Generate random ports. port - port number n - port number n - number of ports
Initialize the web application and http server :returns: None :rtype: None :ra
Handle a signal signal. This function is used to stop the process. :param sig:
Wait for the user to exit the process.
Clean up all kernels.
Generate price options for a given number of days. Parameters ---------- s : array_like,
Replace all occurences of ``dict`` with ``text`` with ``dict``.
Render the template with the given arguments. :param name: The template name :type name
Create a new zip file in the current directory.
Fix the version of PyPI to support older versions of PyPI. :param context:
Return True if the given object can be mapped to any of the arraymodules.
This function is used to partition a sequence into a list of elements p and q.
Run the source at the given file name. Args: fname (str): The file to
Run the command in the shell. :param source: the command source :param interact:
Download a file from the pi server. :param filename: filename of the file to download
Reduce a frequency list to a sum of all frequencies. :param freqlist: list of
Computes the frequency of each digit of a file. Args: filename (str): The filename
Convert a text file to a list of digits. :param filename: file name of
Calculate one-digit frequencies from a list of digits. :param digits: list of digits
Given a list of digits, return a frequency matrix for each digit in the list of digits
Calculates the frequency of each digit from a list of digits. :param digits: list of
Plots the two-digit frequencies of a 2-digit frequency matrix. Args: f2
Plots one-digit frequency spectrum. Args: f1 (Frequencies): A frequency spectrum
Print a debug message to the current stack frame. :param expr: the expression to print
Reverse a view. :param view: :param args: :param kwargs: :return
Return True if the prefix is a private key.
Print a debug script from a source file. Args: src (str): source to be
Runs a script in a temporary directory.
Run a debug script on the given module. :param module: the module to run :
Return the hashdict for the given hashroot. :param hashroot: the hashroot
Compress the hashroot into a single file, removing all the files with the same name.
Return a list of all keys that match the globpat. :param globpat:
Returns True if the record is allowed to be logged. :param record: :return:.
Formats an error for the test. :param err: the error to format :type err
Embeds a shell into a terminal. :param kwargs: the arguments to embed :type
Return a tuple of trans_title, meta_title, and trans_csv_path
Create locale directory if needed. :param languages: list of strings :type languages: list
Write entries to PO files. :param po_files: list of files :param languages
Write the header of a PO file. :param po_path: path to the PO
Subscribes a user to the authenticated user. :param user: the user to subscribe
Initialize the command line parser. :returns: (OptionParser, options, args) :
Run a python module with the given arguments. :param modulename: module name :type modulename
Run a python module from a file. Parameters ---------- filename : str Path of the file to
Create a compiled code from a Python source file. :param filename: filename of the source
Read code from Python code.py and return marshaled code from python code.py.
Return a HTML table from a matrix of rows, columns, and columns. :param item
Set the current position of the interval. :param value: the current position :type value
Cancels the completion of the sliding window :returns: None :rtype: None
Selects the index of the given row and column. :param row: row of the table
Update the sliding interval list :param hilight: whether to show the hil
Return frequency of words in text. Args: text: text to process is filename or file
Print word frequency information. Args: frequencies (dict): Word frequency dictionary. n (int
Return a string representation of the XML document.
Write a CSV file to a file. :param filename: filename of the file :type
Validate a PIN. :param pin: PIN to validate :type pin: P
Send a shared pin to a list of topics Args: topics (list): List of topics
Delete a shared pin.
Send a pin to a user. :param str user_token: User token :param
Delete a pin from a user. :param str user_token: The user_token
Subscribe to a topic. :param user_token: User token :type user_token
List all subscriptions for the authenticated user. :param user_token: Token of the user
Begin a job. :param total: Total number of jobs :type total: int :
Run a task. Args: total (int): the number of tasks to run.
A context manager to monitor the state of a subtask. :param units: the number
Update the progress bar. Args: units: Number of units to update the progress bar.
Create a new submonitor and add it to the internal list of submonitors.
Mark the task as done.
Move the build directory to the new location. :rtype: None :rtype:
Load a list of config files and merge them into a single Config object.
Load the config file and return it as a dictionary. :rtype: dict.
Load a configuration flag from a dict or config object Args: cfg (dict): configuration to
Decode a list of strings to a list of strings.
Load config from command-line arguments and aliases.
Convert the parsed command-line flags to a config object :returns: None :rtype
Try to find a module by name and return its absolute path.
Add a function to be called when the stop state is changed :param f: The function
Notify the client of a start operation. :param data: The data to send to the
Calls all stop callbacks and sets the state to'stopped'. Args: data (dict):
Interrupts the current thread, then kills the current thread. :param delay:
Find the arguments for the program.
Start a process with the given number of threads. :param n: number of threads to
Send a local file to a remote host.
Download a file from the remote host to local host :param remote: the remote host
Count the number of engines in the registry.
Start the specified number of engines :param n: Number of engines to start :type n
Start a job. Args: n (int): ID of the job to start.
Return the default context to use for this cluster.
Parse the output of the launcher to get the job ID from the output of the launcher.
Write a batch script to the batch template file :param int n: number of jobs to
Start a job with the given number of jobs. :param n: the number of jobs
Create the context menu for the widget at the given position. :param pos: The position
Append a JPG object to the end of the jpg file. :param jpg
Append a png image to the display. :param png: png image to insert :type
Append a SVG element to the widget's svg element. :param svg: SVG element to
Add a new image to the document :param image: image to add :type image:
Copy an image to the clipboard :param name: name of the image :type name
Get the image resource for the given name. :param name: image name :type name
Insert an image into the document.
Insert an SVG into the document. :param cursor: the document to insert :type cursor
Save an image to the file system :param name: name of the image :param format
Called when a new exit_now_changed event is generated.
Initialize the environment variables. :rtype: None :raises: None :rtype
Re-write the input to the payload file. :param cmd: the input to be
Asks the kernel to exit the process.
Set the next input to be processed. :param text: the next input to be processed
Read a configuration file into the configuration file. :param filename: The file to read :
Return a list of values for the specified option in the given section. :param section:
Get the line list of the given section and option. :param section: section name of
Set the ``timid`` attribute from an environment variable. :param env_var:
Set the attributes of this object from a dictionary of keyword arguments. :type kwargs: dict
Read a config file from a file.
Set an attribute from a configuration option. :param cp: the configuration object :param
Set the delimiter to use for the query :param delims: a list of strings
Split a line into a single line. :param line: line to split :param cursor
Return a list of all words that match the given text.
Returns a list of words matching the attribute of the given text. :param text: the
Called when a greedy command has been changed :param str name: Name of the
Return a list of aliases that match the given text.
Return a list of matches for the given text. :param text: the text to match
Completes the text in the line completion state :param text: the text to complete :
Return True if the record matches at least one of the tests Args: rec (dict):
Match a dictionary of values to a list of dictionaries :param dict check: The dictionary of
Extract a sub-dict from a record.
Returns True if the current prompt is a quiet prompt. Return False if it is quiet.
Write the output prompt to the terminal.
Write format data to stdout.
Logs the output of the command. :param format_dict: The format dictionary :type
Raise an exception if the operation is not freezed.
Convert a MySQL timestamp to a datetime.datetime object or None if it's not a datetime
Called when the event loop has been changed.
Flushes the control and shell streams and flushes the control and shell streams for one iteration
Publish a pyin to the iopub socket. :param code: code to publish
Send an abort request to the broker. :param stream: the stream to send :param
Send a request to the shell to clear the shell. :param idents: list of
Given a topic, return the topic as a string. :param topic: topic (string
Send the shutdown message to the iopub socket. :rtype: None :r
Add the current modules to the stack of modules to be run prior to context initialization.
Remove modules from sys.modules after the context.
Return the absolute path of the given path, or None if it's not a directory.
Check if a file exists or is a directory. :param name: Name of the file
Check if an object is an instance of a class. :param obj: the object to
Return True if path is a package or False if not.
Format a label into a string of length `label_len`, followed by a newline.
Creates a transplant class for the given class. :param cls: the class to
Get system CPU times as a list of tuples. :rtype: list of tuples.
Return the command line to run the process.
Returns a list of open file tuples for the process.
Return a list of `nt_connection` objects of type `kind`.
Returns True if a user has a group.
Given a fully qualified class path, return the class object. :param class_path:
Return percent of usage count. :param used: number of usage :param total: total
Login to GData. :returns: None :rtype: None :raises:
Get GDocs key from URL query string Args: self.url (str): URL to
Ensures that the temp path exists.
Clears the temporary files for the transcription and meta of the transcription and meta of the
Upload a file to the GDoc. :param file_path: file path :param
Synchronize the trans and meta data from the gdocs to the local and po files.
Download trans.csv and meta.csv from gdocs and save to po.files_
Upload the po files to the local ods file.
Removes the empty file from the temporary directory and uploads it to the GDOC.
Create a new Qt console and return it. :param evt: event handler.
Check if a given URL has access to it. :param url: URL to check :
Check if a URL has a given contents. :param url: URL to check :param
Get the response code from the given URL :param url: The URL to get :type
Return True if content_type is the same as the content type of the url.
Return True if the response code is the same as the code passed to the function.
Validate data. :param source: :param data: :param metadata: :return:.
Clears the output of the command.
Return a list of CodeUnit objects from a list of MORFs.
Returns the name of the module as a string in the form of the module name.
Returns a file-like object for the source of the coverage.
Check if the file should be converted to a python file.
Return the total number of seconds since the epoch. :param timedelta td: :return:.
Get the result or raise an exception if the result is not set. :param timeout:
Wait for all messages in the queue to be processed. :param timeout: Timeout in seconds
Get a dictionary of engine ids and their metadata. :param timeout: timeout in seconds.
Aborts all the messages in this queue. :rtype: None :raises:
The amount of time elapsed in seconds since the last submitted message has been submitted.
Wait for the terminal to be ready to be interactive.
Re-publish the display_pub with the given eid.
Wait for the iopub socket to be ready for output. :param timeout: timeout
Wait until all messages in the queue are ready to be processed or the timeout is reached.
Return the absolute path of the given file. :param filename: The absolute path of the
Prepare a list of patterns to be processed.
Return the separator of the given string, or os.sep if it is not present.
Find all Python files in a directory. :param dirname: The directory to find Python files
Return a normalized filename with the relative_dir suffix removed. Args: filename (str):
Return the canonical filename for the given filename.
Extract the data from a zip file. :param filename: the name of the zip file
Check if a file path matches one of the directories in self.dirs :param fpath:
Return true if the given path matches any of the patterns in this list.
Map the given path to the canonical filename. :param path: The path to map :
Main loop for the QT4 event loop :param kernel: Kernel instance :type kernel
Starts the GTK kernel in a background thread :param kernel: The kernel to start :
Enable a gui in the event loop. :param gui: gui name :param kernel:
Calculate the Goe distribution for the given number of elements.
Calculate the difference between the center eigenvalue and the eigenvectors of the eigenvalues of a matrix
Computes the distances to the center of the eigenvectors of the ensemble.
Create a new instance of the rule. :param ctxt: context object :param step_
Load the config file from the config paths.
Write a file to the file-like object. :param suffix: The file suffix.
Erases the lines of the file.
Return a mapping of file names to line data.
Return a dictionary of arc names as keys and a list of arc names as values.
Write the line and arc data to a pickle file. :param filename: filename of the
Read data from a file and store in self.lines and self.arcs Parameters ----------
Return the raw data from a file :param filename: The filename of the file :type
Read a file into a list of lines and arcs. :param filename: path to file
Combine the parallel data into the lines and arcs in the data directory. Parameters ---------- aliases :
Add line data to the dictionary. :param line_data: Line data :type line
Add arc data to the arc data dictionary Args: arc_data (dict): arc data
Add the executed lines and arcs to the hash.
Return a dictionary of file names to number of lines in a file.
Get a generator that yields all lines that are pasting from the given sentinel. :param
Main loop for interacting with Ctrl-C and Ctrl-Shift-Ctrl.
Replace a line in the history with a line with a multiline history.
Prompt the user for a single line of input.
Recompiles the syntax error and displays it in the traceback.
Ask the user to exit.
Returns the revision of the URL. :rtype: (str, int) tuple.
Create a new frontend master.
Initialize the colors of the widget :param widget: The widget to initialize :type widget:
Return the identity, URL, pub_url, location as a tuple.
Convert a numpy object to a numpy array Parameters ---------- robj : np.ndarray or numpy
Set the active color scheme and set the color scheme to the active color scheme table.
Toggle the active color scheme of the table :rtype: None :raises: None
Return a string representation of the traceback. :param etype: :param value: :param
Return a string representation of an exception. :param etype: the type of exception :param
Format a list of lines to be displayed. :param extracted_list: list of lines
Show exception-only information. :param etype: exception-type :param evalue:
Set the mode of the TB. :param mode: mode to set :type mode
Ensure that all items in fromlist are present in the module. :param mod: module
Add a line of text to the code.
Add a new section to the code.
Return the function with the given name :param fn_name: the name of the function
Return the code for the expression. :param expr: The expression to compile :type expr
Render the template with the given `context` and return the result as a string.
Apply dots to the value. :param value: the value of the object :type value
Render template with given context :param tpl: template to render :type tpl: str :
Return a dictionary of formatter_classes for the default configuration. :rtype: dict.
Register a printer for the given type :param typ: The type to print :type typ
Called when the user changes the precision of a floating point number Parameters ---------- name : str
Return a list of user-specified config files.
Configure logging. :returns: None :rtype: None :raises: None.
Configure where to look in the working directory.
Print out a dumb version of the string ``strng`` with `screen_lines
Page file with pager. :param fname: file name :type fname: str :param
Return the pager command to use. :param pager_cmd: the pager command to use
Get the start of the pager. :param pager: The pager to use :type pager
Print the given string and return the number of characters to be printed to the screen.
Pretty print the object as a unicode string. :param o: the object to print :
Convert LaTeX to PNG.
Print a LaTeX object to a PNG image.
Returns True if the given object can be printed in LaTeX syntax.
Print a LaTeX representation of the object `o` to a string.
Add the options to the given parser. :param parser: the parser instance :param env
Validate that a list of strings is of type str Args: lst (list): List of
Validate that all keys and values in a dictionary are strings. :param dict dct: dict
Run the ioloop loop.
Handle a message received from the client. :param msg: the message received from the client
Complete text. Args: text (str): text to complete cursor_pos (int):
Returns info about an object. :param oname: The name of the object :param
Shut down the server. Args: restart (bool): If True, restart the server
Flush the stream to the IOLoop. :param timeout: the number of seconds to wait
Send input to the client. :param string: input string :type string: str :
Start all channels. Args: shell (bool): True if shell is True, otherwise shell
Stop all the channels that have been started by this process.
Check if any of the channels are running :returns: True if all the channels are running
Load the connection file and set up the session variables.
Start a kernel on this connection. :rtype: None :rtype: None :
Shuts down the kernel process. :param restart: if True, kills the kernel
Kill kernel process if kernel is running. :rtype: None :rtype: None
Interrupts the kernel thread :returns: None :rtype: None :ra
Sends the signal to the kernel thread. :param signum: the signal to send :type
Check if the connection is alive. :returns: True if the connection is alive, False
The shell channel used to connect to the shell. :returns: ShellChannel instance.
Return the sub-channel for this channel. :rtype: sub-channel.
The HB channel used to connect to the device. :returns: HB channel.
Binds the kernel to the application. :param kwargs: keyword arguments :type kwargs: dict
Log a debug message. :param level: log level :type level: int :param
Return a list of extension classes for this namespace.
Run before a step. Return True if the step was successful, otherwise False :rtype
Walk an egg directory and return a list of BDFs.
Scan a module for stubs in stubs.
Launch a new instance of the ipcontroller.ipcontroller.ipcontroller.ipcontroller.
Save the connection dictionary to a file.
Load the configuration from a json file.
Load the secondary configuration from the file system. :rtype: None :rtype:
Enable autopx on the run cell.
Disable autopx on the shell.
Runs a raw cell in the shell. :param raw_cell: the raw cell to
Run the task if it's time to run more than tick_freq :param message:
Run a task. :param message: The task to run :type message: dict :
Remove a task from the queue.
Apply a method to an attribute of an object if it doesn't already exist.
Accept a connection to the server.
Reject a pending connection. :param reason: The reason to reject :type reason:
Create a proxy agent with the given reactor. :param reactor: :param contextfactory:
Save the form to the database and return the created object :param form: the form to
Delete the object and return a success_url :rtype: str :rtype:
If the user is authenticated, set the user's field to the request user.
Check if all modules have changed since the last time this method was called :rtype:
Runs the editor with the given filename and line number. :param filename: The filename to
Get the clipboard text :returns: clipboard text :rtype: str :rtype:
Add a function to the chain.
Get the metadata for the given path_or_module :param path_or_module
Set the configuration options. :param options: The configuration options :param conf: The configuration
Import an item from a package. :param str name: The item name :type name
Try to connect to a remote host using SSH or paramiko.
Try to open a passwordless ssh session. Args: server (str): The server to
Try to use paramiko to connect to a passwordless paramiko server.
Create a tunnel connection to a remote host :param socket: the socket to connect to :
Open a tunnel on the remote host. :param addr: address of the tunnel :param
Stops scheduling tasks. This method closes the scheduling task socket and closes the scheduling task socket.
Unwraps the exception content into an exception object and returns it. :param content:
Register a new engine with the event store :param dict msg: event to register :type
Called when a message is received from the engine to remove an engine from our list of engines
Handle a execute reply message. :param msg: The reply message :type msg: dict
Receive notifications from the notification socket and send them to the notification handler. :rtype:
Flushes all results from the session to the given socket :param sock: the socket to
Flush the control messages from the control socket. :param sock: socket object :type sock
Flush all ignored control replies from the control socket.
Flushes the iopub to the metadata dict.
Spins the simulation every `interval` seconds until stop_spinning is set.
Stop the spinning thread. :returns: None :rtype: None :ra
Spawn the IO sub-sockets. :returns: None :rtype: None
Send an apply request to the broker. :param socket: the socket to send :param
Get the history of the hubs. :returns: history of hubs :rtype
Query the database. :param query: :type query: str :param keys: list
Return a set containing the names of the opcode codes in ``names``.
Return the byte parser for this line. :rtype: byteparser.ByteParser.
Return a set of lines that match a list of regexes.
Returns the first line of the given line, or ``None`` if the line is not
Given a set of lines, return the set of lines that start with the first line.
Parse the source file and return a tuple of lines and the list of excluded lines.
Return list of arcs, sorted by line number. :rtype: list.
Returns a list of child parser objects for this parser.
Yields the byte and line number of a code block.
Find all the statements that have been parsed by this parser. :rtype: list.
Given a list of blocks, return a string representation of the block stack.
Assert that all chunks are valid. :param chunks: list of chunks :rtype:
Yields a list of line numbers, each line in the stream. :rtype:
Return a list of all possible chunks for this parser.
Return a list of arcs for this parser and its child parsers. :rtype: list
Start the covering process.
Report the coverage of the given modules to the given stream. :param stream: stream of
Return True if the file should be included in the cover packages. :param file: The
Given a distribution name, interpret it as a distribution name. Args: location (str):
Open a file-like object with an authentication header. :param url: the file-
Get the parent object of an object :param obj: the object to get the parent
Return the root topic of the topic.
Render the given template with the given context :param content: The template to be rendered :
Set the configuration of this instance. :param options: :param conf: :type conf
Add the error to the test's captured output and return the error code and the captured output
Split a string by the given number of elements.
Convert a nbformat object to this version of nbformat Parameters ---------- nb : nbformat object
Convert a hex color string to an RGB value.
Return a dict of colors for the given stylename :param stylename: The stylename
Returns the font with the given family or the given fallback font if the font is not
Handle execute reply. :param msg: the reply to the execute request :type msg:
Handle a history reply from the kernel. :param dict msg: :return:.
Handle a Python OUT message.
Handle display data. :param msg: the data to be processed :type msg: dict
Load the guiref magic file and send history to the ipython shell channel.
Execute a file on the server. :param path: Path to the file to execute :
Process the execute error message :param msg: The execute error message :type msg: dict
Process the execute payload. :param item: the payload to process :type item: dict
Sets the default style sheet, syntax_style, syntax_style, and style_sheet
Edit a file. Args: filename (str): The file name line (int): The
Make the prompt for the given number of characters. :param number: the number of characters
Return a string that contains a newline at the end of the prompt. :param prompt:
Called when the style_sheet property of the widget is changed.
Called when the syntax style of the document is changed.
Return a copy of the data if it's a dict, otherwise return the original data.
Return information on the virtual memory of the system. :rtype: dict :rtype
Return the system CPU times as a tuple of CPU time stamps. :rtype:
Get a list of UIDs for this process.
Return a list of GIDs associated with the process :returns: a list of GIDs
Get a list of thread tuples for this process. Args: self (:class:`~ps
Return a list of open files for this process.
Get the commit hash of a package. :param pkg_path: Path to the package
Return a dict containing information about the package.
Return the number of CPUs on the system.
Return the number of CPU cores.
Return the next set of results in the result set, or None if there are no results
Fetch the next row from the result set.
Fetch one or more rows from the result set.
Execute the query and return a list of rows. :rtype: list.
Connect a node to a list of peers. Args: peers (:obj:`list`):
Reads a notebook from a JSON string Args: s (:obj:`str`): The
Read a notebook from a Python file. Args: s (str): the file to read
Run reads_json or reads_py using the format argument Args: s (str):
Writes a notebook to a specific format. Args: nb: notebook to write to format:
Write notebook to file-like object. :param nb: notebook instance :param format:
Convert nb.xml to metadata.xml. :returns: None :rtype: None
Loads a value from a dict. Args: src: dict of values to load.
Return True if the given name matches any of the include and exclude patterns.
Return True if the given class should be included in the test case, otherwise return False.
Return True if the given directory would be included in this filter.
Return True if the given file should be included in the executable.
Given a function, return True if the function would be wanted to be executed.
Return True if the given method wants to be called. :param method: Method to be
Returns the name of the module that the plugin wants to load. :param module: the
Returns a list of lines of a file. :param fname: file name :type fname
handle list command. Args: arg (string): list of lines to print.
Print a list of lines of a file. :param filename: filename to print list of
%prog pdef arg -- name of the function to define.
Return the factor of conversion between two currencies. :param from_symbol: the symbol of
Convert a value from one currency to another. :param from_symbol: The currency to
Compute the return value for the given period. :param start_date: The date of
Get the encoding of a stream.
Return the default encoding from sys.stdin or locale.get_preferred_encoding.
Write the connection file to the profile directory.
Initialize the heartbeat socket. :rtype: None :rtype: None :rtype
Initialize a session to be used for requests. :rtype: :class:`requests.
Initializes the IO streams for this session. :rtype: None :rtype: None
Initializes the kernel. :returns: None :rtype: None :rtype: None
Convert HTML content to text. :param content: HTML content :type content: str :
Converts markdown content to text. :param content: content to convert :type content: str
Convert domain name to FQDN. :param domain: domain name :type domain: str
Add nose_exclude options to the command line parser.
Sets the exclude_dirs to True if the exclude_dir_file is specified.
Return True if the given directory should be included in the list of directories to be excluded.
Check if the given extension links to a dynamic version of this distribution. :param ext:
Calls each function in funcs with the given args and kwargs Args: funcs: A list of
Call each function in a list in reverse order. Args: funcs: list of functions to
Append a function to the end of the stack.
Adds a function to the list at the given index :param index: the index of the
Format the usage. :param usage: The usage to print :type usage: str :
Write the PID file to the pid dir.
Remove the PID file from the pid directory. :returns: None :rtype: None
Returns the PID of the process from the pid file.
Construct a ``argparse.ArgumentParser`` for the given ``magic_func``.
Return the real name of the magic function :param magic_func: the function to be
Highlights the given string in the currently highlighted block. :param string: The string to
Highlights the given block. :param block: the block to highlight :type block:
Sets the format of the current line. :param start: start number of lines :param
Copies the current selection to the clipboard. :returns: None :rtype: None.
Execute the given shell source. :param source: the source to execute :param hidden:
Reset the input splitter and highlight the text after the prompt is finished.
Return True if the tab is pressed.
Copy the raw action to the context menu if the shortcut is the same as the paste shortcut
Move the cursor to the end of the line, if the key is pressed, otherwise do
Insert a newline at the end of the prompt.
Handle a complete reply message Args: rep (dict): The reply to be processed.
Handle a execute reply message :param msg: The reply message :type msg: dict :
Called when the kernel has been died :param since_last_heartbeat: Time since
Handle reply to object info request. :param dict rep: reply dict :rtype:
Handle ``pyout`` messages. Args: msg (dict): The message to process.
Handle incoming stream message.
Handles a shutdown message.
Execute a file. :param path: Path to the file to execute :type path:
Interrupts the kernel. :returns: None :rtype: None :rtype
Reset the cursor to the beginning of the command line.
Restart the kernel. :param message: the message to restart :type message: str :
Send a call tip message to the user. :returns: True if calltip message was
Complete the current input buffer. :returns: None :rtype: None :rtype
Process an execute error message. :param msg: the error message :type msg: dict
Process the execute message. :param msg: the execute message :type msg: dict :
Triggered when the document contents of the cursor position has changed :param position: position of
Add a plugin to the plugin's list of plugins.
Call all plugins in the order in which they were registered. :param arg: list of
Generator function that yields the result of each method in the plugin stack. :param arg:
Run all the plugin methods with the given arguments and return the result of the first plugin method
Configure the plugin with the given options and config. :param options: the list of options
Load plugins from the entry points.
Add builtin plugins to the plugin manager :returns: None :rtype: None :ra
Convert a LaTeX string to a PNG string.
Convert a LaTeX string to HTML. :param s: the LaTeX string
Check to see if the requirement already exists in the distribution.
Return a dict representation of the attribute list. :param attrs: A list of attribute names
Return the name of the process. :rtype: str :rtype: str.
Get the percentage of CPU cores in the system. :param interval: how long to sleep
Returns the current amount of physical memory allocated to this system. :rtype: int.
Returns a list of memory maps for this CPU.
Returns True if the process is running.
Suspends the process. :rtype: None. :rtype: None.
Resumes this process. If the process is not running, the process will be resumed
Send a SIGKILL signal to the child process.
Wait for the process to finish processing. :param timeout: timeout in seconds :type timeout
Wires the kernel to the main gtk_main and gtk_main_quit objects.
Check if an identifier is contained within the user's namespace. :param identifier: the identifier
Register a transformer to be applied to the generated file. :param transformer: The transformer to
Unregisters a transformer. :param transformer: The transformer to unregister :type transformer: str
Registers a checker to be run when the checker is run. :param checker: The checker
Unregister a checker. :param checker: the checker to remove :type checker: Checker :
Register a handler for the given esc_strings. :param name: The name of the
Unregisters a handler. :param name: name of the handler :param esc_strings
Given a line info object, return the prefiltered line information. :param line_
Find a handler for the given line info :param line_info: line info of the
Transform a line using the transformers defined in the constructor. :param line: The line to
Prefilter a line. :param line: line to prefilter :param continue_prompt
Prefilter lines. Args: lines (str): list of lines to prefilter continue_
Check if this is an ipyautocall, and if it is, return the
Check if the line is a multi-line prompt. :param line_info: the
Check if the line ends with the correct escape character. :param line_info: the
Check if there is a pre-filter handler for the given line. :param line_
Indent the line if auto-indent is enabled. :param line_info: LineInfo
Handle the ifun and the rest of the line.
Handle the line of a command. :param line_info: the line of the command
Processes the ifun and therest of the code.
Process a single line of ipyc command.
Process a single line of the command line.
When the user clicks on a key press, this will hide the text edit window.
Called when the user enters a calltip event.
Draw the label of the calltip widget :param event: the painting event :type
Show information about a call. Args: call_line (str): The name of the
If the cursor position has changed, hide the widget. :returns: None :rtype
Returns the canonicalized path.
Return a dictionary of masked values. :rtype: :class:`~astropy.
Check if we're running in a virtual environment that doesn't contain a global config file.
Calculates the frequency of each word in a list of `fnames` :param view:
Returns a list of aliases to use in the default environment. :returns: list of aliases
Define an alias for a command. :param name: The name of the alias :type
Define an alias to a command. :param name: The name of the alias :type
Validate an alias. Args: name (str): The name of the alias cmd (string
Call an alias. :param alias: the alias to call :param rest: the
Transform an alias into a command.
Given a line of text, return a line with all aliases expanded. :param line:
Generate the auto-help section of the command-line. This is used to generate the
Reset all SGR attributes to their default values.
Returns a QColor instance for the given color and intensity. :param int color: color
Return a QTextCharFormat instance that represents the text format. :returns: Format instance
Generate a JWT. :param str secret: The JWT secret :param int age: The
Clean up expired JWTs that have expired.
Return True if the given token is already used.
Validate a JWT. :param token: The JWT to validate :type token: str :
Given a list of strings, return the common prefix of the strings in the list.
Return a QSize object with the width and height of the splitter. :rtype:
Return True if the cursor can be cut to the cursor position.
Returns True if the user can paste the text in the clipboard, otherwise returns False.
Clear the input buffer and display the prompt to the user. :param bool keep_input
Cuts the selection to the end of the current selection.
Return the input buffer of the current cursor position. :param force: force the input buffer
Insert a string into the input buffer. :param string: The string to insert :type
Sets the font of the completion widget and the page control. :param font: the font
Print the control to the terminal :param printer: The printer to use :type printer:
Prompt the user to enter a new line at the top of the line.
Reset the font to the default value.
Append the given input to the text. :param insert: :param before_prompt:
Append an HTML string to the end of the document.
Append HTML fetching text to the page. :param html: the HTML to be fetched :
Append plain text to the end of the line. :param text: text to insert :
Clears the temporary buffer.
Completes the widget with the given list of items :param cursor: the cursor of the
Fills the temporary buffer with the given text. :param cursor: the cursor to fill the
Returns true if the control key is pressed down. :param modifiers: The modifiers of the
Create and return a QTextEdit for the current widget.
Create the control for the current page.
Filter page key presses to the control widget. :param event: the event to filter
Returns the block as a plain text.
Get the cursor to the end of the text. :returns: the end of the text
Return the cursor position in the input buffer, or -1 if there is no input buffer
Returns the line of the input buffer from the cursor to the cursor position in the input buffer
Returns the text cursor of the prompt.
Get the selection cursor. :param start: start position of the selection :param end:
Insert `continuation_prompt` into `self._continuation_prompt_html`.
Insert html into the editor. :param cursor: the editor cursor :param html: the
Insert the html into the document. :param cursor: the cursor to insert :type cursor
Insert text in the text block of the given text.
Moves the cursor to the end of the buffer if it's not already in the buffer.
Called when the user clicks on the keyboard and the user clicks on the keyboard.
Insert text at the top of the splitter, if paging is requested, otherwise append text
Called when the prompt is started.
Read a single line from the device :param prompt: The prompt string :param callback:
Set the continuation prompt to use. :param prompt: prompt to use :type prompt:
Set the cursor to the top of the screen. :param cursor: the cursor to be
Adjusts the scrollbars of the control to the viewport height of the document.
Generate a list of files to be downloaded. Args: paths (list): A list of
Copy the given config file to the given path :param config_file: The path to
Create a profile directory by name. :param path: Path of the profile directory :param
Find profile directory by name. :param ipython_dir: :param name: name
Read a file and return its content as a string. :param filename: The file
Create a temporary file with the given source code.
Flushes the file and closes the underlying file :returns: None :rtype: None
Write the data to the file and flush the output stream. :param data: The data
Add a new heart handler. :param handler: the handler to register :type handler
Register a failure handler to be called when heart fails. :param handler: A handler
Handle Pong messages. :param msg: Pong messages to process :type msg:
Returns a list of batches of length `batch_size` of the given sequence.
Convert a path to a filename and return the path and filename. :param pathfile:
Display the total time of a given number of threads. :param elapsed: elapsed time
Return a tuple of elapsed, average, est_end, timeunit.
Extract the wininst config file from a distribution.txt file Args: dist_filename (
Uncaches the zip directory cache for the given path. :param path: the path
Return a string that can be used as an argument to nt_quote or nt_quote
Check to see if there are any files that conflict with other files in the same directory.
Set the fetch options to be passed to the `easy_install` command.
Creates the home directory of all config files.
Check if the file is an archive file. :param name: the file name :type
Creates a new heading cell.
Create a new metadata node.
Create a new `Author` object with the given attributes.
Returns True if ``path`` is a directory and is writable.
Unquote a file name to make it suitable for use as a file name in a
Return the full path to a Python file. :param name: the name of the file
Return the XDG directory, if it exists, or None if it does not exist
Return the path to the IPython IPython installation directory. :rtype: str :rtype
Returns the path to the ipython package directory.
Get the path to an IPython module. :param str module_str: the name of
Determine if the target is outdated. :param target: :param deps: :return:.
Returns the MD5 hash of the file at the given path :param path: path to
Check for old config files in the ipython directory. :param ipython_dir:
Update the suggestions dictionary for the object. :param request: the request object :type request
Returns suggestions of a certain size for a specific object :param object object: :param size
Return a queryset of suggestions for the object. :param object: The object to return suggestions
Return the relative path to the current working directory.
Return a list of files matching `pattern` in this path. :rtype: list
Return the MD5 hash of the file.
Create a profile file for the current user. :rtype: None :rtype:
Print the report to the given stream :param stream: stream to print to :type stream
Finalize the process. Return None on success or None on error.
Disable wx widget in event loop :returns: None :rtype: None :ra
Disable Qt4. :returns: None :rtype: None :raises: None
Enable GTK in interactive mode :returns: None :rtype: None :rtype
Enable the Tk application. :param app: :class:`tk.tk.tk
Enable pyglet to run on the app. :param app: Application to run on
This function is used by wave functions to save the history of the wave functions. :param
Initialise the database connection.
Run a SQL query against the database and return a tuple of (ses, line, input
Get session info. :param session: session number :type session: int :rtype
Get the last n rows of the table. :param n: number of rows to return
Given a range string, return a list of line objects.
Get the name of the hist file. :param profile: Profile name :type profile:
Create a session with the given name :param name: the session name :type name:
Reset the history of the stream. :param bool new_session: If True, the
Get a range of lines from the history. :param start: :param stop: :
Store the output of a given line in the db_output_hist_reprs.
Write out the input and output cache to the database. :param conn: the connection to
Stop the thread and wait for the thread to exit.
Get the number of CPUs running on this system.
Returns a list of system CPU times, one entry per CPU for each CPU.
Get a list of partition information for the disk partitions on the host. :param all:
Get a list of all PIDs in the system. :rtype: list.
Return a human-readable representation of a pair. :param pair: pair to be formatted
Format a list of lines into a human-readable string. :param statements: list of
Shortest stack trace as a human-readable string. :rtype: string :r
Join several regular expressions into a single string. :param regexes: a list of regular expressions
Try to remove the file at the given path. :param path: the file to be
Update the md5 hash of the given value :param v: the value to update :
Update profiles.txt.txt with profiles.txt and profile.txt.txt.
Stop the cluster. :param profile: the name of the cluster :type profile: str
Try to find a command in the PATH. :param cmd: the command to find :
Read stdout and stderr lines from stdout and stderr and print them to stdout and stderr.
Find code units for the given Morfs. :param morfs: Morfs
Run the given report_fn for each code unit in self.code_units.
Sets the trace of the current thread.
Initialize the extension manager with the default extensions and the extensions listed in `self.extensions`.
Initialize the command line code and execute the command, line code and module code.
Run the exec_lines from the command line Args: self.exec_lines (:class
Run the startup files in the startup directory.
Run all the exec_files in the shell. :returns: None :rtype:
Execute the code_to_run or file_to_run if code_to_
Run the module specified by `self.module_to_run`.
Given a file name, return the path to the static data file, or raise an exception
Returns the data of the file at ``fname``. Args: fname (str):
Escape all special characters in a string so that it can be used as a string in a
Run the report on the given Morfs. :param morfs: Morfs
Copy static report files to the local report directory.
Write an HTML document to a file. :param fname: name of the file to write
Return the hash of the source of the file. :param source: the source of the
Write index.html for each file in the list of files to the index.html.
Reads the coverage status file from the specified directory. :param directory: The directory to read
Write the coverage to a file.
Sort lst1 and lst2 and return True if lst1 == lst2.
Return a slice of a sequence.
Split a sequence into chunks of size `size` of length `seq`.
Read the contents of the manifest file and fill the ignore and ignore_regexps lists.
Convert a glob pattern to a regular expression. :param pat: :return:.
Check if a filename matches a list of patterns.
Get a list of all versioned files in the system. :rtype: list.
Start a kernel. :param kwargs: :type kwargs: dict :param kernel_id
Shuts down the kernel with the given ID :param kernel_id: the kernel ID
Kills a kernel. :param kernel_id: id of the kernel to kill :
Returns the kernel with the given kernel_id. :param kernel_id: the kernel
Get the kernel ports. :param kernel_id: kernel identifier :type kernel_id
Return the notebook id associated with the kernel id Args: kernel_id (str): kernel
Start the kernel. If kernel_id is None, then the kernel will be started.
Shuts down the kernel and removes the kernel mapping. :param kernel_id: kernel
Interrupt a kernel. :param kernel_id: kernel ID :type kernel_id:
Restarts a kernel. :param kernel_id: kernel id to restart :type kernel
Create the iopub stream for the given kernel_id :param kernel_id:
Create a shell stream for a kernel. :param kernel_id: kernel id :type
Create a HB stream for this kernel. :param kernel_id: kernel identifier :
Remove all on-time properties from the object :returns: None :rtype: None
Export the given HTML string to a file in the current directory.
Fixes empty paragraphs in HTML output.
Return the unique object, or None if the object does not exist or multiple objects are returned
Takes a list of terms and a list of search_fields and returns a query to include
Given a text query string, return the text query that matches the query_string.
Get a query object for dates greater than or equal to `days` :param days:
Get a date less query :param days: :param date_field: :return:.
Return the query for null or blank values of the given field. :param field: field
Add case insensitive fields to fields_dict :param fields_dict: :return:.
Add command line options to the given parser :param parser: command line parser :param env
Validate attributes of a method. :param method: The method to validate :param cls:
Return True if the given method is a method of the correct type. :param method:
Rotate the ring to the top-left corner of the text.
Return the websocket URL. :returns: the websocket URL. :rtype: str.
Given a list of messages, return a JSON-serializable reply. :param msg_
Injects a cookie message into the request's cookies.
Start the heartbeat thread if we're not already being started.
Stop the heartbeat thread and wait for it to finish. :rtype: None :r
Opens the file object, if it hasn't already been opened, else opens the file object
Get the index of the block. If index is None, use the block_index.
Move to a block at the given index.
Edit a block. :param index: index of block to edit :type index: int
Show the source block at the specified index.
Show all src blocks in the source file. :rtype: None :rtype:
Run a function in a single thread, using a series of threads. Parameters ---------- function :
Return the source lines of the traceback as a list of strings. :param tb: the
Given a list of lines and a position, find all lines that can be inspectable.
Create an HTML tag with a countdown tag. Args: name (string): Name of
Clean up and clean up all engines. :param controller: controller to clean up :param
Save the last ``n`` messages in the client's history and add them to the outstanding
Sync the results of a function with the client, updating the outstanding flag.
Run the function ``f`` after the execution of the function ``self`` with ``args
Return a list of messages from the queue.
Get a single message from the queue.
Parse the given URL into a dict of configuration parameters. :param url: URL to parse
Get a list of all modules in the system.
Import a module and return a list of module names. :param line: The line to
Completes the magic run command. Returns a list of strings, one for each part of
Quote an attribute for inclusion in an XML document.
Configure the plugin. :param options: Options :type options: dict :param config:
Write the report to the error report file. :param stream: stream to write the report
Add an error to the report.
Add a failure to the report. :param test: The test to add failure :param
Add a successful test to the report. :param test: :param capt: :return
Returns a random number between a and b that is less than a or greater than b.
Randomly choose a random value from a list of loads. :param str loads: list
Register the engine with the graph. :param uid: the ID of the engine to register
Unregisters the engine identified by the uid. :param uid: the unique identifier of the
Process the received messages from the engine. :param engine: engine to process :type engine
Check if any of the messages in the depending jobs have timed out. :rtype:
Fail a unreachable job. :param msg_id: the ID of the job to fail
Save the unmet job in the graph. :param job: the unmet job :
Submit a job to the monitor. :param job: the job to submit :type job
Dispatch a result message to the appropriate job. :param raw_msg: the raw message
Handle a result message from the engine :param idents: list of idents :type
Handle the unmet dependency of a job. :param idents: the identifiers of
Update the graph of dependent jobs. Args: dep_id (str): The ID of
Print the current state of the log file.
Write a line to the log file :param line_mod: :param line_or
Writes data to the log file if log_active is True.
Closes the log file and resets the log_active flag. :returns: None.
Create a new Worksheet object with the given ``name`` and ``cells`` attributes.
Add the string ``s`` to ``self.strs`` :param str s: string
Add a regex to the command chain. :param regex: regex to add :param obj
Dispatches a key to a list of objects. :param key: the key of the
Return a list of flat matches for the given key. :param key: the key to
Called when the notebook directory is changed.
Return a list of notebooks in the notebook directory.
Create a new notebook_id and add it to the notebook_mapping :param name:
Delete a notebook id from the notebook index. :param notebook_id: ID of the
Check if notebook exists.
Find a notebook by its name :param notebook_id: notebook id :return:.
Get the path to the notebook with the given name. :param name: The name of
Get a notebook object from the API. :param notebook_id: ID of the notebook
Return the notebook object with the given notebook ID. :param notebook_id: The notebook
Save a new notebook to the notebook store. :param data: The notebook data :type
Save notebook data to the server. :param notebook_id: notebook id :param data
Save a notebook object to the notebook store.
Delete a notebook. :param notebook_id: notebook id :type notebook_id:
Create a new notebook and write it to the current notebook file. :returns: notebook id
Copies a notebook object to the notebook directory. :param notebook_id: notebook id :
Takes a list of tokenized tokens and returns a list of tokens that can be used as tokens
Load the default config from the ipython config file.
Return a list of classes for interactively-interactively-interactively.
Override parse_command_line to remove 'gui' and 'gui' from the command
Initializes the application. Args: argv (list): List of command line arguments.
Initialize the shell and add this configurables to the shell's configurables list.
Show banner if interactive mode is enabled.
Return a string representation of the type of the object :param obj: the object to be
Parse the name of a notifier. :param name: Name of the notifier :type
Return a dictionary of traits for a given class. :param cls: class name :param
Return the metadata for the specified trait name and key :param traitname: name of the
Validate that the value is a subclass of self.klass.
Return the default value of the field.
Returns True if the result set is a subset of the result set. :param completed:
Return whether the result set is reachable from the given completed set or failed set.
Return a dictionary representation of the dependency.
Return the depth of a node in the tree. :param n: The node number :
Print a bintree to stdout. Args: tree: a bintree object.
Disambiguate a URL to a DNS location. :param url: :param location:
Return the result of applying a function to each element of the sequence. :param f:
Validate targets. Args: targets (int or str or list of int or list of
Dispatches a traffic monitor message to the appropriate handler. :param msg: the traffic monitor
Dispatch a query message to the appropriate handler :param msg: The message to dispatch :type
Handle a new heart. :param heart: heart to process :type he
Process a heart failure. :param heart: The heart to process :
Save a task request to the database :param dict idents: :param dict msg:
Save iopub message to the database :param topics: list of topics :type topics
Send a connection request to the client. :param client_id: client id :param
Unregister an engine. :param str ident: id of the engine to unregister :param
Called when a new registration is finished. Args: heart (int): The ID of
Send a shutdown request to the client. :param client_id: Client ID :param
Purge all matching records in the queue. :param client_id: client_id of
Extracts the content and buffers from the given record. :param dict rec: The record :
Get the history of the message. :param client_id: Client ID of the message
Query the database. :param client_id: :param msg: :return:.
Change the current working directory to a new directory.
Decode the output of a completed command.
Run a command under the root directory. :param cmd: the command to run :type
Dispatch a message to the appropriate handler. :param msg: the message to dispatch :type
Check if the message is from the current session. :param msg: the message to check
Report a list of morfs to be annotated into the Morfologic report.
Returns the installed version of the package. :param name: the name of the package to
Squash unicode strings in dict, list, and unicode objects. :param obj:
Extract the header from a message or header dict Args: msg_or_header (dict
Check if packers are correct.
Create a message of the given type.
Signs a list of messages :param msg_list: list of messages to sign :
Send a list of messages to a stream. :param stream: the stream to send
Receives a message from a socket :param socket: The socket to receive :type
Save a string as an SVG file :param string: the string to save :param parent
Move an SVG string to the clipboard.
Convert a SVG string to a QPixmap image.
Return a dict with information about an object. This is useful for getting information about an object
Get the docstring of an object. :param obj: the object to get the docstring of
Get source code of an object. :param obj: object to get source code :type
Get the signature of a function or method as a tuple of arguments and their default values.
Try to find the file name of an object. Return None if not found :rtype
Return the line number of the source code of the given object, or ``None`` if
Return the name of the method of the given object :param object obj: the object to
Return a string with the given number of colors. :param h: the number of colors
Print an error message to the console. :param msg: :param oname:
Print a function or class declaration. Args: obj (function or class): The object to
Writes the source code of an object to the current page. :param obj: the object
Print the source code of an object as a PDF file.
Format a list of fields. :param fields: list of fields :param title_width
Search for namespaces matching pattern. :param pattern: name of the namespace to search :param
Return the reactor thread and the twisted reactor thread if it's not already running.
Return a string representation of the object as an XML string. :param indent: indent of
Returns the XML representation of the object. :rtype: str :rtype: str
Import all modules in a package or set of packages. :param package_or_set
Invert a dictionary into a dictionary of lists. :param data: The dictionary to invert
Convert an object to a primitive type.
Returns a list of matplotlib figure objects for one or more fig_nums Parameters ---------- fig_
Print a figure to a file.
Set the figure format to be used for rendering. :param shell: the shell :param
Find gui and backend name and return gui and backend name :param gui: :type gui
Activate matplotlib backend and enable interactive pylab if needed.
Configure inline support for pylab.
Start the trace and return a reference to the trace object. :rtype: Trace.
Stop the thread. If the thread is not the current thread, no action is taken.
Start a tracer and add it to the tracers list. :rtype: function.
This is the function that will be called when the trace is started. :param frame_
Start the collectors.
Stop the collector and remove it from the stack. :returns: None :rtype:
Pauses all tracers.
Starts all tracers and sets the tracer to the current thread's tracer.
Get the line data for the current branch.
Collect exceptions from a list of remote error objects. :param rdict_or_list
Render the traceback of an exception. :param excid: the exception id :type exc
Start the coverage process if the CPS environment variable is set. :rtype: None
Return the canonical directory of the MORF.
Return the source for the given file.
Check if this file should be traced with the given filename and frame :param filename:
Check if the trace should be logged :param filename: name of the file :param
Print a warning message. :param msg: warning message :type msg: str :ra
Check for source packages and add them to self.source and self.source_match.
Starts the config collector. :returns: None :rtype: None :rtype:
Called at the end of the process.
Returns the regular expression to use to exclude the specified item from the `exclude_list`
Save the test data to disk.
Combine all files that match the config paths into a single file. :rtype: list
Collect line and arc data from the source code and store them in self.data.
Perform analysis of Morf. :param morf: Morf object :type
Analyzes the given code unit or code unit and returns the result of the analysis.
Run the harvest command and return a report of the results. :param morfs:
Annotate a MORs with a list of MORs. :param morfs:
Generate XML report. :param morfs: list of morfs :param ignore_errors
Reload data from a file or URL.
Find the path to a command. :param str cmd: the command to find :type
Executes a command and returns its exit status.
Forward read events from a file descriptor to a push and pull socket. :param fd:
Send data to the socket.
Find the launcher class based on the class name and kind. :param clsname:
Starts the process. :returns: None :rtype: None :raises: None
Build and return launcher instance :param clsName: launcher class name :param kind: launcher
Starts the event loop.
Start the event loop.
Return a wx.App instance, or create one if it does not exist.
Return True if the event loop is running in an event loop :param app: :param
Starts the wx event loop for the given wx app. Args: app (wx.app
Return a QApplication instance for qt4.
Check if an event loop is running in an event loop. :param app: :param
Starts an event loop if it is not already running in the event loop :param app:
Create a blank canvas with the given width and height. :param width: width of the
Draws a cross-line segment. Parameters ---------- position : `numpy.array` or `
Draw a line on the current image.
Create an annotated image from a grayscale image Parameters ---------- im : grayscale image Returns
Generate a UUID. :param length: The length of the UUID :type length: int
Generate a unique key based on the current site and the URL of the get_dict.
Get the domain name from the URL. :param url: the URL to get the domain
Returns a dictionary of arguments from a URL. :param url: The url to parse :