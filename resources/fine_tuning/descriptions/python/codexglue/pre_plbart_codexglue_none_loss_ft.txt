Convert sina xml to url list.
Download a dailymotion site.
Download Sa data from URL. :param url: URL to download :param output_
Print text with given colors.
Print text to stderr with colors.
Print an error message and exit.
Print a red message and exit.
Determine the operating system this process is running on.
Get video info from ckplayer xml.
Get Mgtv real URL.
legitizes the given text.
Download a CBS file from a URL.
Returns a list of strings where each string matches one or more regular expressions.
Given a url and a query param, return the first value.
Parses a host string and returns a tuple of hostname, port.
Gets the title of a topic by using the json topic part :param json_content
Downloads all topic part data from WKC. :param json_api_content
Download bokecc data by course topic part.
Check if a task has already been queued.
Return an event buffer for the given dag_ids.
Returns a connection to the Sonflake database.
Get AWS credentials.
Get the value of a single field.
Copy an Expert SQL file to the database.
Bulk dump a table into a temporary file.
Uploads the file to Google Cloud Storage.
Print the execution state of a task instance.
Returns a client instance.
Get an instance details :param instance: instance name :param project_id: project id
Create an instance with the given body. :param body: :param project_id:
Delete an instance from a project. :param instance: instance to delete :param project_
Create a database with the given body.
Delete a database from an instance :param instance: The instance to delete :param database:
Starts the SQL proxy process.
Stops the SQL proxy process.
Returns the version of the SQL proxy used to connect to the database.
Create a new connection to the database.
Retrieves a connection from the DB.
Delete a connection from the DB.
Retrieves the SQL proxy runner object.
Returns an instance of the appropriate database hook.
Clean up database notices.
Reserve a free TCP port.
Normalize themlengine job id to make it more human readable.
Try to extract the error code from the given exception.
Removes all dag runs from the database.
Removes all task instances from the database.
Set is_paused state to True for all dag models in the database.
Print the execution statistics of the task instance.
This method is called when a new task is created.
Create a directory at the given path, in the given mode, if it doesn't
Attempt to convert a string to a float, if possible.
Converts the given value to a timezone aware version of it.
Convert the given value to a naive datetime.
Wrapper for ``datetime.datetime``.
Return druid broker connection.
Creates a HTTP session.
Initiate the request, run the request, and return the response.
Checks the response and raises an exception if it's not a valid response.
Run a prepped request and check the response.
Create a session, commit and close.
Drops all tables from the database.
Returns the pretty message of an exception.
Returns a list of records from the database.
Returns a Pandas dataframe from the DB.
Removes SQL from parameters and runs the query.
Insert rows into the table.
Return a cosmos client.
Checks if a collection exists.
Creates a collection in the specified database.
Determine if a database exists.
Create a database on the server :param database_name: The name of the database to
Deletes a database. :param database_name: The name of the database to delete
Deletes a collection from the specified database.
Inserts a list of documents.
Delete a document :param document_id: document id :param database_name: The
Get a document by its document id :param document_id: document id :param database
Returns a list of documents from a SQL string :param sql_string: :param database
Get a function by name.
Create a new function in the given location.
Update a function :param name: Function name :param body: Update body :param update
Uploads the function zip file at `location` to `project_id`.
Deletes the function with the given name.
Get the status of all dependencies of a task.
Returns True if the task is pending, otherwise False.
Gets the reason for the failure of the dep_context :param ti: :param
Parse an s3 config file.
Returns a list of all available credentials in the specified region.
Creates a connection to the database.
Flushes the buffer.
Check if a file is a ZIP archive and correct it.
Construct a task instance for this task.
Starts the worker process.
Sends a terminate signal to the child process.
Gracefully exit the process, but don't do anything.
Start the parallel processing loop.
Starts the dag parsing loop, and stores the result in the result_queue.
Starts the dag parsing process in sync mode.
Refresh self. _dag_directory and self. _file_paths.
Print stats to the console if we have too many files to process.
Clears non-existent import errors.
Log file processing stats. :param known_file_paths: list of file paths to
Sets the file paths to the given new_file_paths.
Wait until all the processors have finished.
Kill the PIDs of the current process.
Connect to remote host via SSH.
Creates a new transfer job.
Get details about a particular transfer job :param job_name: Name of the transfer job
Returns a list of transfer jobs matching the filter.
Update an existing transfer job.
Cancel an existing transfer operation.
Pause a transfer operation.
Resumes a transfer operation.
Wait for a job to finish and raise an exception if it doesn't exist.
Find task instances for a given task instance.
Returns the number of open slots for this pool.
Runs a command and returns its output.
Allocates a list of project ids based on the provided partial keys.
Begins a transaction to the project database.
Commits the job with the given body.
Given a list of keys, return the first one that matches the given keys.
Rollback a transaction.
Runs a query against the server and returns the response body.
Get an operation by name.
Delete an operation by name :param name: The name of the operation :type name:
Poll an operation until it's done.
Get the hostname of the remote host.
Returns an instance of languageserviceclient.
Get a list of template fields from a module.
Sphinx role for a template field.
Removes the current session from theorm context.
Adds dags and plugins folders to the system path.
Check the status of the target task.
Return a boolean indicating whether the config variable is set in the.conf file.
Convert an SQLAlchemy object to a dictionary.
Yield successive chunks from an iterable.
Reduces the elements of an iterable in chunks.
Takes a list of tasks and sets up the tasks that are in the right order.
Renders the filename of a log file.
Builds and returns a connection object to be used to make requests to the API.
Wait for a Dataproc operation to finish.
Coerce a string into a json string.
If the operator has been executed, add it to the xcom run page.
Runs a command on the command line.
Fetch the state of a celery task.
Returns the number of tasks per send process.
Returns the number of tasks that can be fetched at once per process.
Return an authed HTTP connection.
Get a job from the ML Engine.
Wait for a job to finish.
Create a new model version.
Set the default version of a model.
List all versions of a given model :param project_id: The ID of the project
Delete a version of a model.
Create a new model in the specified project.
Get a single model from the ML Engine :param project_id: ID of the model
Write batch data to DynamoDB.
Adds executors to sys.modules.
Get the default executor instance.
Return an instance of the proper executor class.
Called when there's an error in the log.
Return a connection to the database.
Trigger a DAG by its ID.
Delete a dag by its id.
Gets the task's information.
Get a list of pools.
Create a new pool.
Create or update a container in a container group.
Get the current exit_code and detail_status of the named state.
Get the messages associated with a given resource group and name :param resource_group: resource
List the logs of a named container :param resource_group: The resource group to list
Delete a container from a container group.
Check if a container exists.
Constructs and returns a query dictionary for the InfluxDB InfluxDB, this is
Push a message to the Xcom channel.
Get all the task instances for this execution date.
Get a task instance by task id.
Get the previous dagrun in the database.
Get previous scheduled dag run.
Verify the integrity of the execution of the task instance.
Make a SOAP request and return the body and headers.
Converts a Context object to a list ofairflow variables.
Trigger the execution of a DAG task.
Queries the server for a metric by time range Args: query (str): The metric
Return the dag object identified by the dag_id.
Kill a list of zombies.
Given a DAG and a parent DAG, bag all subDags.
Collects all the dags in a given folder.
Print a report of the dagbag stats.
Add a number of days to a datetime object.
Return a list of files that match the regular expression.
Return a list of all files in the directory.
Clears all running or stopped task instances from a list of TIs.
Try to get the next retry number.
Returns the current execution state of this task instance.
Sets the failed state to failed session.
Refreshes the task instance from the database.
Clear the Xcom data associated with this task.
Returns the key used to store the execution data.
Returns True if the task is marked as done, False otherwise.
Calculates the next retry datetime based on the task's retry_delay.
Returns True if this job is ready for retry, False otherwise.
Returns True if the pool is full, otherwise False.
Get the dag run for this execution date.
Adds a new value to the Xcom queue.
Initializes the run context.
Closes the file if it's still open.
Returns a connection to the API server.
Starts an instance for a given project and zone.
Get the details of an instance template :param resource_id: instance template id :param
Wait for an operation to finish.
Check to see if the given bucket exists.
create an S3 bucket if it doesn't exist.
Check if a bucket exists in a given prefix and is in a given delimiter.
Returns a list of all prefixes in a bucket.
List keys in a bucket.
Check to see if the given key is in the given bucket.
Get a key from S3 :param key: The key to retrieve :param bucket_
Read the contents of a key.
Check if a key is valid for a wildcard key.
Given a wildcard key, return the key that matches the wildcard key.
Returns a cursor to the database for the current user.
Convert a user type to a data dictionary.
Get a speech API client.
Sets up the Spark SQLHook and runs the query.
Load plugins from an entry point.
Check if plugin_obj is a valid plugin.
Marks a task as skipped in the execution date.
Return an AADLfilesystem client.
Returns True if the file exists, False otherwise.
Returns a list of files or directories at the given path.
Run the query.
Uncompress a compressed file.
Returns a cursor to the database for the query.
Build metrics from command line arguments.
Creates a cgroup for a path.
Removes a cgroup from the tree at the given path.
Do the actual API call.
Get a connection from the database, or create a new one if it doesn't exist
Make a query to the database :param query: The query to execute :type query:
Describe an object :param obj: :return:.
Returns a list of the available fields for the given object.
Returns the first part of the query and the last part of the query.
Convert a column of values to a timestamp.
Get a mongo collection :param mongo_collection: mongo collection :param mongo_collection:
Check if a mail has an attachment.
Get a list of attachments by name.
Returns a tuple of the filename and payload.
Send a batch of records to Firehose.
Get the status of the tasks that should be resized.
Send an email to a specific destination.
Send an email using the SMTP Python module.
Convert the value to a UTC time.
Check if a blob exists.
Check if a container exists with a prefix.
Load data from a string into a file.
Reads the contents of a file into memory.
Delete a file from a container.
Get ftp connection.
List all the files in a directory.
Store a file at remote_full_path into local_full_path_or_
Get the modification time of a file.
Creates a webhook instance and executes it :returns: None :rtype: None :raises
Get a connection to the fileservice service.
Checks if a directory exists on the remote server :param share_name: The name
Checks if a file exists on the specified share :param share_name: The name
Returns a list of directories and files in the specified share.
Create a directory on the remote server :param share_name: The name of the directory
Creates or updates a file from a file on the remote server :param file_path:
Create a file from a string.
Returns a storage client.
Download an object from S3 :param bucket_name: :param object_name:
Upload an object to S3 :param bucket_name: The name of the bucket to
Checks if the given object exists in the given bucket :param bucket_name: The
Check if blob is updated after ts.
Delete an object from S3 :param bucket_name: :param object_name:
Get the size of an object.
Calculate the CRC32C of an object.
Get the md5hash of an object.
Determine if the secondary training status has changed.
Print secondary training status message.
tar and upload to s3 :param path: path to tar and s3 :param
Configure s3 resources. :param config: S3 configuration :type config: dict :
Check if S3 URL is valid.
Return a log connection.
This method executes the data flow job.
Run database migrations using offline mode.
Run migrations from command line.
Delete an instance :param instance_id: instance id :param project_id: project
Delete a table from an instance.
Update the cluster with new data.
Prepare the command line to run.
Return a flattened list of all the key-value pairs in a hive configuration.
Checks if a table exists in the database :param table_name: The name of
Creates a connection to the Hiveserver2 service.
Get results for a user.
Returns a list of records from a table.
Returns a Pandas DataFrame from the results of get_results.
Gets the product search API client.
Returns the auth token for the service endpoint :returns: the auth token :rtype:
Bind parameters to an operation.
Escapes single and double quotes.
Cast string field to bq_type :param string_field: :param bq_type
Validate that the value is of expected_type.
Creates a connection to the BigQuery service.
Get the authorization service for the authenticated user.
Check if a table exists.
Cancels the current query.
Deletes a table from the database.
Insert or update a table.
Get a dataset by its ID.
Execute a query. :param operation: :param parameters: :param parameters: :param
Executes the given operation with the given sequence of parameters.
Returns the next page of results.
Returns a postgres cursor.
Make intermediate directories on remote system.
Runs the command. :param run_with: :param join_args: :
If we have a.cfg file, run it as a user, otherwise remove it.
Entry point for command line usage.
Builds the HTML header.
Builds the js chart for the series.
Create the x-axis for the plot Parameters ---------- name : str Name of the x-
Create a y-axis with the given name, label, and format.
Returns a sqlite3 connection to the database.
Get the last execution date of a dag run.
Send the message to SharQ.
Generate a JSON response.
Open a file, possibly with a ZIP archive.
Generate a cache key for the URL.
Retrieves a connection to Vault.
Get API key from http_conn_id.
Returns a requests session object.
Execute the API call. :param payload: :param payload: :return:.
Builds the payload to send to the opsgenie service.
This method executes the opsgenie alert hook.
Returns a connection object to the redis server.
Runs the query, returning a query execution ID.
Check the status of a query execution.
Wait for the query execution to finish.
Creates a PyFTP connection to the remote host and port.
Handles rate limit exceptions.
Retrieves a table from the database :param database_name: The name of the table
Get the location of a table in a database.
Get the status of a cluster :param cluster_identifier: The identifier of the cluster :
Delete a cluster :param cluster_identifier: cluster identifier :param skip_final_cluster
Get the list of snapshots for a given cluster identifier :param cluster_identifier: cluster identifier
Restores a cluster from a snapshot :param cluster_identifier: cluster identifier :param snapshot
Creates a snapshot of a given cluster :param snapshot_identifier: :param cluster_identifier
Execute a Slack API call.
Create a job flow for an EMAPI connection :param job_flow_overrides:
Filter result list to only return those which size is smaller than the given size.
Filter files that don't match the ignored_ext list.
Performs the aggregation and loads the result into MongoDB.
Get a pool by name.
Create a pool with the given slots and description.
Delete a pool from the DB.
Converts a Python dict to a proto object.
Wait for an operation to finish.
Get an operation details.
Appends a label to the cluster_proto.
Return http_conn_id from http_conn_id if webhook_endpoint is specified
Builds a payload to send to the bot.
Execute the bot.
Encrypt ` plaintext` with `key_name`.
Get a Pygments API client.
Closes the log file.
Returns a dictionary of environment variables to be passed to the command line.
Return a list of worker secrets.
Returns a dict with the security context for the worker.
Return the url of the extra links for the task instance.
Starts the dag file processor.
Returns True if the task is done, False otherwise.
Exit the process if the process is still running.
Updates the session with import errors.
Iterate over all the task_instances in the dag and process them as they come in.
Calculates the concurrency map for a given set of states.
Changes the state of one or more task_instances to the given acceptable_states.
Enqueue a list of simple_task_instances with a queued state.
Change the state of the tasks failed to execute.
Read the event buffer from the executor and process each one.
Update the counters of the running and failed jobs.
Read the executor state and update the internal state.
Get a run from the database and create a new one if it doesn't exist.
Get all task instances that are in the same state as the run and put them in the
Set the state of all finished dag runs to failed.
This method is called when the heartbeat is complete.
Gets a client instance for a given project id.
Get an EC2 instance :param instance_id: instance id :param project_id
Delete an instance.
Deletes a database from an instance.
Check if the attachment exists in the mail folder.
Prepare additional parameters to be passed to the API call :param additional_properties: A dictionary
Get a connection to the cluster.
Check if a table exists in the cluster :param table: The table name :type table
Checks if the given table exists with the given keys.
Build and return a command to connect to the Spark driver.
Submits the application to the cluster.
Process the output of anspark submit log.
Extract the driver status from the spark status log.
Returns a CgroupTask runner for a Cgroup task job.
Wait for a task to finish.
Return a mysql cursor.
Create a CSV file from the file handle.
Writes the local schema file to a temporary file.
Get the col_type_dict from the schema.
Map MySQL types to Python types.
Return the serialized value of the extra parameter.
Scales a time in seconds with the given unit Parameters ---------- time_seconds_arr :
Returns the number of days since the beginning of the day.
Initialize a role from a list of PVMs.
Delete a role from the database.
Returns a list of user roles.
Returns a set of all permissions views.
Checks if the user has any of the specified roles.
Check if permission_name is in view_menu_name.
Removes all permissions from the database.
Merge permission_name with view_menu_name :param permission_name: permission name
Update the permission view of the admin.
Merge permission vm with view menu for all dag vms.
Get the Fernet object.
Populates the context from the database table with the expression.
Remove messages from queue and push them to xcom.
Get a client for the effective user.
Get a HTTP client.
Check to see if the file exists at hdfs_path :param hdfs_path: Path
Get a pinot broker connection.
Return the uri of the connection.
Convert a date to a dictionary.
Convert a time object to a dictionary.
Get a redis connection.
Returns a Pandas dataframe from the SQL statement :param sql: SQL statement :param parameters:
Executes the given SQL. :param sql: The SQL to execute :param parameters:
Sets the autocommit value for the given connection. :param conn: The connection object :type
Serialize a cell to its proper ISO-8601 representation.
Check the health of the scheduler.
Returns a Cloudant session.
Execute the bot's web hook :returns: None :rtype: None :raises
Read credentials from file.
Returns True if the credentials are valid, otherwise False.
Return a list of all unfinished tasks.
Prepares the command to execute.
Normalize a tensor by mean and std.
Crop an image. Parameters ---------- img : PIL.Image The image to crop Returns -
Flip an image with its top left and bottom right corner.
Transform an image using the identity of its startpoints and endpoints.
Flips an image.
Adjust the brightness of an image.
Adjusts the image contrast by a factor.
Adjusts the saturation of an image.
Convert an image to agrayscale image Parameters ---------- img : PIL.Image The image to
Saves an ANTsImage to file.
Return a list of classes in a directory.
Read an info file and return a long tensor.
Read matches file and return as long tensor.
Calculates the accuracy of a model.
Download a file from a URL.
Returns a list of all directories in the given root directory.
Return a list of all files in the directory.
Download file from google drive.
Generate a set of parameters for a given image.
Generate a number of parameters based on the provided number of parameters.
Given an image and a scale and ratio, return a tuple with the indices of the parameters
Generate a set of parameters to apply to an image.
Generate parameters to pass to an algorithm for translation and shearing.
Downloads the archive to a tar.gz or tar.gz file.
Download all the images in the folder.
Get the current theme name.
Returns list of installed themes.
Given a response, return a list of dictionaries.
Wrapper around tfd. independent.
Computes the log probability of the median joint given the mean and standard deviation.
Helper function to build a custom random variable.
Reduce a matrix of non-finite values along an axis.
Compute the size of the event tensor.
Same as _eval_all_one_hot.
Converts the given identifier to a tensor_fn.
Calculates the size of a batch of parameters.
Builds an input pipeline for training.
Check that the map values are correct.
Call a function with any number of positional arguments.
Call a function with args and return the result.
Flattens a nested tf.Tensor into a nested tf.Tensor.
Computes the gradients of the potential and kinetic energy at a given step.
metropolis-hastings step.
Initializes a CloudFormation layer from a CloudFormation config dictionary.
Converts a value to a tensor.
Expands x to the shape of event_shape.
Computes the log_probs of the cat layer.
Ensure that tensorflow is installed.
Computes the logistic regression.
Calculates the covariance matrix of the target features.
Makes a tensor that is positive along given axis.
Reshapes x to the same shape as x, excluding the specified axis.
Calculates the z-value of x.
Inverse of z.
Computes the transition matrix of the semradal linear regression.
Convenience function for creating a multi-trend transition matrix with extra noise for the
Find all keys that are less than n.
Return the eps of a numpy array of the same shape as the dtype.
Implements a line search function that updates the Hagerzhanglines table.
Pretty-prints the values. :param pass_through_tensor: :param values
Checks that the given parameter is a quadrature parameter.
Interpolate given loc values.
Interpolate using linear interpolation.
Concatenates a list of vectors.
Computes the logarithm of the vector.
Computes the log-likelihood.
Computes the sum of the vector matrices.
Extract log probabilities from a batch of states.
For each batch_rank, choose a random direction.
Call a function with a list of arguments.
Returns a TensorFluent for the trainingable posterior.
Computes the moments of the masked time series.
Computes the initial value of the masked time series.
Computes a TensorFluent for a mixture of posterior draws.
Returns the range of the variable.
Given a list of dist_fn_args, a list of dist_names, a
Adds _dist_fn_wrapped and _dist_fn_args to _dist
Calculate the entropy of all distributions.
Builds an image summary for the given sequences.
Visualize a reconstructed image.
Visualize a qualitative analysis.
Summarize distribution parameters.
Summarize mean in Nats and bits.
Returns a TensorFluent for the multivariatenormal diagram.
Computes the zero state tensor.
Reshapes the image and returns the result.
Samples from the static prior distribution.
Returns the shape of the batch for the parameters.
Computes the shape of the batch for all parameters.
Returns the size of a square matrix.
Return the index of the first non-zero elements in the array Parameters ---------- values : array
Sort an array along a given axis.
Computes half- square root of x.
Computes the log-ndtr-asymptotic series of x.
Computes the inverse of x.
Calculates the log probability of joint text messages.
Returns True iff index_points is an univariate marginal distribution.
Gets the list of index points.
Computes the outer squared difference between x and y.
Calculates the value and batch jacobian of a function.
Splits a covariance into marginal values.
Returns a textual representation of a numpy tensor.
Returns the shape of the sample.
Returns the tf.Tensor of the sample shape.
Returns the current value of this sample.
Returns the numpy representation of the tensor.
Return a random unit norm.
Compute the log normalization tensor.
Returns the common dtype of all the arguments.
broadcasts a tensor to a list of target_tensors Parameters ---------- tensor_to_broadcast
Returns the PDF of the peak at the current peak.
Calculates the effective sample size for a single state.
Calculates the potential scale reduction for a single state.
Compute the size of x along the given axis.
If we can't broadcast a list of states, we have to broadcast them.
Returns a copy of this mapping with `x` and `y` removed.
Merge two objects. :param old: :param new: :param use_equals:
Return a copy of a tuple.
Given a function and a dictionary of src_kwargs, return a dictionary of function inputs.
Vgg conv block with batch normalization.
Determine if two states have no u turn.
Calculates the log probability of the current state, then the log probability of the next
Calculates the log joint probability for current_target_log_prob and current_
Random samples from a Bernstein log-likelihood.
Recursively convert a nested structure to a tensor.
Returns a dictionary of tf.Tensor attributes to use as a default dictionary of attributes.
Make mixture log-likelihood for a latent of size latent_size.
Pack images into a single batch.
Downloads a file from Google Storage.
Calls the volatility function with parameters.
If the volatility parts are broadcasted, append them to the state parts.
Calls the provided function with the provided batch_shape, and returns the output.
Call the provided function and reshape the output.
Helper function for _bdtr.
Return a flat sampling of the distributions.
Given a matrix of topics and a vocabulary, return a list of strings for each topic.
Adds control dependencies to the code book.
Saves images using matplotlib.
Convert a numpy dtype to a dtype that is compatible with tf. as_dtype.
Returns the dtype of a tensor's base_dtype.
Returns ``True`` if dtype is a boolean array.
Test if dtype is a complex number.
Returns the maximum value of a dtype.
Returns a human-readable name for a numpy dtype.
Returns the size of a numpy dtype.
Make sure all items have the same base type.
Returns a function that replaces the first objective value with the second objective value.
Given an objective function and a simplex, return the expanded function.
Shrinks the simplex of the best vertex to the best index Parameters ---------- objective_
Replaces the value at the specified index with a new one.
Prepare the args for an objective with initial simplex.
Prepare the arguments for an objective function with an initial vertex.
Builds the MNIST dataset.
Returns a config dictionary for the module.
Initialize a model from a tf.config.
Matrix multiplication op.
A helper function for standard deviation.
Returns a TensorFluent for a scalar condition.
Utility function to finish the log probability when there is exactly one event in the batch.
Utility function to finish the probability of a batch for one ildj.
Returns a TensorFluent for the rotation of x.
Validates the layer type.
Returns a dictionary mapping parameter names to tensor shapes.
Apply a single step to a distribution.
Apply a set of slice overrides to a map.
Returns the number of columns in x.
Gets the value of a static predicate.
Returns a function that ranks a tensor based on its shape.
Check that the scale is a diagonal scale.
Pad the dimensions of x according to the mixture distribution.
Convenience function to embeds a check that x is non-negative.
If x is None, get it from tf.get_static_value.
Determine if a tensor is unsigned by its dtype.
Returns True if dt is known as signed by its dtype.
Returns the largest integer value of dt.
Returns the smallest integer value in dt.
Returns ``True`` if dt is an integer.
Generate a new seed based on the seed and salt.
Returns the dimension size of x at the given axis.
Returns a list of strings representing the tensor's rightmost value.
Validate ``perm`` if ``validate_args`` is True.
Returns the shape of the perm-to-shape, given the shape of the perm-
Returns a list of all dimensions of x.
Builds a backward pass step from the transition matrix.
Propagate mean and covariance matrix to the mean and covariance matrix.
Propagate a mean onto a TensorFluent.
Propagate a covariance matrix onto a linop Parameters ---------- cov : scipy.sparse.
Calculate the mean of the joint state.
Compute the covarianceariances for each timestep.
Converts latent means to latent_means and latent_covs.
Compute the log normalization tensor.
A tuple of tf.Tensor, tf.Tensor, tf.Tensor, tf.Tensor
r""" Rotate the samples according to the current mean direction.
Samples from a 3D tensor.
Returns a copy of the passed function.
Returns a copy of dict_ where keys are not set and values are not set.
Recursively replace all keys with their pretty values.
Get samples from a distribution.
Returns True if x is a named tuple.
Create a choose box.
Call a function with a list of args, and gradient descent, if they are not
Check that the shape is valid.
Returns a TensorFluent for the converged tensor.
Utility function to update a position.
Check whether the two objects have converged at least f_relative_tolerance.
broadcasts the value to the target tensor.
Computes the harmonic number.
Get a field from the kernel results object.
Compute variance scaling term.
Convenience function for creating a tf.tensor or tf.Tensor depending on the input
Check that `val_1` and `val_2` are finite.
Return the kernel kernel results.
Resnet block with 2D projection.
deep Exponential family. Parameters ---------- data_size : array_like, shape :
Validate and convert parameters. :param amplitude: :param length_scale: :param amplitude
Determine which KL function is registered between two types.
Reads an image from file and returns it as a tf.Image.
Downloads and unzips thesamples.
Create a character from a pair of tf.Tensor and tf.Tensor.
Create a sequence of frames for the given character.
Create a random sequence.
Flatten a list of _sum kernel objects.
Flatten a multiplicative list of kernels into a single flattened list of kernels
Builds the fake data.
Inserts all the dimensions at the end of the tensor along the given axis.
Make a list of indices that are non-negative.
Sorts a tensor by k-th value.
Ensures that x is of a known number of dimensions.
Batch gather with broadcasting.
Bias for events and samples.
Computes the inverse Hessian given control inputs.
Transposes a batch of samples.
Compute the sum of a tensor up to a given number of dimensions.
Return the common dtype of all the arguments.
Calculates the initial state of a lbfgs optimizer.
Returns a mask of the PSD of the input tensor.
Helper function for creating initial_position, differential_weight, crossover_prob,
Find the best value in a population.
Check whether all parts of the population are within func_tolerance.
Ensure that a tensor or list is a list of Tensors.
Returns a TensorFluent for the `tol` parameter.
Builds an input pipeline for training.
Plots the generated images in a figure.
Convert a list of production rules into a string.
Returns a TensorFluent for the production rules given a list of inputs.
Computes the logarithm of the latent space.
Computes the logarithm of x.
Computes the inverse of the log-likelihood function at x.
Convenience function to solve a LU decomposition of a LU decomposition.
Computes the diagonal of a sparse block.
Validate a matrix.
Generates slices of a table.
Generates a mask from slices of data.
Return an array of input_size, sorted according to input_order.
Create mask array from degrees.
Create a zero-dimensional multivariatenormal diag op.
Calculates weights from parameters Parameters ---------- global_scale_ variance, local_scales
Build the _dist_fn and _dist_fn_args from the given model.
Builds a TensorFluent for the seasonal transition matrices.
Builds the seasonal transition noise matrix.
Constrained seasonal transition noise.
Validate the observation data.
Add a new object to the simulation :param scheduler: :param max_iteration: :
Sets the checkpoint to a specific path :param checkpoint_path: Path to the checkpoint to
Set the constant value of the gradient clip.
Optimize the model.
Sets the summary of the training set.
Set the summary for the value.
Set bigdl training data.
Downloads and returns a list of all the images in the news folder.
Download and load GloVE W2V.
Compile the loss with the given optimizer and metrics.
Evaluates the model.
Predict the class for X Parameters ---------- X : array-like, shape = (n
Load images from a MNIST dataset.
Preprocess MNIST dataset.
Get end trigger from options.
Validate the optimizer on the test data.
Returns the value of the resource.
Call a bigdl function :param bigdl_type: bigdl type :param name
Convert an RDD of Python objects into an RDD of Java objects.
Convert Python object to Java.
Get a layer activation by name.
Returns an array of label values for this parameter.
Read a distributed frame from a file on the local filesystem :param path: Path to the
Writes a bigdl object to a file :param path: Path to the bigdl
Get image from current window.
Returns image data from BigDL object :param float_key: The key of the image
Returns the label of the tensor.
Returns a prediction function for the model Parameters ---------- key : str The key of the model to
Predict using the model Parameters ---------- X : array-like, shape = batch_size
Calls bigdl function on the data and returns the transformed data Parameters ---------- dataset : `
Save a keras model as a json file.
Build and return a keras model.
predicts the distributed value of a bigdl dataset Parameters ---------- data_rdd : list
Returns a list of tensor weights.
Runs the training function for the current variable.
Loads a torch model from a file at the given path.
Loads a tensorflow model from a json file or hdf5 file.
Creates a new criterion object with the same value and bigdl_type.
Load weights from JSON file.
Loads animdb dataset.
Build and return a keras model.
Returns the shape of the input.
Returns the shape of the output from bigdl function.
Reads MNIST data at location.
Read data sets from a zip file.
Returns the bigdl jar in the correct location.
Checks if we are running on a Spark version below 2_2 :returns: True if
Returns a dictionary mapping variable names to Tensor objects.
Saves the variable bigdl from a list of tensors.
Expands the given array of units at a given number of time steps Parameters ---------- units :
Computes a simple attention.
Apply attention to the tensor inputs.
Get the log file for the agent.
Send a log message to the log file.
Compute a summary of the gradient updates.
Reads the data from the specified config file.
Allows the user to interact with an alice via HTTP POST.
Given a list of labels and a list of classes, return a 1-hot numpy array
Convert one-hot labels to one-hot labels.
Create a tf.Session from a tf.Session object.
Loads the model from the local file system.
Returns the variable to use for the optimizer.
Updates graph variables. :param learning_rate: learning rate :param momentum: momentum
Calculates the F1 of the predicted values.
Given a word, return a list of lower case, upper case, lower case, and
Drop-in replacement for tf. nn. dropout.
Builds the network.
Builds the basic LSTM network.
Train the model on a batch.
Predict on a batch of objects Parameters ---------- data : list The data to predict Returns -
Converts a list of sent words into a numpy array of word indices.
Convert tags to numpy array.
Calculates the BLEU of a sentence.
Check if url is valid.
Extract certificates from text file.
Verifies a signature against a request body.
Verify the certificate chain.
Return json representation of controls.
A list of ms_bot_ framework objects.
Returns a list of Telegram control objects.
Alexa of all controls.
Computes the accuracy of the classification. Parameters ---------- y_true : list of numpy
Calculates the accuracy of the prediction.
Reads the given data file and returns it as a dictionary.
Create an Agent that runs on amean bot. :returns: an Agent that runs on
Convert vector x to one-hot encoding.
Returns an ordered dict where the keys are Rounded to the number of decimal points.
Loads the model from disk.
Save the model to file.
Builds a train_op for the optimizer.
Returns a list of words that appear in d.
Start the timer.
Handle a single request. :param request: The request to be handled :type request:
Runs the agent with the given utterance.
Generates a response based on the response template and the request.
Handle an incoming intent request :param request: :param slot_name: :return:
Handles launch requests :param request: :param response: :return:.
Handles unsupported requests. :param request: :param response: :return:.
Pretty print the dictionary.
Convert elmo loss toppl.
Build a model from a dictionary of parameters.
Interact a model from an input file.
Predict data on stream.
Read answer from file.
Load a function from its string name.
Returns a metric function by its name.
Convert string to decay type.
Returns the best value with respect to the given losses.
Encodes a list of tokens into word embedding format.
Read requirements from requirements.txt.
Computes the log loss of the prediction.
Displays the details of an item :param item_data: :return:.
Create an instance of an agent.
Main entry point for running ms bot.
Download a file from a source URL to a destination path.
Unzips a file into a tar archive.
Recursively updates an editable dictionary.
Set the MD5 hash of a URL.
Set a query parameter in the url.
Alexa response.
Get the JSON representation of this control.
ms bot framework data :returns: dictionary of card names :rtype: dict.
Returns the JSON representation of the control.
A dictionary of dictionaries describing the bot's framework :rtype: dict :returns:
Computes the squad score of the prediction.
Calculates recall at k number of samples.
Check if GPU is available.
Recursively parses a config value.
Parses a configuration as a dictionary.
Returns a copy of the given path with expanduser replaced with its own value.
Run the request in a new thread.
Removes a conversation from the database.
Refreshes the list of valid certificates.
Verifies the signature against the request body.
Handle a request. :param request: :param signature_chain_url: :param
Load a class from its fully qualified name.
Returns the model class registered with the given name.
Get glmregularization path :param model: :return:.
Make a glm model from a dictionary of coefficients.
Creates a h2ocluster object from a list of key-value pairs.
Send a shutdown request to the server.
Check if the server is up and running.
Lists all known jobs in a table.
Lists available timezones.
Fill the properties of this H2Cluster with information from another H2Cluster.
Runs the provided test_func until the timeout is reached.
Get the summary of a table.
Delete a single frame from the server :param key: The key to delete :type key
Make a JSON request to H2O model builders.
Validate the model parameters. :param algo: :param training_frame: :param parameters
Compute the metrics for a single model at a given frame.
Delete a model from the server :param key: The model to delete :type key:
Run the given number of EC2 instances in the given region.
Terminate the given instances.
Stops all the instances in the given region.
Start the given instances.
Reboot a set of EC2 instances.
Wait until we've already ssh-live on one or more ips.
Get the full name of a function.
Get a string representation of the arguments of the function func.
Wrap text at specified amount of space.
Wait for the job to finish.
Train the model Parameters ---------- X : array-like, shape = (n_samples,
Returns a dictionary of the model's parameters.
This function is called at the end of execution of the main thread.
wipe the g_output_dir if it exists.
Remove a sandbox from a parent directory.
Scrap a port from the standard output.
Scrap the number of nodes from the output file.
Terminate the process if it is running.
Stops all the nodes and client nodes.
Get the IP address of the current node.
Get the port number of a node.
Determine the vector size based on the pre-trained frame id.
Compute the H2O mean absolute error Parameters ---------- y_predicted : array-like
Calculates the H2O mean squared error Parameters ---------- y_predicted : array
H2O median absolute error Parameters ---------- y_predicted : array-like, shape
Calculates the explained variance score between y_actual and y_predicted
Assert that the variable is of the expected type.
Assert that the variable matches the regex.
Raise an error if the arguments are not valid.
Checks the type of the variable.
Get a human-readable name for a vtype.
Checks if the variable is a member of any of the types.
Checks if the variable is valid.
Returns the H2OConfigReader instance.
Read the candidate config file.
Yields the candidate log files.
Stores the current progress of the model.
Calculates and recalculates the model parameters.
Estimate the completion time of the current progress.
Calculates next poll interval from current and current time.
Compute the current progress at time t.
Returns the time at which x_target was updated.
Draws the given text to the terminal.
Computes the total width of all widgets.
Returns the size of the terminal in bytes.
Sets the encoding of the bar.
Fit the model to the given data frame :param frame: DataFrame to fit :type frame
Refreshes the cache.
Returns the type of the column.
Display a summary of the experiment.
Print a summary of the current frame :returns: None :rtype: None :raises
Return the first row of the DataFrame.
Compute the multitask matrix :param matrix: :return:.
Returns a list of all levels of the object.
Return the number of levels in the tree.
Set the level of the expression :param level: The level of the expression :type level
Set the current levels of the H2Oframe.
Renames columns in the table.
Set the column names.
Set the name of a column :param col: The name of the column :type col
Check if item is in our list or tuple.
Moves the current column into a new column of length `n_folds`.
Returns the stratified k-fold column of the table Parameters ---------- n_folds
Print the data structure in a readable format.
Pop a column from the table.
Concatenates two or more frames together.
Return a copy of the table with the same number of columns.
Return a new `Frame` with rows and columns added.
Group by a given number of values.
Fill missing values with new values.
Return a copy of `y` with the same `y` replaced.
Insert missing values at the end of the frame.
Return a factor representation of the troposphere expression.
Return a list of rows where each element matches the pattern.
Return the lstrip row or column of the table.
Compute the entropy of the matrix.
Return the number of valid substrings.
Create and return a table node :param data2: :param data: :param data
Subtracts all occurrences of pattern from replacement :param pattern: :param replacement: :
Return the toupper of the expression.
Return the na value of the expression.
Returns the difference lag of the first column of the table.
Return `~ast.ast.ast.ast.ast.ast.ast.ast
Return the minute of the expression.
Return a new `~astropy.h2oframe.H2oframe`
Apply a function to this node.
Parses the given text and returns a `Code` object.
Parses a Python code from a file.
Move the tree. drow, dcol is the number of rows to move drow
Removes all tokens from the token stream.
Returns the list of cell centers.
The standard deviation of all the cells in the grid.
Send a request to the H2ODB API :param endpoint: Name of the endpoint
Checks the version number of H2O.
Performs a lazy import of the given path.
Parses a raw FITS file.
Creates a deep copy of the data.
Get a model from its ID.
Returns a H2OridSearch object for the given grid id.
Gets a single frame by ID.
Downloads the given model from the given path and saves it as a.po file.
Downloads data from a h2o frame into a CSV file Parameters ---------- data : `
Print a demos example.
Loads a h2o dataset from a relative path Parameters ---------- relative_path : str
Compute the metrics from the actual distribution Parameters ---------- predicted : 2D array of 2D arrays
Upload a key from a file to dest_key :param file_path: path to
Check if frame id is valid.
Returns human readable byte representation of given size.
Normalize a slice so that its start, stop, and step are at the given total.
Determine if a slice is normalized.
Wait for the job to finish.
Run the model's deepfeatures.
Print a summary of the models.
Displays the current hyperparams and their values.
Gets the hyperparams for the given id :param id: The id of the hyper
Get the parameters of a hyperparameter :param id: The id of the hyperparameter :
Returns the list of archetypes in a test frame :param test_data: :param
Plots a scree plot of the current state of the cell.
Translate a module name to a module name.
Remove indentation from each line of text.
Entry point for command line utility.
Closes the currently open session.
Get the session id or generate a new one if it doesn't exist.
Start logging to a temporary directory.
Prepare the data to be sent to the backend.
Prepares a payload for sending to H2OValue.
Log the start of a transaction.
Log the end of a transaction.
Writes a message to the logging directory.
Print a message only if verbose mode is on.
Get the automl of a project.
Downloads the PPO file from one of the genes.
Download the genmodel for a project.
Fit the model to the data Parameters ---------- X : list of 2D arrays, each containing
Transform X using the means and standard deviations Parameters ---------- X : array-like, shape
Transform X using the means and standard deviations Parameters ---------- X : array-like, shape
Extracts the first part of a true string.
Tries to find the node_name in each_line.
Determine whether or not we should have a build timeout.
This function finds a build failure in the temp_func_list.
Tries to find a build id in the temp_func_list.
Extracts a job build URL from a string.
Grab the messages from a Java file.
Save the failed test info to a pickle file.
Update the summary file.
write file content to file2read.
Writes the given value to the given text file.
Loads the messages from a pickle file.
Normalize an enum constant.
Returns a list of synonyms of a given word.
Check the status of the current job, and if it's still running, update the
Writes this jar to a.po file.
Fit the simulation to the given frame :param fr: :param fr: :param fr
Returns a default set of parameters.
Returns a dictionary of the actual parameters to pass to the function :rtype: dict.
Return the deep features of a given layer :param test_data: :param layer:
Return scoring history as pandas DataFrame.
Shows the model for this job.
Calculates the variance of the model.
Returns the residual degrees of freedom.
A dictionary with the name, coef as keys and values as values.
Downloads and stores the generated gen model in the given path :param path: Path to
Downloads a jar of the generated genModel. :param path: Path to the jar
Saves the model details :param path: The path of the model :param force:
Check that the y_actual and y_predicted are the same length.
Return the cross validation models.
Wait for stdin to be a tty.
Converts the cell to a pandas dataframe.
Print the contents of the table.
Returns the path of the jar we are searching for.
Yields the absolute path to the directory containing our own jar.
Wrapper around csv. Dictwriter.
Convert a path to a uri relative to this package.
Discovers and returns a list of modules found in the package.
Write API docs to a directory.
Converts the cell to a list of integers.
Loads the messages from a pickle file.
Add a new message to the global dictionary.
Saves the messages in a pickle file.
Print a dictionary of messages to stdout.
Parse command line arguments.
Print usage and exit.
Locate all the files in the root directory.
Find the most recent magic cell in a file.
This is the main entry point.
Transform data for the pipeline.
Summarize all the test runs.
Extracts the summary data from the saveintermittens file.
Plots the current state of the model Parameters ---------- type : str The type of the metric
Check if H2O is available.
Removes failed and summary data.
Returns a dictionary mapping endpoint names to lists of endpoint objects.
Create or update site forward.
Convert data to a JSON formatted string.
comments a user :param user_id: :param amount: :param user_id
Get a username and password from a secret file.
Like the given user. :param user_id: The ID of the user to like
Calculate like-medias for givenhashtag.
Check if a user is in the blacklist or not in whitelist.
Reads the contents of a file into a list of strings.
Schedules a schedule to be run at a specific time.
Determine whether the message is currently live, or not.
Guess the service info from a spec file path.
Returns a fully qualified URI from a request object.
Creates a HTTP connection based on the passed in request.
Performs the actual HTTP request.
Get the authorization server name.
Validate the request uri.
Returns the Azure CLI profile.
Opens a request using the specified method and url.
Sets the timeout for the request.
Set the value of a request header.
Returns all the HTTP request headers as a string.
Send a winhttp request.
Returns the status of the request.
Returns the current status of the http request as a string.
Returns the HTTP response body as a string.
Set the client certificate.
Sends a put request to the remote server.
Set the value of a request header.
Performs the actual HTTP request.
Retrieves the HTTP response from the client.
Get a readable id from an id name.
Get the serialization name for an element.
Return the properties of an XML entry.
Return the children of the node specified by the given path.
Finds namespaces from child element :param parent: :param child: :return:.
Return a namespace object from an XML string.
Return a Servicebusregion object from an XML string.
Extracts the namespace availability from an XML string.
Parses an XML representation of a service bus.
Update an existing kb.
Builds a package from a GitHub pr number.
Replace a word. :param word_ alterations: :param custom_headers: :
Retrieves the storage account properties for the given service.
Retrieves the storage account keys for a service.
Regenerate the keys for a storage account.
Deletes the storage account for the given service.
Checks if the given storage account name is available for the given service.
Gets the properties of a hosted service.
Deletes an existing hosted service. :param service_name: Name of the service to
Deletes the given deployment for the given service and deployment name.
Takes a service name and production and swap it's version to a new version.
Updates the status of a given deployment for a given service.
Walk an upgrade domain for a given service and deployment.
Reboot a role instance.
Deletes one or more role instances from a given service in a given deployment.
Check whether the given service name is available in this subscription.
Get the list of certificates associated with a service.
Retrieve a service's certificate.
Adds a certificate to a service.
Delete a service certificate.
Retrieves the management certificate for this subscription using the specified thumbprint.
Adds a new management certificate to this user's subscription.
Delete the management certificate specified in the thumbprint parameter.
Gets the properties of a hash hash hash hash hash hash hash hash hash hash hash hash
Creates an afforant group in this user's account.
Deletes ainto the given hash hash hash hash from the given hash hash hash hash.
Gets the list of subscription operations available on the specified account.
Deletes a reserved IP address.
Associate a reserved IP address with a service.
disassociates a reserved ip address to a service.
Retrieves a reserved IP address by name.
Retrieves a persistent VM role.
Deletes a role from a service.
Starts a role on the given service and deployment.
Starts a list of roles for a given service in a given deployment.
Restarts a role from a service.
Adds a DNS server to a service.
Updates a DNS server in the given service.
Deletes the DNS server associated with the given service and deployment.
List the versions of a resource extension.
Removes an existing replication image from a VM.
Shares a virtual machine image with another one.
Deletes the specified VM image.
Returns a list of VM images available on this account.
Deletes an OS image.
Get the data disk for a service and deployment.
Deletes the data disk associated with the given service and deployment.
Updates a disk.
Deletes a disk. :param disk_name: name of the disk to delete :
Build the receiver object.
Create a Service object from a connection string.
Returns a list of all subscriptions for a given topic.
Parse the HTTP response for asynchronous operations.
Perform a GET request.
Perform a PUT request.
Retrieves the status of an operation for a request.
Updates the x_ms_version header of the request.
Builds a package from the environment, using travis.
Returns a list of all available service bus regions.
Returns a list of all available namespaces.
Retrieves a namespace by its name.
Creates a new namespace.
Deletes a namespace.
Checks the availability of a namespace.
Gets a list of all the topics with the given name.
Get a list of all notification hubs with the given name.
Get a list of all configured relays.
Get a list of rollups from a queue.
Gets the rollups of a metric for a topic.
Get a metric rollups notification hub.
Get a metric rollups relay.
Create an extended environment. :param env_dir: directory to create :param system_
Context manager to create a virtual environment and add a package to it.
Creates a SQL Server.
Sets the admin password for a SQL Server.
Gets a list of service names associated with a given server.
Deletes a firewall rule.
Returns a list of firewall rules for a given server name.
Get a list of service level objectives on a server.
Deletes a database from a server.
Returns a list of databases with the given name.
Get the current session state.
Set session state.
Validate a challenge string.
This is the default error handler.
Creates a new Azure Queue.
Deletes a queue. :param queue_name: Queue name :param fail_not
Retrieves information about a queue.
Creates a new Azure topic.
Returns the details of the specified topic.
Creates a new CloudWatch rule.
Retrieves a specific rule from a topic, subscription, and rule name.
Returns a list of rule objects for a given topic and subscription.
Creates a new Azure Service subscription. :param topic_name: The name of the subscription
Retrieves a specific subscription by its topic name and subscription name.
Returns a list of all subscriptions of the specified topic.
Sends a message to a topic.
Unlocks a message from a topic or subscription.
Sends a batch of messages to a queue.
Unlocks a message from a queue.
Receive a message from a queue.
Receive a message from a subscription.
Creates an Event Hub :param hub_name: Event Hub name :param hub
Updates an Event Hub :param hub_name: Event Hub name :param
Gets an event hub. :param hub_name: The name of the event hub
Sends an event to a hub. :param hub_name: hub name :param
Updates the service bus header.
Returns the authorization token for the given request.
Returns True if token is expired, False otherwise.
Returns a token for the given host and path.
Updates the uri query part of the request.
Deletes the message from the queue.
Unlocks the message queue.
Rerun the lock for the service.
Adds the properties to the request headers.
Return a dict representation of the batch body.
A general error handler.
If the request was successful, set the auth_attempted flag to True.
Sets the profile to use.
Deletes a queue from Azure.
Deletes the given topic from Azure service.
Create a shared access key from a connection string.
Retrieves the properties of the service.
Determine if the lock has expired.
Given a results_queue, return a list of queue items.
Task collection thread handler.
Build a configuration dictionary from a package and its contents.
Constructs a Message object from the response headers.
Converts an ElementTree element to a `Rule` object.
Convert an ElementTree element to a Queue object.
Extracts an Azure service bus entry element to a topic object.
Extracts an `subscription` element from an `entry_element` element.
Parse a list of enum results.
Extracts properties from an element and returns them as a dictionary.
Returns a list of queue clients.
Returns a list of all known topics.
Gets the details of a single site.
Deletes a site from a webspace.
Updates a webspace's website.
Restarts a web site.
Get historical usage metrics for a webspace and website.
Get a list of metric definitions for a webspace and website.
Get the publish profile XML for a webspace and website name.
Get the publish profile for a webspace and website name.
Creates a new Cloud Service.
Checks whether the given job collection name exists in the given cloud service.
Gets a specific job collection.
Cancel scheduled messages for one or more sequence numbers.
Wait for all unsent events to happen.
Get a certificate from a publish settings file.
Loads all the cookies from the cache.
Get terminal width.
Returns the cut prefix of the value if it is longer than max_len.
Print a message to the terminal.
Returns file size in human readable form.
Returns a string representation of the elapsed time.
Generate a progress line with the given parameters.
Print a progress bar for the given iterator.
Returns the number of segments for this segment.
Iterate over all the segments in this representation.
Wait for an event to happen and return True if it's time to wait.
Puts the given segment into the queue.
Queue a value to be stored in a queue.
Parse PV request parameters.
Extract ID from http_result.
Find and return the vpid for a media element.
Parses the given JSON data and validates it against the given schema.
Parses XML data.
Validate a QSD parameter. :param data: data to validate :param name: name
Search a dictionary for a specific key.
Iterates over the html for a given tag.
Determine the JSON encoding of the sample.
Parse the response as JSON.
Parse response as XML.
Parses a list of key-value pairs and stores them in the cookies attribute.
Parse the response headers.
Parses a set of query params.
Get the formatted message.
Create a new log record.
Method to perform the actual login :returns: None :rtype: None :raises:
Load a support plugin.
Update an existing QSD with new values.
Iterate over file and yield chunks of data.
Returns a generator yielding all required parameters of the given name.
Check file output.
Create output from command line arguments.
Create an HTTP Server.
Iterate over HTTP requests.
Output stream passthrough to console.
Open a stream and read the prebuffer.
Create and open an output stream.
Read data from stream and write them to output.
Handle one or more streams.
Fetches streams for the given plugin.
Fetch streams from the given plugin, retrying if they don't exist.
Given a dictionary of streams and a stream name, returns the stream name.
Print the list of available plugins.
Authenticate using twitch OAuth.
Loads plugins from the specified directories.
Sets up the http session options.
Loads all plugins found in the plugins directory.
Log the current OS and version.
Return stream ID from input text.
Get text content of an image.
Gets option value for given key :param key: option key :type key: str
Sets a plugin option.
Retrieves the value of a plugin option with the given key.
Try to resolve the given URL to one of the registered plugins.
Loads all plugins found in the given package path.
Returns the number of hours, minutes, seconds.
Given a response, return the url to the player's page.
Parses M3u8 XML data.
Given a command, return the command that is supported.
Get stream id from html.
Extracts the stream info from an HTML page.
Method to perform the actual login :param username: :param password: :return:.
Apply a function to each element of the map.
Call the crunchyrollapi API.
Starts a new session.
Get information about a media :param media_id: :param fields: :param fields
Create an API object.
Format a single character as an output character.
Read n number of bytes from buffer.
Get the value of the code.
Add an explanation to this error.
Sets the list of decodindices to a list of strings.
Sets the length of the data.
Reads a length-based tuple from the given stream.
Return the explanation of the bit pattern at the given index.
Returns the value of the element at index + extra.
Return the span of the value at the given index.
Returns the value at the given index, with extra bits added.
Returns the mnemonic of the symbol at the given index.
Returns the mnemonic representation of the specified index.
Compile and return a list of actions.
Executes the given action on the given w.
Make a hex string of data at the given position.
Calculates the length of the metablock.
Returns True if the stream is compressed, False otherwise.
Sets the number of block types for a given kind.
Pop and insert values from a MTF list.
Read a list of prefix codes of the given kind.
Patch a dataset function so it's hidden.
Adds virtual columns to the mesh.
This is the main entry point for the application.
Open multiple files and concatenate them into a DataFrame.
Create an AstroPy Table object from an AstroPy username and password.
Create an AstroPyFile object from an astropy table.
Create an array from a dictionary of scales.
Read a CSV file or buffer and return a DataFrame.
Runs a remote server. :param url: :param kwargs: :return:.
Wrapper for `zeldovich` function Parameters ---------- dim : int The dimension of the
Concatenates two dataframes.
create a column virtual range :param start: :param stop: :param step: :
Opens a dataset from the given path.
Evaluate an expression on the dataset. :param expression: expression to evaluate :param i1
Returns a set of all variables that are in the previous selection.
Sorts the trajectories Parameters ---------- ncol : int The number of trajectories
Wait until the plot event is set.
Open a document in the operating system.
Yields a file-like object to be written to a file-like object.
Split arrays into mask arrays and mask arrays.
Calculates the median of an expression over a fixed number of bins Parameters ---------- expression :
Plots a widget from a dataset Parameters ---------- x : list of 2D arrays y :
Plot a 3D plot of the current DataFrame.
Get the data type of an expression.
Get the path to the private directory.
Removes Virtual meta data from the private directory.
Write the metadata to a.json or.yaml file.
Write metadata to a JSON or YAML file.
Sets the value of a variable. :param name: Name of the variable :param expression
Evaluates the value of the variable with the given name.
Evaluates a selection mask.
Convert the table to a dictionary.
Create a copy of the DataFrame.
Convert the main dataframe to a arrow table Parameters ---------- column_names : list List of string
Create an astropy.table.Table object from the ROI model Parameters ---------- column_
Add a new column to the table Parameters ---------- name : str Name of the column to add
Renames a column in the table.
Adds virtual columns in cartesian coordinates.
Adds virtual columns cartesian velocities to polar.
Adds virtual columnspolar velocities to cartesian.
Adds a virtual columns rotation to the matrix Parameters ---------- x : float xnew : float
Adds the virtual columns of spherical to cartesian.
Adds virtual columns from cartesian to spherical.
Add a virtual column to the table :param name: Name of the column :type name
Delete a column from the table :param name: The name of the column :type name
Adds a new variable to the table :param name: Name of the variable :param
Delete a variable from the editor :param name: name of the variable :type name:
Returns the last n elements of the list.
Displays the first n rows of the table and the last n rows of the table.
Concatenate elements of the table `i1` into `i2`.
Sets the current row value.
Returns a copy of the DataFrame with columns that are not in the index.
Takes a subset of the DataFrame.
Return a copy of this range where each element is a subset of its elements.
Raises selection_history_indices signal_selection_changed signal.
Redo the currently selected item in the selection history.
Check if a selection can be redone.
Select a rectangle Parameters ---------- x : float x, y : float y : float y :
Selects the circle at x,y with the given coordinates x,y, and y
Adds a new selection to the current selection history.
Find a valid name for the table.
Dump the graph in graphviz format.
Add a category to the plot.
Compute the ordinal encoding of a column.
Get a Data object for this column :rtype: Data object :returns: Data object
Returns the length of the array.
Add columns from another HStack object into this one.
Concatenates two dataframes.
Add a new column to the dataframe.
Patches an existing dataframe with a new function.
Fill missing values in an array.
Returns a copy of the array with the same shape as the original array.
Return a numpy.recarray representation of the record.
Save a dictionary of properties to a file object.
Write comment to file handle.
Write a property to a file handle.
Yield lines that start with newline characters.
Show core, lib, lib, and dependencies.
old_name, old_value, new_name, new_value, old_
Sets the FFT library.
Use librosa librosa to track audio frames.
Adjusts the tuning parameters of the effects.
Convert HZ frequencies to Mel.
Calculates the Mel value from the Mel number of mels.
Calculate the frequencies of the input Fourier transform Parameters ---------- sr : float The number of frequencies
Wrapper for scipy.cqt_filter.fft Parameters ---------- sr : `~astropy
Trim the stack so that it contains only the last n_bins.
Calculate the spectral response of the Cqt model Parameters ---------- y : array-like,
Calculates theearly downsampling count.
Downsample an audio file by a given number of octaves Parameters ---------- y : array-
Returns a random transition matrix.
Sets the current image on the given axis.
Check if axes is a valid matplotlib axes object.
This is a helper function to scale a matplotlib axes object.
Compute the Fourier transform of the Fourier domain.
Computes the Mel element of the coordinate system Parameters ---------- n : integer number of
Calculate the frequency of cqt at a given number of points.
Build an array of chromosomes with n number of bins.
Build a time series of `n` frames.
Compute the time stretch of the time series Y.
Runs HpSS on set durations, durations, durations, durations
This is a helper function to perform the nearest neighbors filter.
Calculates the bandwidth of a window.
This is an implementation of window_ss_fill that takes a fixed number of samples and
Calculates the Jaccard distance between two integers.
Returns the index of the best matching interval in a list of intervals_to.
Match two trajectories Parameters ---------- intervals_from : list of trajectories Returns -
Load audio from file using audioread.
Convert audio to mono format.
Return set of all files in dir_name that match extensions.
Stretch a video using librosa.
Parse command line arguments and return a dictionary.
Runs Havers- Havers-Havers-Havers-
Calculates the local score of each Beats based on the onset envelope and the
Calculates local score of onsets.
Calculates the cumulative score of a track usingdp algorithm Parameters ---------- localscore : array
Returns the highest value of a cumulative score.
Use librosa to detect onsets and convert to time series Parameters ---------- input_file
Validate that x is a valid integer.
Reads an image from the display.
Get an image from the frame identified by frame_id.
Write image frames to file using cv2 Parameters ---------- frame_dir : str The directory to
Wrap the given function with a progress bar.
Flip an image in the given direction.
Rotate an image by an angle around a center.
Given a set of bounding boxes, return a 2D array of bounding boxes of the same
Given a bounding box and a scale, return a new bounding box that is scaled such that
impad a given image to a given shape Parameters ---------- img : np.array shape :
Calculates the impad of an image to a multiple of a given divisor.
Scales a size by the given number of pixels.
Resize an image by the given size Parameters ---------- img : `str` The image to resize
Wrapper for `imresize`.
Registers a file handler.
Get priority value.
Dedquantize an array of values between min_val and max_val.
This function will open an image in a window and wait until it is closed.
Degins a flow from dx to dy Parameters ---------- dx : array-like, shape
Loads a checkpoint from file.
Calculates the weights of a state dictionary and stores them in a cpu.
Saves a model to file using mmcv.
Initializes an optimizer for the model.
Initialise and configure the logger.
Returns the current learning rate for the optimizer.
Registers a new hook.
Run a MCMC workflow.
Registers training hooks. :param lr_config: :param optimizer_config:
cut a video from one file to another Parameters ---------- in_file : str The file to
Concatenate a list of video files into a single file.
Read a list of strings from a file.
Read a dictionary from a file.
3x3 conv op.
Makes an image read from file.
Reads an image from a byte string or image file.
Wrapper around cv2. imwrite that automatically creates directories if they don't exist.
Converts a color image from RGB format to Grayscale.
Converts an RGB image to a RGB image with a black color.
Iterate over the elements of `input` and cast them to `dst_type`.
Checks if a sequence is of the expected type.
Slice a list into chunks of length lens.
Average the values at the last n values in the history Parameters ---------- n : int The number
Scatenates the input according to the given devices.
Return a color value from a string or tuple.
Check if a timer exists and return its time.
Starts the simulation. :returns: None :rtype: None :raises: None
Return the number of seconds since the start of the timer.
Return elapsed time since last check.
Show the flow in a window. :param flow: flow number :param win_name
Make a color wheel from a list of bins.
Calculates the accuracy of a model.
Computes a scatter of inputs and kwargs.
Make the request and return the response.
Returns the JSON representation of the resource.
Returns the contents of the file as a string of text.
This method is called by the AWS API when the request is complete.
Make multiple API requests.
Create a new HTTP request object.
Start all the worker processes.
Normalize a task to make it JSON compatible with ansible v2 Args: task (dict):
Returns the name of a wheel distribution.
Get the basename of the archive.
Add additional requirements to the package metadata.
Create a new Text activity. :param text: :param speak: :param input hints
Create a new activity with a list of suggested actions. :param actions: :param text
Create an attachment activity.
Create a list of attachments.
Create an attachment activity with a content URL.
Sets the telemetry client object.
Reads the specified keys from the container.
Writes changes to the container.
Deletes the given keys from the cosmos db.
Create ansi object from a result dict.
Create a dict from the non-magic attributes of a store item.
Make sure the key is valid.
Create the database and container.
Get or create a database.
Gets or creates a container.
Fills the results from the QNA service into an event object.
Returns a conversation reference from an activity object.
Returns the name of the step at the given index.
Check if the given channel supports any possible suggestions.
Checks if the given channel supports card actions.
Gets the channel ID of the activity.
Returns True if the auth_header is a valid token from an Emulator token.
Create an attachment containing a card.
If the value of the control register is less than the value of the classical register,
Create a copy of this object.
Translates a QASM instruction into a Unicode string.
Returns the assembled code of the executable.
Converts a circuit to a DAG and runs all pass through it.
Apply a pass to a DAG.
Returns a list of all passes in this list.
Return a dictionary of all the passes that should be included in the report.
Factory method for controller factory.
ubase function. Args: theta (numpy.ndarray): A value of the ubase
Get parameters for a single gate.
Computes the rotation matrix of a single gate Parameters ---------- gate : array_like,
Converts a circuit to a DAG circuit.
Exponential fit function Parameters ---------- x : array-like, shape = [n,
Auxiliary function to fit a SMEA model Parameters ---------- x : array-like
Plots the coefficients of a qubit in the same way as the fit_function.
Calculate the mean and std of each RB data.
Plots the model's survival probabilities Parameters ---------- Xdata : list of 2D
Compose a rotation matrix from Yzyz and Yzyz basis.
Translates from Yzy to ZyZ.
Validate input quantum state Parameters ---------- quantum_state : np.array The quantum
Trim the image if it is not in the background.
Given a list of qregs, return the span of the instruction.
Run one cycle of the circuit.
Adds one or more qubits to the circuit.
Return a list of bit ids for the given node.
Processes a single gate.
Process cnot nodes.
Iterate over all Measure objects in the file and apply the operation back to each one.
Process if statement.
Create op class based on input name, params and qargs.
Computes the duration of one or more channels.
Return the start time of a channel.
Return the stop time of a channel.
Returns an iterable of instructions at a given time.
Dumps additional data from original_data to valid_data :param valid_data:
Load additional data from the valid data.
Validate a model instance against its schema :param instance: :return:.
Serialize to a dictionary.
Create a new model instance from a dictionary.
r"""Compute the Fourier transform of N points.
Calculates the chop of an array.
Computes the outer product of two vectors.
Computes the coneurrence of a state matrix.
Calculates the Shannon entropy of a state.
Calculates the mutual information of a state.
Calculates the entanglement of a state.
Calculates the EOF of a qubit state.
Flatten a schedule into a schedule object.
Shift a schedule to a specific time.
Insert a child into a parent schedule.
Append a child schedule to a parent schedule.
u3 gate. Parameters ---------- theta : float angle in radians phi : float angle in radians
Return the current status of this backend.
Starts the simulation for a given number of iterations.
Returns the amount of time remaining in seconds between the current iteration and completed_iter.
Disassemble a Qobj into a set of circuits.
Calculates hamming distance between two strings.
Generates a quaternion from an angle and axis.
Quaternion from Euler angles.
Return a copy of this quaternion with the same number of samples normalized.
Converts the image to a 3D array.
Converts the euler angles in radians to an euler angles in radians.
Takes an array of binary numbers and returns a dictionary where the keys are the number of
Check if the value is a collection.
Check if j is in the correct range.
Checks if a matrix is square.
Test whether ``mat`` is a diagonal matrix.
Test whether ``op`` is a symmetric matrix.
Test if ``mat`` is a Hermitian matrix.
Return ``True`` if ``mat`` is positive-semidefinite.
Test if ``mat`` is an identity matrix.
Test if a matrix is unitary.
Wrapper for _to_choi, _from_operator, _to_choi
Wrapper for _to_superop.
Convert a Kraus operator to a Kraus operator.
Wrapper for _to_choi, _to_choi, _to_cho
Wrapper for _to_ptm.
Converts a string representation of a Kraus operator to a Kraus operator.
Converts a Kraus operator to a Kraus operator Parameters ---------- rep : str
r"""Return data from operator rep.
Converts a 2D numpy array to a 2D operator Parameters ---------- data : 2D
Convert a superop tochoi.
Convertchoi to superoperator.
Compute Choi matrix from kraus matrix Parameters ---------- input_dim : int number of
Computes the kraus of thechoi matrix Parameters ---------- data : list of
Computes the kraus of the stine, given the input and output dimensions
Transforms fromchoi to chirp-to-choi.
Converts a Kraus filter to a stineolatin matrix Parameters ---------- data
Computes the Kraus operator from the input and output dimensions.
Computechoi transformation from Pauli transform Parameters ---------- data : array-like, shape =
Convertchoi to Choi Parameters ---------- data : array-like, shape = input_
Reravels two matrices.
Transforms data from Pauli operator to Hilbert space.
Check that the number of qubits is correct.
Hides the tick lines and labels of the given axis.
Sets the x and y labels for the plot.
Clears the plot.
Adds a list of vectors.
Renders the plot. :param title: The plot title :type title: str :
Plots the front of the sphere.
Renders and shows the plot.
Print the top of the text.
Mid formatted message.
bot of the layer Returns ------- bot_pad : int bot_pad : int bot
Returns the length of the message.
Returns a list of all parameters that can be used in a label instruction.
Returns the label for the given instruction.
Return a LaTeX representation of the symbol.
Add a deprecation filter to the warnings.
Return a dictionary of information about the local hardware on the system.
Check if a host and port are available.
HTML checker for the status of the job variable.
r"""Return the constant of a complex timeseries Parameters ---------- times : np.ndarray A
Calculate the square of times. Parameters ---------- times : np.array Aamp : np.
Computes a triangle of the given times and amp.
Calculates the cosines. Parameters ---------- times : array-like, array-like
Derivative of a gaussian function Parameters ---------- times : numpy.ndarray Parameters ------- times :
Generate a piecewise Gaussian. Parameters ---------- times : np.ndarray Parameters ------- times :
Create a default pass manager.
Generates a default pass manager based on a set of gates.
Checks if the given register is in the register list.
Returns a copy of this instance with its M mirrors reversed.
Returns a copy of this instance with its inverse.
Append an instruction to the stack.
Checks if the number of qubits is the same as the number of qubits in
Check if arguments are valid.
Check if arguments are valid.
Check that all cregs in the rhs are compatible.
Queries the code for the ASM as a string.
Returns the number of gates in this instruction.
Returns the total width of all cregs.
Counts the number of instructions in the instruction table.
Returns a copy of this circuit with each parameter binded to a new value.
Bind a parameter to a value.
Given a layout and a list of gates, return a new layout where each gates
Calculates the distance between all the gates in a layout.
Return the score of the given step.
Returns a dagc circuit object with the same name.
Transform a gate to a layout.
Returns a list of swap gate objects for the given edge.
Iterates over all of the gates in the graph, returning a list of all the
Adds a physical qubit to the ROI.
Add an edge between two qubits.
Generate a subgraph of a set of nodes.
Returns the list of all physical qubits.
Return ``True`` if the graph is weakly connected.
Compute and store the distance matrix.
Calculates the distance between two qubits.
r"""Add a key-value pair to the set of key-value pairs.
Inverse of the instruction.
Iterate over the list of gates and replace them with new if statements.
If `classical` == val, add all the gates.
Subscribes a callback to an event.
Call all registered subscribers for the given event.
Unsubscribes a callback from an event.
Publish an event to the broker.
Initialize the circuit with the given params and qubits.
Defines the circuit breaker.
Returns the number of gates to uncompute.
Calculate the angles between two bloch angles.
Generates a multiplexing circuit.
Returns True if the value is virtual, False otherwise.
Returns a copy of this layout.
Combine this layout with another layout.
Appends a pair of components to the end of the chain.
Insert a schedule at a specific time.
Raises an exception if the given name is not fenced.
Given a list of gates and a list of qregs, return a list of
Generates a random graph and runs the mapper on it.
Group elements by Pauli algebraic notation.
Initialize from a list of labels Parameters ---------- label : str The label of the z-axis
Initialize from a two-dimensional boolean array.
Compute the product of p1 and p2.
Convert to an operator object.
Returns an instruction representation of the circuit.
Update the Z matrix Parameters ---------- z : array-like or list of array-like objects
Updates the x-axis Parameters ---------- x : array-like, shape = (n
Appends one or more paulis to the end of the paulis list.
Removes qubits from the mesh Parameters ---------- indices : list of qubits indices Returns -
Generate a random number of qubits.
Construct a pauli operator from a single pauli symbol Parameters ---------- pauli_label :
Return the measurement outcome of a qubit.
Adds a sample measure for each state in the state vector Parameters ---------- measure_params :
Adds a QAS measurement to the state.
Add a QASM reset to a qubit.
Validates the length of the initial state vector.
Initializes the state vector.
Returns the real and imaginary parts of the state vector.
Make sure that the measurement is valid.
Run a single job.
Validate that this QObject is correctly representable.
Ensure that the unitary shape is correct.
Initializes the unitary matrix.
Returns the unitary array.
Run a single job.
Validate that this QObject is correctly representable.
Check if an object is a bit.
Generates property_set for a DAG.
Returns ``True`` if this interval overlap with the given one.
Shift the interval by a given amount.
Shift the timeseries at a given time. :param time: :param time: :
Return the start time of channels.
Return the stop time of channels.
Returns whether the timeslots are mergeable with another timeslots.
Create a merged collection of timeslots.
Shift the timeslots by a given time.
Report a commit as a comment for a branch.
iplot a state in PauliveC.
Add an rzz gate to the gate list.
Swap two cells.
Create the program graph.
Find next edge in pending_program_edges and return it.
Selects the best remaining HW qubit from the list of available HW qubits
Selects the best remaining HW qubit from the input prog_qubit.
Returns a list of instruction objects.
Inverse of the gate.
Applies the given number of qubits to the next set of qubits.
Applies a cif gate to the data Parameters ---------- classical : str The classical
Tests if the matrix is unitary.
Quaternion conjugate. Returns the conjugate of the array.
Returns a copy of this operator with its transpose applied.
Calculate the power of the 2D array Parameters ---------- n : int The number of dimensions to
Returns a tuple of output_dims and input_dims.
Converts a circuit expression to an operator.
Swap a mapping layer from one map to another.
Separate a bitstring at a given number of creg_sizes.
Return a formatted version of the memory as a list of dictionaries.
Formats a level-level memory as a list of dictionaries.
Format a level 2 memory list.
Format a counts dictionary into a counts dictionary.
Format a state vector as a complex number.
Formats a unitary matrix.
Submit the job to the executor.
Return the current status of the job.
Return whether this interval includes another interval.
Plots a multivector plot of the pauli variables.
Substitute nodes in a DAG.
Returns the k-th number of elements from the n-th element of the array.
Calculates the lexicographical index of a list of numbers.
Returns a list of all unique hardware backends.
Returns the operation operation that was performed on this object.
Generate a constant pulse from duration and amp.
Generate a zero pulse. :param duration: duration number :param name: name of the
Generate a squarepulse of the given duration, amp, period, phase.
Sawtooth sampling. Parameters ---------- duration : int duration : float amp : float phase
Generate a triangle from duration, amp, period, phase, name.
Generate a cosinesine wave. Parameters ---------- duration : int duration : float amp : float
Generate a sinusoidal sampling of the given duration amp and freq.
Generates a gaussian sampling strategy. :param duration: duration in ms :param amp:
Derivative of the gaussian_deriv_pulse.
Return a string representation of the tree.
Given a backend class, return an instance of the backend class.
Removes all named ops with the given name.
Adds a quantum register to the circuit.
Adds a classical register.
Adds a wire to the graph.
Check if the condition is valid.
Returns a list of all bits in the given condition.
Adds an operation node to the MultiGraph.
Applies an operation back to the MultiGraph.
Check the validity of a wire map.
Map a condition from a wire map.
Extends the graph with the contents of the graph.
Checks that the list of wires is valid.
Make map from node topredsucc map.
Calculates the predecessors for each vertex in the input circuit, and returns a
Return a topological ordering of the nodes in the multi graph.
Returns an iterator over all edges in the multi-graph.
Returns a list of all nodes in the multi-graph that do not have a `op
Returns a list of gate nodes.
Returns a list of named nodes in the multi-graph.
Returns the list of two q-gates.
Returns the predecessors of a node.
quantum predecessors of a node.
Return list of ancestors of given node.
Return a list of all successors of the given node.
Removes an operation node from the graph.
Removes all ancestors of a node from the multi-graph.
Removes all descendants of a node from the MultiGraph.
Removes all non ancestors of the given node.
Removes all nodes that are not on or below the given node.
Generate the serial layers of the circuit.
Returns an iterator over all the input_map layers in a multigraph.
Returns an iterator over all nodes on a wire.
Count the number of operations in the operation graph.
A dictionary of all properties in this histogram.
Convenience function to turn a basis set into a tomography basis set.
Applies Pauli-meas-gates operators to the given circuit.
Returns a list of data to run atomography circuit.
Projector a list of operations onto a basis matrix Parameters ---------- op_list : list of
Calculate the linear inverse of a sequence of frequencies and ops Parameters ---------- freqs : list of
Calculates the wizard matrix. Parameters ---------- rho : array-like, shape = (
Calculate Wigner data. Parameters ---------- q_result : array-like, shape =
Measure a single measurement.
A helper function for checking the status of a job.
Monitor a Jupyter notebook or notebook.
Simplify a single u gate.
Iterates over all of the wires in the graph and adds them to the graph.
Create the tabs for the job history page.
r"""Add a crystal gate at the given theta, phi, lam,
Builds a bell circuit.
Transforms a circuit into a Pile circuit.
Get or set the drive channel.
Get the next control channel.
Returns the current measure or raises an error if there is none.
Returns an acquire channel.
Generate n input states from circular matrix.
Removes all logging handlers from the QISkit logger.
Render a hint on the state of a state.
Set input data and call lexer's input method.
Pops the top of the stack.
Push a new lexer into the stack.
Returns the bound method of the given instruction.
Convert a acquire instruction to a Qobj measurement.
Convert a frame change instruction to a QObject.
Convert a persistent value to a QObject.
Convert a drive instruction to a QObject.
Convert a snapshot of a QObject to a QObject.
Updates the annotations of the given Pulse object.
Convert a DAG to a quantum circuit.
Takes a matrix observable and returns a dictionary.
Updates the current symtab.
Verifies that the variable has been declared as a boolean.
Verifies that the list of children of an object is valid.
Verifies that the given bitlist is a gate.
Verifies that the register is valid.
Verify that all the children of the registry are of the same object type.
Returns the position of the first occurrence of a token in the input string.
Set debug value. :param val: :type val: bool :param val: :
Parse raw data and return a QASM object.
Parses the given data and returns the AST as a string.
Parses the input file and returns a QASM object.
add a crz gate at theta.
Computes the basis state.
Computes the elementwise product of the element-wise product of the element-wise
Calculates the purity of a state matrix Parameters ---------- state : array-like,
Given a DAG, generate a property set for each wire.
Runs the tool and removes the nodes from the graph.
Retrieves a backend by name or all backends if name is None.
The shape of the bipartite.
Yield the bit_labels for each register.
Returns the float representation of a regular expression match.
Produce a LaTeX representation of the image.
Returns the number of columns and the width of each image.
Calculate the beam page height and width.
Load a schema from a JSON file.
Load all schemas and validators.
Generate an unitary matrix of dimension dim.
Generate a pegibre matrix with given number of rows and columns.
Generate a random density matrix for Hilbert space.
Generate a random density matrix.
Returns a list of all calls to this function.
Calculates the power of the input and output matrices.
Compose this subsystem with another.
Converts a quantum circuit instruction to a superoperator.
Iterates over the graph and runs the BFS algorithm.
Substitutes each node in the graph.
Defines the definition of the gate.
Checks if the value is of expected type.
Checks the type of the value.
Set the atol parameter.
r"""Check validity of tolerance.
Reshapes the image to match input_dims and output_dims Parameters ---------- input_
Returns the input dimensions.
Returns the output dimensions.
Returns a copy of the Array.
Return n-th power of the sequence.
Automaticize the number of qubits given a number of dimensions and a number of size
Deserializes the given value. :param value: :param attr: :param data
Validate the value before adding it to the list.
Check if the value is a valid type for this field.
Computes the value of func at every point in A Parameters ---------- A : array-
Returns the inverse of this circuit.
Sets the label of this ServicePackageQuotaHistoryResponse.
Test whether the matrix is unitary.
Converts the SDR to an operator object.
Convert this circuit into an instruction.
Initializes the transformer from the given data.
Takes a path to a Python file and creates a Python file for it.
Checks if the given tokens are valid.
Split a string into a list of tokens.
Returns a datetime object for the given date_string.
Checks if the given date_string is a list of strings.
Translates a date string according to the given settings.
Parse the given date_string with the given date_formats.
This is a helper function to convert an exception to a net number Parameters ---------- param1 :
Converts a parameter from an exception to an HTTP request.
Generates a config file from a list of streams.
Return a dictionary of information about the stream.
Log the contents of the stdout and the contents of the stderr.
expands a time by splitting it into a time unit and a multiplier.
Read the configuration from the command line.
Reads the cached options from the node.
Write cached options to file.
Creates a STP file from the data in self.stpd.
Create a schedule from a list of RPS objects.
Returns the ratio of rps at time t.
Execute a shell command.
Decode the monitoring data.
Make points for a given label for a given time series data.
Publish a key-value pair.
Count the number of matched codes.
Stops the pool and waits for it to finish.
Reads a stpd file and stores it in the self.task_queue.
Applies all options that are set in the options dict to the current user.
Configures the application with the given options.
Collect the data from the queue and notify listeners.
Notify listeners of new data.
Discover an UDP port number.
Terminate and kill the subprocess.
Reads the log lines and returns a list of stats objects.
Returns an instance of the specified criterion class.
Parse the XML file and return a list of Config objects.
Create a config file from the startup and sources.
Check for disk usage.
Check if the memory is not too large.
Get the right line.
Add a widget to the info widget list.
Fill the rectangle with prepared lines.
Returns the length of a given line of markup.
Add a widget to the screen.
Make a request to the writer endpoint :param params: :param json: :param http
Loads plugins from config file.
Return plugin of type `plugin_class`.
Returns a list of plugins of the given type.
Collects a file into the build artifacts directory.
Adds an artifact file to the artifact list.
Create a temporary file with the given suffix and prefix.
Loads config from files.
Flushes the config to a file.
Get a list of all options in a section.
Return a list of all sections that start with the given prefix.
Decode and yield statistics from a chunk of JSON.
Prepares the environment to run.
Check for new data and send them to each agent.
Sends monitoring data to all listeners.
Detect configuration options.
Handle some of the items we have in the host map :param host: The host to
Subscribes a polygon from a list of channels.
Starts the event loop and waits until all channels are ready.
Closes the websocket connection and polygon.
Make one API request.
Submit a new order for your account.
Gets the current position of a symbol.
Returns a list of assets.
Returns the value of a key-value pair param_name is the name of the key
Given an object and a key-value pair, return a dictionary of parameters.
Constructs an event logger using a single event_record_callback.
Constructs and returns a JSON event logger.
Read config from file.
Retrieves a pipeline from the pipeline cache.
Returns a list of all pipeline definitions.
Get the next event from a queue.
Execute a pipeline through a queue.
Wait until all processes are running.
Create a ConfigField instance for the given dagster type.
Builds an execution plan from the pipeline definition.
Return the solid with the given name.
Construct the publish command.
Create a new release and commit it.
Wrap `text` in a block and line each line.
Download files from S3.
Upload a file to an S3 bucket.
A context manager for handling user code execution exceptions.
Create a new directory if it doesn't exist.
A context manager to handle user code execution.
Create a context-free log from a run config and a pipeline definition.
Determine if a step should be completed.
Determine whether a step should be skipped.
Returns the transformed values.
Returns the failure data for the step.
Check to see if the dataset value is valid.
Check to see if the config value is a valid table name.
Takes the execution plan and returns a dictionary of solid names to the execution steps.
Returns a dictionary of all parameters that can be passed to the connection.
Creates a new connection from the given connection parameters.
Creates a cursor.
Closes the underlying database connection.
Makes a model from a model_dict.
Converts a list of dictionaries to a list of mdl objects.
Returns the form field to use for the model.
Converts the given value to a ``ModelContainer`` instance.
Apply core filters to the queryset.
Computes the probability that each node is a uniformly distributed matrix of the same size
Compute the ND array of real numbers, given a counts and a list of sizes.
Computes the optimal partition for a list of sizes.
Calculate the inner product of two ACEs.
Initializes the slots with the given seed and hashvalues.
Calculate the number of bytes required to store this seed and length.
Merge another hashable object into this one.
Create a new table containing all possible combinations of MHs.
Return an iterator over the keys that satisfy the minimum hash and size :param minhash:
Calculates the minimum hash value of a sequence of values.
Removes a key from the mapping.
Counts the number of bits in the reg.
Merges other into self.
Clears the register.
Calculates the probability that each item in the array is in the predicted.
Computes the mean map of the predicted values.
Sorts thehashtables according to their values.
Returns all keys whose hash is less than k.
Closes the session and all its keys.
Get user data from jwt token.
Overrides django- social login to add auth process.
Select the most common text from a list of strings.
Parses a scoped selector string.
Parse a statement.
Try to parse a value.
Advance to one line.
Parses a configurable reference from the token stream.
Save the operative config to the output directory.
Ensures that the wrapped function is a function object.
Returns the string representation of the given value, or None if the value isn't a
Clears the global configuration.
Check if a function or class has a parameter.
Return the arg spec from the cache, if it exists.
Given a function and a list of positional arguments, return the names of the positional arguments that
Parses the given configuration file.
Parses a config value.
Recursively iterate over nested values.
Iterates over all of the configuration elements and yields configuration references.
Class decorator to create constants from Enum class.
Returns a list of matches for the given partial selector.
Given a complete selector, return the minimal path.
Formats a sp_search query.
Returns the number of seconds after the last retry.
Validate the value.
Returns a copy of this resource's property description as a dictionary.
Validate and set the value.
Return the things at the given index.
Initialize with a list of things and a list of hosts.
Set default HTTP headers.
Make sure that the host header is present in the request headers.
Get the details of a single thing :param thing_id: The ID of the thing
Post a thing to ioloop.
Delete a thing :param thing_id: ID of the thing to delete :param action
Start the service. :returns: None :rtype: None :raises: None.
Return a dictionary representing the action description.
Called by the thread when the thread is started.
Marks this thing as finished.
Create a dict representation of this event.
Get the IP address of the machine.
Returns a sorted list of IPv4 and IPv6 addresses.
Set a new value for the field and notify of external update.
Notifies of external update of the sensor.
Generates a markdown representation of the thing.
Sets the href prefix of all properties and actions.
Returns a mapping of property names to property descriptions.
Returns a list of descriptions of the actions :param action_name: Name of the action
Returns a list of descriptions of all available events.
Adds a property to the container :returns: None :rtype: None :raises
Removes a property from the container.
Returns the value of the property with the given name.
Returns a mapping of name to value.
Set the value of a property.
Returns the action with the given name and ID.
Adds an event to the event queue.
Add an event to the list of available events.
Performs the action specified by action_name with input.
Removes an action :param action_name: :param action_id: :param
Add a new action to the list of available actions.
Removes a subscriber from the subscriber list.
Add an event subscriber to the list of available events.
Remove an event subscriber from the list of available events.
Notify subscribers that a property has been updated.
Notify subscribers of an action.
Notify subscribers of an event.
Annotate fields with annotations.
Perform an update on the model, returning the number of rows updated.
Insert new record.
Insert a new record and get it from the database.
Builds an insert compiler for the given rows.
Checks if the field is a magical field.
Sends signals for model creation and update.
Sends signals for a model to be deleted.
Returns a copy of the object's value if it exists, otherwise a new copy of
Returns the SQL portion of the expression.
Return a clone of the object that is the same object as the original one.
Add a join condition to the query.
Determines if a field is a hstore field.
Create a new constraint that checks whether the given field is allowed to store the given key.
Renames a table that has a required field.
Drops a field from a table if it does not exist.
Generate a constraint name for a given table and field.
Creates the sql statement for the given model and schema_editor.
Get the backend base class.
Make sure the database exists.
Prepare value for database storage.
Formats the return from the database.
Returns a list of SQL statements to insert into the database.
Override the default behavior of an Insert or Update operation.
Return an SQL statement that inserts and updates the rows in the database.
Return the SQL statement that would be executed when an insert statement was executed.
Get model field from field name.
Formats the field name.
Formats the value of a model field.
Create a unique hstore field for a given model and field with a given set of keys
Rename the unique constraint names in old_table_name to new_field.
Drops the hstore unique constraint for a given field and keys.
Generate a unique constraint name for a given table and field.
Iterate over the uniqueness keys of a field.
Add a condition to the list of conditions.
Returns the SQL portion of the query with any additional parameters added.
Calculates the tdist95conf level for a given dataframe.
Calculates the variance of the Freedom between two samples.
Calculates the tscore between two samples.
Determine if two samples are significant.
Given a list of nodes, return the topologically sorted list of nodes.
Generates n-queens of a given number of queens.
Selects a random part of the board.
Generate a random playout from the given board.
Given a list of benchmark functions, remove any that are less than base_version.
Given a benchmark name and a list of benchmarks, expand the benchmark names so that each
Generate a list of benchmarks.
Returns the domain of the curve.
Fetch posts of given category.
Yields all posts from raw_posts dict.
Retrieves the details of a specific user.
Fetch a category's items from the API Args: category (str): category to fetch
Fetches items from category.
Setup the command parser.
Fetch bug from category :param category: category to fetch from :param from_date:
This method returns a paginated list of bug objects from a given date.
Get comments for one or more bug_ids :param bug_ids: A list of
Returns a list of bug ids that have been logged in.
This method returns a list of attachments attached to bug_ids :param bug_ids:
Fetch merge requests from Gitlab server.
Returns a list of merges in the Gitlab server.
Merge a merge into a repository.
Merge the versions of a merge into a single page.
Merge a version of a merge into a specific version.
Fetches all of the notes for a given item.
Fetches a list of items of type item_type from Gitlab server.
Fetches all the notes that are associated with a given item.
Calculates the amount of time to reset when rate limit is exceeded.
Iterate over items in a repository.
Initializes a new rate limit on a given repository.
Setup the command parser.
Get latest category message from specified date :param category: category name :param from_date
Get the metadata id for a given item.
Returns the number of members in a conversation.
Retrieves information about a given channel.
Retrieves information about a specific user.
Setup the command parser.
Return the timestamp of the last metadata item that has been updated.
Parse a buglist from a CSV file.
Yield bug objects from raw XML.
Logout and close the http session.
Gets the XML metadata for a bug.
Call the buglist API.
Calls the Keen IO API for the given bug_ids.
This method returns the status of a bug.
Fetch events for a given category :param category: The category to fetch :param from_
Fetch events for a given category.
Get events of a group :param group: The group to retrieve :param from_date
Get all comments for a given group and event.
Yields all revents for a given group and event.
Fetches the html question from Keen IO.
Get comments for a question.
Build question object from html data.
Gets the API and returns a generator.
Get the html of a question :param question_id: :param page: :param
Get the comments of a post.
Parses the question container.
Returns the number of html pages.
Parses the user_info element.
Fetches items from a category.
Returns a list of all of the user's reaction objects.
Fetches the gerritates from a given date.
Returns the Gerrit API version.
Get user's favorites :param last_item: :param filter: :param
Retrieve the next item to retrieve from a group.
Execute a command from the archive.
Execute a command from the remote shell.
Setup the command parser.
Retrieves the data for an issue given its ID :param issue_id: ID of
Fetches attachments for an issue.
Fetches messages from an issue.
Retrieves the activities for a given issue.
Fetches the user data for a user identified by tag_type and user_link.
Get a user from the server :param user_name: User name :type user_
Gets the details of an existing issue :param issue_id: ID of the issue
Gets a collection of items from an issue.
Yield items from given path.
Get the user's subscriptions :param per_page: The number of subscriptions to fetch
Find group id of current user.
Tries to fetch the given url with the given payload :param url: url to fetch
Setup the command parser.
Finds all backends in a given package.
Fetch items from archive :param from_archive: :return:.
Filter the items based on their classified fields.
Parse the command line arguments.
Adds the basic_auth and token_auth arguments to the parser.
Add the command line options for the archive operation.
Adds the output command line options to the parser.
Main entry point for the script.
Initialize archive manager.
Returns the timestamp at which metadata was updated.
Yields messages from a MBox file.
Fetches and parses messages from one of the m boxes.
Copies all the files in the mbox into a temporary file and returns the path
Validate that the message is correctly representable.
Convert a cased message to a dictionary.
Reads and returns a Message object for the given key.
Fetches items from the repository.
Parse git log from file.
Sets up git path based on command line arguments.
Setup the command parser.
Yield all the lines from the stream.
Clone a URI into a new working directory.
Counts the number of objects in the repository.
Check to see if the repo is already up-to-date.
Update git repository.
Synchronize local changes to remote packs.
Read commits from a pack file.
Recursively update a list of references.
Return a list of gitref objects.
Update or delete a ref in the repository.
Executes a notebook command.
Reads the stderr of the process.
Executes the given command and returns a list of error codes.
Fetch tweets of a category.
Setup the command parser.
Override default fetch method to use category_hits.
Fetch hits for given category.
Parse HIT raw response.
Given a list of keywords, return the hits found on Google's API.
Return the timestamp at which metadata was updated.
Get category from metadata item.
Fetch pull requests for a given date range.
Fetches repo info from API.
Get a list of reaction objects for a given issue comment.
Get the requested reviewers for a pull request.
Get a list of pull commits.
Get a list of review comment reactions.
get user by login.
Returns a list of all reactions for a given issue.
Returns a list of issues that match the given date range.
Pulls issues from the repository.
Pulls the requested reviewers for a project.
Fetches all commits for a given project.
Pull review comment reactions.
Get a user by login.
Gets the list of organizations associated with a given login.
Gets the number of tokens to return for a given rate limit.
Returns a list of tokens rate limits.
Sets the current API token to the best available one.
Return True if we need to check the number of tokens.
Updates the current rate limit.
Create a new metadata record for the given origin, backend name, and backend version.
Stores the payload in the archive table.
Retrieves an archive.
Create a new archive from the given archive path.
Verifies that the archive path is correct.
Loads the metadata from the archive file.
Return the number of rows in a table.
Create the archive.
Remove archive from path :param archive_path: path to archive :type archive_path
Searches for archived archive files.
Search all files in the working directory.
Generate a range of months between two dates.
Removes illegal XML characters from raw_xml.
Yields issues from raw_json.
Returns a list of issues that have been updated since the given date.
Gets the details of an existing issue.
Returns the user object with the specified ID.
Calls the given resource with the given params :param resource: :param params: :
Fetch docker hub data.
Fetches items from repository.
Fetches a repository for a given owner and repository name :param owner: The owner of
Given a list of fields, filter any ones that are not present in the custom_fields
Yields issues from raw page.
Returns an iterator over the issues that match the given date range.
Get issues for a given date.
Returns a list of comments for the given issue.
Returns a list of all available fields.
Override fetch method to use category_build instead of category_build.
Get the builds for a given job name.
Given a raw page, yield all the questions.
Returns a generator of questions from a given date :param from_date: The date to
Setup the parser for the backend command.
Fetches page-reviews for a given category.
Returns the maximum date a review was made.
Returns a list of pages.
Call get_pages endpoint :param namespace: namespace to retrieve :type namespace: str :
Get recent pages :param namespaces: list of namespaces :type namespaces: list :param rc
Yields messages from a JSON formatted string.
Given a message and a list of chats, filter out those that are in the given
Gets all updates available on your account.
Fetches items from a category.
Add metadata to item.
Tries to parse the body of the article.
Fetch data from remote or from archive.
Fetches the given article.
Fetch a nnttpclient object from the remote server :param method: nnttp
Fetch data from archive :param method: :param args: :param method: :param
Creates an http session.
Sets up the rate limit header, sleep_for_rate, and rate_limit_
If rate limit is exceeded, sleep until rate limit is reached.
Updates self.rate_limit and self.limit_reset_ts.
Parse a supybot log file.
Return a list of Supybot archives starting from the given date.
Returns a list of all Supybot archive location.
Parse a supybot stream.
Fetch the items of a category :param category: The category to fetch :type category:
Parse the topics page and return a list of topics id's.
Get details on a specific topic Args: topic_id (str): The ID of the
Post a given post.
Fetch tasks from category :param category: category to fetch :type category: str :param
Yields tasks from a JSON formatted string.
Parse a JSON-encoded list of users.
Returns a generator of all tasks that have been modified since the given `from_date`
Retrieves transactions for one or more PIDs.
Get a list of phids from phab.
Get phids for one or more phids :param phids: phids to filter
Make API call :param method: :param params: :param params: :return:
Get metadata id from metadata item.
Given a JSON summary, parse it into a list of contents.
Returns the list of contents for a given date range :param from_date: start date
Returns historical content. :param content_id: :param version: :param content_
Parses the result of the measurement.
Given a fully qualified URL, return a fully qualified URL with the capabilities.
Read the contents of an URL.
Read a string as an etree element.
Parses the result string and creates a measurement timeseries object.
Builds the url from the url_query_string and the path.
Construct a gml schema from a list of elements.
Constructs the URL for a describefile of a given type and version.
Execute a complex data input with reference.
Gets the movie list available on the current user.
Gets the TV list from the API.
Gets information about the item identified by the id path.
Gets the alternative titles for this account.
Gets a list of users.
Gets the external_ids for the current user.
Gets the keywords for the current user.
Gets a list of user's recommendations.
Returns a list of release dates.
Gets a list of releases available to the authenticated user.
Gets the translations for the current user.
Gets the similar string to the id of the current user.
Gets the details of a user.
Gets the upcoming status of the current user.
Gets the currently playing video.
Gets data from API and stores it as a dictionary.
Gets the top-rated information of the current user.
Gets the account states for this user.
This API endpoint allows you to change the rating of a video.
Get information about a movie.
Gets the Tvlogin details for a user.
Gets information for a resource.
Gets a list of objects.
Retrieves information about the current session.
Gets the watchlist for this user.
Gets a new token.
Gets the access token from the API and validates it with a login token.
Gets a new session.
Get a new guest session.
Returns a list of guests rated.
Gets the status of a specific item.
Creates a list. :param kwargs: :return:.
Removes an item from the session.
Clears the list of items associated with the current user.
Gets the content rating for a media element.
Gets a list of similar objects.
Gets the details of a particular air.
Returns information about a particular season.
Gets the current season number of a series.
Gets the series's external ids.
Gets information about a particular season and episode number.
Gets the season and episode number of a series.
Gets the series's season number and episode number from their external identifiers.
Set self attributes to values.
Gets a collection. :param kwargs: :param kwargs: :return:.
Gets the company details for the current user.
Gets a specific keyword from the API.
Gets multiple objects from the API.
Normalize text. Returns a list of text tokens.
Given a list of n-grams, return the count of the n-grams
Return a cooked set of n-grams from a reference.
Calculates the erfcc of x.
Return a list of aligned source and target blocks.
Generator yielding all descriptor objects in a module.
Registers objects from JSON data.
Register a descriptor with this registry.
Write string `s` to file `file`.
Returns True if `desc` is a descriptor class.
Returns the JSON representation of the resource.
Return the current coordinate of the cell :returns: the coordinate of the cell :rtype
Calculate the atomic sphericity of an atom i.
A list of all surface area elements.
Creates a molecule from a molecule object.
Deserialize a list of descriptor objects from JSON.
Fill missing values with NaNs.
Drops any missing values from this object.
Returns a tuple of the keys and values of the dict.
Return a copy of this object as a dictionary.
Returns the name of the column.
Print a progress message.
Displays a progress message.
Convenience function to log an error and exit.
Get a random file from a temporary directory.
Set or delete a temporary file.
Clean up temporary files.
Return a fixed path from the path.
Get the list of parameters to use for a given method.
Merge any legal parameters in the opt and the rest of the parameter list.
Add command line options.
Terminate all processes in the queue.
Add a task to the queue.
Wait for all worker threads to finish.
Update the number of processed tasks.
Get s3 keys from environment variables.
Get the access_key and secret_key from the command line options.
Get the s3 keys from the s3cfg file.
Initializes the s3 keys from the command line or s3cfg file.
Connect to S3.
Walk a directory tree and return a list of absolute file paths.
Expand a list of S3 source strings into a list of strings.
Upload a single file to S3.
Put multiple files together.
Create a new S3 bucket.
Update the permissions of an object.
Print files from S3.
Download a single file from S3.
Get a set of files from a source directory.
Copies a single file from one place to another.
Copies files from one path to another.
Delete a set of files from an S3 source.
Recursively walk a directory and return a list of relative paths.
Do a sync of the source directory to the target directory.
Calculate the md5 hash of a file.
Returns the MD5 hash of the file.
Create the target directory if it does not exist.
Check if the remote key is in the local cache.
Return True if path matches the filter path.
Performs an s3walk on the specified S3 URL.
Check if object should be included in the output list.
Get the permissions of a file.
Look up an object from S3.
Read a chunk of data from a file.
Verifies the size of the downloaded file.
Writes a chunk of data to the file at `target` at `pos`.
Run a single command.
Check if format is valid.
List available buckets and their contents.
Parse arguments and call the s3handler method to create a bucket.
Handler for put_files.
Call the s3handler for the specified arguments.
Cats a file from s3 :param args: The list of arguments to pass to
Handle sync files.
Copies files from one s3 location to another.
Copies files from one s3 location to another.
Delete a file from s3 :param args: The arguments to delete :type args:
S3 handler size check. :param args: :param size: :return:.
Calculate total size. :param args: :return:.
Match date.
If the value matches a time, replace it with the current time.
Match delta value.
Check if value is a dict.
Get a session from the hub :param sid: The session id :type sid: str
Pushes data to all registered callbacks.
Returns the private key as a string.
This function is called when an exception occurs during the execution of a job.
Create a stream handler and add a formatter to the log.
Get request object.
Report a message.
Create the log file for the agent.
Builds person data from request object.
Add data to the context to be sent to AWS Lambda.
Adds the request data to the data dictionary.
Returns True if frame is local, False otherwise.
Builds the request data from the request object.
Builds a dictionary of data to be sent to the server.
Builds a payload from the data.
The main entry point of rollbar.
Compose a pair of characters.
Decomposes a Unicode letter into its Unicode representation.
Check if a string has a Jong.
Attach a josa letter to a word.
Check if node is inside an except handler.
Return ``True`` if the node is inside a lambda.
Iterate over all elements of the given node.
Check if an except statement exists.
Check if the given node is a super node.
Check if the given node is an error node.
Check if the function is a decorator.
Return `True` if `node` is an ancestor of `frame`.
Return the parent of the given node.
Yields all string fields from the given format string.
Get the argument from a call node.
Return `True` if `node` is a standard exception.
Check if a function is decorated with a property.
Check if func is decorated with one of the qnames.
Finds a try except wrapper node.
Check if the given node is a from-fallback block.
Return a list of exception handlers for the given node.
Return ``True`` if the given node should ignore the given exception.
Check if a class is abstract.
Return the infer value for the given node.
Return the type of the variable at the given node.
Return `True` if the evaluation is enabled for the given node.
Return a list of the qualified names of a module.
Given an import node and a module name, get the absolute name of the module.
Return a pretty formatted representation of a tree.
Generate a dependency graph.
Check if imported module has been imported.
Check if imported module exists.
Check if the node is an import node.
Record the imported module name at the top of the stack.
Checks whether the imported module is relative to the given imported module.
Adds an imported module to the list of imported modules.
Check if the module is in the deprecated_modules list.
Check if module path is in preferred_modules.
Reports the external dependencies of this component.
Return a filtered graph of packages that depend on internal or internal packages.
Get the default options from the rc file.
Insert the default options into sys.argv.
Determine whether the given node is visible or not.
Return a pair of e_method and l_method for the given node.
Try to find a callback for this node.
Check the consistency of the messages.
Check if function call is valid.
Check that the node is a datetime.
Check whether the given node is an open mode.
Adds a message to the message list.
Returns the title for a given node.
Sets up the default options.
Check if given node is a builtin or not.
add class node to classdiagram.
Iterate over all ancestors of the given node.
Iterate over all nodes that are associated with the given class.
Recursively extracts classes from a node.
Return a tuple containing the packages and class diagram that are loaded by the given node.
Add import from dependant node to pkgdiagram.
Generate a class diagram of the given class.
Generate diagrams for all classes.
Check if owner is allowed to be ignored.
Return a list of possible node names that match the given attribute name.
Check if owner is a member of the class.
Checks if the given node has a parent of the given type.
Checks if a name is used in a variadic definition.
Checks whether a node has no context for a variadic name.
Return `node`s representation as assignment.
Check if function is uninferable.
For each member type, add a message for each member type.
Iterate over the interfaces of the given node.
Generates a project from a list of files.
Set `uid` and `id` attribute on package node.
Set `node.uid` and `node.type` to list.
Set value of variable name in node.name.
Handle AssignAttributeType nodes.
Imports all modules in the given node.
Check if imported module is relative to context_file and if so try to import it.
Check if a module is in the project directory :param context_name: :param mod
Make sure that the module we are importing is importable.
Registers the checker classes.
Handle messages from the client.
Writes the given message to the screen.
Writes graph attributes to the stream.
Writes an edge to the stream.
Process a non-raw string token.
Write one section.
Compute the section number and format all children.
Write table content in given layout.
Adds arenamed message :param old_id: :param new_symbol:
Register messages from a checker.
Add a message to the message registry.
Check if a message with the given symbol is already in use.
Raise an invalid duplicate symbol.
Raise an exception if the two messages have the same id.
Generate the documentation for the builder.
Returns the number of CPUs on the system.
Processes the messages stats and adds them to the parent table.
Context manager for fix_import_path.
Load dynamic plugin modules.
Loads plugin configuration from dynamic modules.
Set the value of an option.
Register a checker to the checker registry.
Enable or disable 3 porting mode.
Returns a list of checkers that are not part of this checker.
Returns a list of all the checkers that are not a member of.
Prepares a list of checkers based on the configuration.
Expand a list of modules to include those in the black list.
Set current module name and file name.
Check the syntax of a module.
Print the evaluation result to the screen.
Print help message and exit.
Print the full documentation and exit.
List all available messages.
Print all checker groups and exit.
Returns a normalized version of the given text.
Get the module and frameid of a node.
Safely decode a line.
Check if file path matches a pattern in the blacklist.
Register all plugins in the given directory.
Convert a string to a line comment.
Format an option value.
Formats a section from INI stream.
Format a list of options in INI format.
Inserts a child at the given index.
Adds a child node to the vnode.
Returns the list of parents of this node.
Formats the data using the given layout and stream.
Compute the content of a table.
Compute the content of a layout.
Collect the block lines.
If we've ignored a message, add it to the ignore list.
Register a report with a checker.
Add new stats to self.stats.
Get the name of a setters property node.
Returns the setters property of the given node.
Check if return_node contains any returns.
Return a list of possible exception types.
Processes the messages managed by the given module.
Process a module and check its encoding.
Parse and fix up the comments.
Check if `name` is from a future import.
Return `True` if `stmt` is in `for` branch.
Return the overridden method of the given name.
Get extra info about the infered module.
Return True if name_node is assigned to a local variable.
Mark a node as consumed.
Check if a function is in the upper function scope.
Check if the given node is a starred or not.
Check if the class definitions are valid.
Recursively get all packages in a directory.
Copy distribution archive to the install directory.
Report similarities to the old stats.
Run a simulation from the command line.
Add a stream to the list of linesets.
Computes the set of simulated sequences.
Displays the list of simulations.
Find the common part of two strings.
Iterate over all possible simulations.
Iterate over the lines that have been striped at start_at.
Return a dict mapping line numbers to line numbers.
Check if attr_name of node_a is equal to attr_name of node_
Determine if the original and overridden parameters are the same.
Try to infer the return value of a function call.
Add the given node to the list of nodes that are accessed by this scope.
Check class definition and its bases.
Check whether the given node is an consistent MRO.
Checks that all of the base classes are valid.
leave a function definition.
Check whether the given node is in any of the slots.
Check if function or attribute name could be used.
Check if the first node is a mandatory method parameter.
Check if the body israising.
Check if the exception context is not None.
Displays the report in the given layout.
Check if the given node is a typing named tuple.
Check if the given node is an enum class.
Check if the given node is a dataclass.
Check if class has too many parents and if it has too many attributes.
leave a class definition.
if `node` is an if statement.
Check if the number of boolean expressions is greater than the maximum allowed.
Checks that the docstring of the given node is valid.
Formats the record using the provided template.
Check if the actual element of the node is in the list of elements.
Checks if the basic block has only one statement.
Check if a stopiteration occurs inside a generator.
Check if an exception is inherited from a stopiteration.
Check if the nested blocks are empty.
Return a mapping of instance types to lists of instance types.
Check that the node has no more than one instance of the same class.
Return `True` if the given node is an and or an `False` otherwise.
Check if we have consistent returns.
Check if graphviz is available.
Create a CWL representation of a CWL project.
Writes packages to the printer.
Writes a list of diagram objects to the printer.
Sets the printer to file_name Parameters ---------- file_name : str Name of file to
Create a printer for the graph and save it to file_name.
Return whether or not this package may be emitted.
Format the error message.
Returns a dictionary of environment variables to pass to subprocess.get_env.
Find all cycles in the graph.
Generates a graph from an input file.
Pretty-print a section.
Disable a managed message.
Enable or disable a managed message.
Return a list of all message definitions that match the given msgid.
Check if a message is enabled.
Add a message to the model :param msg_descr: :param line: :param
Get the length of indentation.
Return a hint for bad_position in bar_positions.
Return the indentation of the token at the given index.
Handle a line start.
Gets the valid indentation at the given index.
Return start of line, start of line, end of line, or end of line.
Raises _continuation_ inside_b bracket.
Push a token onto the stack.
Add a new line to the message list.
Check for a type annotation at the given position.
Check whether the token at index i is a must or not.
Check if i is surrounded by a space.
Compute the line number of the default statement.
Check multi-line statement.
Check that the provided string has the same indentation level as expected.
Check if the given node is in an iterator context.
Check if the given node is a conditional import.
Check if the name is a function or function name.
Infer subscript if it is an instance of a subscript.
Check if attribute is an instance or instance attribute.
Return `node`s value as raise value.
Return the absolute path to the module containing pylintrc.
Validate that the value is a valid option in the optdict.
Registers an option provider.
Callback to set the provider option.
Sets the value of an option in the global variable.
Generates a config from the provider's options.
Load the config file into the global config dictionary.
Load the configuration from the command line.
Add an option group for the help section.
Set the output level of the command line parser.
Load the default values for all the options.
Get the attribute name of an option.
Returns the first option of the option list.
Iterate over all the options in a section.
Check if func is a method call.
Check if the given node is a string representation of a complex object.
Imports all logging modules.
Add names to _from_imports.
Add names to _logging_names.
Check format string.
Check if the given node is inside a for loop.
Return the last node in the list of break_node's parents.
Return True if the loop contains only one loop.
Returns a set of property classes and a set of property names.
Determine function name type.
Generate a human readable report of the parsed stats of a given node type.
Return `True` if the call is a positional or keyword call.
Check if `node` is a starred statement.
Check if function call is abstract.
Check if the else statement is on a loop.
Check if the given node is in the loop or not.
Initializes the linter.
Return `node`s representation as `expr` or `node`s representation as `
Check if each element of the test is not empty.
Check if keys are defined in dict.
Check if node is not in breaker_classes.
Check if function argument is a built-in function.
Check if the given node has a valid docstring.
Check if the given literal is a comparison of the given node.
Create a subgraph from a node and add it to the graph.
Parse a subgraph.
A module is defined as a path graph.
Walk an AST tree.
Add a relationship to the relationship dictionary.
Get a relationship of a given object and its type from_object :param from_object
Return a sorted list of attributes for the given node.
Add an object to this diagram.
Return a list of class names for the given nodes.
A list of classes in this node.
Get a class by its name.
Returns a list of all the modules in the code object.
Return the module with the given name.
Get a module by its name.
Add `from_module` to node's depends attribute.
Delete the object from the cache.
Returns a query for the current instance of the model.
Get a user from the database.
Get an access token.
Store a token in the session.
Stores a grant in the database.
Get client by code.
Prepares a request object for sending.
Initialize the extension for the given app.
Create a remote app and add it to the registry.
Redirect to authorize url with access token.
Handle an OAuth1 response.
Handles the response of the OAuth2 call.
Handle the authorized response.
Hashes a token.
Make a client from an API token.
Make an OAuth client.
Context manager to temporarily restore the original transport on exit.
Try to confirm the authorization request.
Get the client secret for a given request.
Get the request token secret for a token.
Get the secret from the access token.
Returns a list of realms for the given token.
Returns the redirect uri for the given token and request token.
Get RSA key from client key.
Validate a client key.
Validate a request token.
Validate an access token.
Validate the given timestamp and nonce.
Validate the redirect uri.
Validates that the given token is valid for the given uri and token.
Validate that the verification token is valid for the given client.
Verifies that the token is valid for the request.
Verifies that the given token is valid for the given realms.
Create an authorization response.
Returns True if the client is authenticated, False otherwise.
Authenticate a client using its ID.
Get the original scopes from the refresh token.
Given a refresh token and a refresh token, determine if the scopes match.
Return the default redirect uri for a client.
Gets the default scopes for a given client.
Invalidates an authorization grant by its code.
Saves an authorization code.
Saves a new Bearer token.
Validate a Bearer token.
Validate a client id.
Checks whether the grant is valid for the given code.
Validate the grant type.
Validate a refresh token.
Validates that the response type is one of the allowed response types.
Validate a list of scopes for a given client.
Validate the username and password.
Revokes the given token.
Update data from qq api request.
Recursively converts all keys in a dictionary to strings.
Change the auth header of the uri and headers.
Registers a user to an oauth session.
Create an oauth session.
Extracts parameters from a request object.
Convert text to bytes.
Decode a base64 string.
Create a response object from headers body and status code.
Get the cached clients.
Adds a remote app object to the context.
Create a remote application and add it to the registry.
Check if the certificate public key is valid.
Make sure all keys are all in common format.
Check if we need to call load_privatekey in each iteration.
Check if the private key callback was successful.
Check whether load_privatekey_callback is called with correct type.
Check for revoked URLs.
Check for revoked X509 certificate revoked.
Create a certificate request.
Create a certificate object.
Use the certificate chain file.
Use a certificate as a SSL context.
Sets the context to use a X509 certificate.
Adds extra chain cert to the certificate list.
Passes through to ssl_ctx_use_privatekey_file to ensure that the
Use a private key.
Load the client CA from a file.
Sets the verification depth. :param int depth: The number of verification depth :param int
Load a temporary copy of the SSL context.
Set list of cipher names for the current SSL context.
Set the client CA list.
Adds a client CA to the certificate chain.
Sets the TLS use of the TTL session. :param profiles: :param profiles:
Sets the callback function to use for NSN Select.
Set the list of ALPN extensions.
Set the ALPN select callback.
Set the callback function for the SSL context.
Set SSL context.
Return the name of the server.
Sets thetlsext host name.
Receive data from the socket.
Read data from a Bio buffer.
Returns True if we can perform a renegotiate request, False otherwise.
Shut down the SSL connection.
Return a list of all configured cipher strings.
Return a list of client CA names.
Sets the SSL shutdown state.
Return a random server.
Return a random client.
Return the master key for the current SSL session.
Export a keying material.
Return an SSL session object.
Return the name of the current cipher.
Return the number of bits in the current cipher object.
Return the current cipher version.
Returns the protocol version string.
Return the next Negotiated message.
Set the list of ALPN extensions.
Return the underlying ALPN_proto_negotiated message.
Convert a bio to a string.
Set an AS1 time value.
Convert an ASN1 timestamp to a Python string.
Get an elliptic curve by name.
Dump a public key as a string.
Load a public key from a buffer.
Sign data with a private key.
Verifies whether signature is correct for data.
Dumps certificate list to a memory buffer.
Convert the EPI key to a cryptography key.
Check if the key is valid.
Return the set of ellipsoids from the builtin curves.
Loads the list of ellipsoids from the specified lib file.
Convert the curve to an EC key.
Returns a string of the name of the x509 object.
Returns a list of components of this name.
Returns the short name of the extension.
Returns the data for this certificate as a buffer.
Convert the request object to a cryptography object.
Set the certificate's public key.
Return the public key for this x509 object.
Returns the name of the subject for this certificate.
Add a list of extensions to the x509 object.
Returns a list of x509 extensions.
Verifies that the supplied key is valid.
Convert x509 to cryptography.
Set the version for this x509 object.
Return the public key for this x509 object.
Set the public key for this x509 object.
Sign a x509 object with a private key.
Given a name, return the digest as a string.
Set the serial number of the certificate.
Returns the serial number of the x509 object.
Set the amount of notafter seconds since the beginning of the x509 object.
Make sure the number of not before x509_notbefore is greater than or equal to
Returns ``True`` if this request has expired.
Get the name of the issuer certificate.
Set the issuer name and invalidator.
Get the subject name.
Set the subject for this certificate.
Add one or more extensions to the x509 object.
Return the extension at the given index.
Add a certificate to the store.
Add a Crl object to the x509_store.
Set the time for this certificate.
Initializes the x509_store_ctx.
Return an x509StoreContextError.
Verifies the certificate against the certificate store.
Set the serial number of the certificate.
Returns the serial number of the revoked certificate.
Set the reason for this certificate.
Get the reason for the revoked extensions.
Set the revocation date for the certificate.
Convert to a `certificaterevocationList` object.
Return a tuple of all revoked X509 objects.
Return the name of the certificate's issuer.
Sign the x509 object with a key.
Exports an X509 object to a key.
Returns the string representation of the type of the object.
Set the list of CA certificates.
Sign a digest with a private key.
Verifies whether the given key is valid.
Returns a b64_encoded string.
Get the public key from the key store.
Set a key on the keychain.
Return an exception of the given type from the queue.
Returns a dictionary of metadata for a service.
Returns an iterator over all issues found on the board.
Builds annotations from card json data.
Returns a generator of all boards.
Returns a list of lists for a given board.
Returns a generator of cards.
Returns comments for a given card.
Builds the URL to the API endpoint.
Private method that returns a JSON object with all the links found in the url.
Convert a string field to a dictionary.
Get a list of issues matching the query.
Get a list of all pull requests that have a given tag.
Aggregate all issues for all the targets in the section main_section.
Get a value from the main config, or return default if it doesn't exist.
Determine if the issue should be included based on the config.
Make a table from a grid of lists.
Run an oracle command and return the output.
Returns the int value of the given option in the given section.
Pull data from the persistent store.
Get data from url.
Get a collection of resources.
Parse a sprint string into a dictionary.
Get credentials from file.
P-values correction function. Parameters ---------- pvals : array-like, shape = (
Compute the mean and standard deviation of each element of a 2D array Parameters ---------- data2
Adjusts the spines for the plot.
Setup the argument parser.
Adds the command line options for the enrichr operation.
Compute GSEA p-value. Parameters ---------- es : array-like, shape =
Returns a pandas.DataFrame of the available mart names and descriptions.
Return a dataframe of the available datasets.
Returns a dataframe of the available attributes in the dataset.
Get filters from dataset.
Sets the number of available cores.
Loads a GMT file for a list of genes.
Get list of libraries available in database.
Downloads libraries from enrichr.
Compute the heat matrix. Parameters ---------- df : pandas.DataFrame Parameters ---------- classes : list of
Loads the data from the file specified by cls_vec.
Runs permutation on each of the runs in the input dataframe Parameters ---------- df : pandas.
Saves the results to a CSV file.
Parses the enrichr library and returns a list of GeneSet objects.
Sends a list of genes to the Keen IO API.
Check if a user is in one of the user's genes.
Create a cube layer from a script.
Creates a cylinder with a given radius, diameter, subdivisions, and
Generate a set of cube hires.
Get the values for a given color.
Check if a variable is a list.
Make a list out of a variable.
Adds a filter script to the script's filters list.
Merge a vcf script into a single vcf file.
Splitsvert script on the specified number of faces.
Translates a value from one value to another.
Rotate a script by a given number of degrees.
Scales the image using the provided script.
Calculates the Covariance matrix of a Covariance matrix.
Wrap `script` into a cylinder function.
Convert a deform curve into a curve function Parameters ---------- script : str The script to be
Convert a VCF script to a.tex file.
Writes a mesh to the FCS file as an XML filter file.
Voronoi a script.
Applies a script to all vertices, faces, andverts.
Writes the given script to the script file with the given min_quality and max_
Calculate the voxels of a cylindrical mesh Parameters ---------- script : str
Wrapper for the spherical_vert function.
Renames a script to a new layer.
Change a script to a new layer :param script: :param layer_num: :
Dumps a copy of the filter script at layer_num.
Delete a script lower than the current layer.
Create a layer from input file or list of input files.
Adds a new layer to the stack.
Saves the given script to the given file.
Filter a script by given sidedim and textdim Parameters ---------- script : str \t
Measure the topology of the input script :param script: the script to measure :type script
Parse the hausdorff log file.
mp_atan2 is the most suitable one to pass to mp_atan2
Computes the cross product of two arrays.
Computes the dot product of two vectors.
Run a bcbio depth script :param script: script to run :param iterations:
Sort a mesh by vertices, y-co, z-co.
Run a measure script and store the result in a hashable object Parameters ---------- fbasename :
Lower case of file extension.
Get upload set configuration.
Returns the URL for the given file name.
Path to a file in the target folder.
Check whether a given extension is allowed.
Given a path to a target folder and a file name, return the name of the file
Extract the vprof version from the given file.
Remove duplicates from a list of objects.
Returns the difference in objects between two objects.
Format the number of objects to be printed.
Returns the current memory usage of the trace.
The list of code events that have been generated.
Returns the number of objects overhead in the process.
Compute the amount of memory overhead in the process's memory.
Run the profile module for the run object.
Profile a module.
The profile function that runs the code in the run_object module.
Run the profile.
Return a set of all module names in a package.
Run a function in separate process and return its output.
Return the type of the run object.
Initializes the profile module for the given run object.
Initialize profile and run args.
Initializes the profile function for the run object.
Replace run_object with a list of arguments to pass to sys.argv.
Samples the process from the given frame.
Insert a stack of calls into a call tree.
Fill the sample count of the node with the number of children.
Recursively formats the tree.
Return a call tree as a dictionary.
Profile a package using statprofiler.
Profile a module.
Method to profile the execution of the profile.
Transform profile statistics to color tuples.
Returns profile information for the profile in package form.
Run profile module and return profile data.
A profile function that runs the object.
Show the guestbook.
Add entry to database.
Starts the profiler. :param host: :param port: :param profiler_stats
Returns the content and the path of the profile html file.
Return the content and extension of the resource file.
Handle GET requests.
Do a POST request.
Sends a response with the given http_code.
Checks if the specified path is in the standard library.
Add a line to the list of lines to record.
Yield lines that start with standard library.
Fill theheatmap with the execution statistics.
Given a list of skip lines, skip_map is a map of line numbers to skip
Run the codeheatmap profile.
Format the heatmap for execution. :param filename: file name :type heatmap: str :
Profile a module.
Method to profile the execution of the profile.
Runs Profilers with the given configuration.
Runs the provided function with the given arguments, with the given options.
Returns the predictive probability of each sample.
Calculates the log probability of each data point Parameters ---------- X : array-like,
Fit the model Parameters ---------- z : array-like, shape = (n_samples,
Count the number of documents in the vocabulary.
Sorts the features according to the given vocabulary.
Helper function to limit features in X according to the given vocabulary Parameters ---------- X : array-
Performs the fit and transforms on X.
Transform sparse matrix z according to current vocabulary Parameters ---------- z : sparse matrix A sparse matrix A
Return a copy of this object with the same parameters as this one.
Convenience function to fit a Spark model Parameters ---------- cls : `pandas.DataFrame`
Predict using Spark's predict method.
Fits a spark linear regression to z.
Fit the model to the data.
Fits and transforms data using pre_transform and fit_params Parameters ---------- z : array
Calculate the score of the current layer.
Compute the score of an estimator.
Train an mllibkmeans model on the given data Parameters ---------- z : np.array
Returns predictions for X Parameters ---------- X : array or RDD of RDD of RDD of RDDs
Predict using RDD of SDRs Parameters ---------- X : array-like, shape =
Check that an RDD has the right dtype.
Fit an SVD model to the data Parameters ---------- z : array-like, shape =
Applies `rdd` transform to each element of `z` Parameters ---------- z :
Collect elements of an iterator into chunks of size bsize.
Yields elements from iterator that are of size bsize.
Divide an RDD into chunks of size bsize.
Apply function to every element in the RDD.
Returns the shape of the array.
Returns a copy of the RDD.
Returns the bitperm of the stream ``s``, ``perm`` and ``pos
Check if file is only writeable.
Check config file contents.
Read and validate the config file.
Runs a command as a command on the specified user.
Execute a command and return stdout, stderr.
Execute a command over SSH.
Validate the config data.
Returns a copy of the request headers.
Returns the URL to the execute home assistant.
Returns the URL for this config entry.
return a textual description of a packet.
Print a discovery packet.
Scan for devices with given interface.
Execute the instance. :param root_allowed: if root_allowed is True :param
Send a confirmation to this room. :param message: Message to send :type message:
If a device is on thepush, execute it.
Execute a device.
Scan for new devices and add them to the list.
Finds the path to the ledger file.
Install and run tests in compatibility mode.
Read a precalculated text from a JSON file.
Returns an iterable of supported characters.
Given an iterable of characters and a list of encodings, returns an iterable of encoded characters.
Return a mapping from character to length.
Writes a JSON file.
Convolve a gaussian kernel with a 1D 1D 1D 1D 1D image
Calculates the gaussian kernel for a given width and sigma Parameters ---------- gaussian_kernel_
Convert an image to a gray scale.
Entry point for command line usage.
Calculates the value of a SIM image Parameters ---------- target : `SimImage
Compute the SIM value between two images.
Destroy an object. :returns: None :rtype: None :raises: None.
Set the code version.
Returns a dictionary with the status of this node.
Print the status of the job.
Given a connection object, return its node.
Check if the transport is ready and if it is ready, then bind.
Called when a new incoming connection is received.
Callback for when we get an error.
Determines whether or not this node should be connected.
Connect to a node if necessary.
Called when a connection is outgoing.
Called when a message is received from the connection.
Removes a connection from the pool.
Add a node to the network.
Drops a node from the pool.
Sends a message to a node.
Puts an item into the queue.
Puts an item at the front of the queue.
Get a value from the queue.
Try to acquire a lock.
Returns whether or not the lock is acquired.
Release a lock :param lockid: The lock id :type lockid: str :
Sets up a connection to the server :param hosts: list of hosts :param use_
Create all the indexes specified in the names parameter.
Migrate a list of aggregate indexes to a list of forensic indexes.
Strip metadata from report and return as dictionary.
Save one or more aggregate reports to kafka :param aggregate_reports: The aggregate reports to
Extract XML data from a file.
Parse the aggregate report XML file.
Parse a list offorensic reports to csv.
Parse the aggregation report from a text file or file-like object.
Get the list of Imap server capabilities.
Saves forensic reports to splunk.
Decode a base64 encoded string.
Get the reverse DNS name of an IP address.
Converts a human readable timestamp to a datetime.
Get reverse DNS information for an IP address.
Convert an email message from Outlook format to an RFC7516 message.
Convert a string to a list of strings.
Parse a single DNS report file.
Drain the connection.
Publish a message to a subject.
Publish a request to the server.
Publish a reply to a subject.
Subscribes to a subject asynchronously.
Removes a subscription from this connection.
Send a ping to the server and wait for the response.
Select next available server to connect to.
Process an error received from the server.
Process an error from the server.
Return the command to connect to the server.
Process the Pings of the client.
Process a received message.
Process the server pool info.
Flush all pending data to the file.
A read loop that reads from the server.
Loads a set of features from a numpy array.
Loads features from images.
Calculates the Pearson correlation coefficient.
Computes the dot product of the feature images.
Select a subset of features from a dataset Parameters ---------- features_select : string or list of
Get the feature order of a dataset.
Classify X, y using a classifier, using cross-val, class_weight,
Method to fit the classifier Parameters ---------- X : array-like, shape = (n_
Set the class weight of the classifier Parameters ---------- class_weight : str Name of the class
Performs cross validation on X and y data.
Fits the classifier to the dataset Parameters ---------- dataset : `pandas.DataFrame` Parameters -
Generate a set of voxels with randomly chosen number of voxels.
Get top words of a topic model.
Calculates the Pearson correlation coefficient Parameters ---------- X : array-like, shape
Calculates the FDR of a discrete probability matrix Parameters ---------- p : array-like
Load activations from csv file.
Create an image table from an image matrix Parameters ---------- r : float The index of the image
Returns a list of feature names for the given features.
Returns counts of features above a given threshold.
Loads a pickled dataset.
Saves the feature table to a pickle file.
Returns the ordered names of the features.
Given a string or list of strings, return a list of features that match.
Returns a list of ids that match the given expression.
Convert a SAS Data Frame to a CSR matrix.
Transform a 2D Foci matrix to a 3D Foci matrix.
Converts a list of XYZ points to a list of 3D matrices Parameters ---------- foc
Applies the given transformation to the given foci Parameters ---------- name : str Name of
Create a mask from a list of layers.
Load images from masker.
Save image data to file.
Set the logging level.
Parse an address and return an address object.
Convert a dictionary to an object.
Returns the price of a ticker, optionally filtered by start date and end date.
Get a user's profile from their profile.
Make a request to the REST API.
Get information about bearer.
Make a request to the API.
Get user's album tracks :param spotify_id: ID of user's
Fetches a single artist by ID :param spotify_id: ID of the artist
This interface is used to get the artist's album information.
Fetch top tracks for a spotify.
Get a list of artist's related artist.
This interface is used to get a list of artist's that match the provided list of
Fetches a category by its ID :param category_id: The ID of the category
Get a list of playlists in a category :param category_id: ID of the
Get list of user's categories :param limit: number of categories to return :param
Returns a list of playlists.
Fetch new releases :param limit: :param country: :param country: :param limit
Fetches the following of a list of user ids :param ids: A list of user
Get an artist's songs.
Get allalbums of an artist.
Get the total number of album for this artist.
Get the currently playing track.
Gets the current player.
Get a list of available devices.
List of recently played tracks.
Replace a playlist's tracks.
Create a new playlist.
Get a listing of playlists for this user.
Gets the tracks in this album.
Get all tracks of this player.
Generate an oauth2 url.
Get an album by its identifier.
Get an artist by id.
Get a track by its ID Args: spotify_id: The ID of the track
Get a user by ID.
Get album by list of ids :param ids: list of album ids :param market:
Return a list of artist objects.
Convert a string to an ID.
Instantiate a Client object from an API client.
Generate an OAuth URL.
Returns a dictionary of all of the attributes required for this request.
Returns a comma-separated list of the parameter names.
Build a list of playlist track objects.
Gets all tracks of this playlist.
Transfer a device to the player's account.
Creates a new instance based on the href of the instance.
Gets the whois data from the service.
Convert month data from Gregorian calendar to YYYY-MM-DD format.
Recursively walks the code files for all files in thefunceble directory and updates
Check if the current version is greater than the current version.
Check if device is a development version.
Check if the current version is newer than the current version.
Backup thefunceble configuration.
Restore the backup file.
Check if the line is to be ignored.
Given a list of options, return a list of options.
Extract base name from url or list of strings.
Returns a list of the parts in to_format that are in the same format as the
Check if the user is allowed to access the page.
Get the http_code from pyfunceble.
Returns True if the given domain is valid, False otherwise.
Checks if the given domain is a subdomain.
Check if an IP address is valid.
Checks if the given ip is a valid IPv4 range.
Check if URL syntax is valid.
Loads the configuration from the current directory.
Make the user select a random color and then go to the next color in the screen.
Check if URL is valid and download it.
Get entry management URL.
Printfunceble header.
This method is called by pyfunceble when it is updated.
Provide the domain and status of the computation.
Return the url of thefunceble process.
Colorify the logo.
Format the domain name from the extracted domain string.
Extract domain names from file.
Return the list of file to analyze.
Return a list of file urls.
Returns the expiration date and the expiration string.
Check if the catched file is in the pyfunceble status file and generate it
Get or update pyfunceble structure.
Create a directory using pyfunceble.directory_separator.
Delete needed files from storage.
Sets the path to config based on the path_to_config.
Install production config.
Install iANA configuration.
Install or update a PSL config file.
Install or update directory structure file.
Merge the upstream configuration with the new configuration.
Load config from file.
Split a version string into digits and non-digits.
Check that all versions of the local are in upstream.
Check if file or directory is alreadycloned.
Handle non-existant index errors.
Return the directory of the host file.
Generate a unified file from the information in pyfunceble configuration.
Generate and print the status file.
Determine if we should not Produce our file.
Extracts a list of extensions from a line of text.
Load data from JSON file.
Returns the standard regex for the given element.
Load the iana database.
Return the referer name for the given extension.
Yields the extensions found in the upstream section of iana.
Update iana database.
Mine if URL is valid.
Retrieve the data from a JSON file.
Restore file to JSON.
Add elements to the list.
Remove an element from afunceble object.
Return the list of mined elements.
This method is called by pyfunceble when it is started.
Return content of file.
Writes content to file.
Return whois to be written to the log file.
Set the expiration date of thefunceble process.
This function will check to see if the extension is in the same directory as the original file
Generate the header file for the currently_used_templates.
Construct a header list from the given data.
Construct an ordered dictionary from the data_to_print.
Extract size information from header.
Colorify the image data using pyfunceble's fore, fore, cyan
Return JSON representation of data_to_print.
Print data to screen.
Calculate the time difference between start and end.
Format the execution time of the simulation.
Return a list of files to delete.
Return the list of databases to delete.
Deletes every file in the project and all of its databases.
Hashes the file with the given algorithm.
Generate a hash of the data.
Returns a hash of the contents of the file.
Execute the command and return the output.
Removes a specific key from the dictionary :param key_to_remove: The key
Rename a key in the dictionary :param key_to_rename: The key to rename
Merge two dictionaries into a single dictionary.
Save the Dictionnary to a JSON file.
Save theictionnary to a YAML file.
Fixes a path by splitting it by directory separator.
Writes data_to_write to file.
Reads the contents of the F funilry file.
Return a sorted list of main names.
Merge elements of the list to_merge :param to_merge: :param strict:
Returns a list of items that do not match the regular expression.
Returns a list of strings that match the regular expression.
Replaces all occurrences of the current regex with new data.
Count the number of times an object was created.
Calculates the percentage of free space.
Check if URL is valid.
Check if the domain is valid.
Check if this node is a subdomain.
Return the status of thefunceble.
Reformat historical formating error.
Retrieve the historical data from the pyfunceble configuration file.
Backup an inactive database.
Returns the time in seconds since the last session check.
Returns the content offunceble.
Return ``True`` if ``pyfunceble`` and ``pyfunce
Loads the whois data from the database.
Restore whois data to JSON.
Check if the token is in the database.
Check if this is a time for the simulation.
Returns the expiration date of the token.
Set the permissions of the travis build directory.
Run the pyfunceble command line interface.
Look up the network address of thefunceble server.
Sends a whois request to thefunceble server :param whois_server
Get the list of available status codes.
Get the configuration data for this extension.
Get the current object from the stack.
Return a generator of standard library paths.
Generates a list of standard package names.
Yield lines of unused imports.
Yields the unused import name.
A generator yielding the line numbers of the import used by pyflakes.
Yields the lineno, undefined_name, module_name from pyflakes.
Yields the line numbers of the unused variable.
Yield messages that do not have a key.
Run pyflakes on the given source.
Extract package name from a line of text.
Return `True` if line is a multiline import.
Check if a line is a multi-line statement.
Filter out lines that are not in the imports of the unused_module.
Break up a line of code that contains an import.
Given a list of messages, return a dictionary where the keys are line numbers and the values
Given a line that contains a star import, filter out the line that contains the star import
Given a line and a list of line numbers, filter out those that are marked as duplicate
Check if dict entry has key.
Check if value is a literal or a name.
Yields the line numbers of a line that starts with a "pass" statement.
Filter lines that don't appear in the source.
Returns the indentation of the given line.
Returns the character at the end of the line.
Removes unused variables from source.
Return a set of all items in a comma separated string.
Checks if the given file is a valid text file.
Given a filename and an exclude list, return True if the filename matches the exclude list.
Reads a KMipMessage payload from the given stream.
Writes a MmipFile object to the given stream.
Writes the message to the given stream.
Reads a KMIP payload from the given stream.
Creates a new name for the given name_value and name_type.
Read the MMIP digest from the stream.
Overrides the standard write method to write to a file-like object.
Read application specific information from stream.
Write the application specific information to the stream.
Create an application specific information object.
Reads derivation parameters from the specified file-like object input_stream.
Writes the parameters to a file-like object output_stream.
Reads a request payload from the given stream.
Writes this message to the given file-like object output_stream.
Reads a KMIP payload from the specified stream.
Writes the KMIP object to the given stream.
Writes a MmipFile object to the given stream.
Reads a KMipMessage payload from the given stream.
Builds an error response.
Returns a dictionary mapping template names to their attributes.
Returns a list of attribute objects from a managed object.
Sets the given attributes on the given managed object.
Sets the attribute on the managed object.
Check if the given policy is allowed for the given operation.
Writes the message to the given stream.
Create a new secret from a secret value :param secret_type: :param value:
Sets various setting methods.
Load settings from file.
Takes a value and returns a bitmask.
Return a list of models where the value is a bitmask.
Reads an integer value from the stream.
Writes long integer value to file.
Validate that the value is a valid integer.
Reads an integer from the stream.
Writes a big integer to the file.
Validate that the value is a valid integer.
Validate that the enumeration is correctly representable.
Reads a value from the stream.
Writes the value to file.
Writes a boolean value to the MMIP file.
Check that the value is a boolean.
Read interval from stream.
Validate that the interval value is a valid integer.
Validate that the cryptographic key is correctly representable.
Validate that the field is correctly representable.
Validate that the field is correctly representable.
Convert an attribute name to a tag.
Convert an attribute tag to a name.
Returns a bit mask from an enumerations.
Returns a list of all enumerations whose value is a bit mask.
Checks if the given enumeration is a bitmask of the given ` potential_mask`.
Writes the Mmip file to the given buffer.
Reads a KMipMessage payload from the given buffer.
Writes a JmipFile object to the given file-like object.
Reads an attribute list request from the given file-like object.
Writes a MmipListRequest object to the given file-like object.
Writes the message to the given file-like object.
Returns a list of JSON files in a directory.
Main entry point for the execution of the monitoring loop.
Get the certificate from a connection.
Returns the extended key usage for a certificate.
Return a list of all the names common to this certificate.
Get the client identity from a certificate.
Reads an object from a file-like object.
Writes the object to a file-like object.
Reads a KMIP payload from the given buffer.
Writes the object to the given file-like object.
Convert a PObjects object to a PObjects object.
Reads a KMIP payload from the given stream.
Writes the object to a file-like object.
Checks if the given attribute is supported by this rule set.
Check if the attribute is deprecated.
Checks if the given attribute is applicable to the given object type.
Returns whether the given attribute is multiple-instances-permitted.
Reads a KMipMessage payload from the given stream.
Writes a MmipFile object to the given file-like object output_stream
Read attributes from a file-like object.
Writes the object to the given buffer.
Reads attributes from a file-like object.
Writes the attributes to the given stream.
Reads the nonce from the given stream.
Writes the nonce to the given stream.
Reads a username and password from the stream.
Writes the username and password to the given stream.
Writes this device to a file-like object.
Reads the credential from the given stream.
Writes the credential to the given stream.
Reads MCSignatureKey information from the specified stream.
Writes the Mmcsignature key information to the given stream.
Writes the authentication data to a file-like object.
Reads keys from the specified file-like object input_stream.
Writes the authentication object to the given stream.
Reads extension information from the stream.
Write the extension information to the stream.
Reads a revocation reason from the stream.
Writes the revocation code and message to the stream.
Validate revocation info.
Reads an object from a file-like object buffer.
Writes the object to a file-like object.
Writes to the MMIP file.
Reads profile information from a file-like object.
Writes the object to the given file-like object.
Writes a Mmip file to the file-like object output_buffer.
Shut down the socket and the policy monitor.
Writes the object's attributes to a file-like object.
Reads the locateres response from the device.
Writes the locateres object to the given file-like object.
Create an RSA private key from a PEM or DER encoded private key.
Reads a KMipMessage payload from the given stream.
Writes this message to a file-like object output_stream.
Reads usage allocation request data from the given stream.
Converts a protocol version to a KMIP version.
Reads a protocol version tag from the given stream.
Writes the component to the given stream.
Read authentication from a stream.
Writes the authentication credentials to the given stream.
Reads a poll request payload from the given stream.
Read certificate from stream.
Writes the certificate to a file-like object.
Reads a KMipMessage payload from the given stream.
Writes the KMIP message to a file-like object output_stream.
Initiate the handshake and handle message loop.
Reads a KMipMessage payload from the given stream.
Determines if a profile is supported by the authentication suite.
Get one or more attributes from the server :param uuid: The UUID of the attribute to
Get the attribute list of the user with the given UID.
Query the database. :param batch: :param query_functions: :param credential:
Opens the connection.
Closes the proxy connection.
Registers a managed object.
Gets attributes of a user :param uid: :param attribute_names: :param
Activate the object :param uid: :param uid: :param uid: :param
Builds the cryptographic parameters object from the given value.
Builds the encryption key information object.
Builds the MAC signature key information object.
Builds a key wraps specification.
Builds a list of the common attributes of the operation policy.
Builds a list of names for the given attribute name.
Read a query from a file-like object.
Writes the message to the given buffer.
Read attributes from a file-like object.
Writes the object to the given file-like object.
Get a single entry point by name from a group.
Get a group by name :param group: Group to get :param path: Path to
Get a list of all entrypoints for a specific group.
Loads the object from the module specified by self.object_name.
Construct an EntryPoint object from an entry point string.
Generate a controller file.
Copy a file from one location to another.
Check if url is valid.
Encode something to be safe to use as a URL.
Decode something if it's a valid signature.
Return the absolute URL for the given endpoint.
Sign in a user :param user: :param permenent: :param permen
Get the currently logged in user.
Create a Flask application object.
Write a Pandas DataFrame to a CSV file.
Return a Pandas DataFrame from a CSV file.
Serialize a dataframe into the given data type.
Deserialize a single dataframe from a file-like object.
Returns the URL to the contents of this file.
Open the intermediate dataset contents in a workspace.
Read the intermediate dataset contents as binary.
Read the intermediate dataset contents as text.
Reads the data from the file and converts it to pandas.DataFrame.
Get an intermediatedataset from a node and port Parameters ---------- node_id :
List experiments in a workspace :param workspace_id: workspace id :param workspace_id
Get a workspace's datasets :param workspace_id: workspace id :param workspace_
Get a specific dataset in a workspace :param workspace_id: workspace id :param dataset
Returns a set of all global names in the code object.
Creates a copy of the current pen.
Look up a color name from a color string.
Draw the bounding box on the screen.
Calculates the cubic B cubic n-stein-extrema number
Calculates the cubic B cubic n-stein distance.
Builds a choices list from the tree.
Initializes the database from the cache.
Delete all data from the cache.
Get an entry from the cache Args: entry_name (str): The name of the
Update the value of an entry.
Sets the value of an entry in the cache.
Initialize the page context.
Resolve tree's I18N alias.
Check if the current app is an admin.
Calculates the depth of an item.
Gets the current item of a tree.
Return the URL for a model tree item.
Initialize the tree and return tree_alias, sitetree_items.
Return the attribute value of the current page in the tree.
Gets the ancestor level of the current item.
Check if user has access to the page.
Returns a list of dicts for the tree identified by tree_alias.
Returns a list of children of the given navigation type.
Return list of children of given item.
Updates the has_children property of a tree item.
Filter the items according to the navigation_type :param items: List of items to filter
Given a tree alias and a base item, return the base item.
Recursively climbing through tree items.
Resolve a variable in the current page context.
Returns a tree of Python code elements.
Returns a tree of nodes.
Returns a sitetree's breadcrumbs node.
Renders the tree_items using the specified template.
Returns an instance of `Node` for the given tag.
Return the URL name of a page, given its nfo and page number.
Registers the tree admin.
Return a redirect handler for the current URL.
Handles the redirect requests.
Overrides the response_add method to redirect to the detail page.
Overrides the response_change method to redirect to the change view.
Override the default admin form.
Return tree instance.
Move an item to another item.
Save the tree object.
Returns the urls for the tree admin.
Dump a tree item to a JSON file.
Imports the site etree module in the app's app directory.
Returns the model class from a settings entry name.
Create a Config object from a mapping.
Create an object from a Python source file.
Loads the model from a TOML file.
Load the configuration from an object.
Generate HTTP headers for a new span.
Determine if we are in the same context as this one.
Initializes the zipkin logging context.
Stops the logging session. :param _exc_type: :param _exc_
Updates the annotations in the binary logging context.
Add asa binary annotation to the logging context.
Override span name with logging context.
Creates a copy of the endpoint with a new service name.
Build a `_v1 span` from this instance.
Encodes a list of spans into a protobuf.
Convert a Span object to a protobuf object.
Converts a hex value to bytes.
Returns the appropriate protobuf for the given kind.
Convert zipkin endpoint to protobuf endpoint.
Convert annotations to protobuf annotations.
Create an annotation object.
Create a binary annotation.
Create an endpoint object for a zipkin service.
Creates a copy of the endpoint with a new service name.
Build a list of annotations.
Build a list of binary annotations.
Create a span object from a span_id, parent_span_id, trace_
Converts the given Thrift span to a bytes object.
Encodes the given list of binary objects into a bytes object.
Tries to detect the span version and encoding of the message.
Converts a list of spans from one encoding to another.
Create a thread local stack with a zipkin attribute.
Encodes a Span object to JSON.
Create JSON endpoint data.
Encodes a span into a protobuf message.
Decodes a list of spans.
Converts the camel_endpoint structure to an endpoint object.
Extracts annotations from the given Thrift file and converts them to Python objects.
Converts protobuf binary annotations into Python objects.
Parses a protobuf span and returns a Span object.
Convert trace ID to string.
Convert unsigned integer to lower case.
Write long value in hex data at given position.
Pre processor for date_fixup_pre_processor.
Sets the code for a transaction.
Given a tag and a tag_dict, return the tag ID for that tag.
Given a tag and a tag_dict, return a tag_dict with all the transactions
Join the given string with the given strip.
Get response as JSON or text.
Raises a warning if the timer is too long.
Get bot info :param bot_id: bot id :type bot_id: str
Get bots :param limit: number of bots to return :param offset: offset
Reads a single term from the stream.
Writes the given message to the file.
Decompress a compressed string of data and return the term and the remaining data.
Encodes a string term.
Add a source address to the multi-source socket.
Sends any pending messages from the queue.
Defines a callback to be called when a notification is received from a remote service.
Stops the server.
Clears all local services.
Search for services by type and scopes :param types: :param scopes: :param types
Creates a message environment.
Discover the loglevel of the given scope.
Returns the item manager to use for the serializer.
Returns all child relations of a parent field.
Returns all parental many-to-many relations.
Save the clusterable instance to the database.
Validates all the forms to ensure that they are unique.
Check if all formsets have changed.
Create a new address with a valid checksum.
Generates and returns the checksum of the address.
Prompts the user for a seed.
Get a key from an index.
Returns the key associated with an address.
Create a random iterator for the map.
Create and return a Sponge object for the given index.
In-place absorption of a series of trits.
Adds one or more trits at a time to the end of the array.
Transforms the state from one format to another.
Add two trajectories.
Convert an integer into a list of trits.
Add two trajectories.
Calculates the sum of bothtrits and adds them to the left.
Makes sure the given seed is a binary string.
Runs the findtransactions command on the specified bundles and addresses.
Convert a transaction to a promotet command.
Resolve a uri to a base adapter.
Call this method to send request payload.
Log a message at the given level.
Helper method to send http requests.
Interprets the response.
Add a digest to this node.
Returns a multisigaddress.
Generates an iterator over the keys starting at the given start and ending at the given step
Given a digest, return an address object.
Generates an address based on the given key_iterator.
Takes a adapter and returns a list of transaction objects.
Iterate over the used addresses.
Given a list of transaction hashes, returns a list of bundle hashes that are not tails
Check if the given encoding is valid asciittes codec name.
Get the codec info.
Encodes a bytestring into a bytearray.
Decode a sequence of bytes.
Returns a list of addresses. :param seed: :param index: :param count:
Add a route for a specific command :param command: :param adapter: :return:
Convert a Tryte string to a Transaction Trytes object.
Returns a JSON-compatible dict representation of this message.
Get the list of validation Trytes for this transaction.
Sets the flag new_is_confirmed for each transaction in the transaction list.
Returns a list of messages.
Return a list of transactions that are in the tail group.
Discovers all commands in a module recursively.
Execute the request. :param request: The request to execute :type request: dict :
Applies a filter to the provided value.
Return the URL for a specific job.
Returns a list of errors.
Returns True if the validator is valid, False otherwise.
Yields all valid transactions in the bundle.
Given a list of groups, return a list of signature errors.
Validate group signature.
Traversees the bundle at ` txn_hash` up to `target_bundle_
Starts an interactive console for the current user.
Generate a random number.
Generates a hash of all the keys in the map.
Signs the input transactions of a bundle.
Pretty print the object for debugging.
Given a list of trits, return a new list of trits, starting at offset
Adds context to an exception.
The security level of the account.
Increment the legacy tag.
Get the tag associated with this transaction.
Adds a transaction to the list of transactions.
Finalize the transaction.
Sign the inputs of the transaction.
Creates input transactions for security level.
Converts a value to a standard unit.
Decompress a G1 tag.
Calculates the prime number of a number.
Create an instance from a JSON file.
Split a description into a list of strings.
Returns a list of the categories of the object.
Create a random colour from a list of components.
Create a timescale with builtin names.
Create a list of decorations from an image.
Returns a string representation of the table in CSV format.
Returns the maximum width of all rows in the list.
Returns a decoration object for the given component.
Plots all objects in the list in the given format.
Warn user that function is not available in this context.
Takes a row of text and a dictionary of column names.
Parses a string of Canstrat format.
Return a list of unique entries in the collection.
Computes a list of intervals from a list of tops and a list of components
Clean longitudinal data.
Create a new instance of this class from a PETrel file Parameters ---------- filename : str
Creates an interval from a Canstrat file.
Returns a copy of the striplog.
Writes the list to a CSV file.
Convert tolas3 format :param use_descriptions: :param dlm: :
Return list of overlays that overlap with other overlays.
Returns the list of gaps that occur in the sequence Parameters ---------- index : bool The index of
Returns a copy of the strip with only n strips that are at a given percentile.
Compute anneal strip from this strip.
Fill this gap with another.
Returns the union of the intervals in self and other.
Return the intersection of two striplog objects.
Merge overlapping segments into a new segment.
Invert each element of the list.
Crop this series to the given extent.
Run a single quality test.
Override default formatter to catch key errors.
Returns a list of all currently running jobs.
Parses a HCL string.
Update an access token :param id: :param token: :param token: :param
Returns a list ofallocations with optional prefix.
Fail the deployment with the given id.
Pause a paused deployment. :param id: the id of the pause to pause :
Enable or disable a drain node.
Adds a drain node with the given spec.
Get details of an eligible node :param id: Nomad id :param eligible:
Returns a list of files.
Stream files from a file or directory.
stat a file :param id: File id :param path: File path :param path
Join a list of agent addresses :param addresses: list of agent addresses :type addresses:
Updates one or more servers.
Force a node to be leave.
Returns a list of nodes with optional prefix.
Returns a list of all evalifications that have at least one matching prefix.
Returns a list of all namespaces that have at least one matching prefix.
Register a job :param id: job id :param job: job id :param job
plan a job :param id: job id :param job: job id :param diff
Handles dispatching of a job. :param id: job id :param payload:
Revert a job to a previous version.
Revert a job from a stable version.
Deregisters a job :param id: ID of the job to purge :param
Get current configuration.
Removes a peer from your account.
Returns a list of all deployments owned by the authenticated user.
Get a random object from the mutator.
Get a mutator for an object of a certain type.
Get a random word from a polyg slot.
Safely convert all strings in a buffer to Unicode.
Generates a custom html response :param str filepath: The path to a custom html response
A context manager to handle fuzzing.
Spawn a pjf process.
Reads content from stdin and writes them to stdout.
finish_read - Wait for the process to finish.
Closes the subprocess.
Start a pjf worker.
Spawn a command and return its output.
Generates a random string of the length specified in pre.
Build the code.
Returns a string representation of the query.
Generates a random value based on the values provided.
Make sure that the optgram is valid.
Build a new reference from the data.
Make sure that the optgram is valid.
Shut down the pjf base process.
Spawn a process and monitor it.
Start the monitor and save the test case.
Generate a random float between two values.
Return the fuzzed query string.
Returns a list of fuzzed elements.
This method is called when a SIGTERM is received from the server.
Quits the server if the server is running.
Pause a running command.
Resume paused or waiting command.
Stop a running command.
Restarts a child process.
Returns a list of skype events.
Set the m shuffle flag for the current user :returns: None :rtype: None
Set a user's avatar image :param image: image to set :type image:
Get metadata for a URL :param url: URL to retrieve :type url: str :
Retrieve a skype contact by ID :param id: skype contact id :type contact
Retrieve a skype user by ID :param str id: skype ID Return skype
Return a list of all bots in this skype.
Retrieve a bot's user from skype.
Returns a list of skype user objects that match the given query.
Return a list of skype requests.
Create a skype instance from raw data :param skype: :param raw: :
Merge the contents of another ConfigObj into this ConfigObj.
Merge another object into the cache.
Reads the token from the tokenfile and stores it in the tokens dict.
Write token to file.
Verifies that the token is valid.
Refreshes the skypetoken.
Get the userid of the currently logged in user.
Use this method to get a valid skyping token and store it in the self.
Sync the endpoints with the access token.
Checks whether the specified user is logged in.
Returns a token or None.
Set up the config of the bot.
Ping the host :param timeout: timeout to ping :type timeout: float :param timeout
Get recent chats from skype.
Use this method to chat your skype with a user.
Create a skype chat :param members: list of members :param admins: list
Tries to extract the usertoid from the given URL.
Returns chattoid from url or None if chattoid doesn't exist.
Converts text into Unicode.
Return the format handler for the given text.
Parse a string or list of strings into metadata and content.
Create a copy of the metadata dictionary.
Wrapper around yaml.load to support additional options.
Serialize a YAML document into a Unicode string.
Export metadata to JSON :param metadata: :param kwargs: :return:.
Match the pattern.
Return the list of items in the pattern.
Returns a list of sublists matching the pattern at index i.
Convert a starting position to a new starting position.
Return the list of arguments.
Returns a list of lists that match the pattern.
Given a list of strings, return a trie.
Generates a regular expression pattern from a trie.
Check if key is valid and return start and stop index.
Insert string at index.
Return the partition of a character, starting at the start of the list.
Returns a list of subspans of the given type.
Shrink an update in place.
Insert a new index into the end of the list.
Returns the number of nesting of the element.
Return a bytearray of the shadow of the current span.
Extracts the shadow from the external link.
Convert PP type to list of spans.
Pretty-print the template using the given indent.
List of parameter objects.
Returns a list of parser functions.
Returns a list of templates.
List of Wikilink objects.
Returns list of comment objects.
Return the list of external links.
Return the complete list of tables as a list of Table objects.
Generator of subspans of the given type.
Returns the list of ancestors of the given type.
Returns the parent element of type_ if it exists, otherwise None.
Returns the mode of a list.
Returns the first argument with the given name, or None if no such argument exists.
Removes the first occurrence of a duplicate in the arguments list.
Returns the argument with the given name.
Returns true if this function has an argument with the given name and value.
Delete an argument by name.
Convert CRS code to string :param codetype: CRS type :param code:
Find an element with a certain crstype.
Reads a file from a URL and returns a `CRS` object.
Creates a parse object from a file.
Convert an esg code to a CRS.
Convert an ESRI code to a CRS.
Convert an SRS code to a CRS object.
Convert unknown characters from text.
Writes the record to out.
Reads avlr object from a stream containing raw data.
Returns a list of geotiff keys from avlrs list.
Returns a list of geotiffKey objects.
Returns the signedness value for the extra dimension type.
Given a type string, return the ID of the extra dimension it represents.
Create a new record from another record.
Copy fields from another record.
Appends zeros to the array if they are too small.
Returns a set of all dimension names.
Create an array of zeros.
Create a Point from a file-like object stream.
Create a point from a compressed buffer.
Read-only property that returns the x-dimension of the image.
y-axis coordinate of the y-axis.
Returns the z-dimension of this scale.
Adds an extra dimension to the dataset.
Writes point data to the given file-like object out_stream.
Writes the region to a file.
Given point format dimensions and a dictionary of point formats, return a dict of numpy.ndarray
Build a dictionary of numpy.dtype objects representing the list of data formats of the point formats
Convert numpy dtype to point format.
Given a point format ID, return the minimum file version supported by the point format.
Checks if the point format is compatible with the given file version.
Returns a list ofvlrs of the specified type.
Reads data from data stream.
Checks if all the files have the same point format ID :param las_files
Checks if all the las files have the same dtype.
Check if the signature of the file is correct.
Reads the next header from the stream.
Reads list ofvlrs from stream.
Reads points from file and returns packed point records.
Reads points from a compressed LSA-Z file.
Reads and returns internal waveform packet header and record.
Reads an evlr list from the evlr file.
Print a warning if we're not at the expected position.
Creates a lasData object from a header object.
Merge multiple las into a single merged las.
Write a las to file, then read it.
Returns the day of the year.
Sets the date of the day.
Returns the minimum values of all minibatches.
Sets the min value.
Returns an array of the maximum values.
Sets the maximum value.
Returns the scales in x_scale, y_scale, z_scale.
Return the offsets of the mesh.
Reads the major and minor number from the specified file stream.
Convert a header from one version to another.
Unpack an array of unsigned integers.
Return a list of all the dimensions that are completelylosted.
Dict of all sub-fields.
The total number of extra bytes required to store this image.
Returns True if we have a waveform packet.
Simple test program for testing.
Calculates the checksum of a command.
Print data in hexadecimal format.
Verify the checksum of the response and strip it.
Returns a list of set bits.
Generates a bytearray containing the query to send to the server.
Connect to a satel server and run the main loop.
Connect to the RiveScript server.
Start monitoring the device. :returns: None :rtype: None :raises: None
Disarm a device.
Clears the alarm with the given code and partition list.
Set the output code of a device.
Keep sending data until keep_alive_timeout is reached.
Monitor the device status.
Closes the stream.
Purge all users from the database.
Guess the type of the file at the given path.
Get file id by path.
Get a notebook from a file.
Generate a notebook model from the given record and content.
Get a directory. If the directory does not exist, do nothing.
Converts a list of file records into notebook, notebook, and database records.
Builds a model object from a record and content.
Generate a FileModel object from the given record and content.
Save notebook to file.
Saves file to database.
Renames a file or directory.
Delete a file or directory.
Ensure user exists in DB.
Delete all files directories and users.
Create a new directory for a given user.
Check if file is in given directory.
Delete a directory from the database.
Check if directory exists.
List files in a given directory.
List all directories in a user's directory.
Get a file from a path :param user_id: :param api_path:
Generate a select statement for a file.
Return the default fields for a file.
Get file from database.
Get a file from the database.
Get file id.
Check if a file exists.
Rename a directory.
Saves a file to the database.
Delete all remote checkpoints for a given user.
Re encrypt content of row by applying encrypt_func to it.
Recre Encrypt file contents for a user.
Derives a singlefernet key from a password.
Get the name of a column like object.
Convert a row to a dictionary with no content.
Convert a row to a dictionary with content.
Create a checkpoint file from a notebook.
Create a checkpoint for a file.
Delete a checkpoint for a user.
Get the content of a checkpoint.
Get a list of remote checkpoints for a path.
Move all checkpoints from old path to new path.
Delete all checkpoints for a given path.
Purge all checkpoints from the database.
Return the manager and path for a given API path.
Apply a prefix to a model.
Called when one of the manager objects has changed.
Get a file or directory.
Normalize the API path.
Split a file path into a directory name and a file path.
Encode a notebook as base64 encoded string.
Read a file from a base64 encoded string.
Helper function for decode_unknown_from_base64 :param path: The path to
Extract a file from base64 content.
Given a path, return a list of all parent directories that are at the same path.
Creates a new postgres user.
Splits a list of models into a list of directories and files.
Recursively walk a directory tree.
Yields all files in a directory.
An iterator that recursively walks a directory and yields all the files with content.
Recre Encrypt a single user :param engine: :param user_id: :param
Un Encrypts all users in the database.
Un Encrypts a single user :param engine: :param user_id: :param
Context manager to write alembic ini file in a temporary directory.
Upgrade a database from Alembic.ini to Alembic.ini.
Sanitize the block before it's added to the block's data.
Queue an instance of a certain type.
Loads instances from DB and stores them in self.instances.
Inserts an instance into the block.
Loads data from file.
Validates the data.
The view function for the admin page.
Returns a JSON representation of the model's data.
Hide all authenticated fields.
Removes excluded fields from the list of fields.
Handles GET requests.
Returns a queryset of publishable objects.
Returns a queryset of publishable objects, filtered by ``query_params``.
Gets the value of the null boolean field.
Check that the given widget is valid.
Ensure the zone exists and is a valid ID or name.
Checks if the given value is a valid UUID.
Returns a string of the permissions to use for creating new groups.
Add or remove a group.
Validates that the author data is a list of strings.
Save a zone to Zonemodel.
Returns a dictionary of all field names and their data.
Prepare the data for the field.
Render the template using the provided data.
Retrieves the settings for the integration and returns them as a dict.
Callback method that is called when user wants to view page.
Gets the settings for the specified integration.
Update or create the settings for an integration.
Handles the registration of an invite.
Adds HTML tags to the contents of `contents`.
Show a zone details :param zone_id: zone id :param zone_id:
Saves a featured image :param data: :return:.
Function saves article's subsection.
Get the extension of the image.
Returns the absolute URL of the medium.
This save method saves the thumbnail.
Saves the thumbnail of the given image.
Connect to MySQL database.
Returns a bandwidth limited stream for the given file object.
Read a number of bytes from the file.
Consume a request and return it.
Process a scheduled consumption token.
Calculates the exponentially moving average rate.
Record the consumption rate at a given time.
Wait for the transfer to finish and return the result.
Given a transfer future and a type, return a list of callback functions.
Returns a copy of the original dictionary where the whitelisted keys are filtered out.
Decrements the counter.
Calls the callback method when the count is reached.
Check if a special file exists.
Acquire a tag from the source list.
Release a previously acquired token.
Adjusts the chunk size based on the current chunk size and file size.
Queue a file object as an IO task.
Returns the download output manager class that is compatible with the transfer future.
Main entry point to write data to a file object.
Requests a list of data to be written at the given offset.
Check if a file object is seekable.
Shut down this QEMU VM.
Cancel all pending transfer requests.
Wait for transfer to finish.
Wrap data into chunks and return a file-like object.
Return the input manager class that is compatible with the transfer future.
Sets the exception on the future.
Sets the result of the Future.
Sets the exception of the future.
Wait for the future to finish and return its result.
Sets the exception message and cancel the announce if it's done.
Submit a task to the transfer queue.
Add a done callback.
Add a failure cleanup function to the list ofcleanups.
Announces a job to be completed.
Upload a file to a bucket.
Download a file from Google Storage.
Extracts a step from a decorator's arguments.
Refactor old_text with new_text at position `old_text`.
Return the path to the step in the decorator.
Refactor a step.
Updates an existing membership.
Deletes a membership from the database.
Get cat fact info from DCNM.
Post a new message to a room.
Deletes a membership from the list.
Check if the given base url is valid.
Checks if the given string is a web URL.
Opens a local file.
Check if o is one of the acceptable types.
Create a dictionary from a list of dictionaries with values.
Check that expected response code matches expected_response_code.
Convert json_data to an ordered dictionary.
Create a naive datetime from a string.
Creates a new team. :param title: title of the team :param teamid:
Updates a room.
Deletes a message from the room identified by the given ID.
Get a list of items.
Returns the created date.
Returns an OAuth access token from environment variables.
Updates a webhook. :param webhookid: webhook id :param name: name of
Delete a webhook from your account.
Sets the value for wait_on_rate_limit.
Update the headers of the request :param headers: The headers to update :type headers:
Returns the absolute url of the given url, unless it's already absolute.
Make a GET request.
Get pages from given url.
Make a PUT request.
Send HTTP DELETE to the specified URL.
Create a new JWE token.
Deletes a message. :param messageid: ID of the message to delete :type
Gets a person by ID.
Delete a person from the database.
Gets the currently logged in user.
Get a list of objects. :param request_parameters: :param request_parameters:
Create a new object. :param name: Name of the object :param request_parameters
Updates a team.
Delete a team from your account.
Serialize `data` into a tuple of key-value pairs.
Return the last activity from the last json data.
Posts a new event to the events service.
Retrieves the public url of a tunnel.
Delete webhooks with specified name.
Create a Nytomine WebHook.
Main entry point of the script.
Reads a Telegram from the serial device.
Read a Telegram from a queue.
Factory function to create a DSMR protocol object.
Create a DSMR reader.
Create a TCP connection.
Called when data is received from Telegram.
Called when the connection is closed.
Parses a Telegram and calls the callback.
Parses a Telegram data dictionary.
Get the version from a Python file.
Ensures that the supplied specs are valid Python packages.
Find packages in top directory.
Run a shell command.
Given a list of data specs, and a list of existing data files, return a dictionary
Get package data from root directory.
Compile a regular expression.
Yields all non-leafs in a path.
Translate glob into a human readable path.
Join a list of translated parts into a single string.
Translate glob part to a regular expression.
Truncate a table in the database.
Writes a table to the database.
Write all of the indexes to the table.
Write triggers to a postgres table.
Write all of the constraints to the table.
Reads the contents of the table and writes them to the file.
Writes all of the indexes to the file.
Writes the constraints to the file.
Writes the triggers from the given table to the file.
Returns the number of items in the queue.
Insert a new record into the database.
Enqueue a task to be processed by the queue.
Builds an extra predicate string.
Serialize an object to an ISO-8601 representation.
Connect to MySQL and close the connection.
Execute a SQL query and return the first row.
Creates a connection to the specified database.
Run a benchmark of the worker threads.
Connect to redis.
Look up an object by number.
Returns the total size of all connections in the pool.
Raises an exception if the connection could not be established.
Constructs a simple query expression from the given fields.
Updates the given fields in the given table.
Connect to the database.
Destroy all the tables in the database.
Starts a step by name.
Stops the step with the given name.
Loads the raw steps from the API.
Closes the socket and waits for it to finish.
Cleanly close the socket if it's still open.
Connect to the websocket server.
Called when a message is received from the websocket.
Stops the timer.
Sends a ping to the server.
Check if pong has been received.
Send data to the websocket :param api_key: :param secret: :param list
Unpause the paused task.
Handle system events.
Base error handler. :param data: :param num: :param num: :return
Handler for data sent to client :param data: :param ts: :param ts:
Replies to the bitfinex channel.
Handle authentication events.
Handles config events.
Update the timestamps of a channel :param chan_id: ID of the channel to update
Reset the websocket connection.
Returns the candles for a particular pair.
Configure bitfinex. :param decimals_as_strings: :param ts_as
Subscribe to a ticker pair.
Unsubscribe from a ticker pair.
Subscribe to the orderbook of a specific pair.
Unsubscribe from an orderbook.
Subscribe to the raw order book.
Unsubscribe from raw order book.
Subscribes to a pair of trades Args: pair (str): The pair to
Unsubscribe from a pair of trades Args: pair (str): The pair to unsubscribe
Subscribes to candles of a specific pair.
Unsubscribe from candles.
Authenticate using API key and secret.
Cancel an order :param multi: whether to cancel the order :param order_identifiers:
Invoked by the client when a command is received.
This function is called when a device is ready to send a command to the device.
Called when a notification is received.
Create a new devicetype :param devicetype: devicetype to create :
Update a device :param deviceuid: ID of the device to update :param metadata:
Returns an iterable of ClientStatus objects.
Gets a list of all registered services.
Creates a new DmData object :param dmedata: :return:.
Update a schema :param schemaid: ID of the schema to update :param schemad
Closes the websocket connection.
Called when a client connects.
Called when an unsupported message is received.
Called when a device event is received.
Called when a devicest status is received.
Called when the client wants to perform a status operation.
Get the last event for a given device and event ID.
Get all events of a device.
Make the API call and return the JSON response.
Initiate a request.
Retrieves the status of a given request.
Closes the underlying file handle.
Return the lower and upper bounds of the index.
Load a byte array from a page.
Check if the return value of the function is an error.
Loads the application from the self.application attribute.
Serve the API.
Converts to native formats.
Crop the image and save it on disk.
Generate and save a PIL image.
Processes an image and saves it as an image file.
Override the default to open the image file.
Save the placeholder image to the storage.
Override the save method to update theppoi field.
Updates the value of the PPO field associated with the instance passed in.
Make sure the field is the only field to show on the admin page.
Returns the value of the field as a string.
Auto-discover INSTALLED_APPS filters and images.
Unregisters an attribute.
Unregister a filter by attribute name.
Returns the image URL for this image field.
Builds the filters and sizers for the image field.
Returns the root folder where the image will be saved.
Returns the root folder where the image is stored.
Returns the absolute path of the sized root folder.
Delete matching files from storage.
Preprocess a PIL image.
Preprocess a PNG image.
Retrieves an image from the storage.
Saves the given image to the given path :param imagefile: :param save_
Returns a string representation of the PXB as used in PXB.
Create aresized image.
Renders the clearable file input with an image preview.
Builds the template context for the clearable file input.
Return a copy of base_attrs with extra_attrs added.
Returns the path to the resized image.
Returns the path to a filtered image :param path_to_image: The path to
Validates a list of sizes.
Returns the URL from an image key.
Returns the rendition key set for a given image key.
Format an instruction for printing.
Formats the body of a function as a list of lines.
Decode a raw bytecode to a list of opcode objects.
Decode a module into its parts.
Connect to LiPD server.
Read the next result from the response.
Parses the line of an agi code check response.
Check agi code.
Reset generator to default.
Returns a list of all the instances in the group.
Get distribution data from setup.py.
Get the primary keys of a model.
Deserialize a single instance of a related model.
Get an existing instance of the related model.
Add declared fields to a model.
Load data into the model instance :param data: :param session: :param object:
Split up the kwargs for a model association.
List of available snapshots.
Restore an application to its latest state.
The end of the epoch.
Returns a cleaned-up version of the given text.
Apply a function to a list of data in parallel.
Generates a list of tokens from a string of text.
Return a list of processed text in parallel.
Generates stats for each document length.
Returns a Pandas dataframe of word counts.
Given a type name, return a mapping of parameters to their main and sub types.
Parse a list of interfaces and return a dictionary of method information.
The inverse of the link.
Update the write log, but keep the deduped items up to date.
Returns a copy of this object.
Creates a copy of the current instance.
Test whether two mapping objects are equal in order.
Return the inverse of a mapping.
Clears out and in VM.
Moves the node to the end of the key.
Writes text to a temporary file and returns the name of the file created.
Merge args into config.
Return an iterator of Addressbook objects.
Create a new contact from a list of address book objects.
Subcommand to display a user's list of salt days.
Subcommand to display phone numbers.
list vCard_list: list of vCard objects :param vcard_list:
Modify a subcommand of a vCard.
command to remove a vCard from the vCard list :param selected_vCard:
Runs the source subcommand for the selected vCard.
Subcommand to merge vCard_list with selected_address_books.
Returns the action associated with the given alias.
Helper method to create a new contact object.
Instantiate an Addressbook from a file.
Create a contact object from a user input.
Creates a new contact object from an existing contact with a new user input.
Returns a list of all the names that are part of the list.
Adds the given categories to the vCard.
Parse a single value from a list of types.
Convert a list to a string using the given delimiter.
Returns a datetime object from a string.
Return the number of elements in uid1 that are not in uid2.
Searches for all contacts that match the given regular expression.
Searches for all contacts whose full name matches the given regular expression.
Searches for a user that matches the given query.
Searches the database.
Returns a dictionary mapping uid to the short uid.
Returns the short UID of the given uid.
Searches for vCard files in the source directory.
Searches the vCard database and returns a list of card objects.
Return the abook with the given name.
Return available architectures.
Return a dictionary of architectures available on the system.
Tries to guess the type of the arguments.
Returns a copy of the query that is modified.
Get the first item in the result set.
Delete all records from the database :param blocksize: number of rows to delete :param blocksize
Helper function for prefix_lua :param conn: redis instance :param prefix: redis
Estimate the number of items in a row with a given prefix.
return the number of elements that match the filters.
Connect to the database for the given object.
Returns a sorted list of strings.
Add an object to the list of known objects.
Get a value from the cache.
Writes a single item to Redis.
Save the changes to the database.
Delete an item from the collection :param kwargs: The kwargs to delete :type kwargs:
Get a list of objects by their IDs.
Internal function to open a sem file.
Adds a result to the result queue.
Adds one or more work items to the call queue.
Ensure the executor is running.
Starts the client process.
Do a duplicate of a file descriptor.
Wait until all pending work items have been completed.
Takes a dictionary of information from the command line and applies it to the current process.
Close all open file descriptors.
A wrapper around _recursive_ terminate that doesn't raise an exception if process is not
Recursively kill the process with the given pid.
Get the exit codes for a worker.
Format a list of exit codes into a human readable string.
Ensure the process is running.
A basic event processor.
Split a string into a list of arguments.
Given a frame, a traceback, and a botframe, return a list of tuples.
Runs the given hooks for the given object.
Forgets the stack.
Get an integer from the user input.
run all the pre and post command hooks.
Queue the start of a file so that it can be read later.
Return the next token starting at `start_pos`.
Print a message with a prefix at the beginning of the file.
Read a line from the console and return it.
Close input and output files.
Disassemble a message into a section of the file.
Counts the number of frames in a frame.
Returns the name of the function that is called at the given frame.
Print a stack trace of a process.
Given a prefix, return the command that starts with subcmd_prefix.
Provide a short help message for a subcmd.
Adds a subcmd callback to the cmdlist.
Runs the specified subcmd with the specified arg.
Show the commands that belong to a given category.
Displays user input, and returns filename and line number.
Given a frame, returns the frame that is being debugged.
Get an integer from an argument.
Set a boolean variable to be on when the debugger is activated.
Add an integer value to the debugger settings.
Run show_onoff on the debugger settings.
Show the current value of the show_int variable.
Show the value of the variable with the given name.
Check if the line is a definition statement.
Check if the line is a class definition.
Overrides threading.Thread.run to catch and report a debugger quit exception.
Determine if we should use the default background color.
Determine if RGB is dark.
Returns the name, filename, firstlineno from a frame.
Returns a list of all available display names.
Returns a list of display objects that match the signature and frame.
Read a complete message from the socket.
Print a debug message.
This is the entry point for debugging.
Pretty-print an array.
Look up the name of a signal by its absolute number.
Look up a signal class by name.
Return a canonic signal name based on the name number of the signal.
Set a handler for a signal.
Check if the supplied signature is valid, and adjust it if not.
Print out information about a signal.
Handle the action of a signal.
This method is called when the user wants to change the print method.
This method is called when the process exits.
Convert a file name to a module name.
Search for a filename in one of the given directories.
Tries to determine whether the given Python script is valid.
Returns a list of all the pyfiles for a given caller.
Writes the given message to the output.
The main entry point.
Wrap the given list of commands in a column.
Closes the connection.
Pack message and write it to the socket.
Completes an identifier.
Adds a string to the command queue.
Adds one or more frames to the ignore filter.
Return canonic file name for given filename.
Returns the filename for a given file name or None if no filename is given.
Check if we have already been started with the trace_dispatch hook.
Check if a stop event occurs at this line.
Sets the next frame to the given frame :param frame: frame to set :type frame
Print out a stack trace for the given function.
Removes a breakpoint from the list.
Delete a breakpoint by number.
Enables or disables all breakpoints.
Enables or disables a breakpoint by number.
Delete all breakpoints by filename and line number.
Opens an input file.
Read a line from the input.
Prompt user for confirmation.
Return the query as a future.
Restore the original login.
Loads a module and returns a boolean indicating if the user is logged in.
Generator that iterates over a set of documents.
Creates a temporary file from a transcode file.
Normalize data in a stream to a standard date format.
Convert a date string to a float.
Try to guess the encoding of a FTF file.
Generator that yields JSON objects from a file.
Transcode a file into utf8 encoding.
Opens a CSV file from some how.py.
Read data from CSV file.
Command line interface for the transcode tool.
Save a token for a given domain.
Make a request to the Luminoso API.
Make a DELETE request.
Get the root url of an URL.
Saves a token to a file.
Make a JSON request :param req_type: :param url: :param kwargs:
Make a POST request. :param path: :param data: :param content_type
Get documentation for the current user :returns: documentation for the current user :rtype:
Get the raw text of a URL.
Writes the result list to the csv file.
Reads and parses the params from a file and a json body.
Simplify a single document.
Create a project and upload docs to it.
Upload docs for a project.
Upload a stream of documents to a project :param stream: stream to upload :param server
Upload a file to a stream :param filename: :param server: :param account:
Main entry point for command line usage.
Create an instance of this class from a username and password.
Perform login, using HTTP POST.
Login to the PyLinky web server.
Fetches the data from the API and stores it in the self.data dict.
Prepares the page to be rendered.
Initialize the view. :returns: None :rtype: None :raises: None.
Handle GET requests.
Called when a new message is received from the server.
Update menu links. :param change: :return:.
Returns a list of the default handler objects.
Called when a JSON message is received from the server.
Called when the DOM is modified.
Create a subelement for the widget.
Initializes the widget to be displayed.
Destroy the web component.
Add a child widget to this element.
Remove a widget from the component.
Iterator over all child widgets.
Set the value of an attribute.
Updates the proxy object with the given changes :param change: :return:.
Notify about a modified event.
Returns a list of nodes matching the given xpath query.
Sets the source of the widget.
Clears the widget and sets the html source.
Change the mode of the block.
Called when a new block is created.
Create or destroy children of this block.
Reads the contents of the specified path.
Print an error message and flush the output to stderr.
Print an error message and flush the stdout.
Given a product name, returns the product with that name.
Get a new session from the API and store it in the self.session.
Resets the session store.
Retrieves a list of stores matching a search term.
This method allows you to change the delivery system of your account.
Get a menu from a store.
Adds an item to the table's table's table :param item: :
Use this method to add a ping to an item. :param item: :param quantity
Adds a side to an item :param item: :param quantity: :param item
Removes an item from the search index Args: idx (int): The index of the
This method allows you to change the payment method of your account.
This method is used to process payment.
make a GET request :param path: Path to retrieve :param kwargs: :param kwargs
Generic POST request.
Makes a call to the API and returns the response.
Add an item to the menu.
Add the exit item to the container.
Draw text on screen.
Go to the next position in the list.
Selects the currently selected item :returns: None :rtype: None :raises:
Parse the old menu data from the screen.
Convert a string column to a datetime.
Convert datetime in column to string.
Apply a basic math operation to column_1 and column_2 in the dataframe df.
Calculates the sum of values in a column Parameters ---------- df : pandas.DataFrame The
Removes old cache entries from the given `cachedir`.
Adds an offset to a date object.
Returns a list of optimization updates.
Returns a list of training parameters.
Optimize the gradients of the parameters Parameters ---------- params : list of parameters The parameters to optimize
Compute the first glimpse filter.
Prepares the network.
Compute a tensor from the encoder, decoder, autoencoder, error rate and cross entropy.
Apply a function to each element of the Dataset.
Vectorize the dataset's target.
Print training, validation, and test sets.
Train the network.
Samples from one or more input.
Compute the alignments given the previous state and precomputed values.
Computes the sum of all context vectors.
Concatenates the variables along a given axis.
Pad the dataset with zeros at the end.
Generator function to calculate the RMS property of a model Parameters ---------- params : list of 2
Report end time to stdout.
Computes the cost of the computation of data_x Parameters ---------- data_x :
Runs each iteration of the iterator, and saves the result to file.
Builds the variables used for training the network.
Performs a single scan of the loop.
Calculates the momentum of the model Parameters ---------- params : list of numpy.array The
If the training flag is active, then_branch is active else_branch is active.
Sets the number of batches to skip.
Loads parameters from file.
Train the model. :param train_set: :param valid_set: :param
Run one epoch of the training :param epoch: :param train_set: :param
Runs a single valid step.
Print a report of the current and new best scores.
Gets the training and validation sets for the given data_split.
Apply a function to each element of the network.
Print report of used and defined parameters.
Creates a var op.
Creates a list of variables from the given dataset.
Construct a shared array from an integer, float, or array of floats.
Takes a sequence of encoding layer names and a sequence of encoding layers.
Takes a sequence of layers and adds them to the stack.
Encodes an input tensor with NeuralNet.
Generates the decoding layer for each layer in the network Parameters ---------- x : numpy.array
Create a 2D gaussian with mean and variance Parameters ---------- dim : int The dimension of the
Registers a new layer with all its attributes.
Computes the mean of the hidden output of each layer.
Returns a list of all parameters.
Sets up the input and test variables.
Compute the output of a pipeline.
Save parameters to file.
Loads parameters from file.
Print the report to stdout.
Registers new updates.
Registers training updates.
Register one or more monitors.
Compute the multiple L2 norm of a list of tensors.
Writes one element of ` elt_to_pickle` to `file_obj`.
Yields a list of dicts from a file-like object.
Loads parameters from file.
Decodes the given state and returns it as a dictionary.
Parse X-credentials.
Helper method to remove the X_Request_elements parameter.
View function that handles user login.
Returns a copy of the given dictionary where the keys are all the same and the values are
Convert a list of dicts to a dictionary.
Parses the body of a query string as JSON.
Returns a class that should be imported as a provider.
Create a cookie to be sent to the browser.
Saves the session data to the cookie.
Get cookie data.
Data to be sent to the client.
Generates a signature based on the provided parts.
Serialize the value and return a string with the signature.
Check if the expiration time is too long.
Returns True if the expiration time is greater than the given number of seconds.
Return a string representation of the provider.
Check if the content is a binary string.
Returns the content of the response.
Get user info from bitbucket.
Login to Gae using the identifier.
Generate a session key for the given key.
Sets the value of a session key.
Generate a csrf key from a secret string.
Log a message at the given level.
Determine whether the given HTTP status is in the given category.
Split url into base and query parts.
Set CORS headers on the response.
Given an app instance, return a dictionary of keyword arguments.
Return a readable string representation of an object.
Ensures an object is iterable.
Test if two numbers are close within a given tolerance.
Deserializes an audio segment from a binary string.
Create an audiosegment from a file.
Create an audio segment from a numpy array.
Reduce this audio segment with the others.
Returns a serialized form of the object.
Given a list of candidate offsets and a list of offset fronts, returns the ID of
Given a list of onset_sample_idx, return the front index that is closest
Return the offset front id after the given onset and offset fronts.
Takes a list of onsets and a list of offsets and returns the ID of the
Given a list of onset fronts, and a list of offset fronts, return
Return front index or - 1 if front is empty.
Given a list of onset fronts, yields all of the front ids that have not
Given a list of onsets and offsets, returns a list of tuples where the first element
Removes overlapping segments from fronts.
Remove fronts that are too small.
Merge adjacent segments.
Split mask into separate masks at a given threshold Parameters ---------- mask : list of 2D array
Downsample one or more of the mask's stft's indexes.
Run one task to generate a PSD for each fft.
A butterworth bandpass filter.
Convenience function to create a low-pass filter.
Converts a list of data rows to a tf.input matrix and number of outcomes
Expands the dataset and returns a modified dataset.
Compare two lists, ignoring elements that don't appear in the same order.
Load the confusion matrices from the given audit file.
Converts a list of data rows to a tf matrix of outcomes Parameters ---------- data :
Update pip, pip, index url from config files.
Checks all files in requirements.txt are valid.
Raises an exception if an error occurs.
Get basic information about the stream.
Open the LSL stream for reading.
Create a child element :param name: Name of the child element :type name: str
Return the next sibling of this element.
Return the previous sibling of an element.
Set the name of the element. :param name: name to set :type name:
Set the value of the LSL.
Append a child element to the end of this element.
Prepend a child element to the current element :param name: Name of the child
Create a copy of this element.
Return a copy of this element with new element preserving order.
Removes a child from the list.
Return the results of the resolver.
pair a word with a list of tokens.
Do a tab-completion of the given query.
Compute edge n-grams from token.
Iterate over a pipeline using a list of processors.
Return an iterator that iterates over the elements of an iterable, preserving the order.
Make a Fuzzy string.
Do a fuzzy search on the given word.
Do a Fuzzy Index of a word.
Extend helper.results_extrapoling_relations by adding them to the
Displays the help for this agent.
Display the list of redis databases.
Get or set a database key.
Performs geohash on a latitude and longitude.
Index a document by _id.
Get the best score of a word.
Sends an API request, returning a response.
Takes a list of requests and returns a list of responses.
Extracts bits from an array of words starting at start and ending at end.
Interpret a HArray to its bits representation.
Converts a list of values to a slice of the given width.
Find all files matching a glob pattern in a directory.
Test whether a value is contained in an iterable.
Return a list of statements that match the bodyfn.
Returns the logarithm of x.
Checks if a number is a power of two.
Create a case statement.
Defines a default statement.
Register a set of interfaces to a VCD object.
Called before the simulation starts.
Log that a change has occurred :param nowtime: :param sig: :param next
Process a method by calling ashdl on the top of the method body.
Autoadd agents to a unit.
Return the current parent clk, or None if none is set.
Yields items from an iterable that do not contain any duplicates.
Group elements in a collection by a function.
Flatten an iterable.
Merge nested if statements from nested if statements.
Removes all unconnected signals from a netlist.
Check if the function is a simple assignment.
Tries to merge two HDL Process objects.
Given a list of processes, sort them according to their rank.
Add a request to the stack.
Returns the name of the output of a processed HDL statement.
Cuts off all drivers of a signal.
Synthesize an entity.
Returns the maximum ID of a Stm or waitstm.
Returns the maximum number of stmid for a statement.
Write data to the interface.
Make sure we have the right direction.
Loads the declarations of the interface.
Returns a list of signals for this interface.
Returns the physical name of the entity.
Returns the bit length of the record.
Return the sensitivity of an edge based on an operator.
Converts `sigorval` to `totype`.
Reinterprets the bits of a hstructt structure.
Return the length of the full word index between start and end.
Group words by a word index.
Pack data into a multi-word word word field.
Cleans the meta data of all signals.
Discover enclosures for a list of statements.
Discover the casual elements of a sequence of signals.
Get the right context for this signal.
Process the reduce operation.
Merge the contents of another ConfigObj into this ConfigObj.
Determine if a list of stmsa and stmsb are in a merge statement
Merge a list of INDRA Statements into a single list of INDRA State
Merge two lists into a single list.
Tries to reduce a list of HDL statements.
Triggered when the parent event of the tab is dependent.
Sets the parent Stm to the current one.
Registers a set of stements for a statement Parameters ---------- statements : list The list
Destroy a driver by removing it from its inputs, and outputs.
Cleans up all of the private interfaces of the entity.
Recursively walk through all fields of a sigorval.
Convert self to signed.
Applies sensitivity analysis to a process.
Check if a value is in conds.
Removes a Connect from a source or destination :param simunit: :param subsim
Convert a Python value into a signed integer.
Process a hwprocess.
Evaluates the value of a param.
Set the statice value.
Convert a map of interface fields to struct fields.
Removes all non-zero bits from the memory.
Get the right driver for the index of the driver.
Create a copy of this object from a Python object.
Wrapper function to auto-cast signal types to specific types.
Cast a signal or value to the specified type.
Iterate through all the parameters of the specified interface and add them to the supplied discovered list.
Connect a packed bit array from one interface to another.
pack interface into signature.
Iterates over all registered entities to produce a Tortl object.
Registers an interface in the interface list :param iname: :param intf:
Try to reduce the array-like to the same dtype as the array-like.
Return a copy of sig if `val` is not the same type as `sig`.
Returns a new instance of this namescope.
Serializes an object for serialization.
Get the base condition of a driver.
Simulate a time value.
Get a constant name for the given value.
If this signal is a child of another signal, set the parent to None.
Load from an array of data.
Loads the structure from a HDU.
Load data from a HDU type.
Returns the width of the array item.
Walks the tree starting at the given offset, yielding all elements starting at that
Signs a value with a fixed width.
Return the indentation for the given indent number.
Checks if the given name is available for the given object and raises an error if not
Registers a parameter in this instance.
Update the parameters of otherobj with parameters from this object.
Registers a unit object under the parent.
Registers an interface on this object.
Registers the given array with the given name.
Return the single driver driver.
Calculates the statice value of each operands.
Adds an operator to the list of drivers.
Add an indent to the context.
Tries to connect to an intfname on the underlying unit.
Connects the clk to all the units in the object.
Propagate the clk rst number to all units.
Propagate through all the units in the clk.
Propagate the number of units in the RST object.
Connect all units to RST.
Iterate over the bits of a signal.
Make sure we'll be able to serialize obj.
A helper function to serialize and evaluate a single obj. :param parentunit: parent unit
Serialize and evaluate the params uniq. :param parentunit: :param isdeclaration:
Returns the full name of the object.
Add an association to each of the objects in this collection.
Convert a Tortl unit to a SimModel object.
reconnect unitsignalstomodel is a wrapper method to reconnect unitsignalstom
Run a model of stimulus functions over a given period.
Initialize a user callback.
Connect this driver to another signal.
Register this signal with the given direction.
Connect another direction to this one.
Returns the direction of this direction, either in or out.
Determine if the given signal is an isev dependent on the given process.
Adds a process to the event queue.
Adds a processor function to the schedule.
schedule a combupdated one event.
Schedules the sequence process to run.
Return a tuple of callables that conflict with a new value.
Run one or more combination processes.
Run the sequence processes.
Applies the values to the time series.
Return a copy of the signal.
Applies a new value to a simulation signal.
Adds a process to the event queue.
Simulate a unit until a given number of time steps.
Return a list of stms that do not contain any operator.
Calculates the distance between two hash objects.
Calculate the average hash of an image.
Calculates the distance between two images.
Setup a viziode device.
Update the current power state.
Mutes the volume of the device.
volume up.
volume down.
Set the volume level of the motor.
Reset the board to its default state.
Creates a piece at the given square.
Removes a piece at the given square.
Sets a piece at a given square.
Checks if a move is suicide or is check bydropping pawn.
Checks if the turn was suicide.
Checks if game is over.
Checks if the game is check.
Determine if a zone is a repetition of another zone.
Pop a move from the move stack.
Return a list of color codes representing the sfen of the game.
Creates a move and puts it on the move stack.
Calculates the zob} hash of the board, and returns it.
Returns the symbol of the piece.
Create a piece from a symbol.
Returns the full name of the piece.
Creates a piece from an usi list.
Yields a list of commits.
Parse a single commit line.
Executes model from command line with given config.
Generates a YAML configuration file.
Cast a value to the correct type.
Returns a list of dates between two dates.
Parse a date from a string.
Load a currency file.
Set missing values to None.
Given a currency and date, return the exchange rate for that currency.
Animate the contents of a frame list.
Reads an n-th record from the file.
Write a record of length n to the file.
Returns a map of words from start to end.
Returns the comments as a string.
Closes the DAF file.
Generate a sequence of positions from a TDB and a TDB2 sequence.
Closes the DAF file.
Reads the coefficients from the DAF file.
Checks whether a call is within logging statement.
Handle both binary operation and add operation.
Check if the keys are in the whitelist.
Add `fstring_violation` if logger is enabled.
Check if the keyword is in the whitelist.
Add except handler name to the list of except handler names.
Return the logging level of a function node.
Get the except handler name for a node.
Returns an ID attribute for the given value.
Return ``True`` if the given node is a bare exception.
Check whether an exception was raised in the context of the current logging level.
Removes a file from the database if it exists.
Render PDF from template.
Renders the PDF to a response.
Quotes a string to be used as an HTTP URL.
Configures the options of the specified module.
Transform a string from camelCase to underscore_case.
Ensures that every document in the collection has a unique index.
Loads and parses a file as a list of pricemodel objects.
Reads the content of a file and returns a list of lines.
Parse a line of text and return a pricemodel.
Translates a symbol to another symbol.
Loads all symbol maps from the repository.
Gets the default session.
Import prices from csv file :param filepath: Path to CSV file :type filepath: str
Get the latest price of a security symbol.
Download prices for a currency.
Prunes a security symbol. :param symbol: security symbol to delete :param all
Return the default session for the price database.
Add a new map to the database.
List available symbol maps.
Get a symbol map by its identifier.
Reads a CSV file and returns a list of lines.
Maps an entity to a pricemodel.
Converts a security model to a price object :param model: :return:.
Read config from file.
Returns the absolute path to the config file.
Create the user config file.
Get the full path to the config file.
Returns the contents of the file in memory.
Set an option in the config file.
Get an option value from the configuration.
Save the current configuration to a file.
Parses the given symbol and returns namespace and mnemonic.
Adds a price to the price map :param price: price to add :type price
Download the price of a symbol, currency, and agent.
Get or create the session object.
Get all the prices for a given date and currency :param date: date :param currency
Get a list of prices on a certain date :param on_date: :param namespace
Returns the number of security symbols that have been deleted.
Delete all prices for a security symbol.
Downloads the price of a symbol from an agent in a specific currency :param symbol:
Returns a list of security objects.
Return a partial state.
Updates the call parameters for all child nodes.
Iterate over all child objects.
Test whether a student has a student's choice.
Returns the items that are not empty.
Gets the appropriate parser for the given extension attribute and tree.
Test whether the provided message is in the correct context loop.
Check whether the given state contains any context with the correct name.
Check whether a student's part is present in the student's part list.
Check a student part by its index.
Calculates the true phase of a FIT.
Initialize the ldap3 login manager.
Adds an LDAP server to the pool.
Removes an LDAP connection from the stack.
Destroys the main connection from the context.
Authenticate the username and password. :param username: :param password: :param username
Attempts to bind to the LDAP server using the username and password.
Return a list of groups that user is a member of.
Get information about a user.
Get the user info for a given username.
Get an LDAP object.
Returns a connection to the LDAP manager.
Make a connection to the AMQP service.
Make an ldap3 connection.
Destroy a connection.
Performs a search against the container and returns a list of results.
search user by name or id.
search for all artifacts in a collection.
a method to call the _speak method of the client.
Announces the message if a quiet flag is set.
update secrets from environment variables.
update the headers of the request :param fields: :param fields: :return:.
check if client has any of our secrets.
download file from url and save it to file_name.
stream from url with given headers.
update token in headers.
Gets or creates a folder.
Reads a message from a response.
get bucket from s3 and create it if it doesn't exist.
Updates self. secrets and self.base.
Initializes the authentication client.
Loads the secrets from the settings.
List all available logs.
Return a list of all blob images on S3 :rtype: list.
create an endpoint folder :param endpoint_id: endpoint id :param folder: folder to
Initializes the transfer client.
return a list of all available containers.
Shows the current status of the given backend.
add new client secrets.
remove a variable from the client secrets.
Enable or disable a backend.
Delete a backend from the client secrets.
Set and update secrets base.
Generate a basic auth header.
Generates the signature of the message :param payload: :param secret: :return:
Generates the HTTP header signature.
delete a url :param url: url to delete :param headers: headers to delete :
head an url.
A paginated GET request. :param url: url to retrieve :type url: str
verify if SSL check is enabled.
remove an image :param image: :param force: :param force: :param force
Get lookup dictionary from version file.
Returns a list of requirements for each installed module.
get singularity version.
check_install will return True if the package is installed, False otherwise.
Return the path to the installdir.
Returns the thumbnail path for the Windows Registry.
Runs a command and returns its output.
Get metadata from image file.
update user's secrets :returns: None :rtype: None :raises: None
write the response to a file.
Destroy and exit.
List container logs.
Returns a list of all collections in the account.
update secrets from environment variables.
Run the command with an IPython notebook.
get manifests from a repository :param repo_name: name of the manifest to retrieve
get manifest for given repo_name :param repo_name: repo name :param digest
Return the path to the download cache directory.
Extract environment variables from config.
update api_base, artifacts, and job attributes.
Updates self.token with new secrets.
Generates a dictionary of metadata for the job.
Get client secrets from settings.
get and update a setting.
Update a setting. :param name: Name of the setting :type name: str :
Generate signature for authorization request :param names: :param payload: :param request_type
List all known Builders for a given project and zone :param project: The name of
load templates by name :param name: Name of templates to load :type name: str
get the ip address of a network :param str name: Name of the network :param
create a new instance and insert it into the database.
Returns a list of all available containers on the bucket.
return a list of all available containers in the bucket.
This is the entry point for the sregistry CLI.
The entry point for the sregistry CLI.
Initialize the database with the registry.
get build template from installdir.
list all the endpoints :param query: :param query: :param query: :param
get list of files from transfer api :param endpoint: endpoint to list :param query:
share a user with your account.
Read the client secrets from the secrets file.
Get the Google Storage services.
Deletes an object from a bucket.
delete an object from the bucket.
Destroy an instance :param name: Name of the instance to destroy :type name: str
Extract a dictionary of subparsers from an argparse parser.
Generate list of descriptor, noun, noun, and number.
Returns the path to a temporary directory in which to store data.
Extract a TAR archive into a folder.
Extract a tar archive to a folder.
Returns a hash of the contents of a file.
read a file and return its contents :param filename: file name :type filename: str
Read JSON data from file.
clean up files if they exist.
upload an image to S3 :param path: path to upload :param name: name
Get a collection or create it if it doesn't exist.
Get a collection by name.
Get a container by name and collection ID.
get all images of a container :param query: :param query: :param query:
Return a dictionary of metadata for a named collection.
rename a container :param image_name: name of the container :type path: str
move a container to a new location :param image_name: name of the container to
remove a container from the filesystem :param image_name: name of the container to delete
Returns the first line of the header of a recipe.
Locate a single recipe by filename.
create a build package from a list of files :param package_files: list of files
Update a blob's metadata.
Returns a human readable name for a container.
Return whether we should use color or not.
Check if the level is one of'abort' or 'error' :param level:
Writes the given message to the given stream.
Print a table of data.
add an image to the transfer.
get a template by name.
get manifest by repository name and tag :param repo_name: name of image to get
get a build template from the installdir :param name: name of the template
read secrets from config and update self. secrets.
Context manager to catch and report errors in an error response.
Create a proxy for a file-like object.
Returns the URL to the grav avatar for the given user or email.
Returns the url to view a gravbody.
Checks if user has gravedir for a given email.
Returns the url of a gravbody profile.
Generates blocks of chimera data.
Make a graph from a chimera graph of blocks.
Given a list of smiles, return a set of Resonance objects.
Returns a list of ResonanceMolsupplier objects.
Applies a transform to each molecule.
Return the canonical atom of the molecule.
Validate a list of smiles :param smiles: list of smiles to validate :
Standardize a list of smiles.
Enumerate tautomers from a list of smiles.
Canonicalize a list of smiles.
Get the parent Tautomer of the molecule.
Returns the parent fragment of the mol.
Removes stereo chem from the parent of the molecule Parameters ---------- mol :
Set the isotope of the molecule to the parent of the molecule.
Returns the parent molecule's charge.
Main entry point for the command line interface.
Remove one or more fragments from the mol.
Choose the largest residue from the molecule.
Computes an approximation to the probability density function using IPython's integrate function.
Get all the members of the organization.
Get the teams of an organization.
Returns a list of all repos in the organization :param repo_type: name of repo
Returns the total number of peers in a repository.
Get Open, closed, closed, closed, closed, and closed pull requests.
Get all issues for a given repo.
Returns the readme of a repository.
Get the license for the given repo.
Returns a list of commits in the repository.
Writes the organization as a JSON file.
Writes the total number of repos, members, and teams to a file.
Writes the list of languages to a file.
Make sure the directory exists.
Removes all languages with the given date from the given file.
Returns a list of all GitHub orgs that are a member of this project.
Create a GitHub session.
Check if the number of API calls is too long.
Connect to GnuPG.
Given a list of orgs, or a list of orgs, or a list of
Get or create an organization.
Writes stargazers to a file.
Create a Project object from a Gitlab instance.
Returns a dictionary object to represent the license.
Get all the data from all the repositories in the organization.
Get all releases for a given repo.
Get all referrers for a given repo.
Get data from one of the sources.
Writes a JSON file.
Writes referrers, views and clones to file.
Checks the data redundancy of a CSV file.
Writes data to a file.
Writes referrers to file.
Load a JSON file and yield records.
Given a url and a key, return a generator of records.
Process a JSON file or URL.
Authenticate to GitHub.
Get all the members of the organization.
Writes the case data to a file.
Connect to a stashy server.
Connect to a Gitlab server.
Yield projects from repositories list.
Compute the number of labor hours for a person given a sloc :param sloc
Removes all null values from a dictionary.
Read a GQL file.
Auxiliary method to await a reset.
Countdown the number of failed jobs.
Opens the file at the given filepath or updates the data if updatePath is True.
Save data to file.
Create a VSSConnection object.
Create a project analysis client.
Create a tfs client for a given TFS URL.
Create a Git client for a given TFS URL.
Create a tfvc client.
Get Git repositories for a given project.
Get list of tfvc repositories for a project :param url: tfvc url :param
Get the number of commits in a given year.
Calculate the total number of commits starting_commits.
Writes the commits to a file.
Log a stat and value.
Log a histogram of the current stat with the given value.
Rollup the leader. This method is called at the end of each call.
Return the enum value from the database.
Convert value to enum value.
Convert the value to something we can store in the database.
Returns a set of nodes that match the given path.
Given a list of symbols, return a dictionary where the keys are lists of terms and the
Returns the mean value of the counter.
Mark a given value as being used in the future.
Calculates the mean rate based on the current elapsed time.
Set the value of the time series to ``value`` before the last one.
Serialize and send a metric.
Serialize a metric to a list of strings.
Format a metric name and value as a string.
Send one metric at a time.
Given a section and an option, return the value of that section.
Ensure data is JSON safe.
Get the value of an option, set it to the default if it doesn't exist
Returns a map from ledger codes to guid.
Get divisions available to the authenticated user.
Map exact invoice numbers to foreign invoice numbers :param exact_ invoice_numbers: :param
Get a view instance.
Form view factory. :param obj obj obj obj obj: :param obj obj obj obj
Returns a view function that calls the view's HTTP methods.
Returns an API view.
Returns an instance of the generic API view configured with the given properties.
Returns a viewset for the given model.
Create an asyncio.Stream from a file descriptor.
Called when the stream is ready to receive data.
Pause reading and call thesoon method to close the connection.
Watch a file for changes.
Remove a watch from the watchlist.
Setup a watch object.
Setup the event stream and transport.
Parse and return an `Event` object.
Trigger the touch event.
Calculate interval from short_interval, long_interval, and short_interval.
Update the interval of the short and long timer, and update the short and long timer.
Closes all open connections.
Connect to annsqd server.
Queries thelookupd endpoint.
Set max in flight state.
Called when we've been giving up a message.
Adds a callback to the event identified by name :param name: The name of the
Removes a listener function :param name: The name of the listener function :type name
Trigger all registered listeners of the given name.
Publish a message to a topic.
Sets the feature transform for the training data.
Runs prediction on the input data.
Remove non-paired fastq pairs.
Reads a depth file and returns a dictionary mapping each depth to the number of reads per
Sets the path to a template file.
Set the channel names for the main dataframe :param str input_suffix: The channel name
Render a Jinja2 template with the context.
Returns a string containing the template to be rendered.
Update the main_forks attribute.
Updates this element's attributes using the supplied dictionary of key-value pairs.
Set the secondary inputs of a channel.
Parse the contigs from the assembly file.
Calculates the content of a sequence based on the sequence and length Parameters ---------- sequence :
Returns the total number of assembly entries in filtered_ids.
Writes all contigs that are not in filtered_ids to output_file.
Writes the report to a file.
Removes all forks from the given text.
Performs insanity checks on a pipeline string.
Determine the lane of a source in a fork process.
Given a string of lanes, return a list of lanes.
Given a list of dictionaries, return a list of dictionaries where each dictionary contains a linear connection
Adds unique identifiers to a pipeline string.
Removes duplicates from a pipeline's list of tags.
Check that the required files exist.
Map header names to positions.
Returns the HMS of a string.
Convert size to float.
Reads the log file and creates a dictionary of process name, tag, and content.
Clear information about the processes.
Updates barrier status.
Retrieve the log from the file at the given path.
Calculate cpu and mem usage warnings.
Update the retry counter.
Display the overview of the screen.
Move the cursor up or down.
Move the screen right left in the given direction.
Returns the last n lines of the log file.
Reads the static info file for the pipeline in the static directory.
Reads the DAG file as JSON and returns it as a dictionary.
Generate a hash of the pipeline id and the directory id.
Returns the path to the next pipeline in the log file.
Create a sample from an assembly file.
Create and run an automatic pipeline for all input_processes.
Lists all registered recipe classes.
Check if the pipeline string is valid.
Builds an upstream task pipeline from a list of process descriptions.
Builds a task pipeline from a list of process descriptions.
Generates and runs the auto-pipeline.
Constructs a string representation of a component.
Writes the report to a json file.
Parse and write log files.
Fixes contig names in the assembly file.
Clean up fastq files.
Parses a list of files.
Parses the given file. :param fl: file to parse :type fl: str
Given a contig string, return the contig ID.
Writes the plot data to a JSON file.
Parse the assembly file into a dictionary of contigs.
Calculate summary stats for each contig.
Returns a list of contigs with the number of contigs in the window.
Calculates the gc of a sequence length.
Returns a list of gc_sliding.
Create a fastq file for a sample.
write json report for given sample and data :param sample_id: sample id :param
Parse the Bowtie log.
Given a process name, return the process name and directives.
Adds a dependency to the pipeline.
Given a template and a list of parent_lanes, returns True if the tree is
Builds the CSV header.
Build the footer.
Sets up the initial state of the CWL process.
Set the secondary channels to the default values.
Set the status channels of the processes.
Returns a string with the manifest file.
Sets configuration parameters for all processes.
Save a DAG as a json file.
Writes all the configuration files to a JSON file.
Export params to JSON.
Export directives from processes to JSON.
Builds the project.
Parse kmer option and return a list of k-mers.
Get the report id from the log file.
Update the trace_queue attribute to reflect the contents of the trace file.
Updates self.log_watch, self.log_size, self.log_
Send a live report from the queue.
Create a live report from the given report id.
Closes the connection to the broadcast server.
Convert adapter fasta file to adatpers format.
Calculate per-c hashes from Mash output.
Print msg with color_label. :param color_label: color label to print :
Process a process collector.
Get the range of a qual string.
Filter the contigs in an assembly file based on the minimum coverage.
Extract the number of contigs from an assembly file.
Filter and filter contigs based on coverage table.
Convert camel case to snake case.
Collects a map of camel case class names to camel case classes.
Create JSON file of phylogenetic trees.
Map W to data using vq function Parameters ---------- w : np.array The vq
Apply a median filter to the data.
Computes a gaussian signal with m degrees of freedom.
Computes the square root of x.
Computes the number of nodes in the network.
Gaussian filter along one or more axes Parameters ---------- X : 2D array The 2D array
Computes the number of nodes in the network.
Return a circular shift of the given array.
One-hot embedded space.
Plots formatting for plotting. Parameters ---------- title : str Name of the plot to plot
Plots boundaries for the given est_file Parameters ---------- all_boundaries : list of
Plots one or more labels for the given estimations Parameters ---------- all_labels :
Given a feature vector and a set of indices, return a list of featuring segments.
Given a list of feature segments, return a 2D array containing the maximum number of features
Fit the model to the data Parameters ---------- X : 2D array y : 2D array
Read reference information from a JAM file.
Given a jam file and a list of labels, return the estimation Parameters ---------- j
Returns a list of all available boundary algorithms.
Extract a configuration dictionary from an annotation and framesync.
Get all audio and estimations in a directory.
Reads hier references from a JAM file.
Returns the duration in seconds of the features file.
Convert times and labels to MireX format.
Get the path of the audio file in the dataset Parameters ---------- dir : str The path to
Aligns a song with another, using librosa's segmentation.
Calculates the times and frames for each audio track.
Reads the annotation beats from the reference file.
Compute the beatsync features at each frame.
Returns a list of the names of all parameters that are not explicitly defined in the config.
Compute framesync times using librosa's frames_to_time function.
Return the times of all framesynced and annualbeatsynced features.
Returns the features of the audio file.
Returns a feature object from the features attribute.
Preprocess and normalize the data.
Main entry point for command line usage.
Print the mean of the results.
Compute the information gain of an annotation and estimated time series.
Process a track file and return a list of genotype calls.
Generates the name of the results file.
Computes all the features of the audio file struct.
Compute all features in a dataset Parameters ---------- in_path : str The path of the input
Calculate the cost of a gaussian distribution Parameters ---------- X : array-like, shape [n
Returns the logarithm of a number.
Normalize a sequence of values to be at least min and max.
Get frames at a given duration from an audio stream.
Removes intervals from times that are not in labels Parameters ---------- times : array_like,
Sonify a set of clicks.
Synchronize new_bound_idxs with old_bound_idxs.
Compute the silence times for each est_idxs Parameters ---------- est_idxs :
Align the end of each hier by the number of thres.
Calculate the distance between each element of the sequence Parameters ---------- idx : int The number of elements
Estimate k-th position using K-Nee algorithm Parameters ---------- th : float number
Returns the clustered data Parameters ---------- X : array-like, shape = (n_
Runs the K-means algorithm :param x: :param k: :param k
Compute the Bayesian Information Correlation Coefficient Parameters ---------- d : array-like,
Returns the magnitude of a number.
Converts a json file to a 2D array of segment bounds Parameters ---------- segments_json
Reads bounds from a JSON file and converts it to a 2D array Parameters ---------- bounds
Converts a json file to a numpy array of labels Parameters ---------- segments_json : json
Reads a json file and returns a numpy array of beats.
Compute the 2D Fourier transform using FFT.
Computes the labels of the time series x according to the rank of rank.
Filter g by activation matrix r :param g: 2D array of 2D arrays of
Returns the module associated with the boundaries_id.
Returns the module containing the given labels id.
Runs the segmentation on an audio file.
Run a flat audio file.
The entry point for the spool script.
A context manager to set a task from a queue.
Spool out words from an iterable.
Read lines from `inputstream` and send them to `target`.
Returns the translation table for a given language.
Print a translation table for a given language.
Removes nodes and edges from a network.
Save a network as a Pandas HDF5 file.
Create a network from a Pandas HDF5 file.
Processes a single node from API response.
Make an OSM query.
Builds and returns the query string of a node.
Checks if the value is a regular expression.
Compares the given value with the given expectation :param value: :param expectation: :
Test if `expr` is equal to `value`.
Trigger a method from an instance.
Returns the matcher with the given name.
Initialize a new matcher with the given arguments.
Sets the body of the response.
Sets the body of the response as JSON.
Set the value of a key to a new value.
Append function objects to the target.
Trigger a request from an instance.
Set the headers of the request.
Ensures that the specified HTTP header names are present in the request.
Checks if the given HTTP headers are present in the response.
Adds the given params to the request's URL.
Sets the body of the request.
Add a matcher for JSON requests.
Set the XML content for the current request.
Reads a file from the local filesystem :param path: Path to the file :type
Saves the current status to the persistent storage.
Sets the error of this ServicePackageQuotaHistoryResponse.
Create a reply to this request.
Determine if a request matches this filter.
Sets a mock engine for this service.
Create a mock object.
Remove a mock from the mock list.
Activate the mock engine.
Disable the mock engine.
Returns True if network should be used, False otherwise.
Check if the request matches any filters.
Returns a copy of this request.
Context manager to temporarily disable an engine.
Add one or more interceptors to the event loop.
Removes an interceptors by name :param name: name of the interceptors to remove
Retrieves a value from the connection's settings.
Returns the SQL to decrypt the column.
Override pre_save to replace the original value with the value of the original field.
Returns the placeholder name for the SQL statement.
Get a column from the model's database.
Returns the placeholder name for the encrypt sql statement.
Calculate the regression for a given slope and intercept.
Calculates the inverse of the covariance matrix.
Recursively recurse into the leaves of the tree Parameters ---------- full_matrix : bool, optional
Calculates the averages of the current tree.
Calculates the total variance of the tree.
Calculates the regression of the time series at a given slope.
Calculate the integral merger rate of a big number Parameters ---------- t : array-like
Calculates the number of branches in the tree.
Calculates the cost of a node at a given time.
Attach clades to the tree.
Normalize profiles. Parameters ---------- in_profile : np.ndarray The profile to normalize Returns -
setter to _gtr.
Set Gtr object for analysis.
Determine the length of the sequence.
Adds sequences to nodes if they are not already present in the VCF file.
Prepares the entire tree and stores it in _leaves_lookup.
Make sure that the tree is empty.
Calculate the dist2root of each clade in the tree.
Calculates the mutation matrix of a branch.
Returns the reduced sequence. If include_additional_constant_sites is set to True,
Calculates theitch state of a node at the given position Parameters ---------- node : `
Calculates the LH of a sequence in the tree at the given position.
Calculates the ancestral likelihood of the tree.
Calculates the maximum branch length for a given node.
Find the optimal branch length for a given node.
Reconstruct the alignment of all clades in the tree.
r"""Compute the q-likelihood. Parameters ---------- q : array-like, shape
Convenience method for creating a custom Gtr object.
Check if q is correct.
Computes the optimal T coordinate for a sequence pair.
Calculates probability of t profiles at given time Parameters ---------- profile_pair : list of
Computes the log-likelihood of the log-likelihood Parameters ---------- profile :
Computes the log-likelihood of a sequence.
Determine branch length mode of the tree.
Plots a root to a tip.
Print the LH matrix.
Adds a coalescent model to the tree.
Find the best root of the tree.
Assure that the tree has been created and is ready to be saved to disk.
Create a GTR model from a list of parameters.
Reads if a VCF file is valid.
Calculates the log likelihood of a given distribution.
Calculates the delta function of the distribution.
For each node in the tree, assign date constraint to each node.
Setup a treregression object.
Creates the time tree.
Calculates the log likelihood of the tree.
Convert date nodes from date format to datetime format.
Calculates the uncertainty of the due to date rate variates.
Returns the minimum value of a linear interpolation.
Calculates the median value of an interpolation object Parameters ---------- interp_object : 2D
Returns numeric date.
Create a CorrelationData object from a regression model Parameters ---------- clock_model : dict The
Closes the websocket connection.
Receive a line from the server.
Send data to client.
Send an instruction to the controller.
Returns a UTF8 encoded version of the given string.
Loads an instruction and returns an instance of this class.
Encodes the argument as UTF-8 encoded string.
Encodes this instruction into an instruction.
Returns the URL to the API endpoint for the given class.
Returns the URL to an instance of this model.
Returns the URL to the API endpoint for the given class.
Download the file at `url` and save it to `path`.
Return the parent object for this job.
Ask user for credentials.
Do an interactive login.
Shows the current logged in user.
Print the details of a user.
Return a range of genomic objects matching the given chromosome.
Get genomic position of a chromosome Args: chromosome (str): chromosome to
Return a list of facets for this query.
Takes a list of filters and returns a list of dicts.
Move to the next item in the buffer.
Execute the query :param offset: The offset of the query :param query: The query
Create a migration for the given dataset.
Entry point for the command line interface.
Construct an instance from a dictionary of values.
Logout of the currently logged in user.
Get the child object of the task.
Parse the snpEff annotation file.
Returns a tuple containing the netrc user and password.
Save the configuration to a file.
Format a value according to its type.
Given a list of cells, add a padding to each of them.
Builds a row of column width colwidths, padding, begin, fill, sep
Returns row, column alignment attributes for media wiki cell.
Create a migration for this dataset.
Uploads files to a remote path :returns: None :rtype: None :raises
Validates that the full path is a valid Vault resource path.
Validates that the URL is a valid API host URL.
Annotate a list of records.
Evaluate a single expression :param data: :param data: :param data_type:
Sets the name of the format to use.
Registers a new formatter.
Returns an iterator of tabulate strings.
Path to the user config file.
Return a list of system config files.
Returns a list of additional file paths.
Writes the default config file to the user config directory.
Read config files and validate them.
Truncate a string so that it is at most max_width characters.
Replaces all occurrences of replace in a string.
Call a list of commands in sequence.
Applies an option to a command.
Sets the branch and fix attributes.
Runs the build.
Run clean_docs, html_docs, view_docs, and view_docs commands
Truncate a list of rows and headers to a maximum length of max_field_width
Format a row from headers and row.
adapter is used to filter the response data based on the specified columns.
Generate a table that contains the given data. :param data: :param headers: :
Check if this is a number.
Checks if the token is valid according to the type passed in.
Returns true if the given type is a binary type.
Generates a key from a template.
Generate a key pair from a template and a private key.
Find objects using a template.
Inserts an image at the top of the page.
Export one or more chromosomes into one or more panel files.
Returns the first weekday after the given weekday.
Repeats the date by the given number of days.
Repeats through a range of dates.
A helper function to generate biweekly data.
A single chunk event handler.
Returns a list of variant objects from the database.
Generates a TMT document from a list of variants and a sample.
Add or remove an user.
Get all variants of a case.
Create a variant object.
Create a variant record. :param institute_id: The ID of the variant
Verify an institute for a case.
Export a record of a variant into a case.
Get a list of cancer variants.
Record an acmg for a variant. :param institute_id: ID of
Handle a evaluation request. :param evaluation_id: ID of the evaluation to redirect to
Gets the acgs that match the criteria specified in the request.
Handles upload of a case.
Downloads the verified Excel file.
Get a dictionary mapping HGNC symbol to HGNC symbol.
Add in-completepenetrance to a GeneSet.
Makes a request to the given url, token, method, and content_type.
Get nodes from MME base url and token :param mme_base_url:
Get the coordinates of a cytoband at a particular position.
Determine sub category based on alt_len and ref_len.
Calculates the length of a sequence segment.
Get end of variant.
Given a variant and a category, return a list of coordinates.
Update a panel.
Export a panel to a PDF.
Update gene page. :param panel_id: HGNC ID :param hgn
Given a case ID and a report_path, return a delivery report.
Return a dictionary of HPO query terms.
Display whitelist data.
Builds a phenotype object from its ID :param phenotype_id:
Generate a Gene object from a HGNC ID.
Return gene query results in JSON format.
Displays the list of institutes.
Displays transcripts for a given HGNC ID.
Display all day events for a given year month, all_month_events and day.
Given a case object and a variants query, return a generator of variants.
Get variants for a case.
Make a variant in the store for a given case and variant ID.
Generates a header for a variants export case.
Get predictions for a set of genes.
Locate and return the BAI file.
Get observations from loqusdb for one case and one variant.
Given a gene object, parse it and store it in the gene_obj dictionary.
Returns a human-readable string representation of a transcript object.
Computes the end position of a variant.
Returns the frequency of the variant object.
Convert clinsig objects to human readable strings.
Returns a link to the PDB database for a variant.
Returns the URL for a cosmic link.
Return a link to the beacon for a variant.
Returns a link to the UcSC API endpoint for the given variant object.
Returns human readable spidex representation of the variant.
Returns a list of expected exceptions for a variant object.
Given a variant object, return a list of all callers of that category.
Given a list of variants, return a dictionary of cancer variants.
Return a dictionary of pinned vars for a case and a variant.
Get a submission for a specific case and variant.
Return an acmg dictionary for a variant.
Post a variant for a user on a case.
Performs evaluation on an acquisition object.
Upload a case as apanel to HGNC.
Writes a verified Excel file to temp_excel_dir.
Returns an iterator over the gene objects found in the database.
Parse clnsig acc, sig, revstat, and transcripts.
Parse the compounds in a case.
List all available genes.
Get a single case.
Show all available collections.
Install or institute a adapter.
Returns a file handle for the given file path.
Get the network number :param req: :param req: :return:.
Given a number of nets, return the next and previous number.
Check if the year is in the month.
Returns the weekday number of the given year, month, day.
Given a list of samples, return a list of individual id's.
Parses the PED file and returns a tuple of family_id, samples.
Builds a evaluation object for a case.
Given a list of acmg terms, return a dictionary of information about those terms.
Get a case's variants :param query: :param variant_ids: :param
Returns a list of sanger variants. :param institute_id: :param
Create a new variant object :param document_id: The document id :param gene_
return list of gene variants :param query: :param category: :param variant_type
Verifies that a variant is verified by an institute.
Get all causatives for a case.
Returns a list of variant ids that match the institute_causative_ids
Given a case object and a variant object, yield all other causatives.
Delete a variant from a case.
Given a variant object, return all variants that overlap with the same category.
Returns a list of all variants that have been evaluated for a case.
Given a list of variants, return all of the variants in the given sample.
Return a MongoDB client.
Given a list of variant ids, and a list of form fields, return a list of
Generate a complete header for a list of submission objects.
Convert a list of submission objects to a list of csv lines.
Load a panel into an Omim instance.
Builds an exon object from a dictionary.
Delete panel from DB.
Drops all of the indexes from the database.
Removes a user from the database.
Lists all available genes for a adapter.
Drops exons from the database.
Delete a case.
Get a list of individuals for a case.
Display a list of cases.
Loads a user from the database.
Redirect to Google's login page.
Builds an institute object.
Deletes the event identified by event_id :param event_id: The event id
Get events for a case.
Retrieves all events of a user :param user_obj: :param user_id
Remove a phenotype from a case.
Given a variant and a list of individual positions, return a list of genotype objects.
Check if the coordinates are in the correct format.
Search HPO terms.
Show the transcripts available in the database.
Reloads the exons from the database, creates the database, updates the exons,
Load a HGNC region from the DB.
Get all month events in a given year, month.
Returns a QuerySet of all items that are live.
Read requirements from a requirements.txt file and return a list of requirements.
Get the existing gene for a HGNC ID.
Update existing gene panel.
Create a new gene panel.
Export a panel object.
Return archive information from database.
Copy data from one database to another.
Print HPO terms.
Initialize Flask extensions.
Register blueprints to the application.
Get a list of HGNC gene ids for a specific symbol.
Builds a panel object from the panel_info dict.
Writes a verified VCF file.
List all variants in a case.
Returns a VCF entry string for a variant.
Serve a MongoDB instance.
Generates a MD5 hash from a list of strings.
Initialize the database connection.
Sets up the collections for the database.
Index the database. :param context: :param update: :return:.
Collect data from database and call setup_scout.
Sets up a demo site.
Setup a database connection :param context: :param institute: :param user_
List of institutes :param institute_id: ID of institute
Parse and return a list of genetic models.
List of gene panel objects :param context: :param institute: :return:
Adds an institute object to the collection :param institute_obj:
Gets an institute by id.
Returns True if the provided date is valid, False otherwise.
Returns a datetime object from a date string.
Display a list of HPO Gene objects.
Parse a rank score entry for a case.
Add a user to an institute.
Checks the connection to the server.
Load a delivery report from a database.
Adds a user object to the user collection :param user_obj: User object to
View function that handles pileup request.
Load exons from an Ensembl database.
Update the case compounds.
Adds a link to a HGNC gene object. :param gene_obj:
HGNC a HGNC symbol.
Yields HGNC gene objects from lines of text.
Get open clinvar submission for a user.
Update existingclinvar id with new submission id.
Gets the clinvar id for a given submission id :param submission_id:
Adds one or more elements to a submission.
Update the status of a clinvar submission.
Retrieves the list of submissions for a given user and institute_id.
Delete aclinvar object from the database :param object_id: id of the
Convert a case to a dictionary ofclinvars.
Parse a HPO line by line.
Display all available genes.
Get a gene from the HGNC database.
Return the genes from the API.
Make an institute call and return the institute object.
Return a list of institutes for the login_user.
Get HGNC ID for a HGNC symbol.
Update a gene panel.
Populate the ``disease_term_collection`` from the database.
Loads the disease terms from a HPO file.
Parse the frequency of a variant.
Return dictionary of SV frequencies.
Show list of users.
Compares existing Mimpanels with new Mimpanels Parameters ---------- existing_panel
Update Mim version in new_genes with new version from old_panel.
Add a gene panel to the database.
Get panel object by panel id.
Delete panel from database :param panel_obj: panel object :returns: None :r
Return gene panel by panel id.
Returns gene panel identified by panel_id or institute_id.
Converts a case object to a dictionary of HGNC panel objects.
Update a panel in the database.
Add a pending entry to the panel collection.
Returns a list of all the standard library symbols in a case.
List cases. :param context: :param institute: :return:.
Send a record to the SMTP server.
Load all the indexes from the database.
Update all the indexes in a collection.
Drops all indexes from the database.
build a variant query from the given parameters :param query: :param category: :param
Execute a clinsig query :param query: :param mongo_query: :param
Add coordinate parameters to mongo query :param query: mongo query :param mongo_query:
filter by gene name and hgnc symbol :param query: :param mongo_query
Wipe the entire database.
Parse the table of genes from csv stream.
Load a list of HGNC objects into the database.
Load a set of transcript objects into the database.
Loads multiple exon objects into the database.
Search the HGNC database and return a HGNC gene object.
Return HGNC ID for symbol and build :param hgnc_symbol: H
Search HGNC database for a HGNC symbol.
Return a list of all HGNC genes.
Return the number of genes for a given build number.
Drops all the genes from the HGNC database.
Drop all transcripts in the transcript collection.
Drops all exons from the database.
Returns a dictionary of transcript objects keyed by ensembl_id.
Return dictionary of HGNC objects keyed by gene name.
Find gene by its alias :param symbol: :param symbol: :param build: :
Return a dictionary mapping HGNC symbol to HGNC id.
Returns a dictionary of HGNC objects keyed by gene id.
Converts HGNC symbol to HGNC symbol.
Add HGNC ID for one or more Gene objects.
Return a dictionary of coding intervals for each HGNC object.
Loads an Omim panel from an API key.
Get all cases for a given institute.
Create a case object from an institute ID and a case name.
Match the user with a case.
View function that handles a match request.
Delete a case. :param institute_id: ID of the user to delete
Render a case report as a PDF.
Display a case and a link to see it.
Update the status of a case.
Assign an institute to a case.
List of Hpoterm objects.
Mark validation for a variant.
Mark a variant as causative.
Generate an delivery report for a case.
Share a case with another one.
Rerun a case.
Open the link to the institute.
Convert a vcf record into a cytosure record.
Send a multiqc request to the server.
Get a list of cases from a case query.
Return a list of submissions for a given user and institute.
Export a case to an Excel file.
Given a list of HPO ids, return a list of HPO ids that have a
Convert a vcf entry into a cytosure entry.
Return a multiqc object.
Get all the unevaluated cases for a user.
Delete a mme file. :param case_obj: :param mme_base
Get the matches for a case, using the MME API :param case_obj:
Do a MME match. :param case_obj: :param mme_base
Fetch HGNC genes for a given build and api_key.
Parse a variant into a dictionary of callers.
Builds a Transcript object from a transcript_info dictionary.
Loads an institute object.
Get the cadd of a variant from a list of transcripts.
Create a case from a VCF file.
Update a variant in the variant collection.
Update the rank of a variant in a case.
Update a variant's compounds :param variant: :param variant_objs: :
Update the compounds for a variant.
Update compound variants in mongo database.
Loads a variant into the variant collection :param variant_obj: :return:.
Insert or update a variant.
Load variants from the variant collection.
Create a case and assign it to a user.
Share a case with another.
Create or update a case.
Marks a case as checked.
Order a variant in a case for a verification :param institute: :param user
Return list of sanger ordered by institute_id or user_id.
Validate a variant :param institute: :param user: :param link: :
Mark a variant as causative.
Update a variant in the database :param institute: :param user: :param
Update an acmg entry in the variant collection.
Parse ID's from a chromosome at the given position.
Parse ID from simple chromosomes.
Given a variant and a case ID, return the ID as a string.
Convert from HGNC to HGNC.
Given a variant object and a family ID, return a new variant ID.
Returns the number of cases in the database :param institute_id: :param
Update a case's dynamic gene list.
Get a case by its ID, institute_id, and display_name.
Delete a case from the database :param case_id: :param institute_
Add a case object to the case collection.
Replace a case in the database.
Update a case with a specific family.
Submit a evaluation for a user in a variant.
Returns a list of all evaluationes of a variant.
Parses transcript lines from Ensembl and returns a dictionary of transcript information.
Parse the ensembl gene request response.
Parse an ensembl transcript request response.
Parse the lines of an ensemble file.
Parse an Ensembl expression file and return a list of exons.
Parse the results of an Ensemblexon API call.
Initialize a logging object.
Returns a set of all phenotypes found in the given file.
Mim genes command line interface.
Convert string to number.
Renders the month table.
Format the day according to the weekday.
Format a month name.
A helper method for setting up the where, where, description, and event url.
Get information about a particular panel.
Parse a single gene panel.
Displays a list of diseases.
Drops the HPO terms from the database.
Get a dictionary of all users.
Parse a variant into a dictionary of conservation objects.
Return a list of conservation names for a variant.
Get general cases info.
Get all cases in a group.
Converts the context to JSON and returns it.
Get year and month from query string.
Check for all cancellations that have been cancelled by a given date.
Gets the HPO Term with the given id.
Search HPO terms. :param query: :param hpo_term: :param
Returns the disease term identified by the disease_identifier.
Return a list of disease terms.
Loads a disease term from the database :param disease_obj:
Generates a dictionary mapping HPO terms to their number of genes.
Read an HDF5 file.
Set up the time axis for the analysis.
Computes the lst of the parkes.
Return a copy of the image with empty channels.
Calculate the extent of the plot.
Plots a series of watering points on the map Parameters ---------- f_start : float
Plots the mean time series for a given time series Parameters ---------- f_start : float
Writes the filter bank to a file.
Calibration for N1 of the bandpass.
Convert data to a coarse-format array.
Calculates fracp OLS Parameters ---------- i : int The number of points to
Write polfils for a given site number Parameters ---------- stri : str Name of the
Find the closest value in xarr.
Helper function to rebin a dataset Parameters ---------- d : array-like, n_x
Unpack a nbit of data.
Calculates the difference between two populations.
Make a plot of a calibrated diode.
Calculates the size of the selection.
Calculate the shape of the selection.
Calculate start and stop frequencies Parameters ---------- self.f_start, self.f_stop
Populates the timestamps array from the file.
Calculates the number of channels to be coarse.
Calculates number of blob sizes.
Check if the data array is not too large.
Read all data from file and return as numpy array.
Read a single row from the file.
Read data from file and load it into container :param f_start: start of file
Updates the header of the plot.
Print out information about the file.
Write data to a file.
Writes all data to HDF5 file.
Writes the dataset to an HDF5 light file.
Calculates the number of blob dimensions.
Calculate and return the dimension of the chunk.
Grab time series from FCS data Parameters ---------- f_start : array-like,
Command line interface for the guppiraw tool.
Reads the first header from the file and returns it as a dictionary.
Find the number of data blocks in the header.
Print some stats to stdout.
Plots histogram of the next data block.
Generate the filter bank header.
Returns the size of the header in bytes of a file.
Integrate a calibration curve. Parameters ---------- name : str The name of the calibration
Calculates the center of a list of frequencies Parameters ---------- freqs : array-like
Calculates the number of ratios between two populations. Parameters ---------- calon_
Calculate time series model parameters.
Determine the number of header elements in a file.
Check if a file is a filterbank.
Generates a header string to be passed to the sigproc function.
Calculates the number of integers in a file.
Return a dict representation of the traceback.
Create a sub-command parser for the RR API.
Make the parser for the command line interface.
Removes comments from the given text.
Adds a default name to the list of supported records.
Parse a record from a string of JSON zone file.
Parse a zone file.
Quotes a field in a data dictionary.
Parse the schema_string and return a list of Schema objects.
Produce a package from a list of classes.
Convert record to json compatible format.
Load a JSON record from a dictionary.
Load a JSON record from a string.
Add a schema to the stack.
Returns the schema for the given record name.
Returns an ordered dictionary representation of the variable definition.
Create a JSON Schema object from a record.
Generate a schema dictionary for a root record.
Reads lines from the given stream as JSON.
Writes the output of a pipeline job to a file-like object output_stream.
Push a value onto the front of a dictionary.
Retrieves a search result by query string parameters.
Retrieves a list of objects matching the given filters.
Returns a list of entities that include the specified attributes.
Gets entity from href.
Return the first quote in a list of quotes, or raise an exception.
Escapes a string into an escape sequence.
Return elementary rotation matrix for specified axis and rotation angle.
Calculates the vraderrorsky of a given time point :param vmag:
Calculates the parameter error at the top of the plot.
Calculates the magnitude error of G.
Calculates the magnitude of a g magnitudeerroreom.
Averages the number of transits in beta.
Calculates the angle in radians between two rotations.
Transform cartesian coordinates x, y, z.
Transform sky coordinates Parameters ---------- phi : array-like, shape [x, y, z
Calculates the Jacobian for transforming the covariance matrix Parameters ---------- phi : float
Calculates the errorscaling factor for a given observable and beta Parameters ---------- observable :
Unquote a value if it is not already a string.
Returns a collection of elements from each of the passed functions.
Exclude elements from this collection using a callable.
Return a collection of elements that satisfy a truth test.
Forward the last elements in the collection, applying a function to each element.
Returns a copy of this collection with elements removed while the given func is True.
Combine elements of this collection into a single collection.
This will return the first node that matches the given arguments, or an empty list if no
Return the path to the operating system.
Given a list of events, return a list of all scheduled run events.
Print the results to the given file.
Print the results to the given file.
Removes macros, macro, etc from the code.
Round x to the next base number.
Returns a list of blocks of `block_size` from `indices`.
Calculates the cache access.
Calculates the number of cycles in the kernel and stores them in a dictionary.
Strips and comment.
Strips unreferenced labels from the given list of assembly lines.
Select the best block from the given list of blocks.
This function is used to get the value of the user selected in the block.
Insert markers at the end of the given line.
Generate integers in base-based space starting at start, ending at stop.
Returns the datetime of last modified.
Check arguments are valid.
Entry point for the command line interface.
Loads data from a pickle file and writes them to a pickle file.
Gets a symbol with a positive integer value.
Transform a multidim declaration from 1D to 2D.
Transform an array reference from 1D to a 1D reference.
Find all nodes of a given type in an AST.
Checks that all of the datatype variables are valid.
Set a constant value.
Substitutes constant values in expression.
Calculates the sizes of all the variables and their element sizes in bytes.
Calculates the relative offset of a dimension.
Removes duplicates from the list of sources and destinations.
Returns the length of each variable in the iteration.
Generator of the loop stack.
Return a list of free symbol references in the order in which they appear.
Return a mapping of variables to sympyaccesses.
Compute the distance between each variable in the list of sympy objects.
Convert a global iterator into an iterator of indices.
Returns an integer that represents the number of global variables in the loop stack.
Converts a list of indices to a global iterator.
Returns the maximum number of global variables in the loop stack.
Print the kernel information.
Print the variables info to the given file.
Print the constants info to the given file.
Print the kernel code to the given output file.
Convert an AST node to a symmetric.
Get offsets for a sequence of aref objects. :param aref: A sequence of
Return the basename of an ACE file.
Gets the index type of the statement in loop_nest.
Return a list of constant declarations.
Return a list of array declarations.
Return the number of loop elements in the kernel.
Returns a copy of the array declarations and a copy of the array declarations.
Find the innermost loop in a list of loop_nest.
Return a copy of the kernel with the initialization of the innermost loop.
Builds a list of dummy calls.
Builds a kernel function declaration.
Return a list of scalar declarations.
Get the code for the kernel.
Builds a kernel call AST node.
Returns the source code for the main function of the module.
Perform the iaca analysis.
Returns a unique identifier for the file.
Returns the last modification time of the file.
Returns the compiler to use.
Parse a performance tag string into a tuple of event parameters.
Enforces that there are no overlap between start_at and end_at.
Returns the absolute path to the header file.
Aligns the iteration with the cl_boundary.
Returns a list of loads for each cache level.
Returns the number of hits for each cache level.
Returns a list of all cache misses.
Returns a list of all possible store levels.
Returns a list of evicts for each cache level.
Returns a dictionary of information about the cache.
A context manager to fix an environment variable.
Configure the argggroup command line parser.
Parse the description from the README file.
Returns a dict with all the information we need to add to the item dict :param course
A wrapper for sailthru_client.sailthru_client_client
Get the content of a course from Sailthru.
Get the content for a given course.
Updates a list of course URLs from sailthru :param sailthru
Sends a refund to the Sailthru server.
Send an assignment notification email to a user.
Helper method to retry the order.
Fulfill the order specified by order_number.
Return a sailthru client for the given site_code.
Get a value from the cache.
Sets the value of the key to the given value.
Get the value of a global variable from the global configuration module.
Get the overrides file name for a given environment variable.
Returns the first value in d that is greater than or equal to the version in eplus
The version number of the Eplus executable.
Populates the device from a JSON data dictionary.
Returns a list of all external files for all tables.
Sets the default values for all registered tables.
Prepares the list of fields to be extensible.
Return a dictionary mapping naive short references to their names.
Returns the value for the given column_name_or_i that matches the given filter
Update the value at the given index.
Deal with incoming data.
Add a number of fields to this struct.
Removes and returns the value at index.
Insert new value at index.
Deletes the record from the device.
Registers a record hook.
Registers a Link object.
Creates a regular expression object for the intent with the given name.
Returns the remaining duration in seconds for this interval.
Returns a serialized version of the segment.
Make an http request to a remote server.
Get all endpoints for a given service_type.
Try to create a directory.
Configure the given service for the given process.
Register a CA with PyPI.
Get recording state. :param recording_id: :param status: :return:.
Update the status of a recorded event.
Update the agent state. :returns: None :rtype: None :raises: None
Returns the path to a configuration file.
Update the configuration object.
Check for errors in the config file.
Initialize logging configuration.
Show the home page.
Serve an image.
Runs all the modules in parallel.
Parses a VCF string and returns a list of events.
Get a schedule from VirusTotal.
The main control loop.
The main control loop.
Makes an error response.
Make a response with the given data.
Return the internal state of the service.
Returns a list of all the events that are upcoming.
Return the event with the given uid.
Delete a recorded event.
Modify an event :param uid: The ID of the event to modify :type uid:
Start a capture of an upcoming event.
Render the page to a fragment.
Returns a list of all available resources.
Returns a dict representation of the page.
Create a new fragment object from a dictionary.
Adds the given content to the content list.
Initializes the JS library with the given js_func and json_args.
Converts a placement to an html string.
Converts a resource to HTML.
Handle GET requests. :param request: :param kwargs: :return:.
Renders standalone html.
Render a fragment as a standalone html page.
Calculates pvalues, qvalues from pvalues.
Cast values to one-dim array.
Given an error table, return the pvalue, svalue, pevalue, qvalue
Calculates the final error table.
Returns a summary table of uncertainty errors in a dataframe Parameters ---------- df : pandas.
Computes the error statistics of the target scores. Parameters ---------- target_scores : array
Finds the cutoff point for a given score. :param tt_scores: :param
A wrapper for the ipf.py or ipf.py function.
Run peptide analysis on a single file.
Run protein analysis on a single file.
Subsample an input file with OpenSw.
Reduce an input file to a new file.
Backpropagate data from infile to outfile.
Get a Group by ID Args: group_id (str): Group ID Returns: Group
Create a new Group. :param group: Group to create :type group: Group.
Delete a group by its ID :param group_id: Group ID :type group_
Get the members of a group.
Update the members of a group.
Get the number of effective member of a group.
Check if the given netid is an effective member of the given group.
Decrypt using AES256cbc key.
Get the stdin of the current process.
Get the stdout of the process.
Get the stderr of the current command.
Get the output of the debug command.
A context manager that yields a process' stdin.
A context manager that yields a file-like object with its stdout.
Context manager that yields a file-like object with stderr.
Run the command with the debug level.
Write error message to file.
Print the help text of the option parser.
Print the usage of the option parser.
Print the version number of the option parser.
Given an option name and a section name, resolve the value of that option in the context
Returns a copy of the current context.
Write a list of headers to the given file object.
Generate a temporary URL.
Quotes a value to be used as a query parameter.
Get a client from the pool.
Decrypt data from stdin using AES256cbc.
Upload an account to the Keen IO API.
Uploads a container to the CDN.
Constructs and returns the JSON body of the manifest.
Create a container at a specific path.
Display the latest x_trans_id.
Test if buffer is empty.
Encrypt input file with AES256cbc.
Get the status of a repository.
Get a pull request.
Get a list of pull requests for a given app and repo_config.
Set ``is_published`` to ``True`` and ``True`` to
Get all videos that are published :param context: :param amount: :param amount:
Returns a queryset of all videos published by the user.
Read from the reader.
Releases the reader thread.
Acquire the mutation stream for writing.
Removes the task identified by the task_id.
Return the task with the given ID.
Returns a list of all currently executing tasks.
Returns a copy of the Config object as a dictionary.
Create an object from a dictionary.
Initialize perceval archive manager.
create an Elasticsearch index :param idx_url: URL of the index :param clean:
Wrapper around ``jsonencoder``.
Write items from generator.
Add a task to the schedule.
Removes a scheduled task from the scheduler.
Returns a generator of the items stored in the storage.
Validate the arguments.
Parses archive arguments and returns a archiving task config.
Do the actual work of the job.
Schedule a job to be executed by the scheduler.
Cancel a previously submitted task.
Run the worker.
Listen for jobs on the pubsub channel.
Schedule the scheduler to be run in parallel.
Schedule a task to be executed by the scheduler.
Cancel a scheduler task.
Return a dictionary of arguments to be passed to the job manager.
Register a view with the admin.
Wrapper around Django's default reverse function.
Get the name of the view :param respect_name: Return the name of the view
Get a Python version string.
Given a key, resolve the alias associated with it.
Given a scheme, return the engine corresponding to that scheme.
Parse a database and schema from a path.
Parse a database URL and return a databaseinfo object.
Create a new user.
Get list of users.
Creates a password change request.
Add url_name to url field.
Parse a boolean value.
Parse a value as an integer.
Return a parser for the given type.
Construct a model instance from the given fields.
Base64 encodes `s` using urlsafe_b64encode.
Creates a new Field object from a field_info dictionary.
Create a validator from a data struct.
Finds all the unique points in a list of parameters.
Change the default log level and logging configuration.
Try to make a directory tree from a filename.
Get a list of all strings in an AST.
Sets the logger for this object.
Extracts all replacements from a trajectory object.
Check and replace parser arguments.
Writes the given parser to a stringio object.
Find multiprororoces options.
Given a dictionary of multiproces, return a dictionary of multiproces.
Read the log file and replace any options with their appropriate ones.
Takes a log_config dictionary and attempts to create a new dictionary where the keys are
Set up logging handlers and tools.
Finalize the application. :returns: None :rtype: None :raises: None
Starts the stream.
Writes the given buffer to the console.
Compare two objects for equality.
Compare two objects for equality.
Class decorator that adds a prefix attribute to _prfx_getattr_ and _prfx
Adds parameters to the trajectory file.
Run the network. Parameters ---------- traj : trajectory.traj.traj.
Calculates the Euler scheme of a trajectory Parameters ---------- traj : trajectory
Adds parameters to a trajectory file.
Computes the difference between value_array and sigma_array Parameters ---------- value_array
Create a storage service and a trajectory object.
Factory function to create a storage object.
Adds parameters to a trajectory file.
Calculates the difference between two values using the ROessler method Parameters ---------- value_
Determine if the parameters are in a group.
Builds the equation dictionary for the synaptic model.
Determine if we should perform a pre build of the model in the trajectory.
Builds the network.
Builds the neurons and neurons for the network Parameters ---------- traj :
Determine if we should perform a pre-build of the network.
Builds a network from input trajectory.
Adds parameters to a trajectory.
Compute and return spike factor of spike in time window.
Computes mean fano factor of neuron_ids Parameters ---------- neuron_ids
Run one or more sub-run analysis.
Adds monitoring methods to the network object.
Create a folder where the print data is stored.
Plots a single result.
Print the spike trajectories.
Adds spike, v, and i monitor results to the trajectory.
Get the next batch number.
Given a batch of trajectories, return a dictionary where keys are the batch number of
Returns a list of variable names in this node.
Returns the function to execute.
Changes the full name to be the first letter of the full name.
Sets the depth, branch, run_branch attributes.
Convert a PyPSA node to a PyPSA message.
Removes a node from the tree.
Removes a node or a leaf from the tree.
Translate a shortcut name to the equivalent shortcut name.
Determine the data types of a node.
Creates a link of the given name.
Check the names of the parts of the name.
Sets the details of a tree node.
Iterates over the nodes of the graph.
Return an iterator over the children of the given node.
Traverse a BFS tree.
Perform a recursive search on the given node.
Return a list of names that match the given split name.
Returns a list of KID objects.
Add a group from storage.
Add a leaf from the storage.
Load data from directory.
Generate a debug representation of the tree.
Gets the parent element of the current element.
Remove a link from the link list.
Remove this object from its parent.
Get the default value of a data record.
Get the children of the current node.
Get the groups that should be displayed.
Get the set of leaves that contain the function.
Returns a copy of the links.
Stores the data of the group instance.
Add a result group to the network.
f_add_derived_parameter_group will add a derived_parameter_group
Add a derived parameter to the network.
Add a new config group to the network.
Add a generic configuration group to the network.
Adds git variables to the trajectory file.
Create a git commit and add it to the index.
Flatten a dictionary where the keys are separated by separator.
Flatten a nested dictionary.
Get the argument specification of a function.
Given a function and a dictionary of keyword arguments, return a copy of the dictionary that contains
Formats the given timestamp in a human readable format.
Convert a port number to an TCP port number.
Raises an exception if path does not exist.
Reset the statistics data. :param index: :param total: :param percentage_step
Returns the remaining seconds since the current time.
Return a copy of the dictionary.
Removes a value from the dictionary.
Return a string representation of the annotation data.
Make aordinary result.
Make a shared result from another shared object Parameters ---------- key : str The key of the shared
Store access data for this object.
Retrieves the data node from the storage service.
Checks if the item is supported by the shared result.
Create shared data for an item.
Do the multiproroces of the current process, but don't save anything.
Lock a request :param name: The name of the lock :type name: str :
Send a done message.
Closes the socket if it is open.
Start the client. :param test_connection: :param test_connection: :return
Send request, then receive response, then retry.
Acquire a lock.
Listen for incoming requests.
Put data to the server :param data: :param block: :param data: :
Detects if the process is a fork.
Handle data received from the server.
Main entry point for running trajectories.
Get the next item from the queue and mark it as done.
Read data from the stream.
Store data into storage service.
Stores a message.
Stores references to trajectories.
Given a section, return a dictionary of options.
Return a dictionary of all configuration options.
Collect and configure the kwargs.
Add configuration parameters to a trajectory.
Plots a pattern with the given rule number and save it to file.
Calculates the cellular Automaton for a given number of cells.
Triggered whenever an update occurs.
Returns the overview group for the current user.
Wrapper for `load_several_items`.
Checks the properties of the SMTservice object.
Store the elements of an iterable.
Handles closing of the stored routine.
Extracts information from the Svc file.
Create a backup of the trajectory.
Read out a row from a table.
Prepares the merge of the trajectory.
Check if pex version is correct.
Loads one trajectory object for each parameter. :param traj: trajectory object
Stores the explanation of the current parameters in an HDF5 table.
Stores a trajectory object.
Constructs an instance of a leaf class for the given name in the given trajectory.
Stores all the nodes of the given parent_traj_node.
Store the parameter or result table entry.
Gets or creates a Table object for the given where node.
Retrieves a node from the HDF5 by its name Args: name (str): The
Applies all the values in the insert_dict to the row and logs a warning if
All-cut string generator. :param string: string to be cut :type string:
Create a new group if it doesn't exist.
Returns the group that contains all trajectories, or a group that has been created.
Stores the annotations for the given item in the given node.
Loads the annotations from the item at the given node.
Group store data for one trajectory group.
Loads a Group object from the given trajectory group.
Loads all attributes of a trajectory file into the trajectory object.
Extract missing flags from data_dict.
Adds a summary row to the metadata table.
Adds a row to the summary table of an object.
Writes shared array data into HDF5 file.
Writes a shared table to a HDF5 file.
Writes a dictionary of data to an HDF5 file.
Writes a pandas data object to an HDF5 file.
Writes data into the other array.
Writes the given data into the given HDF5 group.
Delete link with given name from the link table.
Return a `astropy.table.Table.Column` for the given key and column
Calculates the maximum length of all strings in a list of strings.
Reads the full_name table and returns it as a dictionary.
Reads shared data and returns it.
Reads the content of the array and returns it as a native Python array.
Loads a trajectory from file.
Make set name based on indices.
Defines what to do with the kwargs.
Adds dynamic imports to _dynamic_imports.
Adds a custom preset to the list of shortcuts.
Check if a run is completed.
Removes all items that have already been stored.
Updates the run information dictionary :param run_information_dict: :return:.
Add information about a single run.
Locks all stored parameters.
This method is called every time a parameter is derived, and the method is called every time
Calls f_store, f_init, f_store, and f_store
Load a skeleton from file.
Make a list of words that start with a wildcard.
Merge many trajectories together.
Merge information from another trajectory into this trajectory.
Rename full_name according to `other_trajectory`.
Merge parameters from another trajectory into this one.
Merge another trajectory into this one.
Merge results from another trajectory into a single name.
Restore all parameters to their default values.
Set the explored parameters to the given index :param idx: The index of the
Make all nodes and links run in a single pass.
Return a list of run names.
Starts a new run :param run_name_or_idx: name of the
Sets the start time of the run.
Marks the run as finished.
Helper function to construct an instance of a class. :param constructor: :param full_
Return a dictionary where the keys are the item names and the values are their values.
Populate the list of new nodes and links in the run.
Iterates over iterator_of_links and deletes all links that are present in the tra
Removes all the children of the current node.
A wrapper around _pool_single_run to free references.
Same as _frozen_pool_single_run except that the underlying trajectories are
Configure the storage pool for a single run.
Configure the frozen pool. :param kwargs: :param kwargs: :return:.
Processes a single run of the signal.
Run a single scoop instance.
Tries to configure the logging manager.
Try to guess the niceness of the process.
Run a single sigint handling thread.
Wrap log handling with sigint handling.
Loads a class from a fully qualified class string.
Creates a dynamic class from the provided dynamic imports.
Returns the length of the file.
Returns a string representation of the last field value.
Returns thelored range of the function.
Stores the data in a dictionary.
Loads the pex data from a load_dict.
Load array parameter data from a dictionary.
Compare two values for equality.
Returns True if data is a supported matrix.
Build a name list for a parameter.
Constructs a sparse matrix from a list of data.
Loads the sparse parameter data from a dictionary.
Generates a dictionary to store the object.
Loads a dictionary of data from a pickle file.
Translate key to v_name.
Returns a string representation of the data.
Convert the FileData object to a dictionary.
Set a single item in the container :param name: name of the item to set :
Check if the item is supported by the parser.
Stores the values of the sparse parameter in a dictionary.
Load sparse parameters from a dictionary.
Sets a single item to be stored :param name: name of item :type name:
Stores the current state of the object in a dictionary.
Tries to load values from a dictionary.
This is the main entry point of the script.
Creates a session with the user_id and password.
Merge two trajectories into a single trajectories.
Create and start all the jobs on the server.
Multiply x and y by z.
Runs a single neuron.
Processes a list of results from a neuron.
Adds parameters to a trajectory file.
Builds a trajectory from a cartesian product Parameters ---------- traj : trajectory.
Extracts subruns from the durations of the given trajectory Parameters ---------- traj :
Execute the analysis of the network in a single trajectory Parameters ---------- traj : trajectory
Adds parameters to a trajectory object.
Runs the network.
Make a filename from the parameters of a trajectory.
Returns the next item in the chain.
Handles SIGTERM and write a prompt to sys.stderr.
read config from file :param filename: path to config file :type config: dict :
Request the PIN for the currently logged in user.
Request access token and refresh token.
Refreshes the access token using refresh token.
Returns a list of thormostats available to the authenticated user.
Writes tokens to config file.
Set HVAC mode :param index: number of HVAC mode :type index
Set the fan min on time :param index: The index of the fan :type index
Set climate hold :param index: :param climate: :param hold_type
Delete a profile :param index: The index of the profile to delete :type index:
Resume a program :param index: The index of the program to resume :type index
Send a message to a given index.
Generate a random delay between 0 and max_delay_selecting.
Calculates the amount of time to wait before a new one.
Generates a new timestamp for a given lease time.
Returns a copy of the object's attributes as a dictionary.
Reset the client to its default state.
Given a state and a function, return the name of the timeout.
Set the timeout for a specific state.
select an offer to send to the client :returns: None :rtype: None :
Send a request to the remote server.
Set thetimers property.
Called when a Nak packet is received.
Initialise the state, reset it if it has not yet been initialized.
Raises an exception if the current state is too old.
Raises an error if the current state is too low.
Raises an error if the current state is too low.
Raise a rebinding if the current state is too high.
This method is called when a new packet is received.
Called when an ack request is received.
Called when a Nak request is received.
Called when an ack is received.
Called when a Nak packet is received.
Receive an ack re binding packet.
Receive a Nak re binding packet.
Called when the lease is renewing.
Set the value of the field.
Add a new value to the existing list.
Returns a copy of this query with the specified name and value removed.
Get the status of the server.
Reads a tdms file and returns ch_names and ch_data.
Convert tdms file to FCS file.
Determine if the two commands are equal.
Create a new patch and add it to the series :param patchname: name of the
Deletes the next series in the series.
Delete a patch from the database.
Check if a file exists in a patch.
Create a backup file for the patch.
Add a file to the patch cache.
Run the command with optional output.
Creates the directory if it does not exist.
Copies the contents of this directory to dest.
Link to a file.
Copies the file or directory to the destination.
Returns the path to the directory containing the archive file.
Creates a backup of the specified file and copies it to the specified destination directory.
Unapply a patch.
Applies a patch to the series.
Applies the next patch to the series.
Applies all patches in the series.
Reads the current series file and creates a list of patch objects.
Save the current series to file.
Adds a patch to the patch2line dict.
Inserts a list of patches into the patch2line dict.
Adds a list of patches to the patches list.
Removes a patch from the patchline list.
Returns a list of patches after the given patch.
Returns a list of the patches before the given patch.
Returns a list of all patches in the project that match the given patch.
Replace an existing patch with a new one.
Create the version file if it doesn't exist.
Check the version of the database.
Adds the arguments to the parser.
Add the arguments to the parser.
Add command line options and defaults to the parser.
Sets the arguments for the subparsers.
Adds the subparsers to the given parser.
Check if file exists in patch.
Check if file exists in next patches.
Revert a file to a new format.
Import a patch from a file.
Import a list of patches into a single file.
Add a way object to the list of way objects for a way node.
Returns the node ids that are not present in this cluster.
Adds a node object to the graph.
Given a relation, create a route based on it's tags.
Given a relation and a short name, return the route name.
Given a relation, return itsagency ID.
Loop through all relations and apply them to the graph.
Given a relationship, return the related object.
Given an iterable of agencies, return an agency object.
Create a dummy trip, based on stops.
Generates a ZIP file from the data stored in the buffers.
Writes all unJPEG buffers to the given destination.
Builds an agency from a relation and nodes.
Given a relation and a list of nodes, return a generator yielding stop objects.
Given a relation and a list of nodes, generate a shape for each node.
Returns a list of supported PDU versions.
This interface is used to send an APDU to device.
Try to authenticate each device.
This interface is used to register a new app.
Use this method to authenticate your app.
Registers devices with a specific facet.
Convert unicode data to str.
Wraps a class with custom error decorator.
Returns True if the filepath matches one of the only_blame_patterns.
Get the email address from the remapping dictionary.
Searches for an entry in the given entry tree.
Converts Markdown text to a REST representation.
Serve a local file.
Gets an image from an url and returns it as a string.
Convert a string to an Image object.
Check if the image is big enough.
Check if the image width is big enough.
Check if the image's height is big enough.
Given a category field_name and source_name, return the category object if it exists
Return the value of the field named 'field_name' from the source_name.
Returns an iterator over the tree's elements.
Saves the error to the errors attribute :param data: :param exception_info:
Parses the source and loads it into memory.
Parses a single item and returns a dict of the field names and their values.
Returns an instance of the model.
Save an item :param item: :param data: :param instance: :param commit
Download a file from an url to a destination.
Opens the source file.
Returns an iterator of dicts.
Sets the allow_network_access flag.
Adds files to the working directory.
Add a new file to the working directory and rename it.
Returns a list of enrollment objects for the given course id Parameters ---------- course_id : str
Gets all enrollmentments for a given SIS id Args: sis_id (
Returns a list of canvas enrollment objects for the given section.
Gets all enrollmentments for a given SIS section.
Returns a list of enrollment objects for the given regid.
Returns a canvas enrollment for the specified user.
Get a list of canvas roles in an account.
Gets all roles in an account.
Returns a list of all effective course roles in an account.
Get a canvas role.
Gets a Role object by the SIS Id :param account_sis_id
Returns a canvas course object.
Get a course by sis id Args: sis_id (str): SIS
Returns a list of courses in an account.
Get list of courses in an account Args: sis_id (str): SIS
Gets the list of videos that have been published in an account.
Gets the list of course objects that are published in a SIS account.
Returns a list of courses for a given regid.
Creates a new canvas course.
Updates a SIS ID :param course_id: ID of the SIS course
Gets the activity for a given account and term Args: account_id (str):
Get a list of assignments for a given account and term Args: account_id (str
Get a list of statistics associated with a given account and term.
Gets activity by sis_course_id Args: sis_id (str
Gets a list of assignments by sis_id Args: sis_id (
Get a list of student summaries by a sis_course_id Args: s
Get the student activity for a sis_course_id and sis_user_
Gets the student notifications for the given sis_id and user_id.
Get a list of external tools in an account.
Returns a list of external tools in a course.
Creates an external tool :param context_id: The context id :param json_data
Update an external tool in a context.
Delete an external tool from a context.
Check that the object has all of the required parameters.
Get a user from its ID Args: user_id (str): The ID of the
Get a list of canvas users for a course.
Get all users for a SIS course id Args: sis_id (str):
Creates a new canvas user.
Get a user's logins Args: user_id (str): The ID of
Update a user login.
Given a response, return the next page.
Get the url of a resource.
Gets a paginated resource.
Returns a full url to the resource identified by url.
Tries to PUT the given resource to the given url.
Make a POST request to the Google Cloud Storage API.
Tries to delete the resource specified by url.
Get a list of canvas admins.
Create a canvas admin.
Creates an admin by sis_id :param sis_id: SIS Id
Delete an admin from an account.
Delete an admin by sis_id :param sis_id: SIS Id
Creates a grading standard for a course.
Get a single section.
Get a section by SIS Id Args: sis_id (str): SIS
Returns a list of canvas sections in a course.
Gets all sections in a sis_id Args: sis_id (str
Returns a list of section objects that are present in the context of this course.
Gets a list of Sections that are associated with a student in a course.
Creates a new section.
Updates a section. :param section_id: section id :param name: section
Returns a list of Qu {} objects for a given course id.
Fetches the canvas account with the given id.
Get a list of sub-accounts.
Update a canvas account.
Update a SIS ID.
Get the authentication settings for a given account.
Updates the auth settings for the given account.
Searches for a term by sis_term_id :param sis_term
Imports a string into a SAS Data Set.
Imports a CSV file from a directory.
Get the status of an imported SIS.
Builds a zip archive from a directory path.
Get a list of assignments for a given course.
Updates an existing assignment.
Get a list of report types available to an account.
Get a list of reports of a certain type in an account.
Create a report. :param report_type: report type :param account_id:
Create a course provisioning report. :param account_id: The ID of the account
Creates a course export report.
Create an unusedcourses report.
Get report data for given report.
Get the status of a report.
Deletes a report from your account.
Move detections from one label to another Parameters ---------- label : `str` The label to
Flip detections with respect to W.
Given an object, return a dictionary of related objects.
Returns a config dictionary from a settings object.
Returns the empty value of the edit widget.
Create metrics from a list of metric configurations.
Set up logging for this instance.
Configure the event registry.
Create a dictionary of metrics from an iterable of metric configs.
Get a metric by name, with optional labels.
Handles home requests. :param request: :param response: :return:.
Handle metrics request. :param request: :param response: :return:.
Return the username of the user if it exists, otherwise None.
Make sure the http message is of the right type for py3 :param http_client
Make a query to the server and return the response.
Returns a list of info objects.
Return list of all pods that are primary.
Encodes data into JSON.
Make a GET request.
Generic TeleSign REST API DELETE handler.
Performs an HTTP PUT to the specified URL.
Make a POST request.
Group total_nb_sentences into groups of total_nb_sentences.
Disambiguate a PDF file.
Disambiguate a query. :param query: :param language: :param language:
segment text into segments :param text: text to segment :type text: str :param
Get language of given text :param text: :param language: :param text: :
Get a concept by its ID :param conceptid: id of a concept :param lang
Fit the model to the given features and classes Parameters ---------- features : list of 2D array
Calculates accuracy on new features.
Fits and predicts the model.
Calculates accuracy on new features.
Transforms the features into a 2D array Parameters ---------- features : list of 2D arrays
Calculates the score of the current t-test for each feature in the feature map
Returns a vector from an iterable of members.
Creates a vector.
Evaluates the given file.
Evaluates the given stream and returns the last form.
Evaluates the given string `s`.
Return the repl module that contains the specified namespace.
Main entry point for running code from a file or code object.
Add a method to a map.
Adds a method to the multifunction :param key: The key of the method
Removes a method from a map.
Removes a method from the multifunction.
Checks whether the variable is a macro or not.
Return line number and column number.
Raise an exception if no recur is found.
Recursively visit all children of the node and make sure the node is a tail.
Resolve a bare symbol.
Given a sym form, resolve its symbol.
Parses the AST and returns a node.
Whether or not the variable should be shadowed.
Generates a representation of a map.
Returns a string representation of an iterable.
Return a fallback representation of o if o is not a valid Python object.
Make sure that the node and all its children are at the same location.
Compiles the given form and executes it.
Generates a Python module from an AST and runs the code through it.
Compiles the given module.
Takes a list of Python code objects and runs them through the given optimizer.
Generates a sequence from an iterable.
Converts a string of Python code to a string of Python code.
Returns a fraction.
Returns a logging handler for the given level and format.
Performs a map function on a list of dictionaries.
Partition a collection into n-tuples.
Reads a namespace from a file.
Read a collection from the file.
Read a list from the reader.
Reads a vector from the reader.
Read a map element.
Reads a string from the given reader context.
Reads a symbol from an input context.
Read a keyword from the reader.
Reads a meta block from the reader and returns it.
Reads a quoted list.
Return an expanded list of lists where the elements in form are not quoted.
Reads a quoted form.
Reads a part of the llist.
Reads a character from the input stream.
Reads a regular expression.
Reads a macro from the reader.
Read next consume comment.
Reads the next token and returns it.
Read a string into an iterable.
Read a file into an iterable.
Update location of current line.
If the current index is less than the end of the array, this function will throw an
Move to the next token.
Return the byte representation of the code that would be written to the file at the given mtime
Given a fullname, mtime, source_size, and cache_data, return a list
Returns the path of the cache file from a source file.
If any modules in sys.meta_path are imported, add them to sys.meta
Locate a module by its full name.
Execute a cached module.
Compile and execute a module.
Execute the given module.
Create a symbol object. :param name: :param ns: :param ns: :
Given a text, return an iterable of keyword arguments.
Get or create a new keyword.
Returns the value of a keyword in the given namespace.
Return list of pyast stream and list of pyast nodes.
Return the AST as a collection of nodes.
Return py_ast with line, column, and location of dependencies.
Decorator that wraps a function that takes an AST and returns a generator function that takes a
Decorator that wraps a function that takes an AST and returns a generator function that takes a
Returns True if v is dynamic, otherwise False.
Returns True if v isredefable, otherwise False.
Convert an exception into an AST expression.
Generates an ast.Functiondef from a function body.
Convert a do node to a generatedpy AST.
Generates a fully qualified name from a string.
Convert function arguments to Python AST.
Convert a single algebraic function into a py_ast.
Converts a function to a AST.
Converts an If body to a Python AST.
Return the AST representation of a function call.
Converts a quote operator to a py_ast.
Converts a loop statement into a `py_ast.ast.ast`.
Convert an AST node to a Python AST node.
Converts a `setbang` expression to a `ast.ast.ast
Converts a generator context to a module-level AST.
Converts a generator context to a `py_ast`.
Converts a local operator to an AST node.
Return a generatedpyast object for the given variable name and namespace.
Converts a variable to a Python AST.
Convert an InteropProperty node to a Python AST.
Convert an maybe_class operator to a py_ast.
Convert an maybe_host_form node to a ``pyast``.
Converts a constants value to a AST form.
Converts a `collection` literal to a `py_ast`.
Generates a Python AST node.
Return an iterable of ast.Import objects.
Create an ast. ImportFrom from a module.
Create an ast. Assign node for a namespace variable.
Returns a set of members from an iterable.
Returns the set of members of the given members.
Return `node`s representation as excepthandler.
Return `expr` or `None` if `node` is not a constant.
Return `node`s representation as functiondef.
Return `node`s representation as while.
Return `node`s representation as try.
Creates a new instance of a module.
Returns the first element of o, or None if o is None.
Return the rest of an iseq.
Returns the ith rest of a collection.
Returns the i-th item in the collection.
Returns the cons of `seq`.
Converts an iseqable or iseqable to a Sequence.
Concatenate multiple sequences into a single sequence.
Associate elements with the given elements.
Convenience function to conj the elements of a collection.
Make sure o is an IDeref or ienumeref or ienumeref
True if v1 is equal to v2.
Divide two numbers.
Sort a collection by a function Parameters ---------- coll : iterable The collection to sort Returns -------
Test if a collection contains a key.
Get an element from an association map.
Convert a dict, list, set, tuple, dict, tuple, list, tuple,
Convert a object to a object's Python object.
Returns a human-readable representation of the object.
Return list of elements from given iterable.
Decorator to mark a function as a basis function.
Given a symbol and a namespace, resolve the alias.
Resolve a symbol by its alias.
Adds a generated variable to the global namespace.
Create a new variable in a namespace, and return it.
Return an unbound variable defined by ns and its name.
Find a symbol by its name in a namespace.
Find a variable in a namespace.
Finds a symbol with the given ns_qualified_sym.
Adds a default import to the list of imports.
Add an alias to a symbol.
Interact with a symbol and a variable.
Return a copy of a map with each element assocated with new_var.
Returns the variable with the given sym name, or None if it doesn't exist.
Adds an import to the symbol.
Returns the imported module for the given symbol or None if it's not found.
Associate a local variable with a receiver.
Return refer to sym or None if not defined.
Returns the refered elements of the refered elements of the refered elements of the refer
Releases references to other_ns in the same thread.
Get or create a new namespace.
Get or create a symbol by name.
Returns the symbol with the given name.
Removes a namespace from the list.
Complete a namespace by `prefix` by `name_in_ns`.
Generates a sequence of tuples where the first item in the list is the name of the
Returns an iterable of all interns that are complete.
Returns an iterable of completion strings.
Complete all the types in the given text.
A tuple containing the final arguments to pass to the function.
Returns a list of members from an iterable.
Returns a list of members from an iterable.
Decrypt a JWE token.
Encrypts the given JSON using the given key_purpose.
Delete one or more keys from the cache.
Return a tuple containing the selector and argument for the comparison.
Parse fiql string and return a list of Expression objects.
Serialize a datastore model to a file-like object.
Decode date objects to ISO-8601 strings.
Decode ISO-8601 date to datetime.
Decodes a JSON value.
Encode an object for JSON.
Returns the version number of LiPD.
Return a topological sort of a graph.
Set the parent of the object.
Gets the parent object.
Adds an element to the problem.
Adds AND operator to the expression.
Adds or operator to the expression :param elements: The elements to add :type elements
Parse the received bytes.
Convert a list of tuples to a dictionary.
Returns the first matching message in ` msgs` that matches the specified value.
Prepare to send a list of tuples.
Flushes the buffer of the socket.
Enable or disable a slide.
Saves the current template to a file :param filename: path to the template file :
Get information about your account :param about: :param about: :param about: :
Locate the package.json file.
Parses the package JSON file and returns it as a dictionary.
This is a helper method for handling API errors from LS.
Validates the response and raises an appropriate exception.
Compute the homogenization of two waves.
Interpolate from dep_vector to indep_vector.
Get the indep vector between two WAV files.
Verifies the compatibility of two WAV files.
Load the systemjs manifest.
Generates a namedtuple containing the names of available callable objects for the given model.
Expand your account with a short URL.
Retrieves URL stats for a given short name.
Get statistics for a given filter and limit of links.
Returns a dictionary of the total links and total links in the database.
Yields items from an iterable in chunks of size ``chunksize``.
Flatten an iterable.
Print a table in tab-separated format.
Create a dummy class with the given name and attributes.
Converts a human readable string to a number.
Trace the contents of the specified module.
Generate a list of links from a JSON file.
Make the common list of parameters.
Make a list of dictionaries from a list of versions.
Converts a string of ops to words.
Generate chunks of noise.
Generates the chunkpars from the data_matrix Parameters ---------- freq_vector : list of
Compute thebound Waveform of a wave Parameters ---------- wave : `Waveform.
Build indep_units, dep_units, and op.
Helper function to create an operation object from a WAV file.
Computes the running area of dep_vector.
Validate indep_min and indep_max.
Calculate the acos of a Wavefiles wave Parameters ---------- wave : `Wav
A formula for the acquisition of a Wavefiles wave Parameters ---------- wave : `
A formula for the asin operator.
A formula for the arctan of a wave.
Calculates the dep_name and dep_vector for a given wave.
Group delay for a given wave by the number of pi steps.
A formula for the logarithm of a wave.
Calculate the square root of a Wilson coefficient.
Convert a complex wavelength into a real complex wavelength.
Make a copy of the WF.
Make a weight vector from a WAV file.
Return a list of system objects found at the given absolute path.
Given a long description, return the first line of the long description.
Build an expression from a list of tokens.
Move to the next occurrence of `pos` in the list.
Returns a list of functions in the expression.
Returns a list of Expression objects.
Helper function to remove consecutive Delims in a sequence.
Convert number toeng tuple.
r"""Check if number is not a floating point number.
Peng a string into a floating point number.
Peng a fraction.
Peng a Mant number.
Returns True if the app needs any of the js extensions.
RunjsPM bundle.
Get trace for a given application.
Determine if the hashes in the dep_tree match.
Format a binary file as a hexadecimal dump.
Parse a docstring into a dictionary of parameters and returns.
Returns a list of valid function names.
Return the context to add to.
Split a line into a list of key-value pairs.
Checks that the context file ends with one of the init commands.
Returns the help text for the built-in function.
Given a context and a function name, return the function object that matches that name.
Returns a list of all available functions in a directory.
Returns True if arg is a flag.
Extracts the value of the next argument from the remaining list.
Invoke a string method.
Return a classify section name.
Given a line of text, return a Classify object.
Generates a list of paragraphs from a list of lines.
Convert the value to a type of the given typename :param value: :param typename:
Convert binary value to type :param binvalue: binary value :type binvalue: binary
Returns the size of a type.
Checks if the given type name is in the known_types list.
Split a type name into a base name and a subtype name.
Instantiate a type from the given base and subtypes.
Check if format is known.
Loads all types from a module and injects them into the registry.
Add a parameter to the annotated parameter list.
Creates a typed return value for the given type name.
Set a custom return value.
Match a short name.
Returns the type of a parameter.
Format a single return value.
Converts a positional argument.
Converts the given argument to the given value.
Returns a formatted string representation of the message.
Create a dictionary representation of the message.
Check if func is valid and execute it.
Given a list of valid values, return a list of the valid name and a list of
Finds all objects in a container.
Get a connection from a module.
Returns a help string for the given function.
Annotate a function with its documentation.
Annotate the given function with the given name.
Get a short description of a function.
Loads all known commands from the given project module.
Installs the crontab.
Print all known crontab tasks :returns: None :rtype: None :raises:
Removes all crontab entries.
Create a handler for the given URI.
Loads the projects from the config file.
Save projects to file.
Returns a dictionary of projects that are dependent of this one.
Initializes the project.
Call the function f with the given state.
Applies the function f to the pure and state.
Returns the view of the given state.
Converts the element to a list of elements.
Apply the given function over the given state.
Set the given state to the given value.
Iterate over the elements of an iterable.
Returns a list of all options that are of the same kind.
Main entry point for command line execution.
Returns a new vector that is the sum of all step towards of self and other
Handles input of the player.
Advance robots by one of the robots.
Ends a game.
Moves a player to the top of the screen.
Plays the game.
Make the game move.
Gets the username of the end of the game.
Generates the potential wins.
Adds an item to the batch.
Sets the ts attribute to an ISO8601 formatted string.
Uploads a single file or list of files to S3.
Make a file-like object for export.
Get the current state of an account.
Get the asset state for a given asset id :param asset_id: The asset id
Get the hash of the block at the given index.
Get block sys fee :param block_index: Block index :param block_index:
Get the state of a contract.
Get the raw transaction details for a given hash.
Get a value from the storage.
Get the value of a tx_hash at a given index.
Calls a JSON-RPC method with the specified script hash and params.
Invoke a JSON-RPC function.
Call a JSON-RPC script.
Send a raw transaction.
Validate an address :param addr: address to validate :type addr: str :param kwargs
Calls a method on the server.
Returns True if `s` is a hash256 string.
Determine if a string is a hashable string.
Encodes a list ofinvocation parameters.
Decodes the result of an invocation call.
Applies the filter to a datetimetm with the given timezone.
Render and save the template to a file.
Renders the QR code using the provided writer options.
Renders the notebook using the provided code.
Edit or create a config file.
Download a file from S3.
Upload a file to s3 :type remote_path: str :param remote_path
Downsync a section to the local config.
Show the differences between the local config directory and the settings file.
Parse an environment variable.
Set the username and password.
Set the API key.
Generator that yields JSON content from the given folder.
Returns a dictionary of schema objects.
Returns the schema as a dictionary.
Return the JSON Schema resolver for this schema.
Validates the given object against the schema.
Returns a list of valid examples.
Get invalid examples.
Returns the URL to get the user's authorization token.
Process the url to get the auth code.
Get an authorization token.
Returns the ID of the currently logged in user.
Returns a list of all files and folders in the specified folder.
Create a new empty folder.
Add a comment :param obj_id: ID of comment to add :type message:
Decode an object.
Set the drop target for the given object.
start dragopperation event handler.
Sets the default TLW.
Inspect an object :param obj: :return:.
Populate font with default values if needed.
Loads the page at the given location.
Send an alert to the user.
Create a tooltip for a wellcome window.
Handle mouse down event.
handle mouse over the overlay :param evt: wx.Event :type event: wx.
return the x and y position of the selected object.
Delete all objects in the selection.
Duplicate all objects in the selection.
Create a snapshot of the object.
Calculates best position for given widget.
Retrieves the py_data for the given item.
Sets the py_data for the given item.
Searches for a data item in a py_data range.
Removes an item from the list control.
Removes all items from the data map.
Clears all data from the table.
Called when user select an item in the control.
Returns a list of strings selected by user :returns: a list of strings :rtype
set client data :param n: number of items to set :param data: data to
Appends a string to the end of the wx object.
Finds and returns the parent window of the given object name.
Adds a child to the sizer.
Create a new parent for the parent control.
Draws the tile background in the given dc.
Erase the background of the tile from the bitmap.
Draws the text on the wxDC.
Returns the column headings.
Resets the current view to the given grid.
Updates the values in the given grid.
Updates the column attributes of the given grid.
Sorts the table column by value.
Clears the grid.
create a combo box with given id.
Begins the selection.
Ends the edit of the cell.
Checks if a key is pressed.
Sets the starting key for this window.
Enable or disable the menu.
Check if menu item is enabled.
Enables or disables the menu.
Check if menu is enabled.
Removes a menu item from the menu.
Set object tag. :param object: object to set :param tag: tag to set
Function called when a table element is found in the DOM.
Return a documenter for the given object and parent.
Mangle a signature into a valid signature.
Import an object by its fully qualified name.
Link to an autolink.
Displays an alert message in the given parent.
Shows a text input dialog and returns the result.
Tries to select a font from the system.
Select text color :param message: :param title: :param color: :param parent
Show a directory dialog and return the path.
Return a dictionary of search results.
set the has children of the item :param has_children: if the item has children
set a wx icon from the given wx_obj :param icon: The icon to set
Parses a string of text from a file.
Saves the document to a file.
Builds a windows from a dictionary of parameters.
Builds a GUI component object from a dictionary of parameters.
Map card name to card name.
set the data for the clipboard :param data: The data to set :type data:
Given a name and a module, return a list of all the lines that are in that
Load an object into the tree :param obj: the object to load :type obj:
Inspect an object and show it in the context menu :param obj: :param context_
Activate given child item :param child: :param edit_prop: :param select
Update selected item in tree :param obj: :param kwargs: :param kwargs: :
show context menu :param item: :param mouse_pos: :param mouse_pos
Represents the image as a absolute URL.
Test if a path is in the current context.
Test if a path has no current path :param path: path to check :param kwargs
Select an option for the field.
Get a browser instance with the given options.
Returns the xpath expression of the expression :type exact: str :param exact: The xpath
Switches the scopes to a specific frame.
Allows user to accept an alert :param text: The text to accept :param wait
Accepts a confirm message.
Print out a confirmation message, and wait for the response.
Ask the user to accept some text on the prompt.
Open a prompt and wait for a response.
Save page body to file.
Save a screenshot of the web page.
Raises an error from the server.
Checks if given field is checked.
Verifies that the field is not checked.
Checks if the element is present in the DOM Args: locator (str): locator to
Verifies that the element is not present in the DOM Args: locator (str): The
Test if the document has the given title.
Returns True if the page has no title, False otherwise.
Get the inner content of a node.
Get the inner text of a node.
Normalize a URL.
Check if the element should catch the given error.
Return the number of results that match the query.
Return True if at least size items are in the cache, otherwise False.
Check if the options dictionary contains at least one key.
Returns a failure message based on the options provided.
Returns True if the count is valid, False otherwise.
Normalizes text. :param value: text to normalize :type value: str :param
Strips whitespace from the beginning of a string.
Convert text to a regular expression.
Determine if the current URL is the same as the expected URL.
Resize window to given width and height.
Starts the capybara server.
Sets the function name. :param fcget: :param fcget: :return:
Sets the instance method :param imeth: :param imeth: :param imeth
Sets the class_method of this ServicePackageQuotaHistoryResponse.
Returns the formatted traceback of the exception.
Returns the object source string.
Returns the logger associated with the given instance.
Sets the logger to use.
Calls the API.
Returns a list of currently open channels.
Gets the list of users on this account.
Make a Slack message :param text: :param channel: :param channel: :
Translate a message from Slack to the appropriate format.
Sends a message to alack channel.
Read a channel from the channel layer.
Run the bot.
Imports and runs the channel layer.
Returns a dictionary that only contains the keys that differ with another dictionary.
Colorize a message with the given color.
Sets the last task name to the task's name.
Display the processed hosts on the screen.
Display output for failed tests.
Convert a prefix to a netmask.
Adds a model to the document :param model: The model to add :type model
Load all filters from jinja templates.
Locate a file in a YANG module.
Make an HTTP POST request.
Returns the authorization code uri.
Retrieves an access token from the OAuth provider.
Return a dictionary of query params from a URL.
Remove query part from URL.
Build a URL from a base url.
Handle any exception raised by the logger.
Make a response object.
Makes a redirect to the specified URI, if an error occurs.
Makes a JSON response :param data: :param headers: :param headers: :
Gets an authorization code from a client.
Refreshes an access token using a refresh token.
Obtain an access token.
Gets the authorization code from the uri.
Gets a new token from POST data.
Returns an authorization object for this request.
Open the serial device.
Read a single byte from the device.
Read number of bytes from device.
Read a byte from the device.
Write bytes to the device.
Write a byte to the device.
Write i2c block data.
Creates a local or remote copy of the effect set.
Create a local copy of the effect list :param effects: The list of effects to create
Construct a FileInfo object from a file_info dictionary.
Uploads a file to the given store :param file_obj: File object to upload
Returns a list of CDN URLs.
Construct a Group object from a dictionary.
Create a group from a list of files.
Base operation for one or more UUIDs.
Returns an iterator over the file UUIDs.
Print a list of items.
Prints a bar chart with the given number of parts.
Retrieve the status of the home mode for this user.
Get a list of camera objects for this video stream.
Retrieve information about a list of camera objects.
Retrieves a snapshot of a camera.
Return a camera motion enum.
Save a parameter for a camera event.
Update the camera list.
Checks if the element is the last of the meta data.
Yields the data for a single list node.
Get the iLvl for a li with the given w_namespace :param li:
Extracts a v_merge from a tc object.
Extracts the grid span from an ElementTree object.
Get the td element at the given index.
Check if style is False.
r"""Check if the text is bold.
Determine if the given text is anitalics document.
Determine if a style r is underlines.
Returns true if `p` is a title element.
Extract text from run content.
Return relationship information. :param tree: :param media: :param image_sizes:
Return list type from numbering_dict.
Given a table and meta data, build a table element and a list of nodes.
Get text content of a T tag.
Removes all elements with the given tag from the given tree.
Find a dataset and save it to a local file.
Load MNIST data.
Plots images at given location.
Plots images given a weight matrix.
Plot an image filter.
Encodes a string into a list of words.
Add a conv layer to the model Parameters ---------- name : str The name of the conv layer
Decodes a function from the output of a layer.
Calculate the score of a sequence. Parameters ---------- X : array-like, shape = (
Predict the class label for X.
Predicts the probability of each sample.
Predict logit. Parameters ---------- X : array-like, shape (n_samples
Returns a list of all variables used in the model.
Computes the accuracy of the current model.
Build an activation.
Reservoir random variates.
Adds a loss to the loss list.
Train the model with the given arguments.
Builds a graph from the model's regularizers.
Returns a list of input names for each layer.
Returns a set of all variables in the loss.
Saves the object to a pickle file.
Load a model from a file.
Computes the loss of the network.
Builds a graph showing the updates of the regularizers.
Returns the size of the output image.
Resolves input shapes for the given layers.
Resolves the output shapes.
Log the activation and parameters.
Computes the logarithm of the parameters.
Returns a formatted version of the name.
Resolve a shape name from a list of layers.
Find a parameter by its name.
Adds a bias to the model Parameters ---------- name : str The name of the bias to
Converts the model to a spec dictionary.
Calculates the logarithm of the Gabor transform Parameters ---------- x_pos
Computes the loggabor of an image.
Adds a tier to the table.
Remove one of the tiers.
Return the tiers with the given name.
Convert this instance to an EAF object.
Adds a point to the tier :param point: :param value: :param check
Add an interval to the interval list.
Removes an interval from the interval list.
Removes a point from the interval list.
Returns an iterator over the intervals.
Returns a list of all interval values.
Indent an element by the given level.
Add an annotation to the document.
Add acv description.
Adds an external reference of the given type.
Add a lexicon reference for a given lrid.
Add a linguistic type to the container :param lingtype: ling
Add a locale to the list.
Removes all timeslots that are not used by other timeslots.
Return a copy of this EAF file with the annotations from start to end.
Generate an annotation id from the timeslots.
Generate a timeslots ID for a given time.
Returns a list of child tiers for the given id_tier.
Returns a tuple of the time interval between 0 and 1.
Returns the ref annotation data of the tier at the given time.
Get the ref annotation data for a particular time range.
Returns a list of tier ids that belong to a given ling_type.
Removes all annotations from an id_tier.
Removes the cv_description from the container.
Removes a license from the list of licenses.
Removes linked files from the media descriptor.
Removes a property from the container.
Removes the annotation for the given tier at the given time.
Removes `file_path` and ` mimetype` attributes from `self. linked_
Removes a tiers object from the container.
Remove one or more tiers.
Rename aier :param id_from: :param id_to: :param id
Shift the annotations by a given time.
Print debug output to stderr.
Given a string of text, return a list of possible possible embedding levels.
Tries to guess the proper embedding level based on the input settings.
Given a list of parsed run data, resolve anyneutral types that are present in the
Reverse a contiguous sequence of characters, starting at line_start to line_end.
Reorder the log levels so that they are at the same level.
Set the data in the context to 'normalised' :param context: :return:
Add an attribute to an object.
Command line interface for the convert function.
Make sure we are using backwards compatible with the current version of the binding.
Create and show the gui for the next window.
Discover and show gui from all known guis.
Adds an item to the file menu.
Temporarily replace text in the current selection.
Context manager to temporarily change the current time.
Show the warning message in the GUI.
Returns the cumulative sum of all sets.
Returns a list of the values at a single axis of the dataset Parameters ---------- axis : int
Draws a constant line.
Loads the current transform parameters.
Reverse the values of a mapping.
Generate a range of floats starting at start, ending at stop, and ending at step.
Validate and add data to this object.
Renders the graph.
Calculates the left margin of the plot.
Calculates the margin of the right side of the text.
Calculates the top margin of the graph.
Add a pop-up.
Calculates the bottom margin of the widget.
Draws the graph.
Make the text for a datapoint.
Draw the x-axis labels.
Draw the y-axis labels.
Draws the x-guidelines at the given height :param label_height: The
Draws the y-axis guidelines at the given height :param label_height:
Draws the titles of the graph.
Returns a list of styles for inline elements.
Open the svg file and add it to the root element.
Return a list of sheet names.
Run an IRC bot.
Send data to the socket.
Connect to the server.
Respond to a message.
Return a tuple of all the patterns we need to match.
Make a new nick and register it.
Sends a PING to the server.
Handles the registration of the client.
Read incoming data until EOF, then exit.
Registers with an account that has already been registered.
Run all registered tasks in the queue.
List of available command patterns.
Register a successful command.
Called when a worker is about to execute a task.
Add a worker to the queue.
Sends a validation email to the current user.
Sends a password reset notification for the current user.
Verifies that the token is valid.
Handles delete requests.
Check if the request is allowed to view.
Return a client object for this Docker container.
Returns a tuple of the TLS client and the key.
The name of the service for this service.
Executes a docker call.
Executes a docker call.
Check to see if the service is in a running state.
Stop a docker container :param now: True :type now: bool :type now:
Filter the queryset by a lower-cased email address.
Update the password of an object.
Updates the password field with the data from validated_data.
Validates that the user exists and has a valid email address.
Create a new token.
Delete a token from the database :param request: :param args: :param kwargs:
Check if user is logged in and if not raise permissionDenied.
Validate and send validation email.
Updates the expiration time of the object.
Generate password reset email context.
Sends an email to the user who owns the notification.
Email handler for password reset.
Custom validation email handler.
Try to get an authentication token for the given key.
Authenticate using a key.
Show a Bokeh notebook.
Convert a list of widgets into a list of Bokeh plots.
get custom js callback for a plot Parameters ---------- change : str The name of the plot to
Returns the widget with the specified param_name.
Render a function object.
Create a simple text widget.
Returns a list of named objects.
Returns the owner of the given method.
Assigns values to _auth_values based on the type of http_auth.
Checks if the server is alive. :param params: :param params: :param
Returns information about the current user.
Check the health of the device.
Returns a human readable string representation of number of bytes.
Calculates the total load of the CPU.
Return the number of bytes of memory required to store this segment.
Get the number of bytes until the network is up.
List of volumes.
Get a volume by its ID.
Returns the total size of a volume.
Returns percentage of volume used.
Calculates the average disk temperature of a volume.
Returns the maximum disk temperature of a volume.
Get a disk by its ID.
Login to Google with an access token.
Make a GET request to the given url.
Execute a GET request.
Updates all data stored in S3 :returns: None :rtype: None :
Gets the synoutilization for this account :returns: synoutilization object
Returns a dictionary of all storage devices.
Creates a context object for a signed request.
Returns the tenant token.
Build the attrs for the widget.
Adds one or more apps to the list of installed apps.
Remove one or more apps from settings.
Returns a dictionary of all global settings.
Handle the GET request.
Changes a value in the config file.
Migrate old config to new config.
Start the WebServer instance.
Wait for a HTTP response.
Fetches the access information from the server and starts the web server.
Checks if the token is present in the config file.
Updates the access token using the config key scope and refresh token.
Create a manifest table from a DynamoDB table.
Split a full path into bucket and prefix.
Check if a bucket is a GLACier account.
Remove None values from a dictionary.
Adds a run_id to the DynamoDB manifest.
Check if a run is in the manifest.
Extract a schema from a URI.
Fixes a schema name by removing the prefix from it and replacing it with the model name
Parse unstruct structure into a list of fixed schema objects.
Transform a line of text into a JSON object.
Converts an event to a JSON-compatible format.
Returns the name of the template to be used in the response.
Print django context.
Print all the variables contained in the context.
Format SQL to HTML.
Formats a Django context as HTML.
Format a summary of a dictionary as HTML.
Apply syntax to the given text.
Returns the formatted representation of the object at the specified level.
Format an object into a formatted stream.
Parse a latex string.
Return a generator of LaTeX nodes starting at the given position.
Return a list of LaTeX nodes.
Convert a LaTeX document to text.
Unescape an ASCII string.
Retrieves information about an organisation.
Retrieves a list of boards.
Retrieves a list of members.
Updates an existing organisation :param query_params: :param query_params: :
Removes a member from the account.
Adds a member to a group by ID Args: member_id (str): The
Add a member to the account.
Retrieves information about a list of users.
Adds a card to your account :param query_params: :param query_params
Retrieves the label information for a user.
Retrieves a list of items from the server :param query_params: :param query
Updates the label name. :param name: label name :type name: str :
method updates label json data :param query_params: :param query_params: :
Builds and returns the authorisation URL.
Retrieves the card information.
Retrieves a single board.
Retrieves a list of items matching the supplied query params.
Retrieves a list of checklists.
Add a comment to a user :param comment_text: :param comment_text:
Adds an attachment to the account.
Adds a check list to your account.
Adds a label from a dictionary.
Adds a label to a class.
Adds a member to a list of members :param member_id: ID of the
Retrieves the member information for a user.
Retrieves a list of cards.
Retrieves a list of organizations.
Creates a new board and returns it.
Retrieves the board's information.
Retrieves a list of lists matching the specified search query params.
Retrieves a list of user's labels.
Retrieves a card by its ID :param card_id: ID of the card to
Get a list of checklists.
Retrieves an organisation by name and optional parameters :param query_params: The parameters
Update a board :param query_params: :param query_params: :return:
Adds a list to your account :param query_params: :param query_params
Adds a new label to this account :param query_params: :param query_
Retrieves the checklist information for a user.
Get card from checklist.
Returns a list of checklist items.
Updates the check list identified by the given name.
Adds a new item to the account :param query_params: :param query_
Removes an item from the server :param item_id: The ID of the item
Update the name of a check list.
Update the state of this check list.
Add authorisation parameters to query_params.
Checks for errors in the response.
Builds a URI from the path and query params.
Fetches a JSON object from a URI path.
Create an organisation object.
Create a board from JSON data.
Create a label.
Create a trolly list.
Create a card.
Create a check list.
Create a member object from JSON data.
Gets an organisation by ID or name.
Get aboard. :param str id: ID of the board :param str name:
Get a list by ID :param str id: list ID :param str name: name
Return a card.
Gets a check list.
Get a member by ID or name Args: id (str): The ID of the member
Extracts a domain name from a URL.
Convert raw text into Markupless.
Set a user's password :param service: :param username: :param password:
Split a text with a list of locations.
Mark a regular expression as should be split.
Mark the start and end of a regex as undecided.
Entry point for command line utility.
Create an AES cipher object. :param password: :param salt: :param nonce:
Return AES module name for the given mode.
Return the priority of the job.
Check if the scheme is correct.
Called when the client wants to publish.
Make a unique identifier for the object.
Called when client connects.
This method is called every time a connection is established.
Encodes a string.
Decodes a string.
Encodes a 16-bit integer into a bytearray.
Encode the length of the integer value.
Returns the length of the value in encoded.
Encodes the message.
Encodes the variables into a binary string.
Decodes the incoming packet.
Encodes the variable header.
Decodes the packet and stores the result code.
Decodes the incoming packet and stores them in this object.
Encodes the header of the packet.
Encodes this message into a binary string.
Decodes the incoming packet and stores them in this object.
Encodes this message.
Encodes this message into a binary string.
Decode a single packet.
Decodes the incoming packet.
Generates the url to send to the API :param method: :param kwargs: :
Make a request to the Keen IO API.
Refreshes the list of blocks and bcasts.
Takes a 2D array and returns a 2D array of the same shape as the
Perform fitting on the data Parameters ---------- data : data to fit Returns ------- data to fit
Computes k-means clustering. Parameters ---------- n_clusters : int number of clusters
Predicts the class of the input data Parameters ---------- data : list of numpy.ndarray
Map a set of samples to new clusters Parameters ---------- size : int The number of samples to
Sort the clusters according to the number of clusters in the data Parameters ---------- data : numpy.
Returns a string representation of the given datetime.
Returns the total number of points in a dictionary.
Returns the amount of time span that is greater than or equal to the total time span.
Calculates the unit area of a matrix.
Pretty-print an element.
Convert a string to a human readable name mass.
Convert a string to a mass name.
Copy files from one directory to another.
Given an array of bools, return an array of indices where each element in the array
Convert list of tuples to boolean array.
Fast smooth op.
Calculates the gradient of an array using a rolling window Parameters ---------- a : np.
Finds the minimum values in x and y.
Compute meanshift of a cluster Parameters ---------- data : array-like, shape = (
K-means clustering. Parameters ---------- n_clusters : int number of clusters.
Reads the defined SDRs and returns them as a numpy array Parameters ---------- srm
Reads the latoolscfg file and returns it as a dictionary.
Read the latoolscfg file and return it as a tuple.
Copies the SSM file to the destination.
Exclude items from an image that are above a given threshold.
Create a plot from the focus distribution Parameters ---------- analyte : str name of the analytes
Determine the time intervals for which the signal is active.
Calculates the ratio of all analytes.
Calculates the value of one or more analytes.
Returns a dictionary mapping each time point to an ablation time point.
Calculates the correlation between two time series Parameters ---------- x_analyte : list of
Create a new filter :param name: name of the filter :type name: str :
Get parameters to pass to filter.
Plots histograms from a 2D numpy array Parameters ---------- dat : 2D numpy array
Load reference data from csv files.
Calculates the total number of molecules.
Generates a keyword from a set of variables.
Returns annihilate of a predicate over the stack.
Return a copy of stack where the last element is not in stack.
Calculate standard deviation, standard deviation, standard deviation, standard deviation, standard deviation, standard deviation
Gauss variates. Parameters ---------- x : array-like, shape = 2D array
Computes the stderr of an array.
Get samples for a given subset.
Calculates the ratio of a standard standard standard.
Make a subset of samples.
Applies a classifier to the data Parameters ---------- name : str The name of the classifier to
Filter files that are not in the subset Parameters ---------- filt : bool The number of files to
Run a filter on the report and store the results in the report_dir.
Minimal export of traces for a set of samples Parameters ---------- outdir : str Name of the
Saves a log of the current state of the simulation to a file.
Returns the result of applying a map function on the left and right.
Calculates bayes scale of a string.
Calculates the median of an array.
Estimate noise from a signal using despike algorithm Parameters ---------- sig : 2D array
Exponentiate a signal with exp decay noise Parameters ---------- sig : array-like, shape
Add an analysis filter to the analysis filter chain Parameters ---------- name : str Name of analysis filter
Remove one or more sets from the analysis.
Clears all components.
Removes unused components from the analysis tree.
Given a fuzzkey, return the name of the component that matches that fuzzkey.
Grab an image from a specific image filter :param filt: image filter :param analy
Get a string representation of the model's information.
Create a log file from the given log header and file_name.
Read a log file and return a list of the files to run.
Get the information of a modem.
Sends a message to a modem via SMS.
Use the file_or_string as input to parse an SQL file.
Convert a link from notebook viewer to a notebook link.
Generates the thumbnail for the thumbnail link.
Returns the code div tag that represents the code example.
Get the code example of the notebook.
The URL to the notebook.
Returns the path to the output file.
Create the notebook's py file from the notebook's py_file.
data_download is the number of files to download.
Create a thumbnail for the image.
Scale an image to fit within a given width and height Parameters ---------- in_fname : str
Saves the thumbnail for the reference image.
Copies the thumbnail figure from the notebook to the file system.
Get the URL for a notebook file.
Yield all languages that are not in db_table_fields.
Process thumbnail file for given size. :param thumbnail_file: :param size: :
Pre-save the image for saving.
Returns all thumbnail objects.
Creates an thumbnail for this image.
Delete an image from storage.
Creates a thumbnail of a source.
Get a thumbnail by name and size.
Delete a source from the storage or metadata.
Add a new incoming message.
Subscribes to digits only by number.
Returns a list of all available states.
Send a message to a specific provider.
Get a dictionary of receiver blueprints.
Receive a message from the gateway.
Receive a status from the gateway.
Forward an object through the network.
Signs a Web3 transaction.
This interface is used to call the ethereum estimate_gas method of ethere
Estimate the amount of gas needed to call a safe address.
Writes data to the file.
Read a line from the serial port.
Check if this message has bad headers.
Attach a file to this request.
Registers one or more services.
Load a config from a module.
Registers new resources.
Returns the value of the given key if it exists.
Handles the case where an exception is raised from the last iteration of the chain.
Sets up the data manager and calls the data manager's setup method.
Calculate the N-derivative of the signal at the given wavelength.
Calculates the Cauchy equation given a wavelength and a list of coefficients
Generic TeleSign REST API DELETE handler.
Determine if two files are the same.
Create a Junction or Junction file.
Initializes the logging dictionary.
Raise usage error.
Returns a tuple of readers and a list of vcf files.
Retrieve the new column header from the input vcf_reader.
Return a list of unclaimed readers.
Calculates the mean and variance of a population based on a VCF file.
Given a list of unclaimed VCF reads, return the original list of unclaim
Returns a list of strings separated by newline characters.
Returns the first line that starts with `data`.
Returns the first line that ends with `data`.
Searches through the file and seeks to the next line.
seek to the previous line in the file.
Returns the last N lines of the file.
Returns the first N lines of the file.
Traverse the file until we've reached the end of the file.
Given a set of readers, return the unclaimed readers and the remaining read
Parse a single VCF record.
Return a dictionary mapping sample names to their tag values.
Return the set of tags to use for this sample.
Join the info fields into a single string.
Returns the format field for this sample field.
Returns the string representation of the sample field.
Return the string representation of the VCF entry.
Add a value to a sample tag.
Add or replace a filter.
Get a list of all available categories for a given user.
Formats a category and a list of products.
Create a staff product form.
Add a product error.
Returns a model fields form.
Return a list of cart items that are pending orpurchased.
Send an e-mail to a specific destination.
Parse an OSM file and return nodes, way, relations.
Iterate over the OSM notes.
Returns True if the condition passes for the given user.
Returns True if the given user is already logged in, False otherwise.
Returns the number of remaining items for a given user.
Filter the products that are released by a given user.
Filter the queryset by a given user.
Pre-filter the queryset for a given user.
Filter queryset by pre-filter.
Filter groups that are in the given user.
Create a commerce cart for a given user.
Auto extend the reservation for a given amount of time.
Make sure that a user is not in the cart and add them to the cart.
Make sure that simple product items are available in the cart.
Recalculates the discounts for all items in the cart.
Returns an iterator over the rows of the table.
Determine if the form is valid.
Render data to HTML.
Returns a list of all available reports.
Return a list of all items that areold in the invoice.
Return a queryset of all payments.
Report the user's refunded credit notes.
List all products and their status.
Show the status of the discounted items.
Filter by product line items.
Searches for payments by date.
Report credit notes.
Show a list of payments.
Return a list of people that are up-to-date.
A record of the user's profile and their profile.
Returns a set of all available categories for a given user.
Returns the number of available credit for this invoice.
Determine if a user is sold out and unregistered.
Allows the user to edit a profile.
Handle profile form.
Handle the products form.
Handle a user's Vouchers page.
View function that handles a manual payment.
Refund an invoice.
Extend a reservation for a given user.
Sends an invoice email.
View for badges.
Render a badge for a given user.
Given a user and a list of categories and products, return a list of discounts that
Annotate queryset with past uses.
Return a list of all available products for a user.
Applies the credit note to the invoice.
Calculates the cancellation fee for this invoice.
Generates a random access code.
Get object from module and property name.
Return the invoice for the given cart.
Generate a manual invoice.
Applies credit notes to an invoice.
Checks if user can view the invoice :param user: :param access_code:
Refreshes the invoice and cart.
Validate that the invoice is allowed to pay.
Updates the invoice status.
Set the invoice's status tostore.
Checks if the invoice matches the cart.
Update the validity of the invoice.
Releases the invoice.
Refund the invoice.
Sends an email to the user of an invoice of the given kind.
Update the annotation from a dictionary.
Flatten a field into a dictionary.
Print the downloads found in the annotation file.
Download a file from the cloud.
Get a list of available processors :param str processor_name: The name of the processor
Print all registered processors and their types.
rundata a tag from json :param str json: json :type str :param
Uploads files to a remote server.
Uploads the given file to the server and returns the session id.
Download a list of data objects from Gendata.
Returns a list of all subclasses of the given class.
Get repo and project details.
Given a list of variants, return a generator of potential changes.
Given a list of variant ids, return a list of evidence, and a list of merged
Updates an element's attributes :param allow_partial: If partial is True,
Remove duplicates from a list, preserving order.
Use Asana to authenticate your application.
Prompt user for a value from a list.
Retrieves the issue data from the saved data file.
Moves saved data from one issue object to another.
Get the data for a saved task :param task: task to save :type task:
Get an Asana task by task id.
Applies the given key to the given value.
Flush all items from the queue until shutdown_event is set.
Create a missing task in a workspace.
Returns the list of available data types for this project.
Takes a log string and adds it to the EKMeters log file.
Init a serial port.
Sets the number of polling values. :param max_waits: number of wait
Render the reads from the database as JSON.
Set the context of the log file.
Calculates the cost function from a pixel name.
Set the maximum demand period.
Set the user's password.
Return the number of months in the given direction.
Assign a schedule to be run at a given period, hour, minute, and tariff
Determine if we need to assign a new season schedule :param season: season number :
Function to assign holiday date based on holiday date.
Reads all available schedules for a particular table.
Read month TARs from the device.
Read the list of available audio files from the device and convert them to ISO 8601 format
Reads the settings. Returns True if the settings are valid, False otherwise.
Set message to be sent to ekm command.
This function is used to write a password to the serial port.
Update one or more observer instances.
Send one request to one or more servers.
Read A value from the device and store it in self.m_a_ CRC.
Reads and sends a request to the Crazyflie.
Make a dict with all possible field names as keys and their values as values.
Set LCD display list. :param display_list: list of display items to set
Set relay status. :param seconds: number of seconds to set relay :param relay:
Postend to the serial port :returns: None :rtype: None :raises:
Set the pulse input ratio.
This function will set the ZenoreSetTableKwh property.
Set or update the LCD table.
Iterate over all schema fields.
Iterate over a schema.
Generate random text.
Returns a string containing a summary of the execution time and the elapsed time.
Color text using ANSI escape sequences.
Show text at current cursor position.
Return a summary string of a test result.
Parses the arguments and returns a list of command-line arguments.
Set up the ivoire instance.
Set up and run the experiment.
Runs the transform script, returning the path to the transform script.
Transform a describe statement into a class definition.
Transform the body of a describe statement into an example node.
Transform an example variable into a function definition.
Transform a list of example body nodes to use the context variable.
Return an ast.arguments for a function that takes only one keyword argument.
Registers the filefinder class.
Transform source bytes to code.
Apply an argument parser to the command line arguments.
Loads a module from a path by name.
Given a path, load it into a Python module.
Discover files in a directory.
Remove a file from a places.
Restarts the application with the given name.
Calls the function with the given results.
Makes a Service name from the given options.
Refreshes the session data from the server.
Remove expired nodes.
Remove a node from the container.
Get the last updated time of a node.
Get a list of all nodes.
Remove expired nodes from the session and refresh the cache.
Increment the number of modified time on the client.
Return a list of values separated by delimiter.
Return the name of the child elements of the given path.
Merge two states. :param status: :param status: :return:.
Returns a query that returns all elements that match the given value.
Return a query that matches the given value.
Make a Service object.
Parses the input and returns the result.
Create an optional parser.
Create a repeated one parser.
Create a repeated parser.
Create a new parser with only one separator.
Create a repeated separator.
Closes the call and cancels the call if it was closed.
Check if the URL has been closed.
This function creates a master service that can be used to manage may-and-and-
Wrapheart a service.
Freeze a model from a checkpoint.
Freeze a model from a checkpoint.
Recursively save a graph only from a checkpoint.
Recursively restores weights from the input checkpoint and saves them to output_path.
Creates a tf.train.v3 Saves object from the input checkpoint.
Parses the given template tag using the given parser.
Render a template using the given context.
Check if arguments are valid.
Given a parent context, return the data to pass to the template's template's
Parses and validates the template tag.
Return a context dict based on the context_value_name and tag_args.
Convert a caffemodel to a tensorflow session Parameters ---------- caffemodel_path
Recursively freeze a caffemodel.
Recursively save a caffemodel to a file.
Make the number of rows, columns from a sequence.
Yield every other item from an iterable.
Removes duplicates from an iterable.
Return the next element from an iterable.
Utility function to suppress exceptions from callables.
Assert that an iterable is ordered by the given key.
Swap the result of a partition if it's not found.
Returns the first n queues.
Reset the iterator and the saved items.
Returns a tuple of `as_var` and `as_var` if any.
Create a descendant of this key chain.
Iterate over an object recursively.
Given a CSS selector, parse the object and return the selected elements.
Parse a css selector.
Return list of parents of ` lhs` and ` rhs`.
Return list of the siblings of the two nodes.
Returns a list of node objects that match the given validators.
Make a request and return the body.
Expire all items in the cache that are older than the given age.
Set the value of a key.
Get a value from the store.
Returns True if `k` is in the cache.
Check if the given timestamp is a valid Nistbeacon value.
Create a new SeedResponse object from a JSON string.
Create a new instance of this class from the given XML description.
Override Django's rendered_content method to add jsmin.
Returns a list of lines from the log file.
Returns a list of rows.
Validate a token against expected_data :param token: :param expected_data: :
Generate a Fernet object using the default Fernet backend.
Validate a token using the supported digest algorithms.
Create a token.
Computes a counter32 number between two numbers.
Computes a counter64 number between two numbers.
Calculates the average duration of the total duration.
Create sources and call setuptriggers on them.
Send an event from one source to all other sources.
Spawn a source watchdog for events from the sources list.
Parse a format string.
Parses a line of text and returns it as a dictionary.
Validates that the data for the field is valid and that the data for the field is
Validate the token and store it in the session :returns: None :rtype: None
Returns the name of the device.
Print a warning message on the top of the message.
Connects the receipts.
Create a link to the secret.
Sends an accept notification for a record.
Send a confirmation notification for a given record.
Send email validation notification.
Send a reject notification.
Send a notification.
Create a new secret link.
Validates the given token against the expected data :param token: :param expected_data
Revoke this link.
Create a record. :param str recordid: record identifier :type str recordid:
Get a request by receiver.
Confirm email address of pending request.
Create a link to this user's secret.
Generate a hash using the provided data.
Verifies whether the signature is valid. :param timestamp: :param message_hash:
Determine if a record has been marked as embeddinged.
Create an access request.
View function which handles an email confirmation request.
Return an ssh command client.
Reverse the order of a column.
Get or set the selected item.
Get the items to sort :rtype: list.
Returns the version string.
Set the version number of the file to the given new version :param new_version:
Start the timer.
Tick the service if it's not yet running.
Delete a link. :param query: The query to delete :type page: int :
Cleans up and disconnects the connector.
Removes all queued events from the queue.
Add new events to queue.
Create an Elasticsearch client.
Encodes an event into a protobuf message.
Encodes a list of events into a proto_pb2 message.
Decodemets a string into a protobuf message.
Sends a list of events.
Generate a file.
Retrieve file previews.
Message loop for sending messages to the workers.
True if we'd like to log more than our log_interval.
Raises an exception if the operation failed.
Do the actual work of preparing a string.
Add a footer to the end of the page.
Builds a payment parameters object from `amount` and `client_ref`.
Build the Register credit card payment parameters.
This interface is used to pay with alias.
Returns a short version string.
This method is called when the user clicks on the Apply button.
Create and connect the shortcut. :returns: None :rtype: None :raises:
Activate the item at the given index.
Called when the user clicks on an item in the list :returns: None :rtype
Set the location of the currently selected item.
Utility method to finalize the options.
Fetches the children of the current node.
Return the icon of the item at the given index :param index: The index of the
Executes the given command with the given arguments, and returns its exit code.
Returns the maximum file descriptor to use.
Closes the given file descriptor.
Closes all open file descriptors.
Redirect the stream to the target file descriptor.
Set widgets on a form.
Given an app name and a module name, imports the module and returns the module.
Imports all submodules from settings.py in all installed apps.
Renders a template to include in the current context.
Check if path is a valid file system.
Check if URL is a valid S3 URL.
Returns the absolute path to a template file.
Returns a list of all objects in the bucket.
Build JSON data for a task from task_template.
Execute the operation :param override_wf_json: :param override_wf
Create an archive of the project in the given folder.
Make a directory if it doesn't exist.
Lists all files matching the pattern.
Restore the project to the given folder.
Create a new API client.
Returns a list of all files in the given storage path.
Downloads the file at `path` to `target_path`.
Checks if the storage path exists.
Gets the parent entity of the given path.
Creates a folder on the storage server.
Uploads a local file to a destination path.
Delete a file or folder.
Validates that path is a valid path for storage.
Create a new CloudFormation API client.
Create a new Service object.
Gets the metadata for a given entity.
Deletes a project from the storage.
Deletes a folder from the authenticated user.
Copies a file to another file.
Returns the url to sign a file.
Emit a record to the collection.
Return a copy of this service instance with the given name and version added.
Return a copy of this request with the given HTTP headers.
Adds new parameters to the request.
Call this method to raise an exception of a certain class.
Returns a list of fields to display.
Adds a map job to the job's children.
Runs oncotator on the given VCF.
Sort the elements of the list by a function Parameters ---------- f : function to sort the elements
Returns a list of datetime objects.
Load data from JSON file.
Shifts a time value by the given amount.
Returns the sum of all values.
Collect Rfxcom data.
Create a new user record.
Parses vns results from web page and returns a list of dictionaries.
Parses the release results page and returns a list of dictionaries.
Parses the DOM and returns a list of OpenMRSstaff results.
Parses the character results page and returns a list of dictionaries.
Given a soup object, return a list of tags.
Parses user results from page and returns a list of dictionaries.
Create a tarball from a list of files.
Wrapper for ``op`` for all files in `file_paths`.
Copies a file from the input directory to the output directory.
Returns a list of docker parameters for this Docker container.
Refresh metadata from file.
List of streams that have been created on the server :returns: list of streams :r
Export the stream to a directory.
parse the results for a search type of type `stype` using the given soup.
Reset API key for device.
Returns a list of user objects.
Run BwaIndex on the given ref_id.
Connect to theordb API.
Add a stream to the container :param streamname: The stream name :param schema:
Add a stream to the stream cache.
Insert stream into database.
Starts the syncthread thread. :returns: None :rtype: None
Stops the thread that owns the syncthread.
Download a file from a URL and store it in the job's filestore.
Upload a file to S3.
Print all labels of an ontology.
Print a tree of ontology objects.
Calculate the mean insert size of a BAM file.
Create a new object in the database.
Export data to JSON file.
Return a device object.
Get a list of labels for a given ontology.
Get a list of hierarchy objects for a given ontology.
Returns an empty config file.
Gets the mount path of the Docker container.
Add an option to the arg parser.
Create the argument parser.
Create a command to run a pipeline.
Sets up the auth object for the websocket connection.
Performs the handleresult operation on a response object.
Retrieves a ping from the server.
Creates a crud.
Updates a crud path.
Delete a crud path.
Subscribe to a stream.
Get list of devices.
Run cutadapt on the work directory.
Run samtoolsfaidx on the given ref_id.
Runs the samtools index on the given BAM file.
Runs Sambambamba Markdup on a BAM file.
Run the Samblaster tool.
Run Picard mark duplicates on a BAM file.
Run Picard sort on the input bam.
Download and run Kallisto.
This method creates a DataFrame with the user's affmethods.
Send a command to the websocket.
Subscribe to a stream.
Connect to the websocket.
Initiate a reconnection.
Resubmits the stream to all registered subscriptions.
Callback when the websocket connection is opened.
Called when the websocket connection is closed.
Called when an error occurs in the websocket connection.
This method is called when a message is received from the websocket.
Make sure we've closed the websocket connection.
Use GATK to select variants from input files.
Run quickcheck on a BAM file.
Write the configuration to a JSON file.
Get the configuration as a dictionary.
Gets a term from an ontology.
Searches for ontology by name :param name: name of ontology :param query_fields
Use this method to suggest an ontology.
Iterate over terms of a given ontology.
Iterate over all descendant labels.
Iterate over all the labels of a ontology.
Iterate over terms of a ontology.
Run fastqc on a pair of inputs.
add a stream to the query.
Starts a spark container.
Starts a Spark cluster.
Start a hdfs container.
Stops the hdfs container.
Checks the status of a spark container.
Given a zone name, return the name of the zone.
Fetches the configuration of the specified zone.
Merge multiple XML documents into a single XML document.
Validates the given changeset.
Minimize the number of members with respect to the fitness score.
Returns the average fitness of the members.
Calculate AVE cost function value.
Returns the value of the cost_fn_val of the current state of the simulation.
Returns the number of parameters for this process.
Returns a list of members.
Add a new parameter to the parameter list :param name: parameter name :param min_
Return a copy of the dictionary with keys replaced by spaces.
Returns a generator of environment variables.
Check if the callable throws any of the given exceptions.
Given a list of hits, transform them into a package list based on the version.
Transform a result to a string.
Convert an HTML document to aattrs object.
Converts aattrs object to HTML.
Open a document in a web browser.
Removes this element from its parent's tail.
Drops the tag from this element.
Apply CSS selector to the current node.
Iterator over all loghandler members.
Return a dictionary of the number of distinct cache entries.
Determine if a class is a single class.
Check if the module is a single module.
Ensures that the params passed to the request are valid.
Ensure the id is either a string or an int.
Decodes a file system path. :param path: path to decode :type path:
Escapes string keys and values from an iterable.
Returns the codec name for the given encoding.
Detect the character encoding of the stream.
Returns the remote address of a port.
Converts a number to a number.
Parses a BeautifulSoup object from a string.
Parses a file and returns an ElementTree.
Converts a BeautifulSoup tree to HTML.
Get the current traceback.
Returns a string representation of the exception.
Renders a summary of the report.
Generates the plaintext representation of the error.
Render the source.
Return the name of the egg that matches the search term.
Sort a list of links by egg fragment.
Returns the Content-Type header from the given URL.
Returns a generator of links.
Determine whether or not the request is from a trusted or not.
Return a list of files in src_dir that should be included in package_data.
Given a package and a list of files, return those files that should be included in the
Yields a list of requirements found in the given file.
Join lines from an iterator into a single string.
Removes comments from an iterator.
Return `node`s representation.
Return `node`s representation as attribute name.
Coerce a string into a number.
Pushes the app context onto the stack.
Pop an app context off the stack.
Return a copy of this request.
Sets up the url adapter to match the current request.
Push a request context onto the stack.
Returns True if dist is editable, False otherwise.
Add a url_value_preprocessor function to the app's url_value_
Decorator to add url defaults to a request.
Get the root path of an import.
Returns a jinja template loader.
Run the completion script.
Return the domain for the cookie.
Determine if the root of the supplied path is a purelib distribution.
Yields the absolute paths of packages that are installed in the virtualenv.
Check if the given `version` is compatible with the given `name`.
Build one of the requirements and return the path to the wheel.
Iterate over all the symbols in a code object.
Write delete marker message to marker file.
Check if we are running under the current virtualenv.
Returns the username of the current process.
Create an distutils scheme for the given distribution.
Parse the cache control header.
Caches the given response.
Loads a template from a device.
Save the changes to the config file.
Converts the given value to the appropriate type.
Add one or more filters to the filterer.
Add a list of handlers to the given logger.
Add all of the handlers to the given logger.
Executes a Python script from a file.
Temporarily override an existing temporary file.
Get URL and revision.
Attempt to get an attribute from an object.
Generates a Python source.
Get the default cache directory.
Yields all the distributions found in a zip archive.
Yields distribution objects for a given path item.
Declare a namespace.
Returns the MRO of the given class.
Looks for an adapter in the registry for the given object.
Ensure directory exists.
Iterate over all entry points of a given group.
Return whether or not this distribution can be added.
Evaluate a marker.
Evaluates the given markerlib text.
Format a log record.
Returns a decimal quantum with a given precision.
Returns the precision of a number as a float.
Converts a value to the correct number of significant elements.
Returns a class that is unpatched.
Check if value is a valid requirements list.
Fetch an egg using pkg_resources.
Do aice roll.
Convert a price string to an object.
Create a price element :param args: :param kwargs: :param kwargs: :return
Validate the request.
Get a method from the app.
Applies the given method to the given arguments.
The module of the blueprint.
Returns the blueprint this rule belongs to.
Make an abstract distribution from a sequence of requirements.
Walk through all requirements and apply them to each one.
Return a list of all the namespace packages in the distribution.
Encodes an object into JSON.
Tokenize a document and add an annotation to each token.
Annotate merge annotations of the old tokens with the new one.
Copy annotation from one token to another.
Compress a list of tokens.
Given a token list and a markup function, generate the HTML representation of that token.
Expand a list of tokens into a list of tokens.
Locate the end of a un balanced string.
Given a list of chunks, make sure each chunk is a HTML tag.
Flatten an element into a sequence of tuples.
Splits text into a list of words.
Return HTML start tag.
Return the end of an element's tail.
Serialize HTML fragment into HTML.
Fixup tag "ins" for "del" tags.
Returns the URL to cache the resource.
Automatically links elements to other elements.
Kill conditional comments.
Given an HTML document, parse it and return the document root.
Export the repository at `location` into a new location.
Get the revision number for a given location.
Returns the module name.
Determine if we should propagate exceptions.
Return the full path to an instance of the model.
Update the template context. :param context: :return:.
Handle an HTTP exception. :param e: HTTP exception to be handled :type e:
Handle an exception by sending a got_request_exception signal.
Raise a routing exception from a request.
Adds pre and post processing to the response.
Return the default options response.
Return a URL adapter for the given request.
Injects url defaults into the url_default_functions dictionary.
Yields the unique elements of an iterable.
Given a package metadata, determine what dependencies it needs.
Converts a requirements file into a string that can be used as a distribution name.
Convert a package's requirements file to a metadata dictionary.
Iterate over all the modules in the directory.
Returns a generator yielding all classes in the module.
Returns an iterator over the class's method names.
Determine if the path is a module path.
Walk a directory tree.
Sets up the default values for the dump_arg_ defaults.
Sets up the default values for the command line options.
Set multiple keys and values from a mapping.
Increment the value of a key by delta.
Dumps an object into a pickle string.
Build an editable options dictionary from a regular expression.
Populates link with requirement from finder.
Make sure we have a source directory.
Removes the source directory and the build directory.
Get the distribution for this container.
Return a list of possible config directories for a given application.
Iterate over file names in all modules.
Restart the application with reloader.
Converts `s` to text.
Locate the CA bundle on the system.
Parse an HTML document and return a tree.
Parses the contents of the document stream, returning an HTML document.
Parses a fragment from a file-like object stream.
Translates a word according to its rules.
Converts a string to a list of tokens and a list of strings.
Bind to the http server.
Print report to stdout.
Load data from a pickle file.
Given a dictionary of parameters, and a dictionary of keyword-value pairs, create a stylesheet
Run a command on the shell.
Get the version number of the Python implementation.
Given a location and a basename, return a list of distribution objects.
Find external links in page.
Open a local file.
Return a list of all known directories in sys.path.
Return a set of all directories in the system path.
Add a package to the system.
Add a site-package to the system.
Check if the current user site is the right one.
Get an alias for the current locale.
Set the default encoding for the console.
Forces the global egg to appear after the local site packages.
Fixes paths in sys.path so that they are absolute.
Run a subprocess that is nonblocking.
Check to see if the module has build_ext.
Convert CWL source files to Python source files.
The WSGI debug endpoint.
Get a resource from a local file.
Check if a file name is a URL.
Unpack a file from a link.
Download a file from an http link.
Check if the download dir exists and has the correct hash.
Convenience function to register a format action for a currency.
An exchange endpoint. :param _context: :param component: :param base: :
Decodes the data. :param data: :param decode_content: :return:
Default template context processor.
Render a template and send it to the client.
Render a template with the given context.
Render a template source with the given context.
Parses the given version string and returns a version object.
Returns True if the given name is already declared.
Add variable names to identifiers.
Handles from x import x as y statement.
Service factory. :param app: Flask app :param host: HTTP host :param port
URL encodes a string or unicode object.
Returns a list of spectrum that matches the given requirement.
Populate a ` requirement_set` with the contents of the given arguments.
Exports given location to given location.
Lookup a list of Amazon product objects.
Generator that iterates over all pages.
Return the ancestors of the element.
Return the children of the element.
Return the element at the specified path, or None if no such element is found.
Safely get the element and return it's text.
Safely get the date value.
Calculate price and currency.
Get list price.
If request.method is 'cached' then we cache the response before sending.
Make sure the response is cached.
Return a title from a string.
Compare two constant time values.
Verify the signature of a key-value pair.
Derives the secret key.
Get the signature of the value.
Sign a value with the signature.
Verifies whether the signature is correct for the given value.
Validate and unsign a signed value.
Sign a value with its timestamp.
Returns True if signed_value is valid, False otherwise.
Serialize an object to a binary string.
Handle an error received from the server.
Given a list of packages, yield all of them.
Yield all the absolute paths to all the directories under the given base path.
Prepares the response to be sent to the client.
Unsigns the given wheelfile.
Unpack a zipfile.
Install setup.py scripts for a list of distributions.
Load graph from file and redraw it.
Create a xdot canvas for the whole graph.
Returns the node with the given id.
If new is true, create a directed graph, otherwise create a new graph.
When we get a new graph, we need to add it to the object.
Called when the component is changed.
Normal left click event handler.
Called when diagram canvas has changed.
Clear the viewport canvas.
Called when the domain model has been changed.
Removes the old model from the map.
Map an element to a diagram.
Parse Xdot data.
Process font tokens.
Process an ellipse element.
Process a polygon. :param tokens: :param filled: :return:.
Process a polygon line.
Process text. :param tokens: :return:.
Process image tokens.
Renders a grid file.
Save an object to the dot file.
Loads the object from the dot file at self.dot_file. absolute_path
Determine if a point is within the origin.
Draws the bounds onto the gc.
Opens the wizard and sets the finished flag.
Create a session and store it in the context.
Parses the dot code and stores it in the self.model :returns: None.
Create a new model from an existing configuration.
Opens a save file dialog.
Save the model to a file.
Opens a file dialog and saves the model.
Loads the graph from the info and configures it :returns: None :rtype
Load the nodes from the data model.
Configures the edges on the control.
Displays information about a godot :returns: None :rtype: None :
Add a node to the control graph.
Add an edge to the control.
Adds a subgraph to the graph.
Add a cluster to the control.
Request a graph from the server.
Godot options dialog.
Create a dot code representation of the model.
Shows the user the exit of the application.
Moves components to the origin of its parent.
Saves the current object to a file like object.
Load from file like object.
Save the collection to a file.
Load an object from a file.
Returns a property that is an alias of the given object.
Reads a text file and yields words.
A list of all start_words for this page.
Adds an order to the chain with the given name.
Remove a chain by name.
Iterate over the source and add each element to the chain's content.
Create a dot file in the current working directory.
Removes a node from the container.
Returns node with given id or None if not found.
Removes an edge from the graph.
Adds a subgraph to the graph identified by `subgraph_or_id`.
Called when a program has been changed.
Sets the list of nodes and edges.
Parse a graph from a DOT file.
Parses a DOT file.
Builds a top graph from a list of tokens.
Given a time in seconds, return the time units and multiplier.
Format a duration in seconds.
Load graph from file :param new: path to file :type new: str :type
Create and return a UI for the graph.
Generates windows of a given length.
Returns the children of an object.
Adds a node or edge to an object.
Inserts a node or edge into an object.
Delete a node or edge from an object.
Called when the children are replaced.
Called when the children of the object have changed.
Returns the label for the given object.
Set a label on an object.
Called when the label of an object changes.
Initialize the ui for the Traits.
Updates the editor's canvas.
Add listeners to the canvas object.
Called when a node is replaced.
Called when nodes are added or removed.
Adds the given features to the graph.
Called when edges are replaced.
Called when the edges of an object are changed.
Adds edges to the graph.
Parses a single xdot directive.
Called when drawing an object.
Return a node.
Create an edge from a table.
Create a mongoengine proxy instance and add it to the context.
Parse the xdot drawing directive.
Create a container for the xdot label.
Called when drawing is changed.
Callback for the position of the widget.
Called when the position of the widget changes.
normal right down event handler.
Prints out syntax-style syntax, style definitions, style definitions, and style definitions.
Draws the main layer onto the gc.
Check if a point is in the polygon.
Draws the main layer onto the screen.
Handle an event from all registered engines.
Main entrypoint for the worker thread.
Return the full url of a page.
Render the previous and next links.
Render next and previous links.
Create a URL identifier from the user and password.
Discover all modules in a directory.
Return a list of all the modules found in the given directory.
Lists all the modules in a module that match mname.
Ensure directory exists.
Stores the contents of a string into the blob identified by the given key.
Checks the number valiaty for validity.
Loads the module specified by module_name.
Adds the given path to the list of paths.
Searches for a module in the search path.
Split a line into a list of lines.
Removes all namespaces from the element tree.
Check that the current version matches the desired version.
Create an instance from a YAML dictionary.
Merge another dictionary into this one.
Execute all the actions in the shell.
Add details to the message.
Sends a new record to the rate limit.
Adds imagerendition to context.
Stores the current attempts for a given key.
Add the given url to the queue.
Starts the worker threads.
Set the value of a key.
Get a key from kvstore.
Recursively walks a key, returning a list of all the keys that exist.
Returns a list of keys from the API :param k: key to retrieve :type k
Deletes a key from the kvstore Args: k (str): The key to delete
Plot a heatmap of the importance report.
Add months months to a timestamp.
Add months to a date.
Check if we are on achristmas period.
Use a music service.
Use a storage service :param service_name: name of storage service :param custom_
Reads the CSV file and converts it into a pandas dataframe.
Returns a list of objects from a JSON file.
Save the data in x to a JSON file.
Returns a filtered list of lists where the elements in x are the same with the same label
Averages data by label.
Restore data from session.
Merge dictionary b into dictionary a.
Finds all the blocks in the installed apps.
Verifies that a block is registered.
Registers a block :param block_type: Block type :type block_type
Unregister a block of the given type.
Convert file to mp3 format.
Return a reasonable version of the desired version.
Handle SSL redirect.
Parses a datastructure's content type.
Parse a comma-separated list of strings.
Resizes the image to fit the given width.
Downloads a video.
Connect to Google Storage.
Uploads a file to S3 :param file_name: The name of the file
Connect to the API server.
Updates the filenames of the ROI model.
Reads an APhi from the given file.
Scale AMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMA
Read Pure water absorption from file.
Read Pure water scattering from file.
Read the wavelengths from a CSV file.
Writes the given iop to the given file_name.
Builds the b to be used for plotting.
Builds the A matrix.
Builds the C matrix.
Builds all the iop.
Sets the list of parameters to be passed to the constructor.
Reads a param file to a dictionary Parameters ---------- file_name : str The file name
Convert a string to a list of floats.
Set the signal handler for the given signals.
A pseudo handler function that will print a warning if the process is not running.
Default handler for all signals.
Pause the process for a given number of seconds.
This function is called when the process exits.
Resumes all the status callbacks.
Removes an event from the event_list.
Fetches a sorted metric and returns it sorted by number.
Determine which arguments to pass to a function.
Make a partial argument list from a partial instance.
Return a copy of the argv with the same parameters.
Given a filename, return True if the filename matches one of the metainf files.
Returns a key to sort files by name.
Convert VLQ to integer.
Parse the user's header.
Convert seconds to human readable duration.
Print the player's details.
Updates the values in the GUI.
Opens a file dialog and shows the result file.
Writes dataset to file.
Do the actual data processing.
Display the graphic connection.
Displays the error message.
Hide the error message label.
Run the batch file.
Cancel current planarrad.
Quits the GUI.
Saves the current figure.
Opens the log file.
Opens the documentation page :returns: None :rtype: None :raises: None
Shows all possible actions.
Displays the context menu when the user clicks on the "ok" button.
Moves the cursor to the normal mode.
Displays the graphic onto the user's screen.
Returns a list of lockset with the genesis hash and the given private key.
Sign this message with a private key.
Hash the message.
Checks if the configuration is a valid configuration.
Issue funds with a given amount.
Returns the last known lock.
Returns the last voted block proposes.
Returns the last valid lockset.
Returns the time until the timeout is reached.
Called when a new proposal is added to the container.
Generate a list of private keys.
Calculate delay before sending packet.
Add a round timeout to each packet sent to the transport.
Return the native contract class corresponding to the given address.
Update the filter with the given data.
Create an image from a Vgg object Parameters ---------- x : list of 2D arrays of
Convert image to vgg.
Returns a function that takes a layer name and returns the output of that layer.
Get a layer's output.
Returns a dictionary mapping layer names to their features.
Create a new key file.
Mark the pipeline as finished.
Releases the table from memory.
Returns a list of the table names for the query :rtype: list.
Set up the compiler and call the _fix_compile function for each object.
Find the latestteradata library version.
Get a value from the config.
Set the value of a key.
Print a table.
Write the default configuration file.
Set the name of the filter to use.
Returns a string representation of the CSV file.
Parses a string and returns a float.
Returns a dictionary of AMPAL objects keyed by AMPAL name and their values.
Returns a dictionary of device settings from a string.
Wraps the given text, taking care of formatting.
Simplesoapy's detect_devices function.
Set the center frequency of the PSD.
Calculates the result of the PSD model Parameters ---------- psd_state : dict
Wait for a psd_state, returning its result.
Update the psd_state with the new samples.
Read a PWR from a file-like object Parameters ---------- f : file-like object
Write PWR array to file f.
Submit a task to the worker queue.
Calculate number of repeats for given time bins and integration time.
Create a buffer of size `base_buffer_size` and `max_buffer_
Setup of the audio stream.
Stops the stream.
Run Cmake on the target system.
Filter by number of datetimes.
Mask given datetime with given options.
Mask the given datetime according to the given weekday.
Given a list of datetimes, return a list of datetime objects that should be deleted.
Given a list of datetime objects, return a list of dates to keep.
Convert a list of dates to a list of years, months, days, and weeks.
Reads and returns a SPI control byte. :param read_write_cmd:
Read a single bit from the memory.
Writes a boolean value at the specified bit value at the specified address.
Given a bit pattern, return its integer value.
Set the gpio interrupt value into the user space.
Set a gpio interrupt edge.
Waits until a file with the given name exists.
Add a pin function to the map.
Removes all pin-function-maps associated with the specified pin number.
Enable gpio interrupts on the device.
Send a number of bytes to the SPI.
Render the form.
Returns True if the form has any errors.
Render a link for a form.
Extract package version from configuration file.
Generates keyword arguments for the form to be passed to the view.
Check the status of the response.
Send GET request to API.
Calculates temperature humidity. :param temp: :param dewpoint: :
Calculates the Dewpoint from a temperature and hum.
Publish this message.
Calculate the CRC for a given block of data.
Verify the CRC of the provided data.
Unpack a Stormat date from its integer value.
Determine if we should use the reverse archive.
Wake up the node.
Send a command to the node. :param cmd: command to send :param args:
Get the new archive fields from the DMPAFT command.
Parses the archive file.
Given a station and interval, update the weather data.
Initialize the syslog logger.
Return a list of PubMed services.
Gets the value of a station based on its interval.
Set the parameters for the weather report.
Sets the arguments to be passed to the command.
Publish the configuration to a file.
Fulfill a set of requirements.
Pushes a new value to the current stack.
Pop the current context from the stack.
Overrides the current element with a new one.
Push an additional context stack onto the stack.
Pop an additional context from the stack.
Add an additional element to the stack.
Removes duplicate field names from a list of field names.
Takes a stats object and converts it to a readable string.
Extracts query parameters from user namespace.
Returns a Pandas dataframe.
Returns a networkx Multiigraph from the results.
Plots the data Parameters ---------- title : str Name of the plot to plot. kwargs :
Return a CSV representation of the result.
Add additional context data to the template context.
Returns a list of widgets sorted according to their position.
Returns a list of widgets that should be updated if should_update is True.
Register a dashboard widget.
Unregister a widget class.
Returns the last update for this dashboard widget.
Creates a setting and saves it.
Return True if we should update since last update, False otherwise.
Concatenates multiple Spark arrays.
Returns true if the given arguments are valid spark context.
Format axes according to the given shape.
Wraps a function on an RDD of objects of the given shape.
Aligns the shape with key_shape.
Convert to Spark array.
Compute the tordd of this array Parameters ---------- sc : array_like, shape = [
Given a plan and a shape, return the number of chunks of the shape.
Create a mask of length n where n is the number of elements in inds.
Apply the specified npartitions to each RDD.
Stacks an array of the given size.
Aligns the array along the given axis.
Returns the first element of the RDD.
Reduction along axes with mean values.
Compute standard deviation along specified axis.
Compute standard deviation along specified axis.
Compute the sum along specified axis.
Compute the maximum value along an axis.
Compute the minimum value along an axis.
Transposes the array along given axes.
Swap two axes of a mesh Parameters ---------- axis1 : int axis2.
Reshapes the array to a new shape.
Reshape the array to match the new shape.
Cast each element of the RDD.
Clip the elements of this RDD.
Returns a copy of the RDD.
Takes an argument and converts it to a tuple.
Pack a list or tuple of lists into a tuple of lists or tuples.
Checks if the given shape is in the given axes.
Test if two numpy arrays are equal.
Returns a flattened version of a list.
Create a slice from a number of dimensions.
Check if new is iterable and if old is iterable.
Check if new is reshapeable by old.
Concatenate allstacked elements.
Expand an arbitrary number of dimensions.
Find a constructor that matches the given arguments.
Create an array of given shape and type filled with ones.
Create an array of given shape and type filled with zeros.
Concatenates a sequence of arrays.
Computes the discrete likelihood of the data.
Computes the most likely alpha of the data.
Computes alpha for discrete intervals.
Computes the best alpha of the data.
Plots the model at x.
Calculates the lognormal likelihood.
Sanitize a Turbo HTML string.
Configures an instance of Yandex.
Get a list of tags.
Returns the md5 hash of the current key.
Returns the sha256 hash of the current key.
Returns the sha512 hash of the current key.
Parses a long.
Decode a public key from its base64 representation.
Process the SSH public key.
Parse the SSH DSS data.
Processes an ECDSA signature.
Process an E25516-bit unsigned integer value.
Parses a public key from a keydata string.
Get current user'smechs.
Main entry point for command line usage.
Setup.py entry point.
Create a file with the pyaudio package.
Return the css file for the djfrontend page.
Return a normalized HTML page for the given Django version.
Return the font-url for the djfrontend.
Template tag that renders pages using django's djfrontend module.
Render Django frontend template.
Render Django frontend template with static URL and v number.
Returns the template that will be used in the template at the given django version.
Returns the css file for the Django frontends.
Returns the template that will be used for the Django frontend.
Returns the template used to render the table in the template.
Returns the HTML template that will scroll the page at the given Django version.
Return the HTML template to smooth the whole page.
Returns the css file used for the django- Django frontends.
Returns the domain name of the account you'd get if you've already logged in
Generate the authentication hashes for a given user.
Calculates the expiry time of a given number of minutes.
Generates a auth token for a given user.
Returns a serialized form field for the given user.
Update a single user.
Called when an auth failure occurs.
Validate and return a validated user object.
Check if the request is secure.
Returns the username of the given user.
Sends a create_user request and returns a token.
Do the login :param user: :param user: :return:.
Unsubmits the current user from the logged in user.
Attempts to log in with the given params.
Authenticate the user with a username and password.
Method to log in and get a resume token.
Set the password for a given user.
Resets the password of a user.
Merge two dictionaries into a single dictionary.
Given an object or a model, return its primary key.
Given a list of object ids, return a dictionary mapping object_ids to their primary keys
Get object id based on alea_unique_fields.
Given a list of objects of type AleaField, return an ordered dictionary of object
Get object by id.
Update operation.name with default value for all objects in app_name.
Set default reverse for operation in apps.
Truncate the database.
Truncate the database backwards. :param app_label: The app label :param from
Initializes build options.
Utility function to finalize the build.py and build.py options.
Converts a list of path elements to a directory.
Seed a set of values.
Returns the state as a dictionary.
Generates a random string of the given length using the given alphabet.
Generate endpoints for an API object.
Clears the API path map cache.
Pretty-print function for debugging.
Called when the client opens the websocket connection.
Removes the connection from the database and removes it from the pgworker instance.
Called when a message is received from the client.
Generator that yields frames from a DCCP message.
Process a DDP message :param data: dict of message to process :type data:
Given a message, call the appropriate handler function.
Receive a connection from the server.
Receive ping from the server.
Recieve a sub message.
Unsubmits or unsubmits.
Receive a method from the remote server.
Produce a random sockjs request.
Command line interface for django.
Convenience function to print a message at the current verbosity level.
Stops all the servers and threads.
Starts the worker threads and waits for them to finish.
The main entry point for the process.
Turn the green flag into green if possible.
Return a random string of the specified length.
Auto-discover INSTALLED_APPS settings.
Creates a dictionary representation of the command.
Get an object from a factory.
Send a log record to the client.
Add a resource object to the routes.
Sends a message to a Google Cloud Storage account :param message: Message to send :
Sends an APNS notification to one or more registration_ids.
Fetch a list of inactive IDs from apns.
Sends a gcm message :param registration_id: :param data: :param
Sends a gcm message to one or more registration_ids :param registration_ids
Sends a JSON message with the given `registration_id` and `data`.
Sends the data to the API :param data: :param content_type: :
Returns a model class from a module.
Search Giphy.
Translate a Giphy search term.
Convenience function to call the giphy API method trending.
Provide a Python API function that returns a JSON-like representation of a Giphy
Creates a Giphy object with a Giphy_public_key set to the
Upload tags to a Giphy account.
Returns a normalized version of data.
Fetch data from an endpoint.
Yields a series of giphy images that can be trended.
Fetch and return a GiphyImage object.
Uploads a tag or file to Giphy.
Create an Access control element.
Authenticate using youtube.
Uploads a new video.
Check if the video has been uploaded.
Update a video. :param video_id: :param title: :param description:
Deletes a video from the authenticated user.
Check the availability of a video.
View for a video :param video_id: video id :param video_id:
Show a list of videos.
direct upload of video.
Uploads a video.
Sends a video upload.
Delete a video.
Fetches the video entry for this video.
Saves video entry data to database.
Deletes the video from the database.
Updates metadata. :param params: :return:.
Updates the value of a metadata field.
Update this item :param attrs: :param attrs: :return:.
Return a list of nodes from a string.
Serialize a list of Tree objects into a string in LaTeX syntax.
Load a file-like object from a file-like object.
Reads a file and returns it as a dictionary.
Parses a node from a string.
Create a node and add descendants.
Returns a string that contains the name of the newick entry.
Returns the node with the given label.
Prunes the tree removing all leaves that are not in the given leaves.
Removes internal names from nodes.
Removes all leaf names from nodes.
Takes a string and returns a list of strings.
Raise an exception if ``feature`` is not defined in the settings.
Get a list of values from the request.
Allows you to pass an asynchronous callback.
Get a cookie value.
Clear a cookie.
Perform authentication redirect.
Fetches an authenticated user token.
Build the OAuth request parameters.
Redirect to authorize URL with oauth_scope.
Concatenates url and arguments.
Parse a header line into a dictionary of name-value pairs.
Add a value to the header.
Returns a list of all headers with a given name.
Parses a line of text and adds it to the dictionary.
Parses the HTTP response headers.
Normalizes a header name.
Ensure that the value is utf8 encoded.
Returns a unicode string representation of the given value.
Convert a value to its base string representation.
Recursively walk an object, returning unicode objects.
Make sure that every other plugin has the same keyword value.
Selects the appropriate policy to apply to the request.
Calculates the occupancy of a grid of points Parameters ---------- grid : 2D array
Write a box in Gro format.
Writes out a PDB box.
Return a list of molecules with absolute and relative numbers.
Resizes pbc forlipids.
Iterate over all lines of a resource file.
Display a message for a user.
Message multiple users. :param users: list of users :param level: level :param
Get a user's messages from the cache.
Adds messages to messages if user is logged in.
Check and update config file.
Verifies that the profile name is in the config.
Given a message and a Config object, retrieve the data for that message from the config object
Retrieves the password from the configuration.
Update config data associated with a message.
Update config values based on user and auth types.
Create a profile for a given message type.
Display all required items for a given message type.
Return a dictionary of data to pass to a user.
Returns a list of all the authentication keys for a given user.
Configures a user profile :param msg_type: Message type :param profile_name
Write a single message to the data dictionary.
Write the authentication data to the config.
Sends the message.
Factory function for message types.
Validate user input. :param msg_type: str :type msg_type: str
Check if the given attr is atwilio number.
Check if the value is a valid Slack post.
Checks that the given value is a validwhatsapp attribute.
Helper function to send messages using poolexecutor.
Adds a message to the bot.
Get the body from a file.
Return a copy of the given keyword arguments with any missing values removed.
Helper function for sending messages.
Get chat id for given user.
Sends the content of the message :param method: :param method: :param method
Constructs and sends the message :returns: None :rtype: None :raises:
Returns the SMTP server to connect to or None if not found.
Generates the email.
Adds the email header to the message.
Adds the body to the message.
Adds attachments to the message.
Returns a SMTP session object.
Returns an SSL object.
Creates a TLS session for the given server and port.
Generates and sends the email.
Save the tags to a file.
Unloads the image.
Get a region of an image.
Validates that all keys and values are of the correct type.
Removes all elements from the internal list.
Reads the entire file.
Deletes the file from disk.
Resizes the file to the given data size Parameters ---------- data_size : int Data size
Insert a new chunk into the file.
Save ID3v2 data to file.
Delete a file from the storage.
Parse a file and create a list of lines.
Process a normal line.
Add a source block to the editor's lines.
Draw a string using a glyph run.
Parse an ISO8601 time string and return a datetime object.
Make html lines from a list of words.
Make an HTML word.
Converts a list of words into an html paragraph.
Converts a list of lines into an HTML code.
Converts a list of items to HTML.
Save metadata to a mp4 file.
Updates the parent atom in the file with the new value of delta.
This is the main function that runs the game.
Registers a mapping for a given product.
Get a product controller.
Generate the HMAC-SHA256 digest of a string.
Returns the HTTP headers required to sign the request.
Send a GET request to the API.
Send a POST request to the API.
Send a DELETE request to the API.
Convert an APE value to a Python value.
Send a change_set request to the API to change the resource record sets.
Returns the total size in bytes of the packet.
Find the last page in a file.
Sets the section with the given name.
Adds the markup to the list of markups.
Splits text into markup and line numbers.
Return the markup for a given tag name.
Create an xml zone writer for an existing zone.
Returns True if fileobj is a file-like object.
Insert size bytes at offset.
Delete a number of bytes from a file.
Ensures that the data is utf8 encoded.
Add a change record to the record set.
Parses a change info element and returns a change id, status, and submitted_at
Measure the length of a string.
Returns True if the model is modified, False otherwise.
Deletes this record from the hosted zone.
Saves this resource record set to the current instance.
Read up to size bytes and return them.
Delete all keys starting with key.
Sets the tag's loaded frame with the given hashkey.
Update the common pics.
Unloads the object from memory.
Set the points on the loop points.
Returns a list of glyph names and a list of glyph values.
Given a list of glyph names, return a list of glyph names that should be included in
Writes a list of encoding values to the specified file.
Writes the contents of the array to the file.
Check if a file exists.
Make a list of files.
Parses a hosted zone element :param e_zone: The zone to parse :type
Parses a delimited set of nameservers and stores them in _nameservers.
Convert a list of blocks into a single byte string.
Group `blocks` by padding length.
Deletes metadata blocks from VCFlaC.
Saves the metadata blocks to a file.
Parse an RRSet alias element.
Given a list of e_resource_records, return a list of strings.
Parse a RRSet element.
Add a record to this zone.
Create a MX record. :param name: Name of the record :type name: str
Create a newns record.
Create a new PTR record.
Create a new SPF record.
Add a record to the server :param name: Name of the record :param values:
Returns a dictionary of values to pass to a change object.
Write a change document to XML.
Write a change set to the XML file.
Initialize the log file.
Get an item by its alias.
Returns a tuple of all the key-value pairs in a dictionary.
Join HTML attributes into a single string.
Called when the application is loaded.
Calls each bar's initialize methods.
Bind a bar to the chart.
A mapping of function names to function arguments.
Determine if the current request is currently on the view.
Ensure that the metric class is configured correctly.
Get a StatisticModel by its name :param stat_name: The name of the
Calculate statistics for a list of frequencies.
Auto-discover INSTALLED_APPS.py modules and fail silently when not present.
Dump statistics in CSV format.
Calculate statistics and reset statistics.
Extracts values from a GET request as a list of dictionaries.
Get a request variable as a boolean.
Return the next colour to be displayed in the geckoboard.
Returns a list of parameters to pass to the statistic template.
widget for geckoboard_number.
Geckoboardrag widget.
Takes a metric and returns a line chart.
Geckoboard Geckometer count metric.
Geckoboard-Fsnapshot metrics.
Returns a list of all active stats.
Registers a gadget.
Returns a context dict for rendering the table.
Print an error message to stderr and exit with the given code.
Prompts for a long input from the user.
Prompt user for a list of lines.
Prompt user to pick a file from a list of files.
Compute the schedule for a given year :param year: The year to schedule :type year
Returns the home or the away depending on the score of the game.
Returns the season number of the year.
Return the surface of the mesh.
Get the coin toss number for this service account.
Provide a dictionary of the weather data.
Get the info of the service :returns: List of information about the service :rtype
Return a list of team stats for each year.
List of available standings.
Returns a DataFrame with the team stats.
Returns a `pandas.DataFrame` representing the roy voting.
Returns a Pandas dataframe with all the available lines in the main document.
Returns the season number.
Returns a pandas DataFrame with the player stats.
Return a unique key for a class instance.
Calculates the age of a given year, month, day.
Return a pandas DataFrame of stats for a particular table.
Returns a table of stats for each game.
Returns a summary of the column-like statistics for each row in the table.
Returns a summary of the stats that are written in per36 seconds.
Returns a table of summary statistics of per 100 records.
Returns a summary of the basic stats of a particular type of object.
Returns a summary table of stats for the given kind, and summary.
Returns a protobuf summary table for the current stats.
Create a table of Gamelog data for a given year.
Get a value from the session.
Expands the details of a play and returns a new dataframe.
Add the team columns to the features dataframe :param features: :return:.
Add team features to the main dataframe.
Calculates the initial win probability of a given line.
Return a DataFrame with all available passing data :type kind: str :param kind: str
Get a list of simple year awards.
Returns the name of the header.
Return a list of box scores for a given year.
Return the text content of a PQ for a given year.
Return the head coaches by game.
Return the schedule for a given year.
Return the off-coorid of a year.
Return the cooridian date for a given year.
Return the URL of a stadium anchor for a given year.
Return off-scheme name for a given year.
Return the alignment for the given year.
Get off-splits data for a given year.
Get the html from the given url.
Returns a guard to put directly into the queue.
Return the direct access of the queue.
Put all closed messages in the queue.
Get a batch of data from an HDF5 file.
Gets all the elements in a path that are at a certain block_size.
Returns an iterator over the rows in the queue.
Parse an IPA to a protobuf object.
Dump a list of pb_objs to a binary file.
Reads a variable length integer.
Iterate over the file content.
Flush and close the file descriptor.
Write one or more bytes to the file.
Flushes the output buffer.
Returns a path to the game directory.
Prompts the user to enter a given text with keyboard emulation.
Returns a list of the trait names that are valid for evaluation.
Wait until a condition is met.
Return True if all missing traits are present, False otherwise.
Sets the list of ignored exceptions to be ignored.
Get the value of a main volume :param operator: :param value: :param operator
Get the value of the main window for a given operator and value.
Sends a message to the remote host.
Get the current status of the printer.
Power off the bot.
Power on the motor.
Set the volume of the bulb.
Select a source :param source: source to select :type source: str :param source
Decrypts and decrypts the secret and returns a HTTPresponsenotfound.
Calculates CRC of given plaintext.
Modify the value to be an encryptable value.
Print out any missing schema.
Returns a list of all links in the page.
check if song name is correct.
parse a file from a url.
Given a song name and a website, return a google url.
Parses Google's website and returns href link.
Download a song and parse it as a website.
Gets the html content of a URL and returns it as a string.
Download a file using requests.
Download a file using the wget command.
Return list of station codes by city name and token :param city_name: city name
Get location observation info.
Given an observation response, parse it and return a dictionary.
Returns a list of the compiler extensions.
Returns the mimetype for the file.
Returns the Mimetype of the compiler in the order in which it was defined.
Returns the compiler format extension.
Register a new processor for a given mimetype.
Unregister a processor for a given mimetype.
A list of all paths found in this collection.
Registers all default configurations.
Imports the Qt core.
Get the meta node of the node.
Add a plugin name to the meta data of a network node.
Removes a plugin name from the meta data.
Import settings from config file.
Exports settings to config_path.
Returns the directory for the config file.
Iterate over the keys.
Simple error handler for requests.
Get a DynamoDB table.
Get a list of DynamoDB tables.
Fetches all items of a given category :param category: category to fetch :param kwargs
Get the metadata id of a metadata item.
Return the timestamp at which metadata was updated.
Fetches owner team info from crate id.
Fetches owner_user from crate id.
Fetches version downloads for a crate.
Retrieves the latest version downloads for a crate.
Retrieves all crates that are on the server :param from_page: The number
Fetches a crate by its ID Args: crate_id (str): ID
Yields items from path until page is reached.
Override fetch method to use offset parameter.
Returns a generator of questions.
Fetch events for a category.
Get the updated timestamp of a metadata item.
Get category from metadata item.
Get all events of a specific category.
A list of buffer operations.
The priority of the IOB.
Closes the context and removes it from the queue.
Submit a list of blocks to iocb.
Cancel an event from the client.
Cancel all pending jobs.
Fetch events from category :param category: category to fetch :type category: str :param
Gets the raw cells from the Keen IO API.
Parse the feed and generate events.
Export the available formats for a given pid_type.
Return a permission factory object.
The default view method for a record.
Export a record to a template.
Make a call to the target function at a given time.
Closes the websocket connection.
Removes a client from the client list.
Increment a metric by count.
timing a metric request.
Send a timing message, since the given start time.
Set the value of the named gauge metric.
Set the value of a gauge metric.
Set a metric value.
Prepare and send data to the last batch.
Initialize and configure a batch client.
Return a client configured for use with the Docker client.
Flushes all pending messages from the queue.
Create a batch client.
Flushes all pending messages.
Get a TCP client for testing.
Create a single user with all of the given permissions and groups.
Interprets an Openmath object.
Converts a term to an OpenMPAL object using the given converter.
Converts an OmrsObject to a Python object.
Convert obj to Openmath instance.
Initializes the Flask application with the given Flask application instance.
Yield valid choices.
Returns a value from the registry.
Returns a dictionary of form data and files for any form_cls.
Returns the data for a decimal field.
Returns a string with the minimum and maximum length of the given email field.
Generate data for a date field.
Returns a random datetime from one date to another.
Returns the data for a float field.
Returns the data for an integer field.
Generate a random time value for a time field.
Returns a random choice from the field's choices.
Returns data for a multiple choice field.
Returns a random choice from the field queryset.
Encode a Python object as a bytestring.
Publish the package to Sdist, build, and tag.
Tag current build with given version.
Load a module and return it's global object.
Decodes a string of bytes into a bytearray of bytes.
Converts the given value to a fixed precision value.
Format a number using the settings.
Converts to NumPy array.
Packs the given array and returns it as a numpy array.
Add a file to the config.
Remove a configuration entry.
Get a list of all the websocket names.
Returns the websocket with the given name.
Check if a repository exists in a workspace.
Write the changes to the config file.
Clone given url to given path :param url: path to clone :type path: str
Checks if the current API version is the same as the one passed in.
Converts an array of values to a list of voxels.
Create a numpy array from a list of voxels.
Print the contents of a workspace.
Print the update of a repository :param repo_name: repository name :param repo_
Set the console handler.
Execute the given command on the given path.
Load a PNG image from disk.
Save numpy data as a collection of PNG files. :param png_filename_base:
Print the status of a workspace.
Print repository status :param repo_name: name of repository :param repo_path:
Get the block size for a given token.
Performs a POST to the cutout endpoint, no chunking is uploaded.
Load an image from a.tiff file.
Save numpy array to.tiff file.
Load a multipage from a TIFF file.
Write the configuration to a file.
Clone a URL into a new executable.
Returns the version number of the installed package.
Like mix_and_match, but if yell is True, yell will be
This function is used to add an option to the command line.
Reserve a list of ids for a given token and channel :param token: The token
Merge a list of ids into a single channel.
Propagate a token to a channel Args: token (str): The token to propagate
Lists all projects in a dataset.
Get a dataset by name.
Lists all available datasets.
Add the command line options to the parser.
Execute the show command.
Show a workspace with the given name.
Shows all the workspace in the workspace.
Returns the full url to the specified endpoint.
Guess file format from extension.
Opens an image from a file.
Convert from one format to another.
Converts a list of RAMons to a dictionary.
Returns theramon representation of the given type.
Delete a channel from a project and dataset.
Generate a JSON description of a dataset and a list of channel names.
Create a dictionary for the dataset.
Generate a dictionary of channel data :param str channel_name: Name of the channel :
Create a dictionary of project details.
Identify the dimensions of an image.
Uploads data to a remote database :param data: :param urlpath: :param
Given a name, return a path to it in the workspace.
Returns a list of all public tokens.
Get the information for a project token :param token: The token to retrieve :type token
Set the metadata for a user :param token: :param data: :param data:
Make a GET request for the given url.
Make a POST request to the url provided.
Takes a url and token and deletes it.
Loads the data layers from the given hdf5 file.
Saves the array to the given HDF5 file.
Infer gaps in a phylo tree from a phylo phylo_
Returns a copy of the given Nvimio object with each value filled with the value
Install Jinja translations.
A context manager that ensures that a state is exclusive with another.
Calculates the percent of a given part of the total.
Get cache stats for a specific server.
Get the cached list of slabs for a given server.
Adds context data to the template context.
Returns the server status.
Render a dashboard page.
Returns statistics for a given server.
Display a list of slabs on a given server.
Convert a number of bytes to human readable form.
Given a dictionary of children, return the name of the config.
Add one or more keys to the configuration.
Applies the given Applicator to the existing Applicator object.
Path to the file.
Reads the file and returns it as a string.
Write data to file.
Set up the root logger.
Creates the directory if it does not exist.
Applies the given applicator to this path.
Path to this file.
Removes the directory from the filesystem.
Call prepare on all children.
Recursively clean up the container and all of its children.
Returns the full path to a file.
Returns a list of all files in the directory.
Write data to a file.
Returns the contents of the specified file.
Add a file or list of files.
Save config to file.
Loads the configuration from disk.
Clean up the temporary directory if it exists.
Loads all plugins in the given directory.
Return a copy of the config node at the given path.
Get the value of the item.
Applies the config to a string.
Builds the URL to redirect to when a new message is received.
Read input from the socket and process it.
Send output to pyngus.
Sends a request to the client.
Read a number of bytes from the socket.
Write data on socket.
Get the settled modes of a remote proton link.
Configure a PN link. :param target_address: :param source_address:
Return the source address of this PN link.
The address of the target of the PN link.
Called when the session is closed.
Create a new PN sender with the given name.
Requests a sender from a PN link.
Create a new receiver with the given name.
Requests a receiver link.
Called when a link is destroyed.
Check if the session needs to be closed :returns: None :rtype: None :
Process endpoint event :param event: endpoint event :type event: str :type event:
Add mark tags to the inline patterns.
Called when the receiver is closed.
Called when receiver failed.
Get the host and port for a given server address.
Connect to the given host and port.
Create a server socket.
Returns a list of all the connection objects that need to be processed.
Read the next output from the stream.
Create a new sender and link to it.
reject the sender of a link :param link_handle: The handle of the link to
Create a new receiver. :param target_address: :param source_address: :
Called when the connection has failed to be established.
Called when the connection is active. :returns: None :rtype: None :raises
Check if the connection needs to be closed :returns: None :rtype: None :
Emit an error message and log it.
Returns a color string based on the color_type.
Returns a dictionary mapping font names to their font names.
Validate and set compression flag.
Add an object to the page.
Appends stream to buffer.
Puts the contents of the input stream into the output stream.
Add a new page to the document.
Sets the color scheme of the text.
Sets the default font.
Adds a page to the page list.
Sets the font size. :param size: font size :type size: int :param
Add text to PDF page.
Add a newline at the end of the current page.
Add a pdf page chart.
Output pages to screen.
Get a list of pages to check for orientation changes.
Output one or more fonts to the session.
Output all the images.
Output image header to screen.
Transform a point from one coordinate system to another.
Calculate the absolute position of a point.
Sets the style of the text.
Rotate a point using the current angle.
Sets the information of the message :param title: The title of the message :param subject
Sets the display mode to zoom and layout options.
Writes the whole page to the output file.
Add the pdf header to the buffer.
Put current page into document.
Add resource dict to the document.
Puts the information in the current user's account.
Put the Trailer object.
Takes a series of Hares and a function that returns a series of Hare
A naive implementation of a sequence generator.
Generator of bits per each element of the sequence.
Takes a series of Hares and a function that returns a series of Hare
Determine if X is within test_length of the model Parameters ---------- test_length :
Determine if y is within test_length of the dataset Parameters ---------- test_length :
Returns True if x is greater than the expected value.
Checks if the y-axis is greater than the x-axis Parameters ---------- test_
Returns a copy of the current cursor.
Adds to self.x + dx.
Adds the given number of lines at the current y-axis.
Draws the text.
Returns a list of all tags.
Returns a list of labels that match the given name.
Deletes a tags by ID.
Creates a new label.
Returns a list of actions.
Returns a list of tags for a given label_sn.
Returns a list of available hooks.
Setup Sphinx extension.
Returns the absolute path to the themes directory.
Make a POST request.
Get a list of all hosts.
Get log data for a set of log ids.
Returns the duration in degrees Celcius.
Update all fields in the model.
Compute all the arrays.
Evaluates the bin representation of the array.
Frees memory for all arrays in the DBL file.
Receive at most size bytes from the socket.
Generator for reading lines from the server.
Return code and message of the status line.
Generate INFO messages. :param code: Information message :type message: str :param compressed
Generate an INFO message :param code: code of the message :param message: message to
Return a list of all NNTs with the given keyword.
Read the next mode.
Quits the server and closes the socket.
A date-like object.
Runs the help command.
Generator of new groups.
Generate a list of all newokes for a given pattern at a given timestamp.
Generator that yields a list of active groups.
Generator of names of active times.
Generate a list of newsgroups.
A generator of names, suffix, and file name.
Yields the list of available extensions.
Return a generator of data.
Generates a list of elements with the given keyword.
Set the xzhdr header.
Generate info lines from a range of messages.
This command will compress an Xfeature file with gzip compression.
Convert a floating point number to an absolute offset.
Make a POST request to the API.
Base method for DELETE requests :param url: URL to delete :type url: str :
Make a GET request to the API.
Returns a list of all scheduled queries for this account.
Returns a list of all the user's tags.
Get a list of tags by name or ID.
Delete a tag :param tag_id: ID of the tag you want to delete :
Creates a scheduled query :param query: :param change: :param scope_count:
Delete an alert by tag_id.
Parse the newsgroup line.
Given a line of text, return the name and value.
Returns the unparseable string representation of the given HTTP headers.
Do the POST request.
Runs the passed list of tests.
Generate a docstring for the defaults of this class.
Sets the value of the field.
Check if the value is a valid type.
Get or set the value.
Check if the value is a scalar.
Returns the symmetric error of the time series.
Set the errors.
Set values from keyword arguments.
Imports the metrics from a v2 or v1 metric file.
Extract a dictionary of metrics from a list of dictionaries.
Filter the metrics based on the filter expression.
Calls the RPC API.
Takes a string of text and returns an expression that can be written to the terminal.
Return the operator used in the text.
Return a new terminal with an op_add token.
Fill in missing properties from self.params.
Returns a list of parameters.
Returns the value of each parameter in the model Parameters ---------- pnames : list The list of
Returns the parameter errors for each model Parameters ---------- pnames : list of string Name of the
Clears all derived parameters.
Sets the method name.
Gets the environment.
Calls the API method.
Validate that the scene info is correctly representable.
Verify the type of product against a satellite.
Get the size of a remote file.
Ensure bands are in the correct format.
Connect toearthexium server.
Return a copy of the given datetime with tzinfo applied.
Join each element of an iterable with a delimiter.
Returns a list of newline positions in the given text.
Given a line number and a pointer point, return a formatted string of the source.
Dump the results to the screen.
Remove metrics and plugins from relays.
Initialize from a list of files.
Create a Chance object from a list of files.
Main entry point for Wassu application.
Return the rule used in the given text.
Performs special handling on the given text.
Returns the grammar for the input.
Returns a list of rule objects.
Returns a list of comments.
Returns a list of directives.
Returns the compiled source file.
Returns the formatted representation of the class.
Gets the list of directives that need to be imported in order to import them.
Returns a human readable enum representation of the token type.
Returns the class definition string.
Return the name of the entry point.
Get the source of a rule.
Return the transform name for the given rule.
Converts an ASN expression into an ASN expression.
Converts a node to an Asn object.
Given a list of operands and a pred function, return a list of the remaining operands.
Removes grouping groups from an optree.
Convert an AST node to code.
Convert an AST node to a code object.
Converts an AST terminal to its code representation.
Convert an option group into code.
Converts a repetition group to code.
Convert an AST special handling to code.
Return an AST expression where the contents of the given operator are converted to code.
Convert an AST op into code.
Return a list of code lines for a `opr` expression.
Format an AST operator into code.
Return an `ast.Code` representation of an `Opr` repeat.
Find all directives that match the given predicate.
Determine whether child is a member of parent.
Handle API results.
Get wx.NewId from given id or create one if it doesn't exist.
Removes a hotkey from a control.
Adds the command line options to the parser.
Configure the logging module.
Validate the arguments passed to the API call.
Recursively walk a list of nodes, applying infix to each of them.
Convert a list of nodes to an optree.
Reduce a list of operator node to a list of operator nodes.
Loads the plugin manifest from the given file path.
Returns the number of columns in the table.
Returns the length of the metrics column.
Replace underscores with underscores.
Prints out the fields as Markdown.
Prints the metrics to the screen as a metric markdown file.
Generates the markdown file.
Parses the given text and returns a tree.
Determine the most recently consumed part of the original text.
Adds the arguments to the parser.
Returns a datetime object from a string containing a time.
Print metrics in CSV format.
Output a JSON object to the console.
Output a raw JSON object to the console.
Output the metrics to an XML document.
Default top-level default top-level default top-level default bottom-level default.
Pretty-print a tree.
A wrapper around _get_repetition.
Parses a terminal value.
A helper function to get exclusion values from a text.
Count leading whitespace.
Calls the given extractor with the given text.
Gets the current position of the element.
Returns True if any of the children are empty.
Add an item to the ignored list.
Checks if the given value is a node of the correct type.
Create a flattened copy of this node.
Returns a new Pars node with the given pred.
Return a new pars node that is a merged of this and other Parameters ---------- other : pars
Return a copy of this node with a new type.
Return a copy of this node with compressed values.
Return a copy of the current position.
Returns a copy of the current position with the maximum number of lines and columns.
Move to the next character.
Move to the next line.
Move to the previous line.
Moves the cursor to the last non-empty line.
Move to a new position.
Saves the current context.
Restore the cursor context to its top position.
Returns a formatted version of the message.
Set the name of the HSL.
Return the number of variables in the Hig.
Count the number of functions in the Hig.
Updates the scope with the supplied list of parameters.
Return a new scope with the union of the existing scope and a new one.
Update the Hig, removing keys that are not present in the oset.
Return a new scope which is the intersection of the current scope with the given one.
Update the scope to remove elements from oset that are not present in oset.
Return a copy of this scope with a copy of the previous scope where the new scope is
Update the dictionary oset with the symmetric difference of all keys in oset.
Return a new scope with the symmetric difference of `sig`.
Adds a statescope to this scope.
Removes a scope from the signature.
Removes a signature from the list.
Returns the first part of the signature.
Return the last part of the signature.
Gets a scope by its symbol name.
Returns the signature of the symbol with the given name.
Returns a list of all non-pol enumerateable return statements.
Recursively walks the tree until the next node is reached.
Return a copy of an AST where the keys are normalized and the values are normalized.
Set this node's attributes from another node.
Checks to see if the hit is OK.
Computes the signature of the signal.
Return a list of all components that can be resolved.
Return a list of all the names of a given type.
Set the resolved name for a type.
Delete a local file.
Delete a file from an S3 bucket.
Delete a file from S3.
Saves a local path to a temp file.
Save a temp file to an S3 file.
Saves an object to a temp file.
Given a path, return a list of all keys in the S3 bucket.
Encodes all the passed in enums into a single enum.
Adds one callobject to the chain map.
Read end of stream.
Push node data to rule_nodes.
Pops the rule nodes from the list of rule nodes.
Get the value of a node.
Add a stream to the list of streams.
Begin a new tag.
End the tag with the given name.
Set the rules of the model.
Set the hooks for this model.
Set the directives of the meta file.
Evaluates a rule by name.
Evaluates the hook with the given name.
Return `True` if `text` is not in the current stream.
Read one character from the stream.
Read a character from the stream.
Read until EOF.
Read and ignore any blank lines.
Check for compatibility of HIT structs :param hits: HIT struct :type hits
Add a rule clause name to a name.
Adds a rule r to the parser tree.
Add a rule to the parser tree.
Adds a sequence element to the parser tree.
Add an alternative node to the parser tree.
Adds a range to the sequence.
Add an RPT node to the parser tree.
Adds a capture to the sequence.
Add a bind element to the sequence.
Adds a hook to a sequence.
Set the number of parameters.
a helper method for setting a param from a string.
a helper method for setting a parameter's pair.
Set the parameter value at position i.
Sets the name of the hook with number n.
Adds a parameter to the hook.
Return a list of parsing rules.
Return `True` if we've reached the end of the stream.
Adds a state to the container.
Returns a string in DOT format.
Save the graph as a DOT file.
Serializes the graph to a PNG file.
Convert the state machine to a format string.
Given a new state, return the next state.
Reset the LvingState to a new state.
Infer a collection of blocks.
Infer the diagnostic of a subexpression :param expr: :return:.
Infer a literal node.
Print a list of rule nodes.
Return an AST statement with an exit scope.
Return list of `ast.body` if ` pt` is a list of strings.
Return `ast.Call` for `node`s callobject.
Return `node`s representation as calltrue.
Return `expr` representation of `node`s hook.
Return `node`s representation as expression.
Return `node`s representation as capture expression.
Return `node`s representation as variable name.
Return `node`s representation as `alt` statement.
Return `node`s representation as sequence expression.
Return `node`s representation as optional expression.
Return `node`s representation as rep0n.
Return `node`s representation as representative expression.
Concatenate `dst` into `src`.
Make a list indentable.
Recursively convert a list to a string.
Print the nodes.
Populates a state from a sequence.
Populates a state register from a sequence.
Build the state tree.
Returns True if val is equal to n, False otherwise.
Build a grammar from a string.
Create a grammar from a file.
Parses a node from the given source.
Parses the given file and returns the parsed node.
Set a node from one rule to another.
Sets the value of a node as an integer.
Get the value of a subnode.
Serialize a deposition to a JSON-encoded dictionary.
Return list of record ids invenio12 format.
Return a generator of the IDs of records in the Invenio 2 database.
Return a tuple of the table name and list of the data to check against.
Serialize a Token object to a JSON-compatible dictionary.
Returns a tuple of the number of users and their data.
Dumps an object from a date to a dictionary.
Retrieve modified records from Invenio12 database.
Return a set of records that have been modified since the given date.
Return a dictionary with collectionrestrictions.
Returns a list of record revision records for a given record ID from a given date.
Get the collection data associated with a record.
Return a JSON string representation of a record.
Get a list of bibdoc records for a given date.
Dump a record to a MARCXML file.
Dumps data from a client to a dictionary.
Load a single model from the database.
Collect things from entry points.
Initialise an invenio app context.
Return the run_sql module.
Returns a list of actions and a list of keywords.
Create a JSON dump of a remote account :param rt: :param from_date:
Loads an OAuth 2 token.
Import a record from the database.
Get config imp or default.
Dump information from a User object to a JSON-compatible dictionary.
Get users from Invenio12 database.
Get users invenio2 database.
Serialize a user to a dictionary.
Create record and SIP file for user and save to DB.
Create record and PID.
Load a record from file.
Load a number of records from a source.
Return a list of statistical statistics of a profiling run.
Start the web server.
Output profiling data to file.
Delete the profile from memory.
Delete profiling and finish.
Gets the status of the job.
Calculate translations for images in parallel.
Calculates the median translation of a set of images Parameters ---------- images : `ImageCollection
Helper function to add ones to an array.
Create a record for the given dump.
Create a record for the given dump.
Update model record. :param revisions: :param created: :param record: :param
Create PIDs for a given record.
Delete a record from the database.
Create a new file instance.
Delete all buckets associated with a record.
Returns a list of PIDs that are missing from the PIDs.
Make sure all files are in the correct format.
Prepare PIDs for the last revision.
Returns True if the last revision is deleted.
Load a community from the database.
Loads a featured community from the database.
Dump thing to file.
Collect and check entry points for a thing.
Deletes the widget and its handlers.
Computes the magnitude of a vector.
Returns a list of values normalized according to the magnitude of the vector.
Transform x and y coordinates to match x and y coordinates Parameters ---------- data : numpy.array
Ensure that the bones are present.
Set the length of the bones.
Sets the parent of the child :param parent: The parent to set :type parent:
Get pivot point from parent.
This method starts the animation :param data: :param jumulus: :param j
Set the camera's current state.
Removes the current state of the camera.
Set the current mesh state to glenable.
Unset the gldisable state of the molecule.
Ensures that the object is not part of any data model.
Redraw the current rendering of the vlists.
If the obj has been modified, draw the batch 3D.
Set the model to be used.
Writes the report to a file.
Adds a menu to the document :param menu: The menu to add :type menu
Redraw the label.
Redraw the label.
Draws all the widgets in the window.
Delete a widget from the container.
Redraw the label.
Registers mouse wheel handlers.
Registers key bindings for crouch-down and jump-down.
Adds a label to the main window.
Exit the dialog.
Updates the progress bar.
Render all actor's render in 3D.
Render the world in a 3D.
Check if a resource exists.
Add a category.
Gets the missing texture if it exists.
Return the model object with the given name.
Loads a single model from file :param name: name of the model to load :
Return the model data for a given model name.
Add a widget to the container.
Draws the element.
Redraw the selected vertices.
Redraw the scroll bar.
Determine if a mouse is over a part of a rectangle Parameters ---------- mpos : list
Calculate p-value. Parameters ---------- p : float number of points to calculate p-value
Add a layer to the plot.
Add an action to the blueprint.
Do the passed in action.
Registers a new device with the given name.
add a layer to the layers list :param layer: layer to add :param z_
Draw all layers.
Delete all layers.
The border of the widget.
Return the offset of the widget.
Returns the size of the widget.
Read a mesh from a HDF5 file.
Constructs an array of pixels representing a stochastic stochastic stochastics
Sets the fields to a list of strings.
Add one or more fields to the model.
Checks the types of the elements that are allowed.
The space of each of the elements in the collection.
Picks edges of the mesh Parameters ---------- zfill : float number of points to fill in
Compute statistics on the centroids and volumes.
Convert an element set to a node set with the given tag.
Convert a node set to a surface for a tag Parameters ---------- tag : str The tag of
Converts a tag's surface to a list of element sets.
Returns the metadata for all the fields.
Returns a pandas.Series containing the metadata for this step.
Make all the needed directories in the working directory, if they don't exist.
Run GMSH on the mesh.
Reads a history report from a CSV file.
read a field report from a text file :param path: file path :param data_
Convert a list of strings into a formatted string.
Generate the equation string.
Unsorted set to string.
Parses the response and returns the payload.
Make a GET request :param method: :param kwargs: :return:.
Write an xy report using the provided odb.
Returns an error message if the field doesn't exist.
Determine whether an exception was raised by a descriptor.
Sets the x and y attributes.
Returns the current axis mode for the given axis.
Sets the x and y axis options.
Creates a subclass of the given class with the given attributes.
Poll data and draw each notification.
Try to convert a value to a float.
Converts a string value to a number.
Plot a graph.
Convert raw string to Unicode.
Returns True if mime_type matches one of the include_mime_types.
Cleans up a domain name from a string.
Returns a list of left domain names that are valid domain names.
Make hash key and hash value for text.
Counts the number of words in each sentence.
Indexes the given stream item :param si: Stream item to index :type si:
Invert a string into a list of tokens based on its hash.
Given a list of hashes, return a dictionary of document frequencies.
Returns a generator of key-value pairs that match the hash of h.
Make an iterator of items from a protostream file.
Read variable length integer.
Reads an object from the stream.
Serializes the given SPI key.
Converts a streamitem into a key-value pair.
Context manager to temporarily change working directory.
Strip a prefix from a string.
Strip a suffix from a string.
Determine if a sequence is a subsequence of another.
Run the server forever.
Shuts down and closes the TCP HTTP server.
Returns the error page callback function.
Add a wildcard or a regular expression route.
Resolve a route to a non-literal route.
Return a callback data dictionary for a non-literal route.
Takes a pattern and returns a type and a wildcard pattern.
Generate a HTTP response.
Add a response header.
Set a cookie :param name: :param value: :param attrs: :param attrs
Return a string with the status of the response.
The Content-Type header value.
Recursively delete a directory.
Get a list of open file names for the current process.
Attempt to fetch the file at fpath.
Returns a list of lines from a file.
Generates a random adjspecies pair.
Generate a randomadjspecies pair.
Morph a sentence to a specific app.
Display the similarity of an app.
Hiragana command line interface.
Display list of entities of a given sentence.
Show short sum of an app.
Show a keyword.
Change a sentence from one of your applications to another.
Return a tuple of all known pipeline stage names.
Iterates over the writers and runs each writer at the same time, returning a list of
Runs the given transforms on the given stream item.
Replace config with a streamcorpus pipeline.
Given a list of target_mentions, and a list of chain_mentions,
Check if any of the target_mentions are in chain_mentions.
Match a stream item with multiple tokens.
Make the Ner XML file from the template.
Shut down the child process.
Multiplies from p to n.
Yields tuples of start, end, sentence for each token in `clean_visible
Make the label index for the given stream item.
Generates a list of tuples where each token is a token and each token is a token
Create a file with the cleansed data.
Create anner file from a tagger.
Strips punctuation and whitespace from a span.
Instantiate a pipeline from a dictionary.
Generates an smith chunk of text.
Make a clean-visible file from the i_chunk.
Strips leading and trailing punctuation from a span.
Entry point for command line usage.
Try loading a stage function from a module.
Load external stages from file.
Initialize a stage by name.
Read data from idx_bytes, stop_bytes, and return idx and next bytes.
Return True if href is valid, False otherwise.
Return a list of offset objects for each href in `clean_html`.
Yields the path of all input files in a directory.
Returns a generator of all tasks that start with `key_prefix`.
Returns a number of rows from the table that are available at max_iter.
Get a list of all the sentences from the ner_dom :param ner_
Verify md5 checksum of data.
Get a S3 bucket.
Decode data according to informat.
Extract a chunk of data from a GPG key.
Convert a stream id to a key for akvlayer.
Convert a kvlayer key to a stream id.
Returns a tuple of the urlhash and number of epoch_ticks for a stream item.
Entry point for the command line interface.
Build the argument parser.
Given a list of sentence objects, return a generator of all token objects that are in the
Converts a list of token offsets to a list of char offsets.
Add an element to the tag list.
Get the last piece of text.
Return the index of the first text element before the last one.
Iterate over all descendants of element.
Selects elements from a source element or list of elements.
Select elements by name.
Select elements whose name matches pat.
Returns elements following siblings.
Call IRC on the local system. :param args_strings: :param ink
Export a file using Inkoutput.
Convert an SVG file to a PDF.
Convert an SVG file to a PNG image Parameters ---------- svg_file_path : str Path
Returns the Jinja environment for a given file path.
Sets up the template file and environment variables.
Fill the contents of the template with doc_contents.
Saves the content of the object to a file.
Create a Document from a template file.
Replace characters in doc_contents and replace them with SVGs.
Renders the chart to an image file.
Renders the template file at `file_path`.
Parses the XML source using the provided handler.
Given a string, parse it and return the HTML fragment as a string.
Insert text at the current cursor position.
Insert node before refnode.
Return a copy of the element with the same name and attributes.
Return the XML value of a node.
Insert a child element at the given index.
Parses the config file and returns it.
Get Google credentials.
Create event datetimes for event creation.
Create an event for the current user.
Main entry point for command line call.
Get file extension :param filepath: path to file :param check_if_exists:
Add a new file extension if it does not already exist.
Create a temporary file with the given suffix.
Remove files with extension from workdir.
Convert CSV to JSON Parameters ---------- csv_filepath : path to JSON file fieldnames : list of
Replaces file content with new string.
Parses the page.
Check next sibling of tag and add to self.tags_blacklist.
Create anitalic tag.
Create a plain tag.
Create aunderline tag.
Parses the given tag's attributes.
Cleans up line breaks from a tag.
Parse the href from the query string.
Parses the value of an attribute.
Translates keys from one dictionary to another.
Convert object to json string.
Returns a list of all files that match the regular expression in the given folder path.
Concatenate multiple strings into a single string.
Yields all parts starting with the one in full.
Yields if full contains part.
Takes an object and returns a boolean.
Iterates over the elements of the given sequence, applying the given expression to each element.
Looks up items in a table by their primary key.
Replace characters in svg_content that aren't entities.
Checks if the svg file is valid.
Merge a list of pdf filepaths into a single PDF file.
Reads in font file and embeds them in an SVG document.
Writes font to svg file.
Checks if the input data is valid.
Checks if the function is a valid function.
Given a list of input names, recursively walk through them until the last one is reached.
Create a template from an option list.
Recurses through the options until we hit the max_depth option.
Convert an object to a string.
Convert an object to a number.
Convert an object to a boolean.
Yields all token strings in the AST.
Change the encoding of an XML file.
Saves text into an image using qcode.
Create an option file from an option file.
Calls a shell command with the given arguments.
Convert a. tex file to a PDF.
Generate a list of options.
Transform a shapely geometry to another reference.
Create a geometry from a string or list of strings.
Expands the given list with its components.
Returns a new envelope that is the intersection of self and other.
Returns True if this rectangle intersects the given rectangle.
return a geometric polygon from the ll, ur, ul, ll.
Initialize from znm number, number, m and m.
Writes the main dataframe to file.
Select rows that satisfy the condition.
Returns a ``Table`` object representing the table at a given nuclei.
Returns a Table object with rows that are the intersection of the two tables.
Return a table where rows are not in the main dataframe.
Select rows where the first element is greater than or equal to the last element.
Select elements evenly distributed.
Select elements evenly distributed.
Returns the error in the main dataframe Parameters ---------- relative_to : str The path to the
Calculates the binding energy of the model Parameters ---------- m_p : float number of
Derivative of the second order polynomial.
Derivative of the s1n function.
Derivative of the power flow function.
Computes the s1p value of the parent and daugther.
Returns a `~astropy.table.astropy.table.astropy.table
Calls the given function using the current database session.
Derives a master key from a master password.
Initialize a database from a path or URI.
Search for records matching the query.
Modify a domain from the database.
Creates a domain based on a username and alphabet.
Extract messages from a file object.
Returns a VSI prefix for the given path.
Returns the epsg id of the author.
Entry point for command line call.
Update a file from a URL.
Get a dictionary of raster driver names and their metadata.
Returns the driver for the given path.
Create an array of raster data.
Create a raster from the given rast.
Creates a raster from a file.
Create a raster from bytes.
Creates a copy of the underlying raster object.
List of available options.
Create a raster of the specified size and bandtype Parameters ---------- path : str The path to
Set the geotransform of the current layer :param affine: The affine to transform
Reads an array from the dataset.
Computes the envelope of the raster.
Get the driver for the image :returns: the driver for the image :rtype:
Creates a copy of the raster.
Returns a masked array of the same shape as the input geometry.
Returns the value of the nodata attribute.
Wrapper around ds.readraster.
Returns a new raster with the same shape as the original raster.
Save the image to a remote driver.
Set the projection on the underlying Dataset :param sref: :return:.
Warps the raster to a new spatial reference Parameters ---------- to_sref : str
Calculates the number of bins and enclen for a given number of alph
Looks for an alphabet in a presets dict.
Encode a single chunk of data.
Convert a chunk to a long number.
Get chunk of data at index :param data: :param index: :param index:
Returns a regular expression for the given file.
Normalizes date format.
Determine the timezone based on the user's locale.
Converts the resource to a dictionary.
This is the main entry point for the job handler.
A worker function that runs the job_handler on the given host and port.
Run a job through a multiprocessing pool.
Sets the classification of this ServicePackageQuotaHistoryResponse.
Queue a message for sending.
Turn on light.
Turn on switch.
Turn on with given brightness.
Turn off a device.
Send the messages from the queue.
Send a message to the device and wait for a response.
Sets the Nature of this Nature.
Sets the list of config files to be read from.
Returns a generator of the options and values for each option.
Create the config file at the given index :param index: The index of the config file
Update config values from a dictionary.
Reads the config file and returns a dictionary.
Read the contents of the config files.
Returns the option names for the given section.
Return a list of all available sections.
Build and return a parser for the command line interface.
Parse the command line arguments and apply them to the configuration.
Get bash-comp command line options.
Provide completion for bash completion.
Create and start a `master` server.
Create a worker and add it to the pool.
Receive a response line from the worker.
Called when the connection is lost.
Called when a job has been loaded.
Called when a response is received.
Close the job and return it's job object.
Run a list of jobs.
Closes the connection and all of its workers.
Waits for all waiters to finish.
Add a result to the future.
Wait for the change to happen.
Loads a next job from the queue.
Mark the job as done.
Adds a result to the results list.
Cancels all the jobs currently in the return queue.
Wait for all active jobs to finish.
Distribute the jobs that are ready to be run.
Add a list of jobs to the queue.
Add a callback to the job sources.
Return a job from the pool.
Add a result to a job.
Called by the client when a job is done.
Closes the browser.
Returns a list of items that are not in the original list.
Returns True if the given object matches the given regular expression.
Returns the region to use.
Given a list of filters and a list of exclude entries, return those that do not match
Get EC2 host details.
Create a CloudFormation entry from a dictionary.
Returns the value of an attribute.
Creates an instance object from a boto instance object.
Returns True if the search string matches the filter, False otherwise.
The name of the public ip address.
Add a timestamp to the log event dictionary.
A wrapper around structlog's logger.
Set up a celery app.
Delete a job from the queue.
Return the configuration as a dictionary.
Command handler for creating or editing config files.
Prepares a list of rows to be inserted into the table.
Generate a hash of the color in the range of min_color_bright to max_
Return a random Color object between _min and _max.
Checks if the given credentials are valid.
Checks if user exists in database with given token.
Determine if a process is running.
Imports a module or an object from a path.
Get the IP address of the machine.
Make a request to the server :param method: HTTP method :param url: HTTP url
Prepares post parameters to be sent to the client.
Serve the application. :param str app_docopt: The name of the application
Render the template with the given name and value.
Utility function to stream a list of dictionaries into a list of threads.
Get the network days between two dates.
Retrieve the full path to a command.
Build the ssh command string.
Create a new lsiprofile object from command line arguments.
Add a relationship to this relationship.
Returns a list of related objects of the given type.
Load relationships from a source object.
Adds a part to the container :param part: The part to add :type part
Loads a part of the given rel_type, creating it if it doesn't
Return a reference to the module with the given name.
Instantiate a Class object from an Element.
Parses input_string and returns a chatlprovider object.
Builds a JWE token :param secret_key: :return:.
Assigns force field data from AMPAL object.
Finds the maximum radius and npnp in the force field.
Make a dict of force field parameters.
Return a copy of this object as a stream.
Extract segments that start with the given name from the input file.
Returns a list of all filenames in a given directory.
Returns a list of all names in a given directory.
Create a prefix from a path.
Delete a file from the bucket.
Make sure we are logged in and have a valid token.
Gets the loud of the account :param lang: The language of the account :
Returns the URL of the home page.
Return the number of hotspots for each leaf.
Get a temporary auth token for a given host, username, and password.
Uploads a project to Travis.
Determine if we should skip a travis event.
Ask keeper to confirm a build is ready for use.
Recursively update a dictionary with another dictionary.
Connect to keeper and log to keeper_hostname, username, password.
Command line interface for part_edit.
Executor for `globus pack-dir`.
Split a path into a list of drive and tail.
Return the default editor for the given file path.
Check if the file is valid.
Generate HTML chart from dataobj.
Generate html for chart.
Constructs a chart from a data object.
Takes a json_data dictionary and converts it to a json string.
Converts json data to html.
Converts a dictionary of data points to a Pandas DataFrame.
Writes the html to the file identified by the slug in the folderpath.
Returns the appropriate chart class for the given chart Parameters ---------- chart_type : str chart_
Encode one or more fields of a time series Parameters ---------- xfield : list of 2D
Infer the tarball url from the app's contents.
Create a new tarball for a build.
Delete an auth token.
Generate random binary string of given length.
Generate a random ipaddress.
Generate a random date between two dates.
Create a session object.
Make an API request :param method: :param endpoint: :param data: :param
Create a build :param tarball_url: :param env: :param app_name
Checks the status of a build.
Generates a sequence of strings starting with a prefix.
Registers the sub-commands into the parser.
Returns the root argument parser instance.
Get the description from the docstring.
Get the help string for the command.
Runs the action with the given arguments.
Encodes a dataset.
Get a list of all knownathletes.
Returns the last n activities.
Request the activity list for a given athlete.
Request activity data from DCNM.
Builds the URL for the athlete :param athlete: The
Return the activity endpoint.
Make a GET request to the endpoint and return the response.
Create an app tarball.
Creates a url using API authentication.
Generates a title from a list of languages.
Generate a random person name.
Generates a random name from a list of languages.
Renders the template.
Sets the dataset and series.
Updates the axes with the data from the dataset.
Checks if the given type is valid.
The url of the resource.
Show the html in a browser.
Saves the archive to a local file.
Return an urlopen object for the request.
Returns an PIL Image object from the server.
Write a file object to a file-like object.
Return checksum of the file.
Returns the amount between min and max in a number of decimal places.
Return a dictionary of unprotected and protected claims.
Returns a list of all signing keys that are signed by JWK.
Unpack a ClientMetadatastatement object.
Signs and packs a metadata statement.
Evaluate a metadata statement. :param metadata: :param keyjar: :return:.
Given a metadata and a federation_usage, attempt to correct the federation_usage
Extend a request with an SMS.
Parse command line arguments.
Add command line options to the parser.
Applies the log level and handlers to each of the log_levels.
Logs msg % args with severity verbose.
Return a map from letter to number.
Given a word, return a generator of words that are anagrams in that word.
Converts a class to an upper case string.
Given a timeseries, return a timeseries in the same format as the original timeseries
Returns the last value in a timeseries.
Validates the page number and raises an exception if it isn't valid.
Takes an iterator and returns a page of page_size items.
Change mode of a file or directory.
Creates an internal signing service.
Creates an internal signing service.
Signs a signed request using the key jar.
Creates a new object on the server :param req: The request to create :param kwargs
Update existing metadata statement :param location: Location to update :type location: str :param
Update the signature for a given location :param location: The location to update :type location
Yields the contents of the bundle.
Create a bundle from a data dictionary.
Returns the urls for the given asset type.
Returns the HTML tags for a given asset type.
Returns HTML tags for all asset types.
Tries to protocolise a URL.
Finds the links in the page.
Called when the client is connected.
Return list of module names in project.
Imports all the modules in the registry.
Select one or more fields from a document.
Formats a document according to a list of datemap fields.
Print the number of rows in the table.
Prints the table to the screen.
Given a list of do tasks and a graph, return a topological graph.
Add default dependencies to a given project :param project: Project to add :type project:
add userrnd shot, default deps, sequences, and other data.
create a shot when a sequence is saved.
Create and save all tasks from an element :param element: The element to save :type
Given a section and key, return the value.
Add a factory to the registry.
Removes a factory from the container.
Connect to the given protocol factory.
Called when data is received from the connection.
Removes a connection from the protocol list.
Wrapper to call remote commands.
Calls remote call with multiplexed connection.
Called when a multiplexed connection is made.
Called when data is received.
Transmit data to the remote server.
Called when the connection is lost.
Returns the protocol registered for the given connection identifier.
Handle a remotedata packet.
Disconnect a connection.
Returns a centered string.
Displays a string on the right.
Returns a string representation of the package version.
Identify a unit framework :param target_unit: :return:.
Assert that a unit value is convertible to a unit in an astropy unit framework.
Pad data_to_pad with zeros at the end of block_size.
Unpads padded data to a block of size block_size.
Sign the request with a self-signer.
Gather metadata from a list of statements.
Pretty-print a word. :param input_word: :param anagrams:
Parse command line arguments.
Main entry point for command line utility.
Called when a data packet is received.
Called when an unregistered type is received.
Create a _rpcFunctionstub object for the given url.
Ping a peer from a local or remote call.
Returns a tuple of regex objects representing the command line options.
Takes a proto string and returns a Python object.
Returns the string representation of the object in proto.
Verify that this metadata statement is valid.
Parses a JWS response from a remote client.
Returns a list of databases.
Syncs all files in path to bucket.
Build a package from a list of submodules.
Decorator to make a file-like object read-only.
Load JSON data from file.
Signs a JWK with a key jar.
Creates a JWK request signed by a specific signing keys.
Describes a file or directory and loads it into a file-like object.
This is the entry point for the descovery command line interface.
Get the score of a given letter.
Calculates the score of a word based on a set of questions.
Returns a generator of words in the word list.
Checks if a word is a valid scrabble word.
Handle a string received.
Returns the command and responder functions for the given command name.
Parses the values of the arguments passed to the command.
Writes the response to the transport.
Called when the connection is lost.
Builds a JSON protocol object from an address.
Convert a JWK object to a Keyjar object.
Deserialize a JWK JWK string.
Processes the incoming message.
Processes a customer process. :param body: :param message: :return:.
Process the incoming message.
Process a read-only message.
Processes the incoming message.
Processes the incoming message with keystone_customer_process.
Process a message with a heat process.
Serve the application forever.
Print msg to stdout with log_func.
Print msg to stderr, using log.error if log is None.
Registers a command subclass.
Registers a class as a command subclass.
Returns a string representation of the value.
Parses a value from a string.
Update the completers with values from a dictionary.
Initializes and connects to the MQTT server :returns: None :rtype: None :
Initialize the MQTT connection.
Initialize the modules.
Initialize the RabbitMQ consumer.
Initialize the RabbitMQ consumer.
Initialize the neutron consumer.
Initialise and start aglance consumer.
Initialize the heat consumer.
Return a dictionary mapping the Openstack component numbers to their appropriate values.
Get information about a song by its id.
Downloads a music file.
Executes all instructions.
Loads an attribute by name.
Calls a function and returns its return value.
Dump a database to a.sqldump file.
Hook to call _atexit_func when the process exits.
Main entry point for running the application.
Context manager to temporarily change working directory.
Recursively copies a directory.
Runs in a debugger.
Get the last time the file was modified.
Check if a file has been changed since the last check.
Synchronize local and remote files to remote storage.
Clear the contents of the config file.
Scrape a feed and save it to the database.
Downloads the image given by the url and stores it in the cache directory.
Check if image has changed since last modified.
Find the caller's file and the line number and the name of the file that is
Given a pe element, return the one that is defined in the ep element.
Entry point for command line utility.
Finds a handle to a symbol in the stack.
Check if pe_pe is contained in root.
Returns True if pe_pe is global, False otherwise.
Get the name of a data type.
Returns a list of related oir attributes.
Create a enum from an EDF file.
Creates a bridge function from a S_brg object.
Generates an external entity from the given metamodel and s_ee.
Creates a function from the S sync object.
Make constant value according to cnst_lfsc and cnst_lfsc
Return a function that creates an operation from a tfr object.
Create a derived attribute.
Make a simple association.
Makes a simple association from an object relative to an object relative to the object itself.
Make component domain from BioBioBioBioBioBioBio
Perform a single RPC call :param socket: :param args: :param kwargs: :
Accept a reply from the given socket :param reply_socket: :param channel: :
reject a reply :param reply_socket: :param call_id: :param topics
Raise an exception and send it reply to the client.
Wait for a call to finish.
Construct and return a list of results from the result queues for a given call_id.
Dispatch a reply to a stored result.
Try to guess the type name of the value.
Deserialize a value from a string.
Returns the content object identified by content_id or None if not found.
Insert or update a collection of items.
Delete document by content id.
Delete all content from the index.
Delete the index if it exists.
Scans for documents with a prefix and returns a generator of DID objects.
Scans for keys with a prefix and returns a generator of keys.
Index a given set of keys with a given value.
Given a list of feature names, return a list of strings representing the names of the features
Returns a dict of filters for the given key_ranges :param key_ranges: A
Returns a mapping of index names to their mappings.
Get the field types from the index.
Returns a list of dictionaries where the keys are the term names and the values are the index
Returns the number of bytes required to store the features.
Count the number of bytes that match the filterpreds.
Pretty-print a list of features.
Process the arguments passed to docopt.
Returns a default formatter for the given error.
Return a pretty representation of an Xtuml link.
Pretty-prints a unique identifier.
Checks the uniqueeness constraint of a meta-model.
check link integrity :param m: :param link: :param link: :return:
Make sure the subtype integrity of the relationship is correct :param m: relation to check :
Encode a string with UTF-8 encoded UTF-8 encoding.
Removes all records from the table.
return an iterator over keys that match a prefix of a given index.
Adds new keys and FCS to the index table.
Puts a raw document into the index table Args: idx_name (str): The
Yield tuples of index value, name, content ID for a given index.
Get an index by name.
Adds a direction to a string.
Get the name of a data type :param s_dt: :return:.
Gets the attribute reference of the current object :param o_attr: The attribute reference
Builds a mapped type from a cdt object Parameters ---------- s_cdt : `
Builds an XML element with the type of the enum.
Build a struct type element from a SMT :param s_sdt: SMT
Builds a user type element :param s_udt: :return:.
Builds the data type from a string.
Builds an element class for the given object :param o_obj: :return:
Builds a KML Component element.
Build an et.Element object with all the types in m.
Returns a pretty-printed version of the given XML string.
Fetches a list of bikes.
Set the positional information of the line, column, and character stream.
Create a queue with the given name.
Delete an object from the queue :param name: The name of the queue :type name
List all available queues. :returns: list of queues :rtype: list.
List all exchanges.
Purge a method from a queue.
Create a MIME message. :param to: :param subject: :param msg: :
Reads the image from the connection and stores it in the text cache.
Returns True if the text is visible, False otherwise.
Entry point for command line usage.
Serialize a value to a Python object.
Serialize an association from a relationship to a single string.
Serialize a class into a string representing it.
Main entry point for command line usage.
Partition a collection by the condition.
Adds the bidi context variable to the context before rendering the page.
Find links in metamodel.
Compute the lookup key for the given instance.
Compute the index key for the given instance.
Return the attribute type by name.
Creates a new object and adds it to this object's storage.
Returns an iterator over all the metaclasses in the registry.
Define a class with the given attributes.
Sends a ZMQ message over the specified socket. :param socket: ZMQ socket
Receive messages from a ZMQ socket.
Provide a list of dead code for a given project.
Returns a list of email addresses from a string or list of strings.
Decorator to wrap a function as an RPC function.
Return a mapping of name to value pairs.
Normalize postcode middleware.
Move to the next item in the stream.
Accept a S_sys instance.
Accept the child elements of an element.
Accepts a single pe_pkg as a child of the current one.
Get the brightness value of the image.
Check if the value matches the supplied arguments.
Finds a match in the document at the given position.
Returns a QTextEdit for the given character position.
Updates the current cursor position.
Extracts the last exception from the exception info and returns it as a tuple.
Returns an instance of the class with the given name.
Add history data to history.
Moves the cursor up one line.
Checks if the user pressed the down key.
Move to the previous position in the history.
Move to the next history item.
Handle an execute reply message.
True if the history is locked, False otherwise.
Return the value of the history item at the given index :param index: The index of
Sets the history of the model.
Store the current value in the input buffer.
Called when a timer event occurs.
Convert a collection of records into a Pandas DataFrame.
Set instance attributes from keyword arguments.
Subscribe to the zmq stream.
Log a single message. :param raw: :param level: :return:.
An iterator that iterates over a remote view.
Converts a notebook to this notebook's format.
Get an importer for a given path item.
Wrapper around cstringio.
Return True if setuptools needs to override setup.py, False otherwise.
Parse a string representing a requirement.
Parses the pkg_info attribute and returns the result.
Collapses the leading whitespace in a header string into a single string.
Disconnects the cursor position changed signal and disconnects the event filter.
Overrides showEvent to connect the cursor position changed signal.
Returns the current text cursor.
Updates the current prefix widget :returns: None :rtype: None :raises:
Register model in the admin site.
Get a list of disk partitions.
Get the system' CPU time in seconds.
Get system per CPU time.
Try to read a non-block line from stdin.
Read raw data from stdin, and return it.
Updates the tab bar visibility.
Create a tab with the current kernel.
Adds a tab with a given frontend.
Populates the all_magic_menu dictionary.
Allow user to close the current tab :param event: :param tab_widget: :
Returns True if hashed_passphrase matches passphrase.
Returns a indented title.
Returns True if the user has permission to change the object.
Returns True if the user has permission to delete the given object, otherwise False.
Adds n children to the graph.
Make a bintree.
Submit jobs to graph g.
Validate each node in the tree.
Makes a color table from a class.
Creates a copy of the colors.
Add a new color scheme.
Sets the active scheme.
Returns the path to the lib directory of the user's home directory.
Handle iopub events.
Wait for the kernel to be ready.
Sets the style of the chart.
Gets the format corresponding to the token.
Formats the given document using the formatter specified by the given token.
Returns a QTextCharFormat from a Pygments style.
Tries to find cmd in paths.
Returns a normalized path from the user's home directory.
Make sure the value is in the list of nodes.
Check if value is a valid entry point.
Returns True if src is a blank line, False otherwise.
Check to see if there are two blank lines in the source.
Transform a line of text that contains assignment system definitions.
Transform a line that containsassign magic.
If line contains a classic prompt, remove it and return it.
Transform a line from an IPython prompt into a more human readable form.
Finds the indentation of the given line.
Stores a list of lines into the store.
Reset the file and return the raw RR of the source.
Parse and store the cell magic.
Appends the given lines to the end of the current line.
Transform a single cell.
Post a notification to a specific client.
Returns the set of observer keys for a notification.
Register a callback for a notification of a particular ntype and sender.
Update the status of the jobs.
Print a report about a job in a group.
Flush jobs from a group. :param group: The group to flush :type group:
Update the status of the report.
Report the current status of the job.
Initializes the progress bar.
Insert a value at the given position.
Returns a copy of the current object.
Declare a special element. :param name: name of special element :param sep: separator
Declare a list variable.
Declare a special variable.
Sets the cwd.
Move to a new route.
Calculates the total energy of the game.
Returns a dictionary of default values for the given keys.
Check if the table has the right types.
Render a check as a list of expressions.
Returns a formatted table from the given list of rows.
Renders an HTML link.
Returns the js file for a given url.
Returns the css file for the given url.
Add an img tag to an image URL.
Subtract a number from a string.
Multiplies `value` by `arg`.
Divide `value` by `arg`.
Returns `value` if `value` is not a number.
Returns verbose name of a model or a modelform instance.
Split a line of text from a user input.
Add command line options.
Deactivates the built-in modules.
Searches the index url for the url_name in the url of the current page.
Returns a generator of links with explicit links.
Removes a shell list from a string.
Main entry point for the coveragescript script.
Add a dash and dash dash dash dash dash to an option list.
Appends the action code to the parser's actions attribute.
Print help for the topic or parser.
If the help option is specified, it will print the help message.
Check if arguments are valid.
Executes the module specified in the command line.
Print a summary of the coverage data.
Unserializes a list of objects.
Sets a new hook to be run when the event is triggered.
Decorator to log exceptions raised by the wrapped function.
Check if the URL is a valid HTTP URL.
Validates a URL.
Validate a URL container.
Pull a value from a namespace.
Selects a number of random ports.
Apply a sequence of sequences to the sequence itself.
Return the last n lines of the history.
Set autoindent value.
Initializes the log file.
Save original sys module state to _orig_sys_module_state.
Restore the original sys module state.
Register a function as a post-execute flag.
Create a new Fakemod main module object.
Initialize the user namespace.
Return a list of all known namespace references.
Reset the context to a new session.
Removes a variable from the event namespace.
Reset the selective namespace to default.
Extracts a struct property from a oname.
Find an object by name.
Call a registered method in the inspector.
Initialize the history manager.
Show the traceback of an exception.
Show the traceback of a stb.
Show tracebacks of an error.
Insert indentation before the next line.
Sets a new completer at the given position.
Sets the current completer frame.
Run a line of code with a magic name.
Find a magics object for a given magic name.
Define a user's macro.
Adds a command to the system's user namespace.
Prompt the user for a re-written input.
Return a mapping of variable names to their user-specific value.
Given a dictionary of expressions, return a dictionary of user expressions.
Evaluates the given expression in the current user namespace.
Safely open a file and run it through an IPython notebook.
Runs the cached cell magic.
Expand a variable into a full command string.
Create a temporary file and add it to the list of temp files.
Closes all temporary files created by this session.
broadcast a message from one client to another.
Returns a list of all profiles in the given path.
Return a list of all bundled profiles.
Find a distribution by key.
Returns the absolute path to a file on the system.
Get the next line.
Send data to child process.
Send a single character to the child process.
Prepare a regular expression object.
Prepare a regular expression object.
Search the buffer for a string of length freshlen.
Search a buffer for a pattern of length `searchwindowSize`.
Unpack a directory.
Returns the last error from the log.
Execute a command and return its output.
Given a filename, return the filename and the source of that file.
Return a sorted list of executed arc numbers.
Returns a list of arc probability that the arc is missing.
Returns the list of current arc arc elements that are not in the list of possible arc elements
Return a list of branch lines.
Returns the total number of branches.
Return a mapping of branch names to ARcs that are missing.
Returns a dictionary of branch information.
Set the precision of the query. :param precision: precision for the query :type precision
Calculates the effective pc_cov based on the number of instructions and the number of
Returns a Unicode string of up to 10 decimal places.
Given a list of needles, return a string of text with each needles wrapped in
Highlights given string with given keywords.
Highlights given string with given keywords.
Runs the function over the file.
Removes trailing whitespace from the end of a string.
Returns a string of the given width, plus the mark.
Formats the screen name.
Removes the trailing newline from the beginning of a line of text.
Wrap paragraphs at the end of the given text.
Given a list of strings, find the optimal width of each string.
If i is less than the length of a list, return it, else return default.
Build the arguments to pass to the kernel.
Initialize ssh connection.
Return a pretty-printable representation of an object.
Pretty-print an object.
Returns the MRO of the given object class.
Default pretty output of an object.
Pretty-print the super object.
Represent the pattern in p.
Pretty-prints the type of an object.
Print the name of the function object.
Pretty-print an exception.
Register a function to be applied to a type.
Given a type name and a function, return the corresponding object.
Adds the given object to the buffer.
Make a line breakable.
End a group by removing it from the stack.
Flushes the buffer.
Return a pretty formatted representation of an object.
Writes row into ods.
Get the current text from the clipboard.
Get OSX clipboard text.
Get the current clipboard content.
Get the path to the build directory.
Removes keys from a dictionary.
Recursively extracts dates from an object.
Recursively squash dates in a dictionary, list, or list of objects.
Returns ISO-8601 representation of the given object.
Check if the site dir exists and is multi-version.
Write a script to the install directory.
This function sleep until the specified number of seconds have passed since the last call.
Create an argument parser for the given prog_name and subcommand.
Open a connection file and connect to it.
Builds a package finder object.
Called when the log level has changed.
Create a default log instance.
Called when a flags value has been changed.
Print a help string for the available aliases.
Print the help of the flag.
Print the list of subcommands.
Print a help message.
Print the examples section.
Merge config with current config.
Initialize a subcommand.
Flatten the flags into a single dictionary.
Parse the command line.
Load config from file.
Generates the config file for the plugin.
Downsample an array by k number of indices.
Format a list of dictionaries into a formatted string.
Writes the given message to the output file.
Called when a configuration value has been changed.
Generates a help string for the given class.
Generates a help string for a class instance.
Clears the _instance attribute of all subclasses of cls.
Format the failure details into a human readable string.
A helper function that prints a crash message when an exception occurs.
Flush the channel and processevents.
Emits started_channels signal.
Read data from file and return as list.
Read the next character from the input buffer, handling interrupts.
Split an argument into a list of tokens.
Compress a Dhist object.
Add a magic function to the dictionary.
Returns a dictionary of docstrings for each registered magics.
Format LaTeX syntax into LaTeX syntax.
Add a default option to the option table.
A helper function to create a page in a Germline project.
Create a Task object from a callable.
Get task info by label.
Returns a callable object from the info dict.
Calculates the next run of the scheduled job.
Submit the task to run at a given timestamp.
Kills the task and then kills it after the end of the running task.
Run the Asap and save it.
Runs a callable a number of times.
Run a callable only once.
Locate the url file based on user config.
Bind the kernel to the engine.
Create an interrupt event.
Run the main loop of the process.
Given a namespace, filter out all elements that match the pattern.
List all elements in a namespace that match a pattern.
Make sure each element in dict is in ex_op.
Draw a figure if interactive.
Flushes all the figures currently being displayed.
Send the figure to the inline backend.
Load a module as an extension.
Unloads an extension from the application.
Generate n random port numbers.
Initializes the HTTP Server.
Handle SIGTERM signal.
Prompt user for exit, and prepare for ioloop to finish.
Clean up all kernels that have been created.
Computes the price of a stock in a specified number of days.
Replace multiple occurrences of keys in a dictionary.
Render a prompt.
Create a zipfile and copy it to a new location.
Fixes the old version of PyPI by removing the old one.
Returns True if the object is a list of dictionaries, otherwise False.
returns the partition of seq starting at p and ending at q.
Run a single file, returning a file-like object.
Run a Python source file.
Download a file from an ftp server.
Reduce a list of frequencies into a single array of all frequencies.
Computes the frequency of each digit in a file.
Converts a txt file to digits.
Calculates one-digit frequencies for a list of digits.
Calculates frequencies of two digit digits.
Calculates the number of digit frequencies for a list of digits.
Plots the frequency of two digit frequencies.
function to plot one-digit frequencies.
Display a debug message about the given expression.
Reverse a URL. :param view: URL to reverse :param args: :param kwargs
Check if a prefix is private.
Run the tests and debug them at the same time.
Use pdb to debug a Python script.
Run a Python module as a debug script.
Returns a dictionary of all of the files in the hashroot.
Removes all of the files in the hashroot that are not in the cache.
Returns a list of keys that match the glob pattern.
Returns True if record is allowed, False otherwise.
This is a helper method for setting up the logging of an error.
Runs an embedded shell.
Create a new CSV writer and a meta writer.
Prepare the locale directories.
Writes a list of polib.po entries for a list of languages.
Writes the po header.
Subscribe to a user :param user: The user to subscribe :type user: str :
Initialize the parser with the command line options.
Imports a module and runs it.
Run a Python script from a file.
Create a code object from a Python source file.
Create a Python code object from a.pyc file.
Construct an HTML table.
Set the current value.
Cancel the current completion.
Select the index of a given row and column.
Updates the list to show the header and footer.
Returns a dictionary mapping word names to frequencies.
Print the n-gram words from a dictionary of frequencies.
Returns a string representation of the tree.
Writes the object to a file.
Validate PIN. :param pin: PIN to validate :type pin: str :
Sends a PIN to one or more topics.
Delete a shared pin from your account.
Sends a PIN to the Keen IO API.
Delete a pin for a given user token and pin ID.
Subscribe to a topic.
Returns a list of all subscriptions for a given user_token.
Set the total number of messages to be written.
A context manager that starts a task and then closes it.
A context manager for the use of submonitoring and done.
Updates the stats with the given number of units :param units: :param message:
Create and add a submonitor.
Called when the task is done.
Make sure the build directory exists and has the correct name.
Load a list of pyconfig files and merge them into a single Config object.
Reads the config file and loads it into memory.
Load a single config file.
Decode command line arguments.
Load config from command line arguments.
Loads the parsed data from the command line and loads them into the config object.
Tries to find a module by name and returns its absolute path.
Passes the stop_data function to the callback function.
Calls when the service is started.
Calls the stop_callbacks method with the given data.
Interrupt the job if it's running, then kill it.
find the arguments to pass to the executable.
Start a new mpiler.
Copy file from local to remote.
Fetch a file from remote to local.
Return the number of engine instances.
Start up n number of engines.
Start a new job. n is the number of jobs to start.
Return the default cluster context.
Parses the output of the job_id regex and returns the job id.
Write n number of jobs to the batch file.
Starts the job with the given number of jobs and returns the job ID.
Creates the context menu :returns: None :rtype: None :raises: None :
Call this method to insert a JPG into the notebook.
Append a PNG image to the prompt.
Appends an SVG object to the prompt.
Add an image to the document.
Copies an image to the clipboard.
Get an image by name :param name: Name of image :type name: str :
Inserts an image into the given cursor.
Inserts an svg image at the cursor.
Saves the image. Parameters ---------- name : str Name of the image to be saved.
Exit the application if the ioloop is not running.
Sets up the environment variables.
Auto re- rewrite the input before passing it to prompt_manager.
Ask the system to exit.
Sets the next input to be displayed.
Read config from file.
Returns a list of values from a section option.
Get a list of strings.
Sets the timid attribute from the environment variable.
Converts a list of keyword arguments to a list of keyword arguments.
Reads the config file and populates the paths attribute.
Sets an attribute from a config option.
Sets the delims of the expression. :param delims: The delims of the
Split a line into a list of strings.
Return a list of words that match the text.
Return a list of words that match the given text.
Callback for greedy completion.
Return a list of all aliases that match the given text.
Returns a list of matches.
tab completion function for rlcomplete.
Match one record.
Returns a list of records that match the given check.
Extract a subdict given a record and a set of keys.
Determine whether we should quiet or not.
Writes output prompt to stdout.
Writes format_dict to stdout and format_repr.
Log the output of the shell session.
Raise an exception if the operation is freezed.
Convert MySQL timestamp to Python timestamp.
Called by the event loop when it changes.
Do one iteration of the control stream and shell streams.
Publish a Python object to iopub :param code: code to publish :param parent
Send a abort request to the server.
Clear a file or directory from a stream :param stream: stream to clear :param ident
Returns the string representation of the topic.
Sends a shutdown message to the iopub server and waits for all streams to finish
Make a copy of the module and add it to the stack.
Remove modules from sys.modules that are not in the current context.
Returns the absolute path of a directory.
Returns True if the name is a file with the same name as this file.
Checks if the object is a class.
Determine if the given path is a package.
Converts a string label to a line of text.
Decorator to transplant a class from another module.
Get the CPU time of the current process.
Returns the process's command line number.
Returns a list of open files for the process.
Returns a list of NT_Connection objects.
Check if a user has a given group.
Given a fully qualified name of a class, imports it and returns the class.
Calculates the percentage of memory usage in a given number of seconds.
Login to GD.
Gets the Gdocs key from the URL.
Ensures that the temp path exists.
Clears the temp file.
Upload a file to a GDSI object.
Synchronize local and global csv files.
Download CSV data from Gdocs and convert to po format.
Uploads the given localods to a GnuPG document.
Removes all files from the temp directory.
Create a new Qt console.
Check if url has accessibility.
Returns True if url has contents, False otherwise.
Get the response code of a URL.
Compares the content type of a URL.
Compares the response code of a URL.
Validate the input data :param source: :param data: :param metadata: :param
Clears the output of the process.
Given a list of Morf objects, return a list of code units.
Returns the flat root name of the module.
Return the source file of the coverage report.
Check if the filename should be included in the template.
Returns the total seconds since epoch.
Wait for the job to finish and return the job's result.
Wait until all messages have been processed, or until timeout is reached.
Get a dictionary of metadata.
Abort the current transaction.
Returns the elapsed time since the last execution of the job.
Wait until interactive.
Update the displaypub with the results of an API call.
Wait for iopub output.
Wait until all pending messages are in the queue.
Returns the absolute path of a file.
Given a list of patterns, prepends them to a list of absolute file paths.
Return the separator from a string.
Yields all files within a given directory.
Returns the relative filename of a file.
Given a filename, return the canonical filename.
Get the ZIP data for a given file.
Returns True if fpath points to a valid file.
Returns True if fpath matches one or more patterns.
Replace aliases with their absolute path.
Runs a loop inside a Qt4 kernel.
Loop through a gtk kernel.
Enables given gui from loop_map.
Return the goe of a standard normal with respect to n.
Computes the eigenvalue difference between the center of a eigenvalues matrix.
Ensembles the ensemble diffusion matrix.
Initialize this step.
Load the configuration file.
Writes the log to a file.
Erase the whole Gone file.
Returns a dictionary mapping line names to line data.
Returns the arc data.
Writes the arc data to a pickle file.
Read a file into memory.
Load data from pickle file.
Read the file and extract lines and arc information.
Combine all parallel data in the same directory.
Add line data to model.
Add arc data to the arc map.
Add the executed lines and ARCS to the hash.
Generate a summary of the report.
Returns a generator yielding lines that start with the given sentinel.
Interact with the user.
Replace multi-line history items.
Prompt the user for input and return the line.
Allows the user to edit a syntax error.
Ask whether or not to exit.
Get URL and revision.
Create a new frontend master.
Initialize the colors for the widget.
Return a tuple of the identity url pub_url and location information.
Convert robots.txt to numpy array.
Sets the colors to the active color scheme in the color_scheme_table.
Toggle the color scheme of the color table.
Return a textual representation of the traceback.
Format the traceback into a structured list of strings.
Takes a list of strings and returns a formatted list of strings.
Show exception only.
Sets the mode to one of the valid modes.
Ensures that a module is not a member of a list.
Add a line to the code.
Adds a new section to the code.
Get a function object by its name Parameters ---------- fn_name : str Name of the function
Generates code for the expression.
Render the bot using the supplied context.
If value has a dot in it, use it instead of dot in it.
Render a template with a given context.
Return a default set of formatters.
Register a function to be applied to a type.
Called when float precision has changed.
Returns True if config_files is set in the user's home directory.
Set up the logging module.
Sets up the directory where the test is to run.
Given a string, return the text page that would appear on the screen.
Print a single page of a text file using pager.
Return a pager command based on the environment or the default.
Given a pager and a start value, return the start string.
Print the snip of the current page.
Print an object in Unicode.
Returns a PNG representation of an object.
Return a PNG representation of an object.
Return True if o can be printed in LaTeX.
Return a LaTeX representation of an object.
Add command line options.
Validate a list of strings.
Validate that a dictionary is a string.
Run the ioloop in a new thread.
Handle an incoming message.
Send a complete command to the server.
Get information about an object.
Shuts down the cluster. :param restart: if restart is True, restart the cluster
Flushes all messages from the queue.
Send a string as input to the queue.
Start the channels. :param shell: :param sub: :param stdin: :param
Stops all open channels.
Check if the channels are running.
Loads the contents of the connection file.
Launch a new kernel on the remote host.
Shut down the kernel if it is running.
Kills the kernel if it is running.
Interrupt the kernel.
Sends a signal to the kernel.
Check if the HB channel is still alive.
Get or create shell channel.
Property to provide reference to sub_channel instance.
Get or create the HB Channel object.
Bind a kernel to an application instance.
Print a debug message at the specified level.
Returns a list of all registered extensions.
Calls the pre_step method of each extension in the list.
Walk an egg directory.
Scans a module from the filesystem.
Launches a new instance of an IP controller process.
Saves the connection dict to a file.
Load the config from a JSON file.
Load the secondary configuration.
Enables or disables auto-autopx.
Disable or disable auto-autopx.
Execute a line of a notebook cell.
Run a heartbeat if the current time is older than the current time.
Run a task from a message.
Removes a task from the database.
Patch an object's attribute `name` with the given method.
Accepts a new connection from the client.
Called by the client when it wants to reject a pending connection.
Return a proxy agent for this endpoint.
Called when the form is valid.
Handle delete requests. :param request: :param kwargs: :return:.
Set the current logged in user to the request user if they are logged in.
Check if Python has already been compiled.
Opens a text editor for the given line number.
Get the text from the clipboard.
Add a new function to the chain.
Get metadata object from path_or_module :param path_or_module: path
Configures the plugin. :param options: :param conf: :return:.
Imports a module by its fully qualified name.
Tries to connect to the server using passwordless SSH.
Try to connect to a remote host using passwordless SSH.
Attempt to connect to a remote server using a passwordless SSH client.
Create a SSH tunnel connection.
Open a tunnel to a remote server.
Stops the scheduling tasks. :returns: None :rtype: None :raises:
Unwrap an exception and store it in the error object.
Registers an engine.
Unregister the engine and handle stranded messages.
Handle an execute reply message.
Flushes the notifications from the server.
Flushes the results of the job queue to the given socket.
Flush all pending control messages from socket.
Flush control bytes to ignore.
Flush iopub messages from socket.
Spawn a new thread every interval seconds.
Stops and waits for the spin thread to finish.
Sends all pending messages to iopub, iopub, iopub,
Send anapply request over the specified socket.
Hub the history of the hub.
Send a query to the database.
Returns a set of opcode strings.
Returns a byte parser object.
Returns a set of lines matching the given regular expression.
Get the first line of the text.
Returns a list of lines that are not in the ignore list.
Parses the source of the file and returns a list of lines.
return a sorted list of all arc numbers.
Returns a list of child parsers.
Yields the lines of code in co_lnotab.
Finds all the statements in the file.
Returns a string representation of the block stack.
Validate that the chunks are valid.
Yields the lines of the file.
Returns a list of all the child chunks.
Returns a set of all arc numbers for all children.
Initialize the covererase.
Print the coverage report to the given stream.
Check if a file is want to be covered.
Generates distribution objects based on a source distribution name.
Opens a URL, returning a file-like object with authentication.
Returns the parent module of the given object.
Returns the root topic.
Render the template with the context.
Configures the plugin.
Format an error.
Splits a list into a list of lists of length num.
Convert a notebook to a specific format.
Converts a hex color to an RGB color.
Returns a dictionary of colors for the given style name.
Returns a font that matches the given family and fallback.
Handle an execute reply message.
Handle a history reply message.
Handle output from pyout.
Handle display data related to the current session.
Make sure the kernel is loaded correctly.
Execute a file on the remote host.
Process the execute error. :param msg: :return:.
Check if a payload should be executed.
Sets the default syntax style.
Opens a file in the editor.
Make the input prompt text.
Makes a prompt that contains a newline character.
Called when the style sheet has changed.
Updates syntax_style with the current syntax_style.
Transforms a data dictionary into key-value pairs.
Get virtual memory information.
Get CPU times of the current process.
Get the uids of the process.
Get the GIDs of the process.
Returns a list of process threads.
Get a list of open files for the process.
Return the hash of the current package's commit :param pkg_path: path to
Return information about a package as a dictionary.
Return the number of CPUs on Mac.
Returns the number of CPU cores on the system.
Returns the next set of results.
Fetches the next row and returns it.
Fetches multiple rows at once.
Fetch all data from the database.
Connect to a tree :param peers: :param tree: :param pub_url:
Read a notebook from a JSON string.
Read a notebook from a Python string.
Reads a string or list of strings of the given format.
A wrapper around ` writes_json` and ` writes_py`.
Convenience function to write to a file-like object.
Converts all files in the same directory to metadata.
Load a value from a dictionary.
Returns True if the given name matches this pattern, False otherwise.
Determine if we want to use the given class.
Check if a directory is in the same directory as this one.
Check if a file should be ignored.
Check if a function is allowed to be executed.
Check if the given method is want to be executed.
Determine if the given module is want to be installed.
Return a list of lines from a file.
Print a list of lines from a pydb command.
Print a list of lines.
Define a user-defined function in the current frame.
Returns the conversion factor between two currencies.
Converts a currency value from one symbol to another.
Computes the return rate from start date to end date :param start_date:
Returns the stream encoding.
Get the preferred encoding for the stream.
Writes the connection file to disk.
Initialize the heartbeat.
Initialize a session with the config.
Initializes the IO stream.
Initialize the kernel.
Converts HTML to plain text.
Converts Markdown to plain text.
Converts a domain name to FQDN.
Adds common options to the command line parser.
Sets up the exclude options.
Check if a directory name is in the exclude_dirs list.
Returns True if any of the library links to the dynamic library.
Calls each element of a list of functions.
Calls each of the given functions in reverse order.
Appends a function to the stack.
Insert a function into the container at the given index.
Format the usage message.
Write the PID of the daemon to a pid file.
Remove pid file from profile directory.
Get the PID from the pid file.
Construct a parser from a magic function.
Returns the real name of a magic function.
Highlights the given block.
Rehighlight a block. :param block: Block tohighlight :type block :type block
Set the document format.
Copy text to the clipboard.
Execute an arbitrary source. :param source: source to execute :type hidden: bool :
Defines a hook that is called when the prompt is finished.
Called when the user pressed a tab.
Make the context menu.
Callback for filter_console.
Insert a newline at the beginning of the prompt.
Handle a completion reply from the server.
Handle an execute reply message.
Handle the kerneldied task. :param since_last_heartbeat: The last
Handle reply to object info.
Handle output from pyout.
Handles stream messages.
Handle a shutdown reply message.
Execute a file at the specified path.
Interrupts the kernel.
Reset the console to its default state.
Restarts the kernel :param message: :param now: :param now: :param
Calls the tip of the current shell.
Send a completion request to the shell channel.
Process an execute error message.
Process an execute response message.
Handle document contents change.
Adds a plugin to the list of plugins.
Call all registered plugins in the chain.
Generates a generator yielding each plugin for the given arguments.
Run the plugins with the given arguments, returning a simple result.
Configures the plugin using the given options and config.
Load plugins from entry points.
Loads all the builtin plugins.
Convert a LaTeX string to a PNG string.
Convert a LaTeX string to an HTML page.
Check if a distribution exists.
Create a dictionary from a list of attributes.
Returns the name of the process.
Calculate CPU percent using the operating system. :param interval: :param interval: :param
Returns the percent of memory in Mebibytes.
Returns a list of memory maps on the platform.
Check if the process is running.
Suspends this process.
Resumes the running process.
Kills the process. :returns: None :rtype: None :raises: OSError
Wait for the process to finish.
Waits the user's kernel in the event loop.
Determine if the given identifier is shadowed with the given ip object.
Registers a new transformer.
Unregister a transformer.
Register a checker to be checked.
Unregister a checker.
Registers a handler with the given name.
Unregister an escape code handler.
Prefilter line info.
Finds a handler by name.
Transform a single line.
Prefilter a line.
Prefilter a list of lines.
Checks if an interface is available on the shell.
Determine if we should filter the line.
Checks if the content of line_info matches the pattern defined in line_info.
Checks if the first line of an interface is in the shell alias manager or not.
Process one line of input.
Expand aliases to include the rest of the command.
Processes a line of a magic script.
Processes a single line of input.
Processes a single line of the shell.
Handle a single line of the script.
Overrides eventFilter to hide the widget if key is pressed, otherwise hide the widget.
Overrides enterevent to stop the hide timer.
Overrides the paint event to draw the tip.
Show a call's docstring.
When the cursor changes, hide the widget.
Returns the absolute path of the given path relative to the current directory.
Returns a masked copy of the masked attribute.
Check if we are running under virtualenv.
pwordfreq is used to calculate the frequency of each word in a text file.
Return a list of the default aliases for the current OS.
Add an alias to the shell script if it doesn't exist.
Define an alias for a command.
Validate alias name and alias cmd.
Calls shell command with given alias.
Transform an alias into something we can find.
Expand aliases. :param line: input line :type line: str :param alias:
Generate the rst file for the auto-help directive.
Reset all text attributes to default values.
Returns a QColor instance for a given color.
Returns a QTextCharFormat with the current values.
Generates a JWE token :param secret: :param age: :param payload:
Removes all JWTs that are older than the current time.
Check to see if a token has already been used.
Checks if the token is valid.
Computes the common prefix of all items.
Returns a QSize that is the width of the grid.
Return whether the text can be cut.
Returns whether the text can be pasteed to the clipboard.
Clear the input buffer.
Cut the text.
Gets the input buffer.
Sets the input buffer.
Sets the font for the completion widget.
Print the contents of the control.
Sets the prompt cursor to the top of the screen.
Resets the font to the default font.
Appends input to the text before the prompt, unless before_prompt is True.
Appends the given html to the current prompt.
Calls _insert_html_fetching_plain_text with the given html.
Call this method to insert text before and after prompt.
Clears the temporary buffer.
Update the completion widget with the given items.
Fills the buffer with given text.
control key down :param modifiers: :param include_command: :param include_command
Create a QTextEdit or QTextEdit for the context menu.
Create the page control that will be displayed in the browser.
Callback to filter the page by key.
Returns the plain text of the given block.
Returns the end of the text cursor.
Returns the column number of the input buffer cursor.
Get the line number of the prompt in the input buffer.
Gets the prompt's current position.
Gets the current cursor from start to end.
Insert acontinuation prompt.
Insert html at cursor.
Inserts the given html text at the given cursor position.
Inserts the given text at the given cursor.
Moves the cursor to the end of the buffer.
Close the keyboard.
Page text. :param text: text to page :type html: bool :param html
Called when the user wants to start the prompt.
Read a line from the user.
Sets thecontinuation prompt. :param prompt: :param html: :param html:
Sets the cursor to the top of the text.
Adjusts the viewportbars based on the font metrics and the current window height.
Entry point for command line utility.
Copy a config file to the package directory.
Create a directory containing a user's profile.
Locate the directory containing a given profile name.
Read a file and return it as a string.
Create a temporary Python file.
Flush and close the file.
Write data to file.
Add a new heartbeat handler.
Register a failure handler.
Handle a PING message.
Batches a list into a list of lists of length batch_size.
Convert a path to a filename.
Print the elapsed time and total time in seconds.
Calculate time unit based on elapsed time avg and est_end.
Extract the wininst config from a.cfg file.
Uncache a directory.
Quotes an argument in namedtuples.
Check if there are any conflicts found in the site-directories.
Set fetcher options.
Create home directory if necessary.
Check if name is an archive file.
Create a new heading cell.
Create a new notebook metadata object.
Create a new notebook node.
Check if path is a directory and is readable.
Removes leading and trailing whitespace from a filename.
Get a filename for a Python module.
Returns the default XDG directory for the current platform.
Determine the default location of the user's home directory.
Get the directory where i is located.
Get the path to a module.
Check if a target is older than a given set of dependencies.
Returns the md5 hash of a file.
Check if old config file exists.
Update suggestions dictionary for a given object.
Returns a list of suggestions for the given object with the given size.
Returns a list of suggestions for the given object.
Return the path as relative to the current working directory.
Return a list of path objects that match the pattern.
Returns the MD5 hash of the file.
Create a profile file and store it in self.pfile.
Print profile statistics to the given stream.
Clean up pfile, fileno, pfile, and pfile if available.
Disable the wx event loop.
Disable the Qt4 event loop.
Enable event loop integration with gtk.
Enables or disables a tk window.
Enable event loop integration with pyglet.
Calculates the wave-saver of the signal at the given x, y,
Initialise the sqlite database.
Execute the sql on the database.
Get information about a specific session.
Returns the last n rows of the table.
Get a range from a string.
Get the name of the hist file for a given profile.
Set a session name.
Reset the history of the CWL session.
Generate a range session.
Store the output of a line.
Write out the input and output cache.
Stops the agent and waits for it to finish.
Get the number of CPUs in the system.
Get system per CPU time.
Returns a list of disk partitions on the system.
Returns a list of PIDs.
Nice a pair.
Takes a list of statements and a list of lines, and returns a string of pairs
Returns a short stack as a string.
Join a regular expression into a single string.
Check if file exists and is Gone.
Recursively update an MD5 hash.
Update the profiles dictionary.
Stops the cluster with the given profile.
Tries to find cmd in PATH.
Reads the stdout and waits for a system body.
Find all code units for a Morfs.
Runs the code unit analysis and creates a directory if needed.
Use Pdb to trace the execution of the current function.
Initialize the extensions for the shell :returns: None :rtype: None :raises:
Runs the code in the shell.
Runs all the lines in the exec_lines list.
Run the startup files.
Execute all the executable files in the shell.
Runs a single line of code in the shell.
Runs the module specified in extra_args.
Returns the filename of a static file.
Returns the contents of a file, as a unicode string.
Escapes characters in a string.
Generate HTML report.
Copy static files from the static directory to the report directory.
Writes the given HTML to the given file.
Calculate the hash of the source file.
Render and write the index.html file.
Read status from file.
Write the status to a pickle file.
sort lst1 == lst2.
Returns a slice of a sequence.
chop a sequence into chunks of a certain length.
Reads the contents of the manifest and adds ignore regexps to the ignore list.
Converts a glob pattern to a regular expression.
Returns True if filename matches any of the patterns.
Returns a list of all versioned files on the system.
Start a new kernel and assign it to _kernels.
Shutdown a kernel. :param kernel_id: kernel id :type kernel_id:
Kills a kernel from the container.
Retrieves a kernel object given its ID :param kernel_id: ID of the kernel
Get the ports for a kernel.
Given a kernel_id, return the name of the notebook associated with that kernel.
Starts a kernel for the given notebook_id.
Shutdown a kernel :param kernel_id: kernel id :type kernel_id: str
Interrupt a kernel from mapping.
Restarts a kernel, then kills it and then kills it.
Creates an iopub stream for a kernel.
Create a shell stream for the kernel specified by kernel_id.
Handles the creation of a kernel stream.
Reset the instance to its default state.
Exports the given html file to the given image tag or default image tag.
Removes whitespace from the end of a HTML string.
Returns a unique object, or None if none exists.
Given a list of tokenized terms and a list of search fields, return a combined query
Given a string of query strings, return a query that includes all of the search_fields
Builds a query based on the days and date_field.
Builds a dateless query :param days: number of days :param date_field
Get the null or blank query for a given field.
If the field is not in the model, it will be removed from the fields_dict
Add command line options.
Validates that the given attribute matches the given class.
Validate that the given method is a wantmethod of this element.
Rotate the cursor to the top of the list.
Get the url of the websocket connection.
Serialize a reply to JSON.
Injects a string into the request cookie.
Start the HBperiodic callback if it's still open.
Stops the HB.
Open and close the file object.
Returns the index or None.
Move the cursor to a new block index.
Edit the text at the given index.
Show the source block at the given index.
Print all src blocks.
Run a function over a sequence.
Return the source of a traceback as a tuple of lines and index lines.
Return a list of lines to inspect at the given position.
Returns an HTML tag with the given name, date, and description.
Sends signals to all engines and then kills the controller.
Call a function and store the last n messages in the history.
Call the given function with the given arguments, and return the results.
Runs the given function after the given arguments.
Returns a list of messages from the queue.
Get a message from the queue.
Parse a url and return a dictionary.
Return a list of all the root modules in the system.
Given a line of text, return a list of completion modules.
A completer for magic_run.
Quotes an XML attribute.
Configures the Xunit plugin.
Write the error list to the stream.
Adds an exception to the error list.
Adds a failure to the error list.
Add a successful test to the error list.
Calculates a twobin number from the top of a json file.
Calculates a weighted sum of the loads values.
Register an engine to be loaded.
Unregister the engine with the given uid.
Sends the stranded messages to the specified engine.
Iterate through the depending messages and fail them if timeout is too low.
Send a fail message to all the dependent nodes.
Saves unmet jobs to graph.
Submit a task to the front-end.
Send a result back to the client.
Handle a result received from a client.
This function is called when a dependency is unmet.
Update the dependency graph.
Print the current state of the log file.
Write or update a log entry.
Writes data to the log file.
Stops logging if a logfile is open.
Create a new worksheet.
Adds an object to the chain.
Adds a re object to the chain.
Yields all objects matching the given regular expression.
Returns a generator yielding all elements that match the given key.
Called when a notebook directory changes.
Lists all notebooks in the notebook directory.
Create a new notebook id.
Removes notebook id from mapping.
Check if notebook exists.
Find notebook path by notebook id.
Get the path to a notebook with the given name.
Get a notebook and return its last modified, name and data :param notebook_id:
Get a notebook object by its ID.
Save a new notebook.
Save notebook with given data :param notebook_id: notebook id :param data: notebook
Save notebook object to file.
Delete notebook identified by notebook_id.
Create a new notebook and return its id.
Copies a notebook from notebook_id to notebook_id Args: notebook_id
Given a list of tokens, return a generator of token strings.
Load the default configuration.
Return a list of the default classes.
Overrides the default parse_command_line method to handle command line arguments.
Initialize the application.
Initialize the IPython shell.
Initialize the banner if it hasn't been created yet.
Format an object's type as a human readable string.
Parses a comma-separated list of strings or lists of strings.
Returns a mapping of name to the trait in the class.
Get the metadata associated with a trait by name and key.
Check if the value is an instance of our class.
Return the default value for the field.
Check whether a job is completed or not.
Determine whether or not a job is reachable. :param completed: :param failed:
Returns a dictionary representation of the job's dependencies.
Finds the depth of a node in a tree Parameters ---------- n : int The number of
Print a bintree in a human readable format.
Disambiguate DNS URLs.
Same as allreduce, but return the result as a list.
Validate and return the targets.
Dispatches the received monitor data to the appropriate handler.
Sends a query to one of the client's identities.
Called when a new heartbeat is received.
This function is called when a heartbeat message has been received.
Save a task request to the database.
Save an iopub message :param topics: :param msg: :return:.
Send a connection request to the Keen IO API. :param client_id:
Unregister an engine.
Finish the registration of an ensembles entry in a queue.
Send a shutdown request to a client.
Purge the results of a given query.
Extracts content and buffers from a record.
Get the history of a message.
Send a query to the database.
Context manager to temporarily change the working directory.
Decodes the stdout and stderr of a completed command.
Run a command under the root directory.
Calls the appropriate message handler based on the message type.
Checks if the message is from the parent session of the current session.
Report Morfs to stdout.
Determine the installed version of a package.
Replaces all keys in a dict that are not unicode.
Extract a header from a message or header dict.
Check that the packers are valid.
Create a message of the specified type. :param msg_type: :param content:
Signs a list of messages.
Send a message or list of messages as raw binary stream.
Receive identities from a socket.
Saves the specified SVG string to a file.
Renders an SVG string to the clipboard.
Returns an SVG image from a string.
Return info about objects.
Get the docstring of an object.
Get the source code of an object.
Returns a tuple of the args, args, varkw, default values for the supplied object
Returns the absolute path to the file where the object's data is stored.
Returns the source lines of an object.
Get the docstring of an object.
Returns the string with the header.
Print'msg' if 'oname' is true, otherwise print 'oname'.
Print a definition of an object.
Return the source of an object as a page.
Print the source file of the given object.
Format a list of fields. :param fields: :param title_width: :param
do a psearch of a namespace table.
Spawns a reactor in a separate thread.
Returns a pretty-print version of the object as a string.
Returns the XML representation of the document.
Loads all modules in a set of packages.
Invert a dictionary.
Converts a primitive object to its primitive representation.
Returns a list of matplotlib figure objects.
Print a matplotlib figure.
Selects the desired format for the figure.
Find gui and backend.
Switches the default matplotlib backend.
Set up the inline support for the given shell.
Starts the trace.
Stops the execution of the current thread.
Starts a new Tracing object.
Installs the trace function at the start of the trace.
Starts the collector thread.
Stops the collectors.
Pause the execution of all trasamples.
Resumes the installation of all traces.
Returns the data for a line.
Given either a dictionary or a list of dictionaries, or a list of lists, return a
Returns a list of lines with the traceback information.
Initialize coverage and start coverage.
Return canonical Morf name from Morf name.
Returns the source for a given file name.
Return whether we should trace with the reason.
Return whether the debug should be logged.
Print a warning message to stderr.
Check if source packages exist.
Determine what to do with the data and start analysis.
Called when the program exits.
Returns the regex to use to filter objects for which.
Save the data to the data file.
Combine multiple parallel data objects into a single data object.
Take the line data from the source and add them to the data object.
Compute the analysis of a Morf.
Create a new analysis object from an object.
Generate a summary report of the results of this analysis.
Annotate a Morfs object with their annotations.
Generate an XML report from the data.
Reload data from file or URL.
Returns the path to a command in the working directory.
Execute a command on the system.
Forward read events from a file descriptor.
Read a line from the socket and send it.
Find and return a class of a certain kind.
Start the daemonized process.
Build and return an instance of the cluster manager class.
Start the event loop.
Start the daemonized service.
Return wx.App instance.
Determine if an event loop is running in a wx app.
Start the wx event loop.
Return a Qt4 application instance.
Check if a Qt4 event loop is running.
Start an event loop on a Qt4 instance.
Create a blank canvas.
Draw a cross on the map.
Draws a line between 2 points.
Create an image from a Grayscale image Parameters ---------- im : numpy.ndarray The image
Returns a UUID with the given length and version :param length: The number of bytes to
Returns a unique key from get_dict.
Get the domain name of a URL.
Returns a dictionary of the url's query parameters.