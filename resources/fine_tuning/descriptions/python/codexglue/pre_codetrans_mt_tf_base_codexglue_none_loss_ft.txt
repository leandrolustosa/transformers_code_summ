Convert Sina XML to a list of URLs.
Downloads the given url to the output directory.
Download a file from a SANA hypervisor location.
Sprintf the given text with the given colors.
Print text to stderr.
Print an error message and exit with an optional exit code.
Prints a message and exits with an optional exit code.
Detect the operating system.
Get info from ckplayer xml file.
Get real url from m3u url.
Return a legitimized version of the text.
Download a CBS file.
Matches text against a list of patterns.
Parse a query parameter from a URL.
Parse a host string into a tuple.
Get the title of a topic part by tindex and pindex.
Download WANMAN data from WANMAN JSON API.
Download a WANMAN article by topic part.
Check if the given task instance is currently running.
Get the event buffer for a set of DAGs.
Return a connection to the snowflake server.
Get AWS credentials from snowflake.
Get the value of a field. :param field_name: field name :param default:
Copies the given SQL to the given file.
Bulk dump a table to a temporary file.
Execute the upload action.
Show the current state of a task.
Get a boto connection.
Get the details of an instance.
Create an instance on the cloud.
Delete an instance.
Creates a database on a given instance.
Deletes a database from an instance.
Starts the sql proxy process.
Stop the sql proxy process.
Returns the version of the proxy.
Create a new connection in the database.
Retrieve a connection from the database.
Delete the connection from the database.
Returns a SqlProxyRunner for this instance.
Returns the database hook to be used to connect to the database.
Clean up the database hook.
Reserve a free TCP port.
Remove tracker from job id.
Extract the error code from an exception.
Remove all dag runs from the database.
Remove all task instances in the dag.
Set the state of all paused dags to is_paused.
Prints statistics about the execution of a task instance.
Check to see if there are any task instances that have completed successfully.
Create the given path and all parent directories along the way.
Convert string to float if possible.
Make value aware according to timezone.
Make a datetime from a timezone-aware value.
Shortcut to create a datetime object.
Get connection to Druid broker.
Get a requests session.
Make a request to the given endpoint.
Check the response for errors.
Run a pre-prepared request and check the response.
Create a session and commit it to the database.
Drop all migrations and init database.
Returns the formatted exception message.
Executes the given HQL query and returns a list of record objects.
Executes a given HQL and returns the result as a pandas DataFrame.
Run a HQL query.
Insert rows into a table.
Returns a cosmos client.
Checks to see if a collection exists.
Creates a collection in a database.
Check to see if a database exists.
Create a database on the Airflow instance.
Deletes the specified database. :param str database_name: The name of the database to
Deletes the specified collection from the specified database.
Inserts multiple documents into a collection.
Deletes a document from a collection.
Retrieves a document from a collection.
Returns a list of documents from the database.
Get the details of the named function.
Creates a new function on a given location.
Update a Lambda function. :param str name: The name of the function :param str body
Uploads a zip file to a location.
Deletes the specified function.
Get a list of dep statuses.
Return True if all dependencies have been met.
Return a list of failure reasons.
Parse the S3 config file.
Get frozen credentials.
Return a connection to vertica.
Flush the buffer to the logger.
If the given fileloc is a zip file, return it.
Constructs the task instance for the given dag and task id.
Starts the DAG process.
Sends a terminate signal to the child process.
Exit the process gracefully.
Starts the scheduler.
Starts the DAG parsing in an asynchronous way.
Starts the DAG parsing in sync with the agent.
Refresh the dag directory if needed.
Prints file processing stats if it has not exceeded the print_stats_interval.
Clears import errors from the database.
Log processing statistics for the given files.
Sets the list of file paths to process.
Waits until all processors have finished processing.
Kill all processes and wait for them to finish.
Get a connection to the SSH server.
Creates a new transfer job.
Gets the details of a single transfer job.
Return a list of transfer jobs matching the filter.
Updates an existing transfer job :param job_name: The name of the job :param body
Cancel an ongoing transfer operation.
Pauses a transfer operation.
Resumes a previously paused transfer operation.
Wait for a GCP transfer job to finish.
Finds all tasks that are related to the given task instance.
Return the number of open slots for this pool.
Run a command and return the output.
Allocate IDs for a set of keys.
Begin a transaction on the project.
Commit changes to a project.
Perform a lookup operation on a set of keys.
Roll back a transaction. :param transaction: The transaction to rollback :type transaction: str :
Run a query on the project.
Get an operation by name.
Delete an operation on a project.
Poll an operation until it is done.
Get the hostname of the Airflow instance.
Get a connection to the language service.
Get a list of template fields from a class.
Link to template fields.
Dispose of the ORM instance.
Prepares the classpath to load Airflow plugins.
Check the status of the target task.
Returns True if ticket cache file is present, False otherwise.
Convert an SQLAlchemy object to a dictionary.
Yield successive chunks of size chunk_size from items.
Reduce an iterable in chunks.
Follow a sequence of tasks.
Renders a log file based on a template.
Get a connection object to the API.
Wait for a dataproc operation to complete.
Deep string coercion.
Handles Databricks operator execution.
Runs the airflow CLI.
Fetches the current state of a celery task.
Return the number of tasks to send per send process.
Return the number of tasks per fetch process.
Get a connection to the server.
Helper function to get a job.
Waits for a job to finish.
Create a new version of a model.
Set the default version for a model.
List versions of a model.
Delete a version of a model.
Create a model for a project.
Get a model by name.
Write a batch of items to DynamoDB.
Integrate all executors modules into the globals.
Get the default executor.
Get an executor by name.
Called when a segment error occurs.
Returns a SQLAlchemy connection.
Trigger a dag. :param dag_id: ID of the dag to trigger :param dag
Delete a dag. :param dag_id: ID of the dag :type dag_id
Get information about a task.
Get a list of pools.
Create a new pool.
Create or update a container group.
Get the details about the state of the instance.
Gets the messages for the given resource group and name.
Get logs for a container.
Delete a container from a resource group.
Check if a container exists in a resource group.
Construct the dict to be passed to the ingest function.
Poke a message from one of the channels.
Get all the task instances in this execution.
Get the task instance for the given task_id.
Returns the dagrun before this one.
Returns the previous scheduled dagrun for this execution.
Verify the integrity of the workflow.
Send a request to the Jenkins server and return the response as a dict.
Convert a context to a dictionary of airflow variables.
Triggers a DAG run based on the context.
Send a metric query to the metric service.
Get a dag by ID.
Kill a list of zombies.
Bags a dag and all its sub-dags into self.dags.
Collects all the DAGs in the specified folder.
Return a report on the DAGbag.
Add a number of days to a date.
Return True if the file should be pruned.
Return True if the file should be copied to HDFS.
Clear task instances from the database.
Get the next try number.
Get the current state of the task instance.
Set the state to failed and commit the transaction.
Refreshes the state of this TaskInstance from the database.
Removes all XCOM data from the database.
Return the unique key for this execution.
Returns True if all dependencies have been completed.
Returns the datetime that should be used to retry the job.
Check if the job is ready to retry.
Check if the pool is full.
Get the DAG Run object for this workflow.
Adds a new item to the DAG.
Initialize the run context.
Write the log file to the remote location.
Get a connection to the API.
Start an instance in a zone.
Gets an instance template.
Wait for an operation to complete.
Check to see if a bucket exists.
Create an S3 bucket.
Check if a prefix exists in a bucket.
Returns a list of prefixes for the specified bucket.
Returns a list of all keys in a bucket.
Check if key exists in S3.
Get an object from S3.
Reads the contents of a key.
Check to see if a key matches a wildcard key.
Given a wildcard key, return the corresponding key object.
Execute the cql query on the cassandra server.
Convert a user type from one of its fields to another.
Get a connection to the speech API.
Executes the query.
Load plugins from a list of entry points.
Check if plugin_obj is valid.
Marks the given list of tasks as skipped.
Establish a connection to the Azure File System.
Check to see if a file exists.
Returns a list of all files or directories in path.
Execute the query and return the result.
Uncompress a gzip or bzip2 file.
Return a cursor to execute the query.
Build metrics for a given function and namespace.
Create a cgroup at the given path.
Delete a cgroup by path :param path: path to the cgroup :type path:
Makes a call to the Databricks API.
Returns a Salesforce connection.
Make a query and return the results.
Return a dictionary describing the object.
Get the list of available fields for an object.
Get object from salesforce.
Convert a Pandas column to a timestamp.
Get a mongo collection.
Check if a name has an attachment.
Find attachments by name.
Return the filename and payload of the message.
Put records into the Firehose Delivery Stream.
Get the status of a task instance.
Sends an email via the backend.
Send an email using SMTP.
Convert timezone aware value to UTC.
Check if a blob exists in a container.
Check if a prefix exists in a given container.
Loads string data into a blob.
Reads a file from a container.
Delete a file from a container.
Get ftp connection.
Return a list of files in a directory.
Store a file on the remote host.
Get the modification time of a file on the FTP server.
Executes the webhook.
Return a FileService object for this service.
Check if a directory exists.
Check if a file exists in a directory.
Returns a list of directories and files in a directory.
Creates a directory. :param share_name: Name of the directory to create :param directory
Loads a file at the given path into the given directory.
Load string data into a file :param string_data: string to load :param share_
Get a storage connection.
Downloads the contents of an object to a local file.
Uploads a file to a bucket.
Check to see if an object exists in a bucket.
Check to see if an object is updated after a given time.
Deletes a blob from a bucket.
Get the size of an object in a bucket.
Get the CRC32C of an object.
Get the MD5 hash of an object.
Check if the status of the secondary training job has changed.
Returns a human readable status message for secondary training.
Create a tar file and upload it to S3.
Configure resources for S3.
Check if S3 URL is valid.
Return a connection to the log service.
Execute the DataFlow worker.
Run migrations offline.
Run all migrations on the local database.
Delete an instance :param instance_id: ID of the instance to delete :param project_
Delete a table from an instance.
Update a cluster.
Prepare the command line for the beeline client.
Prepare a hive configuration from a dictionary.
Checks if a table exists in the database.
Return a connection to the database.
Execute a HQL query and return the results as a dictionary.
Get records from a HQL query.
Execute a HQL query and return a pandas DataFrame.
Returns a product search client.
Get the authentication endpoint.
Bind parameters to an operation.
Escape special characters in a string.
Convert string_field to the correct type according to bq_type.
Validates that the value is of the expected type.
Return a connection to BigQuery.
Return a service object that can be used to interact with the API.
Checks if a table exists in a dataset.
Cancel a running query.
Delete a table from a dataset.
Insert or update a table in a dataset.
Get a dataset resource.
Execute an operation on the database.
Executes the given operation for all the given parameters.
Returns the next row in the result set.
Return a cursor to the postgres database.
Create intermediate directories on the remote server.
Run the command in a subprocess.
Remove the config file if it exists.
Main entry point for the script.
Build the html header.
Builds the jschart for the series.
Create an x-axis for the figure.
Create a y-axis for the figure.
Get a connection to the database.
Get the last DAG run.
Sends the message to SQS.
Convert an object to a JSON response.
Open a file, possibly zipped.
Make a cache key from the request path and args.
Get a connection to the video service.
Get the API key from the connection.
Return a requests.Session for this request.
Execute an API request.
Build the payload to send to OpsGenie.
Executes the alert hook.
Return a connection object.
Run a query and return the query execution id.
Check the status of a query execution.
Poll for query execution status.
Return a pysftp.Connection object for this connection.
Handles a rate limit exception.
Get the contents of a table.
Get the location of a table in a database.
Get the status of a cluster.
Deletes the specified cluster. :param str cluster_identifier: The identifier of the cluster :
Returns a list of snapshots for the specified cluster.
Restores the cluster from the specified snapshot.
Creates a cluster snapshot. :param snapshot_identifier: Snapshot identifier :type snapshot_identifier:
Execute a Slack API call.
Create an EMR Job Flow.
Filter a list of dicts to only include those whose file size is greater than or equal to
Filter a list of files to only include those that match the given ignored_ext.
Execute the query and save the result to S3.
Get a pool by name.
Create a pool in the database.
Delete a pool from the database.
Convert a dictionary to a JSON structure.
Wait for an operation to finish.
Get an operation by name.
Appends a label to the cluster protobuf.
Get the webhook endpoint.
Build a discord payload.
Executes the webhook.
Encrypts the given plaintext with the given key_name.
Get a connection to the Tweet API.
Write the log file to S3.
Returns a dictionary of environment variables to be passed to the Docker client.
Get secrets from kube-config.
Get the security context to pass to the cluster.
Get the URL for the extra links for the given operator and dttm.
Starts the DAG file processor.
Wait for the result to be available.
Exit the process gracefully.
Updates the import errors in the DAGbag.
Processes the task instances of the given dag.
Get the number of tasks in each dag and the number of tasks in each state.
Change the state of the task instances to queued.
Enqueues task instances with queued state.
Change state for tasks that failed to execute.
Processes the events of the simple dagbag.
Update the counters.
Manage the state of all executors.
Returns the DAG run for the given execution date.
Returns a dict of Task instances keyed by task ID.
Sets the state of all dag runs to failed.
Check if the current process is running and terminate the task runner if not.
Get a client for the given project.
Get an instance by ID.
Delete an instance.
Delete a database from an instance.
Returns True if the message has an attachment.
Prepares the additional parameters dictionary.
Get a connection to the Cassandra cluster.
Check to see if a table exists.
Returns True if a record with the given keys exists in the given table.
Build the command to get the status of the driver.
Submits a Spark application to the cluster.
Process the spark submit log file.
Process the status log of the Spark instance.
Return a TaskRunner for the given task job.
Wait for the task to be finished.
Return a cursor to the mysql database.
Configure a CSV file with the given schema.
Write the schema to a local file.
Get the column type dictionary from the schema.
Map MySQL type to python type.
Deserialize extra data from JSON.
Scales a list of time units to a given unit.
Return a timedelta of n days ago.
Initializes a role with the given name.
Deletes a role from the database.
Returns a list of roles the user has.
Returns a set of tuples with permission name and view menu name.
Returns True if the user has any of the specified roles.
Check if user has permission.
Remove all permission views and view menus.
Merges a permission with a view menu.
Update the permission view of the admin.
Create permission VMs for all dags.
Get the Cryptography Fernet object.
Check if partition exists.
Poke a message from SQS.
Get a connection to HDFS.
Get a webhdfs connection.
Check if HDFS path exists.
Return a connection to Pinot Broker.
Return the URI for the current connection.
Convert datetime.date to dict.
Convert a time object to a dictionary.
Get a redis connection.
Executes SQL against the database and returns a dataframe.
Runs SQL against the database.
Set the autocommit flag on the given connection.
Serialize a cell to its string representation.
Check the health of the scheduler.
Get a Cloudant session.
Execute the Slack webhook.
Get the credentials from the request.
Authorize to Google.
Return the list of unfinished jobs.
Prepares the given command for execution. :param cmd: The command to execute :type cmd
Normalizes the input tensor by the mean and standard deviation.
Crops an image to the given dimensions.
Flips a PIL image horizontally.
Applies a perspective transform to the given PIL image.
Flips a PIL image vertically.
Adjust brightness of an image.
Adjusts the contrast of an image.
Adjusts the saturation factor of an image.
Converts a PIL image to grayscale.
Saves a Tensor to an image file.
Find all classes in a directory and return a dictionary mapping class name to index.
Reads an info file into a long tensor.
Reads a matches file into a Tensor.
Calculate the accuracy of the model Parameters ---------- output : torch.Tensor output target : torch.Tensor
Download a file from a URL.
Return a list of all directories under root.
Return a list of all files with the given suffix in the given directory.
Download a file from google drive.
Get random parameters for an image.
Generate start points and endpoints for a rectangle distortion.
Get random parameters for an image.
Generate a set of transformations for a random set of parameters.
Generate a set of random parameters to be used for a morphological operation.
Download the tarball and save it to disk.
Downloads and extracts the training and test files.
Get current theme name.
Get a list of themes from a templates directory.
Takes a response from the server and returns a list of results.
Creates an TensorFluent for the mvn function.
Calculate the log-probability of the eight schools.
Build a custom RV random variable.
Max reduction op with non-finite results masked out.
Returns the size of the event shape.
Evaluates the given function for every one-hot event of the given distribution.
Convert identifier to a Tensor.
Computes the size of the parameters.
Builds the input pipeline for the TensorFlow graph.
Checks that the map values are valid.
Call a transition function with the given arguments.
Calls the given function with the given arguments and returns the result and the gradients.
Broadcasts from_structure to to_structure if necessary.
Performs a single step of the leapfrog model.
A single step in the Metropolis havingtings algorithm.
Create an instance of TfpLayersConfig from a dictionary.
Convert x into a Tensor.
Expands x to the event rank.
Computes the logits for each category.
Ensure tensorflow is installed.
Computes the logistic regression of the given features.
Returns the features and labels of the covertype.
Makes a TensorFluent for the positive axis variable.
Squeeze the input along the given axis.
Tensorflow z operator.
Inverse of z.
Semi-local linear transition matrix from autoregressive coefficients.
Semi-local linear trend transition noise.
Find the indices of primes less than n.
Returns machine precision of the given dtype.
Perform a line search inside a bisection.
Prints a list of values.
Checks that the given parameter is a quadrature parameter.
Interpolate a grid at a given location.
Apply linear scaling to the given grid.
Concatenates vectors.
Computes the log-sum-exp of vs + ms.
Computes the log-sum-exp of ms and vs.
Computes the matrix of a vector given a matrix of ms.
Extracts the log probabilities from the given distribution.
Chooses a random direction for each part of the batch.
Calls a function if it's not None.
Builds a trainable posterior using the given initial location function.
Computes the mean and variance of the moments of the masked time series.
Returns the initial value of the masked time series.
Mixing over posterior draws.
Return the range of this interval.
Given a list of distribution names and a leaf name, return a tuple containing the names of the
Builds the call signature from the given model.
Return the total entropy of this distribution.
Print a summary of sequences.
Visualizes the reconstruction of the inputs.
Visualize the qualitative analysis of the model.
Summarize the distribution parameters.
Summarize the mean of inputs in NATS and BIT units.
Compute the multivariate normal diagonal.
Returns the zero state of the network.
Apply the convolution to the input tensors.
Sample from the prior.
Returns the shape of the batch outputs.
Returns the batch shape tensor of the model.
Converts vector size to square matrix size.
Return the indices that would sort a numpy array.
Sort an array along a given axis.
Tensorflow version of tf.ndtr.
Computes the log-ndtr of asymptotic series.
Inverse Rosenblatt transformation.
Computes the log-probability of the joint log-probabilities.
Checks whether the given index points are univariate.
Gets the index_points of this ChartSettings.
Returns the outer square difference between x and y.
Returns the value and batch jacobian of the function f applied to X.
Splits the covariance matrix into marginals.
Returns the text representation of a numpy tensor.
Returns the shape of the sample tensor.
Returns the sample shape as a Tensor.
Returns the sampled value.
NumPy representation of the tensor.
Uniform unit norm of a dimension.
Log normalization of the layer.
Returns the common dtype for all args in args_list.
Broadcasts all tensors in target_tensors to tensor_to_broadcast.
Calculates the PDF at the given peak.
Returns the effective sample size for a single state.
Returns the potential scale reduction reduction function for a single state.
Returns the size of x along the given axis.
If secondary_arg is a list, broadcast it to all states.
Remove a field from the mapping.
Merge two values.
Deeply convert dicts and lists into tuples.
Get the inputs of a function.
Helper function for VGG convolutions.
Check if there is no u-turn in each state.
Leapfrog algorithm for Bayesian linear regression.
Log joint probability of current_target_log_prob and current_momentum.
Returns a random binary quadratic model with the given probabilites.
Convert nested structure to Tensor.
Returns a dictionary of all tensorlike attributes.
Makes a prior for a mixture of components.
Pack images into one big Tensor.
Download a file from a URL to a directory.
Call volatility function and gradients.
Given a list of volatility values and a list of state parts, return a list of values.
Calls the given function with the shape of the input tensor and reshapes the output tensor.
Calls the given function and reshapes the output.
Compute the derivative of the negative binomial log-likelihood.
Samples from the root distribution and returns a list of samples.
Given a list of topics, return a list of string representations of each topic.
Adds the ema and ema_means to the vector_quantizer's code
Saves image data to a file.
Converts a TensorFlow dtype to a NumPy dtype.
Converts a TensorFlow dtype to its base dtype.
Returns True if dtype represents a boolean type, False otherwise.
Check if the given dtype is a complex type.
Returns the maximum value of the given dtype.
Returns the name of a TensorFlow dtype.
Returns the size of the given numpy dtype.
Check that all items have the same base type.
Returns a function that replaces the worst_index with the reflected objective.
Returns a function that expands the simplex by the given expansion factor.
Shrinks the objective along the best vertex by the given shrinkage.
Replaces the tensor at the given index with the given replacement.
Prepares the arguments for the objective function with the given initial simplex.
Prepare arguments for the objective function with an initial vertex.
Build fake training and validation data.
Returns the configuration for the TensorFlow graph.
Creates a TensorFlowClient from the given config dictionary.
Matrix multiplication.
Helper function to calculate the standard deviation of a statistic.
Picks a tensorflow condition for a scalar.
Finishes the log probabilty for a one-fiber.
Finish computation of the probabilty for one fiber.
Rotates dimensions if needed.
Validate batch normalization and virtual batch size.
Returns a dictionary mapping parameter names to sliced values.
Apply a single step of a multi-dimensional distribution.
Apply a sequence of slices to the distribution.
Returns the number of columns.
Returns the static predicate value for the given predicate.
Calculates the rank of a tensor given its shape. :param shape_tensor_fn:
Returns True if the given scale is a diagonal scale.
Pads the dimensions of a mixture with zeros.
Assert that x is a nonnegative integer.
Try to get a static value from a tensor or convert to a numpy array.
Returns True if the given TensorFlow Tensor is unsigned by its dtype.
Returns True if the given TensorFlow Tensor is signed by the given dtype.
Returns the largest integer in a numpy dtype.
Return the smallest integer of the given numpy dtype.
Returns True if `dt` is an integerlike with an integer dtype.
Generate a new seed based on the provided seed and salt.
Returns the size of the tensor along the given axis.
Validates that the rightmost transposed ndims are valid.
Validates a TensorFlow permission.
Returns the shape of the event with respect to the static permutations.
Returns a list of dimensions of x.
Builds a backward pass step from the given transition matrix.
Performs Kalman transition on the given data.
Propagate the mean of a Tensor to another tensor.
Propagate the covariance of a covariance matrix with respect to a distribution.
Calculates the joint mean of the latent and observed states.
Compute covariance matrices for joint state priors.
Transforms latent_means to observation_means.
Log normalization of the surface area.
The mode of the layer.
Rotate samples by the mean direction.
Sampling from a 3D tensor.
Returns a copy of the given function.
Remove all keys with value from a dict.
Recursively replace dicts with their values.
Get samples from the distribution.
Return True if x is a namedtuple like x.
Chooses between two namedtuples.
Calls a function and its gradients, if they are not None.
Checks that the given shape is valid.
Tensors that are either converged or failed.
Updates the position and gradients of the state.
Check if gradients and relative tolerances have converged.
Broadcasts the value to the target tensor.
Computes the harmonic number of x.
Get a field from the kernel results.
Returns the variance scale term of the model.
Returns a TensorFluent for the where function.
Returns True if val_1 is finite and False otherwise.
Return the bootstrapped results.
Resnet block with convolution and projection shortcuts.
Calculate the deep-exponential family.
Validates and initializes the parameters.
Returns the KL divergence function for the given type.
Reads an image from disk.
Download and extract sprites zip file.
Create a character from its components.
Create a sequence of frames from a character.
Create a random sequence of integers.
Flatten a list of summand kernels.
Flatten a multiplicand list of kernels.
Build training and testing data.
Insert back keepdims.
Make a list of non-negative integers representing the given axis.
Sorts a tensor by k-value.
Asserts that x has the same number of dimensions as expect_ndims.
Helper function for batch_gather_with_broadcast.
Broadcasts event and samples along the last dimension.
Check that the Hessian is positive definite and symmetric.
Transpose each row of the matrix.
Returns the sum of the right-most dimensions preserving shape.
Returns the common dtype for all elements in arg_list, if any.
Get the initial state of the optimizer.
Computes a mask of the eigenvalues of x.
Get the initial arguments for the objective function.
Find the population with the best value.
Check if the population has converged.
Ensures tensor_or_list is a list.
Get the tolerance tensor.
Builds the input pipeline for the TensorFlow graph.
Plots generated images.
Converts a list of TensorFlow productions to a string.
Call the LSTM with the given inputs.
Compute the latent diagonal of the encoder.
Computes the integral of x.
Computes the inverse hyperbolic tangent of x.
Helper function for _lu_solve_assertions.
Returns a TensorFluent for the diagonal of a sparse matrix.
Ensures that the matrix is valid.
Generate a list of slices.
Generate a mask for the given number of blocks.
Create an input_order for the given input_size.
Create masks for a set of degrees.
Create a TensorFluent for a zero-dimensional multivariate normal diagonal.
Converts a set of parameters to weights.
Connects the chain rule generator with the given model.
Builds a seasonal transition matrix.
Builds a function to calculate the seasonal transition noise.
Builds a constant time-constrained seasonal transition noise.
Validates the observed data.
Add a new value to the reservoir.
Set the checkpoint for this value.
Set the gradient clip to a constant.
Optimize the model.
Set the summary for the training.
Set the value summary.
Set the training data for this RDD.
Get all the texts in the News20 dataset.
Download and parse GloVE W2V files.
Call the bigdl function with the given parameters.
Evaluate the model on an array or RDD.
Predicts the class for the given data.
Get MNIST record.
Preprocess the MNIST datasets.
Get the end trigger number.
Train an optimizer on a RDD of test data.
Returns the value of the field.
Calls a bigdl function.
Convert a Spark RDD to a JavaRDD of Objects.
Convert Python object to Java object.
Get an activation by name.
Return the label of the value.
Read a parquet file into a DistributedImageFrame.
Write a parquet file.
Get an image from the data frame.
Get a list of images from the value.
Return the label of this Tensor.
Return a list of tuples where the first element is the prediction value and the second element is
Predict using the trained model Parameters ---------- x : np.ndarray or numpy.ndarray
Return the transformed dataset.
Save keras definition to json file.
Build Keras model.
Return the predicted class for each item in the RDD.
Get the weights of this Tensor.
Sets the training state of the model.
Load a torch layer.
Load a Keras model from either a JSON file or an HDF5 file.
Creates a criterion with the given jcriterion.
Load weights from a JSON HDF5 file.
Loads the imdb dataset.
Build Keras model.
Get the shape of the array.
Get the shape of the array.
Get MNIST data coordinates.
Download and extract movielens data.
Returns the bigdl classpath.
Returns True if pyspark is below 2.2.
Export a checkpoint as a dictionary of TensorFlow tensors.
Save a dictionary of tensors to a bigdl file.
Expands a set of units into a set of timesteps.
Attention with a mask.
Applies an attention layer to the given inputs.
Get the log file for this agent.
Logs the utterance to the log file.
Computes a summary of the gradient updates for all variables.
Read data by config.
Respond to an Alanice user.
Convert a list of labels to one-hot encoding.
Convert probabilities to one-hot representation.
Returns a TensorFlow Session configured with GPU options.
Loads the network from the specified path.
Returns the momentum variable for the current optimizer.
Updates the learning rate and momentum variables.
Computes the F1 score of the true and false positives.
Process a single word and return it as a tuple.
Creates a variational dropout.
Builds the LSTM model.
Builds the basic LSTM network.
Train the model on a batch of data.
Predict on a batch of data.
Given a list of tokens, make a bucketed vector of word indices.
Given a list of tags, make a bucket_length vector containing the indices of the tags.
BLEU advanced BLEU score.
Verifies that the given URL is a valid SC URL.
Extract certificates from a PEM file.
Verifies the signature on the request body.
Given a URL to a certificate, verify it against that certificate.
Returns the JSON representation of the controls.
Returns a list of ms_bot_framework objects.
Returns a list of telegrams.
Returns a list of ALEXA encoded controls.
Computes the accuracy of the prediction.
Round accuracy.
Reads the data from the given path.
Create an Agent that responds to the Hello Bot API.
Convert x into one-hot numpy array.
Takes a list of key-value pairs and returns a dictionary with the values rounded to the
Loads the current state of the TensorFlow model from disk.
Saves the current state of the model to disk.
Get the training optimizer.
Performs a search for word in the trie.
Start the timer.
Handle a request and return the response.
Performs an act on the given utterance.
Generate the response dictionary based on the template.
Handle an incoming intent.
Handle a launch request.
Handles unsupported requests.
Print pretty representation of the graph.
Computes the PPL loss from the average losses.
Build a chainer model from a configuration dictionary.
Interact with a model.
Run the model on a stream.
Reads an input file and returns a list of sentences.
Import a function from its string representation.
Get metric function by name.
Convert a string label to the corresponding decay type.
Find the best value given the values and losses.
Encode a list of tokens.
Read requirements from requirements.txt.
sklearn's log loss function.
Print details of a dictionary.
Builds and returns an ecommerce agent.
Main entry point for the MS Bot framework server.
Download a file from a URL.
Untar a tar file into a folder.
Recursively updates an editable dictionary with the contents of an editing dictionary.
Set the MD5 of a URL.
Set a query parameter in a URL.
Returns the ALEXA representation of the document.
Return the JSON representation of the control.
Returns a dictionary of card action to be sent to the Bot Framework.
Return the JSON representation of the control.
Returns the ms_bot_framework representation of the rich card.
Computes the F1 score of the squad V2.
Calculates the recall at a given k-th order.
Check if GPUs are available.
Recursively parse a config property.
Parses the given configuration file.
Expands the given path by its expanduser and resolves it.
Continually process requests.
Delete a conversation by key.
Refreshes the list of valid certificates.
Verify a signed request.
Handles an ALEXA request.
Import class from string.
Returns the model class corresponding to the given name.
Get the regularization path of a model.
Make a GLM model from a model and a dictionary of coefficients.
Create a cluster object from a list of key-value pairs.
Shutdown the H2O instance.
Check if the server is running.
Return a list of all jobs.
Returns a list of all timezones.
Copy properties from another H2OCluster object to this one.
Teardown a box after a timeout.
Get a summary of a column for a given key.
Delete a frame from a key.
Get a list of model builders.
Use this method to validate the parameters of a given model.
Compute model metrics for a given frame.
Delete a model by key.
Run instances on EC2.
Terminate instances in a region.
Stop one or more instances.
Start the given instances in the given region.
Reboot one or more instances.
Wait for all the given ips to be ssh-live.
Get the full name of a function.
Get the signature of a function as a string.
Wrap all words in text at the specified number of spaces.
Wait for the job to finish and resolve it.
Trains the model with the given parameters.
Get the parameters of this estimator.
Signal handler for SIGTERM.
Delete the output directory.
Remove a sandbox directory.
Scrape the port number from the stdout.
Scrape cloud size from stdout.
Stop the child process.
Stop all the nodes and client nodes.
Get the IP address of the node.
Get the port number of the node.
Determine the vector size based on the pre-trained model.
Compute the H2O mean absolute error.
Compute the H2O mean squared error.
Computes the median absolute error of the absolute difference between the predicted and actual data.
Computes the explanation of the variance of the h2o data.
Fail if var does not have the expected type.
Assert that v matches the given regular expression.
Fail if v does not satisfy cond.
Check that var is of type vtype.
Get a human-readable name for a type.
Check if the given variable is valid.
Check if the given variable is valid.
Get the current configuration.
Reads the configuration from the candidate log files.
Return a list of candidate log files.
Store the model's progress.
Recalculate the model parameters at a given time.
Estimate the completion time for the current progress.
Guess next poll interval based on current progress.
Compute the progress at a given time.
Get the time at which the progress is to be displayed.
Draws the given text to stdout.
Recompute widget sizes.
Get the size of the terminal.
Set the encoding to use for bar charts.
Fit the expression to the given frame.
Redraw the frame from the cache.
Return the type of a column.
Print a summary of the table.
Print a summary of the table.
Returns a DataFrame with the first nrows and ncols rows and cols rows and cols
Returns the multiplication of the current frame and the given matrix.
Return a list of all levels of the DataFrame.
Returns the number of levels in the tree.
Set the level of the expression.
Set the levels of the frame.
Rename columns in the table.
Set the names of the columns.
Set the name of a column.
Check if item is contained in this frame.
Return a new frame where each row is a column of the K-fold matrix.
Returns the stratified k-fold column of the current frame.
Prints the structure of the matrix.
Pop a column from the end of the table.
Concatenate a sequence of frames.
Binds data to this frame.
Returns a new frame bound to the current frame.
Groups the elements by a given criterion.
Fill missing values with NaN values.
Returns the relevel of the frame.
Insert missing values at a fraction of the time.
Converts the expression into a factor.
Split this table into rows based on a pattern.
Return a new DataFrame with all rows and columns removed.
Return an expression that computes the Shannon entropy.
Return the number of valid substrings.
Return the table of the DataFrame.
Return a new expression that matches a substring of the current expression.
Return an upper bound expression.
Return a new DataFrame with rows whose naomial value is 0.
Returns the first row of the difflag of this frame.
Return an expression that indicates whether or not this column is missing.
Return an expression that specifies the minute of the time frame.
Return a new DataFrame with only the rows in this DataFrame.
Apply a function to this frame.
Parse text into a Python code object.
Parses a python file into a Python code object.
Moves the cursor to a new location.
Unparses the current document.
List of centers of the grid.
Centers of the standard deviation.
Send an API request to the given endpoint.
Check that the version of the cluster is correct.
Performs a lazy import of the given path.
Parse a frame from a raw dict.
Return a deep copy of the given H2OFrame.
Get a model from the API.
Get a grid from H2O.
Get the frame with the given ID.
Download a model's POJO to a local file.
Download a CSV file from H2O.
Run a demo function.
Loads the dataset at the specified relative path.
Computes the metrics of the predicted and actual DataFrames.
Puts the key for a file.
Check that the frame id is valid.
Returns a human-readable string representation of a number of bytes.
Normalize a slice so that it has the given total range.
Check if a slice is normalized.
Wait for the task to finish.
Calculate the deep features for each model.
Print a summary of all models.
Prints the model to the screen.
Returns a list of hyperparameter values for the specified hyperparameter.
Returns a dictionary with hyperparameter names as keys and their value as values.
Returns the archetypes of the test data frame.
Screeplot of the model.
Translate a name to something more readable.
Dedent a string at the given position.
Extracts the Java code from the given Java log text.
Closes the session if it has been created.
Return the session ID of the current user.
Starts logging to the given destination.
Prepare data payload to be sent to the server.
Prepare a dictionary of file payloads.
Log start of a transaction.
Log the end of a transaction.
Logs a message to the logging destination.
Prints a message if verbose mode is on.
Get the leaderboard for a project using the AutoML API.
Download a pojo file from the leader.
Download a mojo file from the leader's home directory.
Computes the mean and standard deviations of the data.
Scales means and stds.
Applies the inverse transform to the data.
Extract true string from string_content.
Attempts to find the node name in the given function list.
Attempts to find the g_build_timeout line.
Finds a build failure.
Find the build id for a given build id.
Extracts the url of the Jenkins build and stores it in global variables.
Grabs a message from the java file.
Saves the dictionary of failed tests to a pickle file.
Writes the summary file to disk.
Write the content of file2read to filehandle.
Writes a Java message to a file.
load messages from Java to ignore.
Normalize an enum constant.
Find synonyms of a word.
Polls the status of the job.
Saves the current object to a POJO file.
Fits the model to the given frame Parameters ---------- fr : h2oframe : h2
Return a dictionary of default parameters.
Get the actual parameters of the command.
Returns the deep features of the test data frame with the given layer.
Returns the scoring history as a pandas DataFrame.
Show information about the model.
Returns a pandas dataframe of the variance of the model.
Get the degree of freedom of the model.
Return the coefficients of the model.
Download a POJO from the H2O repository.
Downloads a mojo file from H2O.
Save the model details to disk.
Check that the target arrays are the same.
Return the cross-validation models as a list of models.
Wait for a keypress.
Return the table as a pandas dataframe.
Print the table to the screen.
Searches for a jar file in the jar paths.
Yields the paths to the jars.
CSV writer for dictionaries.
Convert a directory path to a URI.
Discovers all the modules under the root path.
Writes the API documentation to the specified output directory.
Convert the table to a list of integers.
load message dictionary from file.
Add a new message to the dictionary.
Saves the current Java message dictionary to a file.
Print a dictionary of Java messages.
Parse the command line arguments.
Print a usage message and exit.
Locate all files in a directory.
Find the magic number in a file.
This is the main entry point of the script.
Applies the transformation to the given data.
Summarizes all failed runs in the test directory.
This function extracts the test names from the summary file and saves the results to a csv file
Plot the metric.
Check if the H2O builder is available.
Remove data older than ``monthToKeep`` months.
Return a dictionary mapping endpoint names to a list of endpoint objects.
Update the site forward.
Return data in JSON format.
Comment a user.
Get credentials from the secret file.
Like the given user. :param user_id: User id :param amount: Amount
Like the given hashtag.
Check if user is not a bot.
Read a list from a file.
Schedules the message to be sent at the given time.
Defers the message.
Guess the service info from the spec path.
Returns the URI for the given request.
Get a connection from the request.
Performs the actual request.
Return the authorization server for this request.
Validate the request URI.
Get the CLI profile object.
Open a URL using the specified method.
Set the timeout for this request.
Set the value of a request header.
Get all response headers.
Send a request to the server.
Get the status of the request.
Get the status of the request..
Return the response body of the request.
Set the client certificate for this request.
Send a PUT request to the server.
Sets the value of the given request header.
Send a request to the server.
Get the response from the server.
Get a readable ID from an id name.
Get the serialization name for a given element name.
Get the properties of an entry.
Get the children of a node based on a path.
Find the namespaces from the child node.
convert xml string to service bus namespace.
Parse a service bus region from an XML description.
Parses an availability response from a namespace availability document.
Converts a XML string to a Metrics object.
Update a knowledgebase.
Build a package from a PR number.
Replace a word.
Returns the properties of the specified storage account.
Returns the storage account keys for the specified service.
Regenerates the keys for the specified storage account.
Deletes the storage account for the given service.
Checks the availability of the specified storage account name.
Returns the properties of the specified hosted service.
Deletes the specified service from this service group.
Deletes the specified deployment.
Changes the deployment of a production from one deployment to another.
Updates the status of the specified deployment.
Walks an upgrade domain. :param service_name: The name of the service :param
Reboots a role instance.
Deletes one or more role instances from a deployment.
Checks whether the service with the given name is available for subscription.
Returns a list of certificates for the specified service.
Retrieves the certificate for a service.
Adds a certificate to the service.
Deletes a certificate for a service.
Retrieves the management certificate for the subscription.
Adds a management certificate to a subscription.
Deletes the management certificate associated with the specified thumbprint.
Retrieves the properties of the specified affinity group.
Creates an affinity group for this subscription.
Deletes the specified affinity group from this subscription.
Fetches a list of all subscriptions.
Deletes the reserved IP address for the given VM.
Associates a reserved IP address to a service in a deployment.
Disassociates a reserved IP address from a service.
Returns the reserved IP address of the specified VM.
Returns the role for the given name in the given deployment.
Deletes the role with the given name from the given deployment.
Starts a role instance. :param service_name: The name of the role :param
Starts multiple roles for a deployment. :param service_name: The name of the service
Restarts the role instance with the given name in the given deployment.
Adds a DNS server to a deployment.
Updates the specified DNS server for the service in the specified deployment.
Deletes the specified DNS server from the specified service and deployment.
Returns a list of resource extension versions for the given extension.
Unreplicates the VM image with the given name.
Shares the specified virtual machine image with the specified permission.
Deletes the VM image with the given name.
Returns a list of VM images for a given location, publisher and category.
Deletes an OS image. :param str image_name: The name of the image to
Returns the data disk for the specified LUN in the specified service.
Deletes a data disk for a role.
Updates an existing disk. :param str disk_name: The name of the disk :type
Deletes the specified disk. :param str disk_name: The name of the disk :
Builds the receiver object.
Create a service object from a connection string.
Return a list of subscription clients for the given topic.
Parse a response for an asynchronous operation.
Perform a GET request.
Perform an HTTP PUT request.
Returns the status of the operation for the given request.
Add the management header to the request.
Build a package for Travis.
Returns a list of all regions.
Returns a list of all registered namespaces.
Returns the namespace for the given service-bus name.
Creates a new namespace in the specified region.
Deletes the specified namespace.
Checks whether the specified namespace is available for use by this SAS Logical Interconnect.
Returns a list of all the topics with the given name.
Get a list of all notification hubs.
Returns a list of all relays with the given name.
Returns a list of rollups for the specified metric on the specified queue.
Returns a list of rollups for the specified metric on the specified topic.
Get a list of rollups for a notification hub.
Returns a list of metric rollups for a relay.
Create an extended environment.
Create a virtual environment with pip installed.
Creates a new SQL Server.
Sets the administrator password for a server.
Returns a list of the quotas for the specified server.
Deletes the specified firewall rule.
Returns a list of firewall rules for the server with the given name.
Returns a list of the server's service objectives.
Delete a database. :param server_name: Server name :param name: Database name :
Lists all databases with the given name.
Get the current session state.
Set the state of a running session.
Validate a challenge string.
Return an error handler based on the given error.
Creates a queue with the given name.
Deletes the specified queue.
Returns the details of the specified queue.
Creates a new topic. :param str topic_name: The name of the topic to create
Returns the details of the specified topic.
Creates a new rule for a subscription.
Returns the specified rule for the specified topic and subscription.
Returns a list of all rules for the specified topic and subscription.
Creates a subscription for the specified topic and subscription name.
Returns the subscription with the given name for the given topic.
Returns a list of all subscriptions for the specified topic.
Sends a message to the specified topic.
Unlocks the specified subscription message.
Sends a batch of messages to a queue.
Unlocks the specified message in the specified queue.
Receive a message from a queue.
Receive a subscription message :param topic_name: topic name :param subscription_name: subscription
Creates a new event hub. :param hub_name: The hub name :type hub_
Updates the specified event hub. :param hub_name: The hub name :type hub_
Returns the event hub with the given name.
Sends an event to the specified hub.
Add the service bus header to the request.
Get the authorization header for the request.
Returns True if the token is expired.
Get a new access token.
Update the request URI with the query parameters.
Delete the message from the broker.
Unlocks the message.
Renew the lock on the broker.
Add properties to the request headers.
Return the batch body as a dict.
General error handler.
Handles redirects.
Set the profile to use. :param profile: The profile to use :type profile: str
Delete queue with name queue_name from service bus.
Delete a topic from the service bus.
Create a new Connection object from a connection string.
Get the properties of an Azure resource.
Returns True if the lock has expired.
Helper function to handle the output queue.
The thread handler for the task collection thread.
Builds a config dictionary from a config dictionary.
Create a message object from a response.
Convert an etree element to a rule object.
Convert an etree element to a Queue object.
Convert an etree element to a topic object.
Convert an etree element to a subscription object.
Parse a list of enum results.
Get the properties of an entry from an etree element.
Return a list of queue clients.
Return a list of topic clients for this service.
Get details about a website.
Deletes a website in a webspace.
Updates the specified website in the specified webspace.
Restarts a website in a webspace. :param webspace_name: webspace
Retrieves historical usage metrics for a website.
Get metric definitions for a website.
Get the publish profile xml for a website.
Get the publish profile for a website.
Creates a new cloud service.
Checks the name of a job collection for the given cloud service.
Returns the job collection with the given ID.
Cancel scheduled messages for a given sequence numbers.
Reconnect to the server.
Writes a certificate from a publish settings file.
Load cookies from cache.
Get the width of a terminal.
Get the cut prefix of a string.
Print a message to stderr.
Format file size as a human readable string.
Format the elapsed time in a human readable format.
Create a status line in the terminal.
Print a progress bar for the given iterator.
Return a list of segment numbers for this segment.
Return a generator of all segments in this representation.
Wait for a given amount of time.
Put a new segment into the pool.
Put a value into a queue, blocking until the queue is empty.
Make a PV access token from a PV.
Extracts the nonce from the given http result.
Find the vpid from the given url.
Parse JSON data.
Parse an XML string into an ElementTree.
Parse a query string as a dictionary.
Search for a key in a dict recursively.
Iterates over all tags with the given tag name.
Determine the JSON encoding of a sample.
Parse response as JSON.
Parse an XML response.
Parse a list of cookies and store them in the Cookies object.
Parses a list of headers into the message.
Parse query parameters from cookies.
Return the formatted message.
Make a record for the logging system.
Attempts to log in with the given email and password.
Load a plugin by name.
Update a query string dictionary.
Iterate over chunks of audio data.
Yields all Require objects of the given name.
Check if file exists and return its contents.
Create file output object.
Create an HTTP server.
Iterate over HTTP requests.
Output a stream through an external player.
Open a stream for reading.
Attempt to open and read a stream.
Read data from stream and write to output.
Handle the output of a stream.
Fetch streams from the given plugin.
Fetch streams from the given plugin, retrying up to the given number of times.
Given a dictionary of streams and a stream name, return the name of the stream.
Print the list of available plugins.
Authenticate using Twitter OAuth.
Load plugins from directories.
Setup the http session.
Load plugins from plugins_dir if it exists.
Log the current version of requests.
Extract stream id from text.
Extract streams from text.
Get the value of an option.
Set an option for a plugin.
Get an option from a plugin.
Resolve the given URL using the registered plugins.
Load plugins from path.
Converts a string representation of a number of hours, minutes, seconds into an integer.
Find the URL of the player.
Parse m3u8 data.
Return the name of a supported player.
Extract stream id from html.
Extract stream info from html.
Logs the user in and sets the session attributes.
Apply a function to a given key.
Make an API call to the Crunch API.
Starts a new session.
Get information about a media.
Create the Crispy API object.
Return a string representation of a character.
Read n bytes from the stream.
Return the value of the instruction.
Return an explanation for the error.
Set the decode table and switch to prefix mode.
Set the length table and switch to prefix mode.
Read a tuple from the stream.
Return an explanation for the bit at the given index.
Return the value at the given index.
Return the span of the value at index.
Return the value of the bit at index.
Returns the mnemonic at the given index.
Return the mnemonic at the given index.
Compile the actions table into a list of actions.
Implement the action command.
Return a string of hexadecimal data from the stream at the given position.
Returns the length of the metablock.
Check if stream is uncompressed.
Sets the block type for the given kind.
Modified version of numpy.imagetf.
Reads a prefix array from the file.
Decorator to mark function as hidden.
Add a pair of virtual columns perpendicular to the current mesh.
Create an instance of the vaex app.
Open multiple files in a single dataframe.
Create an astropy.astropy.Table object from a single sample.
Create a dataset from an astropy table.
Create an instance of the class from scalars.
Read a DataFrame from a CSV file or buffer.
Return a server rest object for the given url.
Calculates the Chebyshev kernel density estimation Parameters ---------- dim : int
Concatenate DataFrames.
Return a range of values from start to stop with a given step.
Opens a dataset and returns it.
Evaluate the expression in the dataset.
Returns the set of variables that depend on this variable.
Sort the list of pairs.
Wait for the plot to finish.
Open a document on the operating system.
A context manager for writing to a file.
Split masked arrays into separate arrays and combine masks.
Calculate the arithmetic mean of a value expression.
Plots a 2D grid of data.
Plot a 3D volume.
Get the data type of an expression.
Returns the private directory for this VM.
Remove the virtual meta directory.
Write the virtual meta data to disk.
Write metadata to disk.
Sets the variable with the given name to the given value.
Evaluate a variable.
Evaluates a selection mask.
Convert the table to a dictionary.
Create a copy of the DataFrame.
Converts the dataframe to a Arrow table.
Convert to an astropy.table.Table.
Add a column to the DataFrame.
Renames a column in the table.
Add virtual columns from cartesian to Cartesian coordinates.
Add virtual columns from cartesian coordinates to the reference frame.
Add virtual columns polar velocities to the cartesian basis.
Adds a virtual columns rotation to the equation.
Add virtual columns from spherical coordinates.
Add virtual columns from cartesian to spherical coordinates.
Adds a virtual column to the model.
Deletes the virtual column with the given name.
Adds a variable to the model.
Deletes the variable with the given name.
Returns the last n elements of the sequence.
Print the head and tail of the table.
Concatenates the elements i1 and i2 into a single table.
Sets the current row of the list.
Trim the columns to match the index range.
Take a subset of columns.
Extract only the parts of the sequence that are not filtered.
Undoes the specified selection.
Redo a single selection.
Check if a selection can be Redoed.
Selects a rectangle from the chart.
Selects a circle at the given coordinates.
Internal helper to create a new selection.
Finds a valid name for the given initial_name.
Return a graphviz representation of the graph.
Assign one or more labels to a column.
Ordinal encode a column in the DataFrame.
Returns a datas object with the datas as attributes.
Return the length of the array.
Horizontally stack two DataFrames.
Concatenates two DataFrames.
Add a new column to the dataframe.
Decorator to add a function to a dataframe.
Fill missing values with value.
Try to convert an array to a string if possible.
Convert to a numpy.recarray.
Write properties to file.
Write comment to file.
Writes a property to the given file handler.
Yield lines of newlines separated by newlines.
Show the current sys.version and sys.modules versions.
Rename a keyword.
Set the FFT library.
Uses librosa to track the beats in a file.
Adjusts the tuning of an audio file.
Compute Mel from Hz frequencies.
Convert mel to heterozygous frequency domain.
Returns an array of frequencies.
Internal function to filter a TimeSeries using constant FFT.
Trims the stack of cqt_resp to n_bins rows.
Calculate the response value of a CQT quantum process.
Returns the number of samples that should be downsampled near the given cutoff.
Perform an early downsampling of the signal.
Generate a transition matrix with uniform weighting.
Sets the current image on the given axes.
Checks that the axes argument is not None.
Internal function to scale axes.
Computes the homogeneous Fourier coefficients for the current coordinate system.
Compute the Mel-Hz basis for the given number of frequencies.
Calculate cqt frequencies at a given frequency range in Hz.
Return an array of chroma coordinates.
Calculate the time coordinate for each frame.
Compute the time-stretch of a time series.
Uses HPSS to track and extract beat times from an input file.
Internal function used to filter an N-D array using nearest neighbour filters.
Calculate the bandwidth of a window.
Fill a window with samples from a square sampling window.
Computes the Jaccard similarity between two ints.
Returns the index of the candidate that overlaps the query interval.
Match two sets of intervals.
Load an audio file into a numpy array.
Convert audio data to mono.
Returns a set of all files with the given extensions in the given directory.
Demonstration of time-stretching.
Parse command line arguments.
Demonstration of HPSS.
Calculate the beat tracker for the given onset_envelope.
Calculate the local score of a track given its onset envelope and period.
Calculate the beat track based on the local score and the tightness.
Returns the index of the last beat in the cumscore.
Detect onset times using librosa.
Validates that x is an integer and casts to int.
Reads an image from the device.
Get an image from the buffer.
Writes the image to a directory of frame files.
Runs a function with a series of tasks and prints a progress bar.
Flip an image.
Rotates an image by a given angle.
Clip bbox to img_shape.
Scale a bounding box by a factor.
Pads an image with an optional value.
Apply an impad to the given image with the given padding values.
Scale a size to a given scale.
Resizes an image using OpenCV.
Resize an image like another.
Register a handler for a list of file formats.
Returns the priority value for a given priority value.
Dequantize an array to a given number of levels.
Display an image using OpenCV.
Dequantize a flow matrix.
Load a checkpoint from a file.
Convert weights to CPU.
Save model state to checkpoint file.
Initialize an optimizer for the model.
Initialize and return a logger.
Get the current learning rate of the optimizer.
Registers a new hook with the given priority.
Run a batch of data loaders in parallel.
Register the hooks for training the model.
Cut a video file using the given codecs.
Concatenate multiple video files.
Read a list of items from a file.
Read a mapping from a file.
3x3 convolution on a set of 3D planes Parameters ---------- in_planes
Wrapper around cv2.imread.
Create an image from byte string.
Write image to file.
Converts a grayscale image to grayscale.
convert from grayscale to bgr.
Performs an iterative typecast on an iterable.
Check if a sequence is of a certain type.
Slice a list of lists of the given length.
Calculate the average of the values in the history.
Recursively scatter a tensor or list of tensors.
Return the value of a color.
Return the number of seconds since timer_id was last checked.
Start the timer.
Returns the number of seconds since the timer started running.
Return the amount of time since the last call was made.
Display a flow in an interactive window.
Make a color wheel from a set of bins.
Calculate the accuracy of the model Parameters ---------- output : torch.Tensor output target : torch.Tensor
Create a scatter plot of inputs and kwargs.
Make the request and return the response.
Get the JSON representation of the message.
Return the contents of the message as text.
Handle the callback from AWS.
Send multiple requests.
Make an HTTP request.
Start the master process.
Normalizes a task in version 2.x.
Return the name of the wheel distribution.
Return the archive basename.
Add additional requirements to the metadata file.
Creates an activity with the given text.
Create an activity with suggested actions.
Creates an activity that displays an attachment.
Creates an activity that lists the given attachments.
Create an attachment with the given content url.
Set the telemetry client.
Read a set of keys from the server.
Writes changes to the store.
Deletes the document with the given keys.
Create a StoreItem object from a result dictionary.
Create a dictionary from the given storeitem.
Sanitizes the given key for use in the database.
Create database and container.
Get or create the database with the given id.
Get or create a container in the database.
Fill the event with information from the query results.
Return a conversation reference for the given activity.
Returns the name of the step at the given index.
Check if a channel supports suggested actions.
Check if a channel supports card actions.
Returns the channel_id of the activity.
Check if the given token is valid for the emulator.
Creates an attachment for a hero card.
Set the classical register to the given value.
Return a copy of the object.
Return a QASMIF string.
Returns the QASM code for the method.
Runs the pass graph on the given circuit.
Performs the pass on the given dag.
Returns a list of dumps of all passes.
Dumps all passes to a dictionary.
Create a FlowController based on the passed and options.
add a u_base function to the model Parameters ---------- theta : float The angle of the base
Get the parameters for a single gate.
Return the rotation matrix of a single gate.
Converts a circuit into a DAGCircuit.
Fit function to an exponential approximation.
Oscillator fitting function.
Plots the covariance of the data.
Calculate the shape of the RB data.
Plot regression data.
Compose a 3x3 rotation matrix.
Convert from YYZ to ZYZ.
Validate input quantum state.
Trim background from an image.
Get the span of a gate instruction.
Computes the optimal layout for the given DAG.
Add a qubit barrier to the circuit.
Process a bit ID node.
Process a single gate.
Process a CNOT node.
Process a measure node.
Processes if nodes.
Create a DAG operation.
Return the duration of the given channels.
Return the start time for the given channels.
Return the stop time for one or more channels.
Return an iterable of instructions from this scheduler and its children.
Dump additional data from original_data into valid_data.
Load additional data from the original data.
Validates an instance against its schema.
Return a dict representation of the model.
Create a model instance from a dictionary.
Quantum Fourier transform.
Chops the real and imaginary parts of an array.
Compute the outer product of two vectors.
Compute the concurrence of a state matrix.
Calculates the Shannon entropy of a state.
Calculate the mutual information of a state.
Compute the entanglement of formation of a state.
Eof-qubit concurrence matrix.
Return a copy of the given schedule with its instructions flattened.
Shift a schedule to a different time.
Insert a new schedule component at the given time.
Append a child schedule to the parent.
add a U3 gate to the problem.
Return the current status of the backend.
Start the timer.
Returns a string with the time remaining in seconds.
Disassemble a QObject.
Compute hamming distance between two strings.
Create a quaternion from a rotation angle and an axis.
Create a quaternion from an array of euler angles.
Normalizes the quaternion data.
Converts the quaternion to a rotation matrix.
Convert to zyz basis for the current transformation matrix.
Takes the data and returns a dictionary with labels as keys and their values as values.
Check the type of the value.
Check that the given range is valid.
Check if matrix is a square matrix.
Check that `mat` is a diagonal matrix.
Return True if op is a symmetric matrix.
Check that `mat` is a Hermitian matrix.
Returns True if the matrix is a positive semidefinite matrix.
Check if matrix is an identity matrix.
Check that `mat` is a unitary matrix.
Convert data to Choi matrix.
Convert data to superoperator.
Convert the data to a Kraus operator.
Convert the data from Choi to Chi.
Convert the data from nqubit operators to pmf.
Convert a Kraus operator to a Sandia-Stinespring operator.
Convert the data to an operator.
Convert data from a QUBO operator to a PTM operator.
Convert a spherical representation to an operator.
Reshuffle data with Choi.
Reshuffle data with Choi.
Compute Choi matrix from Kraus decomposition.
Compute the Kraus-Kraus matrix from Choi matrix.
Convert the stinespring data to the kraus matrix Parameters ---------- data : list of
Convert a spherical harmonic to Choi matrix Parameters ---------- data : np.ndarray
Convert the Kraus operators to stinespring operators.
Convert the Kraus operator to the superoperator.
Convert chi-to-choi data to Choi.
Convert Choi data to chi.
r"""Reravel the input matrices.
Transform data from a Pauli basis.
Check that the n-qubit dimension is correct.
Hides the tick lines and labels of the axis.
Set the label convention for the plot.
Clears all points, vectors, and annotations.
Add a vector or list of vectors to the mesh.
Renders the graph.
Plots the front of the sphere.
Renders the figure and displays it.
Return the top layer as a string.
Return a string with the middle part of the phrase.
Return the formatted bot string.
Return the length of the message.
Returns a list of parameter names for the label of an instruction.
Returns the label for a box instruction.
Return a LaTeX representation of the receiver.
Filter deprecation warnings for Inmarshmallow 3.
Returns a dictionary of information about the local hardware.
Check if a connection exists for the given hostname and port.
Helper function for checking the status of a job variable.
Create a constant time series. Parameters ---------- times : np.ndarray : np.ndarray
Calculates a square waveform given a set of times, amplitude, period and phase
Calculates the triangle of a waveform. Parameters ---------- times : np.ndarray TimeSeries
Return cosine of a complex number.
Computes the derivative of a Gaussian with respect to a center.
Performs a Gaussian square approximation to an array of times.
Creates a pass manager with a default layout.
Creates a pass manager with a list of unrolled gates and a list of unrolled
Checks whether the given register is in the classical or quantitative registers.
Returns a copy of this circular with its mirrored coordinates.
Returns the inverse of the circular.
Append an instruction to the symbol.
Check that the number of qubits in the list is equal.
Check the validity of a set of qubits.
Check the validity of a list of classical registers.
Check that QREGs and CREGs are compatible.
Represent the binary quadratic model as Assembler.
Returns the number of gates in this instruction.
Width of the binary quadratic model.
Count the number of instructions in this instruction.
Creates a copy of this circuit with the given parameters bound to the values in ``value_dict
Binds a parameter to a value.
Maps free qubits to qubits based on the given coupling map.
Calculates the distance between the layout and the gates.
Return the score of a step.
Copy circuit metadata from the source circuit to the target circuit.
Transforms a gate for a layout.
Return a list of operations to swap a qubit register from an edge.
Runs the circuit on the input DAG.
Adds a qubit to the computation graph.
Add an edge to the computation graph.
Create a sub-coupling from a list of nodes.
Return the list of physical qubits.
Check if the graph is weakly connected.
Computes the distance matrix for the current graph.
Return the distance between two qubits.
add a CU1 gate to the influence map.
Causes each instruction to be the inverse of its instruction.
Executes the Q-if instructions in the program. :param qregs: Q-
Causes a classical value to be satisfiable.
Subscribe to an event.
Dispatch an event to all subscribers.
Unsubscribes a callback from an event.
Publish an event to the underlying broker.
Add a set of parameters to the circuit.
Defines the circuit.
Returns a quantum circuit with the uncomputed gates.
Computes the birch angles for a pair of complexes.
Returns a quantum circuit for multiplexing a list of angles.
Checks if the value is a virtual register.
Returns a copy of the Layout.
Combine this layout into a map from virtual indices to layout indices.
Add a CDX entry to the list.
Inserts a schedule into the list at the given starting time.
Raises an exception if the given name is already fenced.
Convert a sequence of gates and qregs to a sequence of indices.
Runs the mapper on the given dag.
Create a set of pauli of the given number of qubits.
Create a quaternion from a string label.
Initialize a quaternion from booleans.
Return the product of two Pauli numbers.
Return the operator representation of the QR Code.
Return an instruction that can be written to a circuit.
Update the z-vector.
Update self._x with new data.
Add one or more paulis to the binary quadratic model.
Delete one or more qubits from the basis.
Generate a random number of qubits.
Create a single Pauli operator from a label string.
Get the measure outcome of a qubit.
Add samples to the classical memory.
Add a classical quantum measure to the state.
Add a qasm reset to the state.
Validate that the initial state vector is valid.
Internal method to initialize the state vector.
Get the state vector.
Determine if we should perform measure sampling.
Run a single job.
Validate that the given QObject has the right number of qubits.
Ensure that the initial unitary is of the correct shape.
Initialize the unitary array.
Get the unitary of the circuit.
Run a job on the backend.
Validate that the given QObject is well-formed.
Checks if an object is a bit register.
Runs the computational graph on the given graph.
Does this interval overlap this interval?.
Shift the interval by the given time.
Shifts the time slot by the given number of seconds.
Returns the earliest start time for the given channels.
Returns the stop time for one or more channels.
Check if any of the time slots are mergeable with the given ones.
Return a new collection with the given timeslots merged.
Shifts each slot by the given time.
Report the given commit as a comment.
Visualize the state of apaulivec process.
Add a rzz gate to the gate.
Brings one target into another using the specified ctl command.
Creates the program graph for the given DAG.
Choose the next edge in the pending_program_edges list.
Returns the item with the least number of remaining qubits.
Selects the best remaining qubit in the program.
Returns a list of all compositegate instructions.
Inverts each gate in turn.
Apply the Q-if operator to the gate in-place.
Conditional reduction operator. :param classical: classical gate type :type classical: str :param val
Check if the matrix is unitary.
Returns the conjugate of each element.
Returns a transposed version of the data.
Compute the power of the matrix.
Returns the shape of the output and input arrays.
Convert an quantum circuit instruction to an operator.
Implementation of the swap_mapper_layer_update method.
Split a bitstring into a list of substrings.
Format memory at level 0.
Format memory at level 1.
Formats a list of shot memory counts into a list of hexlified bytes.
Takes a dictionary of counts and returns a dictionary of formated memory counts.
Format a state vector as a complex number.
Format a state vector matrix as a complex number.
Submits the job to the pool.
Get the status of the job.
Checks if this interval includes the given frequency.
Plots the bivariate bloch data using a matrix of states.
Apply the decomposition to a DAG.
n choose k. :param n: number of samples :param k: number of samples :
Compute lexicographical lexicographical index.
Get a list of backends with unique names.
Return the operation name.
Returns a constant sample pulse.
Returns a zero-pulse measurement.
Creates a square sample pulse.
Creates a sawtooth sample pulse.
Returns a sample pulse for a triangle.
Return a sampled cos-moment sample.
Returns a sampled sin-pulse.
Returns a sample pulse of a Gaussian function with given parameters.
Gaussian derivative of a sample pulse.
Returns a string representation of the tree.
Return an instance of backend_cls.
Remove all ops with name opname.
Adds a quantum register to the DAG.
Adds a classical register to the DAG.
Adds a wire to the graph.
Checks that the condition is valid.
Returns the number of bits in a condition.
Adds an operation node to the graph.
Apply an operation back on the circuit.
Checks that the wiremap is valid.
Maps a condition to the wire format.
Extends the classical registers and classical registers of a computational graph.
Checks that the wires in the list are valid.
Returns a two-tuple of dicts where the keys are the node name and the values are
Returns the full prediction and succuciton map for a given circuit.
Returns the topological nodes of the graph in lexicographical order.
Returns an iterator over the edges of the graph.
Get all nodes that have an operation.
Return list of nodes that are gates.
Returns nodes in the multigraph that have the given names.
Returns a list of nodes that are connected by two qubits.
Returns the list of predecessors of the given node.
Return a list of predecessors of the given node that are quantum registers.
Returns the set of ancestors of the given node.
Returns a list of successors of the given quantum node.
Removes an operator node from the circuit.
Remove all ancestors of a node.
Remove all descendants of a node.
Remove all non-ancestors of the given node.
Remove all non-descendants of a node.
Generate a sequence of dagcircuit objects for each topological op node.
Yields all layers of a multi-graph.
Returns an iterator over all nodes connected to the given wire.
Count the number of topological operations in the graph.
Returns a dictionary with the properties of this layer.
Takes a basis set and returns a tomography basis object.
Apply a Pauli-Meas-gates operation to the Qreg.
Returns the data for a circuit using the tomography.
Projector operation on a basis.
Compute the inverse of the tomogeneous linear operator.
Auxiliary function to calculate the gradient of the eigenvalues of a matrix.
Calculate the Wigner data.
Mine a gate.
Helper function to check the status of a job.
Monitor the status of a job.
Simplifies an u3 gate.
Apply this transpiler to a DAG.
A widget that shows the history of a job.
Add a 3D CUDA gate to the influence list.
Build a classical Bell circuit.
Returns the circuit to be transpiled.
Returns the currently active drive.
Returns the currently active control channel.
Return the current measurement channel.
Returns the current acquire channel.
Input state of a circumference.
Remove the logging handlers from the Qiskit logger.
Displays a state hint on the IPython notebook.
Set the input data for the parser.
Pop the current lexer from the stack.
Push a new lexer onto the stack.
Get the bound method for an instruction.
Convert acquire instruction to QObject.
Convert a frame change instruction to a QObject.
Convert a persistent value.
Convert a drive instruction to a QObject.
Convert snapshot instruction to QObject.
Updates the annotations on the Pulse object.
Convert a DAG to a QuantumCircuit.
Make a dictionary representation of the matrix observable.
Add a symbol to the symbol table.
Verify that the symbol pointed to by obj is a bit symbol.
Verify that all the nodes in the list are valid symbols.
Verify that an object is a gate.
Verify that an object is a member of the global symbol table.
Verify that all children of the given object are registered with the given registry.
Find the column in the input string that matches the given token.
Set the parse_debug flag.
Parse data and return a QASM object.
Parse the input data and return the AST.
Parses the QASM file.
Add a crz gate to the gate.
Get the state of a basis.
Compute the projected density matrix of a state.
Return the purity of a state.
Runs the gatecommutation on the given DAG.
Runs the ACE algorithm on the given DAG.
Get backend by name.
Returns the shape of the bipartite layer.
Given a list of bit labels, return a list of register names and the number of bits in
Truncate float values.
Returns a LaTeX representation of the QCircuit.
Returns the number of columns and the number of rows and columns of the image.
Get the page size of the beamer page.
Load a schema from a JSON file.
Load schemas and validators.
Return a random unitary matrix.
Generate a Ginibre matrix Parameters ---------- nrow: number of rows ncol: number
Computes a random density matrix using Gauss's random sampling.
Generate a random density matrix with bursts.
Return a list of all calls.
Compute the power of the matrix.
Compose a sub-system of this tensor with another.
Convert an quantum circuit instruction to a superoperator.
Runs the barrier on the given DAG.
Run the DAG on the input DAG.
Defines the definition of the gate.
Check the type of the given value.
Check the type of each element in the iterable.
Set the atol of the element.
Validate and set the tolerance.
Reshapes the array to match the input and output dimensions.
Returns tuple of input dimensions.
Returns tuple of output dimensions.
Returns a copy of the object.
Return the power n of the tensor.
Automatically determine dimensionality.
Deserialize the value.
Override the default serialization method to catch type errors.
Check that the value has the expected type.
Singular Value Decomposition.
Return the inverse of this snapshot.
Set the label of the object.
Return True if the gate is unitary.
Convert to an operator.
Return an instruction representing the circuit.
Initialize a Transformer from a quantum channel.
Monkey patch strptime.
Given a list of tokens, return whether they are valid or not.
Split a string into a list of tokens.
Parses a time string.
Check if a date string is applicable.
Translate a date string.
Parses a date string using a list of date formats.
Convert exception name to net number.
Convert exception parameter to HTTP value.
Compose the configuration file for the pipeline.
Get information about the current state of the simulator.
Logs stdout and stderr to the log.
Given a time string, expand it by the given multiplier.
Read configuration options from command line.
Read the cached stepperinfo object.
Write the cached options to disk.
Create a.stpd file from the load profile.
Create a schedule from a list of RPS.
Returns the rps value at a given time.
Execute a command and return its exit code.
Decodes monitoring data into a list of points.
Make the points for the given label.
Publish a new key-value pair to the server.
Count the number of matched codes in a dictionary.
Stop the feeder thread.
Reads the STPD file and feeds it to the pool.
Add user specific options.
Configures the plugin with the given options.
Collect the data from the results queue.
Notify listeners of new data.
Discover the JMeter UDP port number.
Terminates the child process.
Reads the data from a list of lines.
Creates a criterion object from a criterion string.
Get a list of hosts from a config file.
Create the startup config file.
Check if the free disk is under the limit.
Check that the memory is not beyond the limit.
Gets the right line from the widget output.
Adds a widget to the info_widgets container.
Fill a rectangle with white space.
Return the length of a string or list of strings.
Add info widget to the screen.
Make a writer request.
Load and register plugins.
Returns the last plugin that is of the given class.
Returns a list of plugins that are instances of the given plugin class.
Collect a file into the artifacts directory.
Add an artifact file.
Create a temporary file in the artifacts directory.
Load the configuration files from the given paths.
Flush the config file to disk.
Get a list of options from a section.
Find sections with the given prefix.
Decodes the chunk of stat data into an iterator of StatItem objects.
Install agents and artifact files.
Poll for collected data.
Send the collected data back to the listeners.
Detects the current configuration.
Handle data items.
Subscribe to a list of channels.
Subscribe to the channel and run the loop forever.
Closes this shapely shapefile.
Make a single request to the API.
Submit an order to be placed.
Get the position for a symbol.
Returns a list of assets.
Checks the type of a dict parameter.
Get an optional dict parameter.
Construct a logger from an event record callback.
Construct a logger from a JSON file.
Create a new Config object from a configuration file.
Returns the pipeline with the given name.
Returns a list of all pipeline definitions.
Get the next event from the queue.
Executes a pipeline through a queue.
Waits for all the processes to terminate.
Creates a field of the given type.
Builds the execution plan.
Return the solid with the given name.
Construct the list of publish comands.
Create a new release and commit it.
Print a block of text.
Download a file from S3.
Upload object to S3.
A context manager for DAGster user code execution errors.
Create a new directory and its parents if they do not exist.
A context manager that handles user code execution.
Create a context-free log for a pipeline.
True if any of the steps have a success.
True if any of the steps have been skipped.
Return a dictionary of transformed values.
Returns the data for a step failure.
Check if the given value is a valid dataset.
Check if the given value is a valid table name.
Coalesce the topological steps of an execution plan into a single step.
Returns a dictionary of connection parameters based on the settings_dict.
Get a new djongo connection.
Create a cursor. :param name: The name of the cursor :type name: str :
Closes the connection to the database.
Takes a model and a dict of model field names and returns a model instance.
Converts a list of model definitions to a list of model definitions.
Returns the form field to be used in the form.
Converts the value to a model container.
Apply the filters to a queryset.
Compute the NFPs for a uniform distribution.
Compute real-valued NFPs.
Determine the optimal number of partitions based on the counts.
Calculate the correlation coefficient.
Initializes the slots with the seed and hashvalues.
Calculates the size of the byte array that would be needed to store this PseudoMonomer
Merge another TimeSeries with this one.
Union of permutations.
Query the index for the given minimum hash value.
Compute the minimum hash value of a vector.
Remove a key from the multidict.
Count the number of states in the model.
Merges two distributions.
Clears the registers.
Calculates the Apk score.
Computes the mean of the Apk-likelihood.
Reorders the hashtables in place.
Queries the hash table for the given minimum hash value.
Closes the connection to the database.
Get user data from JWT.
Set social login state to connect.
Select a text to read from.
Parse a scoped selector.
Parse a statement.
Parse a value from the configuration.
Advances the parser to the next line.
Parses a configurable reference.
Writes the operative config to disk.
Ensures that a function is a function that can be wrapped.
Return the literal representation of the given value.
Clears the configuration.
Check if a function or class might have a parameter with the given name.
Returns the argspec for the given function.
Return a list of positional parameter names for the given function and arguments.
Parse a config file.
Parse a value from a string.
Recursively iterate over the values of a mapping or iterable.
Iterate over all configurable references in the given configuration.
Decorator to create enum constants.
Get all matches for the given partial selector.
Returns the minimal selector for the given selector.
Convert a search query to a POSIX search query.
Parses the Retry-After header of a response.
Validates that the value is valid.
Return a description of the resource as a dictionary.
Validate and set the value.
Return the thing at the given index.
Initialize with things and hosts. :param things: list of things :param hosts: list of
Sets the default headers for the response.
Make sure the host is listed in the hosts list.
Get a thing.
Handle a POST request.
Delete an action from a thing.
Start the ZeroMQ server.
Create a description for an action.
Start the task.
Mark the task as finished.
Return a description of the event.
Get the IP address of the machine.
Returns a sorted list of all IP addresses.
Sets the current value of the field.
Notify of an external update.
Return a description of this thing.
Sets the href prefix for all properties and actions.
Returns a dictionary of property descriptions.
Returns a list of descriptions of the actions.
Returns a list of event descriptions for the specified event.
Add a property to this resource.
Remove a property from the definition.
Get the value of the given property.
Returns a dictionary of property names and values.
Set the value of the given property.
Get an action by name and id.
Add an event to the list.
Add an available event.
Perform an action.
Remove an action from the container.
Add an available action.
Remove a subscriber.
Add a subscriber to the available events.
Remove an event subscriber.
Notify subscribers of a property change.
Notify all subscribers of an action.
Notify subscribers of an event.
Annotate the model with the given annotations.
Performs an UPDATE statement on the model.
Creates a new row in the database, if the conflict_target or conflict_action are set
Creates a new instance of the model and returns it.
Builds an insert compiler for the given rows.
Returns True if the field is different from the old value.
When a model is created or updated, send create or update signals.
When a model is deleted, send the delete signal.
Recursively resolves the expression and returns the result as a dictionary.
Convert to SQL. :param compiler: SQLCompiler instance :param connection: SQLConnection :return
Return a clone of this object with the given relabels.
Add join conditions to the query.
Check if the field is a hstore field.
Creates a constraint that requires a store to be created.
Renames a key in the HSTORE constraint. :param old_table_name: The
Indicates that a HSTORE constraint on a table has to be removed.
Returns the constraint name for a required constraint.
Returns the SQL to create a new index.
Get the backend class from the settings.
Prepares the database for use.
Prepare the value for the field.
Return the form returning name.
Returns the SQL to insert into the database.
Rewrite insert and update queries.
Rewrite insert and update queries.
Rewrite insert statements that do not exist.
Get the model field for the given field name.
Format the field name.
Formats a value for inserting into the database.
Creates a unique constraint for the given field in the HSTORE table.
Renames a unique constraint in the HSTORE_UNIQUE table.
Drops a unique constraint for the given field in the HSTORE table.
Returns the constraint name for a unique constraint.
Iterate over the field's uniqueness keys.
Add a condition to the query.
Returns the SQL to be used in the query.
Returns the 95th percentile confidence level of a table.
Calculates the variance of a pooled sample.
Computes the t-score between two samples.
Returns True if the difference between sample1 and sample2 is less than or equal to the threshold
Topologically sort a list of nodes.
N queens generator.
Select a random child from the unexplored list.
Make a random playout move.
Filter benchmarks to keep only benchmarks that have a version less than base_ver.
Recursively expand a benchmark name in the bench_groups dictionary.
Initialize a list of benchmarks.
Returns the domain of the current knots.
Returns a generator for all posts in the channel.
Yield post IDs from raw post data.
Get information about a user.
Fetch All Items for a given category.
Fetch entries from feed.
Setup the argument parser for the backend command.
Fetch All Items for a given category.
Returns a list of bugs for a given date.
Returns comments for the given bug_ids.
Returns the history of the bugs with the given IDs.
Returns attachments for the given bug_ids.
Fetch merge requests from GitLab.
List of merges.
Get the content of a merge.
List the versions of a merge.
Get the content of a version of a merge.
List the notes for a given item.
List the emojis for a given item.
List the emojis for a note.
Calculates the amount of time to reset the rate limit.
Fetch items from the Gitlab server.
Initializes the rate limit for a repository.
Setup the command line parser for the backend.
Fetch all items for a given category and from_date.
Return the ID of a metadata item.
Returns the number of members of a conversation.
Get information about a channel.
Get information about a user.
Setup the command line parser for the backend.
Returns the timestamp at which the metadata was updated.
Parse a buglist from a CSV file.
Parse bugs details from raw XML data.
Logs out the currently logged in user.
Return the metadata for this device.
Returns a list of bugs for a particular date range.
Returns a list of bugs.
Get the activity of a bug.
Fetch all items for a given category.
Fetch all events for a given group.
Get events for a repository.
Get comments for an event.
Fetch RRSVPs for an event.
Fetches the question from the server.
Fetch comments for a question.
Build question object from html page.
Get questions from the order api.
Get a question's html representation.
Get comments for a post.
Parse question container.
parse the number of pages in the html question.
Parses user info from update_info element.
Fetch reviews for a given category.
Returns a list of reviews.
Fetch gerrit28 reviews.
Returns the version of the gerrit server.
Get a list of reviews for a given last_item.
Get the next retrieve group item.
Execute a command from the archive.
Execute a command remotely.
Setup the command parser for the backend.
Fetch issue data by issue id.
Fetch attachments for a given issue.
Fetches issue messages for a given issue.
Get all activities for a given issue.
Fetches user data.
Get a user by name.
Returns the raw text of the issue with the given ID.
Get issue collection for a given issue.
Fetch items from the API. :param str path: Path to fetch payload :type path:
Returns a generator of all subscriptions.
Find the group id for the current group name.
Helper function to fetch data from url.
Setup the command line parser for the backend.
Find all backends for a given top-level package.
Fetch items from an archive.
Remove all classified data fields from the given item.
Parse the args and return the parsed args.
Adds the authentication arguments to the parser.
Sets the arguments for the archive command.
Sets the arguments for the output file.
Runs the fetch command.
Initialize the archive manager.
Returns the timestamp of when a metadata item was updated.
Parse an mbox file and yield messages as dicts.
Fetches and parses all messages in the given mailing_list.
Copy a mbox to a temporary path.
Validates the given message.
Convert a case dict to a message dict.
Returns a message for the given key.
Fetch items from the repository.
Parse a git log file and yield a list of commits.
Set the git path to the processed uri.
Setup the argument parser for the backend command.
Parse the stream and yield Commit objects.
Create a clone of uri in dirpath.
Count the number of objects in the repository.
Check if the repository is detached.
Update the repository.
Synchronize the local repository with remote repository.
Returns the list of commits from the unpacked file.
Update references in the repository.
Discover the refs of this repository.
Update a ref in the repository.
Execute a command in a subprocess.
Reads lines from stderr and decodes them.
Execute a command and return the output.
Returns a generator of tweets that match the query.
Setup the command line parser for the backend.
Fetch Items for a given category.
Get the hits for a given category.
Parse HITs from hit_raw.
Returns a list of hits for the given keywords.
Returns the timestamp at which the metadata was updated.
Determine the category of an item based on its metadata.
Fetch pull requests for the given date range.
Fetches repo info from the server.
Get all reactions for a given issue comment.
Return a list of users who requested the PR.
Get all the commits for a given PR number.
Get all reactions from pull review comment.
Get a user from the server.
Get a list of reactions for a given issue.
Returns a list of issues.
Returns a generator of pull requests for all issues in the repository.
Get a list of reviews for a pull request.
Get a list of commits for a pull request.
Returns a list of reactions for the review comment.
Get a user by username.
Returns a user's organizations.
Get the token's rate limit.
Get the rate limit for each token in the corpus.
Choose the best API token to use.
Check if we need to switch tokens.
Fetch and update the current rate limit.
Initializes the metadata for the archive.
Store the given data in the archive.
Retrieve a record from the archive.
Create an archive at the given path.
Verify that the archive is well-formed.
Loads the metadata from the database.
Count the number of rows in a table.
Create a new archive.
Delete an archive at the given path.
Search for archives matching the given criteria.
Search for all files in the directory.
Generate a range of months between two dates.
Remove invalid XML characters from an XML string.
Parse issues returned by the API.
Issues for a given date range.
Get information about an issue. :param issue_id: ID of the issue :type issue
Get information about a user.
Make a call to the API.
Fetch data for a dockerhub category.
Fetch items from a repository.
Returns the content of a repository.
Filters out fields that have a value of False.
Yield issues from a GitHub API response.
Returns a generator of issues from the given url starting from the given date.
Get a list of issues from a given date.
Get comments for a given issue.
Returns a list of fields for this object.
Fetch All Items for a given category.
Returns a list of builds for a job.
Parses the Questions page and yields Question objects.
Returns a generator of questions from the API starting from the given date.
Setup the command line parser for the backend.
Fetch all reviews for a given category.
Get the maximum date for a list of reviews.
Fetch all pages from revision 1.27.
Get a namespace's pages.
Get recent pages for a list of namespaces.
Parse a JSON object and return a generator of messages.
Filter a message by a list of chats.
Returns a list of updates for this list.
Fetch articles from NNTP.
Add the csrf_token key to the item.
Parses an article from a string.
Fetch data from archive or remote.
Fetch the article with the given article_id.
Fetch data from a remote method.
Fetch data from the archive.
Create a HTTP session.
Set up the rate limit handler.
Sleep for the rate limit.
Updates self.rate_limit and self.rate_reset_ts based on response.
Parse supybot log file.
Retrieves archives from supybot from a given date.
Returns a list of all archives in the supybot archive directory.
Parse supybot messages from the stream.
Fetch topics from the API.
Parses the topics page and returns a list of topics ids.
Get information about a topic.
Get information about a post.
Fetch tasks for a given category starting from a given date.
Yield tasks from a JSON string.
Parse a JSON list of users.
Yields a generator of tasks from the maniphest_tasks endpoint.
Return a list of transactions for given phids.
Get a list of users from the Phabricator.
Pass in a list of phids to retrieve.
Make a call to the API.
Return the metadata id for an item.
Parse contents summary.
Returns a generator of all the contents of a file starting from a given date.
Get historical content for a particular content id and version.
Parses the result of a measurement.
Return the capabilities url for a given service.
Read an XML document from a URL.
Read an XML document from a string.
Parses the result of the calculation.
Builds the URL for the given path.
Construct a schema from a list of elements.
Get the URL to describe a feature type.
Execute a complex input with a reference.
Fetches a list of movie resources.
Fetches a list of TV episodes for a project.
Gets information about the project.
Gets the list of alternative titles for a project.
Returns a list of credits for this account.
Gets the list of external Ids for a project.
Returns a list of keywords associated with the project.
Gets the recommendations for a project.
Gets the release dates for a project.
Gets the releases for a project.
Fetches all translations for a project.
Get a listing of movies similar to this one.
Gets the reviews for a project.
Gets the upcoming events for a project.
Returns a full representation of the currently playing game.
Gets the most popular topics for a project.
Gets the top rated topics for a project.
Fetches account states for a project.
Creates a new rating for the project.
Gets the credits for a movie.
Gets the credits for a TV series.
Retrieves information about the project. :param kwargs: The keyword arguments for the operation :type kwargs
Fetches a list of alerts.
Retrieves information about the current session.
Fetches a list of movies from the watchlist.
Creates a new token.
Validates a token with a login.
Creates a new session.
Creates a new guest session.
Returns a list of movies rated by the authenticated user.
Gets the current status of the item.
Creates a new list.
Removes an item from the collection.
Clears the list for the project.
Gets the list of rating for a content.
Gets a list of similar search results.
Gets the on the air content for a project.
Retrieves information about a series.
Returns a list of credits for this season.
Fetches a list of external ids for a season.
Retrieves information about the episode.
Returns a list of credits for this series.
Gets the list of external series ids associated with the season number and episode number.
Set attributes to values from a response.
Fetches a collection of resources.
Fetches information for a specific company.
Retrieves a specific keyword. :param kwargs: The keyword parameters for the keyword :type kwargs:
Gets a paginated list of resources from the server.
Normalize a string.
Given a list of reference n-grams, return a tuple of n-grams and
Counts n-grams in `ref` and returns the set of n-grams
Exponential random variable.
Align texts from one set of source blocks to another.
Get all descriptors in a module.
Register descriptors from JSON.
Register a descriptor with the dispatcher.
Echo a string to the terminal.
Return whether the given descriptor is a class or abstract class.
Returns a JSON-compatible representation of the object.
Return the 3D coordinate of the mesh.
Calculate the atomic separation angle of a sphere at index i.
Get the surface area of the current mesh.
Create a Voronoi instance from a molecule.
Create a descriptor from a JSON object.
Fill missing values with a given value.
Return a copy with all missing values removed.
Return a generator yielding key-value pairs.
Return a dictionary representation of the object.
Returns the name of the enum value.
Print a progress message to stderr.
Print a message to stdout.
Raise a runtime error with the given message and optional traceback.
Create a temporary file for a given target.
Set a temporary file.
Delete all temporary files.
Return a path that is fixed.
Get the list of legal parameters for a given method.
Merge parameters from self.opt into kargs.
Add extra command line options to a command line parser.
Terminate the worker thread.
Add a task to the scheduler.
Wait for all workers to finish.
Record that all tasks have been processed.
Get s3 keys from environment variables.
Get S3 keys from command line options.
Get keys from s3 config.
Set up S3 keys.
Connect to S3.
Walk a directory and return a list of all files under it.
Expand S3 source paths.
Upload a single file to S3.
Copy a list of files into a directory.
Create a bucket on S3.
Update a user's privileges.
Prints the contents of a source to stdout.
Get a single file from S3.
Get a list of files from S3.
Copy a single file to S3.
Copy a list of S3 files to a directory.
Delete all empty files from S3.
Walk a directory and return a list of relative paths.
Copies or uploads files from source to target.
Calculate the MD5 hash of a file.
Returns the md5 of the file.
Create the target directory if it doesn't exist.
Check if the remote key matches the local md5.
Return True if the path matches the filter path.
Recursively walk S3 bucket.
Add object to result only if it is not modified before or after the object.
Get file privilege.
Look up an object in S3.
Read a chunk of data from a file.
Verifies that the downloaded file has the correct size.
Write a chunk of data to a file.
Runs the specified command.
Validates arguments according to the specified format.
List S3 buckets and walk.
Create a bucket on S3.
Uploads files to S3.
Get S3 bucket handler.
Output the contents of one or more S3 sources.
Handler for dsync commands.
Copy files from one location to another.
Handles moving files from one location to another.
Delete files from S3.
Print size of files in S3.
Total size of objects in S3.
Match a date value.
Match the time value.
Match the delta value.
Check if value is a valid JSON object.
Get a session from the hub.
Push data to client.
Encrypts the token and returns the ciphertext.
Called when an exception is raised during the execution of a job.
Ensure the log handler is set.
Get the most recent request from the API.
Log a message and return it. :param message: The message :type message: str :
Create a logger that logs to a file.
Builds the person data from the given request object.
Adds the current lambda context to the data dict.
Add the request data to the data dict.
Check to see if we need to add local variables.
Build request data from a request object.
Build server data.
Build the payload to send to the server.
Run the server.
Composes a string composed of two strings.
Decompose a Hangul letter into its component parts.
Check if a letter has Hangul sung characters.
Attach a word to a josa object.
Check if the given node is inside an except block.
Return whether the node is inside a lambda.
Recursively get all the elements of a node.
Clobber assigns in except statements.
Return `True` if `node` is a super node.
Check if the node is an astroid.raise node.
Check if `node` is a function decorator.
Determine whether `node` is an ancestor of `frame`.
Return `node` with parent assignments.
Recursively parse a string and return an iterable of field names.
Get the argument from a call node.
Check if a node inherits from the standard exception module.
Check if the function is decorated with a property.
Check if the function is decorated with the given qnames.
Find the first except handler or tryexcept wrapper of the given node.
Check if the given node is a from-fallback block.
Return a list of exception handlers for the given node.
Check if the node ignores the given exception.
Check if a class is abstract.
Try to infer the given node, stopping early on an error.
Return the type of the given node.
Check if the evaluation of the given node is postponed.
Return a list of fully qualified names from a module name.
Get the absolute name of the imported module.
Return a string representation of the tree defs.
Generate a dependency graph.
Visit an Import node.
Visit an ImportFrom node.
Check the position of the node.
Record the import of the given node and imported module.
Check for relative imports.
Add the imported module to the graph.
Check if a module is deprecated.
Check if a module is preferred.
Print the external dependencies section.
Return a graph of imports that are not in internal.
Get the default set of options from the rc file.
Insert the default options into sys.argv.
Returns whether the given node should be visible.
Get the callbacks for a given node.
Visit a node and call its callback methods.
Check that the messages are consistent.
Check if the function call is valid.
Check that the node is a datetime.
Check for open mode.
Add a message to the messages list.
Get the title of a node.
Set default options based on config values.
Return True if the given node should be shown.
Add a class to the class diagram.
Get all ancestors of the given node.
Get the nodes associated with the given class.
Recursively extracts classes from the class diagram starting at the given node.
Return a tuple containing the package diagram and the class diagram.
Visit an ImportFrom node.
Returns the class diagram for the given class name.
Gets all class diagrams.
Check if the owner element should be ignored.
Return a list of names that are similar to the given attribute name.
Check if the owner has no member.
Check if the given node has a parent of the given type.
Check if a name is used as a variadic.
Check if a variadic is not in a context.
Check for assignments.
Check for uninferable calls.
Visitor for unaryop AST node.
Iterate over the interfaces implemented by the given node.
Create an Astroid project from a list of files.
Visitor for Package AST node.
Set locals_type and uid.
Visit an assignment name node.
Populate the parent's instance_attrs_type with the set of inferred values.
Visit an Import node.
Visit an ImportFrom node.
Compute the number of modules needed to load the given module.
Handle importing a module.
Register reporters.
Handle a message.
Handle a message.
Write an open graph tag.
Adds an edge between two nodes.
Process a non-raw string token.
Write section structure.
Writes the evaluation section.
Writes the content of a table.
Add a renamed message to the message definition.
Register all messages from checker.
Register a message with the symbol.
Raises an exception if the msgid and symbol don't match.
Raise an exception for a duplicate symbol.
Raise an exception if msgid and other_msgid are the same.
Generate the documentation for the builder.
Return the number of CPU cores.
Add messages stats to a report section.
Temporarily fix the import path in the Python interpreter.
Load a list of plugins.
Loads the configuration of all dynamic plugins.
Sets the value of an option.
Register a checker. :param checker: Checker to register :type checker: Checker :
Enables and disables python3 porting mode.
Return a list of all checkers.
Returns a sorted list of checker names.
Returns a sorted list of checkers that need to be run.
Expands a list of files and adds them to the report.
Set the current module.
Check astroid module.
Evaluate the evaluation and display the results.
Handles help messages.
Print the full documentation.
List all messages.
List the groups of checkers.
Normalize text to line_len characters with indent.
Get the module and frameid of a node.
Safely decode a line.
Return True if the given base name matches one of the blacklist patterns.
Register all plugins in the given directory.
Return a comment from a string.
Format the value of an option.
Format a section of an INI file.
Format the ini file.
Insert a child at a given position.
Append a child to this node.
Returns the list of parents of this node.
Format layout and write to stream.
Returns the content of the given table.
Computes the content of the given layout.
Recursively collects the message lines of a module and all submodules.
Handle an ignored message.
Registers a report for a particular checker.
Add a set of stats to the report.
Return the name of the setter property on the given node.
Returns the setter property for the given node.
Check if a function returns something.
Return a set of possible exception types.
Processes a module and adds all managed messages.
Check the file encoding of the given module.
Check for fixme.
Check if a local variable is from a future import.
Return True if `stmt` is in a for-else branch of `parent`.
Find the overridden method for the given name in the given class.
Get the extra information about the module that is being unpacked.
Return True if the given name node is assigned to a local variable.
Mark a node as consumed.
Check if a node has an homozym in the upper function scope.
Check for Unpacking.
Recursively check for metaclasses in classdefs.
Returns a list of all packages in the given directory.
Run the install script.
Add a table to the given sect that summarizes the stats.
Main entry point for the script.
Append a stream to the lineset.
Computes similarity scores for each pairwise pairwise ensemble.
Display simulations in a nice way.
Find common elements between two line sets.
Iterates over all sims that are common to all linesets.
Enumerate the stripped lines.
Make a dictionary mapping line numbers to line numbers.
Check if the value of the given attribute is equal to the value of the node.
Returns True if the parameters of the original are different from the ones of the overridden.
Try to infer a call result for the given node.
Set a node as accessed in the current scope.
Check for classdef nodes.
Check that the mro of a node is consistent.
Check for proper base types.
Checks if the node is a function definition and adds a message if so.
Check whether the given node is allowed to be assigned to a slot.
Check if the name is the last attribute and if so, mark it as a function.
Check if the given node is a mandatory method parameter.
Check if the body is a raising statement.
Check for bad exception context.
Display the reports in the given layout.
Check if the node is a typing namedtuple.
Check if the given class is an enum class.
Check if a class is a dataclass.
Check for excessive number of parents and instance attributes.
Check for max_public_methods and min_public_methods.
Visitor for If AST node.
Check for boolean expressions.
Check for misspellings in docstrings.
Return the template formatted with the fields.
Check if the given node is an actual ELIF.
Check if the given If node is simplified.
Check that the stop iteration is inside a generator.
Check if an exception inherits from a stopiteration.
Check for the presence of nested blocks.
Return a dictionary of duplicated instance types.
Checks that the node is not an instance of the same type as an instance of another.
Check if a node is an and or or ternary.
Check for consistent returns.
Check if Graphviz is available.
Run diadefs command.
Writes packages from a diagram.
Writes classes from diagram.
Set the printer to use.
Set up the graph printer.
Return True if the current version may be accepted.
Format the help text.
Get the current environment.
Recursively find cycles in the graph.
Generates the graph using the renderer.
Print a section and options to the stream.
Disable a message. :param msgid: message id :param scope: scope of message :
Enables the specified message.
Return the symbol of a message.
Check if a message is enabled for a given line.
Add one message to the parser. :param msg_descr: description of the message :
Get the indent length of a line.
Get a continuation hint line.
Return the indent of the token at the given index.
Handle a line start event.
Get the list of valid indentation for the token at the given index.
Return an indented value after a bracket.
Returns the continuation at the given position.
Push a token onto the token stack.
Handles a new line.
Check if the token at i is a valid type annotation.
Check for the presence of ``equals`` or ``not`` annotations.
Check for surrounded by a space.
Visit a default statement node.
Check for multi-line statements.
Check the indentation level of a string.
Check if the given node is in an iteration context.
Check if a node is a conditional import.
Check if the name is valid.
Check for subscripts that inherit from stdex.
Check for instance attributes.
Visitor for Raise AST node.
Find the path to the pylintrc.
Validate value against optdict.
Register a provider for options.
Set a provider option.
Set the value of a global option.
Generate a configuration file.
Loads the configuration from the configuration file.
Load the configuration from the command line.
Add a section to the cmdline parser.
Return the help text for the command.
Loads default values for all options.
Get the name of an attribute for an option.
Get the default value for an option.
Yield tuples of section name, value pairs for all options in the section.
Check if the given function is a method call.
Determine if a node is a complex format string.
Visits the given module node.
Visit an ImportFrom node.
Visit an import node.
Check that the format string is valid.
Check if a node is inside a loop.
Return the loop node of the given break node.
Return True if the loop exits early.
Return a set of property classes and a set of property names.
Determine the type of the function name.
Format the report by node type.
Check if the call is a positional call with only one argument.
Check for starred assignment.
Check if the function is abstract.
Check if the else exits early on a loop.
Check if the given node is part of a loop.
Opens the linter and sets up the stats.
Check if the expression is valid.
Check for empty asserts.
Check for duplicate keys.
Check that the node is not in the final body of a tryfinally.
Check if the given node is a reversed protocol method.
Check the docstring of the given node.
Check if the literal is a comparison.
Add a sub-node to the graph.
Parse a sub-graph from a node.
Visit a module node.
Walk an Astroid and all of it's children.
Add a relationship between two objects.
Get a relationship for a given object and relation type.
Get the list of attributes for the given node.
Add an object to the diagram.
Return a list of class names for the given nodes.
Return the list of classes in the definition.
Return the class with the given name.
Return a list of the modules in the scene.
Return the module with the given name.
Get a module by name.
Adds a from_module as a dependency.
Delete the code from the cache.
Get the query object for the model.
Get user by username and password.
Get a user by either an OAuth access token or an OAuth refresh token.
Store a token in the database.
Set a new grant.
Get a user by client id and code.
Prepare the request URI.
Initialize the extension for the given application.
Create a remote application.
Redirect to the authorization endpoint.
Handle an OAuth1 response.
Handle an OAuth2 response.
Handle an authorized response.
Return a tuple containing the application name and token for the given token.
Make a client from a token.
Make a client from an OAuth access token.
Temporarily disable insecure transport.
Confirm an authorization request.
Get the client secret for a given client key.
Get the secret for a request token.
Get the secret for an access token.
Return a list of realms associated with the given token.
Return the redirect URI associated with the given token.
Returns the RSA key associated with the given client key.
Validate client key.
Validate a request token.
Validate an access token.
Validate the timestamp and nonce.
Validate redirect_uri against client's redirect_uris.
Validate a token against a set of realms.
Validate a token against a verifier.
Verify a request token.
Verify that the given realms are valid for the given token.
Confirm an authorization request.
Authenticate the client for the given request.
Authenticate using the client_id.
Get the original scopes for a refresh token.
Confirm that the refresh token has the given scopes.
Get the default redirect_uri for a client.
Get the default scopes for a client.
Invalidate an authorization code for a client.
Save an authorization code.
Save a bearer token.
Validate a bearer token.
Validate client id.
Validate an authorization code.
Validate the grant type for a client.
Validate a refresh token.
Validate response type.
Validate scopes.
Validates a user and stores it in the request object.
Revoke an access token or refresh token.
Update qq API request data.
Convert all keys in a dictionary to strings.
Change the WeChat authentication header.
Register an OAuth provider to a remote application.
Create a remote application.
Extract the parameters from the request.
Convert text to bytes.
Decode base64 text.
Create a response object.
Get the cached clients for the current application.
Add a remote application to the app registry.
Add a remote application to the client.
Check for errors in the certificate.
Check if the certificate was successfully signed.
Check if load_privatekey_callback has been called.
Check that the load_privatekey callback is not correct.
Check if the load_privatekey callback is wrong type.
Get a CRL that has been revoked.
Check for duplicate X509 revoked certificates.
Create an X.509 certificate request.
Create a certificate from a certificate request.
Uses a certificate chain file.
Enables access to a certificate file.
Set the certificate for this SSL context to use.
Add a certificate to the SSL context.
Use a private key in the context of the current transaction.
Set the private key for this SSL context to use.
Loads a client certificate.
Set the number of bytes that should be verified before the certificate is sent to the server.
Loads a temporary DH file into the SSL context.
Set the list of ciphers used by this connection.
Sets the client certificate authority list.
Add a client certificate authority to the context.
Enables or disables SRP profiles for SSL extensions.
Set the callback function to be called when the next NNPN packet is received.
Set the ALPRN protocols for the context.
Set the callback function to be called when the ARPN is selected.
Set the OCSP callback.
Set the SSL context for this connection.
Get the name of the server.
Set the host name for the TLS extension.
Receive data from the socket.
Read data from a buffer.
Force a renegotiation of the SSL connection.
Shut down the SSL connection.
Get a list of all available ciphers.
Returns a list of client certificate names.
Set the shutdown state of the SSL connection.
Returns a random string of bytes from the server.
Return a cryptographically secure random string.
The master key for this SSL connection.
Export a keying material.
Get an SSL session.
Get the name of the current cipher.
Get the number of bits in the current cipher.
Get the version of the current cipher.
Get the name of the SSL protocol version.
Get the next protocol negotiated.
Set the ALPRN protocols for the SSL connection.
Get the ALPRN protocol negotiated.
Convert a BIO object to a string.
Set the value of the ASN1_TIME field.
Returns a string representation of the time in ASN.1 format.
Returns the elliptic curve with the given name.
Dumps a public key in PEM format.
Load a public key from a buffer.
Sign data with a private key and return the signature.
Verifies the signature on the data.
Dump a CRL to a string.
Converts the private or public key to a cryptography key.
Check if the private key is valid.
Return a set of all curves in the current libsector.
Get elliptic curves.
Return a new EC key object for this curve.
Return the DER-encoded name of the certificate.
Return the name and value pairs for this name entry.
Get the short name of the certificate.
Get the data from the extension.
Convert the certificate signing request to a cryptography object.
Set the public key for the certificate.
Get the public key for this certificate.
Get the subject name of the certificate.
Add a list of extensions to the certificate.
Returns a list of x509 extensions that are supported by the certificate.
Verifies a certificate.
Convert the certificate to a cryptography object.
Set the version of the certificate.
Get the public key of this certificate.
Set the public key for this certificate.
Sign this certificate with a private key and a digest.
Get a digest from the certificate.
Sets the certificate's serial number.
Get the serial number of the certificate.
Set the amount of gmtime before this certificate's not-after date.
Set the amount of time that the certificate should be considered before.
Returns True if the token has expired, False otherwise.
Get the name of the issuer.
Set the issuer of the certificate.
Get the subject name of the certificate.
Set the subject name of the certificate.
Add a list of x509 extensions to the certificate.
Get a specific extension by its index.
Add a certificate to the store.
Add a certificate CRL to the store.
Set the verification time.
Initialize the store context.
Creates an X509StoreContextError from the current store context.
Verifies the certificate.
Sets the serial number of the certificate from a hex string.
Get the serial number of the certificate.
Set the reason for this certificate.
Return the reason for this certificate.
Set the date the certificate was revoked at.
Return the certificate revocation list as a cryptography object.
Returns a tuple of CRL revoked.
Get the issuer for this certificate.
Signs the certificate with the given digest.
Export a certificate and key to an OpenSSL certificate.
Get the type name of the PKCS7 message.
Set the CA certificates.
Signs the given digest with the given private key.
Verifies the signature of a private key.
Encode the SPK key in base64.
Get the public key for this key.
Set the public key for this key pair.
Create an exception from the error queue.
Return the metadata for a service.
Get issues for all boards and cards.
Retrieve the annotations for a card.
Get all boards.
Get a board's lists.
Get all cards in a list.
Get all comments for a given card.
Construct the URL to the API.
Get a list of items from a url.
Convert a link field to a dictionary.
Get issues by query.
Get pull requests for a given tag.
Aggregate all issues in a section.
Get a value from the config or return the default if it doesn't exist.
Determine if the issue should be included.
Makes a table from a grid.
Run an oracle command and return its output.
Overrides ConfigParser.getInt to catch invalid values.
Pull an issue from the local filesystem.
Get data from url.
Get a collection of values from the API.
Parse a sprint string into a dictionary.
Get credentials from storage.
Corrects p-values using the FDR correction method.
Z-scores a 2D array along a given axis.
Adjust axes ticks and ticks.
Prepare an argument parser for the command line interface.
Adds command line options for the enrichr operation.
Probability density function for seaborn.
Returns a pandas dataframe with the names and descriptions of the marts.
Get a list of datasets for a given mart.
Returns a Pandas dataframe with the attributes of the dataset.
Returns a Pandas dataframe with the filters applied to the dataset.
Sets the number of cores to use.
Load genesets from a string or dictionary.
Returns a list of libraries for a given database.
Download the libraries from Enricher and save them in a file.
Create heat matrix from dataframe.
Load data from CSV or CSV file.
Run the GSEA on each sample in the dataframe.
Save the results to a file in the output directory.
Parse the list of gene sets.
Send a list of genes to the server.
Check the number of genes in the list.
Create a cube script.
Create an icosphere layer.
Draw a cube of specified size.
Get the color values from a color name file.
Check that var is a list of num_terms terms.
Make a list from a variable.
Writes the filter_xml to the script.
Merges a script with a velocity threshold.
Splits a mesh on a nonmanifold face.
Translates the script by the given value.
Rotate a script by an angle.
Apply a scale to the current mesh Parameters ---------- script : str The script to be multiplied value :
Function to compute the cylindrical coordinates of a script.
Convert a cylinder script to a cylinder with the given parameters.
Deform a curve in 3D.
Write a LaTeX script to the current working directory.
Convert a mesh to a fc file.
Voronoi smoother.
Writes the filter to the specified script file.
Writes a verticographical quality filter to the specified script.
Rotate a cylinder script in place.
Rotate a mesh in a spherical coordinate system.
Renames the layer with the given label.
Changes the current layer of a script.
Duplicates a filter script.
Delete all lower layers of a script.
Begins a new script.
Adds a layer to the layer stack.
Save the filter list to a file.
Applies a per triangle filter to a mesh.
Measures the topology of a script.
Parses the hausdorff log file.
mp_atan2 with double quotes.
Computes the cross product of two vectors.
Takes a scalar and a list of vectors and multiplies them.
Generate a depth filter XML file.
Sorts a polyline file by vertices, y, z coordinates.
Measure all geometries and topology.
Convert file extension to lowercase.
Get upload set configuration.
Return the URL for a given file.
Return the path to a file in the destination folder.
Check if given extension is allowed.
Resolves a conflict by appending a number to the name.
Extract the vprof version from the given file.
Remove duplicates from a list of objects.
Returns the difference between the number of objects in objs1 and objs2.
Format the number of objects in a dictionary.
Trace memory usage.
Returns a list of tuples representing the code events that have occurred.
The number of object overheads.
Compute the amount of memory that will be consumed by the process.
Profiles the given package.
Profile the given module.
Run the profiling function.
Run the profiler.
Get a set of all module names in a package.
Runs a function in a separate process.
Get the type of a run object.
Initializes the run module.
Initialize the package with the given run object.
Initialize the profile function with the given run object.
Replaces sys.argv with the run object.
Called when a signal is received.
Insert a stack of functions into the call tree.
Recursively fills the sample count of a node.
Format a tree of samples.
Returns a formatted tree of call counts.
Get the package information for profiling.
Profiles the run object.
Profiles the function.
Transforms the profiling data to a list of tuples.
Return the package for profiling.
Returns a profiling module.
Run the profiling function.
Shows a guestbook.
Add a new entry to the database.
Start the profiling server.
Handle the root directory of the project.
Return the content and extension of the static file.
Handle a GET request.
Do a POST request.
Send a response to the client.
Check if module_path is a standard directory.
Record a line of code.
Yield lines without standard library.
Fills the heatmap with the number of lines without stdlib.
Given a list of line numbers and a list of line lengths, return a list of lines
Return the package to be used for profiling.
Formats a heatmap file.
Compiles and executes the heatmap file.
Runs the code and returns the profile information.
Run a set of profilers.
Run a profiler and return the result.
Predict probabilities for each sample in an input RDD.
Returns the log probability of each sample.
Fit the model to a RDD of classes.
Counts the number of occurrences of each feature in the analyzed_docs.
Sorts the features in the vocabulary.
Remove features that fall outside the specified range.
Fits the model to the data and transforms the data.
Transforms the Tensor z using this Analyzer.
Convert to scikit estimator.
Private method that calculates the average model for each sample.
Predict using spark.
Fits the regression model to the given RDD of floats.
Fit the model on the given data Parameters ---------- z : ndarray The data to fit fit_params
Fit the model and transform the data.
Return the score of the last step.
Compute the score of an estimator on a test set.
Performs k-means clustering on an RDD of data.
Prediction with the model Parameters ---------- x : np.ndarray or np.sp.sp
Predicts the class for a given RDD of data.
Check that the dtype of an RDD matches the expected dtype.
Fits the model and transforms the data.
Transforms an RDD of RDDs of the SVD into a RDD of
Convert an iterator into a collection of packed bytes.
Break an iterator into chunks of size bsize.
Convert an RDD into a block RDD.
Apply a function to each element of the RDD and return a new RDD.
Return the shape of the elements in the RDD.
Convert the RDD to a numpy array.
Return the bitwise permission of ``pos`` for ``s``.
Return True if the given path has only root write permissions.
Check the config file for errors.
Read the configuration from the file.
Run a command as a user.
Execute a command and return its output.
Execute a command over SSH.
Validate that the request is valid.
Returns a dictionary of headers to be sent to the client.
Overrides the base method to add the `name` to the url.
Returns the url to the event.
Return a textual representation of a packet.
Print the discovery packet.
Discover devices on the network interface.
Execute this command.
Send a confirmation message.
Called when a device is pushed.
Execute a device in a thread.
Scan for devices.
Find the ledger file in the ledgerrc file.
Run tests for Jupyter Compatability.
Creates a new PrecalculatedTextMeasurer from a JSON file.
Generate all supported characters in a SANS file.
Generate encoded characters from a list of characters and a list of encodings.
Calculates a mapping from characters to their length.
Writes a JSON file for the given deja_vu_sans_path.
Convolve an image using a 2D Gaussian kernel.
Returns the kernel for a Gaussian process.
Convert an image to grayscale.
Main entry point for the ssim script.
Compute the SIM value of this image and the target image Parameters ---------- target : SIMImage
Compute the SIM between two images using a Gaussian kernel.
Destroys the object.
Sets the code version of the server.
Get the status of the RAFT instance.
Print the status of the job.
Return the node that holds a connection.
Bind to the server if necessary.
Called by IOLoop when a connection is received.
Internal utility callback.
Determines whether the given node should be connected to the other node.
Establish a connection to a single node if necessary.
Called when the client connects to the remote server.
Called when an outgoing message is received.
Callback invoked when a connection is disconnected.
Add a node to the list of known nodes.
Remove a node from the network.
Sends the given message to the given node.
Adds an item to the queue.
Adds an item to the heap.
Get a value from the heap.
Try to acquire a lock.
Check if the lock is acquired.
Release a lock.
Set the hosts on the remote host.
Create one or more indexes.
Migrates the given indexes to the new schema version.
Strips metadata from a report.
Save aggregate reports to kafka.
Extracts the XML from a file.
Parse an aggregate report file.
Convert a list of reports into a CSV file.
Parse a dmarc report file.
Get imap server capabilities.
Saves a list of forensic reports to splunk.
Decode base64 data.
Get the reverse DNS record for an IP address.
Convert a human-readable timestamp to datetime.
Get information about an IP address.
Convert an Outgoing Message to an RFC822 string.
Convert a string to a list.
Parse a report file.
Drain the connection.
Publish a message.
Publish a request.
Publish a message.
Subscribe to a subject.
Unsubscribe from a stream.
Send the ping to the server and wait for it to finish.
Selects the next server to connect to.
Process an error message.
Process an error encountered during an operation.
Returns the command to connect to the CPS server.
Process a Pong message.
Process a message from a client.
Process the info received from the server.
Coroutine that flushes pending data to the socket.
Read loop that reads from the socket.
Loads features from a numpy array.
Load features from images.
Compute the Pearson correlation coefficient.
Compute the dot product of the feature images.
feature selection function.
Get the order of the features in a dataset.
Classifies a grid of data.
Fit the classifier.
Set the class weight of the classifier Parameters ---------- class_weight : str or float class_weight
cross validation and fit.
Fits the classifier to a dataset.
Get random images from the masker.
Returns a list of top-words for each topic in the model.
Pearson correlation coefficient.
Computes the Fibonacci distance matrix.
Loads activations from a CSV file.
Create an instance of the image table.
Returns a list of feature names.
Returns a dictionary of feature names and their counts.
Loads a dataset from a pickle file.
Save the feature table to a file.
Returns the ordered names for the given features.
Search for features in the dataframe.
Returns a list of ids that match the given expression.
Convert SDF data to sparse csr matrix.
Apply the inverse transformation to a matrix.
Convert cartesian coordinates to MATLAB coordinates.
Apply a transformation to a FOCI.
Get a mask of all layers in the image.
Load images from filenames using the given masker.
Save an image mask to disk.
Set the logging level.
Parse an address into its components.
Convert a dictionary to a namedtuple.
Get price for a ticker.
Get bulk news.
Make a request to the API.
Get information about the Spotify bearer token.
Make a request to the API.
Get a list of tracks for a Spotify album.
Get a Spotify artist.
Get a Spotify artist's albums.
Get the top tracks for a Spotify artist.
Get a list of artists related to a Spotify.
Get a list of Spotify artists.
Get details about a category.
Get a list of playlists for a category.
Get a list of categories.
Get a list of featured playlists.
Return a list of new releases.
Get artists or users following a list of artists or users.
Get the albums of the artist.
Get all albums of the artist.
Get the total number of albums for this artist.
Returns the currently playing track.
Get the current player.
Get list of available devices.
Returns a list of recently played tracks.
Replaces tracks in a playlist.
Create a new playlist. :param str name: Name of the playlist :param bool public:
Get all playlists for the current user.
Returns a list of tracks on the album.
Get all tracks in the album.
Return the OAuth2 URL for the current client.
Get a Spotify album.
Get a Spotify artist.
Get a track by its Spotify ID.
Get a Spotify user.
Get albums by IDs.
Get a list of artists.
Convert a URI or OpenID string to an ID.
Create an instance of this class from an existing client.
Generate a URL for an OAuth2 request.
Return the attributes of the authorization request as a dict.
Returns a string with the parameters of the function.
Builds the playlist and returns a list of Track objects.
Get all tracks on the playlist.
Transfer a media player to the user's account.
Return a new instance of the resource at the given href.
Get the current domain or IP address.
Tries to convert or shorten a month.
Update all code URLs in the current directory.
Check if the current version is greater than the version stored in self.version_yaml.
Check if the current version is a development version.
Returns True if the current version of the tool requires a deprecation warning.
Save the current state of the backup file.
Restore the backup file to its original state.
Check if the line should be ignored.
Extract domains from options.
Extract base from url.
Return a list of decoded URLs.
Make a HEAD request to the API.
Get the current http code from the API.
Check if a domain is valid.
Returns True if the domain is a subdomain.
Check if an IPv4 address is valid.
Checks if an IP address is in a valid range.
Check if URL syntax is valid.
Load configuration from current directory.
Stay safe.
Check if the passed URL is valid and download it.
If the entry management url has been downloaded, download it.
Print the function header.
Logic for file decision.
Set or reset the domain.
If url_to_test is not None, use last_url instead of syntax.
Print the logo in the terminal.
Formats a domain name.
Return a list of domain names extracted from a file.
Return a list of domains that are to be tested.
Return a list of URLs of files to download.
Get the expiration date.
Handle catched function.
Get the structure from the API.
Create directory if it doesn't exist.
Delete directories that aren't in the structure.
Set the path to the configuration file.
Install the production config.
Install IANA configuration.
Download and install PSL configuration.
Install directory structure file.
Merge values from upstream_config into the new_config.
Load the config file.
Split version string into digits and non-digits.
Check that all versions are in the same order as the upstream.
Check if the package is cloned.
Handle non-existant indexes.
Return the directory where analytic host files will be stored.
Print the unified file for the test.
Print status file.
Return True if we should not produce a file.
Add a line of public suffixes to the database.
Load data from the destination file.
Return the standard string representation of the element.
Load the IANA database.
Look for a manual server record for the given extension.
Yield tuples with the extension and referer of the file.
Update the iana database with the current configuration.
Try to mine the url.
Retrieve data from file.
Write the backup file to disk.
Add a list of elements to the function.
Remove a bare function from the configuration.
Return a list of all the mined modules.
Mine and add the result to the database.
Return the content of a file as a dict.
Write content to file.
Write a record to whois.
Set the expiration date of the extracted file.
Called when a referer is not found.
Write header before the header is generated.
Construct a header from data_to_print.
Construct an ordered dictionary from the data_to_print list.
Return a list of sizes from the header.
Colorize the data.
Print the data to the output file.
Return the data to print.
Calculate the time difference between two times.
Return the execution time in a human readable format.
Return a list of files to delete.
Return list of databases to delete.
Delete every file in the database.
Hash the file using the given algo.
Hash the data using the given algo.
Returns the hash of the data or None if there is no hash.
Execute the command and return the output.
Removes the given key from the main dictionary.
Rename a key in the main dictionary.
Merges another dictionary into this one.
Writes the main dictionary to a JSON file.
Writes the main dictionary to a yaml-formatted file.
Recursively splits the path into directory components.
Write data to file.
Reads the file and returns it as a string.
Returns a sorted list of strings.
Merge a list of dicts into the main list.
Returns a list of strings that do not match the regex.
Returns a list of matches.
Return a copy of this instance with all occurences replaced.
Count the number of jobs in the queue.
Calculate and store the percentages.
Check if a URL is valid.
Return True if the domain is valid.
Check if the domain is a subdomain.
Get the current status of the server.
Try to parse the historical formating error file.
Retrieve the inactive database from disk.
Write the inactive database back to the inactive database.
Return the current time in seconds.
Return the content of the module.
Return True if the package is present in the configuration.
Retrieve the whois database from disk.
Write the whois database back to the file.
Return True if the user is in the database.
Return True if the current time is older than the current time.
Return the expiration date of this item.
Run the Travis CI build if configured.
Run the Travis environment.
Look up all available namespaces.
Send a WHOIS request to the whois server and return the response.
Get the current URL status.
Return the referer if it can be found.
Return the current object.
Return a list of standard library paths.
Return a generator of standard package names.
Get the line numbers of unused import messages.
Extract the module name from unused import messages.
Get the line numbers of import used.
Extract undefined name from import star usage messages.
Get the line numbers of unused variables.
Duplicate key line numbers in messages that occur in source.
Run pyflakes on a source and return a list of warnings.
Extract the package name from a line of text.
Return True if line is a multiline import.
Return True if the line is a multiline statement.
Filter from imports.
Break up an import statement by adding a newline at the end.
Given a list of messages, return a dictionary mapping line numbers to messages.
Remove undefined names from star imports.
Filter duplicate key error messages.
Check if a dict entry has a given key.
Return whether the value is a literal or a name.
Return line numbers of useless pass lines.
Filter lines that are not a useless pass.
Returns the indentation of the given line.
Get the end of a line.
Filters the source code to remove unused imports.
Split a comma separated string into a set of strings.
Check if file is a valid python file.
Check if filename matches any of the exclude patterns.
Reads the payload from the input stream.
Writes the obtain lease response payload to the given stream.
Write the cancel request payload to the given stream.
Reads the cancel response payload from the input stream.
Create a new name from a name value and type.
Reads the Digest from the input istream.
Writes the digest to the given stream.
Reads the ApplicationSpecificInformation from the given stream.
Write the ApplicationSpecificInformation to the given stream.
Create an ApplicationSpecificInformation object.
Reads the Derivation Parameters from the input stream.
Writes the derivation parameters to the given stream.
Reads the request payload from the input stream.
Writes the request payload to the given stream.
Reads the response payload from the input stream.
Writes the response payload to the given stream.
Writes the MAR file to the given stream.
Reads the signature verify response payload from the input stream.
Builds an error response.
Process a single template attribute.
Retrieves attribute values from a managed object.
Sets attributes on a managed object.
Sets the given attribute on the given managed object.
Determines if an operation is allowed for a given policy.
Writes this DecryptRequestPayload to the given stream.
Create an object of the given type.
Set the value of the given setting.
Loads settings from the given path.
Process the bind parameter value.
Filter the cryptographic usage masks.
Reads the long integer primitive from the stream.
Write the long integer to the stream.
Validate that the Int32Field is correctly representable.
Reads this BigInteger from the given input stream.
Writes this BigInteger to the given stream, in hexadecimal.
Validate that the IntField is correctly representable.
Validate that the EnumField is correctly representable.
Reads the next value from the istream.
Writes the value to the stream.
Write the KMIP header to the stream.
Validate that the BoolField is correctly representable.
Reads an interval from the stream.
Validate that the Constant is correctly representable.
Validate that the KeyInfo is correctly representable.
Validate that the SecretKey is correctly representable.
Validate that the Field is correctly representable.
Convert an attribute name to a tag.
Convert an attribute tag to a name.
Get a bit mask from a list of Enumerated objects.
Get all enumerations that have a bitmask.
Check if an enumeration contains a bit mask.
Writes the template to the specified output buffer.
Reads this CreateKeyPairResponsePayload from the specified buffer.
Writes the contents of this CreateKeyPairResponsePayload to the specified buffer.
Reads the attribute list payload from the input buffer.
Writes the attribute list to the given buffer.
Writes the attribute list response payload to the given buffer.
Return a list of all json files in a directory.
Run the monitoring loop.
Get the certificate from a connection.
Get the Extended Key Usage extension from a certificate.
Returns a list of the common names of the given certificate.
Returns the client identity associated with a certificate.
Reads this CreateRequestPayload from the specified buffer.
Writes this CreateRequestPayload to the specified buffer.
Reads the create response payload from the input buffer.
Writes this CreateResponsePayload to the specified buffer.
Converts a cryptography object to a cryptography object.
Reads this EncryptionResponsePayload from the specified input stream.
Writes the content of this KMIPDefinition to a byte array.
Checks if the given attribute is supported.
Checks if an attribute is deprecated.
Checks if the given attribute is applicable to the given object type.
Determines if an attribute is multivalued.
Reads the check response payload from the input stream.
Writes this check response payload to the given stream.
Reads the attribute reference from the input buffer.
Writes the attribute reference to the given buffer.
Reads the attributes from the input stream.
Writes the MIP header to the given stream.
Reads this nonce from the given stream.
Writes the nonce to the given stream.
Reads the credentials from the input stream.
Writes the credential to an output stream.
Writes the credential to the given stream.
Reads the credential from the given stream.
Writes the credential to the given stream.
Reads the MAC signature key information from the input stream.
Writes this MAC signature information to the given stream.
Writes this keywrapping data to the given stream.
Reads this key wrapping specification from the specified input stream.
Writes this keywrapping specification to the given stream.
Reads the extension information from the input stream.
Writes the extension information to the given stream.
Reads the revocation reason from the stream.
Writes the revocation reason to the stream.
Validates that the Revocation Code and Revocation Message are valid.
Reads the ObjectDefaults tag from the input buffer.
Writes the default values to the given buffer.
Writes the FIPS header to an output buffer.
Reads profile information from the input buffer.
Writes the profile information to the given buffer.
Writes the contents of the KMIP header to the given buffer.
Shut down the socket and the monitoring thread.
Writes the contents of this KMIPSet to the specified output buffer.
Reads the location response payload from the input buffer.
Writes the location response payload to the given buffer.
Create RSA private key from bytes.
Reads the signature response payload from the input stream.
Writes the signature response payload to the given stream.
Reads the payload from the input stream.
Converts a protocol version to a KMIP version.
Reads the protocol version from the input stream.
Writes the protocol version to the given stream.
Reads authentication metadata from a stream.
Writes the authentication to the given stream.
Reads the payload from the input stream.
Reads the certificate from the stream.
Write the certificate to the stream.
Reads the payload from the input stream.
Writes the response payload to the given stream.
Interact with the server.
Reads this response payload from the specified input stream.
Returns True if the given conformance_clause and authentication_suite are supported.
Gets the attributes for a given set of attributes.
Gets a list of attributes for a given set of attributes.
Sends a query to the Kronos server and waits for a response.
Opens the connection to the server.
Closes the connection to the remote host.
Registers a new managed object.
Get attributes of a KMIP message.
Activate the KMIP device with the specified UID.
Builds a cryptographic parameters object from a dictionary.
Builds an EncryptionKeyInformation object from a dict.
Builds a MAC Signature Key Information object.
Builds a KeyWrappingSpecification object from a dictionary.
Builds the list of attributes common to all policies.
Build name attribute. :param name: The name of the attribute :type name: str :
Reads the query request payload from the input buffer.
Writes the query payload to the given buffer.
Reads the attributes from the input buffer.
Writes the contents of this GetAttributesResponsePayload to the specified buffer.
Get a single entrypoint by name.
Get all Endpoints in a group.
Get all entries for a group.
Load object from module.
Create an entry point from an entry point string.
Generate a controller file.
Replace project name in src_file and copy to dst_file.
Check if url is a valid URL.
Encode a URL-safe string.
Decode a URL-safe encoded string.
Return the absolute url for the given endpoint.
Sign in a user to the session.
Get the currently logged in user.
Create a WSGI application.
Writes a dataframe to a CSV file.
Read a CSV file into a Pandas DataFrame.
Serializes the given dataframe to the given writer.
Deserializes a DataFrame from the given reader.
Return the URL for the contents of this file.
Open the dataset.
Read this dataset as binary data.
Read the contents of this dataset as text.
Return this stream as a pandas.DataFrame.
Returns an intermediate dataset in this node.
Get experiments in a workspace :param workspace_id: workspace id :type workspace_id:
Get a workspace's datasets :param workspace_id: workspace id :type workspace_
Get a dataset in a workspace :param workspace_id: workspace id :param dataset_id
Find all globals in the bytecode.
Return a copy of the pen.
Look up a color from a string.
Draws the text in the given CR object.
cubic cubic bronecker extrema equation.
cubic cubic brenstein equation.
Build choices list.
Initialize the cache.
Empty the cache.
Get an entry from the cache.
Update the value of an entry in the cache.
Set an entry in the cache.
Initializes the page with the given context.
Resolve a tree alias from its i18n form.
Return whether the current app is the admin app.
Calculates the depth of the item in the tree.
Get the currently-selected item for the given tree alias.
Returns the URL for a given sitetree item.
Initialize the tree with the given alias and context.
Returns the value of the given attribute on the current page in the tree.
Get the level of the tree rooted at the given item.
Checks if the current user has access to the item.
Return the tree items for the given tree_alias.
Renders the children of the given item.
Get the children of the given item.
Updates the has_children flag of the tree items.
Filter a list of items based on the current page context.
Get the ancestor item of base_item.
Traverses the tree upwards from the given item.
Resolve a variable name.
Return a sitetree tree node.
Returns the children of a sitetree item.
Render the breadcrumbs section of the sitetree.
Renders the given tree items using the given template.
Check if the current position is for a tag.
Get model URL name.
Reregister the tree admin.
Handles redirects in the URL path.
Handles redirects for POST requests.
Redirect to the add view.
Handles a change of a treeitem.
Populates the form with known URL names and rules.
Returns the tree for the given tree_id.
Move an item to another position.
Saves the object to the database.
Returns the URLs for the tree item admin.
Dump model tree to a response.
Imports the sitetree module for the given app.
Returns the model class for the given settings entry name.
Create a configuration object from a mapping.
Imports an object from a Python file.
Creates an instance from a TOML file.
Create an instance from an object.
Create HTTP headers for a new span.
Get the current context for the span.
Starts collecting Zipkin attributes.
Stops the logging context.
Update the binary annotations with the given extra annotations.
Add a sa binary annotation to the logging context.
Overrides the name of the span for this logging context.
Copy an endpoint with a new service name.
Build a _v1span from this span.
Encodes a list of spans into a zipkin protobuf list.
Create a protobuf span from a Span object.
Convert a hex ID to bytes.
Get the protobuf kind for a given kind.
Convert an Endpoint object to a zipkin_pb2.Endpoint object.
Convert annotations to zipkin annotations.
Create an annotation object.
Create a binary annotation object.
Create a zipkin_core.Endpoint object.
Copy an endpoint with a new service name.
Build a list of annotations from a dictionary.
Build a list of binary annotations.
Create a Span object.
Converts a thrift span to bytes.
Encodes a list of thrift objects into a byte array.
Detect the span version and encoding of a message.
Convert spans from one encoding to another.
Pushes a zipkin attribute onto the stack.
Encodes a V2 Span into a TChannel Message.
Create a JSON endpoint from an Endpoint object.
Encode a span for the ZIP file.
Decode a list of spans.
Convert a thrift endpoint to an AAFEndpoint object.
Decodes a list of thrift annotations into a dictionary.
Convert from thrift binary annotations to local and remote endpoints.
Decodes a Span from the internal representation.
Convert a trace id to a string.
Converts an unsigned long to a lower-hex bytearray.
Writes a long integer to the specified position in the specified byte array as a hex string.
If the tag is a year, fix it up to the maximum month day.
Set the transaction code for a given tag.
Set the IPH ID for a tag.
Set the tag's tnr in the tag_dict.
Join lines of a string.
If the response contains a json, return it as a Python object.
A function that logs a warning only when until is reached.
Get bot info.
Get a list of bots.
Reads a term from the transport.
Writes the given message to the output stream.
Decode a term from its string representation.
Encodes the given term into its binary representation.
Add a source address to the watch.
Send all pending messages in the queue.
Register a callback for remote service hello.
Stop the server.
Clear all local services.
Search for remote services.
Create a SOAP message from a WSGI environment.
Discovers the given scope of the given loglevel.
Get the item manager for the through field.
Get all child relation fields for a given model.
Get all child m2m relations for a model.
Extends the save method of the ClusterableModel class by calling the save method of all
Validate uniqueness of each form.
Returns True if any of the forms have changed.
Return a new address with a valid checksum.
Generate a checksum for this address.
Prompt the user for a seed.
Get the key for a given index.
Get the encryption key for the given address.
Create an iterator for the keyring.
Create a Sponge from the seed at the given index.
Accumulate the given trits at the given offset and length.
Squeeze a trits array.
Transform the state of the circuit.
Add trits from left to right.
Convert an integer to a list of trits.
Adds two triangles.
Return the sum of the trits of the left and right vertices, plus the given carry.
Print the seed to the screen.
Returns a list of transaction IDs.
Promote a transaction to a higher level transaction.
Resolve a URI to an adapter.
Send a request to the server.
Logs a message to the logger.
Send an HTTP request.
Interpret the response.
Add a digest to the message.
Returns the multisig address associated with this transaction.
Create an iterator that generates addresses based on the key generator.
Create an address from a digest.
Generates an address from the given key iterator.
Return list of transaction objects.
Iterates over the used addresses.
Given a list of transaction hashes, return a list of bundles.
Check whether the given codec is supported.
Get codec info.
Encodes input to trytes and returns the result.
Decodes the given input using the TETE algorithm.
Finds all the addresses in the specified index.
Add a route to the blueprint.
Create a SignatureMessage from a list of trytes.
Returns a JSON-compatible representation of the signature message fragment.
Get the signature validation trytes.
Set whether or not this transaction is confirmed.
Return a list of message strings for all transactions in the wallet.
Return a list of all transactions grouped by address.
Discover all commands in the given package.
Execute a request.
Apply a filter to a value.
Return the URL for a particular job.
Returns a list of errors.
Returns True if the schema is valid.
Create a validator for the bundle.
Returns a list of all signatures errors found in the bundle.
Returns an error message for an invalid group signature.
Traverses a transaction and returns a list of transactions.
Start an IPython repl for the given API instance.
Generate a random string of given length.
Return the digest of this key.
Sign InputTransactions. :param bundle: bundle to sign :param start_index: start
Pretty print a mapping or iterable.
Accumulate the hash for the given trits.
Adds context to an exception.
Definition of security level.
Increment the legacy tag.
Return the tag of the current transaction.
Add a transaction to this block.
Finalize the transaction.
Sign the inputs of this transaction.
Adds a transaction to the list of input transactions.
Convert a value to a standard unit.
Decompress a G1 compressed value.
Calculate the inverse of a prime field.
Create an instance of this class from a JSON file.
Split the description into a list of words.
Return a list of all categories.
Create a random component.
Create a builtin time scale by name.
Create a Decor object from an image file.
Returns a CSV representation of the table.
Returns the maximum width of all rows in the table.
Get the Decor object for the given component.
Plot the datasets in this dataset.
DEPRECATED use ROCK instead.
Process a row of text and return it as a dictionary.
Parse canstrat text into a dictionary.
Return a list of unique components.
Returns a list of interval objects from a list of tops.
Clean longitudinal data.
Create an IntervalList from a PETRel file.
Read a canstrat file and return a list of interval objects.
Return a copy of the StripLog.
Exports the list to a CSV file.
Create a las3 section.
Finds all cities that overlap.
Finds all gaps.
Remove items with thickness less than `limit` or `n`.
Anneals this strip.
Fill gaps with the given component.
Return the union of two StripLog objects.
Intersect this interval with another.
Merge overlapping segments.
Inverts the order of elements in this list.
Crop the log to the given extent.
Run a series of tests.
Override the default get_field method to catch key errors.
Returns a list of jobs with the given prefix.
Parses the given HCL into a dictionary.
Update a user's token.
Returns a list of all available allocations.
Fail a deployment. :param id: The id of the deployment :type id: str :
Pause a deployment.
Drains a node. :param id: ID of the node to drain :param enable
Drain a node with a specification.
Get a node that is eligible.
Get a list of files in a folder.
Get a stream of messages.
Stat a file. :param id: file id :param path: file path :type id
Join an agent. :param addresses: The addresses of the agent :type addresses: str :
Update the status of one or more servers.
Force a node to be removed.
Returns a list of nodes with the given prefix.
Get a list of all evaluations.
Get a list of namespaces.
Register a job with the given id.
Create a plan for a job.
Dispatch a job. :param id: The job id :param payload: The job payload :
Revert a job.
Revert a job to a stable state.
Remove a job from nomad.
Get the current configuration.
Delete a peer from your account.
Get a list of all deployments with the given prefix.
Return a random value of the given type.
Get a mutator for an object.
Return a random string based on the polyglot techniques.
Return a safe unicode string from a buffer.
Customize the response to serve a static html file.
Run the fuzzing server.
Spawn a process and wait for it to finish.
Get the output of the command.
Finish a read operation.
Terminate the subprocess.
Start the worker.
Execute a pjf command.
Build a random string.
Builds the grammar for the current scope.
Build the query string.
Return a random value from the distribution.
Builds an opt using the given pre-list.
Build the definition of the refname.
Builds the opt-gram.
Shutdown the pjf process.
Spawns a process and waits for it to finish.
Start the monitoring process.
Return a random float between a and b.
Return the fuzzed URL.
Returns the fuzzed json.
Signal handler for SIGTERM.
Quits the child process.
Pauses the running process.
Resumes a paused command.
Stops the child process.
Restarts the child process.
Return a list of events.
Set user mood.
Set the avatar of the user.
Get metadata for a URL.
Retrieve a contact from Skype.
Get a user from Skype.
Return a list of all bots.
Get a bot by ID.
Search skype.
Return a list of SkypeRequest for this user.
Create a Skype object from raw data.
Merge attributes from other into self.
Add or update an object in the cache.
Read the token from the token file.
Write the token to the token file.
Verifies that the token is valid.
Refresh Skype token.
Get user id.
Get the registration token from skype.
Synchronizes endpoints with the server.
Check if a user exists.
Sends an auth token and gets the token.
Set config of message.
Ping this message.
Get a list of recent chats.
Get a single chat.
Create a new chat.
Extract user id from url.
Extracts the chatto id from a URL.
Convert unicode to unicode.
Detect the format of the given text.
Parse text into metadata and content.
Return a dictionary representation of the object.
Wrapper around yaml.load.
Export metadata as a unicode string.
Export metadata as a Unicode string.
Return a full match object for this line.
Return a list of strings that match the pattern.
Returns a list of all sublists of the current list.
Convert the current match to a new start string.
Returns a list of all arguments in the expression.
Return a list of lists that match the pattern.
Merges a list of strings into a trie.
Convert a trie to a pattern.
Check the index of the given key.
Insert string at index.
Returns a tuple consisting of the character at the start of the string and the part after the
Returns the list of spans of the given type.
Shrink the spans by `rmstart` and `rmstop`.
Insert or update the span corresponding to the given index and length.
Returns the level of nesting of this symbol.
Return the shadow for the current span.
Return a bytearray with the shadow of the link.
Return a mapping from type to spans.
Pretty print.
Return a list of all parameters in this sentence.
Return a list of parser functions.
Return a list of templates.
Return a list of wikilinks.
Return list of comments.
Returns a list of external links.
Returns a list of tables.
Returns a generator of spans of the given type.
Returns the ancestors of the parser.
Returns the first ancestor of the given type or None if no ancestor exists.
Returns the mode of the list.
Get the argument with the given name from the given iterable.
Remove the first argument from the argument list.
Get the argument with the given name.
Returns True if this function has an argument with the given name and value.
Delete the argument with the given name.
Convert a CRS code to a string.
Given an ellips name and a crs type, try to find the crs object
Load a CRS from a URL.
Create a parse object from a file.
Create a CRS object from an EPSG code.
Create a CRS object from an Esri code.
Convert CRS code to CRS object.
Return a CRS object from an unknown text format.
Write the record to the file-like object out.
Reads VVRR record from stream.
Parses geotiff keys from a list of VLRs.
Parse geotiff keys.
Returns the signedness of the dimension with the given index.
Gets the ID for an extra dimension type.
Create a new point record from another point record and a new point format.
Copy fields from another record to this one.
Append zeros at the end of self.array if value is too small.
Returns a set of all dimension names.
Create a point array with zeros.
Create a Points object from a stream containing points.
Create a Point instance from a compressed buffer.
X coordinate of the dimension.
Y dimension of the grid.
Z coordinate of the dimension.
Adds an extra dimension to the data.
Writes the VRL list to an output stream.
Write the MAR file to disk.
Build a dictionary of dtypes for each point format.
Build a dictionary of numpy dtypes for point formats.
Convert a numpy dtype to a point format ID.
Returns the minimum file version for a point format ID.
Checks if a point format identifier is compatible with a file version.
Removes all VLRs of a certain type.
Read a list of VLRs from a data stream.
Return True if all the files have the same point format ID.
Return True if all of the las files have the same dtype.
Raises PyLASError if the file signature is wrong.
Reads a header from the stream.
Reads VRLs from the file.
Reads point records from the file.
Read compressed point data.
Reads an internal waveform packet.
Reads the EVLRs from the stream.
Logs a warning if the stream is not at the expected position.
Create a lasdata object from a header.
Merge a list of las files into one.
Write a LaS file and then read the LaS file again.
Returns the creation date of the date object.
Set the creation date of the date object.
mins of the bounding box.
Sets the minimum values of the bounding box.
A 2D array of the maximum values of the quaternion.
Sets the max values of the bounding box.
A list of the scales for this quaternion.
A 2D array with the x,y,z offsets.
Returns the major and minor version from the input stream.
Convert a header from the old format to the new format.
Unpack an array with a mask.
Returns a list of dimensions that are not in point_fmt_out.
Returns a dictionary mapping field names to sub-fields.
Returns the number of extra bytes.
Return True if this dataset has a waveform packet.
Main entry point for the CLI.
Calculate the CRC checksum of a command.
Print data in hexadecimal format.
Verify that the response is valid and strip it.
Returns a list of bit numbers that are set in the given bit string.
Generate a query from a command.
Demonstration of the Satellite Server.
Connect to the IRC server.
Start monitoring the device.
Disarm the server with the given code.
Clear the alarm on the device.
Set the output of the device.
Keep the connection alive.
Monitor the status of the device.
Close the connection to the serial port.
Purge the database for this user.
Guesses the type of the file at the given path.
Return the file_id of the file with the given path.
Get a notebook from the database.
Create a notebook model from a record and base64 encoded content.
Get a directory record.
Convert file records to notebook or file models.
Create a directory model from a database record.
Create a file model from a database record.
Saves the notebook to the database.
Saves the file to the database.
Rename a file or directory.
Delete a file or directory.
Ensure user exists in database.
Purge files, directories, and users.
Create a directory in the database.
Return True if the user is in the specified directory.
Delete a directory from the database.
Check if a directory exists in the database.
Return a list of files in a directory.
Return a list of directories in a directory.
Returns a where clause for the given user and api path.
Return a Query that retrieves files from the database.
Return a list of default field names for files.
Get a single file from the database.
Get a file from the API.
Get file id.
Check if a file exists in the database.
Rename a directory :param db: database connection :param user_id: user id :param
Save a file to the database.
Remove all remote checkpoints for a user.
Reencrypt the content of a row.
Encrypt all files and remote checkpoints for a user.
Derive a single fernet key from a password and user id.
Get the name of a column like object.
Convert row to dict with no content.
Convert a row of data to a dictionary with encrypted content.
Create a checkpoint in the usernotes folder.
Create a file checkpoint on the remote server.
Delete a checkpoint from the database.
Get the content of a checkpoint.
Return a list of checkpoints for a given path.
Move all checkpoints from old_path to new_path.
Delete all checkpoints from the database.
Remove all checkpoints from the database.
Resolves a path to a manager and a path name.
Prepend the prefix to the model.
Called when a manager is changed.
Get a directory from the server.
Normalize an API path.
Split API filepath into directory name and file name.
Write a notebook to base64.
Decode a base64 encoded file.
Decode content from base64.
Decode a base64-encoded file.
Return a list of all directories starting with the given path.
Create a user on the postgres server.
Separates dirs and files from a list of models.
Recursively walk a directory tree.
Walk a directory and yield all files in it.
Walk a directory and return all files with content.
Reencrypt a single user.
Unencrypt all users.
Unencrypts a single user.
A context manager for templating the alembic ini file.
Upgrade the database to the given revision.
Sanitizes a block for embedding.
Queues an instance for embed_type.
Loads instances of the given type from the database.
Insert an instance of the given embed type into the block.
Loads the data for each embed type.
Validate widget data.
Shows the current API version.
Returns a JSON-compatible representation of the model.
Hide the authenticated fields.
Excludes fields from the request.
Overrides the default get method to add the version and preview_id to the kwargs.
Returns a QuerySet of Articles that match the current request parameters.
Returns a queryset of publishable objects.
Return True if the attribute is null, else False.
Check that the widget is valid.
Validate a zone.
Checks if the given id is a valid UUID.
Returns the permissions of the current user.
Modify permissions of a group.
Validate author data.
Saves the zone to the database.
Get the data from the request.
Prepare the data for sending to the client.
Render the template with the given data.
Get the integration settings.
Callback for Facebook integration.
Get integration settings.
Update the settings for an integration.
Signup a user.
Map a tag name to a list of contents.
Render zone widget.
Saves the featured image to the database.
Saves a subsection to the database.
Get the extension of the image.
Returns the URL for the thumbnail.
Saves the image to disk.
Saves the thumbnail to the default storage.
Returns the SQLAlchemy connection object.
Get abandwithlimited stream.
Reads amount of data from the underlying file object.
Consumes the given amount of time for the given request token.
Process a token that was scheduled to be retried.
Returns the projected rate for a given market resources at a given time.
Records the current consumption rate.
Poll for the result of a transfer.
Returns a list of callbacks to invoke when the transfer is completed.
Return a copy of original_dict with keys not in whitelisted_keys.
Decrement the counter.
Call the callback if the count reaches zero.
Check if a file is special.
Acquire the semaphore for the given tag.
Release a semaphore lock.
Adjusts the chunk size to the given value. :param current_chunksize: The
Queues a file-like object for writing.
Returns the download manager class that can handle the given fileobj.
Write data to fileobj at offset.
Request writes from the queue.
Check if fileobj is seekable.
Send a shutdown signal to the application.
Cancel all currently-tracked transfers.
Wait for all pending transfers to finish.
Wraps the given data into a file-like object.
Returns the upload input manager class for the given transfer.
Set the exception for this transfer.
Set the result of the future.
Set the result of the future to the given exception.
Wait for the task to finish and return its result.
Called by the Future to cancel this Future.
Submits the given task to the given Executor.
Add a done callback.
Add a failure cleanup function.
Announce completion of the job.
Uploads a file to S3.
Download a file from S3. :param bucket: S3 bucket name :param key:
Extract the step argument from a decorator.
Given the old text and a new text, refactor it.
Extract step from a decorator's arguments.
Find and refactor the step between two texts.
Updates an existing membership.
Deletes a membership from a user.
Returns the catalog fact for the current user.
Posts a new webhook.
Deletes a membership from a user.
Validate a base URL.
Returns True if the string is a valid web URL.
Opens a local file and returns an encodable file.
Check that o is one of the acceptable_types.
Create a dictionary from a list of dictionaries and a list of items and their values.
Check that the response code is expected.
Convert json_data into a dict.
Create a DateTime from a string.
Creates a new title for a team.
Updates a room. :param roomid: ID of the room to update :param title:
Deletes a room.
Get a list of organizations.
Return the created date.
Get an access token from environment variables.
Update an existing webhook.
Deletes a webhook.
Sets the wait_on_rate_limit parameter.
Update the headers for the current session.
Return the absolute URL for a given URL.
Make a GET request.
Get a list of pages from a URL.
Make a PUT request.
Sends a DELETE request to the given URL.
Create a new user. :param subject: subject :param displayname: displayname :param
Deletes a message from the queue.
Get a person by id.
Delete a person from the account.
Get the current user.
Get a list of items.
Creates a new tenant. :param name: The name of the tenant :type name: str
Updates an existing team.
Delete a team from the authenticated user's account.
Recursively serializes a dictionary or list of dictionaries.
Return the last activity of the team.
Post event service.
Returns the public URL of Ngrok.
Delete all webhooks with a given name.
Create an Ngrok webhook.
Delete webhooks and create a new webhook.
Reads telegrams from the serial port.
Reads from the serial connection and puts the parsed telegrams on the given queue.
Creates a dsmr protocol.
Create a serial connection to a dsmr server.
Create a TCP connection to a dsmr server.
Handle received telegrams.
Called when the connection is lost.
Parse the telegram and call the callback.
Parses the telegram data.
Get the version number of the given file.
Given a list of specs, ensure that the first one is a valid python version.
Find all packages under `top`.
Runs the given command.
Get data files from data specifications.
Get package data from a directory.
Compile a glob pattern into a regular expression.
Recursive version of os.path.split.
Translates a glob pattern into a string.
Join a list of translated parts into a single string.
Translate a glob pattern to a regular expression.
Removes all rows from a table.
Writes a table to the database.
Adds Postgres indexes to a table.
Writes the index triggers for a table.
Writes constraints to the database.
Write the contents of a table to a file.
Writes the list of indexes for the given table.
Writes the constraints to the file.
Writes the list of triggers for the given table.
Returns the number of items in the queue.
Enqueue data to be inserted into the queue.
Starts a new task handler in the queue.
Build extra predicate string.
Serialize datetimes to ISO-8601.
Reconnect to the database.
Performs a query and returns the first row of the result.
Get a database connection.
Run the benchmarks.
Establish a connection to the aggregator pool.
Look up a module variable by its error code.
Returns the total number of connections and fairies.
Handles a potential connection failure.
Returns a simple SQL expression that can be used to query the database.
Creates an UPDATE query for the given table.
Connect to a database.
Destroy all tables in the database.
Start a step in the simulation.
Stops a step by name.
Load the steps from a list of dicts.
Disconnect from the serial port.
Reconnect to the serial port.
Connect to the websocket.
Called when a websocket message is received.
Stop all timers.
Send a ping to the server.
Check if pong is received.
Send data to the websocket.
Unpause the stream.
Handle system events.
Handle error messages.
Handle incoming data.
Resubscribe the channel configurations.
Handle authentication data.
Handle configuration data. :param dtype: type of data :param data: data :param t
Update the timestamps for a channel.
Reset the connection to the default state.
Get candles for a given pair.
Set bitfinex config Parameters ---------- decimals_as_strings : bool Decimals as
Subscribe to a ticker.
Unsubscribe from a ticker.
Subscribe to the order book of a given pair.
Unsubscribe from an order book.
Subscribe to the order book of a given pair.
Unsubscribe from an order book pair.
Subscribe to a pair of trades.
Unsubscribe from all trades associated with a pair.
Subscribe to candles for a given pair.
Unsubscribe from a pair of candles.
Authenticate using the key and secret.
Cancel order specified by order_identifiers.
Called when a command is received.
Called when a device command event is received.
Called when a message is received.
Create a new device type.
Update a device.
Query for status and connected after.
Returns a list of all users.
Create a new DME entry.
Update a schema definition.
Disconnect from the websocket.
Callback invoked when a client connects to the broker.
Called when an unsupported message is received.
Called when a device event is received.
Callback invoked when a device status message is received.
Called when an application status message is received.
Get the last event for a given device and event id.
Get all events for a given deviceuid.
Make an API call to the API.
Initiate a new request.
Get the status of a request.
Closes the socket and closes it.
Get the bounds of this region.
Loads a bytearray from the page.
Check the return value of a function call.
Loads the application and returns it.
Runs the gunicorn server.
Converts the value to a native Python object.
Crops and saves the image to disk.
Process an image and return a bytesio object.
Inverts the image and saves it.
Opens the file if necessary.
Processes the placeholder image and saves it to disk.
Pre save hook to update the ppoi field.
Update the ppoi_field attribute of the given instance.
Returns the default formfield for this field.
Converts the value of an object to a string.
Auto-discovers the versatile image field registry.
Unregisters a registered sizer.
Unregisters a filter by attribute name.
Returns the URL for this image.
Builds the filters and sizers.
Returns the root folder for filtered images.
Returns the path to the root folder of this image field.
Returns the path to the filtered root folder.
Delete files matching regex from storage.
This method is used to prepare an image for saving.
Preprocess an image for processing as JPEG.
Retrieve an image from the storage backend.
Saves an image to disk.
Return the PPI as a string.
Create an image from the given path, with the given width and height.
Render the input with a preview.
Build the context for the input widget.
Build a dictionary of attributes to be passed to the tag.
Returns the path to a resized file.
Returns path_to_image with filtered filename.
Validate a list of image field sizes.
Get the url of an image instance given the image key.
Returns the rendition key set for the given key.
Formats an instruction for printing.
Formats the instructions of a function.
Decodes a bytecode into a sequence of instructions.
Decodes a module into fragments.
Connect to the server.
Read and parse AMI results.
Parse AGI code check result.
Check AGI response code.
Reset all instances to their default values.
Return the list of instances in this group.
Get metadata from distro.
Get the primary keys of a model.
Deserialize a value into a related model instance.
Get an existing instance for the given query and value.
Add the declared fields to the model.
Load data from database.
Split the kwargs for a model association.
List all snapshots.
Restore a snapshot.
Shuffle indexes at the end of each epoch.
Apply Textacy's clean_text function to a string.
Apply a function to a list of data in parallel.
Apply the tokenizer to the text and return a list of tokens.
Process text in parallel.
Generate statistics about the document length.
Returns the word counts in the index as a pandas dataframe.
Maps a param type to a list of types.
Parse the interfaces and return a dictionary of parsed interfaces.
The inverse of the transform.
Calls `on_dup` with the value of `args` and `kwargs`
Returns a copy of the FWDM object.
Return a copy of the simulation.
Returns True if two mappings are identical, and their values are equal.
Return an inverted version of an iterable.
Remove all data from the FWDM and InVM.
Move a node to the end of the list.
Write text to a temporary file and return its name.
Merge args into config.
Load all address books with the given names.
Create a new contact or modify an existing contact.
Displays the birthdays of a list of vCards.
Search for phone numbers in a list of vCards.
List the contacts of a vCard or list of vCards.
Modify a vCard.
Remove a sub-command from a vCard.
Runs the source editor command for the given vCard.
Merge vCards from one user to another.
Given an alias, return the corresponding action.
Create a new contact.
Create an addressbook from a file.
Create a Contact instance from a user input.
Create a Contact instance from an existing contact and a new user input.
Returns a list of the names of the specified part of the vCard.
Adds a list of categories to the vCard.
Parse the type value.
Convert a list to a string with the given delimiter.
Convert a string to a datetime object.
Compare two UIDs.
Search for all contacts that match the query.
Search for contacts by full name.
Search for contacts by UID.
Perform a search against the database.
Returns a dictionary mapping short UIDs to their contacts.
Returns the short form of a UID.
Finds all vCard files in the source directory.
Loads a list of VCards from the directory.
Get a book by name.
Return a dict of available architectures.
Return a dict of available architectures.
Guess the type of the kwargs.
Performs a replace query with the given kwargs.
Returns the first object in the queryset.
Delete rows from the result set.
Returns the value of the given prefix in the given Redis destination.
Estimate the amount of work in a particular index.
Count the number of documents matching the given filters.
Return a connection to the database.
Return a list of all the words in val that are in full text.
Add an object to the session.
Returns the value of the given primary key.
Writes the data to Redis under the given key in the given namespace.
Saves the object to the database.
Deletes the object from the database.
Get one or more objects from the database.
Open a SEM file.
Send back a result to the result queue.
Add work items to the call queue.
Ensures that no more than the maximum number of processes are running.
Start the server.
Duplicate a file descriptor.
Wait for all pending jobs to complete.
Prepare process from data dictionary.
Close all open file descriptors.
Recursively terminate a process without psutil.
Recursively terminate a process.
Returns a list of exit codes that have been terminated.
Format a list of exit codes into a string.
Ensures that the process is running.
Returns the event processor for the given frame and event.
Split a string into a list of arguments.
Get the stack from a frame and traceback.
Run a series of hooks on an object.
Forgets the current stack frame.
Return the value of the arg, or None if the arg is not an integer.
Processes commands and returns the result.
Start a command file.
Returns the position of the next token after start_pos.
Print an error message.
Read a command from the terminal.
Close all streams.
Disassemble a bytecode object into a bytecode.
Count the number of frames in a frame.
Return the name of the function called at the given frame.
Prints the stack trace of a process.
Looks up a subcommand by prefix.
Display the short help for a sub-command.
Add a sub-command.
Run a sub-command with the given argument.
Show help for a specific category.
Runs the line-info command.
Finds the frame in the debugger that is being debugged.
Returns the value of the arg as an integer.
Set the value of ``obj.name`` to ``true``.
Sets the value of a setting.
Show the value of ``show_onoff`` in the debugger settings.
Prints the value of ``what`` in the debugger settings.
Prints the value of a run.
Checks if the given line is a def statement.
Is `frame` a class definition?.
Quit a threaded application.
Return True if foreground color is not set, False otherwise.
Check if the given RGB values are dark.
Return the signature of the given frame.
Returns a list of all display names.
Returns a list of string representations of the given frame.
Read a single message from the socket.
Displays debug information about the remote TREpan instance.
Runs the debugging thread.
Pretty print a simple array.
Look up the signal name for a given number.
Look up a signal by its name.
Returns the canonic name of the given number.
Set the replacement value for a signal.
Check and adjust all registered signal handlers.
Print information about a signal.
This method is called when the user clicks on a signal.
Set the print method of a signal.
Handle SIGTERM and SIGINT signals.
Get module name from file name.
Search for a file in one of the directories.
Search for a file in one of the given directories.
Return a list of python files for the caller's directory.
Writes a message to the output.
Print out a message about the process.
Sort and columnize a list of commands.
Close the connection to the serial port.
Write a message to the connection.
Complete an identifier.
add a string to the queue of commands.
Add frames to ignore.
Return canonical path for filename.
Return the filename of the main Python file.
Returns True if Tracer is started and has a tracedispatch hook.
Check if we should stop here.
Set the next frame in the trace.
Prints a stack trace for the given function.
Delete a breakpoint.
Deletes a breakpoint by its number.
Disable all breakpoints.
Disable a breakpoint by number.
Delete all breakpoints for a given file and line number.
Open an input file for reading.
Read a line from the terminal.
Prompt the user for confirmation.
Convert a query to a future.
Restore the original login session.
Loads the module and returns the can login_as attribute.
Iterate over all documents.
Transcodes a file to a stream.
Normalize data in a stream.
Convert a date string to a datetime object.
Detect the encoding of a file.
Stream lines from a file as JSON objects.
Transcode a file to UTF-8 using the given encoding.
Open a CSV file in Python 2.
Yield rows from a CSV file.
Entry point for the transcode script.
Save a token to a file.
Makes a request to the luminoso API.
Make a DELETE request.
Return the root url of a URL.
Save the token to a file.
Sends a request to the Liliso API and returns the JSON response.
Make a POST request to the API.
Get the documentation for this project.
Make a GET request to the API.
Print result as CSV.
Reads and parses params from input file or json body.
Simplify a single document. :param doc: The document to simplify :type doc: dict
Create a project with a list of documents.
Upload docs to a Google Music project.
Upload documents from a stream to a LiPD server.
Upload a file to a Google Music account.
Main entry point for the script.
Returns a LeadinosoUser object given a username and password.
Logs the user in and returns the login page.
Posts a login page to the GitHub API.
Fetch data for each period.
Prepare the view for rendering.
Initialize the handler.
Renders the view and writes it to the client.
Called when a change is received from the server.
Update the menus of the page.
Return a list of default handlers for this site.
Called when a change is received.
Called when the DOM has been modified.
Create the underlying widget.
Initializes the widget from the current declaration.
Destroys the widget and all its ancestors.
When a child widget is added, add it to the widget list.
Called when a child widget is removed.
Iterate over all child widgets.
Sets the value of an attribute.
Handle a change to the proxy.
Notify that a change has been made on the root element.
Execute an XPath query on the server.
Initializes the widget based on the declaration.
Sets the source of the widget.
observe the mode of the block.
Called when a block is changed.
Update the children of this node.
Reads the contents of a file located relative to the project directory.
Print msg to stderr and exit with exit_code.
Print an error message and exit.
Get a product by name.
Create a new session.
Resets the store to a freshly created token.
Returns a list of stores that match the given search term.
Set the delivery system for a store.
Returns the menu for the given store.
Adds item to basket.
Add a cart to a basket.
Add side to basket.
Remove an item from a basket.
Set the payment method for your account.
Process a payment.
Perform an HTTP GET request.
Perform an HTTP POST request.
Calls an API method.
Add an item to the menu.
Add an exit item to the list.
Draw the menu.
Process user input.
Selects the currently selected item.
Create a curses menu from a parsed menu data dict.
Convert a string column to a datetime.
Convert datetime to string.
Apply a mathematical operation to a column in a DataFrame.
Calculates the cumsum of a column in a DataFrame.
Remove oldest entries from a cachedir.
Adds an offset to a date object.
Returns a list of updates to the model's parameters.
Get the training parameters of the network.
Optimize the gradients and update the free parameters.
Compute the first sensor to be used with glimpse.
Prepares the encoder, decoder and classifier for training.
Computes the cost of encoding, decoding, and classification on X.
Apply a function to each element of the dataset.
Vectorizes the target set.
Logs the current training set and validation set.
Train the model.
Samples from the given input using the given number of steps.
Computes the alignments between the previous and current state.
Computes the context vector for the given inputs.
Concatenates a sequence of variables.
Pad dataset with zeros at the end along the time axis.
Core function for the RMSProp problem.
Ends the timer and prints the elapsed time.
Runs the cost function on the given data.
Runs the algorithm and compares the results.
Build the loop variables for the computational graph.
Apply a scan step to the graph.
Compute the core of the momentum computation.
Conditional if-else branch.
Skips the specified number of batches and epochs.
Loads parameters from a file.
Train the network.
Run a single training step.
Runs the valid set on the model.
Prints a report to stdout.
Returns the current set of data.
Apply a function to the tensor and return a new neuralvariable.
Prints a report of used parameters.
Returns a TensorVar with the given tensor_type.
Create a list of neural variables from a dataset.
Create a shared variable.
Stack multiple encoder layers.
Add decoders to the stack.
Encodes the input tensor using the encoding layer.
Apply the decoder to the input data.
Create a 2D gaussian with the given sigma.
Registers a layer with the model.
Record the number of hidden outputs for each layer.
Returns a list of all parameters.
Sets up the input variables and test outputs.
Computes the result of evaluating the function over the given arguments.
Save the model parameters to a file.
Load parameters from a file.
Prints a report of the current state of the model.
Registers a list of updates.
Register new training updates.
Add one or more monitors to the cluster.
Compute the L2 norm of a list of tensors.
Pickles an element and writes it to a file.
Yields the elements from a file-like object.
Loads model parameters from file.
Decode a state from base64-encoded URL.
Parses the credentials from the given data dictionary.
Filter the request elements based on the request type.
Logs the user in using the specified provider.
Return a copy of the given dict with empty values removed.
Convert a list of key-value pairs to a dictionary.
Try to parse a JSON string into an ElementTree or a dict.
Resolve a provider class.
Create a cookie that will be sent to the client.
Save session data to cookie.
Get the data from the cookie.
Get the data from the API.
Calculate the signature of the request.
Return a serialized version of the value.
Returns True if the token is valid.
Returns True if the token will expire in the given number of seconds.
Return a string representation of this instance.
Check if content is a binary string.
Returns the content of the response.
Overrides the default access_user_info method by fetching the user_email_url
Logs the user in and redirects to the login page.
Return the session key for the given key.
Sets the value for the given key in the session.
Generate a random csrf token.
Log a message to the authomatic logger.
Return True if status is within category.
Split a URL into a base URL and a query dictionary.
Add CORS headers to the response.
Returns a dictionary of keyword arguments for the given app instance.
Return a string representation of an object.
Ensure inst is iterable.
Return True if a is close to b.
Deserialize a string representation of an audio segment.
Create an audiosegment from a file.
Create an audiosegment from a numpy array.
Reduce this segment by concatenating the others.
Returns a serialized version of the object.
Choose the offset front id from the candidates.
Find the offset_front_id after the onset sample idx.
Get the offset_front_id after this onset front.
Match the onset front id to the onset front id.
Given a list of onset_fronts and a list of offset_fronts, return
Return the ID of a front row given its index.
Iterate over the onset_fronts one at a time.
Given a list of onset indices and a list of offsets, return a list of tuples
Remove any overlaps between fronts and segmentation_mask.
Remove fronts that are too small.
Merge adjacent segments into a new segment mask.
Split a mask into separate masks based on a given threshold.
Downsample one or the other from the mask to the stft.
Assemble masks using the signal.istft function.
Apply a bandpass filter to the data.
Apply a low-pass filter to the data.
Convert a list of rows to one-hot input.
Expand and standardize the dataset.
Returns True if a and b are not equal ignoring the order.
Loads the confusion matrices from an audit log file.
Convert a list of rows to a tf.Input matrix and a list of outcomes.
Determine the PyPI API URL based on configuration files.
Automatically detects requirements files.
Handles the given error code.
Get information about the stream.
Open the stream for reading.
Find the first child element with the given name.
Find the next sibling of this element.
Find the previous sibling of the element.
Set the name of the lsl.
Set the value of the lsl element.
Append a child element to the end of this element.
Prepend a child element to this element.
Append an element to the end of this element.
Prepend an element to the start of this element.
Remove a child from this lsl.
A list of stream infos describing the resolver.
Pair a query with a key.
List edge n-grams in a query.
Computes the n-grams that are in the given token.
Iterate through a pipe.
Apply a function to each element of an iterable, in a non-ordered fashion.
Make a fuzzy word.
Fuzzy spelling of a word.
Fuzzy index a word.
Extend the result bucket with all the relations that are present in the DB.
Print help for all available commands.
Show information about redis databases.
Get or set the value of a key.
Implement geohash command.
Index a document.
Get the best score for a word.
Sends the given tornado.response.Response.
Takes a list of requests and returns a list of response objects.
Get a set of bits from an array.
Reinterpolate a HArray to a given bit vector.
Convert a slice to a slice object.
Find files in a directory that match a pattern.
Return True if all elements of iterable are in sigorval.
Apply a function to each item of a sequence.
Return the ceiling of the logarithm of x.
Checks if a number is a power of two.
Add a case statement to the expression.
Set the default statement for this node.
Register interface and units in a subscope.
Called before a simulation is started.
Log a change.
Generate code to call a process method.
Auto-add agents to each interface in the unit.
Get the DCK associated with this unit.
Yields elements from `iterable` but retaining the order in which they occur.
Group a collection by a function.
Flatten an iterable.
Merges nested if fromelse clauses.
Removes all unconnected signals from a network.
Check if a statement is an assignment statement.
Try to merge two processes.
Reduce a list of processes.
Called when a request is received.
Given a list of HDL statements, return the name of the output that should be processed.
Cut off drivers of a signal from a list of statements.
Synthesize this entity.
Get the maximum ID for a STM.
Return the maximum statement ID that can be used to identify a statement.
Writes data to the simulation.
The direction of the robot.
Populates the internal interfaces with their declared attributes.
Returns a list of all signals that can be bound to this interface.
Returns the physical name of the port.
Return the bit length of this struct.
Returns the sensitivity level of an operation.
Convert the sign or sign of this bitvector to the given type.
Reinterpret sigorval to hstructt.
Return the number of words in the sequence between start and end.
Split on words and group by word index.
Pack the given data into a sequence of packed bits.
Clean the meta data of all signals.
Given a list of statements and a list of outputs, return a set of statements that are enclosed
Discover the casual sensitivities of the given signals.
Returns the RTL context.
Called when the driver is reduced.
Merge this statement with another.
Check if a list of statements is mergable.
Merge a list of statements into a single list of statements.
Merge two lists of statements.
Try to reduce a list of statements.
Calls the on_parent_event_dependent method of each StateManager in this StateManager
Set the parent statement for this statement.
Register the given statements with the given target.
Destroy this statement.
Clean up references to assubunit and asinterfaces.
Flatten union, struct, and array fields.
Return a copy of self with the sign bit changed.
Add a process to the set of similiar processes.
Perform a simulation to evaluate a condition.
Called when a sub-simunit connects an import signal.
Convert a value to a vector of the given width.
Register all events in the given process.
Evaluates the given parameter.
Set the value of the field.
Convert an intfmap to a hstruct.
Remove all memories.
Get the index cascade of the signal.
Convert a Python object to this property's value type.
Automatically casts the given value to the given type.
Reinterpret the given signature or value to the given type.
Recursively walk the parameters of an interface and add them to a set of discovered parameters.
Return a list of connections from srcpacked to dstinterface.
Pack an interface into a binary polynomial.
Runs the tortl implementations for this unit.
Registers an interface and calls the signals for it.
Try to reduce and value.
Try to reduce a signal by performing an XOR operation.
Returns a new name scope containing all the keywords in this scope.
Return True if the object should be serialized.
Return the first non-negative BAF element of a binary expression.
Computes the bitwise signedness measure of a given bitwidth.
Returns the name of the constant with the given value.
If the destination is the signal, set the parentstm to None.
Load from array.
Load from hstruct.
Load data from a HDL type.
Get the width of the array item.
Flatten a structure into a sequence of tuples.
Signs a value so that it fits in width.
Get an indentation string for the given indent number.
Raises an intflvlconferr if the name of the property is not available in the
Registers a parameter with this scope.
Update all the parameters in this scope with those from another scope.
Registers a unit with this unit.
Registers an interface in this context.
Register a new array with the given name.
Return a single driver.
Performs a static evaluation of the expression.
Create a new signal with the given operands and rest.
Return a copy of this context with an additional indentation level.
Try to connect to the destination if not already connected.
Propagate clk for all units in obj.
Propagates the clk and rst_n values to all units in the object.
Propagate clk and rst to all units.
Propagate the RST to all other units.
Propagate the RST of the object.
Iterate over the specified number of bits in the signal.
Evaluate the exclude clause of a serialization.
Evaluates the serializeonce evaluation of the parent unit.
Does the serialization of the params uniq?.
Get the full name of the object.
Make associations for all objects in the collection.
Return the simulation model for the given unit.
Reconnect the signals of the given synthesised unitor to the given model.
Generate a VCF file with simulated model and stimul functions.
Initializes the ontwritecallback for the simulation.
Connect this signal to another signal.
Register an intermediate signal.
Connect this driver to an intermediate signal.
Returns the intermediate signature of the destination segment.
Determines if a signal is evdependent on a given process.
Add a new process to the scheduler.
Adds a process to the list of processes to run.
Schedules an event to be run when the combo update is done.
Schedules the values of the measurements to be applied.
Returns a conflict resolving strategy for the given value.
Run all combinator processes.
Runs all registered seq processes.
Coroutine to apply values to the state.
Return the value of the given signature.
Write a value to the signal.
Add a process to the scheduler.
Simulate a unit.
Convert ternary operator to if.
Calculates the distance between two hashes.
Calculate the average hash of an image.
Computes the distance between two images.
Set up the vizio device.
Update the state of the power sensor.
Mute or unmute the volume.
Move the volume up.
Reduces the volume level by one step.
Sets the volume level of the device.
Resets the board to its initial state.
Returns the piece at the given square.
Removes a piece at a given square.
Sets the piece at the given square.
Checks if the given move is a suicide or check by dropping the pawn.
Checks if the king was suicide at the given position.
Checks if the game is over.
Checks if the move is a checkmate move.
Is this a fourfold repetition?.
Pops a move from the stack.
Returns a list of strings representing the board.
Pushes a move from USI to the board.
Calculates the Zobrist hash of the given array.
Returns the symbol for the piece.
Create a Piece instance from a symbol.
Returns the USI code for the move.
Create a Piece instance from a USI string.
Parse git commits. :param data: data to parse :type data: str :return
Parse a commit from a list of lines.
Execute from command line with config.
Generate a yaml representation of the configuration.
Casts the given value to the type specified by the cast_as attribute.
Returns a list of dates between first_date and last_date.
Parse a date from a string.
Load currency data from file.
Set missing values to None.
Given a currency and date, return the rate for that date.
Animate a series of frames.
Read a record from the file.
Write a record to the file.
Map a range of words to a memoryview.
Returns the comments of the file.
Close the FITS file and free memory.
Compute the position at a given temperature and return it.
Closes this FITS file and its associated segments.
Loads the data from the input file.
Set up logging for a call node.
Check if the binary operator is within the logging argument.
Suppress warnings for non-whitelisted keys.
Check if the string is within the logging statement.
Check if the argument is in the whitelist.
Add the name of the exception handler to current_except_names.
Detects the logging level of a node.
Return the name of the except handler for the given node.
Returns the id attribute of the given value.
Check if a node is a bare exception.
Add an exception info violation to this node.
Deletes a file from the database if it has changed.
Returns the rendered content of the PDF.
Overrides Django's render_to_response method to set the filename and cmd_options
Quote a string for use in an HTTP header.
Configures the options for the given module.
Convert camel case to underscore.
Ensure all indices are present in the collection.
Parses a list of price models from a file.
Loads the content of a file into a list.
Parse a line of price model data.
Translates a symbol.
Loads all available symbol maps.
Returns the session object.
Import price data from CSV file.
Show the latest price for a security symbol.
Download price data from pricedb.
Delete all security entries for a given security symbol.
Get the default session.
Add a new price map.
List all price maps.
Get symbol by id.
Reads lines from a CSV file.
Maps a dal entity to a price model.
Maps a security price model to an entity.
Reads the configuration from a file.
Return the path to the config file.
Create the user config file.
Returns the path to the config file.
Get the contents of the file in memory.
Set an option's value.
Get the value of a config option.
Saves the contents of the configuration file.
Parses a symbol into namespace and mnemonic.
Adds a price model to the event.
Download price for given symbol, currency and agent.
Gets the dal session.
Get all prices for a given date and currency.
Returns price for a given namespace and symbol on a given date.
Prune all security items.
Prune all bids for a security symbol.
Fetch price from Yahoo Finance.
Get all securities.
Return a partial version of the state.
Update the partials of all child calls.
Recursively descend the tree.
Test whether the student has chosen the correct answer.
Returns a copy of the items in this collection that are not empty.
Internal helper to get a parser from a tree.
Check if there is a context loop.
Check if the current solution has a context with one of the specified names.
Check whether a student or solution part exists.
Check that the student and solution parts have the given index.
Return the true anomaly.
Initializes the application with the given app.
Adds a server to the LDAP database.
Decontextualise a connection.
Teardown the context.
Authenticate using username and password.
Attempts to bind the user to the LDAP server.
Get a list of groups a user is a member of.
Get user info for a given DN.
Get user info for a given username.
Get object by DN, filter and attributes.
Returns a connection to the LDAP server.
Establish a connection to the database.
Make a connection to the LDAP server.
Destroy the given connection. :param connection: The connection to be destroyed :type connection: Connection
Performs a search and returns a list of results.
search the database.
search for all jobs in a collection.
speak to the database.
Announce to the user. :param command: The command to announce :type command: str
get the secrets from the environment and set them in _secrets.
update the headers of this message.
require secrets for this client.
download url to file_name.
stream a file from a url.
update the token in the given dict.
Get a folder or create it if it doesn't exist.
Read the message from the response.
get the bucket to use.
Reads the client secrets file and populates self.secrets and self.base.
Initializes the native app authentication client.
Loads the secrets from the server.
Lists the logs for the service.
list all the logs in the bucket.
create a folder for an endpoint.
Initializes the transfer client.
search for all containers.
Show status of client secrets.
add a value to a secret backend.
remove a variable from a particular backend.
Activate a client secret backend.
Delete a secret backend.
Update the base for the image.
Create a basic auth header.
Generate a HMAC-SHA256 signature for a payload.
Generate a HTTP header signature.
make a DELETE request.
send a HEAD request to the url.
Paginate a URL and return a list of results.
check if SSL verification is enabled.
remove an image from the registry.
Get the version lookup from the version file.
Return a list of requirements from a lookup dictionary.
get the singularity version.
check if installed software is available.
Returns the absolute path to the directory containing the package.
Returns the path to the thumbnail image for sregistry.
Run a command and return its output.
Get image metadata from dbx file.
gets the current user's dropbox account.
print the output to a file.
Destroy all registered commands.
List logs of a container.
Returns a list of collections in the account.
get and update the secrets setting.
Announce and embed a command in an IPython notebook.
get manifests for a repository.
get a manifest for a repository.
Returns the path to the cache directory.
extract the environment variables from the config file.
get and update the base.
Update secrets in the request headers.
Get the metadata for the job.
Reads the client_secrets file and returns the settings.
get and update a setting.
Update a setting on the backend.
Generate an authorization token.
list all builders for a zone.
load templates by name :param name: name of template to load :type name: str :
get the ip address of an instance.
create an instance in the cloud.
list all the containers in the bucket.
search all the containers in the bucket.
List files in the registry.
CLI entry point.
init the database for the registry.
get the build template.
list all available endpoints.
list all files for an endpoint.
share an image with dropbox.
Reads the client secrets file and returns it as a dict.
Set up the services for this client.
Delete an object in a bucket.
delete a file from S3.
destroy an instance.
Returns a dictionary of all sub-parsers for the given parser.
Generates a string consisting of the descriptors, nouns and numbers.
Get a temporary directory.
extract a tar archive to a folder.
extract a tar archive to a folder.
Get the hash of a file.
Open a file and return its content.
Read a JSON file.
clean up a file or list of files.
push an image to S3.
Get or create a collection with the given name.
Get a collection by name.
Get a container by name, collection ID and tag.
display a list of images in the registry.
Inspect a container by name.
rename an image to a given path.
move a container to a new location.
remove a container.
Parse a header from a recipe.
Attempts to find a single recipe for a given file.
create a tarball of package_files and return the hash.
Update a blob's metadata using a response from S3.
Formats a container name so that it can be used as a container name.
Determine if the terminal supports coloring output or error streams.
Returns True if the logging level is one of abort, warning, verbose.
Writes a message to the given stream.
Prints a table with the given rows.
push an image to the server.
get a template by name :param name: name of the template :type name: str :
get the manifest for a given image.
get a build template.
get and update the client secrets.
Handles common S3 errors.
Create a proxy for a file.
Returns a gravatar url for a user.
Returns a gravatar url for the given email.
Check if email has a gravatar.
Get the gravatar profile url for a given email address.
Generate blocks of chimera data.
Given a graph and a dict of blocks, return a graph representing the blockquotient.
Enumerate all the mesomer with the given SMILES.
Enumerate molecules.
Apply transformation to molecule.
Canonicalize a molecule.
Validate a SMILES string.
Convert SMILES to SMILES.
Enumerate tautomers from a string of SMILES.
Canonicalize tautomer SMILES.
Return the parent molecule of a tautomer.
Return the parent fragment of a molecule.
Return the stereo parent molecule.
Set the isotope parent of a molecule.
Return the uncharged parent of a molecule.
Main entry point for the command line interface.
Remove a molecule from the structure.
Choose a molecule from a list of molecules.
Integrates the model with respect to a given parameter.
Get mems of org.
Get teams of org.
Get all repos in the organization.
Returns the total number of contributors for a repository.
Get the number of open and closed pull requests for a repository.
Get the list of issues for a repository.
Get the readme for a repository.
Get the license for a repository.
Get the commits for a repository.
Write a JSON file for a particular organization for a specific date.
Writes the totals to a file.
Write languages to a txt file.
Check if directory exists.
Remove a date from a CSV file.
Return a list of organizations supported by US Government.
Create an enterprise login session.
Check the API limit for the given session.
Connect to GitHub.
Query repositories within GitHub organization.
Get an organization from Github.
Writes the star gazers to a file.
Create a project from a gitlab repository.
Return the license object for a license string.
Get all the information about repositories.
Get a list of releases for a repository.
Get referrers for a repository.
Get data from Github API.
Writes a JSON file with the contents of the given dictionary.
Writes the data to files.
Check for data redundancy.
Writes data to a CSV file.
Write referrers to a file.
Yield DMECodeRecord objects from JSON file.
Get DOI code from given URL and key.
Process a JSON file or URL.
Attempts to log in to github.
Get memes of org.
Writes the list of logins and emails to a file.
Establish a connection to a BB instance.
Connect to GitLab.
Query projects by repositories.
Compute labor hours for a person given a location.
Prune null values in dictionary.
Read a GQL file.
Asynchronously reset the countdown timer.
Countdown wrapper for countdown.
Load data from a file.
Save the data to a JSON file.
Create a connection to the TFS server.
Create a TFS Project Analysis client.
Create a TFS core client.
Create a TFS Git client.
Create a TFCS TensorBoard client.
Get a list of git repositories for a project.
Returns a list of branches for a project.
Get the number of commits for a given year.
Calculate the total number of commits for each week.
Writes out the list of commits to a file.
Log a timing information.
Log a histogram of values.
Roll up metrics and histograms.
Get the value of the field from the database.
Converts the given value to the appropriate value for the field.
Returns the name of the given enum value.
Resolve a path to a set of facts.
project a list of Usls into a dictionary containing all the Usls that are contained
Return the mean value of the histogram.
Mark the occurrence of a given value.
Return the mean rate of the timer.
Set the value of the time series to value.
Serialize and send a metric.
Serialize a metric to a list of strings.
Format a metric name, value and m_type into a string.
Add a metric string to the batch and send it.
Override the default get method to raise an exception if the option is missing.
Ensure that data is JSON-safe.
Get the value of an option or set it if it doesn't exist.
Returns a dictionary mapping ledger codes to their GUIDs.
Get a list of available divisions for the current user.
Maps the Exact Invoice Numbers to the Foreign Invoice Numbers.
Create an Injector for a view.
Provide the form view binding.
Decorator that registers a view method with the given injector.
Create an Injector for an API view. :param injector: Injector for the view :
Create an Injector for a generic API view.
Provide a viewset that will inject model methods into the Injector.
Create an asyncio stream from a file descriptor.
Called when the connection is ready to be read.
Close the connection.
Add a request to the watchlist.
Remove a watch entry from the context.
Setup a watch for a file.
Setup the IOLoop for this watch.
Get an event from the server.
Triggers the touch event.
Update the interval to match the duration specified in the constructor.
Called when the timer has failed.
Close all redis connections.
Connect to an ElasticSearch Nsqd.
Perform a query against the lookupd service.
Set the maximum number of records that can be fetched.
Logs a warning message about a failed attempt.
Adds a callback to the given name.
Unregisters a previously registered listener.
Triggers an event with the given name.
Publish a message to a topic.
Set the feature transform mode and degree.
Returns the prediction of the model.
Remove unpaired fastq files if clear is True.
Reads a depth file into a dictionary.
Set the template path.
Set the channel names for the input and output files.
Render a Jinja2 template with the given context.
Render and return the template string.
Add a sink to the main forks.
Update the attributes of the current route.
Sets the secondary inputs for the channel.
Parse an assembly file into contigs.
Get the GC content of a sequence.
Get the total length of all contigs.
Write the assembly to a file.
Write the report to a file.
Remove all inner forks from a string.
Run insanity checks on a pipeline string.
Given a fork process and a pipeline list, return the lane in which the fork is running.
Parses a string of lanes into a list of lanes.
Builds a linear connection from a list of points.
Add identifiers to pipeline string to make it unique.
Remove the unique identifiers from the pipeline tags.
Check that required files exist.
Return a mapping from header name to header position.
Convert a string representation of a histogram to a float.
Return the size coverter of a string.
Extracts pipeline processes from the log file.
Clears all information about the process and its processes.
Update the status of the bus.
Retrieve the log file at the given path.
Assemble warnings about memory and CPU resources.
Calls the log_parser and trace_parser methods.
Display the overview in the terminal.
Up or down in the given direction.
Left-left padding on the screen.
Get the last n lines from the log file.
Reads the static info files for the pipeline and returns them as a dictionary.
Loads the DAG file into a dictionary.
Compute and return the hash of the run.
Get the nextflow filepath from the log file.
This is the main function of the tool.
Run an automatic innuendo pipeline.
List all recipes.
Validate a pipeline string.
Recursively builds the upstream pipeline for a given task.
Recursively builds the pipeline for a given task.
Builds and runs the pipeline for the given list of tasks.
Return a string representation of a component.
Writes the report to a json file.
Parse log files and write to file.
Fix contig names in an asseembly assembly.
Clean up files in fastq files.
Parse a list of files.
Parse a file and store it in the self.storage dictionary.
Extract the contig ID from a contig string.
Writes the report data to a json file.
Parse the contigs in the assembly file.
Summarize contig sizes and size of sequences.
Get the labels for each contig in a window.
Calculate the percentage of total GC in a segment.
Calculate the number of GCs in decreasing order of appearance.
Main function for SSKESA tool.
Writes a JSON report of the quality scores for a sample.
Parse the bowtie log file.
Parse process name from string.
Adds a dependency to the list of processes.
Searches the tree for processes with the given template.
Build the header of the email template.
Add footer to template.
Sets the initial process.
Set secondary channels for each source.
Sets the status and report compiler channels.
Return the manifest string for the pipeline.
Render all the configurations.
Writes a DAG to the output file.
Writes the configurations to the project root.
Exports the current state of all processes to stdout.
Export directives to stdout in JSON format.
Build the NPF file.
Set kmers from command line options.
Get report id from report file.
Update the trace file to watch for new traces.
Update the size of the log file.
Sends a live report to the server.
Initiates a live report.
Closes the connection to the report.
Convert a fasta adapter to a fasta adapter.
This is the main function for mash.
Return a colored printed string.
Collector function for the process map.
Get the range of a quality string.
Filter an assembly file to only include contigs with coverage above the minimum coverage.
Get the assembly size and contig size from an assembly file.
Main entry point for filtering BAM files.
Convert name to camel case.
Collect a dictionary mapping component names to component classes.
Writes a tree to a newick file.
Maps self.w to self.data.
Apply a median filter to the data.
Compute a Gaussian log-likelihood for a given number of steps.
Compute the semissm of x.
Compute the netcdf of a graph given a graph and a graph.
Apply Gaussian filter along given axis.
Computes the ENuclidean distance between all pairs of points.
Circular shift of an array.
Empirical embedding space.
Plots the formatting of the estimates.
Plots the boundaries of an est file.
Plots the labels of the est_file at the given times.
Given a feature vector f, return a list of feature segments.
Computes the 2D multi-dimensional discrete Fourier transform for a set of features
Fit the scattering model to the data.
Read reference times and labels from jam file.
Find an estimation for a set of parameters.
Returns a list of all boundary algorithm IDs.
Get the configuration for the MSM algorithm.
Get a list of dataset files.
Read hierreferences from jams file.
Get duration from features file.
Write out a mirex file.
Get the dataset file for the audio file.
Find the beats that match the segmentation of a song.
Estimate the times and frames of this track.
Read ann beat annotation file.
Computes the beat-sync features for the given frames and times.
Get the names of all parameters.
Computes the times at which each frame is synchronised.
Returns the times at which this feature was played.
The audio features of the audio file.
Preprocess the feature string to a feature object.
Post-process and synchronize labels.
Main entry point for the tool.
Print the mean value of the results.
Compute the information gain.
Process a track and return the results.
Get the results file name.
Compute all the features of the audio file.
Compute all features in a dataset.
Gaussian cost function.
Log-normalize a function.
Return a normalized version of the input array.
Get an array of time frames for a given duration.
Remove empty segments from a list of times.
Sonify audio by clicks.
Synchronize labels from bound indices to new labels.
Process segmentation level.
Align end-hierarchies of two hierarchies.
Computes the distances between the elements of self.data at indices idx.
Estimate the knees by running kmeans, compute_bic, compute_bic
Returns the data that is clustered according to the given label index.
Run k-means on the given data.
Computes the Bayesian Information Criteria for the given data.
Returns the magnitude of a complex number.
Convert a JSON file to a NumPy array of bounds.
Load bounds from json file and return as numpy array.
Extract labels from segments.json.
Convert a JSON file to a NumPy array.
Computes the 2D FFT and shift of a 2D array.
Compute the labels of a signal using a convex hull.
Filter an activation matrix using median filter.
Returns the boundary module for the given boundaries_id.
Returns the module for the given labels_id.
Runs the hierarchical segmentation algorithm.
Run a flat segmenter.
Entry point for the transliteration script.
Set up a task for translation.
Spool an iterable.
Read from inputstream and write to target.
Get the translation table for a language.
Print the translation table for a given language.
Remove nodes and edges from a network.
Write a Network to a Pandas HDF5 file.
Loads a network from a saved HDF5 file.
Process a node element.
Make an OSM query from a query string.
Build a node query string.
Return True if value is a regex expression.
Compares the given value with the given expectation.
Compare a string expression with a value.
Trigger a set of methods on an object.
Get a matcher by name.
Initialize a matcher with the given arguments.
Set the body of the message.
Set the response body as JSON.
Set a value in the container.
Appends functions or methods to the target list.
Trigger the request on the given instance.
Sets the headers for the current request.
Shortcut to add a header present matcher.
Ensures that the given headers are present in the message.
Set the params for the current request.
Sets the request body.
Sets the JSON request body.
Sets the xml of the request.
Opens a file and writes it to the response body.
Set the persist flag.
Set the error.
Reply to the request.
Match a request against this mock.
Set the mock engine for this device.
Create a Mock object and add it to the engine.
Remove a mock from the mocks list.
Activates the mock engine.
Disables the mock engine.
Should we use the network filter?.
Match a request against all registered mocks.
Return a copy of this request.
Context manager to temporarily switch to a new network.
Add interceptors to the chain.
Remove an interceptor by name.
Get the value of a Django setting.
Returns the decrypted column as SQL.
Sets the value of the field to the original value of the model instance.
Get the encryption placeholder.
Get a column from the database.
Returns the encryption placeholder for the given value.
Computes the base regression function.
Inverse covariance matrix.
Recurse into all nonterminals in the tree.
Calculates the averages for all nonterminals in the tree.
Calculates the variance of the explained variance of the tree.
Calculates the mean and variance of a Bayesian GLM.
Set the target temperature.
Calculate the branch count.
Cost function for a single branch at a given time.
Attaches the merger cost to all clades in the tree.
Normalize a profile.
Validate and set the GTR.
Set the GTR model.
Set the length of the sequence.
Attaches sequences to nodes.
Prepares the tree for analysis.
Sets up and cleans up nodes.
Calculate the mutation length of the root node of the tree.
Return the branch mutation matrix for a single node.
Returns the expanded sequence.
Get the state of a node intersecting with other nodes.
Returns the LH of the ancestral sequence at the given position.
Compute the ancestral log-likelihood of the tree.
Return the branch length corresponding to the given node.
Return the optimal branch length for the given node.
Reconstruct a multiple-seq alignment from the tree.
Negative eigenvalues of the covariance matrix.
Create a GMPE with custom parameters.
Adjusts self.w, self.w, self.q, and self.mu
Returns the optimal time step for a pair of sequences.
Calculates the probability of the given profile at a given time.
Evolve a profile at a given time.
Return the log-likelihood of a sequence.
Set branch length mode.
Plot root to tip regression.
Print the left-hand side of the unconstrained sequence.
Add a coalescent model to the tree.
Find the best root for a tree regression.
Assure the tree of the input ALAN file.
Create a GTR object from the given parameters.
Reads if a VCF file is present.
Calculates the FWHM from the given distribution.
Creates a new instance of DeltaFunction.
Assign dates to nodes in the tree.
Sets up the tree regression.
Makes a time tree.
Compute the log likelihood of the timetree.
Convert dates from years before present to actual dates.
Date uncertainty due to rate.
Returns the value of the minimun value of an interpolation object.
Interpolates the median value of a grid.
Returns the numeric year of the given datetime object.
Create a new DetectionContext from a regression dictionary.
Closes the connection to the Kafka broker.
Receive a line from the terminal.
Send data to the server.
Send an instruction to the server.
Convert unicode string to UTF-8.
Loads an instruction from memory.
Encodes the given argument as a UTF-8 string.
Return a string representation of the instruction.
Returns the URL for the given class.
Returns the URL for this instance.
Returns the URL for the class.
Download a file from the API.
Retrieve the parent object of this job.
Ask the user for their credentials.
Attempt to login using an interactive session.
Show the current user's profile information.
Print the user in a human readable form.
Return a new VariantList containing only the specified range of values for the specified chromosome.
Returns a new instance with the specified chromosome and position.
Returns facets for the query :param args: list of facets :param kwargs: dict
Takes a list of filters and returns a list of dicts.
Returns the next item in the result set.
Executes a query against the API.
Migrate a dataset to another dataset.
Entry point for the SolveBio CLI.
Construct an instance of this class from a dictionary of values.
Logout the user.
Retrieves the child task object associated with this task.
Parse SNP-Eff info.
Get the authentication credentials from the netrc file.
Save the configuration to a file.
Formats the given value.
Builds a row from a list of cells.
Build a line.
Return a list of column alignments for a row of MediaWiki format.
Migrate a dataset to another dataset.
Upload a file or directories to a Vault server.
Validates a full path.
Validate that the given url is a valid API host url.
Annotate a list of records.
Evaluates the expression and returns the result.
Sets the format_name of this FileCreateOrUpdateRequest.
Registers a new formatter.
Wraps the given data with tabulate.
Return the full path to the user config file.
Return a list of system configuration files.
Returns a list of paths to additional files.
Write the default config file to disk.
Read a list of config files.
Truncate a string to a max width.
Replace all occurrences of `replace` in `s`.
Calls a list of commands, stopping when one of them exits.
Applies the given option to the given command.
Set branch and fix options.
Run the git command.
Run clean_docs, html_docs, view_docs.
Truncate a list of rows and headers to a maximum length.
Formats a row of data.
Adapted from pandas.table.Adapter.
Generate an adapter for the given data and headers.
Return True if type is a number.
Return True if type is a boolean.
Checks if the given type is a binary type.
Generate a cryptographic key from a template.
Generate a keypair from a template.
Finds all the objects in the specified template.
Inserts an icon into the given image.
Export genes to a panel.
Return the first weekday of a date.
Repeats the occurrence of a given day.
Repeats the date range in reverse.
Internal helper for the biweekly method.
Handle a single chunk of the year.
Export variants from the database.
Returns a list of Mt variants as a list of lines.
Update role and institutes of a user.
Display a list of variants.
Retrieve a variant from the server.
Get a string representation of a variant.
Verify a variant.
Export a clinvar variant.
Return a list of cancer variants.
Create an ACMG for a variant.
Display an evaluation. :param str evaluation_id: ID of the evaluation :type evaluation_
Get ACMG for a list of criteria.
Upload a filter panel.
Download the verified Variants Excel file.
Given a list of HGNC IDs, return a dict of genes by their alias.
Add incomplete penetrance genes.
Make a request to MatchMaker.
Get a list of matchmaker nodes.
Get the coordinates of the cytoband at a given position.
Get the subcategory for a set of variants.
Get the length of a variant based on its type and position.
Get the end position for a given position, alt and category.
Parse coordinates from a Variant object.
Update a panel.
Export panel to PDF.
Edit a gene.
Load a delivery report for a case.
Returns a dictionary of HPO terms and their associated phenotypes.
Show all users' whitelist.
Builds the phenotype object for a given phenotype ID.
Get the gene record for the given HGNC ID.
Return a list of genes in JSON format.
Display a list of institutes.
List transcripts for a build.
Return a list of all the events of a certain day.
Retrieve a list of variants from the database.
Retrieve a list of variants matching the given query.
Retrieve information about a variant.
Returns the CSV header for variants export.
Get predictions from a list of genes.
Find a BAI file from a BAM file.
Returns the observations for the given variant.
Parse a single gene and add links to it.
Return a string representation of a transcript object.
Return the position of the end of the variant.
Determines the frequency of a variant.
Convert clinsig objects to human readable strings.
Return link to link to the thousandg database.
Return a link to the cosmics of a variant.
Return a link to the beacon for the given variant object.
Return link to Variant object in UCSC.
Determine if the variant is in a human-readable format.
Return a list of all the expected inheritance for a variant.
Get a list of all callers for a given variant.
Retrieve a list of cancer variants.
Export clinvar data.
Get the clinvar submission for a particular variant.
Retrieve the ACMG criteria for a variant.
Submit an evaluation of a variant.
Extend an evaluation object with institute, case, and variant.
Upload a panel of HGNC symbols.
Create an Excel file containing verified variants.
Export all genes from the given adapter.
Parse CLNSig and return a list of transcripts.
Parses a compound info string into a list of dictionaries.
List genes in a build.
Retrieve a case from the database.
List available collections.
Instantiate an institute.
Returns a file handle for the given file path.
Get the network number from the request.
Get the next and previous net numbers.
Check if year is valid.
Check if the weekday is in the year month and day.
Parse a list of individuals.
Parse a PED stream into a family ID and a list of samples.
Build an evaluation object.
Given a list of terms, return whether they are pathogenic, likely, or not.
Find variants in a case.
Retrieve sanger variants in a case.
Returns a Variant object for a document.
Returns a collection of gene variants.
Returns a list of variants verified for the given institute.
Return a list of causatives associated with an institution.
Check if there are causative variants in the institute.
Returns a generator of all other causatives of a variant in a case.
Delete variants for a case.
Get all variants that overlap the given variant_obj.
Get a list of all variants that have been evaluated.
Get variants for a sample.
Get a MongoDB connection.
Returns a list of dictionaries with variant IDs as keys and their values as values.
Returns the complete header for a clinvar submission.
Returns a list of submission lines from a list of submission objects.
Load a panel.
Build an exon object from a dictionary.
Delete a panel from the database.
Drop all indexes for all collections.
Delete a user from the database.
Drop all genes for a given build.
Drop exons for a build.
Delete a case.
List all individuals associated with a collaborator.
Show a list of cases.
Load a user from the store.
Log in a user.
Build an institute object.
Delete an event from the database.
Retrieve events for a given institute and case.
Get all events for a user.
Removes a phenotype from a case.
Parses a list of genotypes for a variant.
Check if the given coordinates are valid for the given chromosome.
Get terms from HPO.
List all transcripts.
Create exons for a build.
Load a region from the database.
Return all events for a given month.
Get all live reminders for the current date.
Parse requirements from requirements file.
Return the existing gene in the panel with the given HGNC ID.
Update a panel.
Create a new panel and add it to the store.
Export a panel object to a dictionary.
Get archive information from the database.
Migrate a case from scout to archive.
Show HPO terms.
Configure Flask extensions.
Register blueprints.
Show all aliases for a build.
Build a panel object from a panel info dict.
Return the number of verified variants for a given collaborator.
List variants in a case.
Returns a VCF entry for the given variant object.
Serve a mongo database.
Generate an MD5 key from a list of arguments.
Initialize the application with the given app.
Sets up the collections.
Update or load indexes.
Initialize a database connection.
Create a demo database.
Set up the database connection.
List institutes.
Parses the genetic models for a case.
List all panel objects for a given institute.
Add an institute to the database.
Get an institute object by ID.
Check if the given date string is a valid date.
Get a datetime object from a date string.
List HPO genes for a given term.
Parses the rank score entry for a case id.
Create a new user in the database.
Check if mongo connection can be established.
Loads a delivery report into the database.
Add a user to the database.
Show pileup of genome and exons.
Load exons into the ensembl database.
Update the compounds for a case.
Add links to a gene object.
Show HGNC symbols and IDs.
Parse HGNC output lines into Gene objects.
Get the Open Clinvar submission for the given user and institute.
Update clinvar_id to submission_id :param str clinvar_id:
Returns the id of the clinvar submission for the given submission id.
Adds variables and cases to a submission.
Update the status of a clinvar submission.
Returns a list of submissions for a user in the clinvar database.
Delete a clinvar object.
Returns a dictionary of ClinVar objects for a case.
Parse terms from obo file.
Return a list of genes.
Show genes for a given HGNC.
Get a list of genes.
Get the institute and case for the current user.
Return a list of institutes a user is a member of.
Get the HGNC ID for a given gene info.
Update a panel with a specific version.
Retrieve disease terms from MIM.
Given a list of disease terms, parse them into disease term objects.
Parses the frequency of a variant.
Parse SV frequencies from Variant object.
List users.
Compares two MIM panel objects.
Update the MIM version for each gene in the panel.
Add a panel to the database.
Returns the panel with the given id.
Delete a panel from the database.
Return the gene panel with the given id.
Retrieve a list of gene panels.
Convert a case object to a dictionary of HGNC ids to panel names.
Update a panel object in the panel collection Args: panel_obj (dict): The panel object
Add a pending action to a panel.
Returns a set of all clinical symbols in the case.
List cases associated with a case.
Sends an e-mail to the recipient.
Load all the indexes into the database.
Update all indexes in the database.
Drop all indexes from the database.
Build a variant query from a query dict.
Convert clinsig query to mongodb query :param query: mongo query :type query: dict
Apply coordinate filtering to the query.
Add gene symbols to the mongo query.
Wipe a database.
Parse a panel from a csv file.
Load a batch of genes into the HGNC database.
Load a batch of transcripts into the database.
Load a batch of exon objects into the database.
Get a HGNC Gene object for a given HGNC identifier.
Get the HGNC ID for a symbol.
Given a HGNC symbol, return a list of Gene objects for that symbol.
Get all the genes for a given build.
Returns the number of genes in the given build.
Drop all genes in the database.
Drop all transcripts in the database.
Drop all exons from the database.
Returns a dictionary mapping Ensembl transcript IDs to transcript objects.
Returns a dictionary of HGNC symbols for a given build.
Get a gene by its alias.
Given a build and a list of genes, return a dict of HGNC IDs and
Return a dict of Ensembl Gene IDs for all genes in the database.
Convert to HGNC format.
Add HGNC IDs to each gene.
Get the coding intervals for all genes in the database.
Load an institute's Omim panel.
Retrieve all cases for a given institute.
Retrieve a case from the database.
View function that returns the results of matchmaker.
Match a case against an institution.
Delete a matchmaker.
Generate a PDF report of a case.
Diagnosis of a case.
Update the status of a case.
Assign a case to an institute.
List terms in the HPO index.
Mark a variant as validation.
Mark a variant as causative.
Get the delivery report for a case.
Share an institution with a case.
Rerun an institute.
Open a research page for the logged in user.
Upload a vcf2cytosure file.
Send a multi-qc file to the server.
Fetch cases from the database.
Return a list of clinvar submissions for the given user and institute.
Exports Mt variants to Excel.
Returns diseases for given HPO IDs.
Retrieve the cytosure for a given vcf.
Return a dict with the institute and case objects.
Get a list of all Sangers unevaluated for a given institute and user.
Delete matchmaker MME for a case.
Get matchmaker results for a case.
Query MME for patients in a case.
Drop ensembl and transcripts for a given build.
Given a variant, return a dict of all the callers that are relevant to the variant.
Build a hgnctranscript object.
Create an institute object and add it to the adapter.
Parse the cadd value of a variant.
Load a case from a YAML file.
Update a Variant in the collection.
Update the rank of variants in the case.
Update Variant compounds from the database.
Update a list of variant compounds.
Updates a list of variants in the database.
Load a variant from the database.
Insert or update a variant.
Load a batch of variants into the database.
Associate a case with a user.
Share a case with a user.
Add or update an OMIM ID to a case.
Mark a case as checked.
Order the verification of a variant.
Return a list of Sanger ordered by institute and user.
Validate a variant.
Mark a variant as causative.
Update a dismiss variant.
Update the ACMG of a Variant.
Parse variant IDs.
Parse a simple ID.
Parse the MD5 key for a document.
Convert a panel to HGNC format.
Given a variant object and a family ID, return the corresponding document ID.
Return the number of cases in the database.
Update the dynamic gene list for a case.
Retrieve a case by case_id or institute_id or display_name.
Delete a case. :param case_id: case id :param institute_id: Institution
Adds a case to the case collection.
Replace a case in the case collection.
Update the case id with the given family_id.
Submit an evaluation for a variant.
Get the evaluations for a given variant.
Parse ensembl transcripts into a dictionary.
Parse ensembl gene request.
Parse ensembl transcript request.
Parse a list of lines from an Ensembl file.
Parse ensembl exons.
Parse ensembl exon requests.
Initialize a logging instance.
Given a list of genemap lines, return a dict of mim_nr => set of
Get morbid and mim2gene and phenotypes.
Convert string to int or float.
Format the given month of the year.
Format the day of the week.
Return a month name as a string.
helper for popover display.
Get panel info from a list of lines.
Parse a gene panel into a dictionary.
Show disease terms.
Drop all terms from the HPO database.
Return a dict of users and their event rank.
Parse conservations from variant.
Parse conservation scores from a variant.
Get the general case information.
Get the case groups from the database.
Convert the context to JSON and return a response.
Get the year and month from the query string.
Check for canceled events for a given date.
Return the HPO term for the given HPO ID.
Returns a list of terms matching the given HPO term.
Returns the disease term with the given identifier.
Returns a list of disease terms.
Load a disease term into the database.
Given a list of HPO terms, return a list of HGNC IDs.
Reads data from HDF5 file.
Set up the time axis for the analysis.
Computes the longitude and latitude of each point.
Fills the DC spectrum with zeros.
Calculate the extent of the plot.
Plots the waterfall between f_start and f_stop.
Plots a time series of the time series data.
Write the filter bank to a file.
Calibration for the 1D bandpass.
Convert data to coarse format.
Returns the fractional polar angles.
Function to write polarizations to FITS file.
Find the index of the closest value in a numpy array.
Rebin data to n_x, n_y.
Unpack data into a numpy array.
Calculates the difference between the input dio_cross and the given feedtype.
Plots a calibrated diode.
Calculate the selection size.
Calculate the shape of the selection array.
Set up starting and ending frequencies.
Populate the timestamps array.
Calculate the number of coarse channels.
Return the number of blobs in the selection.
Check if the current selection is heavy.
Read all data from the file.
Read a single row from the file.
Reads data from the container.
Updates the header with start, stop and timestamps.
Print information about the file.
Writes the container to a FITS file.
Writes the container to an HDF5 file.
Writes the light dataset to a HDF5 file.
Calculates the dimension of the blobs for the given chunk dimension.
Get the dimension of the chunk.
Grabs data and plots it.
Command line interface for the guppiraw tool.
Reads the first header of the file.
Find the number of data blocks in the file.
Print the mean, standard deviation, max, min, max values.
Plot a histogram of the data.
Generate filter bank header.
Find the size of the header of a given file.
Integrate through a calibrated waterfall.
Get the center frequencies.
Integrates the observations and calculates the F ratios.
Get the tsys of a spectrogram.
Find the length of the header of a given file.
Check if file is a filter bank.
Generate the sigproc header string for a fits object.
Calculate the number of interfaces in a file.
Return a dict representation of the traceback.
Adds a sub-command parser to `subparsers` to make an RR record of
Create the parser for the zonefile.
Remove comments from a string.
Add a default name to a record.
Parse a string of JSON zone records into a dict.
Parse a zone file from a text string.
Quote a field in the data dictionary.
Parse an avro schema string.
Converts a list of classes to a Python package.
Convert a record to a JSON compatible dictionary.
Load a JSON-compatible dict into a record.
Deserialize a JSON string into a RecordStore object.
Add a record to the schema.
Get the schema for the given record name.
Representation of the Variables as a dict.
Generate a schema dictionary for the given record.
Get the root schema dictionary for the given record.
Read multiple lines from an input stream.
Write the output to the output_stream.
Like ordereddict.push_front, but returns an ordereddict.
Get a search result by query string Parameters ---------- params : dict Parameters ---------- params : dict Parameters ----------
Perform a raw search of this search using the provided filters.
Return a list of entities that include the given attributes.
Get entity from href.
Give a quote from the list.
Escape a string for inclusion in a filter.
Create a rotation matrix from an elementary rotation angle.
Returns the average value of the error sky for a given magnitude and phase.
calcParallaxError - Calculate the error of the sky average and the error of the sky
Returns the magnitude error of the GM as a function of magnitude.
Returns the magnitude error of the given GM as a float.
Return the average number of transitations.
Calculate the angular distance between two points.
Transforms a cartesian coordinate system into a rotation matrix.
Transforms a set of spherical coordinates to cartesian coordinates.
Computes the Jacobian of the transformation given by the covariance matrix.
Return the error scaling factor for an observable.
Return a unicode string representation of the value.
Apply a function to each item of the collection.
Exclude items from the sequence based on a truth test.
Return a new Collection containing only the elements that pass a truth test.
Returns a new Collection with elements from the start but not including the stop.
Returns a new Collection with elements dropped while the first occurrence of the predicate is True.
Zips this collection with the given others.
Find the first matching node.
Return the path to the serach database.
Build a minimal set of runs from a list of events.
Output the results to a file.
Print the results to a file.
Cleans the given code by removing comments, macros and pragmas.
Round a number to the next base.
Given a list of indices, return a list of indices that are blocking.
Calculate cache access.
Performs the actual computation of the kernel.
Remove comments from ASM lines and return a list of strings.
Strips unreferenced labels from the assembler output.
Select the best block from a list of blocks.
Prompts the user to select an increment and returns it.
Insert markers at the start and end of the assembler.
Generate the space between start and stop.
Get the datetime of the last modified file.
Ensure that the required arguments are supplied.
Main entry point for the script.
Main entry point for the pickle script.
Create a POS-int symbol.
Transform multidim declarations to 1D declarations.
Transform multidim to 1D reference.
Finds all nodes of the given type in the AST.
Check that all the variables have datatypes.
Sets the value of a constant in the symbol table.
Return a new expression where the constant values are substituted.
Get the sizes of all variables in the model.
Calculates the relative offset of a variable.
Remove duplicate accesses from self.destinations and self.sources.
Computes the length of the iteration of the code.
Returns a generator for iterating over the loop stack.
Return a list of indices that can be used to sort this expression.
Return a dictionary mapping variable names to their SymPy accesses.
Compile a dictionary mapping variable names to a list of relative distances.
Convert a global iterator to a dictionary of integer indices.
Returns the global iterator for the current loop.
Converts a list of indices to a global iterator.
Returns the maximal global iteration number.
Print information about the kernel.
Print a table of information about the model variables.
Prints a table of constant names and values.
Print the kernel code to the given file.
Convert a math ast to a symbol.
Get the offsets of the array referenced by `aref`.
Returns the base name of the given AST node.
Return the type of the index in the given loop.
Builds declartions for constants.
Return a list of array declarations.
Get the list of for, pragma, funccall.
Builds the list of array declarations.
Find the innermost loop in a list.
Build the array initializations of the kernel.
Build dummy call statement.
Builds a kernel function declaration.
Builds a list of declarations for scalars.
Get the kernel code from the code file.
Build an AST node for a kernel call.
Get the main code from the template.
Performs IACA analysis on the given micro-architecture.
Get an identifier for the file.
Returns the datetime of the last modified file.
Get the name of the compiler to use.
Parse a per-component event from a per-component string.
Enforces no-overlap collisions.
Return the absolute path to the header file.
Aligns the current iteration with the cl boundary.
Returns a list of loads for each cache level.
Returns a list of hits.
Return the number of hits in each cache.
Returns a list of stores.
Returns a list of all the caches that have been updated.
Get the statistics for each cache level.
Context manager to temporarily fix an environment variable.
Configure an argument group for the script.
Parse the description from the README file.
Builds an item for a purchase request.
Records a purchase for the given email address.
Helper function to get course content from ecommerce api.
Returns course content from ecommerce API.
Update the unenrolled list for a user.
Send a course refund email.
Send an offer assignment notification email to a user.
Retries the order with the given exception.
Fulfill an order.
Return a sailthru client for the given site code.
Get a value from the cache.
Sets the value for the given key to the given value.
Get the value of a configuration variable.
Get the filename of the overrides file.
Get the value of a dictionary by eplus version.
Get the version of Eplus.
Populates internal state from JSON data.
Returns a list of external file paths.
Sets the default values for all tables in the schema to their default values.
Prepares the list of extensible fields.
A dictionary mapping each external file reference to a list of short references.
Get a value from a column.
Update the value at the given index.
Update the ini file.
Add fields to the record.
Remove and return the extensible field at the given index.
Insert a value into the field at the given index.
Removes this record from the database.
Register a record hook.
Register a link.
Create a regex object for the given line and intent name.
Returns the number of remaining time in this interval.
Return a dictionary representation of the range.
Perform an HTTP request to the given URL.
Get all services of a given type.
Create a directory if it doesn't exist.
Configure a service.
Register a CA.
Get the current state of a recording.
Update the status of an event.
Update the agent state.
Return the path to a configuration file.
Update the configuration from a given configuration file.
Check configuration.
Initialize the logger.
Show the home page.
Serves the image with the given ID.
Run all the given modules in parallel.
Parse an iCalendar string into a list of dicts.
Get upcoming events from iCal.
Main loop for the scheduler.
Main loop for the service.
Make an error response.
Make a response with a list of data.
Get the internal state of a service.
Get all upcoming and recorded events.
Get an event by ID.
Delete an event.
Modify an event.
Start capturing an event.
Renders the rendered HTML to a fragment.
Return a list of all resources.
Return a dict representation of the object.
Create a fragment from a dict.
Add content to the email.
This method is used to initialize the JavaScript API.
Return a string containing HTML for all resources in the group.
Converts a resource to an HTML string.
Render a fragment and return a JSON response.
Render the fragment as standalone HTML.
Render the fragment as standalone HTML.
Calculate p-values and q-values from p-values and lamb.
Convert values to one dimensional numpy array.
Given a set of scores and an error table, return a DataFrame of P, S, and
Returns a table with the final error rate for each cutoff.
Create a summary error table from a dataframe.
Calculates error statistics for a set of scores and a set of decoy scores.
Find the cutoff value for a given cutoff_fdr.
Runs the IPF on the given input file.
Runs the peptide detection algorithm on the input file.
Run inference on a protein file.
Subsample a file using osw.
Reduce a file using osw.
Apply the backpropagation score to the input file.
Get a group by id.
Create a group on this team.
Delete the group with the given id.
Get the members of a group.
Update the members of a group.
Get the effective member count for a group.
Check if a member of a group is effective.
Decrypts the given key.
Get the input stream of the process.
Get the standard output of the command.
Get stderr and return stdin or stdout.
Get the output of the debug sub-command.
Context manager for reading from STDIN.
Context manager for controlling stdout.
Context manager to temporarily change stderr.
Context manager for the debug sub-command.
Emit an error message to the user.
Print the help for the option parser.
Print the usage message and exit.
Print the version of the program to the file.
Resolves the value of the given option name in the given options object.
Returns a copy of this cli context.
Write headers to file.
Generate a temporary URL.
Quote a value for inclusion in a URL.
Get a client from the pool.
Decrypts data from stdin using a key.
Put an account.
Put a container.
Return the body of the manifest.
Create a container and return the prefix.
Prints the current time and information about a transaction.
Returns True if the stream is empty.
Encrypts and writes the encrypted data to stdout.
Get the status of a repository.
Get information about a pull request.
Return a generator of pull requests.
Set is_published to False for all published Titles.
Returns a list of the slider items published for the current request.
Return a list of all the HeroSlider items.
Acquiring reader locks.
Releases the reader lock.
Acquire the writer lock.
Remove a task from the container.
Returns the task with the given ID.
Returns a sorted list of all tasks.
Return a dictionary representation of the object.
Create an instance of this class from a dictionary.
Initialize the archive manager.
Create an index at idx_url.
JSON encoder for the request.
Writes items from the given generator to the given writer.
Add a task to the queue.
Remove a task from the scheduler.
Get all items in the storage.
Validates task_id, backend, category and backend_args.
Parses the archive args and returns the archiving task configuration.
Perform the job and publish the result.
Schedules a job with the given task on the given queue.
Cancel the task with the given task_id.
Run the listener.
Listen for pubsub messages.
Schedules the scheduler to run.
Schedules the task with the given task_id.
Cancels the task with the given task id.
Build the arguments for a job from the given task.
Register the given view with the router.
Overrides Django's reverse_action method to add support for versioning.
Returns the name of the view.
Get a version string from a version string.
Resolve a key in a cursor.
Resolve an engine from a scheme.
Parse a database and schema path.
Parse a database URL into a database info object.
Create a new user.
List all users.
Create a password change form and update the session auth hash.
Add the url name to the url field.
Parses a boolean value.
Parse a value into an integer.
Returns the parser function for the given type.
Create a model dictionary from a model instance.
Encode a URL-safe base64-encoded string.
Create a field from a field_info dict.
Create a validator class from a dictionary.
Finds unique points in a list of explored parameters.
Changes the logging settings based on the given kwargs.
Try to create directories if they don't exist.
Get a list of strings from a string expression.
Set the logger for this instance.
Extracts the substitutions from the trajectories.
Checks and replaces all filenames in the specified section and option.
Convert a parser object to a stringio object.
Find the multiproc options in the given parser.
Returns a dictionary with multiproc specific keys.
Parses the config file and replaces any formatting with the appropriate values.
Takes a dictionary of log file names and a nested dict of log files.
Make logging handlers and tools.
Clean up after the tooling.
Start the redirection process.
Writes a line of text to stderr.
Returns True if the results of a and b are equal.
Compares two parameters for equality.
Class decorator for class prefixes.
Add parameters to an ARF trajectory.
Run a neuron group on a single trajectory.
Calculates the euler scheme of the given trajectory Parameters ---------- traj : ~astropy.
Add parameters to the given trajectory.
Calculates the difference in Lorenz basis for a given value and sigma.
Helper function to create a storage service.
Factory for creating storage services.
Add the parameters to the given trajectory.
Calculates the difference between two values using the Robust method.
Checks if there are explored parameters in the given group node.
Build equations from model and synaptic variables.
Pre-build the model for the given trajectories.
Build the model for a given trajectory.
Builds the model for the given trajectory :param traj: The trajectory to build :param
Pre-builds the network for the given Trajectory.
Builds the network from the given trajectory and brian list.
Add Brian2Parameter annotations to the given trajectory.
Compute the fano factor of a neuron based on its time window.
Compute the mean fanofactor of the neurons based on the spike residuals.
Perform the mean fano factor analysis on the neurons in the network.
Add spike and state monitoring to the network Parameters ---------- traj : Trajectory object Returns --
Create a folder for outputting data.
Plot the results of a celianeuron.
Print spike monitoring graphs for a given trajectory.
Run Brian2 monitoring.
Get batch number.
Explore a batch of examples.
Variables associated with this node.
Get the function associated with this node.
Private method to set the name and full name.
Sets the branch and run branch details.
Convert a node to a protobuf message.
Deletes a node from the tree.
Remove the given instance or leaf node.
Translate a shortcut name.
Determine the type of a node based on its name and branch.
Create a link between an act node and an instance.
Check that the names in the split names are valid.
Set details for a tree node.
Iterate over all nodes in the BFS.
Create a child iterator for the given node.
Recursively traverses a node using breadth-first-search.
Search for a key in a node.
Search backward starting at start_node for matches to split_name.
Children of this node.
Add a group from the storage backend.
Add a leaf from the storage backend.
Returns a list of filenames for all files in the directory.
Returns a bunch object with debug information about the tree.
Get the parent node of this node.
Remove a link from the file.
Remove this node from the tree.
Get the default value for a field.
Return the children of the receiver.
Returns a list of groups.
Get the list of leaves.
Return a list of links.
Store trajectory data in the group.
Add a result group to the network.
Add a derived parameter group to the network interface.
Add a derived parameter to the network interface.
Add a config group to the network interface.
Add a configuration group to the network interface.
Add variables related to the given git commit to the given trajectory.
Make a git commit for the environment.
Flattens a nested dictionary into a single level.
Nest a dictionary into a nested dictionary.
Get the argspec of a function.
Given a function and a dictionary of keyword arguments, return a dictionary of matching keyword arguments.
Formats a time value.
Convert a port to a TCP address.
Ensure that a directory doesn't exist.
Resets the internal state of the interval.
Get the remaining time for the given index.
Return a copy of the dict.
Remove a field from the dictionary.
Return a string representation of the annotation.
Make an ordinal result.
Make a shared result.
Store access data for a given request.
Get the current data node.
Check if item is supported by this result.
Creates a shared data item for the model.
Store the results in the multiproc file.
Locks the client_id and request_id for the given name.
Send a zeromq server done message.
Finalize the context and clean up.
Start the client.
Send a request and wait for a response.
Acquire a lock.
Listen for clients.
Put data into queue.
Detects the forked process.
Handle a data event.
Continually read data from the stream.
Receive data from the queue and return it.
Receive data from the connection.
Stores the given data in the store.
Store a message in the specified trajectory.
Store a list of reference trajectories.
Collects all options for a section.
Collect all configuration values.
Interpret the arguments from the command line.
Add the parameters to the given troj object.
Plot a pattern.
Builds a 1D cellular automaton pattern.
Signal that a new update is available.
Group to which the user edits the project.
Loads multiple items from iterable.
Check the properties of the hdf5 storage service.
Stores items from iterable.
This is called when the service is closing.
Extracts file information from keyword arguments.
Creates a backup of the given trajectory.
Read a row from a table into a dictionary.
Prepares and merges the given trajectories.
Check that the version and python are compatible.
Loads all exploration parameters into the given trajectory.
Stores the explorations for the given trajectory.
Stores a single trajectory.
Creates a new leaf instance of the tree service.
Stores all nodes of the given trajectories in DFS order.
Store a parameter or result table entry.
Get or create a table from a where node.
Get a node by name in the trajectory.
Insert all keys in insert_dict into row.
If string is longer than max_length, cut it to max_length bytes.
Create a new group or get an existing one.
Creates or gets a group for the given key.
Stores the annotations on the given node.
Loads the annotations from the given node.
Groups the given trajectories.
Loads all data from a group.
Loads all the annotations and attributes of the given node from the given hdf5 group.
Extract missing flags from dictionary.
Adds a summary row to the table.
Add metadata information to a group.
Writes data into a shared array under the given key.
Writes a table to the HDF5 file.
Write a dictionary into a group as a pytable.
Write data to a Pandas group.
Private method to write data into an array.
Writes data into an array in a group.
Delete a link in the trajectory.
Get a table column from the given column.
Returns the size of the longest string in a list.
Read a dictionary from a table.
Reads the shared data from the given node.
Reads an array from the persistent store.
Loads a trajectory with the given index.
Makes a set name from an integer index.
Set properties of the network interface.
Add to the list of dynamic imports.
Preset a parameter.
Returns True if the run is completed.
Remove all stored exploration parameters.
Updates the information about a run.
Add information about a single run.
Locks all parameters.
Locks all derived parameters.
Finalizes the run. :param store_meta_data: Store meta data.
Equivalent to ``f_load_skeleton`.
Builds a list of wildcards that match the current run.
Merge multiple trajectories into one.
Merges the run information from another trajectory into this one.
Renames the full name to match the other trajectory.
Merge configurations from another trajectory into this one.
Merges the rename_dict into the current trajectory.
Merge results from another trajectory into this one.
Restores the default values of all parameters to their default values.
Set all of the parameters to the given index.
Make the graph a single run.
Returns a list of run names.
Starts a single run.
Set the start time of the run.
Sets the finish time of the run.
Return an instance of the given constructor.
Return a dictionary representation of the parameter values.
Finalize the run information.
Deletes links from the trajectory.
Remove all the children of this node.
Wrapper for pool_single_run.
Frozen version of _frozen_pool_single_run.
Configures the pool instance.
Configure the frozen pool for a single run.
Process a single run.
Wrapper for _single_run.
Configures logging with the given kwargs.
Configures the niceness of the process.
Runs a single Python script with SIGINT handling.
Wraps handling of the given kwargs.
Load a class from a full class string.
Create a new class from the given name and dynamic imports.
Returns the length of the range.
Return the value of the field as a string.
Returns the range of the variable.
Returns the store as a dictionary.
Loads the parameter from a dictionary.
Loads the parameter from a dictionary.
Compare two sparse parameter values.
Returns true if the matrix is supported by SPS.
Builds a tuple of the names of the parameters.
Reconstructs a sparse matrix from a list of data.
Loads the parameter matrix from a dictionary.
Returns a dictionary with the stored data.
Loads the parameter from a dictionary.
Translates the given key to the field name.
Returns a string representation of the f-values.
Return a dictionary representation of the object.
Set the value of a single variable.
Returns True if item is supported by this result.
Returns a dictionary containing the stored values.
Populates the internal data structure from the given dictionary.
Set a single item in the pickle file.
Returns a dictionary containing pickled values.
Loads the data from a dictionary.
Merge all files in current working directory into current working directory.
Create a new session.
Merge multiple trajectories into one.
Start all the jobs.
Multiply a triangular matrix.
Run a neuron on the given trajectory.
Post-procerate firing rates for each neuron.
Add parameters to the given trajectory.
Add an exploration to the given trajectory Parameters ---------- traj : ~astropy.trajectory
Extract sub-runs from the given trajectories.
Executes a single run of the network.
Add parameters to a trajectories.
Runs the network on the given trajectory.
Generate a filename for a given trajectory.
Advance to the next item in the chain.
Handle the SIGINT signal.
Load a configuration from a JSON file.
Request a pin from the API.
Requests a new access_token, refresh_token, and write_tokens_to_
Refreshes the access and refresh token.
Get the thermostats data from the API.
Write the tokens to the config file.
Set the hvac mode for a given index.
Set the fan min on time for the specified index.
Set the temperature hold for a given index.
Delete a vacation from an index.
Resume a paused program.
Send a message to the specified index.
Generate a random delay selecting value.
Return the number of seconds to wait before a timeout request should be renewed.
Generate a new renewing time based on the given parameters.
Return a dictionary containing only fsm_attrs.
Resets the state of the client.
Get the timeout for the given function in the given state.
Set the timeout for the given function in the given state.
Select an offer from the queue.
Sends a request to the server.
Set the timers for the current state.
Process a received NAK packet.
Initialize the state of the selecter.
Raises a TimeoutError if there are not enough offers to collect.
Raise an exception if there are not enough requests left to do so.
Timeout the request renewing.
Timeout the request rebinding.
Handle a received offer.
Called when an ACK request is received.
Receive a NAK requesting packet.
Called when a new ACK is received.
Called when a NAK renewing packet is received.
Called when a rebinding is received.
Receive a NAK rebinding packet.
Called when the client is re-established.
Sets the value of the given attribute to the given value.
Adds a new element to the end of the set.
Remove a query part from the query builder.
Get the status of the supervisor server.
Reads a TDMS file and returns a tuple of column names and data.
convert tdms file to fcs file.
Returns True if the current working directory equals the current working directory.
Create a new Quilt patch and save it.
Delete the next patch in the series.
Delete a top-level patch from the database.
Check if a file exists in a patch.
Backup a Quilt data file.
Add a file to the database.
Run the Quilt program.
Create the directory if it doesn't exist.
Copies this directory to the given destination.
Create a symbolic link in the repository.
Copies this file to the destination.
Returns the directory containing the file.
Copy a file to a destination directory.
Unapply a patch.
Apply a patch to the series.
Apply the next patch to the series.
Apply all patches to series.
Read the series file.
Save the patches to a file.
Add a patch to the patchline.
Insert a list of patches into the file.
Add a list of patches to the editor.
Remove a patch from the file.
Returns a list of patches after the given patch.
Returns a list of patches before the given patch.
Returns a list of patches until the given patch is applied.
Replace an existing patch with a new one.
Create the version file.
Check the version of the database.
Adds the arguments to the given parser.
Adds the arguments to the given parser.
Adds this command to a sub-command parser.
Set the arguments for the subparsers.
Add this parser's sub-parsers to the given parser.
Check if a file exists in the given patch.
Check if a file exists in the patches after a given patch.
Revert a file in the context of a particular patch.
Import a Quilt patch into the repository.
Copy patches to the quilt_patches directory.
Create a way from a way element.
Return an iterator of node ids that are not present in the graph.
Add a node to the graph.
Build a route from a relation.
Create a route long name from a relation.
Returns the agency id for a relation.
Collects all nodes and way IDs and applies them to the file.
Create a relation from a relation object.
Takes a list of agency tuples and returns a list of agency objects.
Generate dummy stoptimes for a trip.
Writes the contents of the archive to a.zip file.
Write all unzipped files to the given destination.
Build an agency for the given relation.
Extract stops from relation.
Builds a shape from a relation and a list of ways.
Returns a list of supported versions of the device.
Send an APDU to the device.
Attempt to authenticate using u2f.
Register a new application with the given facet.
Authenticate with the device.
Register a device using u2f.
Convert unicode string to unicode string.
Wraps all methods in the given class with an error decorator.
Returns True if the filepath matches one of the only_blame_patterns.
Get the email address from the given string.
Get an entry from an entry_tree.
Convert markdown to rest.
Runs the flawless web service.
Convert a URL to a stringio image.
Convert a string to an Image object.
Check that the image is large enough for the given size.
Check that the width of an image is big enough.
Check that the height is big enough for an image.
Returns the category object for the given field name from the given item.
Parse the totals field.
Returns an iterator over all the items in the document.
Add an error to the error list.
Parse the data and save it to the database.
Parse a single item into a dictionary.
Returns an instance of the model based on the given data.
Saves the instance to the database.
Download a file from a URL to a destination.
Loads the source file.
Returns a generator of items from the CSV file.
Enables or disables network access for this VM.
Add one or more files to this sandbox.
Add a file to the sandbox and rename it.
Returns a list of Enrollments for the given course.
Returns a list of enrollments for a given sis_id.
Get all the enrollments for a section.
Returns a list of enrollments for a given section.
Get all the enrollments for a given registration id.
Enroll a user in a course.
Get all the roles in an account.
Gets the roles in an account by SIS ID Args: account_sis_id (
Returns a list of roles that are effective in the given account.
Get a single role by id.
Gets a role by its SIS Id and role ID.
Get a single course.
Returns a restclients.course.Course object for the given sis_id.
Get a list of course objects in an account.
Returns a list of courses in an account filtered by SIS ID.
Returns a list of courses published in an account.
Returns a list of courses published in a given SIS account.
Returns a list of CanvasCourse objects for the given regid.
Create a new course for an account.
Update an existing SIS course id.
Gets the activity for a given account and term.
Returns a list of grade objects for a given account and term.
Gets the statistics for a specific term in an account.
Returns a restclients.Activity object for the given sis_course_id.
Returns a list of assignments for the given sis_course_id.
Returns a list of student summaries by sis_course_id.
Returns the student activity for the given sis_course_id and user_id.
Gets the student messaging for a given student in a given course and user.
Get all external tools in an account.
Get all external tools in a course.
Create an external tool in the given context.
Update an external tool in a context.
Delete an external tool from a context.
Check that an object has all of the required parameters.
Returns a user object for the given user id.
Get all users for a given course.
Returns a list of users for the given SIS course id.
Create a new user.
Get a user's logins.
Update a user login.
Returns the next page in the response.
Returns the data for the given url.
Get a resource by url, with pagination support.
Makes a GET request to the given url with the given params.
Makes a PUT request to the url and returns the response.
Makes a POST request to the given url with the given body.
Sends a DELETE request to the dao to delete a resource.
Get a list of canvas admins for a given account.
Create an admin for a user.
Create an admin by SIS ID.
Delete an admin from an account :param account_id: ID of the account to delete :
Delete an admin by SIS ID.
Creates a new grading standard for a course.
Get a single section.
Get a section by its SIS ID.
Get all sections in a course.
Returns a list of all sections in a given sis_course.
Returns a list of all sections with students in the given course.
Returns a list of uw_sws.sections.Section objects with students in a
Creates a new section.
Update a section. :param str section_id: ID of the section :param str name
Get a list of quizzes for a course.
Get a single account by ID.
Get all sub-accounts of a given account.
Update an account.
Update an existing SIS ID.
Get auth settings for an account.
Update an existing AuthSettings object.
Get a term by its SIS ID.
Import a csv string into a user's account.
Import a directory into the current account.
Get the status of a SIS Import.
Build an archive of CSV files in the given directory.
Get all assignments for a given course.
Updates an assignment. :param assignment: Assignment to update :type assignment: Assignment :
Get all available reports for an account.
Get a list of reports for a given account and report type.
Creates a new report of the given type for the given account.
Creates a course provisioning report.
Creates a course SIS export report.
Creates an unused courses report.
Get the report data from the server.
Get the status of a report.
Delete a report. :param report: Report to delete :type report: Report :param report
Move all detections in label in dx and dy direction.
Flip detections horizontally.
Get a dictionary representation of an object.
Return default inplace edit options.
Return the empty value to edit.
Create metrics from a list of metric configurations.
Set up logging for this instance.
Configure the registry with additional collectors.
Create and register new metrics.
Get metric with given name and optional labels.
Show the home page.
Handles the metrics request.
Send a query to the WOOLRAM alpha channel.
Fix the http_client.HTTPMessage class to use the correct get_content_type and
Send a query to the API.
Return information about the analysis.
Return a generator of all pods that have either primary or title == str.
Encode data to request.
Make a GET request to the API.
Make a DELETE request to the API.
Make a PUT request to the API.
Make a POST request to the API.
Group sentences into groups of length group_length.
Disambiguates a PDF file.
Disambiguates a query.
Segment text.
Get the language of a text.
Get a concept by ID Args: concept_id (int): ID of the concept Returns:
Fits the model to the given data.
Computes the score of a set of classes on a set of features.
Fits the model and predicts on the features.
Predicts the new feature and returns the score.
Transform an array of features by mapping each row to the corresponding label.
Computes the score of the model on the given features and targets.
Return a vector containing the given members.
Return a vector containing the given members.
Compile and then execute a file.
Compile and execute a stream of form objects.
Compiles and executes the given string.
Bootstraps a repl namespace.
Run basilisp code.
Add a method to the map.
Adds a method to the multifunction.
Remove the key from the map.
Removes the method with the given key.
Returns `True` if `v` is a macro.
Return the location of the form.
Assert that the node does not have a recursion.
Assert that `node` is not a tail statement.
Resolve a bare symbol.
Resolve a form.
Parses the given form as an AST.
Whether to warn about shadowed variables.
Map a function over a sequence of key-value pairs.
Return a string representation of a sequence.
Fallback function for lrepr functions.
Recursively fix missing locations in node attributes.
Compiles and executes the given form.
Compiles the given module using the given optimizer.
Compiles the given forms into a Python module.
Bootstraps the given module with the given bytecodes.
Convert an iterable into an IsEqual sequence.
Munge the given string. :param str s: The string to munge :
Returns a Fraction with the given numerator and denominator.
Returns a logging handler for the given level and format.
Returns a new mapping from key-value pairs to their original values.
Partition a collection into n-tuples.
Reads a namespaced name.
Reads a collection.
Reads a list from the reader.
Reads vector from the reader.
Reads a mapping from the reader context.
Reads a string from the reader.
Read a symbol from the reader context.
Reads a keyword from the reader.
Reads the meta attribute of a consuming comment.
Reads a quoted list.
Expand a quoted form.
Reads a quoted form.
Return a DEJECT list.
Reads a single character from the reader.
Reads a regular expression.
Reads a lisp reader macro.
Returns the next consuming comment.
Returns the next form from the reader.
Read a string of data.
Read a file into an iterable of readerforms.
Update the location of the cursor.
Move to the previous valid index.
Returns the next token from the stream.
Create a bytecode from a list of code.
Returns a list of bytecodes from the cache data.
Imports the cache file from the source code.
Add a Basilisp importer to the sys.meta_path if not already there.
Find a module spec by full name, path, and target.
Execute a cached module.
Executes a Basilisp module.
Executes the given module.
Create a symbol with the given name and namespace.
Return a list of completions for the given text.
Get or create a keyword map.
Return a keyword in the given namespace.
Return a tuple of dependencies and nodes for the given generator.
Return an AST for a collection of nodes.
Set the lineno and col_offset attributes on the AST node.
Decorator to add a line number and column to the AST.
Decorator to add a line number and column to the AST.
Returns True if the given variable is a dynamic variable.
Returns True if the variable can be used as a redefinition.
Convert an ast expression into an ast.Expr.
Convert a function definition into an expression.
Convert a do node to a python AST.
Generate a canonical name for a function.
Converts function arguments to Python AST.
Convert a single arity function to an AST node.
Convert a function node into a Python AST.
Convert an IfBody node to a Python AST.
Convert an invoke node into an ast.Call node.
Convert a `Quote` node to a `GeneratedPy AST.
Convert a loop recur node to a python AST.
Converts a RECUR node to a Python AST.
Convert a set bang node to a Python AST.
Convert a `Throw` node to an AST node.
Convert a Try node to a Python AST.
Convert a local symbol to an AST node.
Find a variable in a namespace.
Convert a variable reference to a Python AST node.
Convert an InteropProp node to a Python AST.
Convert a `MaybeClass` node to an AST node.
Convert `node` to `pyast`.
Convert a const form to a Python AST.
Converts a collection literal to a python AST.
Generate a Python AST from a lisp AST.
Iterate over the imports of the module.
Return an ast.ImportFrom node for the from module.
Return an ast.Assign node for namespace variable py_ns_var.
Returns a copy of `members` as a set.
Return a new set with the given members.
Return `node` converted to an except handler node.
Return `node` if `node` is constant or nameconstant.
Return `node` with filtered dead code removed.
Return an ast.While node.
Visit `node` and return an ast.Try node.
Create a new module instance.
Return the first element of a sequence.
Return the rest of the sequence.
Return the ith rest element of a collection.
Return the ith element of a collection.
cons with a sequence.
Convert an object to a sequence.
Concatenate sequences.
Associate key-value pairs with a map.
Complex conjugate of a persistent collection.
Dereference an object. :param o: :param timeout_s: :param timeout_
Returns True if v1 and v2 are equal.
Return the quotient of x divided by y.
Sort a sequence using a function, returning a sequence of iseq objects.
Test if a key is present in a collection.
Get the value of a key from a mapping.
Convert an object to its lisp representation.
Convert an object to Python data structures.
Return a human-readable representation of the given object.
Collect all tuple arguments into a list.
A decorator to mark a function as Basilisp-specific.
Resolves the alias of a symbol.
Resolves a symbol to a variable.
Add generated Python code to the current namespace.
Interns a symbol name with the given value in the given namespace.
Interns a unbound variable.
Find a symbol in a namespace.
Finds a qualified symbol in the namespace.
Finds the value of the variable with the given qualified symbol.
Add a default import for a module.
Registers an alias for a namespace.
Interns `sym` to `var`.
Returns a new map with symbol sym, replaced with new_var.
Finds the variable with the given symbol.
Add an import to the scope.
Returns the imported module for the given symbol.
Adds a reference to the scope.
Returns the variable referenced by `sym`.
Replaces references to all non-private variables in `other_ns_interns`.
Replace all references to other_ns with this namespace.
Get or create a namespace with the given name.
Get or create a namespace.
Returns the namespace entry with the given name.
Remove the namespace with the given name.
Suggest aliases for this namespace.
Completes all imports and aliases under the given prefix.
Completes all interns of the given value.
Completes all references to the given value.
Performs completion on the given text.
A tuple of the arguments of the function.
Returns a list of members.
Returns a list of members.
Decrypt a JWT using the given key store and key purpose.
Encrypt a JSON object.
Delete an item from the cache.
Return a tuple representing the selector, comparison, and argument.
Parse a fiql expression string into an Expression object.
Serialize an NDB model to a file.
Decode date strings into Python objects.
Decodes a date value.
Decode a JSON value.
Default encoder for NDB objects.
Validate leicacam version.
Performs a robust topological sort on the graph.
Set the parent of the relationship :param parent: The parent of the relationship :type parent:
Get the parent expression.
Add an element to the expression.
Create an AND expression.
Create an OR expression.
Parse a received message.
Convert a list of tuples to a dictionary.
Check if there is a message with the given cmd with the given value.
Prepares the message to be sent.
Flush all pending messages to the socket.
Enable a slide.
Save template to file.
Get information about a device.
Locate the package.json file.
Parse the package.json file.
Handle API errors with JSON data.
Validate the response from yourls.
Interpolate the two wavelengths and return the indepent vector.
Interpolate indep_vector using scipy.interp.interp1d.
Get the indep_vector between wave_a and wave_b.
Verify that wave_a and wave_b are compatible.
Loads the systemjs manifest and returns the bundle files.
Returns a namedtuple containing the pickled and transformed callables.
Expand a short URL.
Get statistics for a URL.
Returns a list of links and a list of links.
Get database stats.
Split an iterable into chunks of the given size.
Flatten an iterable.
Print a table as a tab-separated table.
Create a dummy class.
Create a new instance from a human-readable string.
Trace a module.
List all links.
Make a common entry in the plist.
Make a multi-entry list for a package.
Convert a list of operations to a list of words.
Split noise into chunks.
Splits the data into chunks according to the given pformat Parameters ---------- freq_vector : list
Compute the bound of the waveform with respect to the indep_vector.
Builds the units string for the given operation.
Create a copy of the input wave with the given parameters.
Computes the running area of the two sets of points.
Validate the min and max values of the wave.
Calculate the arccos function of the input wave.
Calculate the arccosine of a signal.
Calculate the arcsine of a signal.
Calculate the hyperbolic tangent of a wave.
Spectral energy dispersion.
Derivative of the displacement displacement of a phase.
Logarithm of a signal.
Return the square root of the input wave.
Convert complex wavelengths to complex wavelengths.
Convert wavelengths to floats.
Convert wavelengths to ints using the wint transform.
Find files in the system directory.
Returns the short description of a long description.
Build an expression from a list of tokens.
Move to the next item after the given position.
Return a list of functions in the expression.
Parse an expression.
Remove consecutive delimiters in the expression.
Convert a number from scientific notation to scientific notation.
Returns the mantissa of a number without the scientific notation.
Convert a number from PEN format to a float.
Return the fractional part of a number.
Convert a Chinese number to a mantissa.
Determine if the app needs to have an extension.
Run the bundle command.
Runs a trace command for the specified application.
Returns True if the hashes of the dependencies match.
Format a hexdump line.
Parses a docstring into parameters and returns.
Return a list of valid function identifiers.
Resolve a deferred add action.
Split a line by shlex.split.
Check if init commands are available for the current context.
Return the help text for a builtin function.
Find a function in the given context.
Return a directory listing for the given context.
Check if the argument is a flag.
Extract the value of the given argument from the remaining arguments.
Invoke the method with the given arguments from a line of text.
Determine the class of a section.
Classify a single line of text.
Takes a list of lines and joins them into paragraphs.
Convert the value to the type specified by typename.
Converts binary data to a given type.
Returns the size of the given type.
Check if the given type is known.
Split a type name into its component parts.
Instantiates a type and injects it into the type system.
Check if the given type has the given format.
Loads a type module and adds it to the type registry.
Add a parameter to the method.
Add a typed return value to the method.
Set a custom return value printer.
Attempts to match a short name.
Returns the type of the parameter with the given name.
Format the return value.
Convert a positional argument.
Convert the value of the argument with the given name to the given type.
Format the error message for logging.
Return a dictionary representation of the exception.
Validate and execute a function.
Parse a list of validator definitions.
Find all objects in a container.
Get a context from a module.
Get the help text for a function.
Decorate a function so that it cannot be run.
Mark a function as annotated.
Return a short description of a function.
Autodiscover and load the project module.
Install the crontab from the registry.
Prints all tasks in the crontab.
Uninstall the kronos package.
Create an instance of the appropriate handler for the given URI.
Load all projects from the project directory.
Save a list of projects to a YAML file.
Returns a dictionary of projects that are dependent on this project.
Initialize the project at the given path.
Calls the function with the given state.
Apply a function to a state.
View the fold.
Convert the fold to a list of folds.
Apply a function over the current value.
Set the value of a state.
Apply a set to each element of an iterable.
Return the kind of the object.
Main game loop.
Returns a new vector which is the step-to-wards of self and other.
Handles user input.
Advance the robots by one step.
Ends the game with the given message.
Move a piece of the board.
Play a game.
Make a move.
Returns the winner of the game.
A generator for the potential winners of the game.
Adds an item to the list of items to be processed.
Called when a spider is opened.
Uploads a single chunk of data to S3.
Create a file object from the items.
Get the state of an account.
Get the current state of an asset.
Returns the hash of the block at the specified index.
Returns the system fee for the specified block.
Gets the state of the contract with the given hash.
This interface is used to get the raw transaction information by its hash.
This interface is used to get the value stored in the script storage of the specified key.
This interface is used to get the out of a transaction.
Invokes a contract with the given script hash.
Invoke a function on a script.
Invoke a script. :param script: The script to invoke :type script: str :param
This interface is used to send raw transaction data.
Validates that the given address is valid.
Makes a call to the API.
Check if a string is a hash256 string.
Checks if a string is a valid hash160 string.
Encode a list of invocation parameters.
Return a copy of the result with the stack decoded.
Apply this unit to a given datetime object and timezone.
Render and save the graph to a file.
Render barcode and return as string.
Render the barcode using the callback functions.
Edit or create a config file.
Download a file from S3.
Upload a file to S3.
Downsync an S3 configuration file to the local config folder.
Show differences between S3 and S3 configuration files.
Parse an environment variable.
Set the username and password for basic authentication.
Set the API key to use for requests.
Yields all json content in a folder.
Get all schemas.
Get the schema for this bucket.
Return a jsonschema.refresolver.RefResolver for this schema.
Validate an object against this schema.
Get the list of valid examples.
Get the list of invalid examples.
Generates the authentication URL for the user endpoint.
Process the auth url and return the auth code.
Get an access token from the server.
Get the user id of the user.
Returns a list of files in a folder :param folder_id: folder id :param limit
Create a folder. :param name: Name of folder to create :param folder_id:
Add a comment to an object.
Decodes a bytestring or unicode object.
Sets the drop target for the given object and all of its descendants.
start drag opperation event handler.
Sets the default Tlw instance.
Inspect an object.
Migrate a font from the old style to the new style.
Loads the specified page.
Logs the message and sets the focus.
Creates a wellcome tooltip for the given wx_obj.
Handle mouse down events.
move the mouse.
Handle wx key press events.
Deletes all selected objects.
Duplicates the current selection.
Create a snapshot of the object and show it.
Calculates the best position of the tooltip based on the contents of the widget.
Returns the py_data for the given item.
Sets the data for the specified item.
Find data from py_data starting at start.
Delete an item from the listctrl.
Deletes all items from the list control.
Clears all data from the table.
Sets the selection of the widget.
Returns list of strings selected by user.
Sets the data for the item at position n.
Append a string to the end of the list.
Get the parent window of the given object.
Add a child to the sizer.
Set the parent of the widget.
Tiles the background of the widget.
erases the background of the widget.
Called when wxPaintEvent is generated.
Returns a sorted list of column headings.
Resets the view to match the current view.
Update values in grid.
Updates column attributes on the grid.
Sorts the table by the given column name.
Clears all cells from the grid.
Create a combobox with the given id and eventhandler.
Begins editing of a column.
Ends editing of grid.
Returns True if the key event is accepted.
Called when the user presses the starting key.
Enable or disable all menu items.
Check if menu item is enabled.
Enable or disable all menu items.
Check if all the menu items are enabled.
Remove an item from the menu.
Sets the object's attributes from the given tag.
Visit HTML table. :param node: The table node to visit :type node: nodes.
Return the appropriate documenter for the given object and parent.
Takes a signature and mangles it.
Import a module by its name.
Create an autolink role.
Opens an alert dialog.
Shows a prompt dialog and returns text.
Opens a font dialog and returns the chosen font.
Show a color selection dialog.
Opens a directory dialog and returns the path of the selected directory.
Open a search dialog and return the results.
Sets whether or not the item has children.
Sets the icon of the widget.
Parse a RST file and return the result.
Save the rsrc to a file.
Builds a window from a dictionary.
Builds a Component from a dictionary.
Convert a property name to a valid python name.
Set the clipboard data.
Find autosummary for the given docstring.
Loads an object into the tree :param obj: The object to load :type obj:
Inspects an item in the tree.
Activates an item in the tree.
Updates an item in the tree.
Show context menu for item :param item: item to show :param mouse_pos: mouse
Convert the value to a URL.
Checks if the given path is in the current context.
Assert that the path does not exist in the current context.
Select an option.
Get a Selenium webdriver object.
Returns the XPath of the expression.
Switches the focus to the given frame.
Context manager for accepting an alert.
Accept a modal dialog and confirm the user.
Context manager for dismissing a confirm dialog.
Context manager for accepting a prompt.
Dismiss a prompt dialog.
Saves the page to disk.
Saves a screenshot of the current window.
Raises the server error if it exists.
Tests if a field has a checked state.
Tests if a field has no checked state.
Tests if the field identified by locator is unchecked.
Tests if a field has no unchecked field.
Assert that the page has the given title.
Soft assert for whether the page has no title.
Returns the inner content of the given node.
Returns the inner text of the given node.
Normalize a URL. :param url: URL to normalize :type url: str :param url
Determines if an error should be caught.
Compare the number of results returned by the query.
Return True if there are at least ``size`` results in the cache.
Returns True if any of the options expect to be None.
Create a failure message.
Returns True if the given count matches the given options.
Normalizes text.
Normalizes whitespace in text.
Return a regular expression for the given text.
Returns True if the current URL matches the expected path.
Resizes the window to the given dimensions.
Initiates the server if it is not responsive.
Set the getter function. :param fcget: The getter function :param fcget: The
Set the instance method. :param imeth: The method to call :type imeth:
Set the method to be called on the class.
Return the traceback as a string.
Returns the source code for the object.
Returns the logger for the given instance.
Set the logger. :param logger: The logger to use :type logger: logging.Logger
Make a call to the API.
Returns a list of available channels.
Get list of users.
Make a Slack message.
Translate a Slack message.
Sends a Slack message.
Read a channel from the server.
Run the bot.
Run the client.
Return a dictionary with keys that differ from another dictionary.
Colorize a message.
Called when a task is started.
v2 playbook event handler.
Prints the reason for the skipped test.
Convert a prefix to a dotted-decimal address mask.
Add a model to the container.
Load all filters from all registered Jinja filters.
Find a YANG file in the current directory.
Make a POST request.
Builds the authorization code URI.
Get an access token from OAuth2 provider.
Return a dict of query parameters from a URL.
Remove the query component from a URL.
Build a URL from a base URL.
Logs the given exception.
Create a response object with the given body and headers.
Make a redirect response with an error message.
Make a Flask response with a JSON string.
Get an authorization code.
Refresh an access token using a refresh token.
Get an access token from the authorization code.
Get an authorization code from a URI.
Get a token from POST data.
Returns an Authorization object based on the Authorization header.
Open a device on the given bus.
Read a single byte from the device.
Read a number of bytes from the device.
Read a byte from the device.
Write bytes to a device.
Write a byte to the device.
Writes an i2c block of data to the device.
Copies a set of effects to a local or remote location.
Create a local copy of a set of effects.
Construct a FileEffect from a file_info dict.
Uploads a file to the specified store.
Returns a list of CDN URLs for all files in the group.
Construct a Group from a dictionary.
Create a new group from a list of files.
Make an opration request.
Returns a generator that yields the UUIDs of all files in the sequence.
Lists the items in the specified namespace.
Prints a progress bar for the given iterable.
Get home mode status.
Get a list of cameras for this scene.
Get camera information for a list of cameras.
Get a snapshot of a camera.
Get the motion setting for a camera.
Save a camera parameter for a given camera id.
Update the camera motion settings.
Return True if li is the last item in the list.
Yield all nodes of a single list.
Given a LI element, get the interleaving level of the element.
Get the v-merge attribute of a transaction.
Return the grid span of a tab.
Returns the td of the row at the given index.
Check if the given style is false.
Determine if the given BeautifulSoup element is bold or not.
Check if the given HTML element is marked as italics.
Check if the given resource is underlined.
Returns True if the element is a title.
Extract text run content data from r.
Get the relationship information for the given tree.
Get the ordered list type for a given list ID.
Build a table element.
Get the text content of a tag.
Remove all elements with the given tag from the given tree.
Find a dataset and return its path.
Load the MNIST dataset.
Plot a set of images at a given location.
Plot a set of weights as an image.
Plot a set of filters.
Encodes a string into a list of FWD indices.
Add a convolutional weight matrix.
Decode the input z using the specified layer.
Compute the autoencoder score.
Predict the output value of the last layer.
Predict class probabilities for X.
Predict logit for x.
Returns a list of variables.
Computes the accuracy of the prediction.
Build an activation from a string.
Generate a random reservoir for a sequence of samples.
Add a loss to the model.
Train the model and return a list of Monitor objects.
Builds a graph from a set of regularizers.
Returns a list of all input layers.
Returns a list of all variables in the model.
Saves the object to a pickle file.
Load a network from a file or handle.
Computes the loss of the network.
Computes the updates of the network.
The size of the output array.
Resolve input shapes.
Resolves the shapes of the outputs of the pipeline.
Logs the current state of the model.
Log the shape of all parameters.
Format a string for printing.
Resolve a shape name to a shape name.
Find a parameter by name.
Add a bias parameter to the model Parameters ---------- name : str The name of the bias parameter.
Return a spec for the model.
Compute the logarithmic approximation to the posterior.
Inverse of the loggabor function.
Add a tier to the series :param name: name of tier :param tier_type:
Remove tier by name.
Returns the tier with the given name.
Convert to an ELAN object.
Add a point to the current tier.
Add an interval to the current tier.
Remove an interval from the time series.
Remove a point from the schedule.
Returns an iterator over all intervals in the interval list.
Returns a sorted list of all intervals in the domain.
Indent an element.
Add an annotation to the map.
Add a description for a controlled vocabulary.
Add an external reference to an entity.
Add a lexicon reference.
Add a linguistic type to the model Parameters ---------- lingtype : str ling
Add a locale to the list of available locales.
Remove all time slots from self.timeslots.
Extract annotation data between start and end time.
Generate a unique annotation id.
Generate a unique time slot identifier.
Returns the child tiers for the given tier.
Get the interval between full and partial time slots.
Get reference annotation data after a given time.
Get reference annotation data before a given time.
Returns a list of tier IDs for the given linguistic type and optional parent tier
Remove all annotations from a tier.
Removes the description of a controlled vocabulary.
Remove a license by name or url.
Removes files from the list of media descriptors.
Remove a property from the definition.
Remove the annotation for the given id_tier at the given time.
Remove secondary linked file descriptors.
Remove tier by id Args: id_tier (str): tier id.
Remove tiers from simulation.
Rename a tier.
Shifts all annotations by a given time.
Print debug information about a storage object.
Get the embedding levels of the given text.
Explicit embedding and directional overrides.
Given a list of run dicts, resolve the different bidi types.
Reverse contiguous sequence of characters.
Reorder the resolved levels.
Normalises the current file.
Add an attribute to an object.
Command line interface for the convert command.
Maintain backward compatibility.
Shows the current GUI.
Find the most recent registered GUI and return it.
Add files to the file menu.
Context manager that ensures that the selection is maintained.
Context manager that ensures the current time is maintained within the context.
Show no GUI.
Returns a generator that accumulates the cumulative data of all sets.
Returns a list of values for a single axis of a dataset.
Draw a constant line.
Loads the transform parameters for the plot.
Reverse a mapping.
Generate a range of floats.
Validates and processes data and adds it to the configuration.
Renders the graph and returns the HTML.
Calculates the left margin of the border.
Calculates and sets the right margin.
Calculates the top margin of the graph.
Add a popup to the QR Code.
Calculates the bottom margin of the chart.
Draws the graph to the screen.
Make a text entry for a datapoint.
Draws the x-axis labels.
Draws the y-axis labels.
Draws guidelines on the x-axis.
Draws guidelines on the y-axis.
Draws the titles of the plot.
Add inline styles to the document.
Starts the SVG for the stylesheet.
Return a list of stylesheets.
Runs an IRC bot.
Send data to the socket.
Connects to the server.
Respond to a user.
Return a tuple of patterns to dispatch.
Creates a new nick and registers it.
Handle a ping message.
Handles registered messages.
Called by the event loop when we enter an event loop.
Register with the boss.
Run the task queue.
Return a tuple of command patterns.
Called when a successful registration is successful.
Executes a worker.
Add a worker to the pool.
Sends a validation email to the user.
Sends a password reset email to the user.
Verify a signed token.
Deletes the user's avatar.
Check if the request should be throttled.
Return a client for communicating with the docker host.
Return a tuple containing the TLS certificate and key.
Return the name of the service.
Wrapper for docker methods.
Wrapper for _docker.
Check status of running tasks.
Stop a running service.
Filter the queryset based on the value.
Update the password of an instance.
Update the password of an instance.
Validate email address.
Create a new token for a user.
Delete a token and send a signal.
If the user is not authenticated, and the email is the same as the user's email
Handle POST request.
Updates the expiry field.
Generate the context for a password reset email.
Handler for sending email to user.
Handler for password reset emails.
Handler for the validation email handler.
Authenticate the user with the given key.
Authenticate using the given credentials.
Display the content of a notebook.
Processes a list of bokeh plots with the given widgets.
Create a custom JS callback for a change and p_name.
Returns the widget for the given parameter name.
Render a HoloViews function.
A shortcut for `textinput`.
Convert a list of named objects to a list of tuples.
Returns the owner of the given method.
Assigns user and password from a string or tuple.
Ping the server.
Returns information about the server.
Check the health of the server.
Convert a number of bytes to a human readable string.
Return the total amount of CPU load.
Returns the memory size in bytes.
Returns the number of nodes on the network.
List of volumes.
Get a volume by id.
Get the total size of a volume.
Returns the percentage used for a volume.
Return the average disk temperature of a volume.
Get the max disk temperature of a volume.
Get disk by disk id.
Attempts to log in and get an access token.
Makes a GET request to the given URL.
Execute a GET request against the OAuth provider.
Update the user's data. :returns: None.
Get a synoutilization object.
Get a reference to the storage object.
Return a context object for the given request.
Return the tenant token for this instance.
Build the attributes for this element.
Add apps to the settings.INSTALLED_APPS setting.
Remove apps from settings.INSTALLED_APPS.
Returns a dictionary of all global settings.
Handles the HTTP GET request.
Change a value in the config file.
Migrate config from old to new.
Starts the OAuth2 Web Server.
Wait for the server to return a response.
Get new access information from the server.
Check if the token is present in the configuration.
Set OAuth access credentials.
Create the manifest table in Amazon DynamoDB.
Split a path into bucket and path.
Determine if a bucket is a glacier.
Remove None values from a dictionary.
Add run_id to the manifest.
Check if a run_id is in the manifest.
Extract a schema from a URI.
Fix a schema to be more human-readable.
Parse an unstruct string into a list of tuples.
Transforms a line of text into a JSON object.
Convert a good event to a dictionary.
Get the template used in a response.
Print the context as HTML.
Prints the variables of the expression in a nice way.
Formats a SQL statement in HTML.
Format django context as HTML.
Format a summary of a dictionary as HTML.
Apply style corrections to text.
Formats the given object using the given context.
Formats the object and writes it to the stream.
Get a token from a string at the given position.
Get a list of LaTeX nodes from a string.
Convert a LaTeX document to text.
Convert a LaTeX document to text.
Remove non-ascii characters from a string.
Retrieves the organisation information for a company.
Get a list of boards.
Get a list of members.
Update an organisation.
Remove a member from this team.
Add a member to this team.
Adds a new person to this team.
Retrieves the list information for a project.
Add a card to your account.
Retrieves label information for a project.
Retrieves a list of items from the server.
Updates a label by name.
Update a label from a dictionary.
Returns the authorisation url for the given application name.
Retrieves card information for a project.
Get a board from the Materials Project.
Retrieves a list of resources.
Get a list of checklists.
Adds a comment to this campaign.
Adds an attachment to a file.
Adds a checklist to this account.
Adds a label to an existing object.
Adds a label to a class.
Adds a member to this team.
Retrieves the member information for a team.
Get a list of cards.
Get a list of organisations.
Create a new board.
Retrieves board information.
Returns a list of lists.
Get a list of labels.
Fetches a card by ID.
Returns a list of CheckList objects.
Get an organisation for this team.
Update an existing board.
Adds a list to this collection.
Adds a new label to this list.
Retrieves the checklist information for this account.
Get card information from checklist.
Returns a list of CheckoutItem objects for this checklist.
Updates an existing checklist.
Adds a new item to the collection.
Removes an item from this team.
Update the name of a checklist.
Update the state of a checklist.
Add the authorisation to the query params.
Check for errors in the response.
Builds the URI from the given path and query parameters.
Make a request to the URI with the given parameters and return the response as a Python dict.
Creates an organisation. :param dict organisation_json: The JSON data returned from the API :
Create a board from a board json.
Create a label. :param label_json: The label to create :type label_json
Create a list. :param list_json: The list to create :type list_json
Creates a new card. :param str card_json: card data :type card_json
Create a checklist. :param checklist_json: The checklist to create :type
Creates a new member.
Get an organisation.
Get a board by id.
Get a list by id.
Get a card by id.
Get a checklist by id.
Get a member by id or name.
Return the domain part of a URL.
Tokenize text with HTML markup less than the current date.
Set the password for a user in a service.
Split text by locations.
Mark all matches in text that match the regex as being split.
Marks the locations of the text that match the regex as being at the beginning and end of
Main entry point for the command line tool.
Create a AES CBC cipher.
Return a list of supported cipher modes.
Get the priority of this task.
Check the scheme of the config file.
Invoked by pika when PUBLISH message is received.
Make a unique id.
Connect to the broker.
Called when a connection attempt has failed.
Encode a string as a sequence of bytes.
Decodes an encoded string into a tuple.
Encodes a 16 bit integer as a bytearray.
Encode a length value.
Decode a sequence of bytes into a length value.
Return the header as a bytestring.
Encodes this ClientID into a bytearray.
Decodes the given packet into this object.
Encodes the result into a byte string.
Decode a packet into this instance.
Decodes the given packet into this message.
Encodes the message into a header.
Encode the message as a varheader.
Decodes the given packet into this message.
Encodes the message header.
Encodes the message into a byte string.
Decode a packet into this message.
Decodes the given packet into this message.
Returns the URL for the current request.
Make a request to the API.
Refresh the list of blocks from the server.
Format data to fit into the model Parameters ---------- data : np.ndarray The data to be
Fits and transforms the data.
k-means clustering.
Predicts the class labels for the given data.
Maps a set of clusters to a set of sampled clusters.
Sort clusters by means.
Return datetime formatted according to time_format.
Returns the total number of points in a dictionary.
Get the total time span of a detector.
Returns a dictionary of unit values for the given array.
Pretty-print an element name.
convert an analyte to namemass.
convert an analyte to massname.
Collate all files with the given extension into a single output directory.
Enumerate bool values.
Convert a list of tuples to a boolean array.
Fast smoothing with convolution.
Fast gradient of a rolling window.
Find the minimum values of x and y.
Performs mean-shift clustering on the given data.
k-means clustering.
Get the defined SRMS from a SRM file.
Read configuration from LATOOLS.cfg.
Read the LATOOLS configuration file.
Copies the SRM file to the given destination.
Exclude pixels that are closer than threshold.
Plots the auto-range of the signal Parameters ---------- analyte: str or str
Find the indices of background, foreground, and trn.
Calculate the ratio of the analytes to the internal standard.
Calibrates the time series with the given analytes Parameters ---------- calib_
Returns a dictionary of the times at which the sample was ablation.
Calculates the correlation between the features in ``x_analyte``.
Add a new filter.
Get the parameters of the filter.
Plots histograms of data.
Load reference data.
Calculate the mass of a molecule.
Generate keywords from args and kwargs.
annihilates the given stack with the predicate.
Equivalent of `dedup` for tuples.
Calculates the weighted statistics of the gaussian distribution.
Performs a Gauss-like linear approximation to the data.
Return the standard deviation of an array ignoring finite values.
Return a list of samples.
Calculates the ratio of the elements in the series.
Make a subset of samples.
Apply a classifier to the data.
return the number of removed samples.
Filters the reports for the specified annotations.
Create a minimal representation of the traces.
Save the log to a file.
Apply function f to the left-hand side of a function and return the result.
Bayesian Bayesian Scale of a time series.
Scales the median value of a timeseries.
Performs a noise detector on a signal.
Reduces the signal by expdecay_despike.
Add a new component to the model.
Remove a component or a set of components.
Remove all components and switches.
Remove all unused components.
Return the key of the fuzzed sequence.
Grab a component from a dictionary or key.
Return a string with information about the component.
Write a log file with header and log lines.
Reads a log file and returns a list of tuples with the name of the log file
Get modem information.
Send a message via modem.
Parse a MySQL file or string.
Construct a viewer link for the given URL.
Returns html div for the thumbnail.
Returns the code div for the snippet.
Returns the code example of the notebook.
The URL of the viewer.
Return the output file name with extension ending.
Create a Python file from a notebook.
Download data from a list of files.
Create a thumbnail of the last image in the list.
Scales an image using PIL.
Saves the thumbnail of the image.
Copies the thumbnail figure of the notebook to the output directory.
Returns the URL for the given notebook file.
Yields all possible languages for field_name in db_table_fields.
Apply processors to the thumbnail file.
Saves the image to disk.
Returns a list of all thumbnails.
Creates a thumbnail of the specified size.
Deletes the thumbnail for the specified size.
Creates a thumbnail from a file.
Returns a thumbnail for the given thumbnail name and size.
Deletes the thumbnail with the given name and size.
Called when a message is received.
Subscribe to events.
Returns a set of all states that have been accepted, delivered, expired or errored.
Send a message to a specific provider.
Returns a dictionary mapping provider names to receiver blueprints.
Called when a message is received.
Receive a status from the gateway.
Forward an incoming message to all connected clients.
Signs a web3 transaction.
Estimate the amount of gas in a block using Web3.
Estimate the amount of gas needed to encode a transaction.
Write to the stream.
Read a line from the serial port.
Check if the message has bad headers.
Attaches an attachment to the message.
Register one or more services.
Import a configuration object from a module.
Register one or more resources.
Returns the value for the given key, or raises a ValueError if it does not exist.
Handles the exiting of an object.
Sets up the data manager.
Calculate the N-Greek number of a given wavelength.
Calculate the Cauchy equation.
Make a DELETE request to the given endpoint.
Check if path1 and path2 refer to the same file.
Creates a new symbolic link to the specified directory.
Initialize the logging module.
Raise an exception with the given message.
Given a list of file_readers, return a list of unclaimed vcf
Retrieve the new column header from the VCF.
Claims VCFs from a set of VCF files.
Calculate mean and stdev of population based on dependent tags.
Claims a set of files from the input files.
Split data into lines.
Return the first line terminator that matches the given data string.
Look for a line terminator in the given string.
Seek to the next line in the file.
Seek to the previous line in the file.
Return the last lines of the file.
Returns the first N lines of the file.
Follow the file and yield lines.
Claim a set of VCF files from a set of strelka files.
Parse a VCF line into a VCFRecord.
Get the sample tag values for each sample.
Return the set of tags for this sample.
Join info fields from self.info_dict into self.info.
Return the format field to be used in the csv file.
Returns the field name for the given sample.
Return a text representation of the VCF.
Add a tag value to a set of samples.
Add or replace a filter.
Returns a list of all available categories for the given user.
Return a form to select products for a category :param category: The category to select :param
Return a form for selecting and editing staff products.
Adds an error for a product field.
Returns a form class that can be used for editing the fields of a model.
Returns a list of items that are pending or purchased.
Sends an email to the given recipients.
Parse an OSM file into a list of nodes, ways and relations.
Iterate over OSM notes.
Returns True if the current filter passes for the given user.
Check if a user is met.
Returns the quantity remaining for the given user.
Filter the queryset to only include carts that are in the user's cart.
Filters the queryset to only include products that are in the user's cart.
Filter the queryset to only include items that are relevant to the current user.
Filter the queryset to only include those that are not cancelled.
Filter the list of users by filtering on the user's groups.
Returns a cart for the given user.
Automatically calculates the reservation duration based on the quantity of vouchers and product items
Apply a voucher code to the cart.
Make sure all vouchers in the cart are valid.
Recalculates the discounts for all products in the cart.
Iterates over the rows of the table.
Returns the form to be used in the view.
Render the data as HTML.
List all reports.
Lists all line items sold.
Returns a report of payments.
Returns a report of refunded credit notes.
Returns a list of product statuses.
Displays the current status of discounts.
Returns a list of LineItems for the given products or categories.
Returns a list of paid invoices ordered by date.
Returns a report of credit notes.
List of all invoices.
Returns a list of attendees and their profiles.
Returns a queryset of users who have registrations for the speaker.
Returns the set of categories that are not available for the current user.
Returns the amount of credit available for the current user.
Returns True if the given ticket product is sold out and not registered.
Edit profile page.
Handle profile request.
Handles the product form.
Handle a voucher request.
Manage a manual payment of an invoice.
Refund an invoice.
Extends the reservation for the specified user.
Send out an email for each invoice.
Manage invoices with product and status.
Render a badge for a user.
Returns a list of DiscountAndQuantity objects for the given categories and products.
Annotates the queryset with the number of past use discount items.
Return a list of products available to a user.
Applies this payment to the given invoice.
Get the cancellation fee for the credit note.
Generate a random access code.
Get an object from its name.
Returns an invoice for the given cart.
Creates a manual invoice.
Applies the unclaimed credit notes to the invoice.
Returns True if the user can view the invoice.
Refreshes the invoice from the database.
Validate that the invoice is allowed to pay.
Updates the status of the invoice.
Marks the invoice as paid.
Checks if the invoice matches the cart.
Checks if the invoice is valid and if not refunds or refunds the invoice.
Marks the invoice as void.
Refund the invoice.
Sends an email to the user who created the invoice.
Update the class from a dictionary.
Flatten a field into a nested dictionary.
Print downloads of downloaded files.
Download the value of a given field from the server.
Get a list of processors.
Print the inputs of the given processor.
Runs data from a JSON string.
Upload files to a project.
Upload a file to the server.
Download data for a list of data objects.
Recursively get subclasses of a class.
Get repo and project.
Get a list of phenotypes with suggested changes for a variant.
Get a list of evidence and phenotype with suggested changes merged.
Update an existing element.
Remove duplicates from a sequence.
Authenticate using Asana and Github API.
Prompts the user to select an item from a list.
Get the saved issue data for a given issue.
Move a saved issue to another namespace.
Get the task data for a given task number.
Returns the Asana task with the given task_id.
Apply a value to a key.
Waits for items to be added to the queue and puts them on the queue.
Create missing task in workspace.
Return a list of data types for this project.
Log a message to the EkmMeters log.
Initialize the serial port.
Set the polling values.
Render the reads since a given timestamp for a given meter.
Set the context string.
Calculates the cost function fraction given a cost function string.
Set the maximum demand period.
Set the password of the meter.
Return the read months buffer.
Assign a schedule for a given period, hour and minute.
This function is used to assign a schedule for a season.
Assign holiday date to self.m_holiday_params.
Read a set of schedules from the device.
Read monthly tariffs from the device.
Reads the weekly dates from the device.
Reads all settings from the file.
Write a command message to the log.
Perform password auth on the serial port.
Calls the update method of all registered observers.
Submits a request to the EKM server.
Request the A value from the meter.
Requests a raw byte from the meter.
Make the A and B requests.
Set the LCD display list.
Set the relay status for a given number of seconds.
Post-end of the serial port.
Set the pulse input ratio.
set zero resettable kwh.
Set the LCDd IDs.
Iterate over all fields in a schema.
Iterate over a schema recursively.
Generate a random text.
Return a string containing the timing and result statistics.
Return colored text.
Shows the given text in the terminal.
Return a summary of a test result.
Parses command-line arguments.
Sets up the result manager.
Runs the examples in the given configuration.
Runs the transform script from the given configuration.
Transform a describe statement into an AST class.
Transform the body of a describe statement.
Transform an example node into an ast.FunctionDef.
Transform the body of an example into something that can be used as a context variable.
Return an ast.Arguments that only takes self.
Register the path finder.
Convert a byte string to a Python code object.
Apply an argument parser to a set of arguments.
Load a module by name.
Load Python source files from a directory or list of paths.
Discover packages in a directory.
Remove a file from the config.
Restart a place.
Call a function.
Make a service object.
Refreshes the session with the given node_id.
Remove expired nodes from the nodelist.
Remove a node from the node list.
Get the last time a node was updated.
Get all nodes in the nodelist.
Removes expired nodes from the nodelist and refreshes the session.
Increments the number of times an object was modified.
Takes a list of values and returns a list of values separated by the delimiter.
Check for bad files in the given path.
Merge two statuses into one.
Check if a token exists.
Return a query that matches the given token.
Create a multiservice object.
Consume the reader and check for expected values.
Returns an optional parser that parses `parser` and returns it.
Repeats the first argument of a parser.
Return a new parser that is the repeated version of `parser`.
Return a parser that splits the input by the given separator.
Return a parser where the separator is seperated by the given parser.
Closes the connection to the server.
Check if the URL is valid.
Create a heart service if one doesn't already exist.
Wrap a heart service in a multiservice.
Freezes a graph from a checkpoint.
Saves the current checkpoint and then freezes it.
Saves graph-only from a checkpoint.
Saves weights from a checkpoint.
Restore the graph from a checkpoint.
Create a new Tag instance from a parser and a token.
Renders the tag with the given arguments.
Validate the arguments for a tag.
Get the context data for this tag.
Create a Tag instance from a parser and token.
Returns the context data for this tag.
Create a TensorFlow session for a caffe model.
Freeze a caffe model by dumping it to disk.
Saves a graph of the input caffes to a file.
Make the rows of a sequence.
Iterates over an iterable, yielding every other value.
Remove duplicates from an iterable.
Returns the next item from an iterable, and the original iterable.
Suppress exceptions from callables.
Assert an iterable is ordered.
Swap items on miss.
Get the first n queues.
Resets the iterator to the original state.
Extracts the variable name from the token.
Return the descendant of the given chain path.
Iterate over an object. :param obj: The object to iterate. :param parent: The
Parse a selector string and return the result.
Parse a selector and return a list of objects.
Returns the list of parents of rhs that are in lhs.
Return siblings of nodes in rhs that are also in lhs.
Match nodes using a list of validator functions.
Make a get body request.
Expires all items in the cache that are older than ``age``.
Set the value of the key k to v.
Get a value from the cache.
Returns True if the given key is in the datastore.
Check if a record is consistent with the chain.
Create a Key from a JSON string.
Create a Key object from an XML string.
Returns the rendered content of the template.
Get lines from the log file.
Get a list of rows from the table.
Validate a token.
Returns the fernet engine.
Validate token using supported digest algorithms.
Create a new token. :param obj_id: The id of the token :param data
Computes the 32-bit counter function.
64bit counter function.
Takes a total duration and a number of visits and returns the average duration.
Create sources and setup triggers.
Send an event to a single source.
Monitor sources and start them if needed.
Parses a format string.
Parses a line of text into a dictionary.
Validates that the value of ``expires_at`` is less than or equal to
Verify the token and store it in the session if valid.
Return the name of the device.
Print a warning for the current node.
Connect the signal receivers.
Create a secret link for a record.
Sends an accept notification for the given request.
Send notification for confirmed record.
Send email confirmation notification.
Sends a reject notification for the specified request.
Send a notification via email.
Create a new link.
Validate a token against expected_data.
Send the link revoked signal.
Create a new record.
Get receiver by request_id and user.
Send email confirmation email.
Create a secret link for this email.
Returns a SHA512 hash based on the given parameters.
Verifies the signature against the given message hash.
Check if a record is scheduled to be replicated.
Create an access request.
Confirm email confirmation for a record.
Return an ssh command client endpoint.
Reverse the value of a column.
Return the currently selected item.
Return all the items in the result set.
Returns the version of the file.
Add a new version to the file.
Start the timer.
Get an event from the service and process it.
Delete a list of access requests.
Stop the thread and disconnect the connector.
Empty the queue of events.
Receive events from the socket.
Create an Elasticsearch client.
Encodes an Event protobuf.
Encodes a list of events into a protobuf message.
Decodes a bytestring into a Message.
Send events to the server.
Generate a preview of a file.
Retrieve a preview.
This is the main loop for the worker.
Return True if we should log the current time.
Abort the SASL session.
Perform SASL mapping on a sequence of characters.
Template tag that renders the admin footer.
Builds the payment parameters for the given amount and client reference.
Builds payment parameters for register credit card operation.
Creates a payment with an alias. :param amount: Payment amount :param alias_id:
Return a short version string for the given version.
Reconfigures the widget after the window is constructed.
Configures the shortcuts for the up button.
Callback for when a new item is selected.
Called when the user selects an item.
Navigates to the item at the given index.
Set the resource source and target paths.
Fetch all children of this node.
Return the icon for the item at the given index.
Calls a command in a child process.
Return the maximum file descriptor limit.
Close a file descriptor.
Close all open file descriptors.
Redirect a stream to a file.
Set widgets attributes for each field in the form.
Imports a module from an application.
Import all project submodules.
Include a template tag.
Check if the given path is a valid file system path.
Check if url is a valid S3 URL.
Return the absolute path to a template file.
Returns a list of objects in S3.
Builds the JSON for the workflow.
Execute the workflow.
Archive a folder in the current working directory.
Make a directory, including all its parents.
List files in the project archive that match the given pattern.
Restore a folder from the archive.
Create a new API client.
Returns a list of all files in the directory at the given path.
Downloads a file from the server.
Checks if the given path exists.
Get the parent entity for a storage path.
Creates a folder at the given path.
Uploads a local file to a destination path.
Deletes a file or folder at the given path.
Validates storage path.
Create a new instance of StorageClient.
Create a new instance of this class with an OAuth access token.
Returns the metadata for the given entity.
Deletes a project :param project: Project to delete :returns: None :rtype:
Deletes a folder. :param folder: The folder to delete :type folder: str :
Copies the content of a file to another file.
Returns the URL for the file with the given id.
Emit a record to the collection.
Return a reference to the given service and version.
Returns a new request with the given response headers.
Creates a new request with the given parameters.
Throw an exception of type ``exception_class``.
Returns a list of fields to display.
Map a function over a set of samples.
Run oncotator on a single VCF.
Sorts the list in place using the given function to sort keys.
Returns a list of timestamps.
Loads an export from a folder.
Shift each element by t.
Returns the sum of all values in the domain.
collect rfxcom data.
Create a new user.
Parse vn results.
parse release results from leo.
Parses production staff results.
parse character results from poker game.
Parse the results of a tag search.
Parse user results.
Create a tarball from a list of files.
For each file in file_paths run op on each file in output_dir.
Copy a file from the global file store to the output directory.
Add host option to docker parameters.
Reloads the metadata from the database.
Returns a list of streams in the registry.
Export data to directory.
Parse search results.
Reset the device's API key and return it.
Return a list of users.
Run the BWA index tool.
Return the connector database object.
Add a stream to the database.
Force a stream to be added to the database.
Insert a value into a stream.
Starts the synchronization thread.
Stops the background thread.
Download a URL to a job.
Upload a global file to S3.
Print all labels in an OLS file.
Generate a tree of GO IDs.
Calculate the mean insert size of a bam.
Create a new database entry.
Export the sequence to a directory.
Return the device object for this path.
Get all labels for an ontology.
Get an OLS hierarchy for a given ontology.
Returns the contents of the config file.
Get the mount path of the current Docker container.
Add an option to the argument parser.
Creates the argument parser.
Create the command to run the pipeline.
Set the authentication for the websocket.
Handles the result from the server.
Pings the server.
Creates a new CRUD on the server.
Updates a CRUD on the server.
Deletes a CRUD. :param path: CRUD path :type path: str :
Subscribe to a stream.
Return list of devices.
Run cutadapt on both IDs :param job: job object :param r1_
Run samtools faidx.
Run samtools index.
Run SAMBamba MarkDup on the input BAM file.
Run samblaster on the input SAM file.
Use Picard to mark duplicates.
Run Picard sort on a BAM file.
Run kallisto on the given r1_id and r2_id.
Returns the affinity matrix for the users in the given test.
Sends a command to the websocket.
Subscribe to a stream.
Connect to the websocket.
Reconnect to the device.
Resubscribes all subscribed streams.
Called when the WebSocket connection is established.
Called when the WebSocket connection is closed.
Callback invoked when a websocket error occurs.
Called when a websocket message is received.
Ensure that the connection is still alive.
Select variants using GATK.
Quick check a BAM file for consistency.
Write the configuration to a JSON file.
Get the configuration from the config file.
Returns a single term for the given ontology and iri.
Search for an ontology by name.
Returns a list of suggestions for the given ontology.
Returns an iterator over all terms in the ontology with the given iri.
Iterate over the descendants of the given ontology and iri.
Iterate over all labels in the ontology.
Yields hierarchical terms and child terms for the given ontology.
Run fastqc on a pair of IDs.
Add a stream to the query.
Start the container and return its hostname.
Starts the HDFS cluster.
Start the datanode.
Stops the container.
Check the status of the Spark and HDFS containers.
Given a zone name, return the name of the zone.
Fetches the configuration for a zone.
Merge configuration files into one.
Validates a changeset.
Returns a list of the members with the lowest fitness score.
Returns the fitness score of this group.
Returns the average cost function for all members.
Returns the cost function value of this group.
Returns a dictionary with the average parameter value for all the processes in the group.
Returns the members of the group.
Adds a parameter to the parameter list.
Normalize keys to make comparisons easier.
Return a generator of environment variables.
Executes the callable and waits for one of the exceptions.
Transform a list of hits into a list of packages.
Transform the result of a call to the correct type.
Convert html to xhtml.
Convert an XHTML document to HTML.
Open a document in a browser.
Drop this node from the tree.
Drops the tag from the parent element.
Apply a css selector expression to this element.
Get members of all log handlers.
Get counts from environment variables.
Returns True if the project is running as a single class.
Returns True if the module is a single module or a single class.
Check that the request contains the correct params.
Ensures that the ID in the request is correct.
Decode path using sys.getfilesystemencoding.
Escape all values in iterable with `escape` function.
Return the codec name for the given encoding.
Detect the encoding of the stream.
Get the remote address from the forwarded_for list.
Convert an amount to a decimal.
Parse a string and return an ElementTree.
Parse an XML file and return an ElementTree.
Convert BeautifulSoup tree to ElementTree.
Return the traceback of the current exception.
Return the exception as a string.
Renders the summary of the exception.
Yields a sequence of strings representing the traceback.
Render the source table as HTML.
Given an egg info string and a search name, return the portion of the egg info that matches
Sort links into eggs and no-eggs order.
Get the content type of the given URL.
Yields all links in the document.
Check if this item is verifiable.
Return list of data files for package in src_dir.
Return a list of files that should be excluded from package data.
Parses a requirements file.
Yield lines of text separated by spaces.
Ignore any comments in the input iterator.
Visit a node and raise an exception if it is not allowed.
Create a new attribute node.
Coerce a string into a number.
Push the current app context onto the stack.
Pop an app context off the stack.
Return a copy of this instance.
Match the request against the adapter.
Pushes the current request context onto the stack.
Check if a distribution is editable.
Add a URL value preprocessor.
Add a url_default function to the blueprint.
Get the root path of an import.
Return a jinja2 template loader.
Run completion script.
Get the cookie domain.
Check if the root of the wheel is a pure library.
Yield paths to uninstallation files for a given distribution.
Check if the wheel is compatible with the given version.
Build one wheel from a request.
Iterate over all symbols in the code object.
Write the delete marker file to the given directory.
Check if we are running under a virtualenv.
Get the current user's username.
Return a scheme suitable for use with distutils.
Parse cache control headers.
Store the response in the cache.
Load a template from a device path.
Saves the current state of the model to disk.
Convert the given value to the appropriate type.
Add one or more filters to the given filterer.
Add handlers to a logger.
Configure a logger based on a dictionary of configuration parameters.
Execute a Python script file.
Temporarily override a temporary directory.
Get the URL and revision for this commit.
Get an item from an object.
Generate code from source.
Get the default cache location.
Recursively find eggs in a zip file.
Find a distribution based on a path item.
Declare a namespace for the given package name.
Get the mro for a class.
Find an adapter for the given object.
Ensure directory exists.
Iterate over all entry points of the specified group.
Return True if the given distribution can be added to this distribution.
Evaluate a marker expression.
Evaluate text using markerlib.
Format a log record.
Returns a decimal quantum for the given precision.
Returns the decimal precision of a number.
Get scientific notation elements.
Returns the unpatched class.
Check that the value is a list of requirements.
Fetch the build egg.
Roll a dice.
Takes a price string and converts it to a Price object.
Creates a `price` attribute.
Validate a request.
Get a method from the app.
Apply the method with the given args.
The module that this blueprint is defined in.
Returns the blueprint name from the URLRule.
Makes an abstract dist object.
Walks the requirements and installs any missing requirements.
Return a list of all namespace packages.
Encodes the given object as JSON.
Tokenize a document and add an annotation to each token.
Annotate tokens_old and tokens_new with merge annotations.
Copy annotations from src to dest.
Compress a list of tokens into a list of tokens.
Serialize a sequence of tokens using a Markup function.
Expand HTML tags in a list of tokens.
Find unbalanced end.
Given a list of chunks, return a list of token objects.
Flatten an HTML element into a sequence of tuples.
Split text into a list of words.
Return the start tag of an element.
Return the end tag of an element.
Serialize an HTML fragment.
Fixup indel tags.
Build the cache url for a given operation.
Recursively links the given element and all its children.
Kill conditional comments.
Parses an HTML string and returns a DOM document.
Export the repository to the given location.
Get the revision number for the given location.
The name of the module.
Return whether to propagate exceptions from the test or debug level.
Try to auto-find the instance path.
Update the given template context with any registered template processors.
Handle an exception raised by an HTTP client.
Handle an exception raised by the server.
Raise the routing exception if debug is enabled.
Perform a full dispatch of the request.
Build a default OPTIONS response.
Create a URL adapter for the given request.
Injects default URL values into the given endpoint.
Yields only unique values in the iterable.
Add may-requires metadata to the metadata dictionary.
Convert a requirement to a requirements distribution.
Convert an egg's metadata file to a package metadata file.
Yields all modules in the directory.
Iterates over all classes in the module.
Get the names of all methods in the module.
Check if given path is a valid module path.
Yields all directories and files under the given base directory.
Dumps default values to kwargs.
Loads the default JSON decoder.
Set multiple keys and values at once.
Increments the value of key by delta.
Dumps an object to a string.
Build a dict of editable options from a request string.
Populate the link attribute using the given finder.
Ensures that the source directory exists.
Remove the temporary build source directory.
Return a pkg_resources.Distribution object for this distribution.
Return a list of site configuration directories for a given application.
Iterate over all files in sys.modules.
Spawn a new process with a loader.
Convert a string to a text type.
Find the CA bundle.
Parse an HTML document.
Parses the given stream as HTML and returns a DOM tree.
Parses a fragment from the given stream.
Return a list of translations for the given word.
convert args to tokens :param data: data to parse :type data: str :return:
Binds the server to the server.
Prints the report to stdout.
Load bytecode from file.
Convert a dictionary of parameters to a stylesheet params object.
Run a command on this sub-process.
Get the implementation version.
Return a list of distros for the given location and basename.
Find external links in a page.
Open a URL using the local file system.
Remove paths from sys.path that are not in the known set.
Return a set of all directories in sys.path.
Add a package to the Python path.
Add all packages in sitedir to sys.path.
Check if user site is enabled.
Aliases mbcs to the default encoding.
Set the sys.default_encoding to the locale's default encoding.
Forces the global eggs to be updated after local site-packages.
Fixes the sys.path list to include only the classpath entries.
Wrapper around subprocess.popen that doesn't block stdout and stderr.
Check if we have pyrex support.
Convert PyX sources to the target language.
Run the application and log it.
Get a resource from the given filename.
Check if given name is a valid URL.
Unpack the given URL into the given location.
Download a file from an HTTP link.
Check the download directory for a given link.
Formats a currency.
Register an exchange component.
Decodes the data using the specified decoder.
Get the default template context processor.
Render the given template with the given context.
Render a Jinja2 template with the given context Args: template_name (str):
Render a Jinja2 template string.
Parse a version string.
Check if a name is declared in this scope.
Visit a Name node.
Handle from-import nodes.
Create a service and serve it forever.
URL encode a string with the given charset.
Given a list of wheels, return a list of wheels that match the requirement.
Populates a `RequirementSet` from the given `args` and `options`.
Exports the archive to the given location.
Look up a product by name or ID.
Iterate over pages.
Returns the ancestor of the browse node.
Return the children of this browse node.
Safely get an attribute from an attribute path.
Safe get element text.
Safe get element date.
Get Price and Currency.
Get Price.
Overrides Django's send method to add the cache-control headers.
Build the response for the given request.
Return a titlecased version of a string.
Return True if val1 and val2 are equal in constant time.
Verifies that the signature is correct for the given key and value.
Derives the secret key based on the key_derivation setting.
Get the signature for a value.
Return a signature for the value.
Verifies the signature of the value.
Verify that the value is signed by this signature.
Return a signature for the value.
Returns True if the signed value is valid.
Serializes the given object to bytes.
Raise an exception indicating a server error.
Require all packages to have parent packages.
Yields all directories under base_path.
Prepare the response for the given request and cached response.
Unsign a wheel file.
Unpack a wheel file into a directory.
Install script for all distributions.
Arranges all data in the graph.
Draw the graph on the canvas.
Returns the node with the given id.
Called when the graph is changed.
Add edges to the graph.
Called when a component is changed.
Normal left click handler.
Called when the diagram canvas is changed.
Clears the current canvas.
Called when a domain model is changed for a diagram.
Unmaps the model from the graph.
Maps an element to another element.
Parses an xdot data string.
Process font.
Process ellipse tokens.
Process polygons.
Process tokens as a polyline.
Process text component.
Process image.
Render a grid file as a response.
Saves the given object to the dot file.
Loads the object from the dot file.
Checks if a point is within the ellipse.
Draw the bounds.
Perform the dot-graph wizard.
Create and start the sqlalchemy engine.
Parse dot code and store graph in self.model.
Create a new model from scratch.
Opens a file dialog to get the model from the dot file.
Save the assembled model to a file.
Saves the current model to a file.
Configures the graph based on the given info.
Configures the nodes of the model.
Configures the edges of the model.
Go to the about view of the user.
Add a new node to the control graph.
Add an edge to the graph.
Add a subgraph to the graph.
Add a cluster to the graph.
Request the graph to be edited.
Godot options edit widget.
Configures the dot code.
Called when the user exits the application.
Move components to their origin.
Save the image to a file like object.
Load data from a file like object.
Saves the object to a file.
Load an object from a file.
Create a property with an alias. :param name: Name of the property :type name:
Parse a text file into words.
Returns a list of start words.
Adds a new chain with the given name and order.
Remove a chain by name.
Build the chain from the source.
Create a dot file and run it.
Remove a node from the graph.
Returns the node with the given id.
Deletes an edge from the graph Args: tail_node_or_id (str):
Add a subgraph to the graph.
Called when a program is changed.
Set the list of nodes for each edge in the graph.
Parse a graph from a DOT file.
Parse a DOT file into a dictionary.
Build a top-level graph from a list of tokens.
Returns the time units and multiplier for a given number of seconds.
Formats the given number of seconds in a human-readable format.
Called when a new file is selected.
Creates the ui for the graph.
Yield successive windows of the given length.
Get the children of the given object.
Append a child to an existing object.
Insert a child into a subgraph or cluster.
Remove a child from an object at the given index.
Called when children are replaced.
Called when the children of the object have changed.
Returns the label of the object.
Sets the label of an object.
Called when the label of the object has changed.
Initializes the graph with the given parent.
Update the editor with the contents of the canvas object.
Add listeners to the object.
Callback for nodes replaced.
Nodes have changed. :param object: :param name: :param event: :return
Add nodes to the graph.
Replace edges in the graph with new edges.
Handle edges changed.
Add edges to the graph.
Parse an X-DOT directive.
Called when the component is drawing.
Generate a node from a row factory.
Return an edge for the given row factory.
Prepare the database for use.
Parse an X-DOT drawing directive.
Parse a ``label`` directive.
Called when drawing has changed.
Called when the position of the widget has changed.
Called when the position of the component has changed.
Called when a normal right-down event is received.
Highlight all available styles.
Draws the main layer of the turtle.
Checks if a point is inside this polygon.
Draws the main layer of the turtle.
Dispatches an event to all registered engines.
Runs the worker thread.
Returns the URL for a particular page.
Renders links to the previous and next page.
Renders the seo links for this page.
Create a URL identifier from user and password.
Discovers all modules in the given directory.
Find all the modules in the given directory.
Return a list of all modules in the given module.
Ensure directory exists.
Store the contents of a text blob under the given key.
Checks if a card number is valid Luhn number.
Load a module by name.
Adds the given path to the list of paths.
Find a module in the search path.
Split a line into a list of lines.
Remove all namespaces from the root element.
Return a string describing the consistency of the package.
Create a new instance from a dictionary.
Merge another dictionary into this one.
Execute all actions in the environment.
Add details to the error message.
Emit a record.
Add image rendition to context.
Log an attempted attempt.
Add a url to the queue.
Start the worker threads.
Set a value in the key-value store.
Get the value of a key :param k: The key :type k: str :param
Recurse into a set of key-value pairs.
Get a single item from the index.
Delete a key from the kvstore.
Plots a clustermap of features.
Add a number of months to a timestamp.
Add a number of months to a date.
Is this a christmas period?.
Use a particular music service.
Use a storage service.
Load data from CSV file and return as list of dictionaries.
Returns a list of lists from the JSON file.
Writes the data to a JSON file.
Returns a list of tuples where the first element is the reference label and the second is the
Calculates the mean value of all samples for a given reference label.
Restores the session data.
Merge dict b into dict a.
Find blocks for all installed apps.
Verify that the given block is valid.
Registers a block to the block registry.
Unregisters a block type.
Convert a file to MP3 format.
Given a desired version, return a reasonable update string. :param desired_version: The desired
Handle SSL redirection.
Parses a Content-Type string.
Parse a value into a list.
Resize an image to fit a width.
Download a YouTube video.
Connect to the server.
Uploads a file to the server.
Connects to the Music Library.
Update the input filenames.
Reads a.phi file and sets self.a_phi.
Scale the A-phi by the given parameter.
Read pure water absorption from file.
Read pure water scattering from file.
Read the wavelengths from a CSV file.
Write the IOP to a file.
Build scattering matrix.
Build A. :returns: A.
Build self.c.
Build all IOUs.
Set the batch parameters.
Read a parameter file into a dictionary.
Convert a string to a list of floats.
Set handler for given signals.
Called when the process is about to exit.
Default signal handler.
Pauses the process for the given signal.
Signal handler for abort.
Called when the status message is received.
Remove an event from the event list.
Returns a sorted list of metric values.
Get the signature information from a function.
Copy the parameters from the partial instance.
Return a copy of the current argv and a copy of the extra_argv.
Check to see if a file should be ignored.
Return a key for the given file.
Converts a VLQ encoded integer to its integer representation.
Parse the header of the archive.
Convert seconds to a human-readable duration.
Print the details of the game.
Gets the data from the ui elements.
Search for the file result.
Write batch to file.
Process the data file.
Display the graphic connection.
Displays the error message.
Hides the error message label.
Runs the batcher.
Cancel planarrad if running.
Quits the application.
Saves the current figure to disk.
Opens the log file.
Opens the documentation in a window.
Sets up the prerequisite actions.
Handles clicks on the context menu.
Handle mouse move events.
If authorized_display is True, display the graphic.
Create a lockset for the given genesis and sign it with the given private key.
Sign this signature with a private key.
Return the hash of the message.
Check that the circuit is valid.
Issues funds from your account.
Get the lock for the last round.
Returns the last voted block proposal.
Return the last valid lockset.
Get the timeout for this proposal.
Called when a proposal is received.
Generate a list of private keys.
Calculate the latency of a packet.
Deliver a packet to the given sender.
Returns the native contract class for the given address.
Add a new item to the filter.
Convert a VGG signal into an image.
Converts an image to VGG format.
Returns the function layer for the given layer name.
Get layer output by name.
Get features from the network Parameters ---------- x : list of float or list of floats layers :
Create a new key file at the given path.
Finishes the acquisition and returns the exit code.
Release the database connection.
Returns a list of all tables in the database.
Remove flags specified in `remove_flags` from `compiler_so`.
Find the latest teradata home directory.
Get a value from the configuration.
Set a value in the configuration file.
Print a table of data.
Write the default configuration file.
Set the names of the columns that should be returned.
Export settings to a string.
Convert a string to a float with a multiplier.
Parses a string of gains into a dictionary of gains.
Parse a device settings string into a dictionary.
Wrap text with textwrap.TextWrapper.
Attempt to detect devices using soapy.
Set the center frequency of the PSD.
Calculates the FFT and PWR for the given state Parameters ---------- psd_state
Wait for the result of the PSD to be available.
Update the state of the PSD using Welch's Welch algorithm.
Read a PWR header and pwr array from a file.
Writes the data to the file.
Submits a function to be executed asynchronously.
Return the number of repeats for the given integration time.
Create a buffer for the audio data.
Sets up the audio processing pipeline.
Stops the stream.
Run cmake.
Return a set of datetimes that are older than now.
Create a mask from a datetime object.
Create a time mask for the given date.
Given a set of datetimes, return a set of datetimes that need to be deleted.
Given a list of dates, return a set of dates that should be kept.
Given a set of dates, return a set of dates to delete.
Get the SPI control byte.
Reads the specified bit from the specified address.
Write a single bit to an address.
Get the bit number from a bit pattern.
Tries to bring the gpio interrupt pin into the userspace.
Set the gpio interrupt device edge.
Waits until the given file exists.
Register a callback for a specific pin.
Remove a specific pin from the list of function maps.
Enables or disables GPIO interrupts.
Send a string of bytes to the SPI chip.
Render the form.
Returns True if the form has any errors.
Render the link to the form.
Extract the version from a package.
Add the form container to the form's kwargs.
Check the status of the response.
Perform a GET request to Github's API.
Calculate the humidity at a given temperature and dewpoint.
Calculates the dewpoint given the temperature and hum.
Publish the message to the server.
Calculate the CRC of the given data.
Verify the CRC of the data.
Unpack Storm date into a string.
Determine if we should use the revision b archive.
Wake up device.
Send a command to the device.
Get new archive fields from the device.
Parses the fields and calculates derived fields.
Update weather for a list of pub_sites.
Initialize the logging system.
Return a list of public services for the given options.
Get the current value of the gust.
Set the weather parameters.
Set the arguments passed to the function.
Publish the configuration to a file.
Fulfill a set of requirements.
Push a new override context onto the stack.
Pops the top override context from the stack.
Temporarily override a value in the context.
Push an additional context onto the stack.
Pop an additional context from the stack.
A context manager for adding additional items to the stack.
Return a list of field names without duplicates.
Interpret the results.
Given a query and a user namespace, extract the parameters from it.
Returns a Pandas dataframe of the DataFrame.
Returns a networkx graph representation of the graph.
Plots the data.
Writes the result to a CSV file.
Add the widget's context data to the context.
Returns a sorted list of widgets.
Returns a list of widgets that need to be updated.
Register a dashboard widget.
Unregisters a widget class.
Returns the last update for this dashboard widget.
Saves a setting to the database.
Return True if we need to update the page.
Concatenates two arrays.
Returns True if any of the arguments are SparkContext instances.
Validate and format axes.
Wrap a function to be applied to an array along a given axis.
Aligns the input array with the input axes.
Convert to a Spark array.
Convert to an RDD of ndarrays.
Given a plan and a shape, return the number of chunks.
Get a boolean mask for a set of indices.
Repartition the RDD. Args: npartitions (int): number of partitions Returns:
Stack the elements of an RDD into a new RDD.
Aligns the data with the given axis.
Returns the first element of the RDD.
Compute the mean across records.
Compute the variance across records.
Compute the standard deviation across records.
Reduction along axes with addition.
Reduction along axes with maximum value.
Reduction along axes with minimum value.
Transpose the array along one or more axes.
Swap axis1 and axis2.
Reshapes the array to the given shape.
Return the index of the first matching key and value.
Return an RDD with all elements cast to a given type.
Clip values within an interval.
Convert the RDD to a numpy array.
Convert an argument into a tuple.
Takes a tuple or list and turns it into a tuple.
Check that the given shape is valid for the given axes.
Test if two arrays are equal.
Check that lst is a list of integers with a minimum dimensionality.
Return a slice of the given dimension.
Check if new and old can be transposed.
Check if new and old are reshapeable.
Like numpy.allstack, but for numpy arrays.
Iteratively expand arrays.
Return the first constructor that accepts the given arguments.
Create an array of given shape and type, filled with ones.
Return an array of given shape and type filled with zeros.
Concatenate arrays.
Compute the discrete log-likelihood of the data.
Discrete max-likelihood function.
Computes the alpha value of a discrete distribution.
Discretizes the ksd distribution with the most likely alpha.
Plots the power spectrum.
Computes the lognormal of the model Parameters ---------- doprint (bool): Prints the log
Sanitize a HTML string for use as a Turbo object.
Configure an Analyst Analytics API endpoint.
Return a list of tuples of tag name and value.
Return the md5 hash of the decoded key.
Return the SHA256 hash of the decoded key.
Return the SHA512 hash of the decoded key.
Parse a long value from a byte string.
Decode a public key from its base64-encoded form.
Process the SSH_RSA packet.
Process the ssh_dss field.
Process the ECDSA signature data.
Process an ED25516 frame.
Parses the given keydata into a cryptography key object.
Return the number of mechs.
Main entry point for the application.
Initialize a setuptools instance.
Context manager to create a wave file.
Return the HTML for the Home Markup frontend.
Return a version-normalized frontend URL.
Renders the HTML for a fontawesome page.
Renders the Modernizr dashboard in HTML.
Return the HTML for a Jupyter Notebook frontend.
Return the HTML for a Jupyter Notebook frontend page.
Return the jQuery DataTables page.
Return the CSS for the jQuery DataTables plugin.
Return the jQuery DataTables Themeroller page.
Return the HTML for a JQuery formset.
Return the HTML to scroll the jQuery library to a particular version.
Return the HTML for a smooth scroll of the jQuery library.
Return the HTML for the frontend's Twbs CSS.
Default domain name for DJ frontend.
Generate auth hashes for the given user.
Calculate expiry time based on number of minutes.
Generate a token for a user.
Add the user's profile and permissions to the user's data.
Update a user.
Raises a meteor error if authentication fails.
Check if the token is valid.
Check if the request is secure.
Get a user's username.
Create a new user and return a token.
Logs a user in.
Do logout.
Attempts to log in using either a password or a resume token.
Attempts to log in using the given username and password.
Logs the user in with a resume token.
Handles forgot password requests.
Reset a user's password.
Recursively merge two dicts.
Return the meteor id for the given object or model instance.
Get meteor ids for the given list of object_ids.
Get the object id for a given meteor_id.
Given a list of meteor ids, return a dictionary of object ids.
Get an object from the database.
Set the default forwards for the given operation.
Get the meteor_id for each object in the database.
Truncate the database forwards.
Truncate the database backwards.
Initialize meteor specific options.
Setuptools specific options.
Convert a path to a directory.
Set random seed values. :param values: list of values to seed :type values: list
Return the current state of the motor.
Generates a random string of given length and alphabet.
Get all API endpoints for an object.
Clear the API path map cache for all registered API providers.
Pretty print a value.
Called when the WebSocket connection is opened.
Called when the client closes the connection to the database.
Called when a message is received from the websocket.
Yield frames from a DDP message.
Process a received DDP message.
Dispatch a message to the appropriate handler.
Receive a connect from the server.
Respond to ping message.
Receive a message from a subscribed group.
Unsub a message. :param id_: ID of message to unsub :type id
Recieve a method from the server.
Return a WSGI-esque list of information about the DPP server.
Main entry point for the script.
Print to stdout if verbosity is high.
Stop all servers and threads.
Start the worker thread and wait for it to finish.
Connect to the database and run the select loop.
Patch psycopg2 and psycopg2cffi if they are not already
Generate a random meteor id.
Auto-discover dddp API.
Return a dict representation of the error.
Get an attribute by name.
Send a record to meteor.
Add a resource object to the router.
Send a message to this registration.
Send an alert to multiple registrations.
Get the list of inactive registration ids.
Sends a message to a GCM registration.
Send bulk message to gcm.
Send a JSON message to one or more devices.
Send data to the API.
Get the model from the given module location.
Search GIF using a search term and phrase.
Translate a phrase using the Google GIF API.
Search for trending items.
Get a GIF by ID.
Return a screensaver object.
Upload tags to GCS.
Normalizes the values in the dictionary to ints.
Helper method for fetching data from API.
Search for trending images.
Get a GIF image by ID.
Upload a file to the GIF.
Create an extension element based on the given access control.
Attempts to log in to Youtube.
Uploads a video to Youtube.
Check upload status of a video.
Update an existing video.
Deletes a video entry.
Check video availability.
View for a video.
Show a list of videos.
direct upload of youtube video.
Upload a new video.
Returns upload_return url.
Deletes a video.
Fetches the entry for this video.
If there is no id, create a new one.
Deletes the video.
Updates the metadata for a project.
Updates a metadata field.
Update this item.
Deserialize a string into a list of Node objects.
Return a string representation of a tree.
Load a YAML file into a Python object.
Read and parse the given YAML file.
Parse a string representation of a node.
Create a new node with the given attributes.
Newick representation of the node.
Return the first node with the given label.
Prune the tree.
Remove internal names.
Remove all leaf names.
Clean up a JSON string.
Raises an exception if the given setting does not exist.
Get all the values for a particular parameter.
Wraps a callback so that it can be called asynchronously.
Get a cookie from the cookie collector.
Clear a cookie. :param name: Cookie name :param path: Cookie path :param domain
Redirects the user to the authentication endpoint.
Get the authenticated user.
Create a set of parameters to be passed to OAuth.
Redirect the user to authorize using OAuth.
Concatenate url and args.
Parse a HTTP header line.
Add a new value for the given name.
Returns a list of values for the given name.
Parse a line of text.
Parses a list of headers.
Return a normalized header name.
Encodes the given value to UTF-8.
Convert bytes to unicode.
Convert bytes to a basestring.
Recursively converts all bytes in obj to unicode.
Make sure the auth plugin is properly configured.
Select policy based on origin and request method.
Calculates the number of occupied points in a grid.
Write a Gro object to an output file.
Write a box as a PDB file.
Determine the number of molecules based on the relative weight.
Resize a PBC object for dipoles.
Yield lines from a resource file.
Add a message to a user in the cache.
Send a message to a list of users.
Get all messages for a user.
Add messages to the response if the user is authenticated.
Check the config file for errors.
Verify profile name.
Retrieve data from config.
Retrieve password from config.
Update config data with attributes from msg.
Add authentication information to the config.
Create a new config profile.
Display the required items for a message type.
Get data from user.
Get the authentication data from the user. :param msg_type: The message type :type
Configure a profile.
Write data to profile.
Write authentication data to configuration.
Sends the message to the server.
Return a Message instance for the given message type.
Validate Slack input Args: msg_type (str): Message type attr (str): Message attribute
Check that value is a valid phone number or URL.
Validate a slackpost.
Check that value is a valid WhatsApp.
A co-routine to send messages to the server.
Add a message to the actor's coroutine.
Get the body from a file.
Remove keyword arguments that are not in the accepted list of keyword arguments.
Asynchronously send a message.
Get a user's chat id.
Sends the message to the API.
Sends the email.
Get the SMTP server for a given address.
Generate the email message.
Add the email header to the message.
Add the body to the message.
Add the attachments to the message.
Get a session to send email.
Returns an SSL object for the SMTP server.
Returns a smtplib Session object with TLS enabled.
Sends the email.
Saves tags to a file.
Unload the Image.
Get the region of the current image.
Validate that the configuration is correctly representable.
Remove all elements from the list.
Reads data from the file.
Deletes this chunk and all of it's data.
Resize the file to the given size.
Inserts a new chunk into the IFFI file.
Save the IDF to a file.
Deletes the file with the given filename.
Parses a file and returns a list of lines.
Process a normal line.
Add lines of code to the block.
Draw a string in the given font at the given position.
Parse ISO 8601 time string.
Convert a list of words into an HTML line.
Makes an HTML word from a string.
Makes an HTML paragraph from a list of words.
Makes an HTML code block from a list of lines.
Render a list of items as HTML.
Save metadata to a file.
Update the sizes of the atoms in the path.
Runs the main event loop.
Registers the given mapping with the given vendor and product ids.
Get a controller from the registry.
Sign a string using HMAC-SHA256.
Returns the HTTP request headers to send to AWS.
Send a GET request to the API.
Send a POST request to the API.
Send a DELETE request to the API.
Convert a value into an APE type.
Sends a change set to DCNM.
Returns the total number of packets in the packet header.
Find the last page of the given serial number.
Set the section to the given name.
Add markup lines to the document.
Process the lines of the file and return the markups.
Returns the markup for the given tag name.
Create the XML for a hosted zone.
Try to lock a file.
Insert size bytes into fobj at offset.
Delete bytes from a file.
Convert bytes to UTF-8.
Add a change to the change set.
Parses a change info element and returns it as a dict.
Return the width of a string.
Returns True if any of the attributes have been modified.
Delete this zone from the hosted zone.
Save changes made to resource record sets.
Read at most size bytes from the file.
Delete all values starting with key.
Called when a new frame is loaded.
Updates the list of all the apics in the database.
Unload the Sound.
Set the loop points of the voice.
Parse adobe glyphs and values.
Filter glyph names based on a list of glyph names.
Writes an encoding list to a file.
Dump the contents of an array to a file.
Check if file exists.
Takes a list of filenames and returns a list of filenames.
Parse a list of hosted zone tags and return a HostedZone object.
Parses a zone's delegation set.
Serialize a list of Block objects to a string.
Add paddings to a list of blocks.
Delete all metadata blocks.
Saves the track to a file.
Parse an RRSetAlias element and return the zone ID and DNS name.
Parse resource record values from etree.
Parses an RRSet element.
Add a record to this zone.
Create a new MX resource record.
Create a new ns resource record.
Create a new record for a resource record set.
Create a new SPF record.
Create a new srv resource record.
Get the values of a change.
Writes a single change to the XML format.
Writes a change record set to an XML file.
Set up logging for nanoplot.
Return the item identified by the given alias.
Freeze a dictionary into a tuple of sorted key-value pairs.
Join HTML attributes into a single string.
Initialize the application.
Initialize all the bars in the container.
Add a bar to the container.
Returns a dictionary of the arguments for the function.
Checks if the current request is the same as the current view.
Validate a metric class.
Get a stat by name.
Calculates statistics for given frequencies.
Auto-discovers all installed apps.
Dump metric data to CSV.
Manages statistics for a given Frequency.
Returns the value of a GET variable as an array.
Returns the value of a GET variable as a boolean.
Get the next colour from the list.
Returns a dictionary of parameters for a Geckoboard chart.
Displays the number of votes for a given gecko board.
Returns a tuple containing the count of the latest rag and the title of the metric.
Generate a line chart for a given geckoboard metric.
Returns the latest count for a given geckoboard metric.
Returns a list of the most popular metrics.
Returns a list of all active stats.
Registers a gadget.
Returns a dictionary of context data to be used in template rendering.
Prints an error message and exits with the given code.
Prompts the user for a long input.
Get a list of items from the user.
Prompt user to write a file to the screen.
Return the schedule for a given year.
Returns the winner of the game.
Returns the season of the date.
Get surface name.
Get the coin toss table.
Get the weather information from the table.
Get info from ref table.
Get the schedule for the current year.
Get the standings of the team.
Return a DataFrame of team stats for the given selector.
Returns DataFrame of roy holdings.
Return a DataFrame of linescores.
Returns the season of the date.
Get player stats from the game.
Return a unique key for a class instance.
Return the age of the person.
Return a DataFrame with stats from a table.
Returns statistics for all games in the game.
Returns a table of the totals of the items in the bucket.
Get statistics for the entire cluster. :param kind: kind of statistics :param summary: summary
Return statistics for the entire service as per 100.
Returns a table of basic stats about the server.
Returns a table ofshooting statistics.
Returns statistics in a PBP format.
Get basic gamelogs for a given year.
Get current value from session.
Expand details columns in a DataFrame.
Add team columns to a features dataframe.
Add team features to the dataframe.
Returns the initial probability for a given line.
Return a DataFrame of passing data.
Get a list of year award for a given award id.
Returns the name of the team.
Return a list of boxscores for a given year.
Return the value of a keyword in a year.
Return the number of coaches and tenures for a given season.
Return the schedule for a given year.
Return the off-coordinator for a given year.
Return the DC coordinate for a given year.
Returns the ID of the stadium for the given year.
Returns the off-scheme for a given year.
Returns the alignment for the given year.
Get the off splits for a given year.
Get html from given url.
Directly put the current value in the queue.
Return the index of the next write.
Shut down the connection.
Get a batch from the HDF5 file.
Get the remainder of a file.
Get a generator of rows from a queue.
Parse the contents of an ifp file into a generator of protobuf objects.
Dump a list of Python objects to a file or file-like object.
Read a varint from the file.
Returns an iterator over the objects in the file.
Close the file descriptor.
Writes one or more objects to the stream.
Flush the write buffer to the file descriptor.
Get the directory where the game is stored.
Input text with keyboard emulation.
Returns a list of descriptions of all traits that have been evaluated.
Wait until a condition is met.
Waits for the element's traits to be present.
Adds exceptions to the internal ignore list.
Get the main volume of an operator.
Returns the main source for the given operator and value.
Send a message to the device.
Get the status of the NAC.
Turn off the device.
Power on.
Set the volume of the bulb.
Select a source.
Deobfuscate a URL by key.
Calculate the CRC32 of a plaintext string.
Obfuscate a value.
Look for missing schemas in html.
returns a list of all hrefs.
Check if song name exists.
Parses the given url and returns a list of links.
Returns a URL for a Google Music library song.
Parse google download url.
Parses the Google Music website for a song.
Get html response.
Download a file using requests.
Download a file using wget.
Returns a list of station codes in a city.
Get observations for a given location.
Parses a single observation response.
Return the list of compilers.
Return the mimetype for the format extension.
Return the MIME type of the last compiler.
Return the compiler format extension.
Register a processor for a mimetype.
Unregister a processor for a mimetype.
A list of paths to search for files.
Registers the default values for the file system.
Try to import PyQtCore.
Get the NetNode meta data.
Add a plugin name to the netnode meta data.
Delete a netnode plugin name :param plugin_name: plugin name :type plugin_name
Import settings from a config file.
Exports the given settings to the given config path.
The directory where the IAConfig files will be stored.
Iterate over all keys.
Simple error handler that returns a JSON-formatted representation of the exception.
Create a table object from a table name.
List all tables in DynamoDB.
Fetch items from the API.
Return the ID of a metadata item.
Return the timestamp of when a metadata item was updated.
Fetches the owner team of a crate.
Retrieves the owner user for a given crate id.
Fetches the version downloads for a given crate.
Retrieves the version downloads for a given crate id.
Returns a list of crates for the current user.
Returns a Crate object for a given crate id.
Fetches items from the API.
Fetch all items for a category.
Get all questions from kitsune.
Fetch all items for a given category.
Returns the timestamp at which the metadata was updated.
Determine the category of an item based on its metadata.
Returns a generator of events, activities, and users.
Returns a list of buffers.
The priority of the IOCB message.
Closes the connection to the server.
Submit a list of blocks.
Cancel the given block.
Cancel all submitted tasks.
Fetch All Items for a given category.
Get a list of all cells.
Parses the feed and returns events.
Return the list of export formats for a pid_type.
Return permission factory.
Default view method for a record.
Export a record.
Calls a callable and records the result in `self.since`.
Close the socket.
Remove a client from the connection.
Increment the counter with the given name.
Sends a timing event to the client.
Add a timing object since the given start time.
Send a gauge to the cluster.
Changes the value of a gauge.
Set the value of a metric.
Sends data to the batcher.
Create a batch client.
Return a client for interacting with a unit.
Send all pending batches to the remote address.
Create a batch client.
Flushes all pending batches to the socket.
Return a client for interacting with a unit.
Creates a new instance of any_model.
Interprets x as an Openmath object.
Interprets the given term as Openmath using the given converter.
Converts an OMObject to a Python object.
Convert an object to Openmath.
Initializes the application with the given Flask app.
Yield valid choices.
Create a value from the registry.
Returns a dictionary of form data and a dictionary of form files.
Validates and returns the data for a decimal field.
Format email field data.
Generate data for a date field.
Generate datetime field data for a date field.
Return any float field data as a string.
Return any integer field data.
Return a random time.
Generate data for a ChoiceField.
Returns the data for a MultipleChoiceField.
Return a random choice from a model field.
Encodes the given object as XML bytes.
Publishes a new release.
Tag the project with the given version.
Load a global variable from a python module.
Decodes a bytestring to a bytearray.
Convert value to fixed number with given precision.
Formats a number with the given formatting options.
Unpack data into a numpy array.
Converts an array of bytes to a byte string.
Add a new configuration file.
Remove an entry from the configuration.
List websockets.
Returns the websocket object with the given name.
Check if repository exists in workspace.
Sync all repositories to the workspace.
Clone a repository.
Check if the current version is different.
Returns the indices of the voxels in the input array.
Convert a list of voxels into a numpy array.
Print a workspace.
Prints an update to the console.
Add a console handler.
Executes the given command in the given path.
Load a PNG file as a NumPy array.
Saves a collection of numpy images as PNG files.
Print status of a workspace.
Print the status of a repository.
Get the block size for a particular dimension.
Post cutout without chunking.
Load an image from a tiff file.
Save numpy data to a PNG file.
Load a multi-page image from a TIFF file.
Writes the configuration to the config file.
Clone the current working directory to the given URL.
Get the version of the installed package.
Mix and match a name.
A decorator that prints the name of an option.
Reserves a number of ids for a channel.
Merge multiple IDs into one.
Propagates the given token to the given channel.
Returns a list of projects for a dataset.
Returns the dataset with the given name.
Returns a list of all datasets.
Parses the command line options.
Show the specified workspace or all workspaces.
Show the contents of a workspace.
Show all workspaces.
Return the URL for a given endpoint.
Guess file format from file extension.
Opens an image file.
Convert an HDF5 or PNG file to another format.
Convert a list of RAMON objects to a dictionary.
Return the RAMON type corresponding to the given type.
Deletes a channel.
Return a json-formatted representation of the NetJSON dataset.
Builds a dictionary of information about a dataset.
Create a dictionary with channel information.
Create a project dictionary.
Identify image dimensions based on image type.
put data to the object. :param data: data to put :type data: dict :
Find the path of a repository in a workspace.
Returns a list of public tokens associated with this account.
Returns information about the project associated with the given token.
Set metadata for a remote data upload.
Returns a request object for the given url.
Make a POST request to the given url.
Sends a DELETE request to the given URL.
Loads the data layers from an HDF5 file.
Save an array to an HDF5 file.
Infer gaps in a tree.
Recovers a NVMimIO from a nvimiorecover.
Install Jinja2 translations.
Perform an exclusive namespace operation.
Return the percentage of data for a given part and total.
Get stats from memcached.
Get the cache server info.
Add contextual data to the data.
Show server status.
Shows the current cache stats.
Show cache statistics.
Show all slabs for a given server.
Return a human readable string representation of a number of bytes.
Find a config object in the children dictionary.
Add one or more directories to the environment.
Applies the applicator to the config file.
Absolute path to the file.
Returns the contents of the file.
Write data to file.
Configures the logging system.
Create the file if it doesn't exist.
Applies the applicator to the configuration.
Returns the full path to the file.
Remove this directory.
Prepare to run the simulation.
Clean up this node and all its children.
Returns the absolute path to the given file.
Returns a list of all files in the directory.
Write data to file.
Returns the contents of the given file as a string.
Add one or more files and return the first one.
Saves the current state of the object to disk.
Loads the configuration file.
Remove the cache file if it exists.
Recursively load all plugins in the given directory.
Create a child node.
Get the value of the field.
Apply the configuration to a string.
Build the callback URL for a message.
Read input from the socket and process it.
Sends the output to the NGPU socket.
Send a request to the broker.
Read data from a socket.
Write data to the socket.
Returns a dictionary of desired settle modes for a remote device.
Configures the PN link with the given properties.
The source address of the link.
The target address of the link.
Called when the session is closed.
Create a new sender.
Request a sender.
Create a new receiver. :param name: name of the receiver :type name: str :
Request a receiver link.
Called when a link is destroyed.
Called when the session needs to be closed.
Process an event received from the endpoint.
Add a mark tag to the Markdown instance.
Called when the receiver link is closed.
Called when the receiver failed to connect.
Get the host and port from a server address.
Connect to the given host and port.
Create a TCP server socket.
Return a list of all the connections that need to be processed.
Read and return the output data from the transport.
Create a new sender.
Reject a sender link. :param link_handle: Link handle :param pn_
Create a new receiver.
Called when the connection attempt failed.
Called by the connection manager when the endpoint is active.
Called when the endpoint needs to be closed.
Called when an error occured during an error event.
Return a string representation of the color.
Returns a dictionary of font names to file paths.
Validate and set compression flag.
Add an object to the PDF.
Write a stream to the output buffer.
Write a stream to stdout.
Add a new page to the parent.
Set the color scheme.
Sets the default font for the document.
Add a new page to the document.
Set the font size.
Adds text to the current page.
Add a newline to the current page.
Add a pie chart to the current page.
Output the pages.
Return a list of page indexes that have changed orientation.
Writes the fonts to the file.
Outputs the images to the browser.
Output the image.
Apply a transformation to the current matrix.
Returns the absolute position of a point.
Sets the style of the text.
Rotates a point by the angle defined in the constructor.
Set information about the author.
Set display mode.
Write the document to disk.
Write PDF header.
Print the pages.
Put resource dict.
Put information into the database.
Write a trailer to the output stream.
This function takes a sequence and a function and returns a sequence of the same length as the input
This is a generator function that does nothing but raises a cycledetected exception if a cycle is
Yield the Gosper sequence.
Brent a list of sequences.
Check if the current X value is less than or equal to test_length.
Returns True if the y-axis is within the allowed range.
Tests if this coordinate is greater than another coordinate.
Tests if this coordinate is greater than another coordinate.
Return a copy of this Cursor.
Increment the x-axis by dx degrees.
Increases the y-axis by the given amount.
Draws the current row.
Returns a list of tags.
Returns a list of labels with the given name.
Deletes a tag by ID.
Create a label. :param str label_id: label id :type label_id:
Returns a list of all registered actions.
Returns a list of tags with the given label name.
Returns a list of hooks.
Setup Sphinx extension.
Return the path to the themes.py file.
Send a POST request to the Gitlab server.
Return a list of hosts.
Get a log set.
Return the duration of the orbit.
Update the model with new data.
Compute the limb darkening.
Bin of the light curve.
Frees the memory of all arrays.
Receive data from the socket.
Generates lines from the buffer.
Get the status of the connection.
Generate info message. :param code: the code of the message :param message: the message
Generate an info message.
Return a list of available capabilities.
Read a mode from the device.
Send quit command and close socket.
Get the current date from the server.
Display help on the server.
Generate new groups from the NTP server.
Return a list of new news entries matching pattern at timestamp.
Return a generator of all active newsgroups.
List active times on the server.
List all news groups matching a pattern.
Generate formatoptions for list overview.
List extensions in the nntp server.
Returns a generator for the specified keyword.
Generate a list of values.
Send a ``XZHEADER`` to the server.
Generate a sequence of messages based on a pattern.
Compress the features of the connected host using the ``xfeature`` command.
Convert a value to an offset.
Make a POST request to the API.
Perform an HTTP DELETE request to the API.
Make a GET request to the API.
List scheduled queries for the current user.
Get a list of all tags associated with your account.
Get tags by name or id.
Delete a tag from your account.
Create a scheduled query :param str query: The query to create :param str change: The
Delete an alert by tag id.
Parse a NEWSGROUP line into its components.
Parse a line of a HTTP header.
Given a dict of header names and values, return a string containing the header values.
Do a POST request.
Run a series of tests.
Generate a docstring for the defaults class.
Set the value of the field.
Check that the value is of the correct type.
Get the value of the field.
Check that the value is a scalar.
Returns the symmetric error.
Set the validation errors.
Set the bounds, errors, and value of the parameter.
Imports the metric definitions into the model.
Extract a dictionary of metrics from a list of dicts.
Filters the metrics according to the specified filter expression.
Makes an RPC call to the API.
Create an expression terminal alternation.
Return an operator token.
Return an op add token.
Initializes missing properties.
Returns a list of parameters.
Get the values of all parameters.
Get the errors of all the parameters.
Clears all derived parameters.
Validate and set the HTTP method.
Extracts the email and api_token from the environment.
Makes the call to the API.
Make sure that the scene name is valid.
Verify the type of a satellite product.
Get the file size of a remote file.
Validate that the bands parameter is a valid list of bands.
Connect to earth explorer.
Normalizes a datetime object to the current time zone.
Joins each element of an iterable with an escape sequence.
Get the positions of newlines in the text.
Points a source string to a position in a source string.
Dumps the result of the relay to stdout.
Remove metrics, control and plugins from the relays.
Create a new instance from a list of files.
Set the chance of each file.
Main entry point for the script.
Return a ``Rule`` token.
Return a string with a special handling token.
Return the grammar of the input file.
Return a list of rules.
List of comment tokens.
Return a list of all directives in the file.
Return the source code for the output file.
Compiles the token table into a string.
Get the imports from the directive list.
Returns a string representation of the token type enum.
Returns the class definition for the rule.
Return the name of the entry point that the directive points to.
Return the source code of the given rule.
Get the transform string for a given rule.
Convert an expression into an arithmetic expression.
Convert a node to an ASN.
Given a list of operands and a predicate, return a list of operands that match.
Recursively remove grouping groups from an optree.
Convert an AST node to its corresponding Python code.
Convert an ast.OpTree node to Python code.
Convert an AST terminal to a list of code.
Converts an AST option group to a list of code lines.
Converts an AST repetition group to a list of code lines.
Convert an AST special handling to a list of code elements.
Return a list of code lines for an op alternate.
Return a list of code lines for an operation concatenation.
Convert an AST operation exclude to a list of code lines.
Convert an AST multiply operation to a list of code lines.
Convert an AST repeat operation to a list of code lines.
Find directives that match a predicate.
Return True if child is a subexpression of parent.
Prints the result of the API call if it is not OK.
Returns a wx.ID for the given wx.ID.
Remove a hotkey from a control.
Adds the arguments to the argparse parser.
Configure logging based on command line arguments.
Validates that the required arguments are present.
Convert infix nodes to postfix nodes.
Convert a list of postfix nodes to an optreenode.
Reduce a list of nodes.
Loads the plugin manifest.
Get the column lengths of all the fields.
Get the column lengths of the metrics.
Escapes underscores in metric names.
Output the fields in markdown format.
Print the metrics to the screen in markdown format.
Generates the markdown file.
Parses the given text and returns a parse tree.
Attempt to consume the given text.
Adds the arguments to the argparse parser.
Try to parse a string into a datetime object.
Outputs the results of the query as CSV.
Outputs the given text as JSON.
Output raw JSON data.
Convert text to an XML string.
Return `True` if `node` is a trimmed terminal parse node.
Print a tree rooted at root.
Wraps an extractor to create a repetition.
Return a parse node for a terminal.
Calls the given extractor with the given exclusion.
Count leading whitespace.
Call an extractor function on the given text.
The position of the current node.
Return True if all children of this parse node are empty.
Add an item to the ignored list.
Check if the node is of the given type.
Return a flattened version of this node.
Return a new parse node with trimmed children.
Return a new parse node which is the result of merging self and other.
Return a copy of this parse node with a new type.
Return a compressed version of this node.
Return the current position.
Returns the position of the maximum readed line and column.
Step forward to the next character.
Step forward to the next line.
Move to the previous line.
Return the last read line.
Moves the cursor forward by length characters.
Saves the current context.
Restores the previous context.
Return a string representation of the receiver.
Set the name of the signature.
Return the number of variables in the signature.
Return the number of functions in the signature.
Add a new signature to the current scope.
Returns a new scope containing the union of the current scope and the given scope.
Update this scope's intersection with another scope.
Return a new scope containing only the intersection of the current scope and the given scope.
Remove all signatures that are not in the given set.
Returns a new scope that is the difference of the current scope and the given one.
Update this scope with the symmetric difference of itself and another scope.
Return a new scope that is the symmetric difference of this scope and the given scope.
Add a signature to the state.
Remove the signature from the scope.
Discards the signature for the current scope.
Return the first signature.
Return the last signature.
Get a scope by symbol name.
Get the signature for a symbol name.
Returns a new scope containing all polymorphic return values.
Call the injected function from the current node to the given translator.
Takes an AST and returns a normalized version of it.
Set this node from another node.
Check if a hit is ok.
Returns the compute signature for this function.
Resolves the current context.
Returns a list of resolved names for the given type name.
Set the name of a type in the resolution dictionary.
Delete a local file if it exists.
Delete a file from s3.
Delete a file on S3 or local disk.
Saves the contents of a temp file to a local file.
Saves a temporary file to S3.
Save the object to disk.
Find objects on S3.
Creates an enum from a list of sequential values.
Set one thing in the chainmap.
Read end of stream.
Pushes the rule nodes onto the top of the tree.
Remove all rule nodes from the tree.
Return the value of a node.
Add a stream to the parser.
Begin a new tag with the given name.
Mark the end of a tag.
Set the rules for this class.
Set the hooks for this class.
Set directives. :param directives: directives to set :type directives: dict :param directives:
Evaluate a single rule.
Evaluate a rule hook.
Peeks at the current position in the stream.
Returns True if there is only one character left.
Reads a character from the stream.
Read until the next EOF.
Returns True if the stream should ignore any blank characters.
Check that the hits are of the correct type.
Add a rule clause name to the namespace.
Add a Rule to a BNNF.
Add a rule to the parser.
Adds the parser tree of ``cla`` to ``sequences``.
Adds the parser tree of `alternatives` to `alternatives`.
Add a range to a sequence.
Add a parser tree to the given sequence with the given module.
Add a capture to the given sequence.
Adds a bind to the given sequence.
Add a parser hook to the sequence.
Set the value of parameter `param` to the value of ``n``.
Set the value of a param from a string.
Set parameter pair from character.
Set the param's pair attribute.
Set the name of a hook.
Add a parameter to the hook.
Get the rules from the stream.
Ignore Cxx characters.
Add a state to the state set.
Returns a dot representation of the state.
Writes the graph to a dot file.
Writes the graph to a PNG file.
Return a string representation of the state machine.
Returns the next state of the state machine.
Resets the live state of all nodes to the initial state.
Infer the type of each element in the block.
Infer a subexpression.
Infer a literal value.
Dump all nodes to stdout.
Return an ast.stmt that exits the scope.
Return a list of clauses.
Return `node`'s call expression.
Visit a Calltrue node.
Return `ast.Call` for `node`.
Return `ast.Expr` for `node`.
Visit a capture node.
Visit a scope node.
Visit an ALT node.
Return the combined list of all clauses in the sequence.
Visitor for `repoptional` AST node.
Return `node` as a while statement.
Return `node`'s subexpressions.
Concatenate the end of source with the given indent.
Sets the indent level of each element in the list.
Recursively convert a list to a string.
Echo a list of nodes.
Populate an edge or list of edges with the values in `seq`.
Populates a state register from a sequence of sequences.
Build the state tree for the whole graph.
Returns True if n and val are equal.
Build a grammar from a BNF string.
Build a grammar from a file.
Parse the source string and return a parsed node.
Parse a file and return the parsed node.
Set a node to a rule.
Set the value of a node as integer.
Get a subnode from a subexpression.
Dumps a Deposition object to a dictionary.
Get recids in Invenio12.
Get record IDs from Invenio 2.
Return a tuple of the check id and list of ids.
Dumps a Token object as a dict.
Get user count.
Dump a User object to a JSON-compatible dictionary.
Get modified recids in Invenio12.
Get modified record IDs in Invenio 2.
Get collection restrictions.
Get the list of revisions for a record.
Get all collections of a record.
Create a record in JSON format.
Get a list of recids that match the query.
Dump a record to a dict.
Dump an RA to a dictionary.
Load data into a common model.
Collect things from all entry points.
Initialize Invenio application context.
Get the run SQL module.
Returns a list of dicts for the given query.
Dump a Token to a JSON-compatible dictionary.
Load token from JSON data.
Import record into database.
Get the value of a config variable or return the default.
Dump information about an object as a dictionary.
Return list of users in Invenio12 database.
Get users in Invenio 2.
Dumps a User object to a dictionary.
Load data into database.
Create record and persistent identifier.
Load record from dump.
Load records from sources.
Get profiling statistics from yappi.
Run the Tornado web server.
Dump the profiling data to a file.
Delete the profiler.
Delete the profiler.
Get the status of the service.
Calculates the translation of all images in parallel.
Merge multiple images together.
Add 1s dimension to an array.
Create a record from a dump.
Create record for given dump.
Update record with given revisions.
Create persistent identifiers for a record.
Delete record from persistent identifier.
Create a new file.
Delete all buckets from a record.
Return a list of pids that are not present in the persistent identifier store.
Prepares the list of files to be read.
Prepare the pids from the fetched pids.
Return True if the record has been deleted.
Load community from database.
Load a featured community.
Dump a thing to a JSON file.
Check a thing.
Delete the widget and all its event handlers.
Returns the magnitude of the vector.
Normalizes a vector.
Apply the transformation to the texture coordinates.
Ensure that the bones of the mesh are stored in the dictionary.
Set the length of the mesh.
Sets the parent bone of the bone.
Get the pivot point of the sphere.
Start a new animation.
Set the current state of the object.
Unsets the current state of the scene.
Set the rotation state of the bone.
Unset the state of the transform.
Ensure that the model data is available for the given object.
Redraw the region list.
Draws the 3D model for the given object.
Set the model for this instance.
Write reports to xml file.
Add a menu to the player.
Redraws the label to the screen.
Redraw the label.
Draws the background to the window.
Delete a widget from the widget list.
Redraw the label of the object.
Register the event handlers.
Register event handlers.
Add label main to window.
Closes the dialog.
Update the progressbar label.
Render all actors in the scene in 3D.
Renders the world in 3D.
Check if a resource exists.
Add a category to the plot.
Returns a pyglet image containing all the missing textures.
Get a model by name.
Load model by name.
Get model data by name.
Add a widget to the layout.
Draws the menu to screen.
Called when the canvas is redrawn.
Redraw the scroll bar.
Check if the given mouse position is within the area of the screen.
Returns the ratio of the number of samples in the domain to the total number of samples.
Add a layer at a specific z position.
Add an action to the action map.
Executes the given action.
Register a new name with the registry.
Add a layer to the map.
Draws the widget and all layers.
Deletes the layered widget.
The border of the widget.
Return the offset of the widget.
Returns the size of the widget.
Read a mesh from an hdf5 file.
Create a connectivity matrix of given shape.
Set the fields to be returned in the response.
Add one or more fields to the message.
Check that all elements are of the same type.
The space of each element in the expression.
Returns a DataFrame with the edges of the mesh.
Returns statistics about the current mesh.
Convert an element set to a node set.
Convert a node set to a surface.
Convert surfaces to element sets.
Return metadata for all fields.
Metadata as a pandas series.
Makes directories needed for the output files.
Runs the Gmsh code and creates the mesh.
Read a history report from a CSV file.
Read a field report from a text file.
Convert a list to a string.
Returns a string representation of the equation.
Return an unsorted set of labels for a DataFrame.
Parses the response from the server.
Make a GET request to the API.
Write a series of XY data to a file.
Return an error message for this field.
Returns True if the exception was thrown by a descriptor.
Set the data of the current object.
Return the mode of the given axis.
Sets the options for the plot.
Create a class from a function and attributes.
Cycle through all data feeds and draw them.
Try to convert a value to a float.
Convert a string to an integer or float.
Renders a graph using the specified attributes.
Convert string to unicode.
Returns True if the mime type matches one in the include_mime_types list.
Clean up domain name.
Returns a list of left cut strings for a domain name.
Make a keyword for a hash.
Collects all stop words from the Sentence object.
Index a stream item.
Invert the index table for the given hash.
Get the document frequencies for the given hashes.
Look up the value for a given key in the tf index table.
Make an iterator of StreamItems from a stream.
Read a variable-length integer.
Reads an A block.
Serialize the StridedInterval key.
Serialize a StreamItem instance to a key and data pair.
Context manager to temporarily change to a working directory.
Strip a prefix from a string.
Strip a suffix from a string.
Return True if needle is a subsequence of haystack.
Runs the wsgiref server.
Shutdown the server and close the connection.
Returns a function that will be called with the response's status code and page number.
Add a route to the routing table.
Resolve a route.
Resolve a non-literal route.
Normalizes a pattern and returns the pattern type and pattern.
Return the response as a list of bytes.
Add a header to the message.
Add a cookie to the response.
Return a status line for the response.
The content type of the response.
Delete a directory tree.
Returns a list of open file descriptors for the current process.
Attempts to fetch the given work unit from the given fpath.
Get a list of lines from a file.
Return a pair of a random species and a random describer.
Return a random adjacency species pair.
Morph a sentence.
Show the similarity of two query pairs.
Run hiragana on a sentence.
List entities in a sentence.
Print the shortsum for a review.
Get a keyword.
Lists the chronological order of a sentence.
Initialize all stages.
Run the writers.
Runs the given incremental transforms on the given stream item.
Return a new pipeline instance based on the given config.
Return True if all the mentions in target_mentions are in chain_mentions.
Return True if any of the names in target_mentions appear in chain_mentions.
Perform a look-ahead match on a single token.
Create a NER file from the template.
Terminate the child process.
Calculates the multiplication of p and n.
Yield tuples of start, end, and text from a string.
Return a sorted collection of labels that have the same offset as the annotator_id.
Create a list of sentences and add it to stream_item.
Makes a cleansed file from a list of streams.
Create a NER file for a tagger.
Remove punctuation, punctuation, and whitespace from a span.
Instantiate the pipeline from the given configuration.
Generate a John-smith chunk for each file in a directory.
Create a file containing the body of the clean_visible property of each item in the chunk.
Remove punctuation, punctuation, punctuation, and whitespace from a string.
Extract non-tag characters from an HTML file.
Load a stage from a module and a function.
Load external stages from a Python file.
Initialize a stage with the given configuration.
Read bytes from idx_bytes until stop_bytes or stop_bytes are encountered.
Return True if the href is a valid URL.
Return a list of Label objects.
Yield paths of all files in input_dir.
Returns a generator for all tasks in the queue.
Get a random available keeper.
Returns a list of sentences, relations and attributes for the given ner_dom.
Verify the MD5 hash of the data.
Get an S3 bucket.
Decode data into a stream or chunk.
Extract a single chunk from a key.
Convert a stream id to a kvlayer key.
Convert a KVlayer key to a stream id.
Return the key for a StreamItem instance.
Main entry point for the application.
Build the argument parser.
Convert sentences to char tokens.
Convert a sequence of Token to a sequence of character offsets.
Add an element to the document.
Return an XPath piece of the element.
Return the index of the first text element.
Iterates over all descendants of the given element.
Returns a list of all the elements in the source XML document.
Return a list of all elements with the given name.
Select elements matching pat.
Returns an iterator of elem's following siblings.
Call Inkscape with the given arguments.
Export an image using inkscape.
Convert an SVG file to PDF.
Convert an SVG file to a PNG file.
Returns a Jinja environment for the given file path.
Sets up the template file and environment variables.
Fills the file with the given doc_contents.
Save content to file. :param file_path: path to file :param encoding: encoding
Create a DocType from a template file.
Replaces non-svg characters with their corresponding SVG code.
Render the document to a PDF or PDF file.
Renders the template to a file.
Parse the source string using the given expat callback handler.
Parse a fragment from HTML.
Insert text into the document.
Insert a node before a reference node.
Return a copy of this element.
Return the string representation of the given node.
Insert a child element at the specified position.
Parse the config file.
Get Google credentials.
Create the datetimes for the event.
Create an event.
Entry point for the google event CLI.
Get the extension of a file.
Add an extension to a file path if it doesn't already exist.
Return a temporary file.
Remove all files with the given extension from the given workdir.
Convert a CSV file to a JSON file.
Replaces content of a file.
Parses the BeautifulSoup object.
Check next tag for blacklist.
Create an italicized tag.
Creates a strong tag for the given tag.
Creates an underline for the given tag.
Parse the attributes of the given tag.
Remove extraneous line breaks from a tag.
Parse the href into a dict.
Parse an attribute value.
Given a dictionary and a list of key-value pairs, translate the keys and return a new
Returns a JSON string representation of the object.
Find all files in a folder that match a regular expression.
Concatenates multiple strings.
Matches strings starting with a part.
Checks if the full string contains the part.
Yields a boolean value from a sequence.
Apply a foreach expression to a sequence.
Looks up a sequence of items in a table.
Replace characters for SVG code.
Check if the file is a valid SVG file.
Merge multiple PDFs into one.
Embeds fonts to SVG.
Embed a font into an SVG file.
Check that all inputs are of the correct type.
Checks that the function is callable and has the right number of arguments.
Recursive helper function.
Renders an input using Jinja2.
Recursive helper function to recurse into the options.
Convert an object to a string.
Convert an object to a sequence of numbers.
Convert an object to a sequence of booleans.
Yields the serialized forms of the given AST.
Change the encoding of an xml file.
Save text into a qrcode file.
Launch an option in melody.
Call a shell command.
Convert a TeX file to a PDF file.
Returns a list of all options that are dependent on my_psy :param my_psy:
Transform a shapely geometry to a new shapely geometry.
Create a geometry object from a string or object.
Expand the bounds of self and other.
Return an envelope that intersects with other.
Returns True if this envelope intersects the other.
Creates a polygon from the linear ring, linear ring, linear ring, linear ring, and linear
Create a Dataframe from znm and nm.
Writes the dataframe to a CSV file.
Selects rows from the table that meet the given condition.
Return a new table with rows at the given nuclei.
Return a new table that is the intersection of self and table.
Return a table that is not contained in another table.
Return a collection of the odd-even elements.
Return a collection of the even-odd elements of the sequence.
Return a chunk referencing all elements that are evenly divisible.
Returns a new table that is the difference between the current table and the given one.
Returns the binding energy of the system.
S2N Derivative.
Subtracts the singular value N from the parent.
S2P Derivative.
Subtracts the second derivative with respect to p.
Returns a derived table.
Decorator to use the db session.
Derive this key from a master password.
Create a database from the given database URI.
Search for domains by name.
Modify a domain. :param str domain_name: Name of the domain to modify :param
Create a domain with the given name.
Extract HBS files from a file object.
Return the VSI prefix of a path.
Return the SRID for this entry.
Main entry point for the script.
Update a file from a URL.
Get a dictionary of available GDAL drivers.
Return an ImageDriver instance for the given path.
Convert a shapely geometry to an array.
rasterize a layer.
Open raster file.
Create a raster from bytes.
Copies the data from one raster to another.
List of available options.
Create a raster at the given path.
Set the geotransform of the dataset.
Reads an array from the file.
The envelope of the raster.
Returns the driver for this image.
Returns a new raster with the same shape and geometry as this raster.
Create a masked array from a geometry.
Returns the nodata value of the line.
Read a raster from the data source.
Resample the image to a new size.
Copies the image to the destination path.
Set the projection of the dataset :param sref: the spatial reference :type sref:
Warp this dataset to a new spatial reference.
Calculates the number of chunks needed to store the data.
Look up the alphabet for a charset.
Encodes the chunk at the given index.
Convert chunk to long.
Returns the chunk at the given index.
Return a compiled regular expression for the given file.
Normalize date format.
Detect the time zone of the current locale.
Return a dictionary representation of the object.
Handle jobs on the given server.
Main function of the worker.
Run a worker pool on the given host and port.
Sets the classification of this ServicePackageQuotaHistoryReservation.
Send a message to the link.
Turn on a light.
Turn on a switch.
Turn on with a given brightness.
Turn off a device.
Send all messages in the queue.
Tries to send a message to the device.
Sets the nature of this DeviceDataPostRequest.
Set the paths to the configuration files.
Get the values of all options.
Create the configuration file at the specified index.
Update the configuration with a dictionary.
Read configuration from a TOML file.
Read all config files.
Return a list of possible option names.
Return a list of sections for a given command.
Build the argument parser.
Parse command line arguments.
Return the command line options for a bash compilation.
Do the bash completion.
Start a new master server.
Called when the client is connected to the server.
Called when a line is received.
Called when the connection is lost.
Called when a job is loaded.
Called when a response is received.
Closes the connection to the Kafka broker.
Adds a set of jobs to the pool.
Closes the server, manager, and workers.
Reset all waiters to None.
Add a result to the chain.
Wait for the Future to be completed.
Load the next job from the queue.
Mark the job as done.
Add a result to the queue.
Cancel all currently running jobs.
Wait for all jobs to finish.
Distribute jobs from the active JavaScript object to the ready_callbacks.
Add a list of jobs to the scheduler.
Get a job from the queue.
Return a job to the pool.
Add a result for a job.
Distribute jobs until they are done.
Closes the browser window.
Remove duplicates from a list.
Returns True if the object matches the given regular expression.
Get the region to use.
Filter entries based on filters and exclude criteria.
Get EC2 host name.
Create a new instance from a dictionary entry.
Get an attribute from the object.
Create an instance from a boto instance.
Check if the given filter matches the stored object.
Return the public IP address as a string.
Add the timestamp to the event dictionary.
Create a logger with structlog processors.
Setup a celery app with the given title and output.
Deletes a worker.
Return a section of configuration options as a dictionary.
Handler for config subcommands.
Prepare the rows of a table.
Generate a hex color from a string.
Return a random color.
Check if username and password are valid.
Check if a token is valid.
Check if a process is running.
Dynamically import a module.
Get the IP address of the current host.
Make a request using the given method.
Prepare post parameters to be sent to the server.
Run an application.
Render the field as a string.
Streams a list of command dicts to the console.
Returns a list of holidays for a given date range.
Get the path of a given command.
Builds the ssh command string.
Create an LSIProfile instance from command line arguments.
Add a relationship to the model :param part: The part to relate to :param id:
Return a list of all related models of the given type.
Load relationships from source.
Add a part to the message.
Load a part.
Return the name of the item with the given name.
Create a new ContentType from an XML element.
Parse a chatl input string.
Builds the JWT.
Assign force field to AMPAL object Parameters ---------- ampal_obj : AMPAL object
Find the maximum radius and npnp.
Make a dictionary with force field parameters.
Return a stream containing the contents of this blob.
Generator yielding all matching segments.
Returns a list of all filenames in the given directory.
Returns a list of all directories in the given directory.
Create a prefix for the given directory.
Deletes a file from the S3 bucket.
Ensure that the user is logged in.
Returns the loudest word in the language specified.
Return the home URL.
Return a list of hotspots.
Get the keeper token from the keeper service.
Upload a build to a directory.
Check if a travis event should be skipped.
Confirm that a build has been completed.
Recursively update a dictionary.
Main entry point for keeper.
Command line tool to edit a part.
Print out the contents of a directory.
Split a path into drive and tail parts.
Returns the editor to use for the given file.
Processes a module node.
Generate HTML for a chart.
Generate html for chart.
Serialize a data object to a series.
Patches json_data to be json-serializable.
Convert json data to html.
Convert a dictionary object to a pandas dataframe.
Write html to a file in folderpath.
Returns a chart instance for the given chart type.
Encode the x, y fields with time_unit.
Return the URL of the tarball.
Create a new app.
Delete an app.
Generate a random binary string of given length.
Generate a random IPv4 address.
Generate a random date between two dates.
Create a session object with the appropriate authentication headers.
Make an API request to the API.
Create a build from a tarball.
Check the status of a build.
Generate a sequence of strings with the given prefix.
Register all sub-commands to the given parser.
Returns the root argparser.
Returns the description of the method.
Get the help text for this command.
Run the command.
Encode a single dataset.
Returns a pandas DataFrame of all available athlete names.
Get the last n activities.
Request the activity list of an athlete :param athlete: The athlete :type athlete: str :
Request activity data from the API.
Return the URL for the authenticated athlete.
Return the URL for an activity file.
Make a GET request to the goldencheetah API.
Create a build from a tarball.
Create a URL with authentication using djapiauth.
Returns a random title for a language.
Generate a random person.
Get a random last name in one of the languages.
Renders the data to a string.
Set dataset and series.
Renders the current axes to the screen.
Check if the type is one of the known types.
Returns the full url for this request.
Opens the document in a web browser.
Saves the file to disk.
Open a URL.
Returns a PIL Image object representing the image file at the URL.
Write the contents of this URL to the given file-like object.
Return the checksum of the file.
Return a random decimal number between min and max.
Return unprotected and protected claims.
Return the signing keys as a JWKS object.
Unpack a metadata statement from a JWKS.
Signs a metadata statement.
Evaluate a metadata statement.
Check that the federation usage is correct.
Extend a request with a dictionary of SMS objects.
Parse the command line arguments.
Add command line arguments to an argument parser.
Apply logging options to log files.
Logs msg % args with severity DEBUG.
Return a dictionary mapping letters to their number of occurrences.
Find all the anagrams in a word.
Convert to arabic notation.
Transform data from one metric to another.
Get the last value from a time series.
Validate a page number.
Get a page of items from an iterator.
Change the permissions of a file or directory.
Create an internal signing service from the given configuration.
Make a signing service.
Sign a request.
Create a new resource.
Update a metadata statement.
Update the signature for a given location.
Yields the contents of a bundle.
Create a bundle from a dictionary.
Returns a list of URLs for the given asset type.
Returns a string of HTML tags for the given asset type.
Return HTML tags for all asset types.
Takes a URL and returns a URL with the protocol.
Find links in a URL.
Listen for connections from the given client.
Get the list of modules in the project.
Import all modules.
Select one or more fields from a document.
Apply date_map_list to a document.
Print a cursor to the screen.
Prints the results of the query to the screen.
Given a list of tasks, return a list of dependency graphs.
Add the default departments to the project.
Add default dependencies, atypes, sequences, and adeps.
Create the shot when a new sequence is saved.
Create all tasks for an asset or asset type.
Get a value from the config.
Add a factory to the container.
Remove a factory from the container.
Connect to the remote peer using the given protocol factory.
Called when data is received on a connection.
Disconnect a connection from the server.
Calls a remote command.
Called when the connection is made.
Called when a multiplexed connection is made.
Called when data is received.
Send data to the remote host.
Called when the connection is lost.
Returns the local protocol for the given connection identifier.
Called when data is received on the remote side.
Disconnect from the given connection.
Center a string on the screen.
Display the current time on the right.
Return the version number as a string.
Identify the framework of a unit.
Assert that the given value is convertible to the given target unit.
Pad data to block_size with leading zeroes.
Unpads data to block_size bytes.
Sign a request using the self-signer.
Gather metadata statements for a given context.
Pretty print a word.
Create an argument parser for nagaram.
Parse command line arguments and run anagrams_in_word for each word.
Called when data is received.
Called when the client unregisters a type.
Create an RPC function stub for the given URL.
Check if a call is still alive.
Return a tuple of completion regex for this command.
Convert a string to a list of ampersand values.
Return the string representation of the object.
Verify that the metadata statement is valid.
Parse the response from the remote service.
Return a list of databases.
Sync the contents of a folder to S3.
Build a package and all subpackages.
Create a read-only fridge.
Loads the configuration from the file.
Create a self-signed JWKS.
Create a JWT signed by signing keys.
Discovers all files and directories in the given test directory.
Main entry point for librarian.
Return the score of a letter.
Calculates the score of a word based on a list of input letters.
Return a list of words in the wordlist.
Check if a word is a valid squrabble word.
Handle a string received from the server.
Get the command and responder for a given command name.
Parses the request values for the given command.
Writes the response to the connection.
Stops receiving boxes for a given reason.
Build a JSON-AMP protocol object.
Convert a JWKS to a KeyJar object.
Load a JSON string into the bundle.
Process a message based on the event type.
Process a customer event.
Process a customer event.
Process a customer event.
Process a message based on its event type.
Process keystone messages.
Process a heat event.
Run the wsgiref server for this application.
Print a message to stdout.
Prints msg to stderr, followed by an error.
Register a new command class.
Registers a new command class.
Return the string representation of the value.
Parses the given string and returns the value.
Update the completer dictionary with the given dictionary.
Connect to ternya.
Initialize a MQ connection.
Initialize the modules for the service.
Create MQ consumers for nova.
Create the cinder consumer queue.
Initialize the neutron consumer.
Initialize the glance consumer.
Set up heat consumer.
Enable notification for an openstack component.
Get information about a song.
Downloads a song from iTunes.
Executes the instructions in the basic block.
Load a variable from the globals.
Calls the function at the current cursor position.
Dump a database to a temporary file.
Call the atexit function if it exists.
Run the application.
Change the current working directory to `path`.
Recursively copies a directory tree.
Starts a post-mortem debugger.
Get the modification time of a file.
Check if a file has been changed.
Update the database with latest changes.
Clears the contents of the configuration file.
Scrape an IPDB feed.
Downloads the image from the server and saves it to disk.
Check if the image has changed.
Find the caller of the calling method.
Returns the defining component for the given peptide.
Entry point for the command line utility.
Find a symbol in the current scope by name or kind.
Check if a package is contained in another package.
Check if PE file is global.
Get the name of a data type.
Get the related attributes of a relation.
Create a namedtuple from a DataSpec like object.
Create a function that interprets the given semantic model.
Create a new external entity from an existing one :param metamodel: Metamodel instance :param
Create a function that can be passed to the interpret module.
Makes a constant from the given SYCXML object.
Returns a class method that can be used to perform an operation on an object.
Builds a property that gets the value of a derived attribute.
Makes a simple association between two objects.
Given a relationship, return the corresponding association.
Create a domain object from a BioPAX model.
Run a single RPC call.
Accept a connection from the server.
Reject a call.
Raise an exception on a remote client.
Send a message to the collector and wait for a reply.
Establishes a connection to a call.
Dispatch a reply.
Guess the type of the given value.
Deserializes the given value according to its type.
Get a single feature from the index.
Stores the given items in the index.
Delete the document with the given content_id.
Delete all documents from the index.
Delete the index if it exists.
Yield features and fcs associated with a prefix.
Return a generator of IDs of all prefixes in a prefix.
Yield the scan IDs for the given index.
Returns a list of source names for the given feature names.
Return a list of filters for the given key_ranges.
Returns a dictionary mapping features to their index names.
Returns the list of field types for this document.
Return a list of index disjuncts for a query.
Return the number of bytes needed to encode the features in fc_dict.
Count the number of bytes for each filter.
Return a pretty string representation of a feature counter.
Parse the docopts and run the searcher.
Default formatter for errors.
Returns a pretty-printed representation of the given instance.
Returns a pretty-printed identifier for the given instance.
Check the uniqueness constraint of the given model.
Check integrity of links.
Check if all instances of the super_kind are in the same type as the rel_id
Basic encoder for integers and strings.
Delete all entries from the table.
Implementation of scan_keys for a prefixed index.
Stores the given indexes in the index table.
Put raw value into the index table.
Yields the unique keys for the given index_name and content_ids.
Return the index with the given name.
Add a direction to a string.
Get the type name of a data type.
Returns the attribute that is referenced by the given object.
Build and return the core type of a CDT.
Builds the enum type for the given EVT.
Builds a struct from the given S-Element.
Build user type xml.
Builds a python type from a data type.
Builds the class for a given object.
Build a component for the given scope.
Build a schema from the given model and context.
Return a pretty-printed version of an XML string.
Get a list of bikes from the server.
Set positional information on a node.
Create a queue. :param str name: The name of the queue :param bool strict:
Delete a queue. :param str name: queue name :type name: str :param str
List all queues.
List all exchanges.
Purge a queue. :param str name: The queue name :type name: str :
Create a MIME multipart message.
Reads the image and returns it as a string.
Return True if the text is visible.
Entry point for the bridgepoint script.
Serializes the given value into the given type.
Serialize an association into a string.
Returns a string representation of the class.
Entry point for the script.
Partition a collection based on a condition.
Adds bidi context to the context.
Find link between two instances.
Computes the lookup key for the given instance.
Computes the index key for the given instance.
Returns the type of the attribute with the given name.
Creates a new instance of the model and adds it to the storage.
Iterates over all instances of the metaclasses.
Defines a new metaclass with the given attributes.
Sends a message to a socket.
Recieve data from socket.
Runs dead code in the project directory.
Parse a list of email addresses.
Decorator to wrap a function into an RPC.
Return a mapping from rpc spec name to a tuple of value and rpc spec.
Normalize the postcode for Uk.
Returns the next value in the stream.
Accept all S-System instances.
Accept all children of ``inst``.
Accept all PE Packages.
Get the brightness of the image.
Matches the expression with the given arguments.
Finds the closest matching character in the document.
Returns a QTextEdit.ExtraSelection for the character at position.
Called when the cursor position has changed.
Return the traceback as a tuple.
Returns the instance with the given name.
Adds the history to the history buffer.
Moves the cursor up one character.
Called when the down key is pressed.
Move to the previous edit history item.
Move to the next edit in the history.
Handles execute reply messages.
Returns True if the history is locked.
Return the history item at the given index.
Sets the history to be displayed.
Stores the current edits in the history.
Time to close event handler.
Convert a collection to a pandas dataframe.
Set attributes from keyword arguments.
Subscribe to the stream.
Logs a message to the Kafka broker.
Iterate remotely.
Convert notebook to this notebook format.
Get the importer for the given path item.
Wraps the ``stringio`` module to be used as a context manager.
Override setuptools's default setuptools functionality.
Parse a requirement from a string.
Return the parsed version of the package info.
Collapse leading whitespaces into a single string.
Reimplemented to disconnect signal handlers.
Reimplemented to update the cursor position when the text edit is shown.
Returns the current text cursor.
Updates the current item based on the selection.
Register models in the admin site.
Get partition tuples for disk partitions.
Get the cpu times of the computer.
Get system cpu times.
Reads data from the stdin and returns it.
Read a block of raw data from stdin.
Updates the visibility of the tab bar.
Create a tab with the current kernel.
Add a tab with a frontend.
Populates the all magic menu.
Called when the window is closed.
Check if a passphrase matches a hashed passphrase.
Return an indented short title for the given item.
Returns True if the request has permission to change the object.
Returns True if the requesting user has permission to delete an object.
Recursively add all children of a given level to a graph.
Create a binary tree with the given number of levels.
Submit jobs to nodes in graph g.
Validate the tree of the graph.
Creates a color table for the given class.
Make a copy of this color scheme.
Add a new scheme to the registry.
Set the active color scheme.
Return the full path to the shared library.
Handle IOPUB messages.
Wait for the kernel to be ready.
Set the style of the widget :param style: The style to set :type style: str
Returns the format for the given token.
Returns the format for the given token in the given document.
Returns a QTextCharFormat for the given token and style.
Find a command in a list of paths.
Normalize the given path.
Make sure that the NSPs in value are valid.
Check that entry points are valid.
Return True if the last blank line in the source is blank.
Return true if the last two blank lines are the same.
Transform an assignment system line.
Replace the assignment magic in the line with the corresponding command.
Transforms a classical prompt into something more human-readable.
Transforms a line from IPython to Python.
Find the number of indentation spaces and whether the line should be indented.
Store lines in buffer.
Reset the source and return the raw data.
Handles cell magics.
Append lines to the end of the cell buffer.
Transform a single cell.
Sends a notification to all registered observers.
Get the set of observers for a notification.
Register a callback to be called when a message of the given type changes.
Update the status of the jobs.
Print a report of a group.
Flush all the jobs in the group.
Return the current status of the component or dead.
Report the status of the job.
Initialize the background job.
Inserts a new value into the series.
Return a copy of the object.
Declare a special variable.
Declare a list variable.
Declare a set variable.
Changes the current working directory.
Move the current route to a new state.
Calculates the energy of a state.
Return a dictionary with default values for all keys.
Check that the table exists and has the same keys and types.
Render the expression for the given check.
Format a list of rows as a table.
Create an HTML link with optional link text.
Returns the js file for the given url.
Returns a css file for the given url.
Create an HTML img tag.
Subtracts value from arg.
Multiply two numbers.
Divide value by arg.
Performs a modulo operation.
Returns the verbose name of a model instance.
Split a line from the user input.
Add command line options.
Remove all original built-in functions.
Given an index URL and a request, find the URL with the given name.
Look for explicit links in the document.
Splits a shell command into a list.
Main entry point for the coverage script.
Add action to dash.
Add the action code to the parser.
Print help message.
Handles the help action.
Check if args are allowed.
Execute Python code.
Print information about coverage.
Unserialize an object from a buffer.
Set the display hook to the current sys.displayhook.
Calls the given function with the given arguments, logging any exception raised.
Check if the given url is a valid URL.
Check that a URL is valid.
Validate a container of URLs.
Pull one or more keys from the global namespace.
Select a number of random ports to use.
Apply the function to each element of the sequence.
Get the last n lines from the readline history.
Set auto-indent mode.
Initialize the logstart command.
Saves the current state of the sys module.
Restores the state of the sys module to its original state.
Register a function to be called after the query is executed.
Return a new fake main module.
Initialize the user namespaces.
Returns a list of all namespace references.
Reset the session.
Delete a variable from all namespaces.
Remove all namespaces that match a regular expression.
Attempt to find a property in a struct.
Find a struct property by name.
Inspect an object.
Initializes the history manager.
Show the traceback of an exception.
Print the traceback to stdout.
Show a syntax error.
Inserts indentation before the next input.
Add a custom matcher at the given position.
Set the completer frame.
Run a line magic.
Finds a magic by name.
Define a macro in the user namespace.
Run a system command directly.
Auto-rewrite user input if needed.
Get a dictionary of user variables.
Convert a dictionary of expressions to a dictionary of user variables.
Evaluate a python expression.
Executes the given file in the current working directory.
Calls the cell magic with the given name on the given line.
Expand variables in the given command.
Create a temporary file and return its path.
End the session and clean up any temporary files.
Broadcasts a message to all subscribers of the specified destination.
Return a list of all profiles in a directory.
Return a list of bundled profiles.
Find a distribution based on a requirement.
Returns the full path to a given file.
Advance to the next line in the file.
Send a string to the child process.
Send a terminal integer to the child.
Convert unicode pattern to regex pattern.
Converts bytes to compiled regex pattern.
Search for a string in the buffer.
Search for the next match in the buffer.
Unpack a directory.
Return the last error in the log.
Execute a command and return its output.
Given a filename, try to find a source file.
Return list of arcs executed.
Returns a list of arc positions that are not executed or have no branches.
Returns a list of arcs that have not been executed yet.
Return a list of branch lines.
Return the total number of branches.
Return a dictionary mapping branch names to arcs that are missing.
Return a dictionary of exit counts and the number of missing branch arcs.
Set the precision of the rounding function.
Returns the percentage of covered branches.
Return a string representing the number of PC covered.
Given a list of needles, return a highlighted version of the haystack.
Highlight the given keywords in the given string.
Given a string and a list of keywords, return a highlighted version of the string.
Run a function on the file system.
Return the unquoted end of a string.
Return a marquee of the given text.
Format a string for screen.
Remove leading and trailing whitespace.
Wrap paragraphs in ncols columns.
Find the optimal alignment for a list of rows.
Returns the ith item from a list or a default value.
Build the kernel argument list.
Tunnel the ssh server to the kernel.
Return a pretty-printed representation of the object.
Pretty print an object to stdout.
Get the mro list for a class.
Default pretty print function.
Print the super class of the given object.
Pretty-print a regular expression pattern.
Prints the name of the type of the given object.
Pretty-print a function.
Pretty print an exception.
Register a printer function for a type.
Register a deferred type printer function.
Add text to the output.
Make the current line breakable.
Ends the current group.
Flush the output buffer.
Pretty print an object.
Writes a row into an ODS file.
Retrieves the text from the clipboard.
Get OSX clipboard.
Get the clipboard from tkinter.
Get the build prefix for the current user.
Rekey a dictionary. :param dikt: dictionary to rekey.
Recursively extract ISO8601 dates from a string or list of strings.
Recursively squash datetime objects.
Convert datetime object to ISO 8601 string.
Make sure that the site directory we're in is present.
Write a script to the install directory.
Sleeps the given number of seconds.
Create an argument parser for this command.
Disambiguate topics from a JSON file.
Build a package finder.
Called when the log level has changed.
Return the default log instance.
Check that the flags have been changed.
Prints the help for all registered aliases.
Prints the help text for the flags.
Print the list of subcommands.
Print help for this command.
Print the list of examples.
Update the configuration with the given dictionary.
Initialize a subcommand.
Flatten the flags and aliases.
Parse the command line.
Load the configuration from a file.
Generates the config file for the class.
Downsamples an array by randomly selecting k elements.
Format an info tuple into a string.
Write a message to the output.
Called when the configuration of a configurable object has changed.
Return help text for a class.
Get the help text for a trait on a class.
Clears the instance of the class.
Format a failed test.
lite crash handler. Prints a message to stderr.
Flush any pending events to the socket.
Start the channels for the kernel.
Read a notebook from a file-like object.
Read from the process, ignoring interrupts.
Split a string into a list of arguments.
Compress a DHT array.
Add a magic function to a dictionary.
List the documentation of all the magics.
Format a LaTeX string.
Set the default value of an option.
Display the gui reference in the ipython notebook.
Create a task from a callable.
Get task function info with given label.
Get the function from the info dictionary.
Calculates the next run time for the job.
Submit the task to the task channel.
Run the task.
Run AAP.
Runs the given callable for the given number of iterations.
Runs a single iteration of the given callable.
Find the URL file.
Bind the kernel to the engine.
Create an interrupt event.
Interact with the kernel.
Filter a namespace by name pattern and type pattern.
List all namespaces matching a pattern.
Check that a dictionary has the same keys that are not in the dictionary.
Draws the active figure if interactive.
Send all currently open figures to IPython.
Print a figure and publish the display data.
Load an extension from the given module.
Unload an IPython extension.
Generate a set of random ports.
Initializes the notebook webapp.
Signal handler for SIGINT.
Confirm the user is exiting.
Shut down all the kernels we have created.
Price options for a given period of time.
Replace multiple keys in a string.
Render the prompt with the given name.
Create a ZIP file and copy it to the current working directory.
Fixes the version of the tool.
Check if object can be mappable.
Returns the partition of a sequence.
Runs the source code in a file.
Run a source file.
Download a PI file from the server.
Reduce a frequency list by adding all frequencies.
Compute the n-digit frequencies of a file.
Convert a txt file to a list of digits.
Return a numpy array of frequencies for a list of one-digit digits.
Computes two-digit frequencies for a list of digits.
Generate n-digit frequencies from a list of digits.
Plots two digit frequencies.
Plot one digit frequencies.
Run a debug expression in the current stack frame.
Reverse a URL by appending a query string.
Check if a string is private.
Runs debug_script on the given src.
Run a Python script in a temporary directory and optionally post-mortemly.
Run a test script in a module.
Return a dictionary of all the hash files with the given root.
Compress all hash files under the given hash root.
Return a list of keys for all files in the directory.
Returns True if the record should be included in the ACL.
Format the given error for the given test.
Embed a terminal in an interactive shell.
Helper function to create new csv writer instances.
Prepare the locale directories for the given languages.
Writes entries to the po file.
Writes the po header to the given path.
Subscribes to a user.
Initialize the option parser.
Run a python module.
Run a python file.
Create a Python code object from a Python source file.
Make a Python object from a Python file.
Returns an HTML table representation of the given matrix.
Set the current position of the widget.
Cancels the current completion.
Selects the index of the given row and column.
Updates the list in the console.
Return a dictionary mapping words to their frequency in the text.
Print word frequency data.
Return a string representation of the XML document.
Writes the document to a file.
Validate a pin.
Send a shared pin to a list of topics.
Delete a shared pin.
Send a pin to a user.
Delete a user pin.
Subscribe to a topic.
List all subscriptions for a user.
Begin the progress bar.
A context manager that starts a task and closes it when done.
Context manager for subtasking.
Add units of work to the total.
Add a sub-monitor to the progress bar.
Mark the task as done.
Make sure the build directory is correct.
Load a set of pyconfig files into a Config object.
Loads the configuration from the specified file.
Load configuration from a dictionary.
Takes a list of arguments and decodes them using the given encoding.
Load the configuration from the given argv.
Converts the parsed_data to a ConfigParser object.
Find a module by name and path.
Register a callback to be called when the service is stopped.
Called when a new start event is received.
Call the stop callbacks with the given data.
Interrupt the process, then kill it.
Find the command line arguments to run the program.
Starts the launcher with the given number of iterations.
SCP local file to remote.
Fetch a file from a remote location.
Return the number of engines.
Start the specified number of engines.
Start the job with the given number of jobs.
Return the default context.
Parses the output of the job id command.
Write the batch script to disk.
Write a script and run the job.
Makes the context menu for the current cursor position.
Append a JPG to the end of the file.
Append a PNG image to the queue.
Append an SVG string to the current element.
Adds an image resource to the editor.
Copies the image to the clipboard.
Returns the image with the given name.
Inserts an image into the database.
Insert an SVG into the specified cursor.
Saves the image with the given name to disk.
Called when the exit_now_changed event is received.
Set the environment variables to default values.
Auto-rewrite the input of the user.
Ask the user to exit.
Set the next input.
Read a configuration file.
Get a list of values from a section.
Get a list of values for the option in the specified section.
Set timid from environment variable.
Set attributes from keyword arguments.
Load the configuration from a file.
Set attribute from config file.
Set the list of delimiters.
Split a line into a list of delimiters.
Return a list of global keywords that match the given text.
Return a list of matches for the attribute of the given text.
Called when a greedy match is changed.
Return a list of aliases that match the given text.
Return a list of matches for the given Python source code.
Attempt to complete the specified state of the REPL.
Match one record against a set of tests.
Return a list of records that match the given dictionary.
Extract a subdict from a record.
Return True if the current prompt is quiet.
Write the output prompt to stdout.
Write format data to stdout.
Log the output to the logger.
Raises an exception if the container is frozen.
Convert a MySQL timestamp string to a datetime object.
Called when the event loop changes.
Perform one iteration of the simulation.
Publish a PyIn message.
Send an abort request to the queue.
Send a clear request to the server.
Return the topic for this node.
Send the shutdown message to the shell.
Called before the context is created.
Remove modules from sys.modules after the context is finished.
Return the absolute path to an absolute directory.
Returns whether the given name is a file or a directory.
Check if an object is a class.
Check if the given path is a valid package.
Convert a label to a line of text.
Return a new class with the same name and module.
Get CPU times of the system.
Returns the commandline for the process.
Returns a list of open file descriptors for the process.
Returns a list of connections for the process.
Check if a user has a group.
Resolves a class by its fully qualified name.
Return the percentage of used and total usage.
Login to Google Docs.
Extracts the key from the URL query parameter.
Ensures that the temp path exists.
Clear temp files.
Upload a file to gdoc.
Synchronizes the local and global CSV files.
Downloads the CSVs from GDocs and writes them to a.po file.
Uploads the po files to the Google Docs server.
Clears the temp file.
Create a new QtConsole instance.
Check if the given URL is accessible.
Return True if the URL contains the given string.
Get the response code from a URL.
Compares the content type of a URL to a given content type.
Compare the response code of a given URL.
Validate data and metadata.
Clear the console output.
Return a list of code units from a list of MORPs.
Return the full path to the root directory of the file.
Returns the source file for this ZIP file.
Return True if the file should be converted to python.
Return the total seconds of a datetime. timedelta object.
Return the result or raise an exception.
Wait for the result to be available.
Get metadata as a dictionary.
Abort the current action.
Returns the amount of time that has passed since the last message was processed.
Wait for the container to be ready.
Republishes the display pub with the given eid.
Wait for all outputs to be available.
Wait for the result to be available.
Return the absolute path to the given file.
Given a list of patterns, return a list of absolute paths to files.
Get the separator from a string.
Find all python files in a directory.
Remove the relative path from a filename.
Return the canonical filename for the given filename.
Get the contents of a zip file.
Returns True if the given file path matches one of the patterns.
Returns True if the path matches one of the patterns.
Maps aliases to canonical filenames.
Spawns a Qt4 loop for the given kernel.
Loop over a GTK kernel.
Enable an event loop for the given gui name.
goe number.
Returns the difference in eigenvalues between the center and the eigenvalues.
Computes the difference between the center of each GOEA variable and the center of the ensemble variable
Returns a new instance of this class.
Load the config file.
Writes the file to disk.
Erase the entire file.
Return a dictionary mapping file names to line names.
Returns a dictionary mapping file names to arc names.
Write arc data to a pickle file.
Read lines and arcs from a file.
Load data from a pickle file.
Read lines and arcs from a file.
Combine all parallel data files into one.
Add line data to the editor.
Add arc data to the manifest.
Add executed lines and arcs to a hash.
Returns a dictionary of the number of lines in each file.
Get pasted lines from user.
Main loop for interacting with the user.
Replace rlhist with a history item.
Prompt user for a line of input.
Edit the last syntax error.
Exit the application.
Extracts the URL and revision from the URL.
Create a new frontend master.
Initializes the colors of the given widget.
Return information about the post.
Convert a NumPy array to a numpy array.
Set the colors of the PDB object.
Toggles the active color scheme.
Return the textual representation of the traceback.
Return a traceback as a list of lines.
Formats a list of extracted files.
Writes an exception only to the output stream.
Set the join mode.
Ensures that all items in fromlist are imported into mod.
Adds a line to the code.
Adds a section to the code.
Get the function for the given name.
Return the code for an expression.
Render the template with the given context.
Perform a series of dots on the given value.
Render a template with the given context.
Return a dictionary of default formatters.
Register a printer function for a type.
When the precision of a float is changed.
Return a list of user-configured config files.
Configures the logging system.
Configures the directory where the tests will be run.
Prints out the pages of the given string.
Page a file with pager.
Get pager command to run.
Get the start of a pager.
Sniper a string.
Print a basic unicode representation of the object.
Convert an object to PNG format.
Pretty-print an object to PNG.
Returns True if o can be printed in LaTeX format.
Print an object in LaTeX format.
Add the options to the parser.
Validates that a list of strings is of type str.
Validate that all keys and values in a dict are strings.
Run the IOLoop.
Handle incoming messages from the server.
Sends a completion message.
Get information about an object :param oname: Name of the object :param detail_level
Shutdown the device.
Waits for all pending callbacks to finish.
Sends an input to the server.
Start the shell and sub-channel threads.
Stop all the channels.
Returns True if any of the channels are running.
Loads the configuration from the connection file.
Start a kernel for this VM.
Shut down the kernel.
Kills the kernel.
Interrupt the kernel.
Send a signal to the kernel.
Check if the connection is alive.
Returns the shell channel object.
Return the sub channel object.
Return the HB channel object.
Bind a kernel to an IPython kernel.
Prints a debug message only if the debug level is > = level.
Returns a list of all registered extension classes.
Pre-step the extension at the given index.
Walk an egg directory and yield tuples of filenames, dirs, files.
Scan a module for safe imports.
launch a new instance of ipcontroller.
Save connection dict to file.
Load config from json file.
Load the secondary configuration.
Enables automatic execution of px commands.
Disables the auto-position of the widget.
Run a single cell in the interactive interpreter.
Run a heartbeat if it's time to do so.
Run the task with the given message.
Remove a task from the database.
Patch an object's attribute if it does not exist.
Accept a connection to the server.
Reject the connection.
Return an Agent that can talk to this endpoint.
Called when the form is valid.
Deletes the object and redirects to the success URL.
If the user is logged in, set the user's attributes.
Check all modules in sys.modules to see if they have changed.
Opens a file in the editor.
Get the current clipboard.
Add a function to the chain with the given priority.
Get the metadata object for the given path or module.
Configures the debug runner with the given options.
Import a package or object.
Try to connect to a remote host using password-less authentication.
Try to open a ssh session.
Try to connect to a server using passwordless paramiko.
Open a tunnel connection to a server.
Open a tunnel to the given server.
Stops scheduling tasks.
Unwraps the given exception.
Register a new engine.
Unregister an engine.
Handle a execute reply message.
Send all pending notifications to the client.
Send results to the client.
Flushes control messages to the socket.
Flush any remaining ignored control messages.
Send all pending IOPUB messages to the client.
Spin the motor every interval seconds.
Stops the spin thread.
Send all queued messages to the server.
Send an apply request over the given socket.
Get the history of the hub.
Send a query to the database.
Return a set of opcodes.
Returns the byte parser.
Returns a set of line numbers that match one or more regexes.
Return the first line in the multiline mapping.
Takes a list of lines and returns a set of all the lines that are the first in
Parse the source code.
Returns a sorted list of arc lines.
Returns a list of child parsers.
Iterates over the byte and line numbers in the bytecode.
Find all the statements in the file.
Return a string representation of the block stack.
Check that all chunks start with a start byte.
Yield tuples for arcs.
Returns a list of all the chunks contained in this parser.
Return a set of all arcs in this parser.
Start the coverer.
Write coverage reports to a stream.
Check if a file should be included in the coverage.
Interpret a distro name.
Open a URL with authentication.
Get the parent class of an object.
Return the root topic for the current engine.
Render a template with the given context.
Configure the plugin.
Format an error.
Split data into chunks of length num.
Convert nb to this version of notebook.
Convert hex color to rgb.
Returns a dict with the background color and foreground color for a given style name.
Get a font from the GUI.
Handles execute reply messages.
Handle reply to history request.
Handle a PyOut message.
Handle display data.
Called at the start of each channel.
Execute a file on the device.
Process an execute error message.
Process the execute payload. :param item: The item to execute :type item: dict :
Set the default style sheet and syntax style.
Edit the file with the given filename.
Create the prompt text.
Make a continuation prompt.
Called when the style sheet of the page has changed.
Called when the syntax style of the highlighter has changed.
Iterates over the keys of the dictionary and returns the first value that is a dict.
Get information about virtual memory.
Get CPU times of the system.
Get the real and effective process UIDs.
Get the real and effective process gids.
Get the threads running this process.
Returns a list of open file descriptors for the process.
Return the commit hash of a package.
Return a dict of information about the given package.
Return the number of CPUs supported on Mac OS X.
Return the number of CPU cores on this system.
Returns the next set in the result set.
Fetch one row from the database.
Fetch at most size rows from the database.
Fetch all rows from the database.
Establish a connection to a peer.
Parse a JSON string into a notebook object.
Read a notebook from a string in Python format.
Read data from a string or file.
Wrapper around `writes_json` or `writes_py`.
Write a notebook to a file.
Convert notebooks to metadata.
Loads the value of the field from a dictionary.
Returns True if the given name matches this filter.
Check if the given class should be included in the current spec.
Determine if a directory should be included in the output.
Return True if the file should be included in the project.
Check if the function should be included in the list of wanted functions.
Check if the given method should be included in the request.
Check if a module should be included in the list of wanted modules.
Return a list of lines from a file.
Lists lines from a pydb file.
Print a list of lines.
Implement pdef magic.
Calculates the conversion factor between two currencies.
Convert currency from one currency to another.
Compute the return on a given exchange rate between two dates.
Get the encoding of a stream.
Get the default encoding for reading from stdin or reading from sys.stdin.
Write the connection file to disk.
Initialize the heartbeat server.
Initialize the session with the config.
Initialize the io stream.
Initializes the kernel.
Convert html to text.
Convert Markdown text to plain text.
Convert a domain name to a FQDN.
Add additional command line options to the parser.
Configures the nose-exclude plugin.
Check if a directory should be included in the output.
Return True if the extension has links to dynamic libraries.
Call each function in a list.
Calls each function in reversed order.
Add a function to the end of the list.
Add a function to the end of the list.
Format the usage message.
Write the PID file to disk.
Remove the pid file if it exists.
Get the PID from the pid file.
Construct a parser from a magic function.
Get the real name of a magic function.
Adjust the offset of the current block to the offset of the prompt.
Rehighlight the given block.
Sets the format for the highlighting at the given offset.
Copies the focus to the clipboard.
Executes the given source.
Called when the prompt is finished.
Returns True if a tab is pressed.
Inserts the copy action into the context menu.
Handles key presses on the console.
Insert the continuation prompt.
Handle a complete reply.
Handles execute reply messages.
Handle kernel being died.
Handle reply to object info request.
Handle a pyout message.
Handle a stream event.
Handles a shutdown reply.
Execute a file in the temporary directory.
Interrupt the kernel.
Resets the context to its initial state.
Restarts the kernel.
Sends a calltip request to the kernel.
Perform completion on the current input buffer.
Process an execute error message.
Process an execute OK message.
Called when the contents of the document changes.
Add a plugin to the list of plugins.
Call all plugins and return the result.
Iterates over all registered plugins, calling them with the given arguments.
Executes all registered plugins and returns the first result.
Configure the plugin manager.
Loads the plugins for this manager.
Load all plugins.
Convert latex output to PNG.
Convert a latex string to an HTML string.
Check if the requirement exists.
Return a dictionary representation of the interval.
Returns the process name.
Return the percentage of CPU usage in percent.
Returns the percentage of total memory in MB.
Returns a list of memory maps.
Returns True if the process is running.
Suspends the process.
Resumes the process.
Kills the process.
Waits for the process to finish.
Wire up the kernel.
Returns True if the given identifier is shadowed by the given IP.
Register a new transformer.
Unregister a transformer.
Register a checker.
Unregisters a checker.
Register a new handler.
Unregisters a handler for the given name.
Apply prefiltering to line_info.
Find a handler for the given line_info.
Apply the transformers to a line of input.
Prefilter a line of input.
Apply prefiltering to a list of lines.
Return the prefilter handler for this line.
Check for special characters.
Return the prefilter handler based on the line info.
Check if this line should be filtered.
Indent the line if necessary.
Replace aliases with their real values.
Handle magic commands.
Return the command to execute based on the line info.
Handles the line editing.
Handle a single line of code.
Override Qt method to hide the tooltip when text edit is clicked.
Stop the hide timer.
Overloads the paint event to paint the tooltip label.
Show information about a call.
Handles cursor position change.
Canonicalize a path to an absolute path.
Accessor for the maskeddict.
Check if the current virtualenv does not have a global file.
Calculates the frequency of each word in the corpus.
Return a list of aliases for the current operating system.
Same as `define_alias`, but doesn't throw an exception if the alias already exists
Define an alias for a command.
Validate that the given alias exists.
Call an alias.
Transform an alias to a command.
Expand aliases in a line.
Create a directive to show the help for the test program.
Resets the styling to its default values.
Returns a QColor object for the given color and intensity.
Returns the QTextCharFormat for this text.
Generate a JWT.
Clean expired JWTs.
Check if a JWT has already been used.
Validate a JWT token.
Return the common prefix of a list of paths.
Returns the size in pixels of the control.
Check if the cursor can be cut.
Returns whether the control can be copied to the clipboard.
Clear the screen.
Cuts the text from the clipboard.
Get the input buffer.
Sets the input buffer to the given string.
Sets the font for the tab and emits the font changed signal.
Prints the control.
Moves the cursor to the top of the prompt.
Resets the font to the default font.
Appends the input to the prompt.
Append html to the prompt. :param html: html to append :param before_prompt:
Append html fetching plain text.
Add text to the prompt as plain text.
Clears the temporary buffer.
Performs a completion with the given items.
Fills the temporary buffer with the given text.
Returns true if the given modifier keys are pressed down.
Creates a QTextEdit or a QTextEdit instance.
Creates a page control for this widget.
Filter page key press events.
Returns the plain text selection of the given block.
Returns the end cursor.
Return the column number of the cursor in the input buffer.
Get the cursor line from the input buffer.
Get the prompt cursor.
Get the text cursor for a selection.
Insert the continuation prompt.
Inserts html into the cursor.
Inserts the html into the cursor as plain text.
Inserts text at cursor position.
Keeps the cursor in the buffer.
Quit the keyboard.
Inserts or updates the page control.
Called when the prompt is started.
Read a line from the terminal.
Sets the continuation prompt.
Sets the top cursor on the control.
Adjusts the scrollbars of the document.
Main entry point for the download script.
Copies a config file to the ipython notebook location.
Create a profile directory by name.
Find a profile directory by name.
Read a file and return its contents.
Create a temporary file with the given content.
Flush and close the file.
Write data to file and flush.
Add a new heart handler.
Add a failure handler.
Handle a pong message.
Returns a list of samples from the given sequence in batches of batch_size.
Convert a path to a filename.
Display the elapsed time and the estimated time.
Get the time unit of elapsed, avg, est_end.
Extract wininst config from dist_filename.
Uncache a ZIP directory.
Quotes an argument for inclusion in a GraphQL query.
Check for conflicts in the given distribution.
Set fetcher options in config file.
Create home path if necessary.
Check if file is an archive file.
Create a new heading cell.
Create a new metadata node.
Create a new author node.
Check if path is a directory and is writable.
Unquote a filename.
Return a valid Python file name for the given filename.
Return the path to the XDG directory.
Get the current IPython interpreter directory.
Return the path to the ipython package directory.
Get the path to a module in the ipython package.
Check if the target is older than any of the dependencies.
Returns the MD5 hash of a file.
Check for old configuration files.
Update suggestions dictionary for an object.
Get suggestions for an object with a specific size.
Get suggestions for the given object.
Return the relative path to the current working directory.
Returns a list of paths matching the given glob pattern.
Return the md5 hash of the file.
Create a profile from the pfile.
Print the profiling results to the given stream.
Clean up the statistics file.
Disable the wx event loop.
Disable event loop for Qt4.
Enables event loop integration with GTK.
Enables Tk to be used for interactive tutorials.
Enable event loop integration with pyglet.
Define a wave saver.
Initialize the database connection.
Runs SQL against the database.
Get information about the current session.
Get the last n rows of the table.
Get a range of histograms by a string.
Get the name of the histogram file.
Set the name of the current session.
Reset the session.
Get a range of data from the session.
Store the output for the given line number in the cache.
Write out the input and output caches.
Stops the worker thread.
Get the number of CPUs on the system.
Get system per CPU times.
Return a list of partition tuples for disk partitions.
Return a list of all pids.
Return a nice string representation of a pair.
Format a list of statements and a list of lines.
Return a short stack.
Join a list of regexes into a single regex.
Remove the file at the given path.
Recursively update the MD5 hash of the given value.
Update the self.profiles dictionary with the current profiles.
Stop cluster by profile :param profile: profile to stop :type profile: str :type profile
Find the path to a command.
Return the body of the process.
Find code units for a set of morfs.
Runs report_fn on each of the code units in morfs.
Set a trace on stdout and set the backtrace on the pdb instance.
Initialize the extensions.
Runs the initialization code.
Run the lines in the exec_lines list.
Run all startup files in the startup directory.
Run the executable files.
Run cmd line code or file.
Run the module in the shell.
Return the filename of a static data file.
Return the contents of a file as a string.
Escape special characters in a string.
Processes the coverage report.
Copy static files to the report directory.
Writes an html string to a file.
Return the hash of the given file.
Writes the index file to disk.
Reads the status file from the given directory.
Write the coverage report to a file.
Sorts lst1 and lst2 and returns True if lst1 and lst2 are equal.
Get a slice of a sequence.
Divide a sequence into chunks of the given size.
Read the manifest file and add it to the ignore list.
Convert a glob pattern to a regular expression.
Returns True if the filename matches any of the patterns.
Returns a list of all files that have been versioned.
Start a new kernel.
Shuts down the kernel with the given id.
Kills the specified kernel.
Returns the kernel with the given id.
Get the ports of a kernel.
Returns the notebook id associated with the given kernel id.
Start a kernel for a notebook. :param notebook_id: notebook id :param kwargs:
Shut down a kernel and delete the mapping for it.
Interrupt a kernel. :param kernel_id: kernel id :type kernel_id:
Restart a kernel. :param kernel_id: kernel id :type kernel_id:
Create an iopub stream for the given kernel.
Create a shell stream for a kernel.
Create a HB stream for the given kernel.
Remove all one-time properties from the object.
Converts html to xhtml and writes it to a file.
Remove leading and trailing empty paragraphs.
Similar to get_unique_or_none, but return None if the object does not exist
Given a list of tokenized terms and a list of search_fields, construct a query that
Given a query_string and a list of search_fields, return a query that matches the
Returns a date greater than a given date_field.
Returns a date less than a given date field.
Get the null or blank query for a field.
Replace case sensitive fields in fields_dict.
Add command line options to the given parser.
Validates that all the attributes of this element match the given method.
Return True if we want to add a method to the class.
Rotates the ring.
Return the websocket URL for the current request.
Reserialize reply from server.
Inject a Cookie message into the request context.
Start the heartbeat stream if it's not closed.
Stops the beat stream.
Loads the file into memory.
Get the index of the block.
Set the block to the given index.
Edit the block at index.
Print the source code for the specified index.
Print all source code blocks to stdout.
Runs a function on a sequence in a separate thread.
Get the source code for a traceback.
Find lines that can be inspected.
Prints a countdown for the given name and date.
Send SIGINT to all engines and kill the controller.
Save all the message IDs in the client's history.
Synchronize the results of a function with the client.
Runs the given function after the current state of the simulation.
Get all messages from the socket.
Get a message from the in-queue.
Parse a URL and return a dict with scheme, username, password and port.
Get a list of all modules in the system.
Return a list of modules that can be imported.
Return a completion list for a magic run.
Quote an XML attribute.
Configure the plugin.
Writes the report to the given stream.
Add an error to the error list.
Add a failure to the error list.
Add a successful test.
Returns a random two-bin number.
Generate a random weighted number of loads.
Register an engine with the graph.
Remove an engine from the registry.
Handle lost tasks.
Fail if any of the dependent jobs have timed out.
Fail an unreachable job.
Save a job that has not been run yet.
Submit a task to the scheduler.
Dispatch the result message.
Handle a result message.
Handle any unmet dependencies.
Update the dependency graph.
Prints the current state of the log file.
Write a line to the log.
Write data to the log file.
Stops logging.
Create a new worksheet with the given name and cells.
Add an object to the command chain.
Add a new regular expression to the command chain.
Return an iterator of objects matching the key.
Return a generator yielding all matches for the given key.
Called when a notebook directory is changed.
List all notebooks in the notebook directory.
Create a new notebook id and associate it with the given name.
Delete a notebook id from the snapshot.
Checks if notebook with notebook_id exists.
Finds the path of notebook with the given ID.
Get path to notebook file by name.
Get the content of a notebook.
Get notebook object from notebook id.
Save a new notebook.
Save a notebook object.
Save notebook object to file.
Delete the notebook with the given id.
Create a new notebook and write it to disk.
Copies the notebook and returns the notebook id.
Yield tuples of token types, text, line number, line number, and text.
Load the default IPython configuration.
Return the default classes for this application.
Override the default parse_command_line method to add the gui option.
Initializes the application.
Initializes the interactive shell.
Initializes the banner and displays it if necessary.
Return a repr of the object's type.
Parse a notification name into a list.
Returns a dictionary of traits for the given class with the given metadata.
Get the metadata for a trait.
Check if the value is an instance of self.klass.
Returns the default value for this field.
Returns True if all items in self are in the set, and are not in the set.
Returns True if the set is unreachable.
Return a dictionary representation of this Dependencies object.
Returns the depth of the node n in the tree.
Pretty-print a binary tree.
Attempt to disambiguate a DNS address in a URL.
Apply a function to each element of the sequence and return the result.
Validate the targets argument.
Dispatch a monitor traffic message.
Dispatch a query message to the appropriate handler.
Handles a new heart.
Handle a failure of a heart.
Save a task request to the database.
Save an IOPub message to the database.
Send a connection request to a client.
Unregister an engine.
Finish the registration for the given engine.
Send a shutdown request to the server.
Purge results from the database. :param client_id: client id :param msg:
Extracts the content and buffers from a record.
Get the history of a message.
Send a query to the database.
Context manager to temporarily change to a new working directory.
Decode the output of a completed command.
Run a command in the current working directory.
Dispatches a message to the appropriate handler.
Check if the message is from this session.
Annotate a set of morfs with the annotation file.
Returns the installed version of the given package name.
Recursively squash unicode keys and values from obj.
Extract a header from a message or header dict.
Check the packer and unpacker functions.
Create a message of type msg_type with content, parent and subheader.
Sign a list of messages.
Send a list of messages to a stream.
Receive a message from a zmq socket.
Saves the given string as an SVG file.
Converts an SVG string to a Clipboard.
Converts an SVG string to an image.
Return a dictionary of information about an object.
Get the docstring of an object.
Get the source code of an object.
Get the argspec of an object.
Find the absolute file path of an object.
Find the source lines of an object.
Get the definition of an object.
Return the header of the table.
Prints a noinfo message.
Prints the definition of an object.
Print the source code of an object.
Print out the contents of the specified file.
Formats a list of fields for the table.
Search for namespaces matching a pattern in a table.
Start a threaded reactor.
Return a string representation of the document.
Returns the XML representation of the document.
Load all modules in a set of packages.
Inverts a dictionary.
Recursively convert an object to primitives.
Returns a list of matplotlib figure objects.
Prints a matplotlib figure.
Set the figure format to use.
Find and return gui and matplotlib backend.
Activate a matplotlib backend.
Configure support for inline mode.
Starts the trace thread.
Stops the thread.
Start a new Tracer.
Installs a tracing function.
Start collecting traces.
Stops collecting traces.
Pause all the tracers.
Resume all paused tracers.
Return the arc data as a dictionary of line data.
Collect exceptions from a list of remote exceptions.
Return the traceback as a list of lines.
Processes coverage information from environment variables.
Return the canonical directory for the given MOF.
Return the source file name for the given filename.
Determine if the given filename should be traced with the given frame.
Determine if we should trace the given frame.
Adds a warning message to the internal warnings list.
Check for packages and add them to the source list.
Start the collector.
Called at the interpreter exit.
Return a regular expression to match against the exclude list for the given which.
Save data to file.
Combine all paths into a single file.
Collect data and store it in the data object.
Performs the MOF analysis on the given model.
Return an analysis object for the given codeunit.
Run a summary reporter on a list of morfs.
Annotate a list of morfs.
Generate an XML report from a list of morfs.
Reloads the data from the file or URL.
Find the path of a given command.
Run a command in the shell.
Forward read events from a file descriptor.
Read lines from the socket and send them to the socket.
Find the launcher class for clsname and kind.
Start the daemon process.
Build a launcher from the given class name.
Start the engine.
Start the IOLoop.
Return a wx application instance.
Check if the event loop is running in wx.
Start the event loop for wx.
Get an instance of Qt4Application.
Return True if the event loop is running in Qt4.
Start the event loop for Qt4.
Create a blank canvas with the given size.
Draw a cross in the current plot.
Draws a line between two points.
Converts an image from grayscale to an annotated image.
Returns a UUID of the specified length.
Get a unique key from a GET request.
Return the domain part of a URL.
Return a dictionary of query parameters from a URL.