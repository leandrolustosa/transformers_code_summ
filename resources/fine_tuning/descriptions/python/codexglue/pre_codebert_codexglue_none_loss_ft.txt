Convert a string to a list of URLs.
Downloads a video from a website.
Downloads a video from a video.
Format text with given colors.
Prints a log message.
Prints an error message.
Print a message to stdout.
Determines the OS version.
Extracts video info from a ckka file.
Extracts and returns the URL of the URL.
Sanitize a text string.
Downloads a CDF file from a URL.
Match all patterns in text.
Parse a query parameter from a URL.
Parse a host and port number.
Gets the title of a topic.
Download all topics from a chat page.
Download a topic from a topic.
Determine whether a task instance has been executed.
Get the event buffer from the queue.
Return a connection object.
Retrieves the AWS credentials and secret key.
Returns the value of the field.
Copy information from a database.
dump a table to disk.
Execute the upload file.
Print the current state of the task.
Return a connection object.
Get an instance of an instance.
Create an instance of an instance.
Delete an instance from an instance.
Create a database on the database.
Delete database from database.
Start a proxy proxy.
Stop the proxy process.
Gets the proxied version of the proxy.
Create a connection to the database.
Retrieve a connection from the database.
Delete a connection from the database.
Returns a proxy runner for the proxy.
Returns the database hook for the database.
Clean up the database.
Reserve a free TCP port.
Normalize a job_id from a JSON file.
Get code from an error message.
Remove all dag runs from the database.
Remove all tasks from a dag.
Set the state of the dag.
Print statistics about the task.
Dump all tasks in the scheduler.
Makes a directory and return a directory.
Convert string to float.
Convert value to UTC timezone.
Make a naive datetime from a value.
Create a datetime object.
Get a connection broker.
Returns a connection object.
Runs a POST request.
Check if the response is valid.
Send a request to the server.
Create a session and return the session.
Reset the database.
Return a human-readable message.
Execute the query against the database.
Returns a pandas dataframe from the database.
Execute the query against the database.
Insert rows at the given table.
Returns a connection object to the server.
Returns True if the collection exists.
Creates a collection of collection.
Returns True if the database exists.
Create a database on the database.
Delete database from database.
Delete a collection of collection.
Insert documents in a collection.
Delete a document from the collection.
Get a single document by id.
Get all documents in a database.
Get a function for the named function.
Creates a new function.
Update a function on the cloud.
Upload a zip file to a zip file.
Delete a function in the cloud.
Iterate over the state of the dependency state.
Determine whether the given dependency is set.
Return a generator that yields the failure reason.
Parse config file.
Retrieves the credentials for the region.
Return a connection object.
Flushes the buffer to the buffer.
Determine if file is a ZIP archive.
Construct a task instance from the database.
Start the running process.
Terminate the child process.
Exit gracefully gracefully.
Start the processing loop.
Start the loop.
Start the sync loop.
Refresh the DAG of the DAG file.
Print stats about the process.
Removes all missing errors from the database.
Log a file for processing.
Sets the list of file paths to the queue.
Wait for all processes to finish.
Stop all processes.
Creates a new ssh connection.
Create a new transfer.
Get a single transfer job.
List all transfer jobs.
Update a new transfer.
Cancel a transfer operation.
Pauses a transfer operation.
Resume a transfer operation.
Waits for a job to wait for a job.
List all tasks for a given task instance.
Return the number of available slots.
Run command on the command line.
Allocate the IDs of the project.
Begin a new transaction.
Commit a new project.
Search for projects in a project.
Restore a transaction.
Run a query on the server.
Get an operation by name.
Delete a single operation.
Waits for the operation until the operation finishes.
Return the name of the hostname.
Return a connection object.
Returns a list of template fields for a given full name.
Add template fields to template.
Clean up the database.
Prepares the class path to the system.
Checks to see if the target is available.
Determines if the ticket is valid.
Convert an object to a dictionary.
Yield successive chunks from an iterable.
Reduce an iterable of an iterable of iterable.
Chain all tasks in the queue.
Render a log filename.
Return a connection object.
Wait for a given operation to finish.
Convert a JSON string into a string.
Handles the execution of the simulation.
Runs the program.
Get the state of celery task.
Determine the number of tasks to be used for processing.
Return the number of fetched tasks.
Return a connection object.
Get a single job from a project.
Waits for a job to finish.
Create a new version of the model.
Set the default version of a project.
Lists all versions of a project.
Delete a version of a project.
Creates a new model.
Gets the model for a project.
Write batch data to DynamoDB.
Iterate over executor executor.
Returns the default executor for the given configuration.
Returns the executor for the given executor.
Called when an error occurs.
Get a connection to the database.
Trigger a trigger trigger.
Delete a dag from a dag.
Gets the task info for a given dag.
List all pools in the pool.
Create a new pool.
Create or update a container group.
Retrieves the current state of the state of the current state.
Gets all messages from a resource group.
Get logs from a resource group.
Delete a resource group.
Returns True if the container has a container group.
Constructs the ingest query for the given columns.
Packs a message from the queue.
Get all the task instances for the given state.
Get a task instance from the database.
Get the previous dag.
Get the previous scheduled scheduled job.
Verify that the task has been validated.
Send a request to the server.
Convert a context environment variables to a dictionary.
Trigger the condition of the workflow.
Query the metric for a metric.
Get the DAG for a given dag.
Kill all dead ones in the queue.
Bagates a dag from a dag.
Collects a list of files from a dag.
Return report bagbag.
Add days to datetime.
Determines whether the file matches the pattern.
Determine if the file exists.
Remove all tasks from the database.
Return the number of tries to get the number of seconds.
Get the current state of the task.
Log an error message.
Refresh the task instance.
Remove all data from the database.
Return the key of the task.
Determine whether this task is done.
Calculate the next retry date of the task.
Determine if the state is ready to be ready to be ready to be ready to
Determine if the task is available.
Gets the next dag from the database.
Push a value to the x-axis.
Initialize the run context.
Clean up the log file.
Return a connection object.
Start an instance of a resource.
Get an instance template template.
Waits for the operation to see if the operation is done.
Check if a bucket exists.
Create a bucket in the bucket.
Determine whether a prefix is a prefix.
List all prefixes in a bucket.
List all keys in a bucket.
Determine if a bucket exists.
Get an object from bucket.
Reads a key from a bucket.
Check if a wildcard key exists.
Retrieves a key from a wildcard wildcard.
Query the Cassandra database.
Convert a value to a dictionary.
Return a connection object.
Execute the query.
Load an entrypoints from an entrypoint.
Check if a plugin is valid.
Skip all tasks in a dag.
Return a connection object.
Checks to see if a file exists.
List files in a directory.
Execute the query.
Compress a file to a temporary file.
Query the MSS database.
Build metrics for a function.
Create a cgroup node from a path.
Delete a cgroup from a node.
Perform an API call to the API.
Return a connection object.
Execute the query.
Return information about the object.
Returns a list of available fields.
Gets the object from the ElasticSearch API.
Convert a column to a timestamp.
Get a collection from the database.
Returns True if the given email belongs to the account.
Returns a list of all attachments that match the given name.
Extracts the file and returns the contents of the file.
Puts records into a record.
Determine the status of a task.
Sends an email to an email address.
Sends an email to an email.
Convert the value to a value.
Checks if a container exists.
Check if a container contains a prefix.
Load a blob from a string.
Read a file from a container.
Delete a file from a container.
Get FTP connection object.
List files in a directory.
Store a file in memory.
Returns the modification time of a file.
Execute the Discord webhook.
Return a connection object.
Check if a directory exists.
Check if a file exists.
Returns a list of directories in a share.
Create a directory and return a new directory.
Load a file from a local filesystem.
Loads a string from a string.
Return a connection object.
Download an object from a bucket.
Upload a file to a local filesystem.
Determine if a bucket exists.
Determine if a bucket has updated since the given timestamp.
Delete an object from bucket.
Get the size of a bucket.
Get the CRC32 CRC of a bucket.
Get the MD5 hash of a bucket.
Determine whether the secondary status of the secondary state is changed.
Return a human-readable status message.
Takes a S3 file and returns it.
Configures the S3 storage resources.
Check that the S3 bucket is valid.
Returns the log connection object.
Start a new data flow.
Run all migrations.
Run all migrations.
Delete an instance from an instance.
Delete a table from the database.
Update a cluster.
Prepare command line command line.
Prepare a list of hive configuration files.
Check if a table exists.
Return a connection object.
Get results from hql query.
Get records from hql query.
Returns pandas dataframe with pandas data.
Returns a client connection object.
Retrieves the endpoint URL.
Binds parameters to a string.
Escape a string.
Convert string to int.
Validate that the given value matches the given value.
Return a new connection object.
Return the build service object.
Check if a table exists.
Cancel the query.
Execute a delete table.
Run a table on the database.
Gets a Dataset from a dataset.
Execute a single operation.
Execute a sequence of parameters.
Get next page from the queue.
Execute the postgres database.
Make sure we need to create intermediate directories.
Run the command on the system.
Called when the run finished.
Parse command line interface.
Builds the HTML header.
Builds a JSON chart.
Create a x axis.
Create a y axis.
Return a connection to the database.
Gets the most recent execution of a dag.
Execute the SQS queue.
Return JSON formatted response.
Open a file and return it.
Generate a cache key.
Return a connection object.
Retrieves the API key from the API.
Return a session object.
Execute the command.
Builds the payload for the operation.
Execute the operation.
Return a connection object.
Run the query on the server.
Determine the status of a query.
Check the status of a query.
Get a connection object.
Handle a rate limit.
Get a table from the database.
Get the location of a table.
Returns the status of the cluster.
Delete a cluster from the cluster.
List all snapshots in a cluster.
Restore a snapshot from a snapshot.
Create a cluster snapshot.
Executes a Slack webhook.
Create a job flow.
Filter files by size.
Remove ignored extensions from a list.
Execute the pipeline.
Get a pool by name.
Creates a new pool.
Delete a pool by name.
Convert a dictionary to a proto object.
Waits for a given operation.
Get an operation for the given operation name.
Append the label to the cluster.
Determine the webhook endpoint.
Build the record payload.
Execute the Discord server.
Encrypts a plain text using the given key.
Return a connection object.
Close the upload file.
Return environment variables.
Get secrets from kube config.
Return security context.
Gets the url for a task.
Start the process.
Determine if the process is done.
Exit the process.
Update importer errors.
Process all tasks in a dag.
Get the number of tasks for the computation.
Check that all tasks have been executed.
Enqueue tasks from queue.
Change all tasks that have been executed.
Iterate over all executables from the executor.
Updates the state of the database.
Manages the state of the executor.
Get a DAG for the given date.
Return all tasks in a dag.
Set the state of a dag.
Called when the server is running.
Get a client object.
Returns an instance of the instance.
Delete an instance from an instance.
Delete database from database.
Determine whether the email has an email address.
Prepare a dictionary with additional additional parameters.
Return a connection object.
Determine if a table exists.
Determine if a table exists.
Build the track status for the track.
Submit spark to spark.
Parse the SPark log file.
Read spark status from the spark queue.
Get a task runner from a local job.
Waits until the task is finished.
Execute sql query.
Create a CSV file for the given file handle.
Write a schema file to disk.
Returns a dictionary of column type names.
Return the type of a MySQL type.
Returns a dictionary of extra information about the extra data.
Scale a time array of time units.
Given a number of days, return the number of days.
Initialize a role from the database.
Delete a role from the database.
Returns a list of roles for user.
Returns a set of all permissions for this user.
Determine whether the user has a user.
Determine if a given permission name is available.
Delete all permissions from the database.
Merge a permission menu.
Update the admin view view.
Creates a permission for all user-navigation views.
Returns the Fernameset object for the given configuration.
Check for partition table.
Parses the SQS queue.
Returns a connection to the hdf server.
Retrieves the hdf hdf connection object.
Check if a file exists.
Get a connection broker.
Returns the URI of the endpoint.
Convert date to dict.
Convert time to dict.
Get a redis connection.
Returns a pandas dataframe from the database.
Execute a sql statement.
Set autocommission of the connection.
Serialize a cell.
Check the health of the scheduler.
Return a connection object.
Implements the webhook hook.
Retrieves the credentials from the server.
Authenticate using Google API.
Return a list of pending tasks.
Prepares the command line.
Normalize the tensor of a tensor.
Crop a PIL image.
Flip an image to a PIL image.
Compute the perspective of an image.
Flip an image from an image.
Adjust the brightness of an image.
Adjust contrast of an image.
Adjust the saturation of an image.
Convert an image to grayscale.
Save an image to an image.
Find classes in a directory.
Read info from a file.
Reads the matches of a Matlab file.
Compute the accuracy of the target.
Download a URL from a URL.
Lists all directories in a root directory.
Lists all files in a directory.
Download a file from Google Storage.
Generate random parameters.
Generate random parameters.
Generate random parameters for an image.
Generate a random variates.
Generate parameters for a set of parameters.
Download and download a tarball.
Downloads all training files and downloads them.
Gets the theme name for the theme.
Get a list of theme names.
Parse response and return response.
Makes a random variates.
Calculates the probability of a school shocks.
Build a random variates.
Removes non-zero non-zero non-zero values.
Returns the size of event.
Evaluate all of a function.
Convert a identifier to a string.
Calculate the size of the component.
Builds the input pipeline for the input dataset.
Assert that map values are valid.
Call `fn`.
Compute the gradient of a function.
Convert a structure to a broadcast.
Compute the step step for the given step.
This method is used to run the metropolis simulation step.
Initialize a layer from a dictionary.
Convert x to Tensor.
Expand the event of the event.
Calculate the categorical probabilities.
Ensure that the TensorFlow version is available.
Compute the log-likelihood of the features.
Determines the cover type of the features.
Creates a positive axis of the given axis.
Squeeze the tensor for the given axis.
Compute the gradient of the latent variable.
Returns the inverse of the latent variable.
Compute the smoothing transition matrix for the given autoloder.
Calculate the smoothing signal for a signal.
Return a random prime number of prime prime prime numbers.
Returns the real time of the machine.
Searches for line searching.
Prints a list of values.
Check that the quadrature parameter is valid.
Interpolate the location of a grid.
Interpolate the scale of a grid.
Concatenate vectors.
Logarithm of vectors.
Logarithm of the logarithm.
Compute the vector of vectors.
Extracts the log probabilities from the given number of states.
Generate a random direction of a state.
Try to call a function.
Build and return the prior probability for the given parameter.
Calculate the moments of a time series.
Calculate the initial value of a time series.
Makes a mixture of posterior.
Returns the range of the upper bounding box.
Resolve a list of distribution names.
Builds the model from the model.
Calculate entropy of joint distribution.
Create an image summary for a sequence of sequences.
Visualize a reconstruction image.
Visualize sample information.
Summarize the distribution of the distribution.
Summarize the mean of inputs.
Returns the TensorFluent for the layer.
Creates the state of the input sample.
Call convolution function.
Sample static protobuf generator.
Returns the batch shape of the model.
Returns the batch shape of the model.
Convert vector to square matrix.
Sorts the arguments of the given values.
Sorts a list of values.
Compute the gradient of the network.
Calculate the logarithm of a series.
Evaluate erigenvalues.
Compute the logarithm of the joint logarithm.
Determine if the given index points in the grid.
Returns the index of the index.
Compute the squared difference between two vectors.
Calculate the value of a function.
Split a covariance into a list of marginals.
Return string representation of Tensor.
Returns the shape of the model.
Returns the shape of the sample.
Returns the value of the distribution.
Return the numpy array.
Compute the unit norm of a dimension.
Returns the log-normalized log-likelihood.
Determines the dtype of the given args.
Broadcast a tensor to a tensor.
PDF for PDF at peak level.
Compute the effective sample size for each state.
Calculate the minimum likelihood reduction.
Compute the size of an axis.
Convert a list of `states` to a list of values.
Removes the mappings from the map.
Merge two dictionaries.
Recursively flatten a nested dictionary.
Extract keyword arguments from a function.
Generate a VCC convolution block.
Determine whether the uk turn of a state.
Leaves the value of the current state of the current state.
Logical log likelihood of current state.
Returns a random variates.
Convert a struct to a Tensor.
Returns the attributes of the tensor.
Makes a mixture of random mixture of parameters.
Pack images into two layers.
Download a file from a directory.
Call the function to call the volatility function.
This function will be used to create a new volatility vector.
Call the input function on the input layer.
Recursively call the function to call the function.
Determines the DM tracer for the given k.
Returns a flat sample of the distribution.
Given a list of topics, return a list of topics.
Compute the emission weights for the given vector.
Save images to an image.
Convert a dtype to a numpy array.
Returns the base dtype of a dtype.
Determine whether a dtype is a boolean.
Determine if a dtype is complex.
Returns the maximum value for the given dtype.
Returns the name of a tf type.
Returns the size of a file.
Assert that the items have the same type.
Accepts a function and returns a boolean expression.
Expand function to expand an expression.
Shrink the closest to the best solution.
Replace replacement with given index.
Prepares the arguments for the simulation.
Prepares the arguments for the given vertex.
Builds a fake sample from the samples.
Returns a dictionary of the configuration parameters.
Initialize the tensor object from a config file.
Matrix multiplication op.
Helper function for calculating standard deviation.
Helper method to pick a scalar.
Calculate the log likelihood of the event.
Calculates the probability of each event.
Determine the dimensions of x and y.
Raise an exception if the layer is not valid.
Convert a slice of parameters to a dictionary.
Apply a step to a single step.
Apply a sequence of slices.
Returns the number of columns in x.
Extracts a predicate from a predicate.
Compute the rank of a shape.
Determines if the given scale is a diagonal.
Compute the dimensions of the layer.
Evaluate non-negative integers.
Try to get a static value.
Determine if a given dtype is unsigned.
Determine if the given dtype is signed.
Returns the largest integer value of a dtype.
Return the largest integer value of a dtype.
Determine if a dtype is an integer.
Generate a random seed.
Returns the dimension of the dimension.
Ensure that the first dimension is valid.
Verify that the given permission is valid.
Returns the shape of the event.
Returns the dimensions of a tensor.
Build a backward step from the state model.
Compute the transition matrix for the given filter.
Propagate the mean of the mean.
Propagate covariance matrix.
Compute the joint mean of the joint step.
Compute the covariance matrix for each joint step.
Convert latent variables to latent variables.
Returns the log-normalization of the log-likelihood.
Returns the mode of the model.
Rotate the mean of the vector.
Sample from a 3D distribution.
Return a copy of a function.
Removes all keys from a dictionary.
Replace all dicts in dict.
Returns samples from the distribution.
Returns ``True`` if ``x`` is a namedtuple.
Choose a type from the given arguments.
Try to call the function and return the result.
Check that the shape is valid.
Returns True if the converged is set.
Update the position of the state.
Check convergence convergence.
Convert a value to a Tensor.
Calculate the harmonic number.
Extracts field from kernel results.
Returns the variance scaling term.
Returns a TensorFluent for the given condition.
Determine whether the value is finite.
Returns the bootstrap results.
Generate resolver for resolver.
Creates an exponential density for a feature.
Initialize the length of the parameters.
Determine the likelihood of a class.
Read image from filepath.
Downloads all sprites from a zip file.
Creates a character character.
Create a sequence of frames.
Creates a random sequence.
Flatten a list of kernels.
Flatten a list of kernels into a list of multiplicity.
Build and return random samples.
Append the dimensions of the x axis.
Make a list of non-negative variables.
Sort tensor of tensor.
Assert that x and y dimensions are not valid.
Gather a batch of vectors.
Convert a sequence of samples into a single event.
Returns a list of inputs for the given invocian.
Transpose a matplotlib matrix.
Calculate the sum of dimensions of x.
Retrieve the common dtype of a list of values.
Returns the initial optimizer.
Mask Pd-Dimensional mask.
Retrieves the initial arguments for the given objective function.
Find the best value of a population.
Determine whether the value is converged.
Ensure that a tensor is a list or tuple.
Convert to Tensor.
Builds an image from training dataset.
Plot images of images.
Convert a list of tokens into a string.
Compute the latent layer.
Compute the activation matrix.
Calculate the integral of the transform.
Calculate the inverse of the inverse transform.
Convert a constraint to a boolean.
Returns a sparse block of sparse matrix.
Check that a matrix is valid.
Generate slices of two blocks.
Generate a masked mask.
Create an array of input order.
This function creates a list of kwans for the given degrees.
Create a zero-dimensional zero-dimensional matrix.
Compute the weights for the weights of the weights.
Builds the model for the model.
Builds a transition matrix for the given number of periods.
Builds an alarm signal for the given time series.
Calculate the loss signal for a particular signal.
Ensure that the observation points at the given time point.
Add a new value to the chain.
Sets the value for the given checkpoint.
Sets the gradient of the gradient.
Optimize the value of the model.
Set training summary for training.
Sets the value of the value.
Set training data for training.
Downloads a text file from a text file.
Retrieve the genome VCF file.
Compiles the value of the optimizer.
Evaluate the RDD.
Predict features from X.
Retrieve MNIST records from a dataset.
Preprocess the MNIST dataset.
Determine the end of the end of the end point.
Validate the optimizer.
Return the value of the file.
Calls the GDL function with the given name.
Convert an RDD to Java object.
Convert a Python object to a Python object.
Get activation layer by name.
Returns the label of the field.
Read and return a Pandas DataFrame.
Write a file to disk.
Returns the value of the image.
Returns the image of the given float key.
Returns the label of the field.
Returns the predicted value for the given key.
Predict the model of the model.
Transform the data into a GDL file.
Save a keraset to disk.
Build a Keras model from Keras.
Predict the class of data.
Returns a list of weights.
Train the value of the model.
Load a layer from a file.
Load a Keras model from a JSON file.
Creates a new criterion.
Load weights from a JSON file.
Load images from an image.
Build a Keras model from Keras.
Returns the shape of the input value.
Returns the shape of the output of the output.
Returns the MNIST coordinates of a given data type.
Read data from a dataset.
Returns the classpath path to the GDL file.
Determine if the spark version is less than spark.
Export a checkpoint to a dictionary.
Save a variable to a variable.
Expand the given units of units.
Simple simple attention layer.
Compute the attention matrix for the given state.
Get the log file.
Log a message to the log file.
Compute the summary of the gradient of the gradient.
Read data from config file.
Interactively interact with an agent.
Convert labels to one or more labels.
Convert probabilities to 1-hot labels.
Create a session session.
Load the network from the network.
Returns the evolution of the model.
Updates the graph of the graph.
Round a F1-1-1-1 score.
Convert a word to a string.
Drop out a noisy variates.
Build the network layer.
Build basic network layer.
Train model on the model.
Predicts a batch of objects.
Convert a list of sentences into a dictionary.
Convert a list of tags to a numpy array.
Calculate the probability of a sentence.
Verify that the URL is a valid URL.
Extracts a list of certificates from a certificate.
Verify that the request is signed.
Verify that a signature is valid.
Return a JSON representation of the model.
Returns a list of all the botbot classes.
Returns a list of tuples of telegram.
Return a list of all actions.
Calculate accuracy. Args: y__true: A list of predicted samples
Returns the accuracy of the accuracy.
Reads data from the data file.
Makes a hello agent agent.
Convert an array to a single value.
Convert a list of metrics to a dict.
Loads the saved state of the model.
Save the model to disk.
Retrieves the train operation.
Searches for the given word.
Start the timer.
Handles incoming request.
Execute the agent.
Generate a response from the response template.
Handles the intent request.
Handles launch event.
Called when a request is supported.
Prints the cycle of the cycle.
Convert a list of loss losses to a GPL loss.
Build a model from the config file.
Interactively interact with the model.
Predict a model from a stream.
Read input file and return as text.
Returns a callable object from a string.
Get a metric by name.
Convert a label string to an integer.
Calculate the best value for the given values.
Encodes a list of tokens.
Read requirements from requirements file.
Calculate the log loss of y.
Return details about the item.
Makes an ECC agent and returns it.
Entry point for application server.
Downloads a file from a source and returns the path.
Unpack a file into a tar.
Recursively update a dictionary of dictionaries.
Convert a URL to a path.
Add a query parameter to a URL.
Return a dictionary of the audio data.
Serializes the control to JSON.
Returns the bot framework action.
Serializes the control to JSON.
Builds the botbot bot framework.
Calculate the sum of samples.
Calculates the recall of a prediction.
Check for GPU devices.
Parses a config value into a dictionary.
Parse configuration file.
Expand a path to a path.
Process the input queue.
Remove a conversation from the chat.
Refresh the validates_certificate_certs.
Verify the request signature.
Handles a request from the server.
Returns a class from a string.
Returns the model class for the given name.
Get the GML path for the model.
Creates a GloModel from a model.
Initialize a dict from a dictionary.
Send a command to the server.
Determine if the server is running.
Lists all the jobs in the cluster.
List all time zones.
Fills all properties from another object.
Starts a test function.
Retrieve summary of a column.
Delete a frame from the server.
Returns a list of models for a given algorithm.
Validate model parameters.
Compute metrics for a given frame.
Delete a model from the server.
Runs all instances in the cloud.
Terminate all instances.
Stop all instances.
Start a new instances.
Rebuild all instances of the specified region.
Wait for a list of SSH servers.
Returns the full name of a function.
Returns the signature of a function.
Wrap text into a string.
Joins the job and returns the result.
Train the training model.
Returns a dictionary of parameters for this instance.
Called when the signal is running.
Delete the output directory.
Remove a sandbox from the sandbox.
Searches the port from the server.
Gathers the size of the stream.
Stop the child process.
Stop all nodes.
Return the IP address of the node.
Returns the port of the node.
Determine the length of the frame.
Compute mean squared error.
Average mean squared error.
Calculate median error.
Compute the variance of a hazard.
Assert that a variable is a type of type.
Assert that the value matches a string.
Assert that the condition evaluates to `val`.
Check whether a variable is a type of type.
Returns the name of the given type.
Check if a variable is valid.
Determine if a variable is a string.
Loads the configuration file.
Read config file and parse config file.
Generator that returns the path of the log files.
Stores the progress bar.
Calculate model parameters.
Calculate the progress time of the progress.
Guess the next poll interval.
Compute the progress at the end of the time point at the time point.
Calculate the time of the progress at x.
Write text to terminal.
Compute the size of the widget.
Retrieves the number of terminal size.
Set the encoding of the file.
Compute the encoding of a frame.
Refresh the frame.
Return the type of a column.
Print summary of the screen.
Print summary about the frame.
Returns the first row of rows in rows.
Multiply the h2h2h2.
Return a list of all levels in this frame.
Return the number of levels in the tree.
Set the level of this frame.
Set the level of h2h2Frame.
Renames the table.
Sets the names of the expression.
Set the name of a column.
Determines whether the item is in the list of items.
Generate a column of kfolds.
Returns a single column of k-fold-fold-folded column.
Print the structure of the structure.
Removes a column from the hierarchy.
Concatenate a sequence of frames.
Create a H2Frame from a dataframe.
Binds a frame of dataframes to a new frame.
Group by ``by``.
Creates a blank frame with the specified method.
Return the value of a y-level variable.
Insert missing values from the frame.
Convert the topology to a factor.
Split a pattern into a string.
Return a new h2h2-like object.
The entropy of the table.
Return the number of characters in a text file.
Generate a table containing a table.
Return a subdomain with the given pattern.
Return a tuple of uefe.
Return a NaN-e.
Return the diff between two lines.
Create a h2-of-of-Frame object.
Gets the minute of the minute.
Runs the main function.
Apply `func` to `func`.
Parse text into code.
Parse a text file.
Move the cursor to the position.
Unpack the sequence of tokens.
Return list of centers.
Returns a list of centers of the model.
Send an API request to the API.
Check the version of h2.
Import a path from a pattern.
Parse setup and return a FrameFrame object.
Returns a copy of the given dataframe.
Gets the model for the given model.
Fetches grid from grid.
Gets a frame from a frame.
Download a polynomial from a model.
Download a CSV file from a CSV file.
Display a demo function.
Loads a Dataset from a path.
Calculate metrics for a given frame.
Upload a key to a file.
Check that a frame is valid.
Convert a number of bytes to bytes.
Normalize a slice.
Check if a slice is normalized.
Join the event to the future.
Recursively reconstruct features from a test data.
Print summary statistics.
Display statistics about the model.
Returns the hypervisor parameters for the model.
Return dictionary of model parameters.
Given a test dataframe, return the matrix of the simulations.
Plot the plot of the model.
Translates the name of the given name.
Removes text from text.
Main entry point for testing.
Close the session.
Return the session id.
Start logging for logging.
Convert data to JSON.
Prepare file payload.
Log a start transaction.
Log the end of the transaction.
Log message to file.
Prints a message.
Gets the automation for the given project name.
Download a polynomial from the master.
Download a single sample from the leader model.
Compute the mean of the model.
Transform the mean and variance of samples.
Transform data to the mean.
Extracts a string from a string.
Finds the node name of a node.
Determine if the build timeout is running.
Determine if the build failed.
Find the build id of the build file.
Extract the job url from a job.
Gather the Java JWT message.
Save the test dictionary.
Update the summary file.
Write content to file.
Write JML message to JSON file.
Load messages from the jar file.
Normalize enum constants.
Find synonyms for a word.
Poll the status of the job.
Writes the current API to a file.
Fits the frame from the frame.
Return default params.
Returns the actual parameters for the query.
Extracts a frame from the test data.
Gets the scoring history of the model.
Show the status of the model.
Computes the variance of the model.
Returns the degrees of freedom degrees of freedom.
Returns a dictionary of all coefficients in the model.
Download a file from a directory.
Download and download a mozo file.
Save the model to disk.
Check that the targets are equal.
Returns a list of cross validation models.
Waits for a keypress.
Returns a pandas dataframe.
Prints the table of cells.
Try to find a jar from a path.
Yields the path of the jar.
Create a csv writer.
Convert a directory path to URI.
Discovers all modules in the directory.
Write the API docs to the API.
Return a list of cell values.
Load the dictionary from the JSON file.
Add a new message to the next message.
Save the dictionary to JSON file.
Print a dictionary of Java configuration files.
Parse command line arguments.
Print usage information about usage.
Find all files in a root directory.
Given a filename, find the magic number of characters in a file.
Parse the text file.
Transform a `DataFrame` to a H2Frame.
Summarize all failed tests.
Extracts all samples from the simulation.
Plot metrics for metrics.
Determine whether this is available.
Trimulate the last test data from the given month.
Return all endpoint groups.
Update the site forward on the site.
Return json data.
Gets comments for a user.
Retrieve credentials from a secret file.
Determine whether the user is a media.
Determine whether a hash is a media tag.
Check if a user is not a bot.
Read a list of strings from a file.
Schedule the message for the message.
Determine if the message is alive.
Guess the service info.
Returns the URI of the request.
Creates a tunnel connection.
Perform a request on the server.
Gets the authorization server server.
Validate the request URI.
Returns a CLI profile.
Open a win32 request.
Sets the timeout of the client.
Sets the request header.
Get the response headers.
Send a request to the server.
Gets the status of the process.
Returns the status of the system.
Return the response body.
Set client certificate certificate.
Send a request to the server.
Add a request header.
Send a request to the server.
Returns the response body of the HTTP request.
Get a human-readable name from a string.
Returns the serialization name for the given element name.
Extracts properties from a XML node.
Get all children of a node.
Finds all namespaces in a child.
Convert XML string to namespace namespace.
Parses the service from XML string.
Parse a namespace response from a XML string.
Convert an XML string to a Metadata object.
Update a new update.
Build a package from a repository.
Replaces a word with the given word variations.
Gets the storage accounts for the given service name.
Get storage accounts for a service account.
Registers a storage account.
Delete a storage account.
Check if storage account name is available.
Gets the properties of a service.
Deletes a given service.
Delete a deployment from a service.
Switches a deployment to a specific deployment.
Update the status of a deployment.
Walk upgrade and upgrade upgrade upgrades.
Rebuild a role by name.
Deletes roles from a service.
Check if a service name is available.
List all certificates in a service.
Gets the certificate for a specific service.
Adds a certificate to the account.
Deletes a certificate certificate.
Gets the certificate certificate for the given thumb.
Adds a management certificate to the subscription.
Deletes a specific certificate.
Gets the properties of the affinity group.
Creates a new affinity group.
Deletes the affinity group.
List all subscriptions in a subscription.
Delete reserved IP address.
Associate a reserved IP address.
Associate a reserved IP address.
Get reserved IP address.
Get the role of a role.
Deletes a role from a service.
Start a new role.
Start a new role.
Restart a role by name.
Adds a DNS server to the server.
Update a DNS server.
Delete a DNS server.
List all versions of a resource extension.
Removes a VM from a VM image.
Share an image with permission.
Deletes an image from the VM.
List VM images.
Deletes an OS image.
Retrieves the data of the data associated with the given service.
Delete a data disk from a service.
Update a disk on disk.
Delete a disk from disk.
Builds a receiver.
Initialize a connection string.
List all subscriptions in a topic.
Parses an asynchronous request and returns the result.
Perform a GET request.
Perform a PUT request.
Gets the status of an operation.
Add the management headers to the request.
Builds a package from Travis environment.
Gets all regions for this service.
List all namespace names.
Gets the namespace for the given name.
Creates a new namespace.
Deletes a namespace.
Determine if a namespace is available.
List all topics for a given name.
Lists all notifications of a notification.
List all relay services.
Get metrics for a named queue.
Get metrics for a topic.
Gets the metrics for a given hub.
Gets the metrics for a given relay.
Create an environment for the environment.
Creates a new environment with the given packages.
Create a new server.
Sets the password for the server.
Lists the quota for the server.
Delete a firewall rule.
Lists the firewall rules for a given server.
Lists the volumes of a service.
Delete a database from the server.
List all databases in the database.
Get current session state.
Set session state.
Validate a challenge token.
Called when an error occurs.
Create a new queue.
Delete a queue from the queue.
Gets the queue for the given queue name.
Create a new topic.
Get information about the topic.
Create a new rule.
Get a specific rule for a subscription.
List rules for a subscription.
Create a new subscription.
Get a subscription for a topic.
List all subscribed subscriptions.
Send a message to the broker.
Unlock a subscription message.
Send a message to the queue.
Unlocks a message from the queue.
Receive a message from the queue.
Receive a message from a subscription.
Creates a new event.
Updates an event on the hub.
Gets an event from the hub.
Send an event to the hub.
Add the service headers to the service.
Returns the authorization token for the request.
Returns True if token is expired.
Retrieves an OAuth token.
Updates the request path with query parameters.
Delete message from queue.
Unlocks the message from the queue.
Renew the message lock.
Add headers to request headers.
Return batch body as JSON.
Raise exception if the error occurs.
Handle redirects.
Sets the profile for this profile.
Delete a queue by name.
Delete a topic from the broker.
Initialize a connection string.
Returns the properties of the entity.
Determine if the lock is expired.
Process results from the queue queue.
Add a new task to the collection.
Builds a dictionary from the config file.
Convert a message to a message.
Convert an etree element to a rule.
Convert an enqueue element to a queue.
Convert an ETree element to a topic.
Convert an etree element to a subscription.
Parses the response list and returns a list of results.
Extracts properties from an XML element.
List all queues.
List all topics in the service.
Gets the site for a given website.
Deletes a site from the website.
Updates the site with the given state.
Restart a site.
Gets historical metrics for a given website.
Gets the metric definitions for a website.
Gets the XML profile for a given website.
Gets the user profile for a particular website.
Creates a new cloud service.
Check the name of a job.
Get a job collection for a given collection.
Cancel scheduled messages.
Reconnect messages from the queue.
Reads a certificate from a pub_settings file.
Load all cookies from the session.
Return the width of a terminal.
Returns the cut prefix for the given value.
Prints an error message.
Format a file size.
Format a time in seconds.
Generate progress bar text.
Generator for writing progress bar.
Iterate over the number of segments.
Iterate over all segments.
Wait for the given time to be done.
Add a new segment to the queue.
Queue an item from the queue.
Determine the request parameters.
Extracts the non-empty route from the request.
Search for a vid.
Parse a JSON string into a JSON string.
Parse XML string into XML.
Parse the given data into a dictionary.
Search for a list of dictionaries.
Iterate over all tags in HTML tag.
Determines the JSON encoding of a sample.
Parses the given resource and returns it.
Parses an XML document and returns the result object.
Parses a dictionary of cookies.
Parses the headers of the response.
Parse the query parameters.
Return the message as a string.
Create a new log record.
Login to the server.
Load a plugin from the stack.
Update a query from a URL.
Iterate over a stream of chunks.
Iterate over all required arguments.
Checks to see if the file is a file.
Create an output output file.
Create a http server.
Iterate over http requests.
Outputs a stream to a stream.
Open a stream and return the stream.
Outputs a stream of streams to a stream.
Read stream from stream.
Process a stream of streams.
Fetch streams from plugin.
Fetch streams from a plugin.
Resolve a stream name.
Print all plugins.
Authenticate using Twitch API.
Load plugins from a directory.
Setup http session.
Initialize plugins.
Log the current version of the system.
Get stream id from text.
Extracts an audio stream from a text string.
Retrieves the HTTP option for the given key.
Sets the value of the plugin.
Get the value for a plugin.
Resolve a URL from a URL.
Load plugins from a directory.
Convert a value to a number of minutes.
Given a response, find the URL, return the URL for the URL.
Parses the given data into a Python module.
Given a command string, return the supported player.
Extract stream ID from HTML.
Returns a list of stream info.
Login to the server.
Add a function to the map.
Make an API call to the API.
Start the session.
Gets information about a media.
Creates a new API server.
Format a character as a string.
Read bytes from the stream.
Return the value of this code.
Return the explanation of the code.
Set the length of the decoder.
Set the length of the length of the length.
Read a tuple from the stream.
Return the explanation of the given index.
Returns the value of the given index.
Return the span of the given index.
Return the value of the given index.
Return the memonic for the given index.
Return the Memonic string for the given index.
Compile the actions table.
Evaluate action.
Return hexadecimal string representation of the stream.
Read the block length.
Determines whether the stream is uncompressed.
Add a number of block types.
Convert a list of values into an image.
Reads a list of prefixes.
Patch a dataset.
Add virtual vectors to vehicle.
Auxiliary command line interface.
Open multiple files in a list of files.
Create a table from a database.
Create a Dataset from a table.
Create a new array from scalar.
Create a CSV from a CSV file.
Create a server server.
Generate anOVA file.
Concatenate a sequence of dfs.
Returns a virtual range of columns.
Opens a VEX dataset.
Evaluate the given expression in the dataset.
Returns a set of all columns that have been set.
Sorts the score of the score.
Wait for the event loop.
Open a document.
Write a file to a file.
Split arrays into two arrays.
Calculate the median distribution of a given expression.
Plot a 2D plot.
Plot a 3D plot.
Determines the dtype of the column.
Returns the path to the private directory.
Remove virtual machine metadata.
Write virtual meta data to disk.
Write meta data to disk.
Sets the variable for the given expression.
Evaluate a variable.
Evaluate the selection for the given name.
Return a dictionary representation of the model.
Returns a copy of the DataFrame with the given columns.
Convert a list of arrow names to an arrow table.
Convert a table to a Table object.
Add a column to the table.
Renames a column by name.
Adds cartesian coordinates to cartesian coordinates.
Add virtual vectors to cartesian coordinates.
Add virtual vectors to cartesian coordinates.
Adds virtual vectors at x, y, y, x, y, y, y,
Add virtual vectors to cartesian coordinates.
Add virtual columns to cartesian coordinates.
Add a virtual column to the database.
Delete a virtual column.
Adds a variable to the database.
Remove a variable from the system.
Returns the first n elements of the sequence.
Prints the top-level HTML table and print it.
catenate two lines.
Set the next row.
Trim a DataFrame from a DataFrame.
Returns a new DataFrame with the given indices.
Extract the indices from the collection.
Undo the selected selection.
Move the history of the selected selection.
Determine if the given selection should be played.
Selects a rectangle. Args: x: x (int): x, y,
Select a circle from a circle.
Create a new selection for the given name.
Finds a valid column name.
Generate the graphvizviz representation of the column.
Convert a column to a category.
Encode a column name.
Returns a new DataFrame instance.
Return the length of the array.
Hashes the columns with the given other columns.
Concatenate the contents of another object.
Add data to the grid.
Patch a dataframe.
Fill NaNs with NaN values.
Get the auto-type of an array.
Return a numpy array as a numpy array.
Write properties to file.
Write comment to file.
Write a property to file.
Iterate over a file.
Print the version of the system.
Renames a deprecated value.
Set the fftlib library.
Plot a track of audio tracks.
Adjusting the tuning for a given input file.
Convert a list of frequencies to melithm.
Convert a list of meters to Hz.
Generate a frequency frequency spectrum.
Helper function to filter coefficients.
Truncate the array of rows from the given CNV.
Calculate the CFT response.
Calculate the decay count of a signal.
Perform an exponential sampling of a signal.
Generate random uniform state.
Sets the image of the current image.
Checks that the given axes is an axis.
Helper function for scaling scales.
Calculate the FFT frequency for a given number.
Calculate the Melhe lattice mesh for a given number.
Convert a number of timeseries to frequency units.
Calculate coordinates of a chromosome.
Calculate the frame time of a frame.
Stretch time stretch of time series.
Compute heartbeat beats for a given audio file.
Helper function for filtering nodes in the network.
Calculate the bandwidth of a window.
Fill window with max_squares.
Calculate Jaccard between two sets.
Match intervals between intervals.
Match intervals between intervals.
Load audio from audio file.
Convert audio to mono.
Get all files in a directory.
Stretch a demo file.
Parse command line arguments.
Simulate the HPESS model.
Track the beats track of a given onset.
Calculate the playback score for a given period.
Calculate the playback track for a given period.
Calculate the last beat timestamps.
Detect onset of onset.
Validate an integer.
Reads an image from the buffer.
Gets the frame from the frame.
Convert frames to frames.
Create a progress bar.
Flip an image from an image.
Rotate an image from an image.
Clip bboxes from bboxes.
Scales a bounding box.
Compute padding of an image.
Convert an image into a multi-dimensional array.
Helper function to scale a size.
Resize an image from an image.
Resize image to image.
Registers a file handler.
Convert a priority value to a priority value.
Determine an array of numpy arrays.
Visualize an image.
Determine the flow of a flow.
Load a checkpoint from a file.
Convert a dictionary of weights to cpu_dict.
Save a checkpoint to disk.
Initialize an optimizer object.
Initialize the logger.
Return the current learning rate for the optimizer.
Registers a hook.
Run the simulation step.
Registers training hooks.
Cut a video from a given file.
Concatenate multiple video files.
Read a list of items from a file.
Read a dictionary from a file.
Compute convolution of two planes.
Read an image from a file or file.
Decode an ANTsImage to an image.
Write an image to disk.
Convert an image to a background color.
Convert an ANTsR to a background color.
Cast an iterable to an iterable.
Determine whether a sequence is a sequence of items.
Slice a list of lists.
Calculate the average value of the history.
Plot a sequence of devices.
Convert a color value to a tuple.
Returns the time of the given timer.
Start the event loop.
Return the number of time in seconds.
Returns the number of time in seconds.
Visualize a flow.
Make a color wheel from a palette of bins.
Compute accuracy of a target.
Plots kwargs from input arrays.
Fetch and return the response.
Return JSON response as JSON.
Return the response as text.
Handle a callback.
Perform multiple requests.
Make a request and return the response.
Start the master worker.
Normalize a task v2 output.
Returns the name of the wheel distribution.
Returns the archive name of the archive.
Add requirements to the metadata file.
Create an activity message.
Convert a list of actions to a dictionary.
Create an attachment.
Lists a list of attachments.
Create an attachment for a given content type.
Set the telemetry client.
Reads and returns a dictionary of keys.
Write changes to the server.
Deletes items from the collection.
Create a storeitem from the result store.
Creates a dictionary of attributes.
Sanitize a string.
Create a db connection and return it.
Gets the database from the database.
Returns the container name for the container.
Fills the query results.
Return a ConversationReference object for a given activity.
Returns the name of the step.
Determine if the given channel is supported.
Determines whether the card can be played.
Return the channel id of the context.
Determine whether an emulator token is a valid token.
Convert a CardCard to a Card object.
Set the control instruction.
Return a copy of this object.
Convert string to string.
Generate the query string.
Run the circuit on the circuit.
Perform a step on the step.
Return a list of all the passwds.
Dump all the flow controllers.
Factory method that returns a FlowController class.
Compute the u_base of the equation.
Given a gate, return the parameters of the quadratic parameter.
Convert a single gate to a matrix.
Convert a circuit circuit circuit to a DAG.
Evaluate the Exponential fit.
Evaluate the fit function.
Plot the convergence matrix.
Compute the mean of the input data.
Plot the Raster distribution.
Compose two angles.
Convert y and y zeros to zeros.
Validate input state.
Trim a background image.
Determines the gate of the gate.
Compute the layout of the graph.
Creates a new barrier.
Process node identifier.
Process a node.
Process a node.
Process a node.
Process a condition statement.
Creates a DAG op.
Return the duration of the channel.
Return the start time of the channel.
Return the time of the channel.
Iterate over all instructions in the schedule.
Dump data to a dictionary.
Load extra data from a list of dictionaries.
Validate an instance of the model.
Serialize the model to a dictionary.
Load a model from a dictionary.
Evaluate the Hilbert transform.
Split an array into imaginary space.
Computes the outer product of two vectors.
Calculate the concatenation of a state.
Calculate entropy of a state.
Calculate mutual information about a state.
Compute the entropy of a state.
Evaluate the EOF of the rho.
Flatten a schedule by name.
Shift a schedule from a schedule.
Insert a schedule into a schedule.
Add a schedule to the schedule.
Evaluate the Pauli gate.
Return the status of the backend.
Start the simulation.
Returns a string representing the time of the elapsed time.
Disassemble the circuit from an experiment object.
Calculate hamming distance between two strings.
Creates a rotation matrix from a rotation angle.
Creates a Quaternion from a list of angles.
Normalize the quaternion matrix.
Convert the vector to a matrix.
Convert the equation to z-zuler.
Convert data to a dictionary.
Check if value is valid.
Check that the range is valid.
Determine if a matrix is a square matrix.
Determine if a matrix is a diagonal matrix.
Determine whether the operation is a symmetric matrix.
Determine if a matrix is a matrix.
Determine whether a matrix is a positive definite matrix.
Determine whether a matrix is an identity matrix.
Determine whether a matrix is a triangular matrix.
Convert a string to a choice.
Compute the superop operation.
Convert a string to a Kraus.
Convert a sequence of input data to a single sample.
Convert a sequence of data into a PM operation.
Convert a sequence of input data to stderr.
Convert a string to operator.
Convert an operator to a matrix.
Convert a tensor to an operator.
Convert a sequence of input data to a choice.
Convert a sequence of data to a superop.
Compute the polynomial of a Kraus.
Convert a list of values to a matrix.
Convert a sequence of values to Kraus.
Convert a sequence of samples to a choice.
Convert a sequence of Kraus coefficients to stderr.
Compute the superop operator for the given data.
Convert a quadrilateral to a Pauli.
Convert a list of qubits to chi.
r"""Compute the matrix of two vectors.
Transform a Pauli matrix into a matrix.
Ensure that the number of qubits are required.
Hide the labels of the ticker.
Set the labels for the given convention.
Clear all points.
Add vectors to the vector.
Render the plot of the plot.
Plot the front of the plane.
Show the plot.
Returns the top level of the layer.
Returns the rendered part of the layer.
Gets the top of the bot.
Return the length of the topology.
Return a list of labels for a instruction.
Returns a label for a box.
Return the LaTeX representation of this node.
Add deprecated warnings.
Return information about virtual machine.
Determine if a hostname is established.
Check the status of a job.
Convert a number of times to constant.
Compute the square matrix.
r"""Compute the quadratic triangle.
Returns the cosine cosine of the given amplitude.
Derivative of Gaussian Gaussian variates.
Generate Gaussian Gaussian Gaussian.
Returns the default pass manager.
Returns a default pass manager.
Determine if the given register is a quantum.
Return a copy of this instance.
Return the inverse of this circuit.
Append an instruction to the stack.
Check for duplicate qubits.
Checks for qargs.
Check for Cargs.
Checks that the QRegisters have the same registers.
Return a string representation of the program.
The total number of gates.
Return the total width of all registers.
Return the total number of instructions.
Return a copy of this circuit.
Binds a value to the instruction.
Map gates to free gates.
Calculate the distance between gates.
Gets the number of elements in the given step.
Create a new circuit from the given source.
Transform the layout of the gate.
Convert a graph to a list of swap operations.
Compute the layout of the graph.
Adds a physical bit to the graph.
Add an edge to the graph.
Create a subgraph from a list of nodes.
Return the physical physical physical physical bits.
Determine if the graph is connected.
Compute the distance matrix.
Calculate the distance between two bits.
Upper around the 2-bit vector.
The inverse of this instruction.
Evaluate the gate.
Called by the first instruction.
Add a callback to the queue.
Dispatch a single event.
Unsubscribe a callback.
Publish an event to the broker.
Initialize the quantum register.
Define the Quantum circuit.
Compute the quantum circuit.
Given a pair of complex coordinates, return a list of angles.
Multipulate the quadratic circuit.
Returns True if value is a virtual value.
Return a copy of this layout.
Combine two shapes into a map.
This interface is used to add a ctlx.
Insert a schedule at start time.
Checks if the name of the given object.
Convert gates to indices.
Generate a new mesh.
Group Pauli gates.
Create a QK from a label.
Initialize the QK instance.
Compute the Pauli product of p2.
Convert the QuantumFlow circuit into an operator.
Convert the circuit into an instruction.
Updates the z-array of the model.
Updates the x values of x.
Append the Pauli of Pauli.
Delete all qubits.
Generate random variates.
Creates a Pauli Pauli matrix.
Calculate the measure of the current state.
Add samples to memory.
Adds the program to the program.
Add a program to the program.
Validate the initial state vector.
Initialize the state vector.
Get the state of the state machine.
Validate that the simulation is valid.
Run a single job.
Validate that the configuration is valid.
Checks that the initial state is required for initialization.
Initialize the Hilbert matrix.
Return the unitary matrix.
Run a single job.
Validate the configuration.
Determine if an object is a bit integer.
Generate the layout of the graph.
Determine if the interval overlap.
Return a new interval.
Return a new `Time` from the given time.
Returns the start time of the given channels.
Determine the stop time of a channel.
Determine if the given time is merged.
Merge multiple times into a new one.
Return a copy of the time series.
Report an issue to the report.
Plot the state of a Pauli state.
Return the RZ gate.
Add a change to the cache.
Create a program graph from the program.
Return the next edge of the program.
Selects the best gate.
Selects the best available best bitbits.
Return a list of instructions.
Sets the inverse of this gate.
Set qs for gate.
Called by the gates.
Determine if the matrix is a triangular matrix.
Return the product of the matrix.
Return a copy of this layer.
Return the power of the matrix.
Return the shape of this layer.
Convert an instruction to an operator.
Updates the adjacency matrix using the swap layer.
Split a bitstring into a string.
Convert memory to a list of memory.
Convert memory into memory.
Convert memory levels to a list of memory.
Convert counts to a dictionary.
Formats a state vector into a complex vector.
Convert a list of dictionaries to a matrix.
Submit the job to the future.
Return the status of the future.
Determine if the given linear frequency is included.
Generator that shows the monochochochron model.
Runs the QR gate.
Choose a random number of k, and return the chosen value.
Return the lexic index of a list.
Returns a list of unique hardware names that are unique.
Return the opcode.
Generate a sample of a constant.
Generate a sample from the given duration.
Return a square of samples.
Sample a signal from a signal.
Generate a sample of a triangle.
Return the cosine of the given duration.
Return a sample from the given duration.
Generate a sample from the given duration.
Return the derivative of the gaussian.
Serialize this node to a string.
Return backend instance.
Removes all named nodes from the named opname.
Adds a quantum register to the graph.
Add a register to the register.
Add a wire graph to the network.
Checks if the given name is a valid function.
Return a list of bits in a condition.
Add an op to the network.
Apply an op to the graph.
Check validity of a wire map.
Map a condition to a condition.
Extend the backregisters with the given dag.
Check that a list of wires are valid.
Make a dictionary of predicates.
Returns a dictionary with the results of the predicate.
Return the topology of the graph.
Iterate over all edges in the network.
Returns a list of nodes that match the given op.
Return a list of gates.
Returns a list of named nodes matching the given names.
returns two qs.
Return the list of predecessors of a node.
Return the list of predecessors of a node.
Return all ancestors of a node.
Return the list of successors of a node.
Removes a node from the graph.
Remove ancestors from node.
Remove all descendants of the node.
Removes all ancestors from node.
Remove all nodes from a node.
Generator that yields all serial layers.
Iterate over multiple multigraph layers.
Iterate over all nodes in a wire.
Return the number of operations in the topology.
Return summary statistics.
Creates a TOML structure from a basis.
Calculate Pauli gates.
Calculate the information of a problem.
Computes the projection of the basis.
Computes the linear inverse of the given frequencies.
Calculate the Poisson algorithm for the given radius.
Calculate the weights of a problem.
Perform measurement gate.
Check for text messages.
Monitor a job.
Simplification of u2-1-1.
Runs all virtual gates.
Builds a job history.
Convert angle to cuCenter.
Build a quantum circuit circuit.
Compute the transile program.
Returns the drive of the vehicle.
Return the control channel.
Returns the measure of the current state.
Return the current channel.
Compute the input state at the given circ.
Removes the loggers from the queue.
Plot state machine state.
Parses input data.
Remove the next instruction from the stack.
Push a file to the stack.
Returns the bound method for the given instruction.
Convert an instruction to a JOBJECT.
Convert an instruction to a frame.
Convert an instruction to a persistent value.
Convert a drive instruction to a drive.
Convert a snapshot to a snapshot.
Updates the annotated annotation annotations.
Convert a graph into circuit circuit circuit circuit.
Make a dictionary of observable observations.
Update the symbol at the given object.
Verify that the symbol has been declared.
Verify that the expression is valid.
Verify that the argument is a valid gate.
Raise an exception if the given type is valid.
Verify a list of objects.
Return the position of a token.
Validate debug mode.
Parse the given data.
Parse the given data.
Parse the QAM file.
Calculate CRZ gate.
Return the basis state of the basis.
Translates the density of a state.
Calculate the purity of a state.
Iterate over all gates.
Split the graph into the graph.
Get a backend backend.
Return the shape of the input dimension.
Given a bit labels, calculate the maximum number of registers.
Truncate a float.
Generate a LaTeX file.
Determines the dimensions of the layer.
Gets the page page of the page.
Load schema from file.
Load schema and validate schema.
Generate a random unitary matrix.
Generate random variates.
Generate a random density matrix.
Generate a random density matrix.
Return list of call names.
Return the power of the matrix.
Compute the matrix of two components.
Convert an instruction to a superop instruction.
Iterate over the graph.
Run the quadratic algorithm.
Define the quantum gate.
Checks if the given value is a valid type.
Check if value is valid.
Sets the value of the parameter.
Validate the rtolator.
Reset the input dimensions.
Return the dimension of the input qargs.
Determine the dimensions of qargs.
Returns a copy of the model.
Return the power of the Q.
Determine the dimensions of the given dimensions.
Validate and deserialize errors.
Validate that the value is valid.
Check that the given value is valid.
Compute the derivative of a function.
Return the inverse of the snapshot.
Set the label of this instance.
Determine if the matrix is a unitary.
Convert this matrix into an operator.
Convert the circuit into an instruction.
Initialize an operator.
Builds a string representing the time of the time series.
Check if tokens are valid.
Split a string into a list of tokens.
Parse a time string from a string.
Determine if a date is a valid date.
Translate a string to a string.
Parse string format and return a dictionary of date strings.
Given a string, return the error message.
Convert a string to an integer.
Compile the configuration file.
Get information about the stream.
Logs stderr to stderr.
Expand the time of a string.
Read the configuration file.
Reads the cache file.
Write cached options to disk.
Generate stderr file.
Create a step from a schedule.
Returns the value of the raster window.
Execute a command.
Decodes a list of monitors.
Generate points for a label.
Publish a new value to the core.
Counts the number of matched codes.
Stop the queue.
Reads the stderr file and feeds them to stderr.
Add additional options to the user.
Configures the config file.
Collect data from the queue.
Notify the aggregations of the event.
Determine the UDP port number.
Terminate the process.
Read stats from the stats file.
Construct a criterion from a criterion string.
Extracts the configuration from a file.
Create startup configuration file.
Check if disk is disk.
Check if memory is available.
Gets the right line of the widget.
Add a new info to the list.
Fill rectangle with width and padding.
Returns the length of a line.
Add an info to the screen.
Make a write request request.
Load plugins from plugin.
Returns the plugin that matches the given plugin class.
Returns all plugins that match a given plugin class.
Collects artifacts from file.
Add an artifact file to disk.
Create a temporary file name.
Load config files from a list of configurations.
Write configuration to disk.
Return a list of options for the given section.
Return a list of all sections in the config.
Decode statistics from a chunk of statistics.
Prepares the agent.
Read data from the agent.
Send all monitored data to the monitored state.
Determine if the configuration is configured.
Handles the data of the metric.
Subscribe to channels. Args: channels (list): The list of channels to subscribe to
Start the event loop.
Close the stream.
Send a request to the server.
Submit an order to the order.
Get the position of a symbol.
Returns a list of assets for the given status.
Validate a dictionary parameter.
Validate a dictionary parameter.
Construct an event handler.
Construct a log event handler.
Initialize a config file.
Get a pipeline from the pipeline.
Returns a list of all pipelines.
Get next event from process.
Execute a pipeline through the pipeline.
Waits for all processes in the queue.
Create a field for the given dag.
Build an Execution plan from the pipeline.
Return the solid name of the pipeline.
Builds a list of publish commands.
Add a new version to the git repository.
Takes a text line and returns it.
Download file from S3.
Uploads a file to S3.
A context manager that is bounding error.
Make a directory if it doesn't exist.
A context manager that creates a user context manager.
Creates a log file for the given run_config.
Determine whether the step is successful.
Determine whether the step is skipped.
Returns the transformed values for the step.
Returns the result of the step.
Determine if the dataset is valid.
Determine if the table is valid.
Convert a sequence of steps into a dictionary.
Returns a dictionary of connection parameters.
Create a new connection from the database.
Create a cursor from the database.
Close the connection.
Convert a model to a model object.
Convert value to list of model objects.
Create a form field.
Convert a value to a model object.
Add a queryset to the database.
Compute random variates.
Compute the number of frames.
Determine the optimal partition of the counts.
Calculate the C of two vectors.
Initialize the seed values.
Return the size of bytes in bytes.
Merge all the hashes into another.
Creates a union of multiple members.
Query the list of buckets.
Calculate the minimum hash of a given vector.
Remove a value from the cache.
Count the number of coefficients.
Merges the matrix into the matrix.
Clear all registers.
Calculate the probability of a set of predictions.
Compute the map with the given values.
Index all hash tables.
Query the list of kwargs.
Close all caches.
Extract user data from JSON.
Updates the social login process.
Select text from text.
Parse a scoped selector.
Parse the statement.
Parse the value of the container.
Advance the next token.
Parse the current scope.
Logs the state of the session.
Ensure that a function is a wrapped object.
Format value as string.
Clears all state variables.
Determine if the argument is a variable.
Get the arg spec for a function.
Get the positional arguments for a function.
Parse a config file.
Parse a string into a ConfigParser.
Iterate over nested values.
Iterate over the specified configuration.
Load constants from enum enum.
Returns a list of all matched matches.
Returns the first selector that matches the given selector.
Return a string representing a search query.
Parse the retry after the retry.
Validate the given value.
Return a dictionary representation of the property.
Set the value of the field.
Get a thing from the index.
Initialize the object.
Sets default headers.
Called when the request is running.
Get details about a thing.
Add a new thing to the server.
Remove action from a thing.
Start the server.
Return the description of the action.
Start the actor.
Called when the thing finished.
Return the description of the event.
Retrieves the IP address of the network.
Return list of IPv4 addresses.
Sets the value of the given value.
Notify external update update.
Return a dictionary representing the thing description.
Sets the href prefix for this resource.
Return the description of this object.
Returns the description of the action.
Returns a list of all event descriptions.
Add a property to this collection.
Removes a property from the collection.
Gets the value of a property.
Return a dictionary of properties.
Sets the value of a property.
Gets a specific action by name.
Add a new event to the queue.
Add an event to the queue.
Perform an action on the system.
Remove an action from the queue.
Add a new action to the database.
Remove a subscriber from the list.
Add a new event to the registry.
Remove a new event from the web server.
Notify a notification about subscribers.
Notify a notification.
Notify the event.
Add annotations to fields.
Update the database with the given fields.
Insert a new identifier.
Insert the model into the database.
Builds the database for the given rows.
Determine whether a field is a single field.
Called when a new model is created.
Event handler for deleting model.
Resolve a value to a dictionary.
Returns the SQL representation of the model.
Return a copy of the model.
Add a condition to the database.
Determine if a field is a hstore field.
Creates a new hdf store for the given field.
Renames a new hdf table.
Drops the hstore required for the given field.
Returns the required constraint name for a given field.
Create a SQL query for the index.
Determine the base backend base class.
Prepare the database.
Returns the value of the field.
Returns the form for the query.
Returns a SQL query.
Rewrite an INSERT statement.
Rewrite an INSERT statement into the database.
Rewrite a record to the database.
Returns the model field for the given name.
Returns the column name for the given field name.
Returns the value of the field.
Create a new hdf store for a given field.
Rename the table name.
Drops the hstore table for the given field.
Generate unique constraint name.
Iterate over unique keys from a field.
Add a new condition to the record.
Convert the query to SQL query.
Determine the threshold density of a table.
Compute the pooled sample variance of samples.
Compute the mean of two samples.
Determine whether the sample is significant.
Return the topological ordering of the tree.
Generate number of queens.
Selects a position from the board.
Draws a random game.
Remove benchmarks from benchmarks.
Expand benchmarks for benchmarks.
Initialize the benchmarks.
Returns the domain of the domain.
Fetch posts from a channel.
Iterate over all posts.
Retrieves a user from the account.
Fetch data from category.
Fetch feed from feed.
Setup command line arguments for backend.
Fetch bugs for a category.
Retrieves a list of bugs for a given date.
Retrieve comments for a bug.
History for a bug.
List attachments for a bug.
Fetch merged merge requests.
Retrieves a list of merges.
Gets a single file from the repository.
Get all versions of a given merge.
Gets the version of a single branch.
Gets notes for a specific item.
Return a list of emoticons.
Retrieves a list of notes.
Calculate the time of the rate.
Fetch all items from a repository.
Update the rate limit.
Setup command line parser.
Fetch messages from a category.
Extract metadata from an item.
Get the number of members of a conversation.
Returns information about the channel.
Retrieves a user from the account.
Setup command line parser.
Get the date of the datetime stored in the datetime.
Parse a CSV file.
Parses a list of bugs.
Logout out the user.
Retrieves the metadata for the bug.
Gets a list of bugs in the database.
Returns a list of bugs.
Gets the status of a bug.
Fetch events for given category.
Fetch events from a group.
Yield events from a group.
Get comments for a specific event.
Generator for pagination pages.
Fetch a page from a question.
Fetch comments for a question.
Builds a question from a page.
Gets all pages from the API.
Gets the html for a question.
Gets comments for a post.
Parse a question and return a dictionary.
Returns the number of pages in the page.
Parse the user info.
Fetch reviews for a category.
Parses the JSON data into a list of reviews.
Fetch reviews from the database.
Gets the most recent version of Gerriting.
Retrieve reviews for a particular item.
Gets the next group item from the server.
Execute a command from the archive.
Execute a command from the remote host.
Setup command line arguments.
Fetch an issue from GitHub API.
Fetch all attachments for an issue.
Fetch all issues from an issue.
Fetch activities from an issue.
Fetch user data from a user's user.
Gets a user from the server.
Gets the issue of an issue.
Gets a collection of issues in a collection.
Fetch all items from a path.
Iterate over all subscriptions in the group.
Find group id.
Perform a GET request.
Setup command line parser.
Returns a list of all backends of the given package.
Fetch metadata from archive.
Remove classified data from a dictionary.
Parses the given arguments.
Add command line arguments to the parser.
Add command line arguments to the archive.
Setup command line arguments for the command line.
Generate the JSON file.
Initialize the archive.
Gets the date of the datetime of the item.
Parses a message into a list of messages.
Fetch all messages from a list of mailboxes.
Copy a mbox to a temporary file.
Validate a message.
Convert message to dict.
Get a message from the file.
Fetch all items from a category.
Parses a git log file into a list of strings.
Returns the path to the git repository.
Setup command line parser.
Parses the stream and returns the result.
Clone a new repository.
Return the number of objects in the repository.
Determine if the repository is detached.
Update the repository.
Retrieve commits from the repository.
Read all commits from a packet.
Update the refsrs.
Discovers the git repository.
Update a repository.
Execute a command and return its output.
Reads stderr from the process.
Execute a command and return its output.
Fetch tweets from a category.
Setup command line parser.
Fetch items for category.
Fetch all items from a category.
Parse the hits and return a dictionary.
Returns a list of hits matching keywords.
Returns the date of the metadata for the given item.
Determine the metadata for a given item.
Fetch pull requests for a given date.
Fetch the repo info from the repository.
Gets the reactions for a comment.
Gets a list of pull requests for a project.
Retrieves a list of pull commits in a group.
Get a list of reviews for a comment.
Gets a user from the database.
Gets a list of issues for a given issue.
Retrieves a list of issues.
Return a generator that yields all issues in the repo.
Retrieve reviews for a given PR number.
Returns a list of commits for a given PR number.
Retrieve reviews for a comment.
Gets a user by username.
Gets the orgs for a given user.
Gets the rate limit for a token.
Retrieves the tokens for each token in tokens.
Determine the best token for the current token.
Check if token is valid.
Update the rate limit for the current user.
Initialize metadata from backend.
Store a record in the database.
Retrieve a record from the database.
Create a new archive.
Verify that the archive is valid.
Load metadata from the archive.
Return the number of records in the database.
Create an archive.
Remove archive from archive.
Search for archives in the archive.
Search for all files in the directory.
Generator that yields months from a date range.
Remove illegal characters from raw XML.
Parses a JSON string into a list of issues.
Retrieves a list of issues for a given date.
Retrieves a specific issue.
Retrieves a user by id.
Make a text request.
Fetch images for a category.
Fetch items from a category.
Retrieve a repository from repository.
Filter custom fields.
Parses a JSON page into a list of issues.
Gets all issues in a given date.
Gets issues for a given date.
Get comments for an issue.
Gets the list of fields of the resource.
Fetch items for a category.
Gets the builds for a given job.
Iterate over pages from raw page.
Get the number of questions from the API.
Setup command line arguments.
Fetch reviews for a category.
Given a list of reviews, return the maximum time date.
Fetch all pages from a page.
Returns all pages in a namespace.
Get recent pages in a namespace.
Yield messages from raw JSON.
Determine if a message is in the chat.
Returns a list of updates for this account.
Fetch all articles in a category.
Add metadata to item.
Parse an article from a string.
Fetch data from a request.
Fetch a single article.
Fetch data from remote server.
Fetch data from the archive.
Create an HTTP session.
Sets up the rate limit handler.
Sleep rate limit to rate limit.
Update the rate limit for the response.
Parses a text file and returns them as a dictionary.
Retrieve a list of archives for a given date.
Lists all archives in a directory.
Parse a stream of messages from the stream.
Fetch all topics from a category.
Parses the topic page and returns a list of topics.
Get information about a topic.
Add a post to the database.
Fetch all items from a category.
Iterate over all tasks in a JSON file.
Parses a JSON string into a list of users.
Return a generator that yields all tasks in the queue.
Retrieve transactions in a list.
Retrieve a list of users for a Phab.
List of phs for Phylab.
Make a request to the API.
Generate metadata for metadata.
Parse the contents of a JSON file.
Get the contents of the archive.
Retrieves historical history of a specific version.
Parse the result of the measurement.
Returns the URL for the capabilities.
Reads a resource from a URL.
Reads a string from a string.
Parses the results of the measurement.
Builds the url for the path.
Construct a schema from a list of elements.
Generate the URL for the given URL.
Execute a complex complex input.
Returns a list of Movies.
List TV TV TV.
Retrieve information about the resource.
Retrieve a list of alternative titles.
Retrieves all credits for this account.
Retrieve a list of external IDs.
Retrieves a list of keywords.
Retrieve recommendations for this account.
Retrieves a list of release dates.
Retrieve a list of releases.
Retrieve translations for this account.
Retrieve a list of movies.
Retrieve reviews for this account.
Gets upcoming upcoming upcoming dates.
Gets the current state.
Return a list of popular popular popular people.
Gets the top level of the API.
Retrieves all accounts in account.
Add a rating for this account.
Retrieves the lyrics of a movie.
Retrieves the video credits for a particular video.
Retrieve information about the device.
Returns a list of all resources.
Retrieve information about the session.
Returns a list of movies.
Create a new token.
Validate a login token.
Create a new session.
Create a new guest session.
Gets a list of movies.
Gets the status of the item.
Create a new list.
Remove an item from the collection.
Clear a list of sessions.
Retrieves the content ratings for this account.
Returns a list of similar objects.
Returns a dictionary of the airpoints associated with the airpoint.
Retrieve information about the series.
Retrieves all credits for a particular series.
Retrieve a list of external IDs.
Retrieve information about the series.
Retrieves all credits for a particular genre.
Retrieve a list of external IDs.
Sets the attributes of the object.
Retrieve a collection of collections.
Retrieve company company details.
Retrieve keyword arguments.
Retrieve a single collection.
Normalize string and convert them to lowercase.
Convert a list of seqs to n-grams.
Convert a sequence of nucleotide sequences into a sequence of counts.
Evaluate the EFCC coefficient.
Aligns a list of texts between two texts.
Iterate over all descriptors in a module.
Registers a JSON descriptor.
Register a new version.
Prints the text of the given string.
Check if a descriptor is a descriptor.
Serialize this object to a dictionary.
Returns the current coordinate of the actor.
Calculate the atomic angle of a sphere.
The surface area of the surface surface.
Initialize a molecule from a molecule.
Initialize the descriptor from a JSON object.
Fill missing values with missing values.
Drop missing missing values.
Return a mapping of all values.
Return a dictionary of values as a dictionary.
Return the name of the field.
Print progress message.
Prints progress message.
Log an error message.
Get a random tempfile name.
Add a temporary file to a temporary file.
Remove temp files from temp files.
Returns the path of the path.
Returns a list of parameters for the given method.
Merge opts for a given method.
Add command line options to the server.
Terminate the queue.
Add a task to the queue.
Wait for all worker threads to finish.
Print the progress of the worker.
Extract keys from environment variables.
Retrieve keys from commandline options.
Retrieves the keys from the S3 config file.
Initialize the s3 keys.
Connect to the bot.
Walk a directory and return a list of files.
Expand source list of sources.
Upload a file to a local directory.
Put files into a single file.
Create a bucket.
Update permissions of a file.
Print all files in a list of sources.
Downloads a single file from a stream.
Retrieve files from a source.
Copy a file to a local directory.
Copy files from source to target directory.
Delete files from S3.
Return a path to a directory.
Discovers the files of the specified source.
Calculate the MD5 hash of a file.
Returns the md5 hash of the file.
Creates directories if necessary.
Determine whether a remote key is a valid hash.
Determines if a path matches a path.
Iterate over the S3 bucket.
Whether or not a file is modified.
Get the privileges of a file.
Look up an object from s3.
Reads a file from a file.
Verify that a file has a file size.
Write a file to a file.
Run the command on the server.
Validate the command line arguments.
Lists the S3 bucket.
Create a mb bucket.
Puts a file into the S3 server.
Extracts a file from the source.
catenate files.
Determine the destination directory.
Command for copying files.
Makes a multi-mapping command line.
Delete a file.
Dump files to disk.
Display total size of S3.
Match the given value.
Match time in seconds.
Match the value of a given value.
Validate a dictionary.
Get data from hub.
Packs incoming data to the server.
Generate the encryption key.
Called when an exception occurred.
Creates a log handler.
Returns the request object for the request.
Report an error message.
Create an agent log file.
Build a person from the database.
Add the lambda context to the context.
Add request data to request.
Determine if the frame should be added.
Build request data from request.
Build the server data.
Build payload from dict.
Main entry point for testing.
Compute the number of two channels.
Given a string, return a list of letters, return the index of the letter.
Determine if a letter is a letter.
Attaches a word from a string.
Determines if an exception is an exception.
Check if a node is inside a node.
Get all elements of a node.
Check if `node` is bounding.
Determine if a node is superclass.
Determine if a node is an error.
Determine if a function is a decorator.
Determines if a node is an ancestor of node.
Assigns node to node.
Iterate over a string.
Gets the name of a call node.
Determines if the given node is a list of exceptions.
Determine if a function is decorated with a decorator.
Determine whether a function is decorated with the decorated function.
Return the exception handler for an exception.
Determine if a node is a fallback block.
Return a list of exception handler handlers.
Determine if a node is ignored.
Determine if a node is abstract.
Try to infer node from node.
Return the type of a node.
Determine whether a node is enabled.
Return a list of qualified names.
Get the name of an import node.
Return a representation of a dictionary.
Make a graph for dependencies.
Check for imports.
Recursively visit imports.
Check if the node is a valid node.
Record the imported import function.
Check if a module is valid.
Add a module to the module.
Check deprecated deprecated modules.
Check that the preferred module is preferred for use.
Report dependency dependencies.
Return a set of dependencies that are set of dependencies.
Read command line options.
Insert command line options.
Check if a node is hidden.
Retrieves a callback for a given node.
Recursively visit a node.
Ensure that the message is valid.
Check for callbacks.
Check that the node is datetime.
Check if open mode is open.
Add message to message.
Returns the title of a node.
Sets the default options.
Check if a node is a node.
Add a class to the link diagram.
Get all ancestors of a node.
Return a generator that yields association nodes.
Extract classes from klass node.
Returns the list of the projects that belong to the node.
Add imports from a module.
Create a class diagram.
Returns a list of diagram diagrams.
Returns True if the given owner is ignored.
Return a list of names that match the given attribute.
Determine whether a node is a member of the given node.
Determines if a node is a parent of the given node.
Determine if name is a variable name.
Determine if a variable is a variable.
Check for assignment assignment.
Check whether a callable call is a callable.
Called when a node is a type.
Iterate over interfaces.
Create a project from a list of files.
Recursively visit packages.
Replace the function definition.
Called when the assignment is set.
Handles assignment type attributes.
Traverse all imported imports.
Recursively visit imports.
Compute the number of modules in the context.
Determine if a module is imported.
Registers the given linter.
Add a message to the queue.
Add a message to the console.
Opens the graph.
Write an edge to the stream.
Process a non-empty string.
Update the layout section.
Update the evaluation section.
Write table content.
Add a new message to the message.
Register messages from a checker.
Registers a message.
Check that the given symbol has the same message.
Raise an exception if a message is invalid.
Raise an exception if a message is invalid.
This function will print all extensions in the application.
Return the number of CPU cores.
Report report statistics.
Fix path to sys.path.
Load all registered plugins.
Loads the plugin configuration.
Set the value of an option.
Registers a checker.
Sets the status of the import mode.
Return a list of checkers.
Return a list of all checker names.
Returns a list of available checkers.
Expand the list of modules in the list.
Sets the current state of the module.
Check that the given AST node is valid.
Report evaluation of evaluation.
Print help message.
Prints full documentation.
List all messages.
List all checkers.
Normalize text with given length.
Extracts the name of a node from a node.
Decode a string to unicode.
Determine if a blacklist matches a blacklist.
Registers all plugins in a directory.
Return a comment comment.
Formats a value into a string.
Prints a section to a file.
Prints a single line of options.
Insert a child at the given index.
Append a child to the end of this node.
Return a list of all parents.
Append the given layout to the stream.
Get the content of a table.
Iterate over the given layout.
Collect block lines from the module store.
Handle ignored messages.
Registers a report.
Add a new stats dictionary.
Return the name of the setter property.
Gets the setter property of a node.
Determine if a function is a return value.
Return a list of exception types.
Add messages from a module.
Parse the given module.
Parse the comments.
Determine if a given statement is imported.
Determine if a statement is a statement.
Gets the overridden method for the given name.
Get extra info about unpackers.
Determine if a name is an assignment.
Mark a new node as consumed.
Determine if a node is homozygous.
Check for unpackers.
Check for metaclass definitions.
Get all packages in a directory.
Install the install directory.
Report similarity between two sections.
Runs a program with the given arguments.
Append a stream to the stream.
Returns a list of simulating simulating simulations.
Prints the number of lines in the graph.
Iterate over all lines in two sets.
Iterate over all lines in the graph.
Iterate over the lines of the text at the beginning of the end point.
Return the index of the line.
Check if a node is equal.
Determine whether this method is a set of parameters.
Try to infer the call result.
Set access to a node.
Check for class declaration.
Check that the node is valid.
Check that `node` is correct.
Exit when a function is called.
Checks that the given node matches the given node.
Check if `node` is a variable.
Determine if the method parameter is a required parameter.
Determine if the body is a raise an exception.
Check that the exception is bad.
Display the layout of the layout.
Returns ``True`` if ``node`` is a namedtuple.
Determine if a node is an enum class.
Determine if the given node is dataclass.
Check for class definition.
Called when a class definition is allowed.
Check if the node is immediate.
Check for boolean expressions.
Check the syntax of the specified docstring.
Return the formatted representation of the template.
Check if `node` is an expression.
Check if `node` is an ast.
Check if a node is a stop iteration.
Determine if the given exception is an exception.
Check for nested functions.
Given a node, return a dictionary of dicts.
Check for duplicate inheritance.
Determines if the node is a boolean.
Checks if the return node is valid.
Check to see if a graph is available.
%prog diplacency.g.g.gffile.
Write all packages in a graph.
Write all classes of a diagram.
Initialize the printer.
Initialize a graph from a file.
Determines whether the stream is emitted.
Return the help text for the checker.
Return environment variables.
Finds all cycles in the graph.
Generate the graph of the graph.
Print the contents of a section.
Disable the message for the given message.
Enable the message for the given message.
Return the symbol symbol for a message.
Determine whether a message is enabled.
Add a message to the store.
Returns the length of a line.
Generate indentation of text lines.
Return the indentation of a token.
Handles the line start of a line.
Return the indentation of the given index.
Return the hanging indentation.
Gets the end of a line.
Push a token on the stack.
Add new line to new line.
Determines whether the token is a valid type.
Check that the tokens are equal.
Check that the token is less than the given token.
Called when the first statement is encountered.
Check for multi statement.
Check for indentation level.
Determine if a node is within a node.
Check if `node` is a conditional statement.
Called when a node name is valid.
Add substring to substring.
Called when an attribute has an attribute.
Check for raise exception.
Return path to pylint.
Validate a value.
Registers the options for the given provider.
Set global variable value.
Set the global value of the global variable.
Generate configuration files.
Load the configuration file.
Loads the command line configuration file.
Add a help section to the command line.
Return the help text for the command line.
Load defaults from the config file.
Returns the attribute name of an option.
Gets the value for the given option.
Iterate over all options in the section.
Determine if a method is a method call.
Determine if a string is a string.
Initialize all modules.
Add a message to the log.
Add new names to the logger.
Check that the format is valid.
Determine if a node is a loop.
Gets the break node from a break node.
Determine if the loop ends at a loop.
Get property names and property names.
Determines the name of a function.
Report statistics about a node.
Determine if a call is an ast.
Check if a node is allowed.
Recursively visit the function.
Check if `else_else` is set.
Check if a node is inside a loop.
Initialize the Linter object.
Check if `expr` is `expr`.
Check if the node is valid.
Add a dict to the dictionary.
Checks if a node is not terminated.
Check for reverse protocols.
Check for docstring.
Check if `node` is valid.
Extracts a subgraph from a node.
Parse the subgraph node and add them to the graph.
Add the message to the module.
Recursively walk the AST node.
Add a relationship to the collection.
Gets a relationship from a relationship.
Get the attributes of a node.
Add an object to the graph.
Given a list of nodes, return a list of classes.
Return list of classes.
Return the class name of the node.
Return all modules in this node.
Gets the module by name.
Returns the module object corresponding to the module name.
Add a dependency from a module.
Remove the code from the cache.
Query the database.
Get a user from the database.
Get a single token from a refresh token.
Add a token to the session.
Add a grant token.
Gets the code for a specific client.
Prepare a request and return the response.
Initialize the application.
Creates an OAuth app from the registry.
Returns the authorization token for the user.
Handles OAuth response.
Handles OAuth 2 requests.
Handles the authorization response.
Generate a hash of a token.
Makes a client and returns it.
Creates an OAuth session.
Context manager to temporarily temporarily temporarily temporarily temporarily temporarily temporarily temporarily.
Invoke the authorization request.
Get client secret from client.
Retrieves the request token for a request.
Get access token from request token.
Returns a list of all allowed realms.
Returns the redirect uri.
Returns the RSA key for the client.
Validate client key.
Validate a request token.
Validate access token.
Validate that a timestamp is valid.
Validate a redirect URI.
Validate that the access token is valid.
Validate a request against the client.
Verify request token.
Verify that the given token is valid.
Confirm the authorization request.
Authenticate the client.
Authenticate a client.
Retrieves the original scope for a token.
Confirm that a refresh token is valid.
Returns default redirect uri.
Get default scopes for client.
Invalidate an authorization code.
Save authorization token for client.
Save a token to the token store.
Validate a bearer token.
Validate a client ID.
Validate a grant token.
Validate the given grant type.
Validate a refresh token.
Validate the response type.
Validate scopes.
Validate a user's username and password.
Revoke a refresh token.
Update the request data for qapi.
Convert a dictionary of dictionaries to strings.
Changes the HTTP header for the uri header.
Registers a remote application.
Create a remote application.
Extracts the request body and headers.
Convert text to bytes.
Decode a string to a base64 encoded string.
Create a response from headers.
Returns a list of cached clients.
Add a remote application to the server.
Add a remote application to the server.
Check that the certificate is valid.
Verify that the encryption is valid.
Loads the private key from the private key.
Try to load a private key.
Try to load a private key file.
Get a list of revoked revocation IDs.
Check for duplicate revocation revocation.
Create a certificate request.
Create a certificate for the given request.
Sets the certificate chain.
Uses a certificate to use the SSL certificate.
Use this method to use the SSL certificate.
Adds a new cert to the client.
Use this method to use a private key file.
Sets the private key for this client.
Load a client from the client.
Sets the verify level.
Loads a temporary temp file.
Sets the cipher list.
Sets the client names for the client.
Adds a client to the client.
Sets the TLT for the TLS client.
Sets the callback function to be called when the connection is called.
Sets the number of protocols for this client.
Sets the callback for the ALPNS connection.
Sets the OSP request callback.
Sets the SSL context.
Returns the name of the server.
Set TLS tunnel name.
Receive messages from the stream.
Read bytes from the buffer.
Rebuild the SSL handshake.
Shutdown the SSL server.
Returns a list of all cipher strings.
Get a list of client names.
Sets the SSL shutdown.
Generate a random random server.
Generate a random client.
Gets the master key from the server.
Exports a KML file.
Return a session object.
Returns the current cipher name.
Retrieves the bits of the SSL cipher.
Returns the cipher version string.
Returns the protocol version name.
Get next message from the server.
Sets the number of protocols for the SSL protocol.
Retrieves the protobuf protobuf message.
Convert a string to a string.
Set the ASN time for the given boundary.
Extracts the time of a timestamp from a string.
Retrieves an elliptic curve by name.
Dump a public key to a string.
Load a public key.
Signs a signature using the given signature.
Verify the signature of a signature.
Dump a CRL file.
Convert the cryptography key to cryptography.
Checks if the key is a valid RSA key.
Returns a set of elliptic curves.
Gets the elliptic curve.
Return an EC2 key.
Returns the encoded string representation of the certificate.
Returns the names of the certificate.
Returns the name of the certificate.
Returns the encoding of the certificate.
Convert the certificate to a cryptography object.
Sets the public key for this client.
Returns the private key for this certificate.
Returns the name of the certificate.
Adds extensions to the client.
Returns a list of supported extensions.
Verify that the certificate is signed.
Convert cryptography to cryptography object.
Sets the version of the certificate.
Get a public key from this certificate.
Sets the private key for this client.
Signs the signature of the private key.
Returns the digest of the certificate.
Set the serial number of serial number.
Gets the serial number of the certificate.
Gets the time for the given amount.
Gets the time for the given amount.
Determine if the message has expired.
Gets the issuer name.
Set the issuer name.
Get the name of the certificate.
Set the certificate name.
Adds extensions to the client.
Returns the X509 extension of the given index.
Add a certificate to the store.
Add a CRRL to the store.
Set the time of the certificate.
Initialize the X509 store.
Creates an exception from the store store.
Verify that the certificate is signed.
Set the serial number of certificate.
Returns the serial number of certificate.
Sets the reason for the certificate.
Returns the reason for the revocation certificate.
Sets the revocation date for this certificate.
Convert the certificate to a cryptography object.
Get the list of revoked certificates.
Gets the issuer for this certificate.
Signs the signature of the certificate.
Export the certificate to a certificate.
Returns the name of the type.
Sets the certificates for this client.
Signs the signature of a private key.
Verify that the given key is signed.
Encode the network as a string.
Get a public key from the private key.
Sets the public key for this SPK.
Return an exception from an error queue.
Return the metadata for the service.
Iterate over all issues.
Build annotations from a JSON file.
Get boards of boards.
Get list of boards.
Get all cards in a list.
Gets comments for a card.
Returns the URL for the API.
Get a GET request from a GET request.
Convert a field to a dictionary.
Get a list of issues from a query.
Return a list of pull requests.
Aggregate all issues in a section.
Return the value of the config file.
Determine if the given issue is allowed.
Convert a list of rows into a table.
Execute an ORM query.
Try to get the integer value of a bug.
Pulls an issue from the configuration file.
Get data from url.
Get a collection of collections.
Parse a string into a dictionary.
Retrieves the credentials from the server.
Calculate the correction correction correction correction for each point in pd.
Compute the zscore score of a data cube.
Adjust sphinx axis of sphinx.
Prepares the argument parser for the argparse parser.
Adds the command line parser to the command line parser.
Compute the mean value of the GMEval.
Returns a pandas.DataFrame of the table.
Returns dataset of datasets.
Returns all the attributes of a dataset.
Returns a list of filtered filters.
Set the number of cores.
Load gene counts from gene datasets.
Get all libraries in a database.
Download libraries from a library.
Calculate the heatmatrix.
Load data from csv file.
Compute sample samples from a sample.
Save results to disk.
Parse gene set of gene sets.
Send a single gene to the database.
Check for gene lists.
Create a cube cube.
Generate an icosphere.
Convert a script into a rectangular graph.
Determine the color of a color.
Check that the number of terms are valid.
Make a list of lists.
Write an XML file to an XML file.
Merge a VCF file.
Splits vertices and vertices of vertices.
Translate a quadroutine to a quadratic version.
Rotate vertices around the specified axis.
Scale a vector.
Evaluate a cylinder.
Wrap a cylinder around a cylinder.
Transform a script using a toric curve.
Convert a vcx file to vx.
Convert a mesh to FCML.
Calculate the void of a script.
This function returns a list of all the annotations for the given script.
Generate a VCF file.
Wrapper around ``radius``.
Wrapper around spherical vertices.
Renames a script.
Changes the layer of the given script.
Duplicate the given script.
Delete the layer at the given script.
Start learning layer.
Add a layer to the layer.
Save the filters to a file.
Generate a per triangle for each triangle.
Measure the topology of the given script.
Parses the HDR file and returns a dictionary.
Return the magnitude of y.
Return the cross-product of two vectors.
Multiplies two vectors.
Compute the depth of the script for a given script.
Sort polyline coordinates.
Measure all meshes of a file.
Convert filename to lowercase.
Return the config set.
Returns the URL for this project.
Return path to filename.
Check if the given extension is allowed.
Resolve a filename to a filename.
Extract the vprofiler version from a file.
Remove duplicates from objects.
Calculate the difference between objects.
Format objects as dict.
Calculate memory usage.
Return a list of code events that have been executed.
Return the total overhead of the object.
Determine the memcached memcached memcached memory.
Profile the current package.
Compute the profile of the module.
Compute the profile of the program.
Runs the object and updates the object.
Get all modules in a package.
Runs a command and returns the result.
Determine the type of a run.
Initialize the run module.
Initialize the profile.
Initialize the run function.
Replace the command line arguments.
Sample from the stack.
Insert a stack of callstack nodes at the given stack.
Calculates the number of samples for a node.
Return a dictionary of tree nodes.
Generate the call tree.
Returns a dictionary containing the package information.
Return the profile of the module.
Returns the profile of the object.
Transform stats into a dictionary.
Returns the profile of the simulation.
Profile the module profile.
Returns the profile of the simulation.
Show the guestbook.
Add a new entry.
Start the stats server.
Reads the root page.
Handle static files.
Do a GET request.
Do a POST request.
Send a response to the server.
Determine whether a standard library is standard.
Record a line of history.
Generator that returns a generator that yields the lines of the line.
Calculate the total heatmap for the computation.
Add missing lines to the source map.
Returns a dict containing the data for the simulation.
Format a template file.
Get the profile of the simulation.
Returns the profile of the simulation.
Run profiling on the runner.
Runs the given function on the given arguments.
Predict probabilities of samples.
Predict log-likelihood.
Compute the model for the model.
Count the number of documents.
Sort a dictionary of features.
Limits features from a list of features.
Fit a sequence of features.
Transform a sequence of latent variables.
Convert this ScalingSeries to a standard deviation.
Compute the mean of the model.
Predict the Spark class from the given class.
Compute the Spatial regression function.
Fit the model on the model.
Fit the simulation using the transform method.
Compute the score of the simulation.
Returns the score of the given estimator.
Train the model for the model.
Predict the model for the model.
Predict Spark classifier.
Check that the RDD is a valid dtype.
Fit the model using the lattice.
Transform a SpatialRDD into a sparse matrix.
Iterate over a sequence of bytes.
Iterate over a sequence of datetime objects.
Convert a RDD to a block.
Transform a RDD to a RDD.
Return the shape of the RDD.
Convert RDD to array.
Binary bit permissions.
Determine if the root directory is allowed.
Check configuration file.
Read the configuration file and validate it.
Execute a shell command.
Execute a command and return its output.
Execute a command on the remote host.
Validate the request body.
Return a dictionary of headers.
Returns the URL for the home page.
Returns the url for the event.
Returns the text for the given packet.
Print discovery information.
Discover discovery devices.
Execute this instance.
Send a message to the server.
Called when a device is executed.
Execute a device.
Run scan on devices.
Finds the ledger file.
Install compatibility for compatibility.
Initialize a TextMeasureMeasure from a JSON file.
Generator that yields Unicode characters from LaTeX.
Encode characters from a list of characters.
Calculate the length of a character length.
Write JSON to JSON file.
Convert a gaussian image to a 2D image.
Compute the Gaussian kernel of the gaussian kernel.
Convert an image to grayscale.
Parse command line options.
Compute the value of the sigma.
Compute the SSS between two images.
Destroy the robot.
Set the code version of this code.
Return the current state of this node.
Print the status of the server.
Returns the node corresponding to the given connection.
Try to bind the transport.
Registers a new connection.
Called when a command is successful.
Determine if a node is connected to this node.
Determine if a node is connected.
Called when the connection is received.
Called when a connection is received.
Called when a connection is closed.
Add a node to the network.
Removes a node from the pool.
Send a message to the device.
Add an item to the queue.
Adds an item to the heap.
Return the next item from the heap.
Try to acquire a lock.
Determine whether the lock is acquired.
Releases a lock.
Sets up the hosts.
Create a index for all indexes.
Migrate the indexes to the database.
Remove metadata from a report.
Save metrics to Kafka.
Extract the XML data from a XML file.
Parse an XML report file.
Convert a list of reports to a CSV file.
Parse a report file.
Retrieve capabilities from a server.
Save the scrap report to a file.
Decodes a base64-encoded string.
Get the reverse name of an IP address.
Convert a human-readable timestamp to a datetime.
Get information about an IP address.
Convert a message to an error message.
Convert string to list of strings.
Parse a report file.
Determine the drain stream.
Publish a message.
Publish a request.
Publish a message.
Subscribes a subject to a subscription.
Unsubscribe from the socket.
Flushes the connection to the server.
Select next server.
Process an error message.
Process an error message.
Returns the connection command string.
Process a PongPing ping.
Process a message from the queue.
Process all servers.
Flushes pending messages to the stream.
Read and process the stream.
Load features from a list of features.
Load features from images.
Compute Pearson correlation coefficient.
Computes the dot product of the image.
Select features from a feature.
Get the features in a dataset.
Classifier for classification.
Compute the clusterer.
Set the class weight of the class.
Fit the cross-validation of the cross-validator function.
Fit the sklearn dataset.
Get random images from a dataset.
Gets the top words of a feature.
Calculate Pearson correlation coefficient.
Calculate the FDR of the problem.
Load activations from file.
Create an image table.
Returns the names of the feature names.
Return a dictionary of feature counts.
Load a dataset from a file.
Save the feature to disk.
Returns a list of the names of the names of the columns.
Search for features in a search.
Return a list of identifiers for a given expression.
Convert sparse data to sparse matrix.
Transform a matplotlib matplotlib matrix.
Convert a list of indices to a matrix.
Apply transformation to a transformation.
Returns the mask of the layer.
Load images from filenames.
Save an image to an image.
Set the logging level.
Parse an address from an address.
Convert an object to a dict.
Gets prices for a given ticker.
Gets a list of news reviews.
Send a request to the server.
Gets the bearer token info.
Perform a request on the server.
Retrieves tracks for a given id.
Gets an artist's artist.
List albums in a spot.
Retrieves a listing of artist tracks.
Gets a listing of artists related to a spot.
Retrieve a list of artists.
Returns information about a category.
List playlists for a category.
Returns a list of categories.
Gets a list of features for a given locale.
Retrieve a list of releases.
Retrieve a listing of users.
Return a list of albums.
Returns a list of albums.
Return the total number of albums.
Return the current active track.
Get player's player.
Get device devices.
Return a list of recent tracks.
Replace all tracks in a playlist.
Create a new playlist.
Get a list of playlists.
Return a list of tracks.
Returns a list of tracks.
Return URL for redirects.
Gets an album from Spotify.
Get artist's artist.
Get a track by id.
Gets a user for a given id.
Return a list of albums.
Returns a list of artist ids.
Convert string to ID.
Create an instance from a client.
Generate URL for redirects.
Return a dictionary of attributes.
Return the string representation of the query.
Return a list of tracks.
Returns a list of tracks.
Transfer a device from a device.
Creates a new instance from the server.
Gets the user's email address.
Convert a year to a month.
Recursively update code files.
Check if the current version is greater than the current version.
Determine if a dev version is running.
Determine if the current version is deprecated.
Backup the backup file.
Restore the backup file.
Determine if a line is ignored.
Parse command line options.
Extracts the base url from a list.
Convert a string to a string.
Return the access code for the request.
Gets the HTTP code for the API.
Check that a domain is valid.
Check if a domain is a subdomain.
Check that IP address is valid.
Determine if an IP address is an IP address.
Check if url is valid.
Loads the configuration file.
Prints a random safe safe mode.
Downloads and downloads the URL.
Download and store the entry URL.
Print out the header.
Generate the database file.
Print the message for the given domain.
Determine the URL for a given URL.
Prints a log file.
Format the domain into a string.
Extract all domains from a Python file.
Takes a list of files and returns a list of files.
Returns the URL of the file.
Get the expiration date.
Generate the status file.
Get the structure of the structure.
Creates a directory if necessary.
Removes all deleted entries.
Sets the path to the config file.
Install the production config file.
Install the link configuration.
Install the PLCL configuration file.
Install directory structure.
Merge the configuration from the upstream configuration.
Loads the config file.
Split a string into digits.
Check if the upstream version of the upstream.
Determine whether the clone is cloned.
Handle a non-existent index.
Determines the directory of the output directory.
Dump the output file to disk.
Generate the status file.
Determine if the file is not present.
Extracts all extensions from a string.
Loads the file into a dictionary.
Replace regular expression.
Load the database.
Determine the URL for a given extension.
A generator that yields all extensions that match the upstream.
Update the database database.
Return the hash of the request.
Retrieve a dictionary from the configuration file.
Backup the configuration file.
Add elements to the list.
Remove the configuration from the database.
Return a list of minified min files.
Loads all mined messages.
Get content from file.
Write content to file.
Write the user to the log file.
Generate the expiration date for the given date.
Send a redirect to the server.
Add the header to the template.
Construct a tuple of header data.
Construct a dictionary of data.
Extracts the size of a header from a header.
Colorize data.
Print data to JSON.
Print data about the template.
Calculate the time of the time series.
Format the execution time of the execution time.
Return a list of files that can be deleted.
Return list of database databases.
Delete all databases.
Generate hash of file.
Return the hash of the data.
Returns a dictionary of the current algorithm.
Execute the command.
Remove a key from the dictionary.
Rename a key to a dictionary.
Merge two dictionaries into a dictionary.
Save the current state to a JSON file.
Save the yaml file to a yaml file.
Fix the path to the directory.
Write data to file.
Reads the contents of the file.
Return a sorted list of the main values.
Merges the list into the list of dictionaries.
Return a list of strings that match the pattern.
Match the pattern.
Return a copy of the pattern.
Count the number of records.
Calculate the percentage of percentages.
Check if a URL is valid.
Returns True if the domain is valid.
Determines whether this element is a subdomain.
Gets the current syntax status.
Replace the historical format of historical errors.
Retrieve the database from the database.
Backup the state of the database.
Get the timestamp of the database.
Return the list of all the content.
Determine if the configuration is present.
Retrieve authorization info from the database.
Backup the user database.
Returns True if the database is in the database.
Determine if the user is older than the database.
Get the expiration date for the user.
Make sure that travisitor is allowed.
Run the Travis environment.
Look up the namespace for DNS.
This interface is used to get the username from the server.
Returns the status of the URL.
Return the URL for the domain.
Return the current object.
Returns a generator that yields standard standard paths.
Return a generator that yields the standard package names.
Iterate over unused imports.
Yield unused imports from messages.
Generator that yields the number of lines used in the import function.
A generator that yields unused keyword arguments.
Iterate over unused variables.
Iterate over duplicate keys.
Check for errors.
Extracts the package name from a line.
Check if a line is a statement.
Determine if a line is a multiline statement.
Remove unused imports from unused imports.
Split a line into a list of imports.
Return a dictionary of messages from a list of messages.
Remove unused imports from a marker.
Check for duplicate keys.
Determine whether a line contains a key.
Returns True if value is a literal literal.
Iterate over the number of rows in the source file.
Iterate over unused lines.
Extracts a line from a line.
Returns the end of a line.
Remove a source code from a source.
Split a comma separated string separated by comma separated comma separated groups.
Determine if a file is a Python file.
Determine if a given filename is excluded.
Read the response payload from the queue.
Write the response payload to a file.
Write the message to the queue.
Reads the message payload.
Create a name from name.
Reads the digest of a file from a stream.
Write the message to disk.
Read information from a file.
Write the metadata to a file.
Creates an instance of the application.
Reads the CryptParameters from a stream.
Write the model to disk.
Reads the request payload.
Write the message payload.
Reads the response payload.
Write the message to the file.
Write the message to disk.
Reads the signature of the signature.
Build an error response.
Process a template attribute.
Retrieves all attributes from the managed object.
Sets the attributes of the given managed object.
Sets the attribute of the specified attribute.
Determine if the given policy is allowed.
Write the message to disk.
Creates a new Secret object.
Set the settings of the server.
Load the configuration file.
Return the bitmask for the given value.
Returns a list of all encrypted values.
Read an integer value from a stream.
Write an integer to the stream.
Ensure that the integer is valid.
Read an integer value from a stream.
Write the hexadecimal representation of a stream.
Ensure that the value is a valid integer.
Ensure that the enum is valid.
Read the value from a stream.
Write the value to the stream.
Write a boolean value to a boolean stream.
Checks if the value is a boolean.
Read an interval from a stream.
Validate that the interval is valid.
Validate the message.
Validate that the data is valid.
Validate that the message is valid.
Convert a value to a tag name.
Convert a value to an attribute name.
Compute bitmask mask from a list of enumerations.
Returns a list of enumerations from a given bitmask.
Determines whether the given enumeration is a bitmask.
Write the message to disk.
Reads the response payload from the input buffer.
Write the message to disk.
Reads the attributes of the request.
Write the request to the file.
Write the attributes to a file.
Get a list of JSON files.
Runs the health agent.
Gets the certificate from the database.
Gets the extended key for the given certificate.
Returns all common names in a certificate.
Gets the client id from a certificate.
Read the request payload.
Write the request payload to disk.
Read the response payload.
Write the response payload to a file.
Convert an object into a dict.
Reads the encryption response payload.
Write this object to disk.
Determines whether the given attribute is supported.
Determine whether the given attribute is deprecated.
Determines whether the given object has a given attribute type.
Determine if the given attribute is allowed.
Reads the checksum payload.
Write the response to the file.
Reads the attribute of the attribute.
Write the attribute to the device.
Read attributes from a stream.
Write the attributes to a file stream.
Read a record from a stream.
Write the message to the stream.
Read credentials from a file.
Write the username and password.
Write the device credential to the device.
Reads a credential from a stream.
Write the credentials to a file.
Reads the MACID signature from a file.
Write the MAC address to a file.
Write the message to disk.
Reads the WIP signature.
Write the key specification to a file.
Read extension information from file stream.
Write extension info to file.
Read revocation reason from a stream.
Write revocation code to a file.
Validate the revocation code.
Reads the object from the object.
Write the object to disk.
Write the message to disk.
Reads the profile information from the input buffer.
Write the profile information to disk.
Write the message to disk.
Stops the thread.
Serialize this object to a file.
Reads the LocationResponse payload.
Write the location to a file.
Load a RSA private key from a string.
Reads the signature from the payload payload.
Write the message to disk.
Reads the amount of usage data.
Convert a protocol version number into a KNIP version.
Read the protocol version of the protocol stream.
Write the protocol stream to the protocol stream.
Read credentials from a file.
Write the authentication token to the file.
Read the payload from the queue.
Read certificate from a file.
Write the certificate to the stream.
Read the archive from the archive.
Write the archive to the archive.
Start the connection.
Reads the response payload from a stream.
Determine whether the profile is supported by the user.
Gets the attributes of the device.
Get a list of attribute names.
Execute a query.
Open a proxy connection.
Close the proxy.
Registers an object.
Retrieves the attributes of the UUID.
Activate a VM. Args: uid (str): UUID of the IM
Build a dictionary of cryptography parameters.
Deserialize the encryption key.
Deserialize the MAC signature.
Deserialize a key specification.
Build common attributes for the operation.
Build a list of name attribute names.
Reads the query payload.
Write query parameters to disk.
Reads the attributes of the AttachmentResponse.
Write the attributes to the file.
Get a single entry point from a group.
Get named group names.
Get all entries from a group.
Loads the object from the object.
Parse an entry point from a string.
Generate a controller file.
Rewrite a file to a new file.
Check that the URL is valid.
Encodes a string into a string.
Decodes a string into a string.
Returns the absolute url for the given endpoint.
Signs a user in the session.
Gets the user's user.
Initialize the Flask application.
Convert a dataframe to a CSV file.
Read data from a CSV file.
Serialize a dataframe.
Deserialize a DataFrame from the given data.
Returns the URL of the archive.
Open a remote dataset.
Reads a binary file from the workspace.
Reads content as text as text.
Convert the data into a DataFrame.
Returns an intermediate Dataset for this node.
Gets all experiments in a workspace.
Gets datasets for a workspace.
Get information about a dataset.
Find all global variables.
Return a copy of this pen.
Look up a color from a string.
Draws a rectangle.
Compute the Bernier curve from p1 and p2.
Calculate Bernstein curve.
Builds a list of choices.
Initialize the cache.
Clear the cache.
Retrieves an entry from the cache.
Update an entry in the cache.
Add a value to the cache.
Initialize the context.
Resolve the tree alias to the tree.
Determine if the current app is admin.
Calculate the depth of a tree.
Gets the tree item for the given tree alias.
Returns the URL for a site item.
Initialize sitemap tree.
Returns the current page attribute for the given attribute name.
Get the ancestor of the current item.
Check if user is allowed.
Returns the tree item for the given tree alias.
Render children of the tree item.
Get the children of a tree item.
Update the children of a tree item.
Filter all items in the menu.
Returns the parent item of the tree item.
Cluster tree item from tree.
Resolve a variable.
Parse the sitatree tree tree.
Parse a sitatree node.
Parse a sitematree node tree.
Render a tree of trees.
Create a new tag from a template.
Returns the URL for a model.
Registers a tree admin admin.
Handler for redirects.
Redirects the request to the server.
Add a new item to the tree item.
Called when the user is done.
Initialize the choice field.
Returns tree item for tree item.
Move the item in the tree.
Save the model to the tree.
Returns a list of urls.
Dump the model tree to a JSON file.
Import the site tree from the app tree.
Get model class from settings.
Create a configuration from a mapping.
Create a new class from a Python file.
Create a new translation from a TOML file.
Initialize the configuration from an instance.
Generate http headers for a Span Span Span.
Determine the current span of the span.
Start the logging context.
Stop the logging event.
Update extra annotations.
Add a storage annotation to the server.
Override this method to override the span_name.
Creates a new endpoint with the given endpoint name.
Build a v1 span for this span.
Encode a list of spans to a JSON string.
Convert a Span Span Span Span Span Span Span Span to a protobuf message.
Convert hexadecimal to bytes.
Returns the protobuf protobuf proto.
Convert an endpoint endpoint to an endpoint.
Convert annotations to JSON.
Create an annotation annotation.
Create a binary annotation.
Creates a service endpoint.
Creates a new endpoint with the given endpoint name.
Build an annotation list.
Convert binary annotations to binary.
Creates a span from a Span Span object.
Convert a span span to bytes.
Encode a list of binary objects.
Determines the Span version of a message.
Convert spans to a list of spans.
Push a zip attribute to a zipkin.
Encode a v2 span from v2.
Create a JSON endpoint for the endpoint.
Encode a span to a JSON string.
Decodes spans from a list of spans.
Convert a Thrift endpoint to an endpoint.
Decodes the Thrift annotations.
Convert a Thrift annotation to a dict.
Decodes a Thrift span from a Thrift span.
Convert trace_id to string.
Convert an unsigned integer value to a string.
Write a signed integer to the stream.
Check for date and date dates.
Set the transaction code for a single transaction.
Set the ID of a tag.
Given a list of tokens, return a set of tags.
Joins a string into a single line.
Convert a response to JSON.
Ensure that the duration is less than seconds.
Get info about the bot.
Gets a list of robots.
Read a term from the buffer.
Write a message to the stream.
Decode a string from a string.
Encode a term to a string.
Add a source to the channel.
Send pending messages to queue.
Sets up the remote service callback.
Stop the server.
Reset the local service.
Searches for all services in the server.
Create a message from the environment.
Discover and discover the logging level.
Returns the instance manager for this item.
Get all child roles for a given model.
Get all children of a model.
Save the model fields to the database.
Validate all unique forms.
Returns True if all forms changed.
Generate a new address for this address.
Generate the checksum of the address.
Prompts a seed for a random seed.
Returns the key for the given index.
Returns the key for the given address.
Create a key iterator.
Creates a copy of the given index.
Iterate over the state of a sequence.
Evaluate the trajectory at the given position.
Transform the state of the state.
Adds two integers to the right side.
Convert a number of integers into a list of tuples.
Add two digits to the right side.
Compute the left of two tokens.
Prints the seed for the given seed.
List transactions for a bundle.
Prompts a transaction.
Resolve an adapter from a URI.
Send a request to the server.
Logs a message to the console.
Send a request to the server.
Parse the response and return the response.
Add a digest to the chain.
Returns the address of the address.
Generator that yields an iterator over the address.
Create an address from a digest.
Generate the address of a key iterator.
List all transactions in a database.
Iterate over a set of addresses.
Given a list of transaction hashes, return a list of all the bundles that match the transaction
Check that the codec codec codec supports.
Get codec info.
Encode a binary string.
Decodes the message into memory.
List all addresses in the database.
Add a route to the adapter.
Create a transaction from a string.
Return a JSON representation of this object.
Return the representation of the transaction.
Sets the state of the transaction.
Get all messages in the group.
Return a list of all transactions in the transaction.
Find all commands in the given package.
Execute the command.
Apply a filter to a single value.
Returns the URL of the job.
Returns a list of errors.
Determine if the collection is valid.
Iterate over all transactions.
Returns a list of all errors in the bundle.
Returns the error message for the group.
Traverse a transaction in a transaction.
Start the bot.
Generate random seed.
Generate a digest of the key.
Signs a bundle of inputs.
Print a pretty-printed cycle.
Iterate over the number of segments in the stream.
Add a context to the context.
Gets the security level.
Increments the old tag.
Return the tag for this transaction.
Adds a transaction to the chain.
Finalize the pending transaction.
Signs all outputs in the blockchain.
Create a new input transaction.
Convert a value to a standard unit value.
Decompress a g1g1 g1-bit value.
Generate random prime field.
Create a new instance from a JSON file.
Split description into a list of descriptions.
Return a list of categories.
Generate a random color.
Build a `TimeSeries` from a time scale.
Creates a ColorImage from an image.
Return CSV file as CSV.
Returns the maximum width of the table.
Gets the decorator for this component.
Plot the list of dictionaries.
Build a rock stack.
Process a text row from a dictionary.
Parse a text string into a dictionary.
Return a list of all thicknesses.
Construct intervals from topology topology.
Removes the data from a dictionary.
Initialize a trajectory from a file.
Create a new interval from a file.
Return a copy of this instance.
Serialize this list to a CSV file.
Serialize the MAR file.
Return a list of duplicates that have been performed.
Return all gaps in the cluster.
Removes rows from the strip.
Return a copy of the strip.
Create a copy of the components with the given component.
Returns a union with the given other.
Intersect other intervals.
Merge overlapping regions.
Invert the list of dictionaries.
Returns a copy of the list.
Returns a dictionary of all tests that match the given aliases.
Add field to template.
Gets all jobs in the queue.
Parses the given hcls file.
Update a token by id.
Retrieves all resources associated with a prefix.
Fail a deploy deployment.
Pauses a paused deployment.
Removes a node from the node.
Determines the node with the given id.
Retrieve an eligible node.
List files in a directory.
Returns a stream of data from a stream.
Retrieve a file by id.
Joins a user agent.
Update a list of servers.
Force remove a node.
Returns a list of nodes for the given prefix.
Gets evaluations for a prefix.
Returns a list of namespaces for the given prefix.
Registers a job.
Fetch a job for a job.
Send a job to a job.
Revert a job.
Retrieve a job from a job.
Deletes a job from the queue.
Gets the configuration for a specific session.
Delete a peer from the server.
Gets all deployed deployments for a given prefix.
Get a random value.
Generate a random mutator.
Generate a random string.
Safely convert unicode string to unicode string.
Generate a custom HTML file.
Serve the fuzzing server.
Spawns a process from the server.
Get the output of the process.
Finish the process.
Close the process.
Start the fuzzing worker.
Execute the command.
Build a string representation of the string.
Builds a string representation of the current scope.
Build a string representation of the query.
Build a random value.
Build and return the population.
Builds a reference from the cache.
Build a list of stars.
Shutdown the server.
Runs the main process.
Start the monitor process.
Returns a random float value.
Returns fuzzily fuzzing.
Gets the fuzzing of the object.
Called when the process is closed.
Close command line.
Pauses the command line.
Resume the command paused.
Stop command line.
Restart command line.
Returns a list of sklearn events.
Set the user for the user.
Sets avatar avatar avatar.
Returns the url for a given url.
Get a contact by id.
Gets user's user's user.
Returns a list of users that have been logged in this account.
Gets a user from the bot.
Search for user's users.
Returns a list of skype requests.
Create new fields from raw data.
Merge this object from another object.
Merge an object into the cache.
Reads a token file from the token file.
Write token to file.
Verify that a token is valid.
Refreshes a new sklearn token.
Get user id.
Retrieves a new sklearn token.
Searches for sklearn devices.
Determine if user has a user.
Authenticate token using token.
Configures a message.
Ping a message to the server.
Gets the chat chats for the chatroom.
Gets a chat group by id.
Create a new Chat object.
Return the UID of a URL.
Extracts a URL from a URL.
Convert text to Unicode.
Detect the format of text.
Parse text from text.
Return a copy of this object.
Load a YAML file.
Export metadata to JSON.
Export metadata to JSON.
Returns the full match of the pattern.
Return a list of strings that match the pattern.
Returns a list of all items in the tree.
Convert a new line to a string.
Returns a list of arguments that match the arguments.
Returns a list of dictionaries for the given pattern.
Parses a list of strings.
Given a dictionary of triples, return a string of pattern.
Determine the start of a key.
Insert a string at the given index.
Return the atomic part of a string.
Return a list of spans for a type.
Shrink a new line in the stream.
Insert new line at index.
Return the number of nesting levels in the tree.
Return the shadow shadow of the string.
Returns the extended shadow shadow shadow of the extension.
Return a dictionary of spans to be used as a dictionary.
Prints a warning message.
Returns a list of parameters.
Returns a list of parser functions.
Return a list of template names.
Returns a list of wikink links.
Return a list of comments.
Returns a list of all external links.
Return a list of table names.
Iterate over all spans in the given type.
Return the list of ancestors of the span.
Return the receiver's parent.
Return the mode of a list.
Gets an argument by name.
Removes the first argument from the arguments.
Gets an argument from the argument.
Determine if the argument is an argument.
Removes an argument from the arguments.
Convert code to string.
Return an object that matches the specified name.
Parse a URL from a URL.
Parse a file and return a Parse object.
Convert a string to a crs.
Convert an ECRS code string to a CRS object.
Convert a SRID code to a crs.
Convert a text string from a text string.
Write the record to the file.
Read from a stream of data stream.
Given a list of GeoJSON objects, return a list of GeoJSON objects.
Parses a GeoJSON file and returns a list of GeoJSON objects.
Determine the signed sign of a type.
Returns the id of the type of the given type.
Create a new record from a point record.
Copy all fields from another record.
Append the array to the end of the array.
Return all dimension names.
Create a zeros array of points.
Initialize a stream from a stream.
Create an image from compressed buffer.
Dimension of x-axis.
Dimension of y-axis.
The dimension of this mesh.
Add extra dimensions to the device.
Write points to disk.
Write the file to a file.
Builds a dictionary of point formats.
Builds the dtypes for the point format.
Given a numpy dtype, return the Point format.
Determine the version of a point format.
Determine whether the point format is a file format.
Extracts the list of LVL layers from a vl layer.
Read a list of LVL objects from a stream.
Determine whether each point is a point format.
Determine if all points in a set of points.
Raise an exception if the file signature is not found.
Read header from stream.
Read LDRs from stream.
Read points from vlrs.
Read points from the stream.
Reads and returns the stream.
Read events from the stream.
Prints the message at the end of the end of the end of the end of the
Create a SkyData object from a header.
Merge two points together.
Read and write a read from a LAL file.
Return the date of this object.
Set the date of the object.
Return the minimum min and max min min and max min.
Set the minimum min min min and max min min and max min.
Return the array of max values.
Set the max and max values.
Return the scaling scales.
Return the coordinates of this vector.
Reads the file from the stream.
Convert a new header to a new header.
Unpack an array from the source array.
Returns a list of dimension names in the point format.
Return a dictionary of subfields.
Return the number of extra bytes in bytes.
Determines whether this dimension is a waveform packet.
Main entry point for logging.
Calculate the checksum of a command.
Print a hexadecimal string.
Verify that the response is valid.
Return the number of bits in a list.
Generate query string.
Run a demo server.
Connect to the server.
Start monitoring for monitoring.
Displays a command.
Clears an alarm.
Set the output of the device.
Keep the connection forever.
Monitor the alarm state.
Close the stream.
Purge the database.
Guess the type of a file.
Returns the file id for the given path.
Get a notebook from the database.
Create a notebook from a database.
Get a directory for a given path.
Convert a file record to a dictionary.
Create a directory from a database.
Create a file from the database.
Save a notebook to disk.
Save a file to disk.
Rename an existing file.
Delete a file or directory.
Ensure a user is a database.
Delete a user from the database.
Create a directory and create a directory.
Determine whether a user is in a directory.
Delete a directory.
Determine if a directory exists.
List files in a directory.
Get all directories in a directory.
Determine whether a user is a file.
Select files for a user.
Returns a list of file fields.
Get a file from the database.
Get file content from database.
Get the file ID from the database.
Determine whether a file exists.
Renames a directory.
Save a file to disk.
Delete remote checkpoints from database.
Recursively decrypt the content of a table.
Recursively decrypt the content of a user.
Derivate a public key from a password.
Returns the name of a column.
Convert fields to dict.
Convert a row of fields into a dictionary.
Create a notebook from a notebook.
Create a file from the remote database.
Delete a checkpoint from the database.
Get the content of a checkpoint.
List all remote checks on the remote system.
Move a file to a remote database.
Delete all remote checks.
Purge the remote database.
Resolve the path of the path to the manager.
Apply prefix to a dictionary.
Called when the manager changes.
Gets a directory for the given path.
Normalize the API path.
Split the path into the api file.
Convert nbb to base64 encoding.
Reads base64-encoded base64 encoding.
Decode a base64 encoding.
Parse a file and return a string.
Returns a list of prefix names.
Create a user's password.
Split models into separate directories.
Iterate over all files in a directory.
Iterate over all files in a directory.
Iterate over all files in a directory.
Recursively decrypt a user with a specified user.
Removes all users from the database.
Encrypts a user from a single user.
Temporarily create a temp file for the given alea.
Upgrade a database to a database.
Sanitize the given dictionary.
Add an instance to the queue.
Load instances from embedding model.
Insert an instance into the database.
Load all embedding data.
Validate widget fields.
The admin page view.
Serialize this object into a dictionary.
Hide all authenticated fields.
Remove fields from request.
Extracts a preview from the request.
Returns a queryset.
Returns a queryset with the given title.
Returns True if the value is null.
Ensure that widget is valid.
Validate a zone.
Returns True if the given id is valid.
Returns the user's permissions.
Add permissions to the group.
Ensure data is valid.
Save a zone to a zone.
Returns a dictionary of all fields.
Prepare all fields for the field.
Render the template.
Get all settings from the database.
Called when a user is done.
Gets the settings for the integration.
Updates the integration settings.
Signal user.
Convert a tag into a string.
Render a zone.
Save an image from a dict.
Save the section of the article.
Returns the filename of the image.
Returns the URL of the media file.
Save image and save it to file.
Save an image to a file.
Return a connection to the database.
Returns a stream of bandwidth limiting to a file.
Read bytes from the stream.
Consume an amount of requests to consume on the account.
Process a scheduled request.
Calculate the exponential moving average.
Calculate the consumption rate for a given amount.
Waits for the given transfer.
Returns a list of subscribers for a given transfer.
Returns a filtered dictionary with the given whitelisted.
Decrement the number of events.
Finalize the collection.
Determine if a file is a special file.
Acquires the given tag.
Unregisters the given tag.
Adjust the maximum size of the file.
Queue a file at the given offset.
Determine the download manager for download manager.
Main function for writing a file.
Return a list of writewrites for the given offset.
Determine whether a file is seekable.
Shutdown the server.
Called when the message is executed.
Wait for all transfer operations.
Wrap a file-like object.
Determine the upload manager for uploads.
Sets the exception of the future.
Sets the result of the future.
Sets the exception.
Return the result of the future.
Called when the message is done.
Submit a task to the container.
Add a callback to the container.
Add a failure cleanup container.
Called when the job finished.
Upload a file to the server.
Download a file from a bucket.
Gets the args for the step.
Refactoring a new step from a text file.
Extracts the step of the step.
Return the diff of the old text in a new line.
Update a membership object.
Deletes membership from a given membership.
Gets the catfacts for a category.
Create a new webhook.
Deletes membership from a membership.
Validate that a URL is valid.
Determine if a string is a web URL.
Opens a file and returns it.
Check that the given object is a valid type.
Return a dictionary with values from a dictionary.
Check that the response is valid.
Convert json data to dict.
Convert a date string to datetime.
Creates a new object.
Update an existing room.
Deletes a room from the room.
List items in a group.
Return the creation time of the web server.
Retrieve access token from environment variables.
Update an existing webhook.
Deletes a webhook from a webhook.
Sets the value of the alarm rate.
Update the headers of the request.
Convert a URL to absolute url.
Make a GET request.
Get pages from a URL.
Make a PUT request.
Deletes a request from the server.
Creates a new JWT object.
Deletes a message from a message.
Gets a person by ID.
Deletes a person from a person.
Gets the user's object.
List objects in the collection.
Create a new object.
Update a team by name.
Deletes a team from the team.
Serialize data into tuple.
Gets the last time of the web account.
Process webhook event.
Gets the URL for the ngro API.
Delete webhooks by name.
Create a webhook on a webhook.
Entry point for webhook.
Read all messages from the serial port.
Read messages from queue.
Creates a DSM protocol for the DSM server.
Creates a DSM connection.
Create a TCP connection from a TCP stream.
Receive messages from the stream.
Called when the connection is closed.
Parses the given Telegram API.
Parse the telegram data into a dict.
Get the version from a file.
Check that the given specs are valid.
Find all packages in a directory.
Runs a command on the system.
Retrieve data files from a list of data files.
Get package data from a directory.
Compile a regular expression.
Iterate over the given path.
Translate a glob to a regular expression.
Join translations into a string.
Translate a regular expression to a regular expression.
Truncate the database.
Write the table to the database.
Write all indexes to the database.
Write triggers to the database.
Add constraints to the database.
Generate contents of a file.
Write the contents of a table.
Write constraints to a file.
Write triggers to the table.
Return the number of items in the queue.
Enqueue data from the database.
Start the task handler.
Builds the extra predicate for the given predicate.
Serialize a datetime object.
Connect to the database.
Execute a query against the database.
Connect to a database.
Run the benchmarkbench.
Connect to the aggregator.
Lookup an error by name.
Return the total number of connections.
Called when the connection fails.
Return a simple expression for the given fields.
Update a table with the given fields.
Connect to the database.
Destroy the database.
Start a new step.
Stop a step.
Load steps from raw_steps.
Disconnect from the socket.
Connect to the server.
Connect to websocket.
Handles incoming messages from websocket.
Stop the ping thread.
Send ping to the server.
Called when the PongPing is received.
Send a message to the server.
Unpause the playback.
Handles incoming events.
Called when the error occurs.
Send data to the server.
Subscribes a message from the bot.
Handles the auth message.
Handle configuration information.
Update timestamps for a given channel.
Reset all channels.
Retrieves a key from the queue.
Sets the bitfinex config.
Subscribe to a ticker.
Unsubscribe a tick from a pair.
Subscribe to orderbook.
Unsubscribe from orderbook.
Subscribe to raw orderbook.
Unsubscribe raw order.
Subscribes all trades for a given pair.
Unsubscribe all trades from a pair.
Subscribes the candidates for a given pair.
Unsubscribe candidates from a given pair.
Authenticate the channel.
Cancel order of order.
Called when a command is received.
Process device command.
Called when the message is received.
Creates a new device.
Update a device by ID.
List all clients status.
Returns a list of all available devices.
Creates a new dictionary.
Update a schema with a schema.
Disconnect from the server.
Called when the connection is received.
Called when a message is received.
Called when a device is received.
Called when the client is received.
Called when the client has been received.
Gets the last event from a device.
Gets all events of a device.
Make a request to the API.
Initiate a new MTP request.
Gets the status of a request.
Close the stream.
Returns the bounds of the mesh.
Load a single page from the page.
Check if result is valid.
Load the application.
Serve the docker container.
Convert the value into a native URL.
Convert image to PNG.
Convert image to PNG image.
Convert image to image file.
Parses the form of the image.
Loads the placeholder image and store it.
Update the model field.
Update the PEP field field.
Returns the form of the form field.
Convert an object to string.
Auto-discover images.
Unregister a sized image.
Unregister a filter by name.
Returns the URL for this image.
Builds a list of filenames.
Returns the path to the root folder.
Returns the path of the folder.
Returns the path of the image folder.
Delete files matching regex.
Preprocess an image.
Preprocess a JPEGpeg image.
Retrieve image from disk.
Save an image to disk.
Return string representation of pi.
Creates an image from disk.
Render the template.
Creates a context for rendering.
Build attributes from base attributes.
Returns the full path to a filename.
Returns the path to a file.
Validate a list of 64-byte size.
Extracts image from image key.
Gets the rendition key for a given key.
Format instruction instructions.
Return a string representation of a function.
Decodes an instruction.
Decodes a module into a module.
Connect to the server.
Read and return the result from the stream.
Parse the AGI output.
Check for AGI code.
Reset instance of instance.
Return a list of instances.
Retrieve data from a set of settings.
Returns a list of primary keys for a given model.
Deserialize the given value.
Get a single instance from the database.
Add fields to schemas.
Loads the model from the given data.
Split data into a dict.
Lists all snapshots.
Restore a snapshot from the database.
Triggered when the epoch is initialized.
Removes text from text.
Apply a function to each of the data.
Convert text to text.
Iterate over text files.
Calculate the total length of the document lengths.
Returns a Pandas DataFrame of the tokens.
Map param_type to string.
Parse a dictionary of interfaces.
Return the inverse inverse of the model.
Update the rollback and update the history.
Return a copy of this model.
Return a copy of this node.
Returns True if this mapping is equal to the same order.
Return a mapping of values.
Clears the simulation.
Move the top level to the top of the node.
Write a text file to a temporary file.
Merge arguments into config file.
Load addresses from a list of addresses.
Create a new new contact.
Executor for `globus views`.
Search for phone numbers.
Lists a list of contacts.
Executes the ModCard command.
Executor for `vCard`.
Executor for `vCard`.
Merge multiple contacts.
Returns the action for a given alias.
Create a new Contact object.
Create a new Address object from a file.
Create a new Contact object from a given address.
Create a new contact from a new account.
Returns a list of names for the given part.
Add a category to the collection.
Parse a list of supported types.
Convert a list of strings into a string.
Convert string to datetime.
Compare two strings.
Search for all cards matching query.
Search for all contact names matching query.
Search for a user by name.
Search for a given query.
Return a dictionary of short UUIDs.
Gets a short id from a string.
Yields a list of vCard files.
Load cards from the card file.
Retrieves an object by name.
Returns a dictionary of available architectures.
Returns a dictionary of available architectures.
Guess the type of the action.
Replace the query with the given kwargs.
Get the first item from the collection.
Delete all pages from the database.
Locate a prefix from redis.
Estimate the work for the given index.
Count the number of records.
Return a connection to the database.
Return a list of strings.
Add an object to the database.
Return the value of a given ``pk``.
Update the data for the redis server.
Save the model to the database.
Deletes the model from the database.
Get a list of objects from the database.
Opens a semaphore file.
Send a result back to the queue.
Add a call to the queue.
Ensure the process is running.
Start the process process.
Returns a dupen object for a given file descriptor.
Wait for the job to finish.
Initialize the commandline arguments.
Close open file descriptors.
Terminate a process and exit.
Recursively close all subprocess.
Gets the exit code for the given processes.
Returns a string representation of the exit code.
Ensure the process is running.
Process event handler.
Split a string into a list of arguments.
Extracts the stack of frames from the debugger.
Runs all hooks on an object.
Clears the stack.
Return the value of an integer.
Process commands.
Add command line to queue.
Return next token from start_position.
Print error message.
Read command line from the command line.
Close the input stream.
Disassemble a message.
Return the number of frames in a frame.
Returns the name of the call function.
Prints the stack trace of a process.
Lookup a subcommand for subcommand.
Display a short help message.
Add a subcommand callback to this queue.
Execute a command.
Show category for category.
The main entry point.
Determine the debug debug message.
Try to get an integer value.
Sets the boolean on the debugger.
Set the value of an integer.
Show whether or not or not.
Show an integer value.
Show the value of the console.
Determine if a line is a Deferred.
Determine if a line is a class.
Exit the debugger thread.
Determine if the background color is enabled.
Determine if the light is dark.
Return the signature of the given frame.
Return a list of all display names.
Return a list of display names.
Read a message from the buffer.
Print debug message.
Runs the program.
Parses a list of values.
Look up the signal name.
Look up a signal by name.
Given a name number, return the corresponding signer.
Set the signal for a signal.
Check that the signatures are correct.
Print info about the signal.
Process command line arguments.
Determine the print method.
Called when the frame is received.
Return module name.
Search for a file in a directory.
Determines the file for the given python script.
Returns a list of all files in the given name.
Write message to stdout.
Prints the main program.
Convert commands to terminal display.
Close the connection.
Write a message to the socket.
Return a list of token identifiers.
Runs a string with the given string.
Add a list of frames to the ignore.
Determine if a filename is a valid file.
Returns the filename of the debugger.
Determine if the trace is started.
Determine if a frame is stopped.
Move frame to next frame.
Prints the stack trace to the stack.
Remove a breakpoint from the database.
Delete a breakpoint by number.
Ensure all breakpoints are enabled.
Enable breakpoint by number of breakpoint.
Delete all breakpoints at a given filename.
Opens an input file.
Read a line from the input stream.
Prompts the user for a user.
Convert a query to a future.
Restore login session.
Determine if a module has been validated.
Iterate over all documents.
Convert a CSV file to stream.
Iterate over all data from a stream.
Convert a string to a date string.
Determines the encoding of a file.
Read lines from a file.
Convert a string to UTF-8 string.
Opens a CSV file and returns a CSV object.
Iterate over a CSV file.
Parse command line interface.
Save a token to a JSON file.
Send a request to the server.
Delete a file. Args: path (str): Path to delete.
Returns the root url for the given URL.
Save token and save token.
Send a request to the server.
Send data to a POST request.
Returns the documentation of the document.
Get raw content of path.
Prints a CSV file to stdout.
Read parameters from a JSON file.
Simplify a docstring.
Create a project with a project.
Upload projects to a project.
Upload a stream to a stream.
Upload a file to JSON.
Parse command line format.
Creates a new User object from a username.
Login to the server.
Post login page.
Fetches the data from the database.
Initialize the page view.
Initialize the view.
Handles rendering of the view.
Called when a message is received.
Update the menu of links.
Returns a list of static URLs for this page.
Called when a message is received.
Called when the DOM changes.
Create a new widget.
Initialize the widget.
Remove the widget from the widget.
Add child to the widget.
Removes the widget from the widget.
Iterate over all widgets.
Sets the attribute of the widget.
Update proxy state.
Notify the changes of the HTML node.
Return list of declarations matching query.
Initialize the widget.
Sets the content of the widget.
Update the state of the block.
Removes the block from the tree.
Update the children of the block.
Reads a file and returns its contents.
Print an error message.
Print error message.
Get product by name.
Create a new session.
Reset the token store.
Returns a list of stores for a given search term.
Set the delivery system.
Gets the menu for a given store.
Add an item to the shelf.
Adds a Paste to the cart.
Adds a side to the shelf.
Removes an item from the database.
Set payment method for payment payment.
Process payment.
Make a GET request.
Make a POST request.
Calls the method on the server.
Adds an item to the menu.
Adds an exit item to the list.
Draws the current screen.
Go through the selected item.
Selects the selected item.
Parses a new menu from the given menu.
Convert a column to a datetime.
Convert a DataFrame to a string.
Helper function for calculating the math function.
Calculate cumulative sum of columns.
Removes old entries from the cache.
Add a time offset to a datetime.
Get learning update updates.
Returns a list of training parameters.
Optimize the optimization of the network.
Compute the first likelihood of the signal.
Initialize the layers.
Compute the total cost of the target.
Apply a function to the training set.
Vectorizes the set of training sets.
Print statistics about the training set.
Train the training on the network.
Generate a sequence of steps.
Compute the alignment weights for each state.
Compute the context vector.
Concatenate a sequence of vectors.
Pad the training dataset.
Compute the objective of the model.
Print progress bar.
Compute the cost estimates.
Invoke the simulation.
Build the loop variables.
Scan for input variables.
Calculate the momentum of the momentum.
Returns whether training is training.
Sets the next batch of epochs.
Load the model parameters from a file.
Train the training step.
Run the training step.
Runs the validation step.
Report the score of the network.
Returns the current set of data set.
Apply a function to this layer.
Logs a message.
Calculate a variable.
Create a list of variables from a dataset.
Creates a shared variable.
Adds layers to layer.
Stack all decoding layers.
Encodes the network layer.
Decodes the network layer.
Create a Gaussian Gaussian Gaussian Gaussian Gaussian.
Registers a layer.
Monitor layer outputs.
Returns a list of all parameters.
Setup the variables.
Compute the output of the model.
Save network parameters to disk.
Load model parameters from a file.
Logs the output of the simulation.
Registers a new update.
Register a new training update.
Registers the training monitors.
Compute the norm of a tensor.
Dump an object to file.
Load an object from a file.
Load model parameters from disk.
Decode the state of the state.
Parses the authorization token.
Remove request elements from request_type.
Login handler for login.
Normalize a dictionary.
Convert a list of items to a dictionary.
Parse a JSON string into a dictionary.
Resolve the given class name.
Create a cookie for this cookie.
Save the session to the session.
Retrieves the cookie from the cookie.
Retrieves data from the server.
Generate the signature for the given parts.
Serialize a value to a string.
Check if the token is valid.
Returns True if the expiration time is expired.
Return the string representation of the provider.
Returns True if text is a binary string.
Return the content of the response.
Gets the user info about the account.
Login to the database.
Returns the key for the session.
Sets the value of the session.
Generate a random Csrf.
Logs a message to the console.
Check if a status is within a category.
Split a URL into parts of a URL.
Sets the headers for the request.
Returns a dictionary of keyword arguments.
Return string representation of obj.
Ensure that an iterable is iterable.
Determine if a b.
Deserialize a string from a string.
Create an audio stream from a file.
Create an audio stream from a numpy array.
Returns a new audio segment with the given other.
Return a string representing the current state.
Determine the frontend of the frontend.
Determine the first offset of the frontend.
Calculate the frontend of the frontend frontend.
Match the offset frontend of the frontend.
Determines the subsequence of the frontend.
Return the frontend of the frontend.
Iterate over all frontends in the frontend.
Return the indices of the offsets in the frontend.
Remove gaps from the frontend.
Removes outliers from frontend.
Merge adjacent gaps in a mask.
Split mask mask with masked masks.
Divide a 2-dimensional array of two masks.
Perform ANTsR ANTsR function to perform ANTsR ANTsR function
Apply a bandpass filter.
Low-level filter.
Convert a list of data to a Tensor.
Expand the dataset and return a new dataset.
Determine if a list is equal.
Load the confusion matrix from the audit file.
Convert a list of data to a Tensor.
Update the index of the pip config file.
Determine if the requirements files exist.
Process an error message.
Get information about the stream.
Open the LSL stream.
Gets the child element.
Gets the next sibling of this node.
Return the previous sibling of this node.
Sets the name of the entity.
Sets the value of the element.
Append a child to the end of the node.
Prepend a child to the end of the node.
Returns a copy of this element.
Prepend an element to the end of this element.
Removes the child node from the node.
Return a list of OpenL streams.
Provide a pair of keys.
Auto-plete keys.
Compute the end-grams of tokens.
Iterate over processors.
Apply a function to an iterable over a sequence.
Given a word, return a random string.
\x1b[1word\x1b[1b[0\x
Determine a random index.
Extracts the results from the database.
Print help about the command.
Print info about redis.
\x1b[0mNAME\x1b[0mNAME\x
Dump a geohash hash.
Index a field.
Display the best score for a word.
Send a response to a stream.
Map multiple requests to a list of requests.
Extracts the bits from the given array.
Convert a type to a list of bits.
Convert a slice to a slice.
Find files matching pattern.
Returns True if the given iterable is equal to the given iterable.
Iterate over a list of body functions.
Return the logarithm.
Determine whether the given number is zero.
Adds a case to the case.
Add the default statement to the stack.
Registers a VCDD variable.
Called when the simulation is registered.
Log a change of the current time change.
Render a method.
Load all agents from the unit agent.
Return the association of this group.
Yield distinct values from an iterable.
Yield items from a collection.
Flatten an iterable of iterables.
Merge nested values from a dict.
Remove all signals from a netlist.
Checks if the given procedure is a boolean.
Try to merge a problem.
Iterate over all processes.
Called when a new write request is received.
Given a list of statements, return the name of the output.
Cuts all drivers that have been executed.
Synthesize the address of the receiver.
Determine the maximum ID for the given stm.
Determine the maximum number of statements.
Write data to the interface.
Return the direction of the direction.
Loads all interfaces.
Returns a list of signals for this interface.
Returns the physical name of the resource.
Return the bit length of the interface.
Determines the sensitivity of an operation.
Convert a value to a boolean value.
Reconstructs a HST record into a dict.
Return the word count of the word width.
Group words by the given transaction.
Packs data into binary data.
Clean up the signal meta data.
Given a list of statements, return the enclosing enclosing enclosing edges.
Discovers the presence of a signal.
Returns the RTL context.
Called when the result is executed.
Called when a new object has been merged.
Determine whether a statement is a list of statements.
Merges a list of statements into a dictionary.
Merge statements into a list of statements.
Reduces a list of statements from a list of statements.
Called when the parent event is called.
Sets the parent of the parent stderr.
Registers a list of statements.
Removes all streams from the database.
Clean up all interfaces.
Iterate over the fields of the fields in the field.
Convert a signed value to a signed value.
Add sensitive sensitivity to the system.
Determine whether the conditions are satisfied.
Called when an import signal is created.
Convert a value to a Vector.
Recursively process all events of a block.
Evaluate the parameter value.
Sets the value of the object.
Convert a list of interfaces to a dict.
Removes memory from memory.
Determine the index of the ring.
Convert the value into a Value object.
Convert to autocast value.
Replace the value of the given sng value.
Iterate over all parameters in the specified interface.
Connects a set of signatures to a device.
Packs an interface into a list of interfaces.
Builds the interface from the target system.
Registers an interface.
Try to reduce the value of a signal.
Try to reduce the value of a signal.
Return a new name of the current scope.
Return the serialization for the given object.
Returns the condition of the condition.
Return a SimBitST bit representation.
Get the name of a constant.
Cuts up the driver for the receiver.
Loads the children of the given dtype.
Loads a record from the given dtype.
Loads an object from the given dtype.
Return the width of the bit array.
Iterate over all children of this instruction.
Add a sign to the sign of the sign.
Return the indentation for the given indent number.
Raise an exception if an attribute is available.
Registers a parameter.
Updates the parameters of this object with the given parameters.
Register a unit name.
Register a new interface.
Registers an array with the given name.
Return a single driver.
Stat the result of all operands.
Returns the result of the operand.
Return a copy of this context.
Try to connect to the interface.
Propagate the clk from the object.
Propagate the CLSTSST node.
Propagate the model from the cls.
Propagate the RSTST structure.
Propagate the model from the object.
Iterate over bits in the bitwise range.
Serialize an exception if the exclude is excluded.
Serialize an entity to a serializer.
Helper method to determine whether the parent is unique.
Returns the full name of this object.
Make an association with the given arguments.
Convert a unit-like object to a simulation.
Reconnect signals from the model and signals.
Compute the simulation of the simulation.
Initialize the event handler.
Add a signal to this signal.
Registers a signal.
Connects the direction to the wire.
Return the receiver's direction.
Determine if the given signal is a signal.
Add a process to the queue.
Adds a simulation to the simulation.
Schedule an update event.
Schedule the priority value for each value.
Return the conflict strategy for a new set of values.
Execute the combine process.
Iterate over sequence of sequences.
Iterate over all values.
Read a value from a signature.
Apply the signal to the signal.
Add a process to the queue.
Simulate the simulation.
Convert a list of statements into a Tensor.
Calculate the hash of two hashes.
Calculate the average hash of an image.
Calculate the distance between two images.
Sets up the platform.
Update the device state.
Marks the volume.
Updates the volume.
Downgrades the volume.
Set the volume level.
Reset the board.
Return the piece at the given square.
Removes the piece at the given square.
Set the piece at the given position.
Determine whether the given move is a proof.
Determine if the game is a suicidal.
Determine if the game is played.
Determine whether the card is a check.
Determine if the region is a 4-letter pattern.
Remove a move from the stack.
Return a string representing the board.
Push a move onto the stack.
Generate the hash of the board.
Returns the symbol for the piece.
Initialize a piece from a string.
Return the string representation of the piece.
Create a piece from a string.
Iterate over all commits in a string.
Parse a commit into a dictionary.
Executes the command from the command line.
Generate yaml file.
Cast a value to a string.
Returns a list of dates between two dates.
Parse string and return a date string.
Loads the currency from a currency file.
Set missing missing values.
Returns the currency for a currency.
Generate animation for animation.
Read a record from the file.
Write a record to the file.
Return a mapping of words to memory.
Read comments from file.
Close the file.
Generate the position of all positions.
Close the file.
Load coefficients from dafile.
Recursively visit the log level.
Check if `op` operation.
Check to see if a dict is a dict.
Check if a statement is a string.
Check for keyword arguments.
Replace exception handler.
Detect logging level of a node.
Return the name of an exception handler.
Get an id from a value.
Check if a node is a bare exception.
Check for exception info.
Delete a file from the database.
Returns the rendered HTML content.
Determine the response of the response.
Escape a string.
Configures the given module.
Convert string to CamelCase.
Ensure all models are indexed.
Parse a list of prices into a list of prices.
Load a list of lines from a file.
Parses a line from a CSV line.
Translate a symbol to a string.
Loads all symbol maps.
Returns a session object.
Import prices from a CSV file.
Gets the last price for a given symbol.
Downloads prices from a currency.
Prune the given symbols.
Returns a session for the default session.
Add a new symbol to the blockchain.
Lists all symbols.
Get a symbol by symbol.
Read lines from a CSV file.
Maps a Price to a PriceModel.
Maps a Price to a Price object.
Reads the configuration file.
Returns the path to the template file.
Copy the user configuration file.
Returns the path of the config file.
Returns the content of the config file.
Sets the value of the configuration.
Get the value of a configuration option.
Save config file to disk.
Parse symbol and return namespace.
Add a price to this store.
Download a price from a currency.
Return a session.
Returns a list of prices for a currency.
Get a list of prices for a given symbol.
Delete all security symbols.
Removes all securities for a given symbol.
Downloads a currency from a currency.
Returns a list of security securities.
Return a partial state.
Update the children of the child call.
Recursively traverse the tree.
Assert that the selected option is selected.
Return all defined items.
Get a parser from a parsed tree.
Test whether a context is a context loop.
Check that the context is present in the current state.
Check that the given name is valid.
Check that the given part is a part of the given index.
Compute the anomaly of the model.
Initialize the application.
Add a server to the LDAP server.
Remove a connection from the server.
Removes the connection from the server.
Attempts to authenticate the server.
Attempt to authenticate the LDAP server.
Get all groups in a group.
Get user information about user.
Get user information about the user.
Get an object from the database.
Connect to the LDAP server.
Creates a new connection.
Make a connection to the LDAP server.
Destroy a connection from the database.
Search for all container names.
Search for all records.
Search for all artifacts in a collection.
Speak the database.
Annotate the message.
Retrieve secrets from the environment.
Update the headers of the server.
Requests the secrets for the client.
Download a file from a URL.
Streams a stream to a stream.
Update the authorization token.
Get a folder from a folder.
Read the response from the response.
Get bucket name.
Update the secrets dictionary.
Initialize the server.
Load secrets from the server.
Prints the logs for a given name.
List all images in bucket.
Creates a folder with the given endpoint.
Initialize the transfer client.
Search for all containers.
Print the status of the server.
Add a variable to the backend.
Remove a variable from the backend.
Activate a backend.
Delete backend from backend.
Updates the base base image.
Generate basic authentication header.
Generate an HMAC signature.
Generate the header for a request.
Send a request to the server.
Make a HEAD request.
Parses a GET request.
Verify that the SSL certificate is valid.
Remove an image from an image.
Return a dictionary containing information about the lookup file.
Return list of requirements for given lookup.
Get the singularity version.
Check for installation.
Returns the path to the store directory.
Returns the thumbnail path.
Run command on the system.
Get metadata from an image file.
Update the credentials for the account.
Print out information about the response.
Stop the command.
List logs in a container.
Returns a list of collections.
Get secrets from environment.
Display an IPython notebook.
Get manifests from a repository.
Get the manifest from a repository.
Determine the download directory.
Extract the environment variables from the server.
Update the base url.
Update the authentication token.
Get metadata for artifacts.
Get the settings for the client.
Retrieves a setting from the config file.
Update client settings.
Generate the authorization string for the given names.
List builders for builders.
Loads all templates from a given name.
Gets the IP address of the network.
Run the build command.
List all containers in bucket.
Search for all containers in the bucket.
Runs the search server.
Command line interface.
Initialize the database.
Get the build template template.
List all endpointpoints.
List all files in a directory.
Return a URL for a dropbox.
Reads secrets from sregistry.
Initialize the cloud service.
Delete an object from a bucket.
Delete a file or directory.
Delete an instance by name.
Returns a dictionary of subparsers for the given parser.
Generate string representation of text.
Returns a path to a temporary directory.
Extract a tar archive.
Extract a tar archive.
Calculate hash of a file.
Read content from file.
Read a JSON file from a JSON file.
Remove files from files.
Push a file to disk.
Get a collection from the database.
Get a collection by name.
Get a container by name.
Get all images in a container.
Inspect a collection of fields.
Rename an image to a container.
Move an image to a directory.
Remove an image from the container.
Parse a recipe from a recipe string.
Find a single recipe for a given filename.
Create a tarball for a given package.
Update metadata for a blob.
Format a container name.
Determine if the console color should be displayed.
Determine whether the given level is an error.
Write message to stream.
Add a table to the table.
Push an image to the server.
Get a template for a given name.
Get the manifest of a repository.
Returns the build template for a given manager.
Reads secrets from config file.
Raise error on error.
Create a Proxy class from a temporary file.
Return URL for user.
Generate url url for given email address.
Determine if the given email is a valid avatar.
Generate url for email profile.
Generate a sequence of chimera.
Generate a block of chimera.
Enumerate a list of resumes.
Iterate over a molecule.
Apply transform to a set of reactions.
Calculate the canonical molecule.
Validate a list of symbols.
Convert a list of sms to a normalized list.
Enumerate a list of peptides.
Convert a list of molotypes to a canonical list.
Returns the tautomer for the given mol.
Returns the first element of the molecule.
Remove a molecule from a molecule.
Returns the isotopes for the given mol.
The charge of the charge.
Parse the molvcf file.
Removes the structure from the molecule.
Choose a molecule from a molecule.
Evaluate the IPR problem.
Get all members in the organization.
Get all team members.
Collect a list of repositories.
Get the total number of contributors for a given repo.
Return the list of pull requests for a given repo.
Get all issues in a repository.
Get the readme from the repository.
Get the license for a given repo.
Get all commits in a repository.
Write a JSON file to disk.
Write totals to a file.
Write languages to file.
Check if a directory exists.
Remove all translations from a file.
Return a list of GOs that are set of users.
Create a GitHub login session.
Check for API requests.
Connect to GitHub API.
Iterate over all repositories in a repository.
Get organization from organization.
Write the cluster to a file.
Create a project from a repository.
Convert a license string into a dictionary.
Retrieves information about the repo.
Gets a list of releases for a given URL.
Get a list of referrers for a given URL.
Retrieve the data from a JSON file.
Write a JSON file to disk.
Write data to a file.
Check for missing data.
Write data to a file.
Write a list of references to a file.
Read a JSON file from a JSON file.
Iterate over a given URL.
Process a JSON file.
Login to GitHub.
Gets all emails from the organization.
Write the email to a file.
Connect to a session.
Connect to Gitlab library.
Query for repositories.
Compute the number of hours for a month.
Remove null values from dictionary.
Reads the query from a file.
Waits for a reset timestamp.
Print the number of times.
Load data from file.
Save data to disk.
Create a VTFS connection.
Create a CloudFS analysis for a project.
Creates a TFS client.
Create a GitFS client.
Create a TFS client.
Returns a list of git repositories.
Returns a list of all branches in a collection.
Gets the number of years for a user.
Calculate the total number of commits.
Write a list of commits to a file.
Log a timing message.
Log a history message.
Roll up the top level of the ledger.
Convert a database value into an enum value.
Convert a value to a python enum value.
Returns the value for the given value.
Resolve a path to a node.
Given a list of dictionaries, return a dictionary of dictionaries, which is a dictionary
Return the mean value.
Mark the counter of the counter.
Returns the mean of the current counter.
Mark the value as a value.
Send a metric to the scheduler.
Serialize a metric name.
Format a metric string.
Send a metric to the buffer.
Try to get an error setting.
Check that data is a JSON string.
Get the value for the given section.
Return a dictionary of ledger identifiers.
Returns a list of choices.
Return a mapping of invoice numbers.
Create a view from a Flask view.
Create a form view for the form view.
Create a view view view.
A decorator that creates a Flask ViewView.
A decorator that generates a Flask REST view.
Create a model set of model views.
Read a stream from a file descriptor.
Read data from the socket.
Called when the connection is closed.
Add a watch for a path.
Unregister a descriptor.
Setup a watch object.
Setup the event handler.
Retrieves an event from the queue.
Touch a touch event.
Updates the progress bar.
Update the progress bar.
Close all connections.
Connect to the server.
Queries a lookup query.
Sets the maximum number of connections.
Called when a message is started.
Register a new listener.
Remove a listener from the given name.
Triggers event handler.
Publish a message.
Set the feature matrix for the feature.
Compute the prediction of the input data.
Remove duplicate files from fastq files.
Read depth counts from depth file.
Sets the template file.
Sets the name of the main channel.
Render a template using template.
Render the template as HTML.
Update the main loop.
Update the attributes of the template.
Sets the secondary inputs for a channel.
Parse assembly file.
Get the GC content of the sequence.
Returns the total length of the assembly.
Write the assembly file to disk.
Write the report to a file.
Removes a text from a text string.
Check for sanity checks.
Determine the source of a fork.
Split a string into a list of strings.
Given a list of plist objects, return a list of linear connections.
Add identifiers to identifiers.
Remove unique identifiers from identifiers.
Checks that the configuration files exist.
Return a mapping of headers to a position.
Convert a string to human readable number.
Calculate the size of a string.
Retrieve the pipeline processes.
Reset the state of the simulation.
Update the status of the process.
Retrieve lines from a file.
Assigns resources to memory.
Updates the log parser.
Display the screen on the screen.
Move up the top level of the top line.
Updates the right left right right side of the right side.
Read lines from the log file.
Prepare static files for static files.
Load a JSON file from disk.
Generate the hash of the pipeline.
Returns the path to the next pipeline file.
Main entry point for assembly.
Runs a pipine pipeline.
List all recipes.
Validate a pipeline string.
Build a pipeline pipeline.
Build a pipeline from the pipeline.
Determine the pipeline pipeline.
Returns a string describing the component of the given component.
Write a report to a JSON file.
Parse the log file.
Fix the names of the assembly assembly.
Remove files from fastq files.
Parse a list of files.
Parse the file and store it in the file.
Extracts contigs from contigs from a string.
Write the report data to disk.
Parse assembly file. Args: assembly_file (str): The assembly of the
Get summary statistics for contigs.
Retrieve the boundaries of a window.
Calculate the GC property of the given length.
Calculate the GC speed of the contigs in the region.
Run command line analysis.
Write JSON report to JSON.
Parse the log file.
Parse the name of the process name.
Add a process to the process.
Determine if a template is a tree of topology.
Build the header for the template.
Add footer to file.
Initialize the init process.
Set the secondary channels of the source.
Sets up the status of the process.
Returns the manifest string for the plugin.
Initialize the configuration files.
Write a file to disk.
Write configuration file to disk.
Export the template to stdout.
Export all directives to the server.
Build the template file.
Sets the number of kmers for the given kmer.
Get the id of the report.
Update the trace of the trace file.
Updates the log watchwatch watchwatch.
Send a live report to the server.
Initialize live reports.
Close the connection to the network.
Convert an adapter file to an adapter file.
Perform Picard fastq files.
Prints a colored message.
Iterate over the process.
Convert a qualstr string to a range.
Filters the assembly of the assembly.
Retrieve assembly size and assembly size.
Run the analysis.
Convert camel case to CamelCase.
Collects all process classes.
Generate a JSON file.
Map wx, wx, wx, w.ndarray.
Generate median filter based on X.
Compute Gaussian Gaussian Gaussian problem.
Compute the SMM squared distance.
Compute the number of neighbors of the network.
Apply the gaussian filter to the given axis.
Compute the n-squared distance matrix.
Calculate circular shift from x.
Evaluates the embedded space in a space space.
Plot the format of the plots.
Plot boundaries of boundaries.
Plot labels of a set of labels.
Returns a list of features for a given feature.
Convert a list of features to a 2d array.
Fit the model on X.
Reads all references from an audio file.
Search for Estimation Estimation.
Returns a list of all bounding modes.
Retrieve the configuration for a feature.
Get a list of dataset files.
Reads the hierarchy from a list of dictionaries.
Get the duration of a feature file.
Write a VTK record to a file.
Get dataset file name.
Aligns the beats for a song.
Estimate the number of frames from the audio stream.
Read beats from annotations file.
Compute the playback features for a given frame.
Returns a list of all parameter names.
Compute frames for the frame.
Retrieves the frame time of frames.
Read features from file.
Preprocess the feature names.
Post-process estimation.
Parse command line options.
Print statistics about the results.
Compute the statistics for an annotation.
Process track of track records.
Determine the filename for the given boundaries.
Compute all features in a file.
Iterate over all features in a file.
Calculate the gaussian cost of Gaussian.
Normalize log-normal variates.
Normalize a fraction of f.
Calculate the number of frames from a given duration.
Removes intervals from a list of labels.
Searches a signal from a signal.
Synchronize two labels.
Process the segmentation of the segmentation.
Aligns the hierarchy of the hierarchy.
Calculate distance between the given indices.
Estimate the k-max threshold for the given threshold.
Retrieve cluster data.
Run k-means.
Compute the BIC problem.
Return magnitude of x.
Convert JSON data into bounds.
Convert bounds to bounds.
Convert a JSON file to a list of labels.
Convert a JSON file to a list of beats.
Compute the MF2 frame of x, y.
Compute the labels of a set of labels.
Filter activation matrix with activation matrix.
Gets the boundaries for the given boundaries.
Gets the label for the given labels.
Run the hierarchy of the hierarchy.
Run flat format of a flat file.
Main entry point for translation.
Create a new task.
Span wrapper around `iter`.
Send a string to the target stream.
Return a dictionary of translations for a given language.
Print translated translations.
Remove edges from a network.
Convert a network to a Pandas DataFrame.
Create network network from a file.
Parses a node into a dictionary.
Makes an OSM query and returns the response.
Builds a query string for a node.
Returns True if value is a regular expression.
Compare the value of an expectation.
Compare `expr`.
Triggers all methods of an instance.
Gets a matcher by name.
Initialize a matcher.
Sets the request body.
Sets the request body.
Sets the value of the container.
Append function to list of functions.
Called when a request is triggered.
Add headers to the request.
Check that a set of headers are present.
Check that the headers are present.
Add params to the request.
Sets the request body.
Sets the request body.
Add XML to the request.
Load the response from a file.
Persist the model.
Sets the error message.
Return a reply with the given status.
Match the given request.
Sets the mock engine.
Create a mock mock.
Remove a mock from the pool.
Activate the mock engine.
Disable the mock engine.
Determine if the network can be used.
Returns True if the request matches the given request.
Return a copy of this object.
A context manager to use the engine.
Adds an interceptor to the engine.
Removes an interceptor for the given name.
Retrieves the settings from the database.
Returns the SQL for the encrypted column.
Add value to model instance.
Get the password for the given value.
Get a column from the cache.
Returns the password for the given value.
Compute the base estimator for the given slope.
Return the covariance matrix.
Recursively recursively recursively recursively recursively recursively
Calculate the average savings of all branches.
Calculate the variance of the tree.
Returns the simulation model with the given slope.
Set the convergence of the time series.
Calculate the number of branches for each branch.
Calculate the cost between two nodes.
Attaches the tree for merging branches.
Normalize a profile profile.
Sets the Gtracer_site_site attribute.
Set the gtrrtracer object.
Set the length of the sequence length.
Attaches the sequence of sequences in the tree.
Initialize the tree structure.
Initialize nodes and nodes.
Calculate the distance between branches.
Calculate the mutation matrix for each branch.
Expand the sequence of nucleotide sequences.
Compute the state of a node.
Calculate the total length of the tree.
Compute the likelihood of the tree.
Return the largest branch length of the node.
Compute the best branch length of a node.
Recursively reconstruct a sequence of sequences.
Calculate the inverse matrix.
Creates a new model with respect to rates.
Check if the problem is correct.
Compute optimal optimal version of a sequence.
Compute probability of probabilities.
Evaluate the evolution of a profile.
Log likelihood of a sequence.
Sets the branch length of the branch.
Plot the root of the root robot.
Prints the likelihood of the model.
Add a collocation model to the tree.
Find the best root of the tree.
Ensure the tree directory exists.
Create a gtrrtr from the gtrr model.
Read VCF file if necessary.
Calculate the FWHM for the given distribution.
Creates a new distribution function for the given position.
Assigns the date and dates for each node.
Setup the tree for treplements.
Makes time series of time series.
Compute the likelihood of the tree.
Convert the date to date dates.
Calculate the date of the date for a given node.
Returns the minimum value of an interpolation object.
Calculate the median grid from an interp object.
Convert datetime to int.
Initialize the simulation from the given time model.
Close the client.
Receive a single line from the buffer.
Send data to the client.
Send an instruction to the device.
Convert unicode string to UTF-8 string.
Load an instruction from an instruction.
Encode a string to a string.
Encode instruction.
Returns the URL for the given class.
Return the URL for this instance.
Returns the URL for the given class.
Downloads a file and returns the path.
Return the parent job object.
Prompts user for password and password.
Login to the server.
Prints the user's username.
Print information about a user.
Returns a copy of a chromosome.
Returns a copy of the genomic chromosome.
Returns a list of facets matching the facets.
Process a list of filters.
Gets the next item from the cursor.
Execute the query and return the response.
Migrate a dataset from the database.
Run the solio server.
Construct a new instance from a dictionary.
Logout out the token.
Return the child task object.
Parses the SNPE annotation dictionary.
Retrieve authentication credentials from netauth.
Save a file to disk.
Formats a value into a string.
Builds a row of cells.
Build a row of columns.
Return the column attributes for a row.
Migrate the dataset from the database.
Uploads files to local filesystem.
Validate a full path.
Check that the URL is valid.
Annotate records with multiple records.
Evaluate the expression.
Sets the format_name of the message.
Registers a new formatatter.
Returns an iterator over the given data format.
Returns the path of the user configuration file.
Returns a list of system paths.
Returns a list of file names.
Write the default config file to disk.
Read config files from a list of files.
Truncate string length.
Replace all strings in a string.
Runs multiple commands.
Apply ``cmd`` to ``cmd``.
Initialize the parser.
Run the command line.
Runs the preprocessing command.
Truncate rows of data.
Formats a row of headers.
Auxiliary function that returns a VTK table.
Generator that yields a table of data.
Determine if the given type is valid.
Check if the given type is a boolean.
Determine if type is a binary type.
Generate a key for the given template.
Generate a private key pair for the given template.
Finds all objects in a template.
Insert an image into an image.
Export panels from a database.
Return the first day of a weekday.
Repeat the number of days until the day.
Repeat a time series until the end of the end.
Helper method for getting the number of items.
Handle a single chunk of events.
Export variants from a database.
Export transcript file.
Add a user to the database.
List variant variants.
Generate a variant for a specific institute.
Starts a variant.
Verify that the institute is valid.
Generate a CLAR record.
Retrieve a list of evidence variants.
Generate a variation policy.
Return the evaluation of an evaluation.
Gets the classification for the given criteria.
Uploads a panel to a panel.
Downloads a verified verification file.
Return a dictionary with alias names.
Add additional errors for each gene.
Send a request to the MATCH API.
Retrieves a list of nodes from MME.
Retrieves the coordinate coordinates for a given chromosome.
Determine the sub category for the gene.
Determine the length of the variant.
Given a position, determine the end of the end, return the end of the end of
Extract coordinates from a chromosome.
Update a panel.
Export a panel to dashboard.
Edit a gene.
Load a delivery report.
Returns a list of all GO terms for a given query.
Print whitelist whitelist.
Build a phenotype from a dictionary.
Add a gene to the database.
Convert a query string to JSON.
Add institute to institute.
List transcript transcripts.
Return a list of day events.
Iterate over variants in a database.
List variants in a database.
Generate a dictionary of variant information.
Generate export header for variants.
Given a list of genes, return the prediction dictionary.
Determine if a BAM file exists.
Get observations for a particular variant.
Parse a gene-seq file.
Convert transcript to a string.
Gets the end position of the variant.
Returns the frequency of a variant.
Generate a human-readable representation of a variant.
Return the URL for a variant.
Return the URL for the cosmic star.
Generate a link to a beacon.
Generate the URL for a variant.
Return human readable time.
Return a list of inherited classes that match the given variant.
Return a list of callers for a specific variant.
Generate Cancer VariantVariant variants.
Export evidence to institute.
Returns a dictionary containing the Singular submission for the given institute.
Generate a dictionary of variants for a specific variant.
Create a classification for a specific population.
Store the evaluation of an evaluation.
Uploads a panel to the database.
Export a verified verification file.
Export all genes in a adapter.
Parse and return a dictionary.
Parse compound compounds.
Lists all genes in a database.
Return an instance of institute.
Lists the collection names.
Generate institute institute.
Get a file handle.
Get the network interface from request.
Returns the next iteration of the net.
Check for year and year.
Check for week day.
Parse a list of individuals.
Parse a pedigree file into a list of pedigree samples.
Builds a dictionary for evaluation of a particular variant.
Given a list of acmg terms, return a list of BAM files.
Get variants of a case.
Gets variants for a specific institute.
Returns a single variant object for the given document.
Returns a list of variants for a gene.
Returns a list of all evidence verified by institute id.
Returns a list of incidents for the institute.
Returns a list of all variants that are valid.
Generator that yields all variations of a variant.
Delete variants from the database.
Return a list of overlapping variants.
Returns a dictionary of variants that are evaluated in the case.
Returns a list of variants that match the specified sample.
Get a connection to the server.
Extracts objects from the form of the form fields.
Generate the header header for the given submissions.
Convert a list of submissions into CSV lines.
Load a panel from a panel.
Build an Exon object from an exon object.
Delete a panel from the database.
Remove all indexes from the database.
Delete user from database.
Drops genes from database.
Drops exons from the container.
Delete a case.
List individuals.
List cases for cases.
Loads a user from the database.
Login to GitHub.
Build a institute from an institute.
Delete an event from the collection.
Get events for a institute.
Get all events for a user.
Remove a phenotype from the database.
Parse a list of gene positions.
Check whether a chromosome is valid.
Return a dict of hpo terms.
Print transcript transcripts.
Fetch exons for exons.
Load a region from the database.
Get all events for a given month.
Returns a list of intervals that are live.
Parse the requirements file.
Gets the gene associated with the given id.
Update a panel in the panel.
Create a new panel.
Export a panel from a store.
Return information about the archive.
Migrate the database from the database.
Show GO terms.
Initialize the extension.
Register the blueprint.
List aliases for a symbol.
Build a panel from a panel.
Export a verified verification file.
Export variants from a database.
Returns the VCF entry for the variant.
Serve the application.
Generate a md5 key for a list of arguments.
Initialize the application configuration.
Sets up the database.
Index the database.
Setup the database.
Setup a demo server.
Setup the database.
List institute IDs.
Parse the list of genetic models.
Lists all genes in a institute.
Add institute to institute.
Get institute from institute.
Returns True if the given date matches the given date.
Convert a string to a date format.
Generate a list of gene genes.
Parse the rank score from the database.
Add a user to institute.
Check connection to MongoDB.
Load a report report from the database.
Add a user to the collection.
Generate pileup pileup.
Load exons from an exon transcript.
Update compound compounds.
Add links to a gene.
Lists the HSNs for a given symbol.
Parse a list of hgpg files.
Gets the CLARVAR for a given user.
Update the record with the given id.
Gets the ID of the clinv var_id for the given submission.
Add a new submission to the database.
Update the status of a specific submission.
Lists all records for a given institute.
Deletes a CLAR object from the given object.
Given a case_id, return a dictionary of CLVARVs, return a dictionary
Parse GO IDs and return a dict.
Return a list of all genes in the database.
Gets a gene's gene.
List the genes in the database.
Return institute and institute institute.
Returns a list of institute ids.
Retrieve the hgpg ID for a gene.
Update the gene panel.
List evidence for a given api key.
Loads evidence terms from a database.
Parse the frequency annotation from a dictionary.
Parse the frequency frequencies for a variant.
Print users about users.
Compare a new model with the same model.
Update the mime version of a gene.
Add a panel to the panel.
Gets a panel from the panel.
Delete a panel from the database.
Get gene panel by name.
Returns a list of genes for a gene.
Convert a dict to a set of gene annotations.
Update a panel in the panel.
Adds a new panel to the database.
Get all clinical symbols associated with a case.
List cases for cases.
Emit a record.
Load all indexes in the database.
Update the indexes in the database.
Drop all indexes.
Build a mongo query query for the given query.
Given a query query, return a dict of consensus signatures.
Filter a mongo query based on the query.
Filter gene annotations based on query.
Remove the database from the database.
Parse a CSV file.
Load a set of records into a database.
Load Transcript objects into a collection.
Load a list of transcript objects.
Search for a specific hgpg file.
Return the ID of a hgnemonic.
Return a list of all genes for a given symbol.
Get all genes in a build.
Return the number of genome builds.
Drops all builds from the build database.
Drops all transcripts from the build database.
Drops exons from the database.
Get transcript transcripts.
Return a dictionary of hgnccs for a given build.
Gets a gene by name.
Return a dictionary of aliases for a given alias.
Return a dictionary of Ensembl gene names.
Return the hgpg file corresponding to hgpg.
Add the hgpg_id to the database.
Returns a dictionary of intervals for the gene.
Implements the MIM table.
List cases for a institute.
Given a institute, returns a dictionary.
Makes sure that the institute matches the institute.
Makes sure that the institute matches the given institute.
Delete a MME.
Render a case report.
Determines the diagnosis of a case.
Update institute status.
Assign an institute to a institute.
Return the list of terms for the query.
Mark a valid institute.
Marks the given institute.
Send a delivery report to the database.
Share a institute to the institute.
Reverse the institute.
Search for research institute.
Convert a VCF file to a CSV file.
Convert a single record to a single record.
Returns a dictionary of cases for the case.
Return list of study submissions.
Export the METS file for each sample.
Returns a list of heterozygous diseases.
Convert a VCF file into a dictionary.
Return a dictionary with the given institute.
Get unevaluated evaluation of a database.
Delete a MME from the server.
Fetch the MIME matches against the given institute.
Search for a matching MIME type.
Fetch genes from a database.
Parse callers for variant calling.
Build a transcript from a transcript.
Build an institute from a database.
Parse the cadd-add-add-add-add-add-add-
Parse a case of cases.
Update a Variant object.
Update the variants of a variant.
Update compound compounds.
Update the bounds of a variant.
Update compound variants.
Adds a variant to the collection.
Upsert a variant from the database.
Load variants from a collection.
Assign a case to the database.
Creates a new case for the given institute.
Determines the diagnosis of a problem.
Mark a case of analysis.
Verify the order of a variant.
Returns a list of events ordered by institute.
Validate a specific variant.
Mark a case for a case.
Update the suspicion for a given institute.
Update the evidence for a study.
Parse a dictionary of DOI IDs.
Parse a simple simple string representation.
Generate the document id for a document.
Convert a panel to a set of genes.
Returns a new variant id from a variant object.
Return the number of cases for the institute.
Update the dynamic gene list.
Get a case by its id.
Deletes a case from the database.
Adds a case to the database.
Replace the case in case.
Update the case for the case.
Creates a new evaluation of a variant.
Get evaluations for a variant.
Parse transcript lines from transcript file.
Parses the ensembl ensembl ensembl ensembl ensemb
Parse ensembl ensembl ensembl ensembl ensembl transcript
Parse a list of Ensembl objects.
Parse an exon-line transcript file.
Parses ensembl ensembl ensembl ensembl ensembl
Initialize a logger.
Return a dictionary of mappings from a file.
Retrieve the population of genes.
Convert string to int.
Format the month and month.
Format day of day.
Format the month name.
Add the popup menu to the popup.
Extracts a panel from a panel.
Parse a gene panel.
List all diseases.
Drops the hpo collection.
Dump all users in the store.
Parse a string into a dictionary.
Returns a list of conservations for the population.
Get all cases in a database.
Get all cases for a database.
Return a JSON response.
Extracts the year and month and month.
Check for scheduled events.
Get a specific GO term.
Return the list of terms for a given query.
Get a record by id.
Return a list of evidence terms for a given hg.
Adds a new gene to the database.
Generate a list of GO Terms.
Read the hdf5 file from a file.
Setup the time series of time series.
Compute the LST position of the vehicle.
This function is used to create a blank noise area.
Calculate the extent of the plot.
Plot the waterpoint for watermarks.
Plot time series of time series.
Write a file to disk.
Calculate the bandpass ratio.
Convert a sequence of data to a mean.
Calculate the fraction of fracam.
Write a string to a FASTA file.
Return the closest value in xarray.
Rebuild the mean of a given d.
Unpack data from a byte array.
Compute the difference between two channels.
Plot diagram of Diagrams.
Calculate selection size.
Calculate the shape of the selection.
Sets up the frequency of the channel.
Populate the timestamps of the trajectory.
Calculate the number of channels.
Calculate the number of blobs.
Determine if the stream is a high level.
Read all data from the stream.
Read a row from the file.
Read data from a container.
Update the header of the grid.
Print information about the selection.
Write a file to disk.
Write the image to disk.
Write hdf5 file to disk.
Determine the size of a chunk.
Gets the size of the chunk.
Retrieve the plot data from the plot.
Command line tool for plotting.
Read the first header and return the first header.
Find the number of blocks in the file.
Print statistics about data.
Plot histogram of data.
Generate the filter header for the filter.
Find the size of a file.
Integrate a frequency spectrum using the given name.
Calculate the center of a frequency.
Calculate the ratio of frequencies.
Calculate the time series of data.
Return the length of a file.
Determine if a file is a stream.
Generate the signature of a file.
Calculate the number of samples in a file.
Return a dictionary representation of the current frame.
Add a sub-command parser to a sub-command parser.
Makes a command line parser.
Remove comments from text.
Add a default name to the database.
Parse a list of lines into a JSON file.
Parse a zone file.
Quote data from a dictionary.
Parse a JSON string from a JSON string.
Convert a list of classes into a Python package.
Convert a record to a dictionary.
Load a record from a dictionary.
Load a JSON file from a JSON string.
Adds a schema to the database.
Returns the schema for the given record name.
Return a dictionary representation of the model.
Returns a dictionary containing the schema schema for the given record.
Get the root schema for a record.
Iterate over mrrrs.
Writes the output of the given output to the output stream.
Pushes the first item onto the stack.
Search for search results.
Returns raw search results.
Returns all entities in the collection.
Returns a new entity from the collection.
Given a quote, return a new quote.
Escape a string.
Creates an elementary rotation matrix for the given axis.
Calculate the average variance of vars.
Calculate the standard error error.
Calculates the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of
Calculate the magnitude of a GMR.
Calculate the average number of steps.
Calculate the angle between two angles.
Transform coordinates to cartesian coordinates.
Transform sky coordinates to sky coordinates.
Transform the covariance matrix using the covariance matrix.
Calculate the error factor for the given observable.
Convert value to unicode string.
Takes a sequence of elements and returns the result.
Exclude all elements from the collection.
Returns a copy of the collection.
Returns a copy of the collection from the collection.
Returns a copy of the collection.
Returns a copy of this collection.
Find node matching node.
Returns the path to the sys.
Given a list of events, return a list of run simulations.
Dump results to disk.
Print the results of the problem.
Cleans the contents of the given code.
Takes a number and returns the next number.
Blocking blocks until the given indices.
Calculate cache access.
Analyzes the kernel.
Strip lines from a list of strings.
Strips unreferenced identifiers.
Select the best block from a list of blocks.
Prompts the user for the given block.
Inserts the beginning of the lines at the beginning of the end.
Generator that returns a range of numbers.
Get the last modified time of a directory.
Check for arguments.
Run command line interface.
Main entry point for `globus`.
Return a symbol.
Transforms a struct to a struct.
Transform an array of arrays to an array.
Finds all nodes in a node.
Check that all variables are valid.
Sets a constant for the given name.
Substitutes expr.
Return a dictionary of array sizes.
Calculate the absolute offset of a variable.
Remove duplicate destinations.
Returns the length of the iteration over the iteration of the loop.
Generator for looping loop.
Returns a list of all of all destinations.
Compiles a list of symlinks to a dictionary.
Compile the absolute distance matrix.
Return an iterator over the global variables.
Calculate iterator over global variables.
Convert indices to global iterator.
Return the maximum iteration of the global variable.
Print information about the kernel.
Print information about the variables.
Print information about constants.
Prints the kernel code.
Convert a math AST to symbol.
Return the indices of the end of an array.
Determine the name of an array.
Determines the type of the index.
Builds constants for constants.
Return list of array declaration.
Return the list of kernel loops.
Builds a mapping of array declarations.
Find the inner loop in the loop.
Builds a list of kernel variables.
Builds a dummy call.
Return the kernel function declaration.
Build a list of scalar variables.
Returns the kernel code for the kernel.
Builds a kernel call.
Get the main code block.
Compute IAC analysis.
Generate a unique identifier.
Get the last modified time of the file.
Retrieves the compiler arguments for the given compiler.
Parse the perfc event event.
Ensure that the data are overlapping.
Returns the path of the header file.
Aligns the iteration of the iteration at the given iteration.
Return the total load amount of memory.
Return the total number of hits.
Return the total number of missing records.
Return the number of stores in the machine.
Return the total number of items in the cache.
Return dict of infos.
Remove an environment variable.
Configures the argparse command line arguments.
Parse the description of the README file.
Builds an item for a specific user.
Record a purchase of the email.
Get the content of a course page.
Gets the content of a course.
Update the list of unrolls.
Sends an email to the account.
Sends an offer to the account.
Attempts to retry the order of order.
Fills an order for an order.
Gets a sailry client.
Get the value of the key.
Sets the value for the given key.
Extracts the configuration from the environment variable.
Returns the filename for the environment variable.
Get the value of a dictionary.
Gets the EPG version of the EPG.
Populates the deviance dictionary from a JSON dictionary.
Returns a list of all external files.
Sets defaults for all tables.
Prepares the extents of the wire descriptor.
Return a mapping of reference references to a dictionary.
Returns the value of a column in the table.
Update the value of the field in the database.
Updates the update of the device.
Add fields to the record.
Removes the value from the stack.
Insert the value at the given index.
Remove the record from the database.
Registers a record hook.
Registers a link for a given link.
Compile a regex pattern.
Returns the amount of remaining time between time.
Return the JSON representation of this service.
Make a HTTP request.
Get all services for a given service type.
Try to create a directory.
Configures the given service.
Registers a CA.
Send a recording to the API.
Update the status of an event.
Update agent state.
Return the configuration file.
Update the configuration file.
Check if the config file is valid.
Initialize the logger.
Home page view.
Serve image from preview.
Run all modules.
Parse a CSV file.
Get upcoming upcoming upcoming upcoming date.
Run the main loop.
Run the agent loop.
Creates an error response.
Respond to a JSON response.
Return the state of the service.
List upcoming events.
Gets an event from the database.
Delete a recorded event.
Modify a recording event.
Start a recording event.
Create a fragment from the web page.
Return a list of all resources.
Return a dictionary representation of the resource.
Create a new fragment from a dictionary.
Add content to file.
Initialize the js module.
Returns a HTML representation of a resource.
Convert a resource to HTML.
Handles GET request.
Return a standalone response.
Render a standalone HTML fragment.
Calculate the p-values from the posterior distribution.
Convert a list of values to an array.
Look up the values of the error table.
Calculate the median error table.
Compute a summary table of a summary table.
Calculate error statistics.
Finds the cutoff distribution of the cutoff.
Compute the IPF algorithm.
Implement peptide algorithm.
Simulate protein proteins.
Substitute the input files using the input file.
Reduces the input files in the input file.
Helper function to apply the original optimization to a file.
Gets a group by id.
Create a new group.
Deletes a group from the group.
Gets members of a group.
Update the members of a group.
Gets the number of members of the group.
Determine if the group is a member of the network.
Decrypts a command from the given key.
Get stdout from sys.stdout.
Get stdout and stdout.
Retrieves the stderr and returns stdout.
Get debug output from sys.
Reads and returns the stdout.
Reads the output and returns the output.
Return the output of the stderr.
Execute the debug command.
Write error message to file.
Prints the help text file.
Print the usage of the program.
Print the version of the program.
Resolve environment variable.
Return a copy of this object.
Write headers to file.
Generate a URL for a URL.
Quotes value as a string.
Get a client from the queue.
Decrypts a stream of bytes from a stream.
Add account to account.
Upload a container to a container.
Generate the body of the manifest.
Create a container name.
Print the message to the log.
Checks if the buffer is empty.
Encrypts the given key.
Get the status of a repository.
Gets a pull request from a pull request.
Return a list of pull requests.
Updates the title of the document.
Returns a list of all items that are restricted by the given amount.
Render heroku slug.
Acquire the lock.
Release the read buffer.
Acquire the lock lock.
Remove a task from the queue.
Get a task from the registry.
Return a list of all tasks.
Return a dictionary representation of the class.
Create an instance from a dictionary.
Initialize archive manager.
Create an elasticsearch index.
A generator that yields JSON decoded objects.
Write items from a stream generator.
Add a task to the scheduler.
Remove a task from the scheduler.
Return a generator that yields all stored items.
Validate the arguments for the task.
Parse the archive arguments.
Perform a single job.
Schedule a job in the queue.
Cancel a job from the queue.
Runs the event loop.
Listen for events.
Schedule the scheduler.
Schedule a task to be executed.
Cancel a task from the scheduler.
Build arguments for the job.
Register routes for router.
Reverse action.
Returns the name of the view.
Returns the version string for the given version.
Resolve an alias.
Extracts the engine from the given scheme.
Parse a database path.
Parse a database from a database.
Create a new user.
List all users.
Create a password change.
Add the URL field to the view.
Parse a boolean value.
Convert value to int.
Returns the parser for the given type.
Create a new ModeDict from a model.
Encode urlsafe urls.
Create a field from a field.
Create a validator for the given data structure.
Finds all unique points in a list of dictionaries.
Change logging settings for logging.
Create directories if necessary.
Extracts strings from a list of strings.
Initialize the logger.
Extracts replicas from a trajectory.
Replace all arguments in the parser.
Convert a parser to a string.
Find multiple multiprocessing options from a parser.
Given a dictionary of dictionaries, return a dictionary of dictionaries.
Parse the log file.
Processes a log file.
Setup logging handlers.
Clean up all tools.
Start the stream.
Write string to log file.
Determine whether the result matches the results.
Determine whether the parameters are equal.
Add prefix names to prefix.
Add parameters to the graph.
Run the neural network.
Evaluate Euler algorithm.
Adds parameters to the function.
Calculate the difference between two values.
Create a storage storage backend.
Create a storage storage backend.
Add parameters to a file.
Calculate the difference between two values.
Determine if a group is in a group.
Builds a dictionary of model variables.
Run preprocessing step.
Build the model model.
Builds a network from a trajectory.
Run preprocessing on network.
Builds a network graph.
Add parameters to a set of parameters.
Compute the factor factor for a spike.
Compute the mean factor for each gene.
Compute the mean factor for each sample.
Add monitors to the state machine.
Creates folder folder.
Plot the results of the results.
Prints the graph to the graph.
Analyzes the output of the analysis.
Retrieve batch number of batches.
Start exploration on a batch.
Returns the node variables.
Return the function as a function.
Rename the file name.
Sets the current state of the run.
Convert a node to a message.
Delete a node from the root node.
Removes node from node.
Translate a shortcut name to a shortcut.
Determine the type of a node.
Add a link to a node.
Check for missing names.
Sets the details of a node.
Iterate over all nodes in a node.
Return iterator over children of node.
Recursively traverse a node in the tree.
Search for a node in the tree.
Searches for backwards compatibility.
List of nodes.
Add a group from storage.
Add a leaf from the storage backend.
Returns the list of directories for this node.
Return a dict representing the configuration.
Retrieves the parent directory.
Remove a link from the network interface.
Remove a node from the tree.
Returns the default value for the given name.
Get the children of this node.
Returns the group of all groups.
Return the list of all leaves.
Returns a copy of the graph.
Store the location of the trajectory.
Adds a result group to the network.
Adds a parameter group to the network.
Adds a discrete parameter to the network.
Add a configuration group to the network.
Add a configuration to the network.
Add the current environment variables to a git commit.
Make a git commit for a given environment.
Recursively flatten a nested dictionary.
Takes a nested dictionary and returns a nested dictionary of nested dictionaries.
Extracts the arguments of a function.
Retrieve the matching keyword arguments for the given function.
Format a timestamp as a string.
Convert a port number to a TCP port.
Makes a directory of directories and directories.
Resets the internal state of the given index.
Gets the string for the given index.
Return a copy of the file.
Remove a key from the cache.
Return string representation of the annotation.
Makes an object and returns the result.
Creates a new result from the result.
Store access data.
Gets the data of the device.
Check if the item is supported.
Creates a shared data object from the store.
Manages a multiprocessing operation.
Lock the given name.
Send the message to the server.
Clean up the socket.
Start the socket.
Retrieves a request from the server.
Attempt to acquire a lock.
Listen for the queue.
Puts the request to the queue.
Determines the current process.
Handles the data stored in the store.
Read data from the stream.
Receive data from queue.
Read data from the socket.
Store the given arguments.
Add a message to the collection.
Store the trajectory of the trajectory.
Collect keyword arguments from the parser.
Collects the configuration dictionary.
Extracts kwargs from the config file.
Add parameters to the configuration file.
Plot a pattern of pattern.
Generate a cell lattice matrix.
Triggers the update of the network.
Get the view group group.
Loads multiple messages from a single iterable.
Checks the attributes of the resource.
Store a single item in an iterable.
Called when the server is closed.
Extracts the file info from the arguments dictionary.
Backup a trajectory.
Read out a row from a table.
Prepare the table and update the table.
Check that the Python version is valid.
Loads the explorations table from a trajectory.
Store the explorations table in the table.
Store the trajectory.
Create a leaf node from the tree.
Store nodes in the tree.
This function is used to store the result table.
Get table from table.
Get node by name.
Adds keys to row.
Convert string to string.
Returns a new hdf5 group.
Get the group group for the given key.
Store annotation of an existing node.
Load annotations from node.
Store a group in a group.
Loads the load_group from the graph.
Loads an annotation file.
Extract missing flags.
Add summary information to the table.
Add metadata to the table.
Write the data to the shared file.
Write a table to a table.
Write a pymongo table to the table.
Write data to pymongo.
Write an object to the file.
Write a pymongo file.
Delete a link from the network.
Get a column from the table.
Returns the longest length of a string.
Read and return a dictionary of dictionaries.
Reads shared data from a shared node.
Reads an array from the given array.
Load a trajectory into a trajectory.
Return the name of a set of setter.
Sets the properties of the network.
Adds dynamic imports to the dynamic list.
Registers a new parameter.
Determine if the run is completed.
Removes the ignored keywords from the cache.
Update the run_info dictionary.
Add a run to the run.
Locks all parameters in the list.
Locks the internal state of all derived parameters.
Finalize the simulation.
Loads the skeleton file.
Make a reverse wildcard wildcards.
Merge multiple trajectories together.
Merge all run trajectories.
Rename a full name.
Merges the configuration file into a dictionary.
Merges another object into the object.
Merge results into a dictionary.
Restore the default value of the experiment.
Sets the parameters for the given index.
Make a single run.
Return list of run names.
Starts the simulation.
Set the start of the run.
Sets the finished run state.
Construct an instance of the given constructor.
Return a dictionary of item_dict.
Finalize the run state.
Delete links from the graph.
Remove all children from the tree.
Handles a single run.
This function is used to handle a frozen run.
Configures the pooling pool.
Configures a frozen pool.
Process a single run.
A simple wrapper around a singleton.
Configures logging handlers.
Configures niceness.
Runs the signal handler.
Wrap the logging handler.
Loads a class from a string.
Try to find a class from a given class name.
Returns the length of the file.
Return the string representation of the file.
Extracts the range of the feature.
Store the object store.
Loads the parameter from the dictionary.
Loads the parameters from a dictionary.
Return True if two values are equal.
Determine if the matrix is supported.
Builds the name of a variable.
Recursively reconstruct a matrix.
Load the model parameters from a dictionary.
Store the object stored in the collection.
Loads the parameters from a dictionary.
Translate a key to a string.
Return a string representation of the dataframe.
Convert the file to a dict.
Set a single item.
Determines if the item is supported.
Store the values in the dictionary.
Load the model parameters from a dictionary.
Add a single item to the cache.
Store the state of the object.
Loads the model from a dictionary.
Main entry point for all imports.
Creates a session.
Merge the trajectory into a single trajectory.
Start all jobs.
Multiplies the vector at the given trajectory.
Run the simulation at the given trajectory.
Post-processing results.
Add parameters to a file.
Add exploration to explore exploration.
Extract all sub-runs of the trajectories.
Execute the network.
Add parameters to the simulation.
Run the network.
Generate the filename for the given path.
Return the next item from the chain.
Handle a SIGINT signal.
Load config from a file.
Request the PIN for the account.
Requests access token.
Refreshes access token.
Gets a list of therstores.
Write tokens to file.
Set the HAC policy for the given index.
Sets the fan min min min min min.
Set the temperature for a given index.
Deletes a specific holiday.
Resume the program at the given index.
Send a message to the server.
Generate a random delay.
Generate a new timeout request.
Generate the renewing time for a lease.
Return a dictionary of all attributes.
Reset the hardware address.
Returns the timeout for a given state.
Set the timeout of a function.
Select an offer.
Send a request to the server.
Sets up the timers for the client.
Check if a packet is received.
Initialize the state.
Called when the request is available.
Called when the request is exceeded.
Check if the request is renewing.
Called when the request has been exceeded.
Receive an offer from the broker.
Receive ack request.
Receive the Nak request.
Receive ack message.
Receive a new Nak request.
Receive ack request.
Receive a Receive message.
Called when the client has changed.
Add a query to the query.
Add a new query to the query.
Remove a query from the query.
Get the status of the server.
Reads all channels from a tdms file.
Convert a tdms file to file.
Returns True if the current directory matches the current working directory.
Create a quadratic patch.
Remove next patch from the database.
Delete a patch from the database.
Determine whether a file is a file or not.
Backup a file to a backup.
Add a file to the database.
Run the command on the system.
Creates the directory if necessary.
Copies the directory to a directory.
Add a file to this directory.
Copies the file to a directory.
Return the directory for this file.
Backup the backup file.
Remove a patch from the database.
Apply a patch to the database.
Applies the next patch to the topology.
Applies all patches to the database.
Reads the series file and parses the series file.
Save the series file to disk.
Add a patch to the line.
Insert a patch of patches.
Add a list of patches.
Remove a patch from a patch.
Returns a list of all lines in the given ``patch``.
Returns a list of all patches in the given ``patch``.
Return a list of patches until the given ``patch``.
Replace a patch with a new patch.
Creates the version directory.
Checks the version of the database.
Add arguments to the parser.
Add arguments to the parser.
Add the parser to the parser.
Sets the arguments for the parser.
Add all sub-parsers to the parser.
Check if a file is a file in a patch.
Add a file to the next patch.
Revert a file and revert it to a file.
Import a patch from a patch.
Import patches from patches.
Add a way to the graph.
Iterate over missing nodes.
Add node to node.
Build a route for a relation.
Generate the route name for a relation.
Gets the agency id for a relation.
Iterate over the graph.
Add a new relation to this relation.
Parses a list of agency objects.
Generate dummy trips for trips.
Write a ZIP file to a zip file.
Copies the contents of the buffer to a file.
Build an agency document.
Extract stops from a node.
Construct a shape from a node.
Returns a list of supported versions.
Send an APU to the device.
Attempts to authenticate a device.
Registers a device.
Authenticate data using Google API.
Register U2F2 devices.
Convert a dictionary to string.
Wrap a class from the given class.
Returns True if filepath matches a filepath.
Extracts the email address from an email address.
Gets the entry for the given entry tree.
Convert text to text.
Serve the server.
Convert a URL to an image.
Convert an image string to an image.
Raise an exception if the size is less than max size.
Checks that the given width is less than width.
Raise an exception if an image is greater than height.
Parse category and return category.
Parse the number of totals.
Iterate over all items.
Add an error message to the log.
Parses the source and parses the contents of the source.
Parse an item from an item.
Returns the model instance for the given data.
Save an item to database.
Download a file from a URL.
Loads the contents of the source file.
Iterate over the CSV file.
Set the device access token.
Add files to the sandbox.
Add a file to the sandbox.
Returns a list of Enrollment enrollments for a given course.
Gets all enrollments for a site.
Gets all enrollmentments for a given section.
Gets all enrollments for a specific section.
Returns a list of calendars for a given registration.
Enrollment enrollment enrollment.
Gets all roles in a account.
Gets all roles for a account.
Returns the list of course roles for a given account.
Gets a role for a given account.
Gets the role by id.
Gets information about a course.
Gets the course by id.
Returns list of courses in account.
Gets all courses in the account.
Gets all published courses in a account.
Returns a list of all courses in the account.
Gets the courses for a given registration.
Creates a new course.
Update a site id.
Gets the activity for a specific account.
Gets grades for a specific account.
Gets statistics for a term.
Gets the activity by its ID.
Gets the list of accounts for a particular site.
Gets the student's student summaries.
Gets the student activity for a particular sid.
Gets the student's student message for the given id.
Gets all external tools in account.
Gets all external tools in a course.
Create a new external tool.
Update an external tool.
Delete an external tool.
Raise an exception if required.
Gets a user for a user.
Returns a list of users for a given course.
Gets users for a given SSID.
Creates a new user.
Returns a list of users for a user.
Update a user's login.
Return the next page from the response.
Extracts the resource from a URL.
Returns the resource url for the given URL.
Retrieve a resource.
Make a PUT request.
Make a POST request.
Delete a resource from a URL.
Gets the admins for a given account.
Creates an admin admin admin.
Creates an admin with the given id.
Deletes an admin from a user.
Delete an admin by id.
Creates a grading rule.
Gets a specific section.
Gets a section by ID.
Get all sections in a course.
Gets all sections in a course.
Get all sections in a course.
Gets all sections in a course.
Creates a new section.
Update a specific section.
Gets a list of questions for a course.
Gets an account for the account.
Gets a list of sub accounts.
Update a Google Account.
Updates an SIS account.
Gets the authorization settings.
Update the authorization settings.
Gets the term by its ID.
Import a CSV from a CSV file.
Import a SIS model from a directory.
Gets the status of a SIS model.
Build a zip archive.
Gets the assignments for the given course.
Update an assignment.
Returns a list of available reports.
Gets a list of reports for a given account.
Create a report for a report.
Create a report report for a given account.
Create a report report for an account.
Creates a report for the given account.
Gets the data of a report.
Gets the status of a report.
Deletes a report.
Move all images in a label.
Multipflipfliply maps to wx.
Get a dict from an object.
Extracts the configuration from a request.
Return the value of the editor.
Creates a new metric for metrics.
Setup logging for logging.
Configures the process collector.
Add metrics to metrics.
Get a metric by name.
Handle homepage.
Generate metrics for metrics.
This function is used to get the text of the chat.
Fix http headers.
Perform a query on the server.
Return information about the pods.
Return a list of results.
Encode a request.
Retrieve a GET request.
Deletes a request from the API.
Make a PUT request.
Make a POST request.
Group sentences into a list of sentences.
Disambiguate a PDF file.
Disambiguate a query against a given query.
Segments the segmentation at the given text.
Get language from text.
Get a concept from a concept.
Train the model on the model.
Compute the accuracy of the ensemble.
Fit the model to the model.
Compute the score of the features.
Transform features to a feature matrix.
Compute the statistics of the feature matrix.
Convert a list of members to a vector.
Return a vector of vectors.
Evaluate the given file.
Evaluate the given stream.
Evaluate a string from a string.
Initialize a Replias module.
Runs the compiler.
Adds a method to the map.
Add a method to the method.
Removes a method from the map.
Remove a method from a key.
Determine if a variable is a macro.
Return the position of the reader.
Assert that a node is not valid.
Assert that the node has the result.
Try to resolve a variable.
Resolve a variable.
Parse the AST node.
Determine whether the shadow variable should be used.
Convert a list of dictionaries to a string.
Return a string representation of a sequence.
Return a string representation of the object.
Replace missing locations with missing locations.
Compile the form of the form.
Compile the given module.
Compile the given list of forms.
Compile a bytecode from a bytecode.
Iterate over a sequence of strings.
Given a string of strings, return a string with the replacement.
Return a fraction of fraction.
Return a handler for logging.
Convert a dictionary of values to a map.
Split a collection into a tuple.
Reads a namespace and returns a namespace.
Read a collection from a collection.
Read a list from the reader.
Read a vector from a vector.
Read a map from a YAML file.
Reads a string from the input buffer.
Read a symbol from a namespace.
Read keyword arguments from the context.
Reads the meta data from the input buffer.
Read a list of comments.
Expand a list of syntax literals.
Read syntax for syntax.
Read the end of the end of the file.
Read a character from the input buffer.
Read a regular expression.
Read the grammar for a reader.
Read the next comment from the buffer.
Read next token from the next line.
Read a string from a string.
Read a file from a file and return an iterator.
Updates a new line.
Push back back to the stack.
Read next token from stream.
Generate bytecode from base64 byte string.
Get base bytecode from base64 byte string.
Return the cache file name.
Add a hook to the system if it doesn't exist.
Finds a module that matches the module.
Compile a cached module.
Compile the given module.
Execute a module.
Return a symbol.
Return a list of identifiers for the given text.
Return a new `key` if it exists.
Generate a keyword for the given namespace.
Builds a list of nodes from the graph.
Iterate over a collection.
Add a Python AST to the AST node.
Wrapper around `f`.
Apply function to ast.
Determine if the variable is dynamic.
Return ``True`` if ``v`` is ``True``.
Convert an expression to an AST node.
Convert a function to a function definition.
Convert a node to AST AST.
Convert string to filename.
Convert a list of arguments to ast.
Convert a function to ast.
Convert a node to a Python AST node.
Convert a statement to a Python AST node.
Convert AST node to AST AST.
Convert a node to a Python AST node.
Convert recursively recursively to ast.
Convert recursively recursively recursively.
Convert a set of AST AST to AST AST.
Convert an exception to AST AST.
Convert a Python AST to AST AST.
Convert a node to a Python AST node.
Convert a variable to astree.
Convert a variable to astree AST node.
Convert a node to a Python AST node.
Convert a node to AST AST.
Convert a node form to a Python AST node.
Convert a variable value to a python ast.
Convert a list of literals to a Python AST.
Generate a Python AST node.
Iterate over all imported imports.
Return an ast.Import from a module.
Return an ast node.
Convert a set of members into a set of sets.
Return a set of set of members.
Return an exception handler.
Return `expr`.
Return a new function definition.
Return a copy of a node.
Return a copy of a node.
Create a new module.
Return the first element or None.
Returns the first element of the sequence.
Returns the first value in the collection.
Returns the next element in the collection.
Return the first element of the sequence.
Convert an object to a sequence.
Concatenate sequences.
Return a mapping of mappings.
Convert a collection of collections.
Refreshes an object.
Determine if v1 is equal.
Divide two numbers.
Sort a collection by predicate.
Determines whether the given collection is a collection.
Gets the value of an entry from a dictionary.
Convert an object to a list.
Convert an object to Python list.
Return a representation of the object.
Convert arguments into a list of arguments.
Helper function to create a base-of-of-of-fluents function.
Resolve a namespace by name.
Resolve a variable.
Add a variable to the global variable.
Internally create a var.
Internally replace unbound variable.
Return the namespace in namespace.
Return the name of a variable.
Finds a variable, returning a variable.
Add a default import to the registry.
Add an alias to this namespace.
Internally replace a variable.
Internally replace a new variable.
Return the value of a variable.
Add a new import to the registry.
Return the first imported module.
Add a reference to the receiver.
Return the reference of a variable.
Return a mapping of references to their reference names.
Replace all references to another namespace.
Returns a new namespace for a namespace.
Get a namespace by name.
Return the referenced symbol.
Remove a namespace from the namespace.
Iterate over aliases.
Iterate over all imports in the namespace.
Return a list of completions.
Return a list of completions.
Iterate over all imports.
Return tuple of args.
List members in a list.
Return a list of members.
Decrypts a JWT token.
Encrypt JSON using JWT.
Delete a cache from the cache.
Return a tuple representation of the argument.
Parse a string into an expression.
Dump the ndb model to disk.
Decode a dictionary of datetime objects.
Decodes a date string.
Decodes a value from a JSON string.
Decorator for JSON encoding.
Validate the version string.
Iterate over connected components.
Set the parent expression.
Get the parent expression.
Add an element to this node.
Creates an expression with the given elements.
Creates an operator for the given elements.
Parse a message and return a list of messages.
Convert a list of tuples into a dictionary.
Return the message that matches the given value.
Prepares the message to send to the queue.
Send data to the stream.
Enable debugging mode.
Save template to template.
Get information about the device.
Return the path to a JSON file.
Parse the package and return it as JSON.
Raise the error if the error occurs.
Validate the API response.
Generate homozygous vectors.
Interpolate dep vector of signal vectors.
Determine the indices of the signal.
Verify that the given wave_b.
Load system manifest files.
Return a tuple of callable variables.
Expand a short URL.
Gets the URL for a short URL.
Returns stats for a given filter.
Gets the stats statistics for the server.
Split an iterable into chunks.
Flatten an iterable into iterable.
Print a sequence of values.
Create a dummy dummy class.
Initialize a string from a string.
Trace the trace.
Outputs a list of dependencies.
Make sure that the common prefix is a common prefix.
Make a multi-level entry.
Convert a string to a list of words.
Split noise into noise.
Split data into chunks.
Compute the bounds of the signal at the given signal.
Build units for dep_units.
Create a copy of a wave.
Calculate the overall area of a dep.
Validate that the signal is valid.
Calculate the cosine of a wave.
Calculate the acceleration of a wave.
Return the angle of the wave.
Calculate the mean of a wave.
Determine the decay of a wave.
Calculate the group delay of a wave.
Log likelihood of a wave.
Calculate the sqrt of the wave.
Convert a waveform to a complex matrix.
Convert a wavevector to a float.
Convert a wavevector to an array.
Return list of system files.
Extracts a short description from a string.
Convert a list of tokens into an expression.
Return the next item from the list.
Return a list of functions that match the expression.
Parse expression.
Removes consecutive columns from a regular expression.
Convert a number to a number of digits.
Convert a number to a number.
Convert string to float.
Convert a string into a number of significant digits.
Return the magnitude of a word.
Determines if the application extension extension extension.
Batch the output of the application.
Get the trace from the app.
Determine whether a dependency tree has a hash.
Convert a string to a hex string.
Parse a docstring from a docstring.
Return a list of valid identifiers.
Determine the context for the given action.
Split a line into quotes.
Checks for initialization variables.
Return help text for a builtin-in context.
Finds a function in the context.
Lists a list of dictionaries.
Determine if an argument is a flag.
Extracts the first argument from the arg_name.
Invoke the given string.
Classify section name.
Classify line header.
Joins a list of paragraphs.
Convert a value to a value.
Convert binary value to a binary value.
Returns the size of the given type.
Determine if the given type name is known.
Split a name into a base type.
Instantiates the type of the given type.
Determine if the given type is known.
Load the type of a module.
Add a parameter to the registry.
Add a type to the type.
Add a return value to the printer.
Attempts to match a short name.
Returns the type of the given parameter name.
Returns the value for the given value.
Convert the argument value to a positional argument.
Convert an argument value to a validator.
Return the message as a string.
Return a dictionary representation of the message.
Check that arguments are valid.
Parse a list of validators.
Given a container, return a list of dictionaries containing all of all objects in a container
Given a module and a module, return a dictionary of context names.
Returns help text for a function.
Annotate a function with the decorated function.
Add a function to the annotation.
Returns the description of a function.
Load all modules.
Install and install tasks.
Print all tasks.
Uninstall the breadcrumb.
Create a new schema from a URI.
Loads the project directory.
Save project configuration file.
Returns a dictionary of the projects that depend on the dependency system.
Initialize the project.
Called when the function is called.
Apply a function to a function.
View a fold.
Convert a state into a list.
Apply `state` to `func`.
Set the value of a state.
Iterate over the set of elements.
Return the kind of the object.
Main entry point.
Move the vector to another vector.
Handles a game.
Advance robots by advancing robots.
Ends the game.
Move a player from a board.
Generate a random game.
Move the position at x.
Return the outcome of the game.
Generate a generator of potential arguments.
Add an item to the queue.
Opens the start of the spider.
Uploads a chunk to the upload.
Creates a file-like object.
Get the state of the account.
Gets the state of the asset.
Returns the block hash of the given block index.
Retrieves the amount of bytes of a block.
Get the contract state of a script.
Get the raw transaction.
Get the storage value for a script.
Get the output of a transaction.
Invoke the given script.
Invoke a function call.
Invoke a script.
Send a raw transaction.
Validate an address.
Send a request to the server.
Determine if a string is a hash.
Determine if a string is a hash.
Encode a list of parameters.
Decode the invocation result into a dictionary.
Apply time to a timezone.
Save the rendered HTML file.
Render the barcode.
Render the given code.
Command line interface.
Downloads a file from S3.
Uploads a file to S3.
Deletes the configuration from the config file.
Show the diff between the config.
Parse an environment variable.
Sets the username and password.
Add api key to api.
Get JSON content from a folder.
Returns a dictionary of schema schemas.
Get the schema from the database.
Returns a RefresolveResolver object for this schema.
Validate the given object.
Returns a list of valid examples.
Returns a list of invalid examples.
Returns url for auth user.
Extracts auth code from a URL.
Retrieves access token from request.
Return user id.
List all files in a folder.
Create a new directory.
Add a comment to the object.
Decode a Python object.
Add a dropdown target to the container.
Start drag operation.
Sets the default twww.
Create an object from an object.
Makes sure that the font is missing.
Loads a page from a location.
Called when the input is pressed.
Generate a help window for the user.
Called when mouse is pressed.
Moves the screen to the mouse position.
Handles the key press event.
Delete all objects from the selection.
Duplicate the object.
Refresh the current object.
Calculate the position of the widget.
Returns the data for the given item.
Sets the wx data for the given item.
Finds the data of the wx data.
Remove the item from the list.
Delete all items from the list.
Clears all table names.
Sets the selected selection.
Returns a list of strings.
Sets the data of the client.
Append a new string to the window.
Gets the window by name.
Add a child to the screen.
Sets the parent widget.
Draws the background of the graphics window.
Event handler for background.
Event handler for drawing.
Return a list of column headers.
Reset the grid to the grid.
Update the values of the grid.
Update column attributes.
Sort data by column name.
Removes all values from the grid.
Create a combo box.
Initialize the text item.
Called when a line is entered.
Determine if the event is pressed.
Enter keyboard selection.
Enable menu item.
Returns True if the menu is enabled.
Enable the number of items in the tree.
Determine whether this menu is enabled.
Remove a menu from the menu.
Sets the object tag from an object.
Parse table table table.
Returns the documentation for the given object.
Makes a signature from a string.
Import a module by name.
Create a role for a role.
Create an alert dialog.
Prompts a text dialog for the user.
Select a font dialog.
Show a color dialog.
Prompts a directory dialog.
Search for dialog.
Sets the children of the tree item.
Sets the icon of the widget.
Parse a Python file.
Save a file to disk.
Build a window from a dictionary.
Build a component from a dictionary.
Convert the given name to a new name.
Sets the content of the screen.
Return a list of all the annotations in the docstring.
Loads an object from the tree.
Inspects an item in the tree.
Activate selected item.
Updates the item in the tree.
Show the context menu.
Return the URL representation of the image.
Checks if the given path is a valid path.
Assert that the path is not present.
Selects the value of the widget.
Get a browser from a browser.
Return the XPath representation of the expression.
Switches the frame to the frame.
Accepts an alert message.
Prompts the user for the user.
Reimplements a dialog.
Accepts a prompt.
Displays a prompt.
Save the page to disk.
Save a screenshot to disk.
Raise an exception if the server is not available.
Determine whether a field is checked.
Returns True if the given locator is checked.
Checks if the given locator is unchecked.
Checks if the given locator is unchecked.
Checks if the given title has the given title.
Fail if ``title`` is not ``None``.
Returns the content of a node.
Returns the string representation of a node.
Normalize a URL to a query string.
Determine whether an error occurs.
Compare the number of records.
Called when the given size is less than max.
Returns True if the options are not None.
Generate a failure message.
Returns True if the number matches the given count.
Normalize a text string.
Remove whitespace from text.
Transform text to regular expression.
Determine if the request is valid.
Resizes the window to the window.
Initialize the server.
Register a cgetter.
Set instance of instance method.
Sets the class method for this class.
Return the traceback of the traceback.
Return the source of the object.
Returns the logger for this instance.
Set the logger for this instance.
Calls the API.
List of available channels.
Returns a list of users.
Makes a Slack message and returns the message.
Translates Slack message from Slackware to Slackware.
Sends a message to the queue.
Read packets from the queue.
Start the slack server.
Run the client layer.
Return a dictionary of differences between two dictionaries.
Colorize a message.
Called when a task starts with a new task.
Print replay statistics.
Prints the error message.
Convert a prefix to a prefix.
Add an element to the model.
Load filters from jinja.
Return the path to the YAML file.
Make a POST request.
Build authorization URL for authorization.
Retrieves a token from a token.
Parse url query parameters.
Extracts a URL from a URL.
Builds a URL from a URL.
Handle an exception.
Create a response from the HTTP response.
Make a redirect response.
Make a JSON response.
Returns the authorization code for the given authorization type.
Refreshes a refresh token.
Retrieves access token.
Returns the authorization code for the given URI.
Retrieves a refresh token from a POST request.
Returns the authorization object for the request header.
Open the device.
Read a byte from the device.
Read bytes from a device.
Read data from a device.
Write bytes to device.
Write byte data to device.
Write an I2C block to the device.
Creates a copy of the model with the given effects.
Creates a local copy of a collection.
Construct a file from file info.
Upload a file to a file.
Returns a list of file URLs.
Construct a new group from a group.
Create a new group.
Perform a request on the storage backend.
Iterate over files.
List API objects.
Generate a progress bar.
Return the state of the home mode.
Returns a list of all cameras for this account.
Retrieve camera info about the camera.
Retrieves a snapshot of the camera.
Returns the motion state of a camera event.
Get the parameter value for the camera state.
Update camera settings.
Determine if a given item is last one.
Iterate over a list of nodes.
Get the value of a LiPDL.
Gets the vmer merge of a table.
Returns the grid span of the grid.
Gets the cell at index.
Determine whether the given style is false.
Determine if the document is bold.
Return ``True`` if ``paragraph`` is HTML.
Determine if the document is marked as HTML.
Determine if the document is a title.
Extract text content from text.
Get information about a relationship.
Determine the ordering type for a given number.
Build table element from table.
Returns the text content of the tag.
Strip tags from a tree.
Finds a filename and returns the filename.
Loads the simulation from the MNIST file.
Plot an image of images.
Plot layers of weights.
Plot a list of bins.
Encode a list of strings.
Add latent weights to latent variables.
Decodes a network using the algorithm.
Compute the score of the model.
Predict the first layer.
Predict the probability of X.
Predict the log of the network.
Returns a list of variables.
Compute the accuracy of the model.
Build an activation layer.
Generate a reservoir of samples.
Add a loss to the log.
Iterate over all monitors.
Builds a graph for the given regularizers.
Returns a list of input layers.
Return a list of all variables that have been set.
Save the object to a file.
Load a model from a file.
Calculate the loss matrix.
Builds a graph from the graph.
The size of the image.
Resolve a list of input shapes.
Resolve the input shapes.
Log the output of the simulation.
Log the sum of parameters.
Convert string to string.
Resolve the name of the layer.
Search for a single parameter.
Add a sample to the mean.
Return a dictionary representation of the configuration.
Calculates the likelihood of the particle at the given position.
Compute the logarithm of the image.
Adds a tier to a tier.
Remove a tier from the list.
Return the tier of the given name.
Convert an EAF to EAF format.
Add a point to this interval.
Adds a new interval to the end of the interval.
Remove an interval from a time series.
Remove a point from a time series.
Return a generator that yields intervals.
Returns all the intervals in the grid.
Indent the given element.
Adds an annotation to the collection.
Adds a description to the vocabulary.
Add a reference to an external reference.
Add a new lexicon to a lexicon.
Add a linguistic type to linguistic.
Add a new locale to the database.
Remove all time slots that have been created.
Extract an annotation from the end of the segment.
Generate an annotation id.
Add a time to the time series.
Return the list of children of the given tier.
Returns full full full time interval.
Get all reference annotations for a given time series.
Get all reference annotations for a given time series.
Returns a list of tuples for a given language.
Remove all annotations from a given tier.
Remove a description from the vocabulary.
Remove a license by name.
Remove all linked files from the media_path.
Removes a property from the cache.
Removes the annotation annotation for a given time series.
Remove secondary files from secondary files.
Remove a specific tier from the cache.
Remove all tiers from a list of tiers.
Renames the given tier to the topology.
Helper function to shift all annotations in a time series.
Print debug message.
Extracts all embedding levels from text.
Determine the embedding embedding of a given dictionary.
Resolve a set of NaN types.
Reverse a sequence of characters from a sequence.
Reorder all levels in a dictionary.
Processes a command line.
Add an attribute to an object.
Command line interface.
Makes sure that the version of the old version is deprecated.
Returns the GUI for the widget.
Dynamically discover the GUI.
Add the script to the file.
Restore the selected selection.
A context manager that restores the current state.
Show a dialog box.
Returns the cumulative sum of the sum of all sets.
Returns a list of values for the given axis.
Draws a constant line from the graph.
Load transform parameters.
Return a mapping of values to a dictionary.
Generator that yields a range of floats.
Add a new configuration file.
Draws the outline of the graph.
Calculates the left border of the border.
Calculates the right border of the right border.
Calculates the bottom border margin.
Add a popup to the screen.
Calculates the bottom border of the key.
Draws the graph.
Creates a text text element for the data point.
Draws the x label of the step.
Draws y-label labels and y-label.
Draws the xitudes of the x-line plot.
Draws the y-line plot of y-notes.
Draws the title of the graph.
Render inline styles.
Create svg SVG element.
Returns a list of stylesheet names.
Run a bot on the bot.
Send data to the socket.
Connect to the server.
Respond to the server.
Dispatches pattern patterns.
Initialize a new nick.
Handle a Ping message.
Called when the registration is received.
Enter the event loop.
Registers a node with the leader.
Run the task queue.
Return the list of commands for the worker.
Registers a new command.
Execute a task in the queue.
Add a worker to the worker.
Sends a valid email to the user.
Send password reset to user.
Verify that the token is valid.
Delete a user.
Make sure the request is allowed.
Return a Docker client.
Return the TLS client.
Return the service name.
Wrapper around `docker`.
Execute a Docker container.
Returns the current state of the Docker service.
Stop the Docker container.
Filter a unique email address.
Validate a password.
Updates a new password.
Validate an email address.
Validate a token.
Delete a token from the server.
Validate the email address.
Send a POST request.
Update the expiration date.
Creates a context for the email address.
Sends an email to an email.
Called when the password reset email reset.
Validate a notification message.
Attempts to authenticate a token.
Check that the token is valid.
Show notebook content.
Iterate over all hooks.
Get custom javascript callback.
Returns a widget for the given parameter name.
Render the rendering function.
Create a text widget.
Return a list of named objects.
Returns the owner of a method.
Assigns the http auth headers.
Ping a remote server.
Retrieve information about the server.
Gets the health of the device.
Convert bytes to human readable format.
Returns the total total load of the system.
Return the size of the memory.
Get the network number of network.
Returns a list of volumes.
Get a volume by id.
Return the total size of a volume.
Returns the percentage of the volume.
Calculate the total volume of a volume.
Returns the maximum disk size in the volume.
Retrieves a disk from disk.
Login to the server.
Execute a GET request.
Execute GET request.
Update the storage backend.
Returns a dictionary with the current API.
Return a storage storage object.
Creates a context from a request.
Retrieves the tenant token.
Builds attributes for the widget.
Returns a new set of installed apps.
Returns a copy of installed apps.
Return a dictionary of global settings.
Send GET GET request.
Changes the value of the config file.
Upgrade the config file.
Start websocket server.
Wait for the server.
Get access information about access token.
Checks if the token is valid.
Sets access tokens for access token.
Create a manifest of a manifest.
Split path into bucket name.
Determine if a bucket is gzier curve.
Returns a copy of the given dictionary.
Add a manifest to the database.
Determine if a job has a manifest.
Extract schema from a schema.
Fix the schema for a schema.
Parse a dictionary from a dictionary.
Transform a line of text into JSON.
Convert an event to JSON.
Return the name of the template.
Print the context block.
Return a string representation of the context.
Convert SQL to HTML.
Pretty-print HTML for rendering context.
Pretty-print summary of a dictionary.
Transform text to HTML.
Returns the formatted representation of an object.
Prints a pretty printer.
Extract a token from a string.
Extract nodes from a string.
Convert text to text.
Convert a latex list to text.
Takes a string and returns an ASCII string.
Gets information about the organization.
Returns a list of boards.
Returns a list of members for this account.
Update the organization for the organization.
Remove a member from a member.
Adds a member to the group.
Adds a user to the account.
Gets the list of information about the device.
Adds a card to the account.
Retrieves information about the label.
Retrieves all items in the collection.
Update a label by name.
Update the label for this instance.
Returns the authorization url for the application.
Retrieves the Card's Card information.
Gets a board.
Gets a list of objects.
Get a list of checklists.
Adds a comment to the account.
Add an attachment to the server.
Adds a new checklist.
Add a new label from a dictionary.
Add a label from a class.
Adds a member to the server.
Retrieves information about the members of the group.
Get a list of cards.
Get a list of organizations.
Create a new board.
Gets the board information.
Get a list of lists of objects.
Returns a list of labels.
Gets a Card object.
Get a list of checklists.
Gets the organization by name.
Update a board.
Adds a new list to the collection.
Adds a new label to the collection.
Gets information about a checkbox.
Get the card's card.
Get a list of checklist items.
Update a new checklist.
Add a new item to the collection.
Removes an item from the collection.
Update the checklist item.
Updates the status of this card.
Add authorization parameters to the API.
Raise error if the response is invalid.
Builds the uri query string.
Retrieves a JSON response from a request.
Creates a new organization.
Create a board from a board.
Create a new label.
Create a new list.
Create a Card object.
Create a new checklist.
Create a new member.
Get an organization by id.
Gets a board.
Gets a list of objects.
Gets a Card object.
Get a checklist.
Get a member by id.
Extracts a URL from a URL.
Convert text to raw text.
Sets the password for the given service.
Split text into two locations.
Mark a regex for a given regex.
Mark the beginning of a given regex.
Run command line interface.
Creates a cipher using AES cipher.
Returns the encryption key for the given mode.
Return the priority of the model.
Check if the scheme is valid.
Event handler for publishing a message.
Generate a unique id.
Connect to MQTT.
Called when the connection is received.
Encode string to string.
Decode a string into a string.
Encode an unsigned integer value.
Encode the length of a string.
Calculate length of decoded length.
Encode the header.
Encode the message as JSON.
Decode the message from the stream.
Encode the result as a string.
Decode the result of the session.
Decodes a message into a message.
Encode the message.
Encode the message as a string.
Decodes the message into the message.
Encode message as string.
Encode the message as a string.
Decodes a packet into the message.
Decodes a message into a message.
Returns the URL for the request.
Perform a GET request.
Refreshes the list of transactions.
Format the data into a numpy array.
Fit the given dataframe.
Fit clustering clustering.
Predict clusters of data.
Map cluster IDs to indices.
Sort clusters by clustering.
Convert datetime format to string.
Returns the total number of points in a dictionary.
Returns the total time span of the time series.
Determine the unit of a unit.
Convert string to HTML element.
Convert a string to a name.
Convert a string to a METS name.
Concatenate data into a single file.
Enumerate numpy arrays.
Convert a list of tuples to boolean.
Smooths a smooth smoother.
Returns the gradient of the gradient at the given window.
Finds the indices of x and y.
Cluster mean of data.
Clusters k-means clustering.
Returns a list of all known SRM values.
Read the config file and return a dictionary.
Read and parse the latls file.
Copy srs file to SDR.
Exclude a list of down-hole connections.
r"""Plot the autochron plot of the given analyte.
Creates the n-ndarray for the signal.
Calculate ratio ratio.
Calculate calibration values.
Return a dictionary of all time times for each occurrence.
Calculate the correlation coefficient.
Add a new filenames.
Returns a dictionary of parameters for the model.
Plot histogram of histograms.
Loads the genome data from a reference genome.
Calculate the mass of a molecule.
Generate keyword arguments.
Emit a predicate from a predicate.
Removes a tuple from the stack.
Calculate the weighted average of Gaussian statistics.
Calculate the gaussian Gaussian Gaussian.
Calculate standard deviation.
Retrieve samples from a subset.
Compute ratio of samples.
Add a new set of samples to the set.
Applies the classifier to the classification.
Remove duplicates from a subset of removed files.
Filters statistics from a list of samples.
Generate metrics for analysis.
Save log file to disk.
Apply a function to a fold.
Calculate Bayesian scale.
Calculate the median value of a signal.
r"""Compute noise noise between signal.
Evaluate the exponential decay for a signal.
Add a set of components to the matrix.
Remove a set of values from the set.
Resets the state of all sensors.
Remove unused sensors.
Return the fuzzes matching the given fuzzes.
Retrieve the spectrum from a file.
Return information about the component.
Write log file to file.
Read a log file.
Get information about the device.
Send a message to the server.
Parses a file or string.
Given a URL, returns the URL of the NetViewer view.
Generate thumbnail for thumbnail.
Return HTML representation of code.
Gets the code example for the notebook.
Return the URL of the view.
Returns the filename of the file.
Create a Python Python file.
Generate download data.
Creates the thumbnail of the thumbnail.
Scale an image to a scale.
Saves the image to disk.
Copy the thumbnail figure to a file.
Returns the URL of the file.
Get all languages for a given field.
Process a thumbnail file.
Save image to disk.
Returns a list of all of all the objects.
Create a new image from the image.
Delete a file from the image.
Create a thumbnail for a given size.
Gets a thumbnail from a source.
Delete a thumbnail from a source.
Receive a message from the queue.
Subscribe to a given number.
Return a set of all states.
Send a message to the broker.
Returns a mapping of all of the listeners to the receiver.
Receive a message from the broker.
Receive a status message.
Forward messages from an object.
Signs a signed transaction.
Estimate the gas gas of a stream.
Calculate the gas gas for a safe transaction.
Write a file to the stream.
Read line from serializer.
Determine if the message is bad.
Add an attachment to the queue.
Register a new service.
Import a module from a module.
Registers the given resource.
Return the value of the key.
Called when an exception occurs.
Setup the service manager.
Evaluate the number of wavelengths of the given wavelength.
Calculate the number of coefficients.
Send a DELETE request.
Determine whether the file is a file.
Create a directory and return a new directory.
Initialize the logger.
Raise an error message.
Claims a list of file readers for each file.
Generate a new column header from a VCF file.
Given a file-like object, return a list of VCF readers, and the associated
Calculate population statistics.
Claims the unreaders of the file.
Split text into lines.
Returns the prefix of the text string.
Returns the suffix of the line.
Move next line to next line.
Move the next line from the file.
Returns the lines of the file.
Return the first line of the file.
Follows the file and returns the next line.
Claims a list of star reads from a file.
Parse a VCF record.
Return a dict of sample values.
Return the set of tags for the sample.
Joins the info dictionary.
Returns the format of the sample field.
Returns the string for the sample field.
Return text representation of the sample.
Add a sample tag to the sample.
Add a new filter to the filter.
Return a list of available products.
Returns a list of product products.
Create a staff product form.
Adds an error message to an error.
Create a model form for fields.
Returns a list of items that are pending.
Send an email to the template.
Parse the model file and return a list of nodes.
Iterate over the notes from the feed.
Determine whether the given user is filtered.
Determine whether the given user is metatags.
Gets the number of items in the specified user.
Removes all orders that are restricted by user.
Filter product orders.
Filter queryset based on the given queryset.
Filter the user's users.
Filter the user's groups.
Create a new cart for a given user.
Extracts the amount of reservations for this product.
Applies a voucher to the cart.
Called when the product is valid.
Calculate the prices of the products.
Yield rows from the table.
Returns the form for the request.
Render a JSON file.
List all available reports.
Returns a list of items for the invoice.
Report payment for payments.
Report creditnotes for credit notes.
Report product status.
Report company status.
List product items.
List unpaid orders for payment.
Report credit notes.
Generate invoice.
Lists all attendees.
Return a list of speakers.
Returns a list of missing categories.
Returns the number of credit notes for the invoice.
Determine whether the user is gone.
Edit profile.
Handles a profile form.
Handle product items.
Handle a voucher form.
View for payment payment.
Refunds an invoice.
Extend a new reservation for a user.
Send an invoice to invoice.
Generate an invoice.
Render a badge.
Returns a list of available accounts.
Annotate the number of periods that are not used in the account.
List available products.
Apply credit to the invoice.
Calculate the payment fee for a given percentage.
Generate a random access token.
Get object from module name.
Create a new invoice for cart.
Generate an invoice for a customer.
Apply creditnotes to invoice.
Determine if the user is visible.
Refresh the invoice data from the database.
Validate the invoice.
Called when the invoice is updated.
Mark the cart as paid.
Determine if invoice has a cart.
Updates the validity of the invoice.
Removes the invoice.
Refunds the invoice.
Send an email to an invoice.
Update the annotation from a dictionary.
Flatten a field into a dictionary.
Print download files.
Download a single field from a field.
Return a list of processors.
Print information about the given processor.
Renders a dictionary from the API.
Upload a single field to a project.
Upload a file to disk.
Download data from a JSON file.
Returns all subclasses of the given c.
Get repository and project repository.
Given a list of variants, return a list of possible phenotypes.
Generator that yields evidence of variants with evidence.
Update the elements of the field.
Remove duplicates from a sequence.
Authenticate using API.
Select a list of selected items.
Retrieves the data for the given issue.
Move the issue data to an issue.
Get the saved task data.
Gets a task from an Async.
Apply a value to the data store.
Flushes the queue to the queue.
Creates a new missing task in a workspace.
Return a list of all data types.
Log an ekmemmetry message.
Initialize the serial port.
Sets the polling values for the given max_waiting.
Render a JSON file as JSON.
Set the context of the current context.
Calculate the number of coefficients.
Set the maximum time period for a period.
Sets the meter password.
Get the number of months in the order.
Assigns the schedule to the schedule.
Assigns a season to the calendar.
Assigns the holiday date for the given holiday.
Reads the schedule from the schedule.
Reads the number of months for a month.
Reads weather dates from the holiday.
Reads and sets up holidays.
Writes the command to the console.
Send a password command to the device.
Update the observers for the observer.
Send a request to the server.
Request the MAC address.
Request the bcbio.
Makes sure that all required fields are required.
Execute the LCD command.
Sets the relay for relay.
Send serial end of serial port.
Sets the pulse ratio for the given line number.
Set the zero table for the device.
Set the LCD device.
Iterate over all fields in a dictionary.
Iterate over all fields in a schema.
Generate a random text string.
Return the summary of the elapsed time.
Return a string representation of text.
Display text to stream.
Return summary summary.
Parse command line arguments.
Setup the result manager.
Run the test runner.
Transform an example file into a Python file.
Transform a description to a class.
Iterate over the description of a description.
Transform an example to an AST.
Iterate over all nodes in the given AST.
Arguments for `argparse`.
Registers a path to the filesystem.
Convert a string to a Python code.
Applies an argument parser to an argument parser.
Loads a module by name.
Loads all sources from a path.
Finds all files in a directory.
Remove a configuration file.
Restart a new message.
Call the given results.
Create a service from a dictionary.
Refresh the session.
Remove expired nodes from a node.
Remove a node from the list.
Get the last update of the node.
Get all nodes.
Refresh the session and refresh the session.
Increment the time of the last time of the call.
Split values into a list of tuples.
Return a list of path names.
Merges the given status to the given status.
Creates a query against the given token.
Convert a token to a query.
Creates a new TimeService from the given options.
Consume the given parser.
Create an option parser.
Return a new parser.
Return a new parser.
Return a parser that parses a parser.
Return a new separator.
Close the call.
Determine if the stream is valid.
Makes sure the heartbeat is alive.
Wrap a REST service.
Iterates over the graph from a given checkpoint.
Iterate over the training and freeze it.
Save a graph from a checkpoint.
Save weights from a checkpoint.
Restore the state of a new checkpoint.
Parse a token from a parser.
Render the tag.
Checks that the arguments are valid.
Get the context data for this context.
Parse a tag from a parser.
Get context data from context.
Creates a TensorFlow session from a CDF file.
Creates a freeze-encoded file.
Save a graph to a graph.
Convert a sequence of sequences into rows.
Iterate over an iterable.
Remove duplicates from an iterable.
Return next item from an iterable.
Suppress exceptions to a callable.
Assert that the given iterable is iterable.
Swap the item and return it.
Gets the first number of queues.
Reset the state of the object.
Parse a variable.
Return a list of all public keychains for this chain.
Iterate over all nodes in the tree.
Takes a selector and returns a boolean expression.
Parse the given selector.
Return a list of all parents in a node.
Return all siblings of a node.
Return list of nodes matching the given schema.
Retrieves the body of a request.
Expire the cache of the cache.
Sets the value of the given key.
Get a value from the store.
Determine if the given key is set.
Determine whether the given timestamp is valid.
Initialize the class from a JSON string.
Initialize a Key from a XML string.
Resolve the content of the template.
Gets the output of a file.
Get the results from the database.
Validate a token and return the response.
Returns the engine used to connect to the backend.
Validate that a token is valid.
Create a token from an object.
Calculate counter of two numbers.
Calculate the counter of two numbers.
Calculate the duration of a given number.
Setup a list of sources.
Send events to the scheduler.
This function will be called when the source is watched.
Parse the format string.
Parse the given line string.
Validate the expiration date of the field.
Validate token and verify token.
Returns device name.
Print a warning message.
Connects to recipients.
Create a secret link.
Send a notification to the recipient.
Sends a confirmation message.
Sends an email to an email address.
Sends a notification to the recipient.
Send a notification to the server.
Create a new link.
Validate that a token is valid.
Revoke the link of the link.
Create a new record.
Get a single record from a request.
Confirm an email address.
Create a new secret link.
Generate SHA256 hash for a given version.
Verify that the message is signed by the given timestamp.
Determine if the given record is expired.
Create an access request.
Makes sure that the email is valid.
Connect to the ssh server.
Returns the selected column name.
Return the selected item.
Return the list of items in order.
Returns the string version of the magic file.
Set the version of the file.
Start the event loop.
Called when the event is done.
List all secret links.
Stop the connection.
Remove all events from the queue.
Receive events from the queue.
Create an elasticsearch server.
Encode an event to a protobuf message.
Encode a list of events.
Decodes a message to a message.
Send events to the stream.
Generate HTML file for preview.
Retrieve preview of a preview.
Main loop for loop.
Determine whether the log should be logged.
Abort the session.
Makes sure that the SAS data is mapped to a SASL.
Add admin footer footer.
Builds the payment parameters for a payment.
Builds credit card parameters for a client.
Send a payment to payal.
Return the version string.
Called when the event is created.
Setup the shortcut for the shortcut.
Called when the item is activated.
Selects an item from the tree.
Update the navigator.
Initialize the options.
Gets all children of this collection.
Returns the icon of the given index.
Runs a process and returns its PID.
Gets the maxfd for the resource.
Close a file descriptor.
Close open file descriptors.
Redirect to a stream.
Add attributes to form field.
Import a module from app name.
Import all project modules.
Parse a template.
Check if a file system is valid.
Check if a URL is valid.
Returns the path of the template.
List objects in S3 bucket.
Build a JSON file for the workflow.
Execute the job.
Archive the project archive.
Create a directory and return the parent directory.
List all files in a directory.
Restore the given folder.
Create a new API client.
List all files in a folder.
Download file from storage.
Determine if the given path exists.
Gets the parent entity of a path.
Creates a folder.
Upload a file to the local filesystem.
Delete a Folder from the storage backend.
Validate the storage path.
Creates a new client.
Create a new request.
Gets metadata for given entity type.
Delete a project from a project.
Deletes a folder from a folder.
Copies the content of a file.
Returns the signed URL for a file.
Add a record to the collection.
Creates a new service from the service.
Returns a copy of the HTTP response.
Returns a copy of this instance.
Returns a new exception.
Returns a list of list of field names.
Add a job to each job.
Run autocoder on a container.
Sorts all elements in the list.
Return a list of tuples.
Load a JSON file.
Shifts the values at the given time.
Return the sum of all values.
Collects rfx from device.
Add a user to the database.
Parses the XML page and returns a list of vns.
Parse a list of releases.
Parses the server and returns a list of leaders.
Parses a BeautifulSoupResult document.
Parses the HTML tag and returns a list of tags.
Parses the user results into a list of users.
Create a tar file with the given path.
Copy all files in a directory.
Copy a file to a local location.
Returns a list of docker docker options.
Refresh the metadata from the database.
Get streams from the database.
Export the stream to a JSON file.
Parses the search results.
Reset the OAuth token.
List all users in the database.
Run bwaite index on a reference.
Connect to the server.
Add a stream to the database.
Add a stream to the database.
Insert a value into the stream.
Start the sync stream.
Stop the stream.
Download a file from a URL.
Uploads a SAM file to S3.
Print labels on ontology.
Print hierarchy of ontology.
Get the mean size of a BAM file.
Create a new metadata file.
Export the data to a JSON file.
Return device device.
Returns a list of labels for the ontology.
Get the hierarchy of ontology.
Returns the contents of the config file.
Determine the mount path to the mount path.
Add an option to the argument parser.
Create an argument parser.
Create a pipeline command.
Sets up the authentication token.
Handles the response from the response.
Returns the Ping server.
Creates a new crud.
Update a specific path.
Deletes a file from a path.
Subscribe to a stream.
Get devices from database.
Run the cutadaptadapt adaptation.
Run samtools with samtools.
Run samtools index.
Run samplamplication.
Run sampler using sampler.
Mark duplicate duplicate duplicate files.
Run Picard for Picard Picard.
Runs the KML algorithm.
Get the affinity matrix for a test.
Send command to websocket.
Subscribe to a stream.
Connect to the server.
Reconnect to the server.
Unsubscribe all subscriptions.
Connect to the websocket connection.
Called when the connection is closed.
Called when the client is closed.
Called when a message is received.
Called when the connection is connected.
Select variants from GATK.
Check if bam file exists.
Write a configuration file to disk.
Load the configuration file.
Gets the term for the ontology.
Search for ontology by name.
Suggests the ontology for a given name.
Iterate over the ontology.
Iterate over all labels in ontology.
Iterate over a set of labels.
Iterate over all GO terms.
Run fastq for fastq.
Add a stream to the database.
Start the Docker container.
Start the spark container.
Start the datastore.
Stops the spark container.
Check that the container is running.
Look up the zone for a zone.
Fetch the configuration from a zone.
Merge the rk config file into a list of dictionaries.
Validate the given changeset.
Minimize the best score of a member.
Calculate the score of the population.
Calculate the cost function for efficiency.
Calculate the cost function for the cost function.
Return the total number of members of this instance.
Return a list of members.
Add a new parameter to the server.
Normalize a dictionary.
Return a generator that yields all environ variables.
Determine whether the given callable is raised.
Transform the results into a list of packages.
Transform result to string.
Convert HTML to XML.
Convert an XML document to HTML.
Open an HTML document.
Remove the tree from the tree.
Drop the tag from the root node.
Returns a css selector selector.
Iterate over all loggers.
Return counts of environment variables.
Determine if a single class is a single class.
Determine if a single module is a single one.
Validate a request parameter.
Validate a request parameter.
Decode file system encoding.
Escape an argument spec.
Returns the encoding name for the encoding.
Determines the encoding of the stream.
Retrieve remote address from a list of forwarded address.
Convert an amount of amount to a number.
Create a BeautifulSoup object from a string.
Parses a BeautifulSoup document.
Convert a BeautifulSoup tree to a tree.
Get the current traceback from the system.
Return the string representation of the exception.
Returns a summary of the summary.
Generator that returns a plain text message.
Render the source table as HTML.
Search for egg info.
Sort a list of eggs.
Return the content type of a URL.
Iterate over links.
Determine whether the API is verified.
Return a list of data files for the given package.
Returns a list of files that match the given package.
Iterate over the requirements file.
Split an iterator into a single line.
Ignore comments from an iterable.
Return node representation of `node`.
Return an attribute node.
Convert value to a number.
Push the stack onto the stack.
Removes the app context from the app.
Return a copy of this app.
Attempt to match the request.
Push a request to the stack.
Check if a distribution is editable.
Preprocess a URL value.
Adds a url function to the registry.
Returns the root directory of the module.
Returns the jinja environment loader.
Run shell command.
Returns the cookie domain name.
Determine if a path is a pure Python file.
Iterate over uninstallations.
Checks that the given version is compatible with the given version.
Build and build a wheel from the cache.
Iterate over symbols.
Write delete marker to delete delete marker.
Determine whether the virtualenv is running.
Returns the username of the user.
Generate scheme scheme for distutils.
Parse the header control control header.
Cache the response from the cache.
Load template from device.
Save the file to disk.
Convert a value to a converter.
Add a list of filters.
Add handlers to the server.
Add a logger to the configuration.
Evaluate a Python script file.
Replace temporary directory in temporary directory.
Retrieve the URL for the repository.
Get value from an object.
Generate the file with the given source.
Returns the path to the cache directory.
Iterate over all eggs in a zip file.
Yield distributions that match the specified path.
Declares a namespace with the namespace.
Returns the class name of the class.
Returns the adapter for an adapter.
Ensure directory exists.
Iterate over all entries in a group.
Determines if the given distribution is available.
Evaluate a marker.
Evaluate Marker in Marker.
Format a log record.
Convert a number to decimal.
Returns the decimal number of digits.
Compute the number of scientific notation elements.
Return the unpatched unpatched unpatches.
Check for requirements.
Fetches the egg from the cache.
Plots dice dice rolls.
Convert an object to a float.
Creates a Price class.
Validate a request.
Get method from args.
Apply a method to the server.
Logs the blueprint module.
Returns the blueprint name of the blueprint.
Make an abstract distribution from a req_to_dist.
Iterate over all required Requests.
Return all namespace names in the distribution.
Encode a JSON response.
Tokenize an annotation.
Merge two tokens.
Copy annotation annotations to another.
Compress a list of tokens.
Iterate over all tokens.
Expand all tokens.
Finds the end of the end of the end.
Replace all tokens in `chunks`.
Iterate over all elements in an element.
Split text into a list of words.
Return HTML tag.
Returns the end of the end of the element.
Serialize HTML fragment into JSON string.
Moves all non-empty tags from a document.
Return the URL for this service.
Recursively links all children of `el`.
Kills conditional comments.
Convert string to DOM.
Export the given location to the repository.
Determine the revision of a location.
Return the name of this module.
Return the exception if any of the test exceptions.
Returns the path to the instance of the instance.
Update template context.
Handles an exception for a request.
Called when the request is raised.
Raise an exception if the request is forbidden.
Handles the request and dispatch the request.
Create a default HTTP response.
Create a URL adapter.
Inject url defaults for given endpoint.
Iterate over an iterable.
Parse a set of requirements.
Convert a requirement to a string.
Convert a package metadata file to a dict.
Iterate over all modules.
Iterate over all classes.
Iterate over all methods.
Determine if the given path is a module.
Iterate over files and directories.
Dump the arguments to the config file.
Load argparse defaults from kwargs.
Sets the value of a given mapping.
Increment the value of a key.
Dump value to string.
Given a req, return a dict of options, return a dictionary of dicts.
Populate the link with the link.
Ensure the source directory exists.
Remove temporary source directory and remove temporary directory.
Returns the distribution of the egg.
Returns a list of site configurations.
Iterate over all modules.
Restart a new interpreter.
Convert string to text.
Try to find the certificate bundle.
Parse an HTML document.
Parse a stream of text into a DOM document.
Parse a stream of text into a tree.
Translate a word to a dictionary.
Convert arguments to a list of tokens.
Bind to the server.
Print report message.
Load a bytecode from a file.
Convert a dictionary of stylesheet params to a dictionary.
Run a command on the system.
Return the implementation version of the module.
Returns a list of distributions that match the given location.
Return a generator that searches for links in a page.
Open a url and return an error.
Remove all paths from the system.
Return a set of paths.
Add a package to the system.
Add a path to the package directory.
Determine whether the user is enabled.
Set aliases for aliases.
Sets the default encoding encoding.
Called when the global environment is set up to sys.
Fix the classpath paths.
Enqueue a text stream.
Determine if the build is a Python version of the build extension.
Convert Python source sources to list.
Start the application.
Get resource content from filename.
Determine if the URL is a URL.
Unpack a file from a URL.
Download a file from a URL.
Determine the hash of a link.
Register a currency.
Register an exchange.
Decode the content of the response.
Determine the default template.
Render template using template.
Render a template template.
Render template from template string.
Parse a python version string.
Determine if the given name is declared.
Add declaration to scope.
Write the import statement.
Create a service factory.
Encode a unicode string.
Returns list of distributions that match the given requirements.
Populate the requirements from the requirements set.
Export the given location to the local directory.
Look up a list of products.
Iterate over pages.
Gets the ancestor node.
Return a list of children.
Extracts an element from a path.
Get element's text.
Returns the date of the element.
Returns the currency and currency.
Returns a list of price.
Send request to cache response.
Build a response from the cache.
Convert string to title.
Determine the constant time between two constants.
Verify the signature of the given value.
Extracts the secret key from the secret.
Returns the signature of the given value.
Returns the signature of the given value.
Verify that the given value is signed.
Verify that the given value is a signed value.
Returns the signature of the given value.
Validate a signed value.
Return the signed representation of an object.
Called when an error occurs.
Yields all parents in the package.
Iterate over all directories in a base path.
Prepares the HTTP response.
Unpack a verification file.
Unpack a file into a ZIP archive.
Install a set of packages.
Builds the graph of the graph.
Adds the canvas to the canvas.
Get node by id.
Called when the connection is connected.
Called when a node has changed edges.
Called when the canvas is changed.
Called when the mouse button is clicked.
Called when the diagram changes.
Clears the diagram.
Called when the domain changes are changed.
Unregisters a map element from the graph.
map element to a node.
Parse XML data.
Process font token.
Process an ellipse.
Process a polygon.
Process a polyline.
Process a text message.
Process images.
Render a grid file.
Save the object to a dot file.
Load the object from the dot file.
Determine if a point is within a point.
Draws the bounds of the actor.
Run the wizard.
Start the database.
Parses the dot-code of the dot-data file.
Create a new model.
Opens a file dialog.
Save the model to file.
Saves the model to a file.
Initialize the graph.
Configures nodes and nodes.
Configures edges of the graph.
Print the status of the bot.
Add a node to the graph.
Add an edge to the graph.
Add a subgraph to the graph.
Add a cluster to the graph.
Get a graph from the graph.
Edit options.
Configures the dot code.
Prompts the user for the user.
Moves the coordinates of a polygon.
Save object to file.
Load an object from a file.
Save the message to a file.
Load an object from a file.
A decorator that returns a new alias.
Parse a text file.
Return a list of start words.
Add a chain to the chain.
Remove an attribute from the chain.
Builds a chain from a sequence of chains.
Create a new program.
Remove a node from the graph.
Get node by id.
Removes the edge from the graph.
Add a subgraph to the graph.
Check if the program has changed.
Sets the node list of nodes.
Parse a DOT file.
Parse a DOT file and return a dictionary.
Build topology from topology.
Given a number of seconds, return the number of time units, return the number of units
Format a duration in seconds.
Initialize the file.
Creates the UI for the given parent.
Generator that yields windows.
Returns a list of children.
Add a child to the object.
Insert a child at the given object.
Remove a child from the object.
Called when a node is called.
Called when all children of the object has changed.
Returns the label of an object.
Sets the label of an object.
Called when a label is emitted.
Initialize the graph.
Updates the editor editor.
Add events to node.
Replace nodes with new nodes.
Called when the node changes.
Adds nodes to the graph.
Replace edges in an existing object.
Called when the edge changes.
Add edges to the graph.
Parses the directive of the directive.
Called when the drawing is changed.
Returns a node that represents a node.
Returns an edge factory for the graph.
Prepare the mongo engine.
Parses the drawing directive.
Parse the label directive.
Called when the drawing is changed.
Update the position of the particle.
Called when the component is changed.
Called when the window is clicked.
High level highlighting.
Draws the main layer.
Determine if a point is within a circle.
Draws the main layer.
Called when an event is registered.
Loop through the queue.
Returns full URL for page view.
Renders the page page.
Render the page links.
Generate url identifier.
Find all modules in a directory.
Find all modules in a directory.
Lists all modules in a module.
Ensure directory exists.
Puts a blob at the given key.
Checks if the card number matches the card number.
Loads a module from the module.
Add a path to the container.
Returns a module that matches the given module name.
Split a line into a list of lines.
Remove all namespaces from a root node.
Determine the consistency of the version of the version.
Create a new instance from yaml.
Merge all actions from a dictionary.
Execute all actions in a directory.
Add a message to the form.
Emit a new record to the server.
Add context to context.
Log a time for the given key.
Add a new url to the queue.
Start the worker threads.
Sets the value for the given kwargs.
Retrieves the key from the cache.
Recursively recursively search for a specific key.
Search for a specific key.
Delete a single item from the cache.
Plot a heatmap from a set of features.
Add a new number of months to the given timestamp.
Add a number of months to a date.
Determine if the month is a holiday period.
Use this method to create a new music service.
Try to connect a storage service.
Reads a column from a CSV file.
Extracts all the files from a JSON file.
Save data to JSON.
Returns a list of rows that have a given label.
Average mean by label.
Restore data from session.
Merge two dictionaries.
Finds all installed apps in the app.
Verify that a block is registered.
Registers a block.
Unregisters a block.
Convert a file to a file.
Determine the minimum version of the desired version.
Handle SSL redirects.
Parse a content type string.
Parse a list of strings.
Resize image width and size.
Downloads a video from a URL.
Connect to the server.
Upload a file to the server.
Connect to the music folder.
Update the filename and filename.
Read HIP HIP HHI file and return as dict.
Scale the acceleration of the aperture.
Read and read a pure waterwater.
Read and read the pure waterwater.
Read an image from a file.
Write ANTsR to file.
Build the number of particles.
Builds the equation.
Builds the C.
Builds all the equations.
Initialize the model parameters.
Read a parameter file from a dictionary.
Convert string to floats.
Sets the signal handler.
Called when a pseudo-handling signal is received.
Called when a signal is handled.
Pauses the signal to be paused.
Abort the program.
Log the status of the signal.
Unregisters an event.
Fetch metric values.
Extracts the signature from a function.
Extracts the signature of the function.
Creates a new argv from the arguments.
Determine whether a METS file should be ignored.
Given a filename and a filename, return the key of the file.
Convert a string to an integer.
Parse the archive header.
Convert seconds to seconds.
Print details about the game.
Sets up the model data.
Search for results.
Write the batch file to disk.
Read data from the results file.
Display the connection of the connection.
Display error message.
Hide error message.
Runs the simulation.
Cancel the plan.
Close the program.
Save the figure to disk.
Open log file.
Open the document.
Setup command line actions.
Move the context menu.
Move the cursor to the mouse position.
Display the graphics coordinates of the screen.
Create a new BlockSet for the given genesis key.
Signs a private key and returns it.
Generate a hash of this object.
Check if the configuration is valid.
Issue an amount of funds to the account.
Gets the lock for all rounds.
Returns the last proof of the last round proposal.
Gets the lock for the current rounds.
Gets the time of the round time.
Called when the protocol is updated.
Create a list of private keys.
Calculate the delay of a packet.
Send the message to the sender.
Given an address, return the native contract class.
Update the list of items.
Convert an image to an image.
Convert an image to vg.
Returns the layer of a layer.
Returns the output of the layer.
Extract features from a network.
Create a new key for the given path.
Finish the state of the transaction.
Release the load table.
Returns a list of table names.
Fix the build compiler.
Return the path to the topology.
Returns the value of the config file.
Sets the value of the config file.
Print table output.
Write configuration to YAML file.
Set the columns of the column names.
Convert to string.
Convert string to float.
Given a string of strings, return a dictionary.
Returns a dictionary of device settings.
Wrap text into text.
Detect devices.
Set the center of the center.
Calculate the output of the PSD.
Return the result of the result.
Updates the likelihood of a signal.
Reads the header from a file.
Write the header to a file.
Add a new task to the queue.
Calculate the number of bins for the given bins.
Create a new buffer.
Setup the PSD dataset.
Stop the stream.
Run CMK command.
Returns a set of datetimes that are not set.
Mask the time in milliseconds.
Mask the first day of a given date.
Convert a list of dates to delete.
Return a set of dates in a list.
Remove dates from a list of dates.
Retrieves the SPI control command.
Reads a bit number from a bitnum.
Write a bit value to the device.
Get the bit number of bits in a bitpattern.
Move interrupts to the screen.
Sets the interrupt edge of an edge.
Waits until a file is available.
Register a pin function.
Deregisters a pin.
Enables interrupts interruptions.
Send SPI to the device.
Render the form of the template.
Returns True if all errors are present in the form.
Render the link template.
Extract the version from the package.
Adds the form to the form of the form.
Raise the status of the status of the response.
Make a GET request.
Calculate the humidity of a temperature.
Calculate the temperature of a temperature.
Publish the request.
Calculate the CRC of the given data.
Verify that the given data is valid.
Unpack a date from a date string.
Determine if the archive is stored.
Wait for the node.
Send a command to the device.
Gets the next record from the archive.
Parse the archive fields.
Update weather and update weather.
Initialize the logger.
Returns a list of sites for the given configuration.
Calculate the value of a station.
Set up the args and pressure.
Set command line arguments.
Write the value to the file.
Fetch all requirements for the given requirements.
Push a override to the stack.
Remove the stack from the stack.
Add an override to the stack.
Push an extra stack to the stack.
Remove an argument from the stack.
Add additional additional elements to the stack.
Remove duplicate fields from field names.
Parse results into a string.
Extract params from a query dictionary.
Returns a DataFrame containing the dataframe.
Returns a graph containing the results of the results.
Plot the plot of the plot.
Serialize the results to a CSV file.
Add context to context.
Return sorted list of widgets.
Returns a list of all widgets that have changed.
Registers a widget.
Unregister a widget.
Get the last update of the dashboard.
Save a setting to the dashboard.
Determine if the update is updated.
Concatenate arrays together.
Check if arguments are valid.
Validate that `Axis` is a tuple or tuple.
Wrap a function to create a series of data.
Align the shape of the mesh.
Convert the array to Spark.
Takes an axis and returns it as a matrix.
Returns the number of chunks of a plan.
Return a mask of indices.
Partition a RDD into a partition.
Stacks the RDD of the RDD.
Align the axis with the given axis.
Return the first row of the RDD.
Return the mean of the metric.
Returns the variance of the variable.
Determine the standard deviation of an axis.
Sum of the sum of values.
Returns the maximum value of the metric.
Returns the minimum value for the given axis.
Transpose the values of the matrix.
Swap axis1 and axis axis1 and axis1.
Reshape the values of the given shape.
Reshape a dictionary.
Return the RDD of the RDD.
Returns a copy of the RDD.
Convert RDD to array.
Convert an argument to a tuple.
Convert a list of arguments into a tuple.
Ensure that the given shape is valid.
Determine if two arrays are closed.
Ensure that a list is a list.
Slice a slice into slice.
Check that a new `old` is a new `new`.
Verify that a new array is a new shape.
Takes a sequence of values and returns it.
Expand an array of arrays.
Look up a Constructor object.
Return an array of NaNeros.
Return a numpy array.
Concatenate multiple arrays.
Compute the discrete likelihood of a data array.
Returns the maximum likelihood of an array.
Calculate the density of a sample.
Compute the best approximation of a given data.
Plot the pf-f-f-f-pf-f-f-
Log likelihood of the model.
Sanitize the given HTML.
Configures analytics for analytics.
Return a list of tags.
Return the MD5 hash of the key.
Return the SHA256 hash of the key.
Return a hash of the key.
Parse a string into an integer.
Decode a key from a string.
Parses a RSA RSA key.
Parses the SSH DSS key.
Parses ecdsa and returns it.
Parses an Ed255 16-bit integer.
Parse the message and return it.
A list of supported mechanisms.
Main entry point for parsing.
Initialize the setup package.
Create a new audio file.
Returns html for the page page.
Normalize the frontend frontend.
Generate full font url.
Generate HTML for the frontend.
Renders the frontend page.
Generate html for the Json UI.
Returns the url for the django database.
Returns the javascript url for the django database.
Generate the url for the django database.
Generate html for django django.
Show the scroll to the scroll page.
Generate HTML scroll scroll scroll scroll.
Returns the CSS page for the given version.
Returns the URL for the given account.
Generator that yields hashes for a user.
Calculate the expiration time of the given minutes.
Generate a token for a user.
Serialize user data.
Update a user's profile.
Called when a user is successful.
Validate that a token is valid.
Check if the request is secure.
Get username for user.
Creates a new user with the given params.
Login to a user.
Log out of the user.
Login to the server.
Perform a login token using auth token.
Uses the login token for the login token.
Called when the user has forgotten password reset.
Resets the password for a user.
Merge two dictionaries.
Get the id of a model.
Returns a dictionary of dict ids for the given object.
Get the object id for a given model.
Return a dict of objects that match the given criteria.
Get an object from a JSON object.
Set the default events for the given operation.
Set the primary key for the model.
Truncate the database.
Truncate the database.
Initialize build options.
Finalize the options.
Convert a path to a directory.
Seed random values.
Return the state of the state.
Generate a random string.
Iterate over all api routes.
Clear all the API paths for the API.
Dump a value to a string.
Initialize the websocket connection.
Called when the connection is closed.
Process a message from the websocket client.
Read frames from a message.
Process a reply message.
Dispatch a message to the server.
Receive a connection from the database.
Receive a ping message.
Receive a sub-sub subscription.
Receive a unsubscribe from the server.
Receive a method from the API.
Generator for serving.
Parse command line arguments.
Prints a message to stdout.
Stop all threads.
Run the main thread.
Runs the database.
Make sure we need to be regenerated.
Generate random id.
Auto-discover API.
Return a dictionary of error messages.
Get an object by name.
Send a log record to the server.
Add a resource object to the resource.
Send a message to the registry.
Sends a notification to the APNS server.
Fetch inactive registration IDs.
Send a message to the given registration.
Send a bulk message to a bulk.
Send JSON data to device.
Send a request to the API.
Get model class from module.
Search for Google Analytics.
Translate a term to a phrase.
Returns a list of trending trends.
Gets a GIF from a gif file.
Creates a new screenaver for the screen.
Uploads a file to a local file.
Normalize a dictionary.
Make a GET request.
Return a generator that yields trends for a given rating.
Gets a GIPImage from a gif file.
Uploads a list of images to a file.
Creates an extension for the given access control.
Attempts to authenticate the youtube server.
Uploads a video to a video.
Check the status of a video.
Update a video entry.
Delete a video entry.
Check for video availability.
View function for rendering video.
List video videos.
Upload a direct upload to the video.
Uploads a video to youtube.
Redirect to video.
Remove a video from a video.
Returns a single video entry.
Save video and save it.
Delete a video.
Update the metadata for the API.
Update an existing metadata field.
Update item with attributes.
Parses a string into a list of nodes.
Return a string representation of a tree.
Load an object from a file.
Read a file from a file.
Parse a node from a string.
Create a new node.
Return a string representation of the tree.
Get node by name.
Remove nodes from the tree.
Removes internal variable names.
Remove all leaf names.
Dispatches a JSON string from a JSON string.
Raise an exception if the feature is not found.
Get the arguments for a request.
Wrapper for `callback`.
Retrieves a cookie from the cookie.
Remove a cookie from the cookie.
Redirect to a redirect url.
Gets the user's auth token.
Generate request parameters.
Redirect to the authorization endpoint.
Concatenate a URL with arguments.
Parse the header and return a dictionary.
Add a value to the cache.
Get a list of values for a given name.
Parse a line into a dictionary.
Parse a header from a string.
Normalize a header name.
Convert string to UTF-8 string.
Convert value to unicode string.
Convert value to base string.
Recursively recursively recursively recursively recursively recursively
Checks that the auth plugin is valid.
Select the policy based on the given origin.
Calculate the occupation of a grid.
Write a molecule to a file.
Write a PDB box to a file.
Determine the list of molecule numbers.
Resize the ligand for the ligand.
Iterate over a file.
Add message to message.
Send messages to a message.
Get messages from a user.
Add messages to user.
Update config file.
Verify that a message is valid.
Retrieve data from a message.
Retrieve user password from message.
Updates config data from a message.
Updates the configuration of a message.
Create user profile from message.
Print all required required items.
Get data from a message.
Returns the auth dictionary for the given message type.
Configures the profile.
Write data to a message.
Write auth message to the user.
Send the message to the server.
Construct a message from a message.
Validate a message.
Validate that the given attribute is a valid format.
Validate that the URL is valid.
Check that the given attribute is valid.
Send a single message to the queue.
Add a message to the channel.
Extract the body from the file.
Trim a list of keyword arguments.
Send a message to the server.
Returns the chat id of a user.
Send the message to the server.
Send the message to the server.
Retrieves a SMTP server from an address.
Generate email message.
Add headers to message.
Add the message to the message.
Add attachments to message.
Returns a session object.
Return an SSL SSL connection.
Get a TLS session.
Sends the email to the server.
Save tags to file.
Unloads the image from the image.
Returns the image of the image.
Validate that the plugin is valid.
Remove all internal variables.
Read the data from the file.
Delete the file from the file.
Resize the file size.
Insert a chunk into the file.
Save the frame to a file.
Delete a file from the cache.
Parses the input file.
Process a line block.
Add a source block to the source.
Draws text at given font.
Parses an ISO8601 formatted string.
Convert words to HTML.
Convert a word to HTML.
Convert a list of words to HTML.
Convert a list of lines into HTML.
Convert a list of items to HTML.
Save metadata to a file.
Update the parents of a file.
Start the game.
Registers a mapping for the given product ID.
Return product id.
Signs a string with the given string.
Get request headers.
Send GET request and return response.
Send a POST request.
Send a delete request.
Convert a value to a string.
Get changes for a change set.
Return the size of the packet.
Returns the last page of the given file object.
Set the section of a section.
Add a Markdown markup.
Parses the text content of a text string.
Return the Markdown tag for the given tag name.
Create a new zone file.
Lock a file object.
Inserts a file at the given offset.
Delete bytes from file.
Convert string to UTF-8 string.
Add a change change to the database.
Parses the email and returns a dictionary.
Measure the content of a string.
Determine if the state is modified.
Deletes the record set.
Save the properties of this instance.
Reads size bytes from file.
Remove all keys from the dictionary.
Add a frame to the frame.
Update the most recent API.
Unloads the sound from the Sound.
Set the loop points for the loop.
Returns a list of glyph values.
Filter a list of glyph names.
Write encoding to file.
Dump the array to a file.
Check if a file exists.
Make a list of file names.
Parse a zone zone into a dictionary.
Parse the zone set.
Convert blocks to string.
Group blocks with padding.
Delete the metadata file.
Save metadata to file.
Parse the DNS record name.
Parse a DNS record record.
Parse the RRset record.
Add a new record to the record set.
Adds a new MX record to the database.
Create a new namespace record.
Create a new pointer record.
Create a new SPF record.
Adds a new SRID record.
Get values from a change set.
Write a ChangeSet to an etree.
Write a change record to a change record.
Initialize the log file.
Return the item for the given alias.
Iterate over a dictionary.
Joins a list of html attributes.
Initialize the application.
Initialize all bars.
Binds a bar bar.
Return a dictionary of arguments.
Determine if the request is currently active.
Validate a metric class.
Gets a statistic by name.
Calculate statistics for statistics.
Auto-discover apps.
Dump stats to CSV.
This method is used to update the statistics.
Get a list of values from a request.
Get a boolean value from request.
Get next color from settings.
Returns a dictionary of Google Analytics parameters.
Display the number of geojson widgets.
Display metrics for a GeoJSON view.
Plot a line bar chart.
Retrieves the geojson board for a request.
Retrieve metrics for a GeoJSON request.
Returns a list of stats.
Registers a new gadgets.
Returns a dictionary containing the context data.
Print an error message.
Prompts the input for the user.
Read input and return a list of input items.
Prompts the input file for the given extension.
Gets the schedule for a given year.
Returns the best game from the game.
Returns the year of the year.
Return surface surface surface.
Gets the coin balance of the coinbook.
Gets weather and weather data.
Gets information about the table.
Calculate the statistics for the year.
Calculate the players table.
Get statistics from a selector.
Gets the votes for a player.
Gets the lines of the cross-source table.
Returns the year of the year.
Get statistics from a table.
Given a class and args, return the key tuple.
Returns the age of a date.
Get statistics from a table.
Get stats for a game.
Gets statistics for a given kind.
Get statistics for a given kind.
Get statistics for a specific kind.
Returns a summary of the stats table.
Gets the stats for the given kind.
Get statistics for a PGP table.
Fetch basic statistics from Yahoo Finance.
Get current value from session.
Expand the main dataframe into a dictionary.
Add the players to the feature table.
Add features to a table.
Calculate the probability of a line.
Returns a DataFrame containing the results.
Return a list of year awards.
Returns the name of the team.
Returns a list of box scores for a given year.
Given a year, find the first year, return the first year.
Given a year and year, return a list of players.
Calculate schedule for a given year.
Determine the heart coord on the given year.
Returns the coordinate for the given year.
Return the URL for a year.
Returns the scheme for the given year.
Determine the alignment of the year.
Returns a list of splits on the year.
Get html from url.
Pushes the request to the queue.
Return a direct read queue.
Close the queue and close the socket.
Extracts a sample from a path.
Get the block size from a path.
Get a generator from the queue.
Parses a pbb file and returns it.
Dump files to disk.
Read a varint from the stream.
Read data from stream.
Flushes the file descriptor.
Write the buffer to the buffer.
Flush the output buffer.
Returns the path of the game directory.
Input for input text.
Evaluate the traits of the traits.
Wait until a condition is reached.
Waits until the given element is available.
Add ignored exceptions to the request.
Execute the main volume.
Execute the main function.
Send a message to the server.
Return the status of the device.
Power off.
Power off.
Set the volume of the device.
Select a source from the source.
Deletes a request from a request.
Calculate the CRC of a message.
Generate a password for the given value.
Find missing missing missing schema.
Returns a list of all href links.
Check if the song name is a valid song name.
Parse the url and return the url.
Generate Google Google Google Google Google Google Google Google Music library.
Parse Google Analytics url.
Parse a Google website url and return the URL.
Get html from url.
Download a file from a URL.
Download file from url.
Return a list of stations for a city.
Returns a dictionary of observation information about a location.
Parses a JSON response from a JSON response.
List of compiled compiler extensions.
Return the mimetype for the compiler extension.
Return the mime type of the compiler.
Returns the compiler extension for the compiler.
Registers a new processor.
Unregister a processor from the given mimetype.
Returns a list of paths.
Registers default defaults.
Imports the Qt core from the system.
Returns the METS node for the given settings.
Add plugin name to netnode.
Remove a plugin name from a plugin.
Import values from settings.
Exports the values from a dictionary.
Returns the path of the plugin.
Iterate over all keys in the database.
Simple error handler.
Get a table of DynamoDB tables.
Returns a list of all tables in the database.
Fetch items for category.
Get the metadata for a given item.
Calculate the date of a specific item.
Fetches the owner team for a given id.
Fetches the user's owner for a given id.
Fetches the data for a crate.
Fetch the data for a given crate ID.
Gets a list of crates.
Gets a crate for a given id.
Fetch all pages from a path.
Fetch items for category.
Returns a generator that yields questions from the API.
Fetch items for category.
Returns the datetime of the metadata for the given item.
Determine the category for the given item.
Gets the pagination of items from a category.
Returns a list of available buffers.
Return the priority of the device.
Close the queue.
Submit a list of block objects.
Cancel an event.
Cancel all pending transactions.
Fetch items for category.
Gets the text of the cells.
Parse the event from the feed.
Return the export format for a given pid.
Return the permission factory.
Renders a record.
Export a record to a record.
Returns a callable for the given time.
Close the socket.
Remove a client from the pool.
Increment the counter of the given name.
Send a request to the device.
Add a timing measurement for the given name.
Send a gauge to the gauge.
Gets the gauge for the given name.
Add a metric to the device.
Request data from the queue.
Create a batch client.
Return a unit-level client.
Send data to the socket.
Create a batch client.
Flushes messages to the socket.
Return a new UDP client.
Create a new user by password.
Attempts to interpret a problem.
Convert a term to an Openmath object.
Convert an OObject object to Python object.
Convert object to Openmath.
Initialize the application.
Validate a list of choices.
Create a value for a field.
Returns a dictionary of all form fields for the given form.
Returns the data for the given field.
Returns the data for the given field.
Generate a random date string.
Generate a random datetime field.
Convert a field to a float.
Convert a field to a string.
Generate a time field.
Generate a random choice field.
Generate random data for multiple choices.
Generate random data for a given field.
Encode an object to bytes.
Publish a local distribution.
Tag a local version.
Load a global variable from the module.
Decodes an array of bytes into bytes.
Convert a value to a string.
Format a number of digits.
Convert data to numpy array.
Convert a numpy array into memory.
Add a configuration file.
Remove a configuration file.
Return a dictionary of ws.
Get a specific name.
Check if a repository exists.
Synchronize repositories.
Clone a URL from a repository.
Checks the version of the API.
Convert an array of arrays to a numpy array.
Convert voxels into a numpy array.
Prints a workspace.
Print an update of a repository.
Setup a console handler.
Execute a command.
Load an image from a PNG file.
Save a collection of numpy arrays.
Print workspace information about a workspace.
Print status information about a repository.
Gets the block size for a token.
This function will check for the cutout.
Load an image from a txt file.
Save an image to a PNG file.
Load multiple files from a TIFF file.
Write the config file to disk.
Clone a URL to another.
Returns the version of the provider.
Add a greeting to the message.
Display an option for an option.
Reserve IDs for a channel.
Merge multiple IDs into a list of IDs.
Propagate a message to the server.
List all projects in a dataset.
Retrieves a dataset by name.
Returns a list of Dataset datasets.
Parse command line options.
Show a workspace.
Show workspace information about a workspace.
Show all workspace names.
Returns the URL for this endpoint.
Guess format for file extension.
Open a file and return an image.
Convert a file to a file.
Convert a list of dictionons to a dictionary.
Determine the type of a type.
Delete a channel from a channel.
Convert a dataset to JSON.
Convert dataset to dict.
Convert a channel to a dictionary.
Return a dictionary of project names.
Identify image size.
Upload data to the server.
Search for repositories in a workspace.
Retrieves a list of public tokens.
Retrieves information about the project.
Set metadata for a token.
Retrieves a request from the API.
Make a POST request.
Delete a URL from a token.
Load data from hdf5 file.
Save an array to a numpy array.
In-place gaps in a tree.
Retrieve a screenshot from the vvim.
Install translations.
Ensure that the lock is exclusive.
Calculate the percentage of data.
Retrieve stats for a server.
Retrieves the cache info from the server.
Return a dictionary of context data.
The status of the server.
Renders dashboard page.
Display stats about a server.
List slabs for a server.
Convert value to human readable size.
Find a configuration file.
Add a new environment.
Applies the configuration to the config file.
Returns the path of the file.
Reads and returns the contents of the file.
Write a file to disk.
Configures the file system.
Creates the file if necessary.
Apply the configuration to this node.
Returns the path of this node.
Remove the directory from the directory.
Prepare all children.
Clean up all children.
Return path to file path.
List all files in this directory.
Write a file to disk.
Reads a file from a string.
Add a file to the list of files.
Save the yaml file.
Load the yaml file.
Removes the path from the cache.
Load all plugins from a directory.
Return a child node.
Get the value of the container.
Convert a string to a string.
Builds a callback URL for a given request.
Read input from the socket.
Send output to the server.
Send a request to the client.
Read a socket from a socket.
Write the output of a socket.
Retrieves the set of sensors.
Configures the device.
Return the address of the source.
Return the address of the receiver.
Called when the session is closed.
Create a new sender.
Add a sender to the device.
Create a new receiver.
Add a receiver to the device.
Called when the connection is closed.
Called when the session is closed.
Process an endpoint event.
Add Markdown patterns to Markdown.
Called when the connection is closed.
Called when a connection failed.
Extracts the host and port number from the server.
Connect to a socket.
Create a socket socket.
Return a list of connections for each connection.
Return the output of the stream.
Creates a new sender with the given address.
Rejects a sender from the sender.
Create a new receiver.
Called when the connection failed.
Called when the connection is active.
Called when the connection is closed.
Called when an error occurs.
Returns a string representation of the color.
Extract the fonts from a list of fonts.
Set the compression flag.
Add an object to the buffer.
Write stream to stream.
Write stream to file.
Add a new page to the document.
Set the color scheme for the PDF.
Initialize the default font.
Add a page to the page.
Set the font size.
Add text to text.
Adds a new line to the page.
Add a PDF to the chart.
Write pages to disk.
Return list of orientation changes.
Outputs all fonts files.
Output images to disk.
Write the image to disk.
Transform a matrix to the screen.
Return the position of x, y, y, x, y, y, y,
Set the style line.
Rotate around point x,y,y,y, angle, angle, angle,
Sets the information about the user.
Set the display mode.
Write the document to disk.
Write PDF header.
Write pages to page.
Save resource dictionary.
Print information about the object.
Compute the metadata file.
Iterate over a sequence of vectors.
Iterate over a sequence of sequences.
Generator that yields a generator for each gene.
A generator that iterates over a set of trees.
Checks if the test length is fit.
Checks if the given test length is fit.
Determine if x coordinate is greater than x.
Determine if the point is greater than y.
Returns a copy of this cursor.
Gets the x of x, y.
Move the y-axis of the particle.
Draws the screen.
List all tags in this account.
Get a specific label by name.
Delete a tag. Args: id (str): ID of the tags to delete.
Create a new label.
List all actions.
Return a dictionary of tags associated with a label.
List all hooks.
Setup Sphinx extension.
Returns the path to the theme directory.
Make a POST request.
List all hosts.
Returns information about the log set.
Return the duration of the simulation.
Update the fields of the model.
Compute the trajectories.
Binary binning.
Removes all memory functions.
Receive data from the socket.
Yield line from the buffer.
Return the status of the message.
Generate information about an info message.
Print info about an error message.
Retrieve capabilities for a given keyword argument.
Determine if the device is read.
Close the connection to the server.
Gets the date of the server.
Print help message.
Generator that yields new news groups.
Return a generator that yields new new news.
List news groups.
Generator for all active users.
List all news groups.
Generator that yields information about the network.
Lists all extensions in the system.
Generate a list of strings.
Returns a list of values.
X XDR message.
Generator that yields messages from a message.
Whether the gzipped gzipped feature is supported.
Convert a value to an integer.
Make a POST request.
Make a DELETE request.
Make a GET request.
Lists all scheduled queries.
List tags in account.
Gets tags by name.
Delete a tag from the account.
Create a new scheduled query.
Delete a tag by ID.
Parse the status of a line.
Parse the line header and return the value.
Convert a dict of headers to a string.
Do a POST request.
Run a test suite.
Returns the docstring for the given defaults.
Set the value of the field.
Check if value is a valid type.
Return the value of the field.
Checks if the value is a valid type.
Return the symmetric error matrix.
Sets the errors.
Set the value of the model.
Import metrics from metrics.
Convert a list of dictionaries to a dictionary.
Filters the metrics for the filter.
Calls the API call to the server.
Translates an expression into an expression.
Convert text to operator.
Creates an instruction.
Initialize required parameters.
Returns a list of parameter names matching the given pnames.
Returns the value of the parameter values in the model.
Returns the array of errors in the model.
Clears all derived values.
Set the method for the method.
Extract environment variables from environment variables.
Calls the api method.
Ensure that the scene is valid.
Determine the type of the product.
Get the size of a remote file.
Validate a list of bands.
Connects to ethereum server.
Normalize a timezone.
Escape an iterable.
Return a list of all lines in text.
Given a source, return the position of the source.
Dump the time of the relay.
Remove all data from the plugin.
Initialize a list of files.
Given a list of files, return a new chance.
Runs the command line.
Concatenate the given text.
Convert text to special case.
The grammar for parsing.
Returns a list of all rules.
The list of comments.
Returns a list of directives.
Compile the source source file.
Returns the formatted representation of the schema.
Gets the imports of the module.
Return a string representing the token type.
Returns the formatted class definition for this rule.
Return the entry point for this rule.
Return the source of the given rule.
Determine the rule for a rule.
Convert an expression to an astree.
Convert a node to an AST node.
Return a list of operands of operands.
Removes all group groups from the given optree.
Convert AST node to code.
Convert AST node to code.
Convert an AST to code.
Convert AST group to code.
Convert a regular expression to code.
Convert a string to code.
Convert AST to code.
Convert an ast node to a list of ast.
Convert an ast instruction to a list.
Convert a `op` into a list of operands.
Convert an ast instruction to code.
Return a list of directives that match a predicate.
Determine if the node is a node.
Print the results of the API.
Returns a new id for the given id.
Remove a hotkey from the given control.
Add command line arguments to the parser.
Configures logging for logging.
Validate the arguments.
Convert a list of infix prefix to a prefix.
Convert a list of nodes to an optree.
Recursively reduce the given nodes.
Loads the plugin manifest.
Returns the maximum length of the field.
Determines the column length of columns.
Escapes all of the metrics.
Print the fields of the field.
Print metrics for metrics.
Generate Markdown for Markdown.
Parse text from text.
Attempts to attempt to attempt to attempt to retry.
Add command line arguments to parser.
Parse a string from a string.
Output CSV for CSV.
Output JSON to JSON.
Output a JSON string to stdout.
Create an XML element from a JSON XML document.
Returns True if the node is empty.
Prints the contents of the tree.
Returns a regular expression for the given extent.
Gets a terminal node from text.
Gets the exclusion match against the given text.
Count leading whitespace.
Call extractor function.
Gets the position of this node.
Determine if the node is empty.
Add ignored ignored messages.
Determine if value is a node type.
Returns a flattened tree with the given predicate.
Returns a copy of the tree.
Merge this node into another node.
Return a copy of this node.
Return a copy of this node.
Return the position of the cursor.
Return the position of the read buffer.
Move next character to next character.
Move next line to next line.
Move previous line to previous line.
Gets the last line of the cursor.
Increment the cursor position.
Save current context.
Restore current context.
Return the formatted message as a string.
Sets the name of this node.
Count number of variables.
Count number of functions.
Updates the current state of this scope.
Return a new scope with the current scope.
Update the set of elements in the set.
Return a new scope with the current scope.
Removes the difference from the set.
Return the difference between the current signal.
Update the symmetric symmetric difference between two sets.
Return a symmetric symmetric symmetric symmetric difference.
Adds a scope to the scope.
Remove a scope from the scope.
Removes the scope from the scope.
Return the first signature of the first element.
Gets the last signature of the signature.
Get a scope by name.
Gets a signature by name.
Returns a list of all inherited variables.
Called when a new translator is injected.
Normalize an AST node.
Set the attributes of this node.
Determine if the hit is valid.
Returns the signature of the simulation.
Resolve the receiver.
Returns the resolved name of the given type name.
Sets the name of the resolved type.
Delete a local file.
Delete a S3 bucket.
Delete a file from storage.
Save object to local filesystem.
Save an object to a file.
Save an object to a local file.
Return a list of S3 bucket names.
Creates a new EnumEnum.
Add a call object to the chain.
Read the end of the stream.
Parses the rules of the rule tree.
Remove all rules from the rule cache.
Return the value of a node.
Add a stream to the stream.
Start a tag.
Set the end of the stream.
Set the rules for this Rule.
Set the hooks for this hook.
Set the set of directives.
Evaluate a rule.
Evaluate a rule.
Checks whether the given text is a valid character.
Read a single character from the stream.
Read a character from the stream.
Read until the stream is closed.
Ignores the next block until the stream is closed.
Checks that the record matches the structure.
Add a rule name to the rule.
Add rules to a rule tree.
Add a rule to the rule.
Add sequences to the parser.
Add a parser to the parser.
Add a range to the sequence.
Add a function to the receiver.
Adds a capture to the sequence.
Add a value to a sequence.
Add a hook to the parser.
Set the value of a parameter.
Parse a string parameter.
Parse a parameter.
Parse a parameter.
Set the name of a hook.
Add a parameter parameter to the list.
Gets the rules from the stream.
Ignores the COF block.
Add a state to the state.
Return a DOT representation of the state.
Serialize this object to a dot file.
Writes the plot to a PNG file.
Return a textual representation of the event.
Returns the next state of the next state.
Reset the alive state.
Infer a list of block nodes.
Infer a subnode.
Initialize a literal node.
Dump all nodes and tags.
Exit when the scope is finished.
Parse a statement.
Return `node`.
Return True if call is True.
Return AST node.
Return an AST node.
Visitor for `Capture`.
Return scope.
Visitor for `alt`.
Return the expression representation of the sequence expression.
Return `expr`s expr.
Return a statement.
Return a statement.
Concatenate a string to a string.
Sets the indent level of a list.
Convert list to string.
Prints all nodes.
Populates the graph with the given sequence.
Populates the state of the state.
Builds the state tree from the tree.
Returns True if the node is equal to the predicate.
Build a grammar from a string.
Build a grammar from a file.
Parses the contents of a source file.
Parses a file and returns the parsed tree.
Sets the node's rule node.
Set the value as an integer.
Gets a subnode.
Dump a state to a dictionary.
Return a list of records from the database.
Return a list of records from the database.
Returns a list of checks for the database.
Dump an object to a dictionary.
Return a list of accounts.
Dump information about a user.
Return list of modified records from the database.
Return list of modified record ids.
Get all roles for a collection.
Get all records for a given record.
Returns a dictionary of dictionaries for the given record.
Dump record to JSON.
Return the number of records that match the given query.
Dump records to a JSON file.
Dump data to JSON.
Load a model from a database.
Collects a dictionary of things from a dictionary.
Initialize the application context.
Get the run SQL query.
Get the list of actions from a query.
Dump token to JSON.
Loads a token from a dictionary.
Import a record from a database.
Import config file.
Dump an object to a dictionary.
Get users from database.
Get user's users.
Dump information about a user.
Load deposit data from database.
Create a persistent record and store it.
Load a record from the database.
Load all records from a source.
Returns a dictionary of stats.
Start the web application.
Dump the profiler command.
Delete the profiling on the server.
Delete the server.
Get the current status.
Calculate translations of images.
Combine two images into one-dimensional image.
Adds one dimension to the array.
Create a record from the database.
Create a record from the database.
Update a record with the given revision.
Create persistent identifiers.
Delete a record from the database.
Create an object from a file.
Delete all buckets from a record.
Return list of persistent identifiers.
Prepare files for files.
Return list of pids.
Determine if a record is deleted.
Loads a community community.
Loads a feature from a database.
Dump things to a JSON file.
Check for a given thing.
Delete all event handlers.
Compute the magnitude of a vector.
Normalize a vector.
Transform the coordinates of the mesh.
Ensure that the meshes are necessary.
Sets the length of the mesh.
Sets the parent of a child.
Get the pivot point of the mesh.
Start animation.
Set the state of the actor.
Unset the state.
Set the state of the texture.
Unset the state.
Ensure that the given object is set.
Refreshes the scene.
Draws the mode of an object.
Sets the model from the model.
Write a report to a file.
Add a new menu.
Redraw the label of the label.
Redraw the label of the label.
Draws the background layer.
Remove a widget from the widget.
Redraw the label of the label.
Registers the event handler.
Register event handler.
Add a label to the window.
Opens the menu.
Updates progress bar.
Render the actor with the given view.
Render the scene.
Determine if a resource exists.
Add a category to the category.
Return the missing texture.
Get model object from cache.
Load a model from the device.
Get model data from given name.
Add a new widget.
Draws the menu.
Called when the background is changed.
Update the scrollbar.
Determine if the given position is a position.
Return the probability of the distribution.
Adds layer to layer.
Add an action to the list of actions.
Perform a single action.
Register a new name.
Add a layer to the layer.
Render all layers.
Delete all layers.
Returns a list of borders.
Return the offset of the view.
Return the size of the widget.
Read a mesh from a hdf5 file.
Make a connection matrix for the given shape.
Set the list of fields.
Add fields to the collection.
Check that the argument is valid.
Return the space of this element.
Return edges of the edges in the graph.
Compute statistics statistics.
Add node to node.
Convert nodes to surface surface.
Add elements to layer.
Return all fields of the fields.
Generate series of metadata.
Create directories if necessary.
Run a GMM file.
Read a history report from a history file.
Read the field of the field.
Convert list to string.
Return a string describing the equation.
Return a string representing a set of labels.
Parse the response from the API.
Make a GET request.
Write xy report to xy file.
Return the error message.
Determines whether the exception is thrown at the given descriptor.
Extracts the data from the data store.
Determine the time mode of the series.
Sets the options for the x axis.
Creates a new class for the given class name.
Iterate over notifications.
Try to convert value to string.
Convert string to int.
Render a graph.
Convert unicode string to unicode string.
Determine if the given mime type matches the given mime type.
Returns the domain name from a string.
Given a domain and a domain name, return a list of strings.
Make a hash for a given token.
Collect all words in the document.
Index a document.
Invert a given hash to a list of keys.
Given a list of hashes, return a dictionary of hashes.
Look up a stream for a given hash.
Iterate over a stream of protobuf files.
Read a varint from the stream.
Read a block from the stream.
Serialize a sensor key.
Convert a streamitem into a key.
Context manager to change working directory.
Strip prefix from string.
Strip suffix from string.
Determine if a needle is a subsequence.
Start the WSGI server.
Close the server.
Return the callback handler for the error page.
Add a route to a route.
Resolve a method and return the path.
Resolve a non-route route.
Normalize a wildcard pattern.
Return the response body.
Add a header to the request.
Add a cookie header.
Return the status of the response.
Returns the content type of the response.
Remove all files in a directory.
Returns a list of open files.
Attempt to download a text from a file.
Get lines from a file.
Generate a random word pair.
Generate a random pair of gene species.
Makes a sentence from a sentence.
Display similarity between query.
Execute a sentence on a sentence.
Print entities from a sentence.
Shortcut for short summary.
List keywords for a user.
Generate statistics for a sentence.
Initialize all stages.
Iterate over all Writes.
Iterate over a stream of filenames.
Replace the pipeline with the pipeline.
Determine whether a target is a list of targets.
Determine whether the target is a set of targets.
Match multiple tokens.
Generate a marker file.
Stop the child process.
Multiply multivariate p.
Iterate over a sentence.
Create the label index for the stream.
Creates a sentence from a stream.
Write a file to disk.
Generate a marker file.
Remove characters from a string.
Initialize the pipeline configuration.
Generate a chunk of a Json file.
Write a file to file.
Removes whitespace from a string.
Parse HTML file.
Try to load a stage by name.
Load the external stages from a file.
Initialize a stage object.
Read and return the next index from the index.
Determine whether the URL is a valid domain.
Creates a list of labels for the given URL.
Iterate over all files in a directory.
Get all tasks in the queue.
Gets a random number from the cache.
Extract sentences from a sentence.
Verify that the given data is valid.
Retrieves the S3 bucket.
Decodes a message into a stream.
Extracts a chunk from a bucket.
Convert a stream to a KML file.
Convert a KML file to a stream.
Return a key for a stream.
Main entry point for the plugin.
Build an argument parser.
Iterate over tokens.
Convert a list of ASCII characters into a tuple of tokens.
Add an element to the document.
Return the XML part of the text tag.
Return the index of the text element.
Iterate over all descendants of an element.
Select elements from a source.
Select rows from a source.
Select rows matching the given pattern.
Return the next sibling of the given element.
Execute an INK command.
Export an ASCII file to an output file.
Convert svg file to PDF.
Convert svg file to PNG.
Returns a jinja environment.
Setup the template file.
Fills the contents of the document.
Save content to file.
Create a document from a template file.
Replace all SVG content with svg.
Render an SVG file.
Render the template.
Parses the given source and returns an XML string.
Parse HTML fragment fragment.
Insert text into XML.
Insert node before node.
Return the XML node.
Extracts a list of strings from a node.
Insert an xml element at the given index.
Parse the configuration file.
Retrieves Google credentials from Google Storage.
Create a dictionary of datetime objects.
Create a new event.
Main command line interface.
Returns the extension of a filepath.
Add a file extension to the filesystem.
Returns a temporary temporary file.
Remove files from a directory.
Convert a CSV file to a JSON file.
Replace content with new content.
Parses the HTML document.
Check that the next tag matches the next tag.
Create an HTML tag.
Create a strong tag.
Creates a HTML line for the given tag.
Parse the attributes of a tag.
Remove linebreaks from string.
Extracts the href from a URL.
Parse an attribute and return it.
Translate a dictionary of dictionaries to a dictionary.
Return a string representation of this object.
Return a list of files matching the given pattern.
Concatenate strings together.
Yields whether the first argument is a start of the string.
Yields True if the full argument is present.
Yield a boolean value.
Iterate over all elements in sequence.
Look up an item in the table.
Replace characters in svg.
Check that svg file is an SVG file.
Merge two PDF files together.
Embeds a font file.
Embeds a font file.
Check that the input inputs are valid.
Check if the function is valid.
Recursively recursively recursively recursively recursively walk the input
Create a text template from a template.
Recursively recursively recursively recursively recursively recursively
Convert an object to string.
Convert an object to a number.
Convert an object to boolean.
Recursively serialize an AST node.
Change the XML encoding of a file.
Save a QR code to a file.
Launch a command line.
Run a command on the system.
Convert a PDF file to PDF.
Return the list of options for the given phase.
Transform a geometry to a Geometry.
Create a Geometry object from a JSON object.
Expand the linear representation of `other`.
Intersect two rings intersecting box.
Determine if the bound box intersects.
Return a polygon of the geometry.
Create a new DataFrame from the lattice.
Save the main dataframe to a file.
Select rows from a condition.
Returns the table with the given nucleotide sequence.
Return the intersection of a table.
Returns a new table with the given table.
Returns a list of odd numbers.
Return rows of the table.
Returns a list of random numbers.
Calculate the error table.
Calculate the energy energy.
Evaluate the number of cycles.
Derivative of the site.
Compute the power of the solution.
Evaluate the PSF of the site.
Calculate a table from a table.
Perform a transaction on the database.
Extracts a key from the master password.
Bootstraps the database.
Search for a domain.
Modify the domain of a domain.
Create a domain and return the domain.
Extracts a list of HBS objects from a file.
Returns the name of the virtual system.
Return the SID of the site.
Entry point for command line interface.
Update the content of a file.
Return a dictionary of available drivers.
Given a path, return an instance of the driver.
Convert a Geometry to a numpy array.
Convert a layer to a raster format.
Opens a raster file.
Create an ANTsRaster object from a given size.
Copies a Raster object to a destination.
Return the parsed options.
Create a raster file.
Sets the geomatial coordinates for the given affine.
Read an array of values from the Dataset.
Returns the envelope of the image.
Get an image from the database.
Create a new raster file.
Returns a masked array with masked coordinates.
Return the node data.
Read a raster file from the dataset.
Resample the image to a new image.
Save this object to a file.
Sets the spatial projection of a spatial reference.
Warp to a WCS file.
Calculate chunk length of alphanal length.
Look up the alphabet for the given charset.
Encode a chunk of data.
Convert the given chunk into longitude.
Get a chunk from the data buffer.
Returns a regex for the given filename.
Normalize date format.
Determines the timezone of the country.
Return a dictionary representation of the object.
Handle a job.
The main worker loop.
Start a worker pool.
Sets the classification.
Send a message to the queue.
Turn a light on the device.
Turn off on device.
Turn the brightness of a device.
Turn off a device.
Send a message to the queue.
Send a new message to the transport.
Sets the nature of this ServicePackageQuotaHistory.
Set the list of config files.
Iterate over all options.
Create a configuration file.
Update the configuration dictionary.
Reads the configuration file from a csv file.
Read config files and return them as dict.
Return the names of the command line.
Returns a list of sections for this command.
Build the parser for the command line.
Parse command line arguments.
Execute bash command.
Print bash completion.
Start a master worker.
Called when the connection is started.
Process a line from the server.
Close the worker.
Called when the job is loaded.
Called when the job is received from the server.
Close the job and return it.
Add a job to the pool.
Close the server.
Change the status of the event.
Add a result to the collection.
Wait for the event loop.
Load the next job from the queue.
Called when the job finished.
Add a result to the queue.
Cancel all active jobs.
Wait for the job to finish.
Distribute a new job.
Add a job to the queue.
Get a job from the queue.
Called when a job is ready to be executed.
Add a result to the queue.
Determine the status of a job.
Close the animation.
Return a list of unique items in a list.
Returns True if the given object matches the given regex.
Returns the region for the environment.
Returns a list of entries matching the given filters.
Gets the name of an instance.
Initialize an instance from a dictionary.
Get the value of a tag.
Create a new instance from an instance.
Returns True if the given filter matches the given filter.
Return the textual representation of the system.
Add a timestamp to the log file.
Creates a logger with the given name.
Setup a celery server.
Delete a worker from the job.
Return a dictionary of configuration options.
Run config command.
Convert a table to a string.
Calculate a hash of a string.
Returns a random color.
Checks for username and password.
Checks the token for the given token.
Check if a process is running.
Import an object from a module.
Returns the IP address of the network.
Make a request request.
Prepare a dictionary of parameters for postprocessing.
Serve the application.
Render a template template.
Stream all commands in a dictionary.
Returns the network days of a given date.
Retrieve path from command line.
Build command line command.
Initialize a profile from a command line.
Create a new relationship.
Returns a list of related packages for the given type.
Load relationships from source.
Add a part to the container.
Load a part of a part.
Return the key for the given name.
Initialize a ContentType from a XML document.
Parses a chat string into a chat object.
Build a JSON payload.
Assign the force field to the force field.
Finds the maximum radius of the mesh.
Make a dictionary of the force field parameters.
Return stream as a stream.
Return a generator that yields segments matching the given name.
Lists all files in a directory.
Return a list of all directories in a directory.
Create a prefix for the bucket.
Delete an object from the bucket.
Ensure the login token is valid.
Return a human readable string.
Return the URL for home page.
Return a dict of all hotspotents.
Retrieves the token for a given host.
Uploads a build to a project.
Determine if the Travis event should be skipped.
Confirm that the given build url is confirmed.
Recursively update a dictionary.
Entry point for logging.
Command line interface.
Parses the contents of a directory.
Split a path into a list of drive parts.
Determine the editor for the given filepath.
Parse the given module.
Generate HTML for a chart.
Generate html for a chart.
Serialize a dataframe to a chart.
Patch the given JSON data.
Convert json data to HTML.
Convert dict to pandas dataframe.
Write html to file.
Determine the chart class.
Encode x, y, y, y, y, y, y, y,
Determine the tarball url.
Create a new application.
Delete app server.
Generate a binary string.
Generate random IP address.
Generate a random date.
Creates a session.
Send a request to the API.
Creates a build container.
Check for build status.
Generator that yields a sequence of strings.
Add commands to the parser.
Return the root parser.
Returns the description of the annotation.
Return the help text for the command line.
Execute the command line.
Encode the given arguments.
Returns a list of the deletes of the delete.
Gets the last activity of a given number.
Get a list of activity data.
Request activity data from a given athlete.
Returns the URL for an athlete.
Returns the endpoint for the activity.
Perform a GET request.
Creates a new build and returns a tuple of build.
Returns a URL for a given regex.
Generate a random title.
Generate a random person.
Generate a random name for a language.
Render the configuration dictionary.
Sets the dataset. Args: data (list): The data to set.
Render the scene.
Check if a type is valid.
Returns the URL for this API.
Returns a WebBrowser object.
Save the URL to a file.
Open and return URL.
Try to import an image.
Write URL to file.
Calculate the SHA256 hash.
Returns the amount of decimal places.
Return a dictionary of protected claims.
Return a list of all signed keys.
Unpack metadata from a JSON document.
Packs the signature of the message.
Evaluate a metadata statement.
Validate the message with the given metadata.
Extend a message with a message.
Parse command line arguments.
Add command line arguments to the parser.
Apply logging options to log file.
Logs a message.
Maps a word to a dictionary.
Iterate over words in a word.
Return the name of the class.
Transform a timeseries into a list of timeseries.
Returns the last value of a time series.
Validate page number.
Returns the first page of an iterator.
Change permissions of a file.
Creates a new signed signing service.
Create a signed signer for the given entity.
Returns the signature for the given request.
Create a new request.
Update metadata for a given location.
Gets the signature for the given location.
Yield the contents of the bundle.
Create a bundle from a dictionary.
Returns a list of urls for the given asset type.
Returns HTML tags for a given asset type.
Returns HTML tags for asset types.
Check if url is valid.
Return a list of URLs that match a URL.
Connect to a listening endpoint.
Get all modules in the project directory.
Import all modules.
Select fields from a document.
Convert a list of dictionaries to a date.
Print the cursor cursor.
Prints the cursor.
Returns a list of all tasks in the graph.
Add default departments to project.
Add default data to the project.
Called when a shot is created.
Create all tasks for the given element.
Returns the value for the given section.
Adds a factory to the registry.
Remove a factory from the registry.
Connect to a broker.
Receive data from a connection.
Disconnect from the broker.
Make a remote command.
Connect to the remote host.
Called when a connection is received.
Send data to the stream.
Send data to remote host.
Called when the connection is closed.
Returns the local protocol protocol for the given connection identifier.
Receive data from the broker.
Disconnect from the broker.
Centers a string to a string.
Prints the clock of the given string.
Return a string representation of the major version.
Identify the unit of the given target.
Assert that the given value is a unitable.
Pad data with given padding.
Unpad a block of padding.
Signs a request and returns the signature.
Gather metadata from a file.
Pretty-print a text word.
Parse command line arguments.
Prints a list of words in a wordlist.
Receive data from the queue.
Called when a type is received from the broker.
Creates a RPC stub for a given URL.
Ping a call to the server.
Return the regex for the command line.
Initialize the amplitudes from a string.
Convert a string to a string.
Verify that all keys are set.
Parses the remote server and returns the response.
List all databases in a database.
Synchronize a folder to a local filesystem.
Build a list of modules.
Read and return a Readable object.
Load the data from the file.
Signs a JWKS and returns the signed JWT.
Create a signed signed signed signed JWT.
Deletes all files in a directory.
Main entry point for testing.
Return the score of a letter.
Calculate the score of a word.
Get a list of words.
Check if a word is a valid word.
Receive a string from the server.
Retrieves the command from the command line.
Parse request arguments.
Write the response to the transport.
Called when the connection is closed.
Build a JSON message for the given address.
Create a new JWKS object from a dictionary.
Load a JWT from a JSON string.
Takes a message and adds them to the route.
Called when the given message is processed.
Takes a message and sends them to the process.
Takes a message and sends a process to the process.
Takes a websocket and sends it to the process.
Process a key from a message.
Takes a template and returns it.
Serve the webserver server.
Prints a message to stdout.
Prints a message to stdout.
Registers a command class.
Registers a command class.
Convert value to string.
Initialize a string from a string.
Updates the completions of a completions dictionary.
Initialize the server.
Initialize the mq connection.
Initialize the service modules.
Initialize the presence consumer.
Initialize the cinder sender consumer.
Initialize the neutron consumers.
Initialize a glance consumer.
Initialize heating consumers.
Enables the given openstack component for the given openstack component.
Gets information about a song.
Download a song from a thread.
Execute the program.
Return the value of the global variable.
Calls a function call.
Dump a database to disk.
Called when the event is running.
Runs the main command line.
Called when the given path is done.
Copy a directory to a directory.
Endpoint for debugging.
Get the modification time of a file.
Determine if the item has changed.
Update the state of the file.
Remove all files from the cache.
Grab feed from feed.
Downloads image and returns path.
Determine if the image has changed.
Determines the caller's caller.
Returns the component of the component.
Command line interface for monitoring.
Finds a symbol by name.
Determine if a package is contained within the tree.
Determine if the given type is global.
Returns the name of the data type.
Returns a list of all related attributes.
Creates an Enumerical Enumerical Enumerical enum.
Creates a bridge from a single model.
Create an external entity from a METS entity.
Create a function to run a function.
Convert a constant to a constant value.
Create a method for the operation.
Create a derived attribute from a metaclass attribute.
Make a simple association with a relationship.
Create an association with the given mappings.
Recursively create a component of the model.
Perform a reply to the server.
Accepts a message from the channel.
Send a reply to the server.
Raise an exception if an exception is raised.
Send a call to the client.
Establish the number of results from the queue.
Dispatch a reply to the remote server.
Guess type name from string.
Deserialize a value from a string.
Get a FCS object from the document.
Put a list of features into the database.
Delete an existing document.
Delete all mappings.
Delete the index.
Scan a prefix for a prefix.
Iterate over all IDs in a prefix.
Iterate over scan IDs.
Given a list of features, return a list of strings.
Convert a list of keys to a list of keys.
Returns a dictionary mapping the feature names to index.
Return the types of the field types.
Return a list of indices for a query.
Return the number of bytes in bytes.
Return the number of bytes in the database.
Return a human-readable string representation of a feature.
Parse command line options.
Returns the formatted formatter formatter.
Return a string representation of a link.
Return a unique identifier.
Check for uniqueness constraint.
Check that the schema is valid.
Check that a subtype is valid.
Convert a string value to bytes.
Delete all data from the database.
Perform a scan on the index.
Put the index into the database.
Store a raw index.
Iterate over the indexes of a given index.
Return the index for the given name.
Add a value to the direction.
Returns the name of the type of the type.
Get the attribute of the navigator.
Build a core type for the given date.
Build an Enumeration type for a single element.
Build the structure for the given ssd.
Build the user type for a user.
Builds the type for the given date.
Builds a class from an object.
Builds a component for each element in the collection.
Build the schema for the given mappings.
Pretty print an XML string.
Fetches a list of robots.
Sets the position of the node.
Create a queue for the queue.
Delete queue from queue.
List all queues.
List exchange changes.
Purge queue from queue.
Create a MIME message.
Reads the text file and returns it as text.
Determine whether the text is visible.
Parse command line interface.
Convert a value to a JSON string.
Return the representation of the association.
Return a string representation of the class.
Parse command line arguments.
Split a collection into two lists.
Add the context to the context.
Finds a link between two entities.
Return lookup key for a given instance.
Compute the index key for this instance.
Returns the type of the given attribute name.
Create a new instance with the given attributes.
Iterate over all stored instances.
Defines a metaclass class.
Send a message to the server.
Receive messages from a socket.
Runs a shell command.
Parse a list of email addresses.
Wrapper around RPC.
Return a dictionary of RPC spec.
Normalize postcode.
Read and return the next value.
Accepts a set of system packages.
Accepts a cc_c.
Accepts an evidence package.
Get the image brightness.
Matches the given value.
Return the position of the cursor.
Returns a new selection for the cursor position.
Called when the cursor position changes.
Return the exception info.
Returns a subclass of the class.
Evaluate the history of the given source.
Called when the cursor is pressed.
Determine whether the command is pressed.
Return the previous history of a substring.
Return next item in the history buffer.
Handle execution of a command.
Returns whether the history is locked.
Returns the edited history for the given index.
Sets the history of the sequence.
Store the history of the input buffer.
Close the connection.
Convert a collection into a Pandas DataFrame.
Set attributes from kwargs.
Subscribe to all subscribed topics.
Log a message and log it.
Iterate over the specified name and return the result.
Convert notebook to notebook format.
Return importer for path.
Return a string with the given arguments.
Determine whether a set of setuptools.
Parse a string from a string.
Returns the parsed package info.
Collapse leading leading whitespace.
Called when the event is pressed.
Called when the editor is pressed.
Returns the current text cursor position.
Updates the selected item.
Register admin admin admin.
Return partition partition partition partition.
Get cpu times.
Returns a list of cpu times.
Reads raw bytes from stdin.
Read block from stdin.
Updates the tab bar.
Create a tab with the current tab.
Add a tab to the frontend.
Populates the menu menu.
Called when the dialog is closed.
Determine whether a passphrase passphrase.
Return a string containing the content of an item.
Determine whether the user has permission change.
Returns True if the user has permission permission.
Add children to the graph.
Makes a network and returns a binary graph.
Submit a graph to the graph.
Validate the graph.
Make sure that the color table has a color table.
Return a copy of the color scheme.
Add a scheme to the container.
Set the active scheme.
Returns the path to the library directory.
Handles incoming message.
Wait for the kernel.
Set the style of the model.
Get the format for a token.
Get the format of the document.
Returns a QTextFormat object for the given token.
Return the path to the command line.
Normalize a path to a path.
Check that the value is a list of names.
Check that the value is valid.
Determine if a line is blank.
Determine whether the last line ends with the last one.
Translates a line from a string.
Transforms the magic magic for the given line.
Transforms a command line from a string.
Transforms an IP address from an IP address.
Return the indentation of the line.
Store the contents of the buffer.
Reset the source of the source.
Process cell magic.
Append line mode to end of line.
Transforms a new cell onto the stack.
Called when a notification is registered.
Return a set of observers for the given type.
Add a new observer to the server.
Update the status of the job.
Print group statistics.
Flushes the number of jobs in the group.
Determine the status of the report.
Report the status of the simulation.
Initialize the background job.
Insert value at index.
Return a copy of this object.
Declares a special class.
Declare a list variable.
Declare a set variable.
Set the current directory.
Move the state of the state.
Calculate the energy of a state.
Return a dictionary with keys and values.
Checks if the table is valid.
Render a boolean expression.
Convert a list of rows into a string.
Create a HTML link.
Extracts javascript file.
Returns the css file for a given URL.
Create an HTML tag.
Return the difference between two value.
Multiplies the given value.
Divide a value.
Convert value to integer.
Return the verbose verbose verbose.
Split a line of input line into a string.
Add command line options.
Removes all registered builders.
Return the url name of a given index.
Return a generator that yields explicit links.
Convert string to list.
Main entry point for coverage.
Add an action to the menu.
Append action to the action.
Print the help message.
Help for help functions.
Check if arguments are valid.
Execute the program.
Print debug information.
Unserialize a dictionary.
Sets the background hook for the system.
Log a function to log errors.
Determine if a URL is a valid URL.
Validate that a URL is valid.
Validate a container container.
Extract keys from a dictionary.
Select random ports.
Maps a sequence of sequences.
Gets the last line from the history.
Set auto-indent indentation.
Initialize the log file.
Saves the system state of the sys module.
Restore the state of the system.
Register a post-processing function.
Create a new main module.
Initialize the user namespace.
Return a list of namespace names.
Reset the state of the session.
Delete a variable.
Remove all variables that match the specified regex.
Helper function to handle the field.
Search for the named struct.
Searches for the given method.
Initialize the history manager.
Display tracebackbackback.
Print traceback information.
Show syntax error.
Update the next line of input line.
Add a custom completer for the given completer.
Set up completer for completion.
Runs the magic magic of a magic magic.
Returns the magic value for the given magic name.
Define a macro for the given name.
Runs a command on the system.
Auto-writes input command.
Given a list of names, return a dictionary of variables.
Given a dictionary of expressions, return a dictionary of variables.
Evaluate the given expression.
Executes the given IPython file.
Run the cell magic.
Expand the given command with the given arguments.
Create a temporary file.
Clean up the session.
Broadcast a message to a destination.
List profiles in a directory.
Returns a list of installed profiles.
Return the version of a request.
Determine the path of a file.
Read next line from the stream.
Send a string to the stream.
Send an integer control to the terminal.
Compile regex pattern.
Prepares a regex pattern.
Search for the given buffer.
Search for the given buffer.
Unpack a directory from a directory.
Returns the last error of the log.
Execute the command and return its output.
Determines the source of a file.
Return the list of executed arcs.
Return a list of missing unresolved branches.
Return a list of unreachable identifiers.
Return a list of branch lines.
Return total number of branches.
Return all missing branches in the graph.
Return statistics for all branches.
Setter for `precision`.
Returns the number of statements covered by the computation.
Returns a string containing the number of significant pixels.
Highlight a text string.
Highlight text with given keywords.
Highlight keywords using keywords.
Runs the given function.
Removes the end of the end of a string.
Convert text to marquee.
Convert string to screen format.
Removes text from text.
Wrap text with whitespace.
Given a list of rows, return the largest size in the grid.
Get the value of a list.
Builds the kernel arguments for the kernel.
Initialize ssh server.
Pretty print an object.
Print a representation of an object.
Retrieves the mro-ro-class of the object.
Print a pretty-printed object.
Prints the supersection of the object.
Print a regular expression.
Print type information about type.
Print information about the object.
Print exception about exceptions.
Returns a new function for the given type.
Registers a function for the given type.
Add text to buffer.
Write a breakable breakpoint.
Close the group.
Flushes the buffer to the buffer.
Print a pretty-printed object.
Write row to row.
Retrieves the content of the windows.
Get the OSX line from the OSX file.
Returns the text content of the clipboard.
Returns the path to the build directory.
Replace keys in a dictionary.
Extract dates from a dictionary.
Recursively squash all datetimes.
Convert an object to a date string.
Check if site directory is valid.
Write a script to the system.
Loops until the number of time is running.
Create an argument parser for the given subcommand.
Main entry point for a connection.
Builds a package from a package.
Called when the log level changes.
Returns the default log handler.
Check flags for flags.
Print aliases for aliases.
Print information about flags.
Print all subcommands.
Print the help message.
Print examples of the example.
Update the config file.
Initialize a subcommand.
Recursively flatten all flags.
Parse command line arguments.
Loads the configuration file.
Generate the configuration file.
Downsample a numpy array.
Iterate over the text fields.
Write message to stdout.
Called when the config changes are changed.
Return the help of the class.
Return the help string for a class.
Remove all instances from the class.
Log failure message.
Print a crash message.
Flushes pending messages to the queue.
Emits the channels of the channel.
Read bytes from a file.
Read an exception from a pymongo file.
Split string into arguments.
Compress a list of dtuple of dt.
Record the magic function.
Return a dictionary of the docstrings for the given type.
Convert a string to LaTeX format.
Add a default option to the server.
Generate a page from an IPython notebook.
Create a task from a given callable.
Get task info from a task.
Returns the callable object for the given info object.
Calculate the next run.
Submit a task to the database.
Runs the message until the task is done.
Runs the scheduled task and runs it.
Create a new iteration of the given callable.
Run a callable from a callable.
Determines the url file for this profile.
Bind a kernel to the kernel.
Create an interrupt event.
Runs the process until the process is running.
Return a dictionary of names that match a namespace pattern.
List all namespace names in a namespace.
Check for mutations.
Draws an interactive figure.
Flushes all active figures in the GUI.
Send a figure to the console.
Loads an IPython extension from the given module.
Unloads an IPython extension from a module.
Generate random number of ports.
Initialize the web application.
Called when the signal is closed.
Called when the command is exit.
Shutdown the kernel manager.
Generate stock options.
Replace all strings in text.
Renders the given prompt.
Create a ZIP archive.
Fix version of Python version.
Determine if a given object is mapping.
Given a sequence of sequence, return the partition number.
Runs the source of a file.
Runs the given source.
Fetch a remote file.
Removes frequencies from a frequency list.
Compute number of digits for a given number of digits.
Yield digits from a text file.
Convert a number of digits to a fractional frequency.
Calculate the frequency of two digits.
Calculate the number of significant digits.
Plot two numbers.
Plot the number of digits for a given f1.
Prints a debug expression.
Reverse a view of parameters.
Determine if a private prefix is private.
Outputs the script to debug.
Runs a debug script.
Outputs a debug script.
Return a dictionary of hdf5 hashes.
Compress a hash of h5 files.
Return a list of all keys in the root directory.
Determine whether a record is allowed.
Format error messages and log errors.
Embeds a shell command.
Creates a new write writer and writes them to the meta data.
Make sure the locale directory exists.
Write a polynomial entry to a polynomial file.
Write the header to the file.
Subscribe to a user.
Initialize command line interface.
Run a python module.
Runs a python file with the given filename.
Convert a Python file to Python code.
Load a Python code from a Python file.
Return HTML table as HTML.
Move the current value to the position.
Cancel completion.
Selects a row from the table.
Update the list of items.
Given a text string, return a dictionary of frequencies.
Print word frequencies.
Return a string representation of the tree.
Write the message to a file.
Validate a PIN pin.
Send a shared pin to a topic.
Deletes a shared pin from a pin.
Send a PIN for a user.
Delete a user from a user.
Subscribe to a topic.
List all subscribed subscriptions.
Start the progress bar.
Start a task.
A context manager that will be executed when the time is done.
Updates the progress of the task.
Create a new submonitor.
Report the progress bar.
Makes sure that the build directory is valid.
Load a configuration file from a list of dictionaries.
Loads the configuration file.
Load config from config file.
Decode a list of arguments.
Loads the arguments from the command line.
Loads the configuration file.
Try to find a module by name.
Register a stop callback.
Notify the start of the start of the command.
Notify data from the queue.
Interpolate the signal and wait for the signal.
Return a list of arguments.
Start the number of samples.
Send a file to the remote server.
Fetch remote file from remote host.
Return the number of engines.
Start the launcher.
Start the scheduler.
Determine the context manager.
Parse the output of the job.
Write the batch script to disk.
Start a single batch.
Creates a context menu.
Append the image to the file.
Append PNG to the screen.
Append SVG to the end of the screen.
Adds an image to the cache.
Copy an image from the clipboard.
Gets the image for the given name.
Insert image at cursor position.
Inserts an SVG document.
Saves image to file.
Exit when a new thread has changed.
Initialize environment variables.
Auto-writes input command.
Ask to exit.
Sets the next input to the next message.
Read a ConfigParser from a file.
Get a list of values from a section.
Returns a list of line strings.
Determine if the environment variable is set.
Set attributes from kwargs.
Loads the configuration file.
Extract an attribute from a config file.
Sets the syntax of the table.
Split line into a single line.
Returns a list of global variables matching the given text.
Returns a list of attrs that match the specified attribute.
Called when the cursor is deleted.
Returns a list of aliases matching the given text.
Returns a list of the names matching the given text.
Called when the cursor is complete.
Determine if a record matches a dictionary.
Returns a list of all records matching the given dictionary.
Extract a dictionary from a dictionary.
Determine whether the prompt is pressed.
Write out the output prompt.
Write format data to stdout.
Log the output of the prompt.
Raise an exception if the operation is frozen.
Convert a string to a timestamp.
Called when the event loop is changed.
Perform a single iteration of the shell stream.
Publish a PyCBC message.
Send a request to the queue.
Clears the request.
Return the string representation of the topic.
Handle shutdown messages.
Called when the context is loaded.
Remove all modules from the stack.
Returns the absolute path of the given path.
Determines whether a file name is a file.
Determine if an object is a class.
Determine if the given path is a package.
Convert a label to a string.
Create a new class from a class.
Return cpu times.
Returns the command line command line.
Return list of open files.
Returns all connections connected to the process.
Returns True if the user has a given user.
Resolve a class from a module path.
Calculate usage of usage.
Login to the server.
Gets the GDS key from the Google API.
Ensure the temp directory exists.
Remove temp files from local filesystem.
Upload a file to the GSD document.
Synchronize local files and save them to local file.
Download local files from local filesystem.
Uploads the local file to the local filesystem.
Clear the contents of the container.
Creates a new QDialog.
Check if url is valid.
Returns True if the given url is a valid string.
Get code from url.
Compare the content type of a URL.
Compare the response code for a URL.
Validate the data dictionary.
Clear the output of the output stream.
Returns a list of code units.
Return the root name of the root directory.
Returns the source of the zip file.
Determine if the file extension is a Python file.
Returns the number of seconds in seconds.
Get the result from the queue.
Wait for messages to finish.
Get a dictionary of keys from the engine.
Abort all messages.
Return the elapsed time of the message.
Block until the progress is done.
Publish the content of a notebook.
Waits for the output of the VM.
Wait for messages to finish.
Convert a filename to absolute path.
Prepare a list of patterns.
Determine the separator from a string.
Find all files in a directory.
Returns the path of the file.
Return canonical filename.
Extract a ZIP data from a zip file.
Determine if a file is a directory.
Determine if a file matches the pattern.
Apply aliases to a path.
Loop over the kernel.
Loop over a kernel.
Enable an event loop.
Go through the equation 2.
Calculate the center of each element in the matrix.
Calculate ensemble difference between two centers.
Initialize the model.
Load the configuration file.
Write the file to disk.
Erases the current state.
Return a dictionary of all lines in the file.
Return a dictionary of all arc arcs.
Write a file to disk.
Reads a file from a file.
Load data from pickle file.
Read lines from a file.
Combine all data files in a directory.
Add new line data to file.
Add a dictionary of arc data.
Add a hash to the file.
Return summary of the file.
Get a list of lines from a sentence.
Main entry point for main loop.
Replace the history of multiple lines in the history buffer.
Prompts the input for the user.
Edit syntax of syntactic errors.
Exit the program.
Extract the URL from the URL.
Create a new frontend.
Initialize the colorsheet.
Return information about this node.
Convert raster data to raster format.
Sets the active colors for the given arguments.
Toggle the color scheme.
Convert traceback to text.
Return a list of traceback traceback.
Formats a list of strings into a string.
Print exceptions to stdout.
Set the mode of the mode.
Ensure all modules exist in modules.
Append a line to the stack.
Add a section to the stack.
Get a function from the code.
Returns the code for the given expression.
Render the template.
Extracts a value from a value.
Render template using template.
Returns a dictionary with the default formatters.
Create a new type for a given type.
Called when the number of floating point precision.
Return a list of user config files.
Configures the logging module.
Configures a list of paths to be used for testing.
Prints a page of pages.
Read page from file.
Determine the pager command line.
Get start of pager.
Prints a string of snipy.
Print a Unicode structure.
Pretty-print a PNG file.
Pretty print a latex file.
Returns True if the given object is printable.
Print a latex representation of a LaTeX object.
Add options to the parser.
Validate a list of strings.
Validate that a string is a string.
Start the loop.
Handle incoming messages.
Complete a text message.
Get information about the object.
Shut down the queue.
Flushes the request to the stream.
Send input to the server.
Start all channels.
Stop all channels.
Returns True if the channel is running.
Load the connection from the database.
Start the kernel process.
Shut down the kernel.
Kills the kernel process.
Interrupt the kernel event.
Sends the kernel to the kernel.
Determine if the kernel is alive.
Return the shell channel.
Return the sub-channel channel.
Return the hb channel.
Binds an IPython kernel to the kernel.
Print debug message.
Get the list of extensions for this class.
Runs before the end of the extension.
Iterate over a directory and return a list of files.
Scan a python module to see if it is missing.
Initialize a new instance.
Save a connection dictionary to disk.
Load config from config file.
Load the secondary config file.
Enable auto-plot method.
Disables the auto-active auto-active mode.
Execute the given cell.
Process a heartbeat message.
Run a task from a message.
Remove a task from the database.
Patch an attribute with given name.
Accepts an incoming connection and returns a new connection.
Reject a connection.
Get proxy agent agent.
Called when the object is successful.
Delete an object.
Sets the user's user data.
Determine the cached modules.
Runs the editor on the editor.
Get the clipboard from the clipboard.
Add a function to the queue.
Returns the metadata for the given path.
Configures the configuration file.
Import an object from an object.
Try to connect a password using the SSH server.
Try to determine if the password is open.
Try to detect a password from a server.
Open a tunnel to a tunnel.
Open a tunnel using a tunnel.
Stop scheduling tasks.
Unwrap an exception from the engine.
Registers the engine.
Unregister an engine.
Handle a command reply.
Flushes all notifications to the server.
Flushes results to the queue.
Flushes a control reply to the server.
Flush ignored messages.
Flushes the message to the server.
Simulate the signal.
Stop the spin thread.
Sets the event loop.
Send a request to the server.
Gets the history of the hub.
Execute a query.
Return a set of opcodes.
Get a byte parser.
Returns a list of lines matching the given regexes.
Return the first line of the input line.
Return the first first line in the list.
Parse the source and return the first line of the source.
Return a list of arc arcs.
Return a list of child objects.
Iterate over byte numbers.
Iterate over all statements in the tree.
Return a representation of the block stack.
Validate a list of chunks.
Generator that yields a list of line numbers.
Returns a list of all child parts.
Return all arc arcs.
Initialize the cover instance.
Generate coverage report.
Determine if the file should be downloaded.
Parse distribution name.
Open a URL using a URL.
Get the parent module from an object.
Return the root topic.
Render template using template.
Configures the config file.
Formats a test error.
Split an array into two lists.
Convert a numpy format to a nb format.
Convert a hexadecimal string to rgb.
Retrieve colors from a style string.
Returns the font for the given family.
Handles the reply message.
Handles the history reply message.
Handles output for debugging purposes.
Handle display data.
Initialize the history event.
Execute the given file.
Append an error message to the console.
Process a command.
Sets the default stylesheet.
Edit the editor.
Make sure that the input is in the prompt.
Make a prompt for the given prompt.
Called when the stylesheet is changed.
Changes the syntax of the syntax of the grammar.
Transform data into a dictionary.
Get virtual memory usage.
Return cpu times.
Returns the number of processes in the process.
Get the number of processes.
Returns a list of all threads in the process.
Returns a list of open files open.
Get the hash of a package.
Return information about a package.
Returns the number of CPU cores.
Returns the number of CPUs available on the system.
Get next set of messages.
Return the first row from the database.
Fetch multiple rows from the database.
Fetch all records.
Connect to a peer.
Read a notebook from a JSON string.
Read a notebook from a notebook.
Read data from a JSON file.
Write a numpy array to JSON format.
Write a numpy array to file.
Convert a metadata file to metadata.
Load the value from a dictionary.
Returns True if the given name matches the given name.
Determines if the given class should be used for this plugin.
Determine if the given dirname matches the given directory.
Determine if a file should be downloaded.
Determine if the given function matches the given function.
Determines if the given method matches the given method.
Determine if the given module should be used for this module.
Read lines from a file.
Print list of pdb commands.
Prints a list of lines from a filename.
\x1b[1mNAME\x1b[0mNAME\x
Returns the conversion factor between two currencies.
Convert a currency to a currency.
Compute the currency between two dates.
Returns the encoding of the stream.
Gets the default encoding encoding.
Write the connection file to disk.
Initialize the heartbeat.
Initialize a session.
Initialize the IO stream.
Initialize the kernel.
Convert HTML to text.
Convert Markdown text to text.
Convert domain domain to FQDN.
Add extra options to the environment.
Configures the exclude directory.
Determine if a directory exists.
Determine if the given extension is dynamic.
Evaluate a function call.
Evaluate a sequence of functions.
Append a function to the end of the function.
Insert a function at the given index.
Returns the usage message.
Write the pid file to disk.
Remove the pid file.
Retrieves the PID from the file.
Construct a parser for the given magic function.
Returns the name of the magic function.
Highlight the given string.
Rehighlight the given block.
Set the format of the frontend.
Copies the clipboard.
Execute the command.
Called when the prompt finished.
Check if tab is pressed.
Creates the context menu.
Called when the process is pressed.
Insert the prompt at the cursor.
Handles the completion page.
Process a reply message.
Called when the kernel is started.
Handles the object reply.
Handles the output of the message.
Handle stream message.
Handle a reply message.
Execute a file at `path`.
Interrupt the kernel.
Reset the output of the server.
Restart the kernel.
Callback method to call the calltip method.
Complete the command.
Process an error message.
Process a message.
Called when the document is changed.
Add a plugin to the plugin.
Iterate over all plugins.
Iterate over all plugins.
Invoke a simple method.
Configures the plugin.
Load plugins from the plugin.
Add plugins to plugins.
Convert a latex string to PNG.
Convert a latex string to HTML.
Checks if the distribution is valid.
Return a dictionary of attributes.
Return the name of the process.
Get CPU percent of the system.
Returns the memory percentage of memory.
Return a list of memory maps.
Determines whether the process is running.
Suspend the process.
Resume the process.
Kill the process.
Wait for the process to finish.
Wrap the kernel loop.
Determine if an identifier is shadowed.
Registers a transformer.
Unregister a transformer.
Registers a checker.
Unregister a checker.
Registers a handler.
Unregister a handler.
Given a line_info message, return the result.
Returns the handler for the given line info.
Transform a line of text into the transformer.
Pre-process a line of input line.
Convert text lines to text.
Check for IP address.
Determine if a line is available.
Return the handler for the given line info.
Determine whether a line is a handler.
Process a line from the prompt.
Processes a line.
Process command line info.
Process line info.
Process the line info.
Execute command line.
Called when the editor is pressed.
Called when the callback is called.
Called when the panel is called.
Show information about the call.
Called when the cursor is pressed.
Convert a path to a canonical path.
Makes sure that this instance is masked.
Determine if the virtual environment is not running.
Compute the frequency frequency of a list of positions.
Returns a list of aliases.
Defines an alias for a command.
Define an alias for a command.
Validate arguments.
Call alias with alias.
Transform an alias to an alias.
Expand aliases for aliases.
Generate the syntax of the Sphinx module.
Reset the foreground and background values.
Get a QColor from a color.
Returns a QTextFormat object for the text display.
Generate a JWT token.
Remove all expired keys.
Determine if a token has been saved.
Validate a JWT token.
Determines the prefix of a list of items.
Return the size of the widget.
Determine whether the cursor is cut.
Determines whether the clipboard is pressed.
Clear the input buffer.
Cuts the clipboard.
Gets the input buffer.
Sets the input buffer.
Sets the font font.
Prints the control dialog.
Prompts the top of the top of the top of the cursor.
Reset the font size.
Append a command to the device.
Append HTML to the end of the text.
Append text to the page.
Append text to the end of the text buffer.
Clears the temporary buffer.
Called when the cursor is complete.
Fills a temporary buffer.
Determine whether the control button is pressed.
Creates a new control control.
Creates the page control control.
Called when the page is pressed.
Gets the text for the given block.
Gets the cursor cursor position.
Gets the number of characters in the input buffer.
Gets input line from input buffer.
Gets the prompt cursor cursor.
Returns a text cursor for the cursor.
Inserts a continuation prompt.
Insert text at cursor position.
Gets the text content from the cursor.
Insert text at cursor position.
Determine the cursor position.
Close the keyboard buffer.
Adds text to page.
Called when the prompt is started.
Read a line from the prompt.
Sets the prompt for the prompt.
Sets the top cursor position.
Adjusts the scrollbar scrollbar.
Main entry point for download.
Copies the configuration file to a directory.
Create a profile directory.
Find profile by name.
Read text from a file.
Write a temporary file to a temporary file.
Close the stream.
Write data to file.
Add a new heartbeat handler.
Register a failure handler.
Handles the Ping message.
Returns a list of random elements.
Returns the name of a file.
Displays the total number of times.
Determine the time of the given elapsed time.
Extracts the WinInstConfig from the system.
Uncache a ZIP archive.
Parses a comma-separated string.
Recursively find all conflicts in a directory.
Sets up fetch options.
Create the home directory.
Determine if the archive is an archive.
Create a new notebook cell.
Create a notebook from a notebook.
Create a new notebook.
Determine if a directory exists.
Removes a filename from the system.
Returns the filename for the given name.
Returns the path to the XSDG directory.
Returns the path to ipython notebook.
Returns the path of the IPython notebook.
Returns the path to the module path.
Determine the number of outdated dates.
Calculate the MD5 hash of a file.
Check for old config files.
Updates the user's suggestions.
Returns a list of suggestions for a given object.
Get suggestions for a given object.
Return the path to this directory.
Return a list of files matching pattern.
Returns the MD5 hash of the file.
Start the profile.
Print stats from the stream.
Clean up the stats file.
Disable the event loop.
Disable the Q4Q4 event.
Enable GTK event.
Enable a tktk.
Enables the GUI for the application.
Saves the state of a wave.
Initialize the database.
Execute a SQL query.
Get session info from session.
Get the number of rows in the database.
Given a string, return a list of strings representing the history.
Get the history file name.
Save a session name.
Reset the session history.
Generator that yields a range of input values.
Store the output of the database.
Write the output to the database.
Stop the playback thread.
Get the number of cores.
Get system CPU cumulative time of system.
Get disk partition partitions.
Return a list of PIDs.
Return a string representing the start of a string.
Format a list of statements.
Return a string describing the stack.
Joins a regular expression.
Removes file from file system.
Update the contents of the object.
Update profiles in the notebook.
Stop the cluster.
Try to find the path of a command.
Print the body of the system.
Find all code units for a given morf.
Iterate over coverage files.
Sets the trace to the debugger.
Initialize all extensions.
Initialize the code.
Execute the exec command.
Run startup files.
Runs all executables.
Execute command line.
Runs the shell command.
Determine the filename of a file.
Read data from a file.
Escape all characters in a string.
Report coverage statistics.
Copy static files to static files.
Write html to file.
Return a hash of a file.
Write HTML file to disk.
Read the status file from a directory.
Save the current status to a file.
Sort two lists.
Return a slice from a sequence.
Split a sequence into chunks.
Read manifest files from manifest.
Convert a glob to a regular expression.
Returns True if filename matches a given filename.
Returns a list of version files.
Start a kernel instance.
Shutdown a kernel. :param int kernel_id: ID of the kernel :param
Kill a kernel from the kernel.
Retrieves a kernel from the kernel.
Returns a dictionary of port ports.
Returns the notebook id for the given kernel id.
Start a new kernel.
Shutdown the given kernel.
Coroutine to interrupt the kernel.
Restart an existing kernel.
Create an IP stream for the given kernel.
Create a shell stream.
Create a hb stream for the kernel.
Reset the instance of this instance.
Export an HTML file to an HTML file.
Replace HTML with empty spaces.
Get a single object from a klass.
Given a list of keywords, return the query.
Extract text from a query string.
Generate a query for the given date field.
Generate a SQL query for the given date field.
Returns a query query for the given field.
Remove all fields in the field_dict.
Add command line options.
Validate a method against the given method.
Determine if the given method is a request.
Rotate the text.
URL for websocket URL.
Reserialize a reply from a message.
Inject a cookie message.
Start the hbb thread.
Stop the HBM stream.
Loads the file.
Returns the index of the given index.
Move the specified index to the file.
Edit a block.
Display a block of text.
Prints all of the blocks.
Apply a function to a sequence of functions.
Extracts the number of lines from a traceback.
Return a list of lines that match the given position.
Print a progress bar.
Clean up all engines.
Save messages from a message.
Synchronize the results of the result.
Evaluate the function at the given function.
Get all messages from the queue.
Get a message from the queue.
Parse url and return a dictionary.
Get all modules in the system.
Given a line of text, return a list of completions.
Compile command line options.
Quote an attribute.
Configures the plugin.
Write error report to disk.
Add an error to the test list.
Add a failure to the test list.
Add a failure to the log.
Generate a random number of bytes.
Calculate weighted weight.
Registers the engine.
Unregister an engine from the engine.
Handles pending commands.
Verify that the tasks have been executed.
Called when a message is reachable.
Add a message to the queue.
Submit a task to the server.
Dispatches the result of the result.
Called when the result is done.
Called when a dependency is done.
Updates the dependencies of the graph.
Print the state of the log file.
Logs a line of input data.
Write data to log file.
Stop the log file.
Create a new notebook.
Add a command to the console.
Add a regex to the registry.
Return a generator that matches regex.
Return a generator that yields all matches.
Called when a notebook is changed.
List all notebook names.
Create a new notebook id.
Remove a notebook from the database.
Determine if a notebook exists.
Return path to notebook.
Return path to notebook.
Get the name of a notebook.
Get notebook object from notebook.
Save a new notebook.
Save a notebook to a notebook.
Save notebook to notebook.
Delete a notebook from a notebook.
Create a new notebook.
Copy a notebook from a notebook.
Iterate over a list of tokens.
Load the default config file.
Returns a list of classes.
Parse command line arguments.
Initialize the program.
Initialize a shell instance.
Initialize the banner.
Return the representation of an object.
Parse notification name.
Returns a dictionary of traits for a class.
Returns the metadata for the given traits.
Validate that the given object is valid.
Returns the default value of the model.
Determine whether the set is set.
Determine whether the set is reachable.
Return a dictionary of dependencies.
Get the depth of a node.
Print a list of dictionaries.
Disambiguate a DNS URL.
Apply a function to each element.
Validate the list of targets.
Dispatch a message to the monitor.
Process a query message.
Handle a new heartbeat.
Called when a heartbeat is successful.
Save a task request.
Save the message to the database.
Send a connection request to the server.
Unregister an engine.
Called when an event is finished.
Send a shutdown request.
Purge results from the database.
Extracts a record from a dictionary.
Get the history of a client.
Send a query to the database.
Context manager to change working directory.
Decode a command and return its output.
Run a command on the root root.
Dispatches a message from the message.
Determine if a session is a valid session.
Report annotation files.
Gets the version of the installed package.
Remove all unicode strings from a dictionary.
Extracts a message from a message.
Check that the message is valid.
Generate a message.
Sign a list of messages.
Send a message to a stream.
Receive messages from a socket.
Save a SVG file.
Convert a string to clipboard.
Convert a string to an image.
Return dict of info about object fields.
Get the docstring from an object.
Returns the source of an object.
Extract arguments from an object.
Return the file path to an object.
Return the line number of lines in an object.
Gets the definition of the object.
Return the header of the header.
Print info about a message.
Print the result of the object.
Prints the source page.
Prints a pyth file.
Formats the fields of the header.
Search for namespaces in a namespace table.
Create a thread that will be used to interact with a thread.
Return the XML representation of this object.
Returns the XML representation of the document.
Load all modules in a package.
Invert a dictionary of dictionaries into a dictionary.
Convert an object into a dictionary.
Returns a list of matplotlib figures.
Prints the dataframe as a string.
Select and set the figure format.
Find the backend and return the backend.
Activate a matplotlib backend.
Configures inline support for inline support.
Start the current thread.
Stop the thread.
Start a tracer.Tracer.
Start the trace trace.
Start the collector.
Stop the collector.
Pauses the stats from the stream.
Resume the install trace.
Returns a dictionary of line data.
Recursively collect exceptions from a list of dictionaries.
Returns the rendered traceback for the given exception.
Initialize coverage.
Returns the canonical directory for a given morf.
Determine the filename for the given filename.
Determines the trace for the given filename.
Determines whether the debug trace should be traced.
Logs a warning message.
Check for packages that match the source.
Start the collector.
Called when the event is done.
Determine the regex for the given type.
Save data to disk.
Combine data into a dictionary.
Retrieve the data from the source file.
Compute the analysis.
Analyzes an analysis.
Generate a summary report.
Annotate the report with metadata.
Generate XML report.
Reload the content of the file.
Return the path to the command line.
Run a command on the system.
Forward read events from a stream.
Reads a line from the socket.
Return the launcher class for a given class name.
Starts the process.
Build a launcher for a given class name.
Start the daemon process.
Start the daemon process.
Returns wx.Application instance.
Determine if the application is running.
Start the event loop.
Returns an instance of the QApplication.
Determines whether the event is running.
Start event loop.
Create a blank canvas.
Draws a cross-line color from a point.
Draws a line of two points.
Create an image from a grayscale.
Returns a random UUID.
Generate a unique key from the cache.
Returns the domain name of a URL.
Extracts arguments from a URL.