Convert Sina XML to URL list.
Download a dailymotion page.
Download a ZXT file from Sina.
Convert text to sprint format.
Prints the given text to stderr.
Print a message and exit.
Prints a message and exits with an exit code.
Detect system operating system.
Get information about a CK player by XML.
Get the MGTV real url from the given url.
legitimize a text string.
Downloads the given url to the given output directory.
Match all the given text against the given patterns.
Parse a query parameter from a URL.
Parse a host string and return a tuple of hostname and port.
Get the title of a topic.
Download wanmen topics by course.
Download a course topic by topic part.
Returns True if the task has been queued or running.
Get the event buffer for the given dag_ids.
Get a connection to the snowflake server.
Get AWS access key and secret access key.
Get the value of a field from the extras dictionary.
Copies the specified SQL expression to the specified file.
Dump the contents of a table to a file.
Uploads the file to Google Cloud Storage.
Get the current state of a task.
Returns a client object that can be used to connect to the server.
Get the details of an instance.
Create a new instance.
Delete an instance from a project.
Create a new database.
Delete a database from a project.
Starts the SQL proxy process.
Stop the SQL proxy process.
Get the version of the SQL proxy.
Create a new connection.
Retrieve a connection from the database.
Delete a connection from the database.
Returns a SQLProxyRunner instance.
Get the database hook.
Clean up the database hook.
Reserve a free TCP port.
Normalize a job id to be used in ML Engine.
Get the error code from an error message.
Remove all DAG runs from the database.
Remove all dag task instances from the database.
Set the state of the paused dags.
Print statistics about the task instance.
Check the status of all tasks in the scheduler.
Create a directory.
Convert string to float if possible.
Make a value aware of a timezone.
Make a naive datetime from a datetime.
Create a new datetime object.
Get a connection to druid broker.
Returns a requests.Session object that can be used to connect to the server.
Runs the request with the given endpoint.
Raises an exception if the response is not OK.
Run the request and check the response.
Context manager to create a new session.
Drop migrations from database.
Return a nicely formatted exception message.
Returns a list of records for the given HQL.
Get a Pandas dataframe from the database.
Run the given HQL against the database.
Insert rows into a table.
Return a cosmos client object.
Check if a collection exists.
Create a collection in the database.
Check if a database exists.
Create a database if it doesn't exist.
Delete a database.
Deletes a collection.
Insert a list of documents into the database.
Deletes a document from the database.
Get a document from the database.
Get a list of documents from the database.
Get a function by name.
Create a new function in a project.
Update a function in the project.
Upload a function to a zip file.
Delete a function from the project.
Get the status of all dependencies.
Check if dependency is met.
Get a list of failure reasons.
Parse a S3 configuration file.
Get the credentials for a given region.
Get a connection to the vertica server.
Flushes the buffer.
Try to guess if the file is a zip archive or a zip archive.
Construct a task instance for this dag.
Start the DAG process.
Terminate the child process.
Exit gracefully.
Starts the workflow.
Start the DAG processing asynchronously.
Synchronously start the dagparsing process.
Refreshes the DAG directory.
Check if we have enough stats to print to the file.
Remove any import errors that are not present in the file paths.
Log file processing stats.
Set the list of file paths to be processed.
Waits until all the processors have finished processing.
Terminate all child processes and wait for them to finish.
Return a connection to the remote host.
Create a transfer job.
Get a transfer job.
Returns a list of transfer jobs that match the filter.
Update a transfer job.
Cancel a transfer operation.
Pauses a transfer operation.
Resumes a transfer operation.
Wait for a gcp transfer job to complete.
Find all tasks that are scheduled for the given task instance.
Return the number of slots used to run this task.
Run a command and return the output.
Allocate a set of keys for this project.
Begin a transaction for this project.
Commit the given body to the project.
Look up a set of keys in the project.
Rollback a transaction to the project.
Run a query on the project.
Get a single operation by name.
Delete an operation.
Polls an operation until it is done.
Get the hostname of the connection.
Get a connection to the language service.
Get a list of template fields from a module.
role for role of template field.
Disposes the ORM session.
Prepare sys.path for the class path.
Check if the target_task_id is available.
Detect the variable name of the configuration file.
Convert an Alchemy object to a dictionary.
Split a list into chunks of size chunk_size.
Reduce an iterable in chunks.
Chain a list of tasks together.
Render a log file.
Get a connection to the API.
Wait for an operation to be completed.
Coerce a string to a JSON string.
Handle databricks operator execution.
Run a pig on the fly.
Fetch the state of a celery task.
Return the number of tasks per send process.
Return the number of tasks per fetch process.
Returns a connection to the server.
Get a job from ML Engine.
Wait for a job to be done.
Create a new version of a model.
Set the default version of a model.
List all versions of a model.
Delete a version of a model.
Create a model in a project.
Get a model by name.
Write batch data to DynamoDB.
Integrate the executors modules.
Get the default executor.
Returns an executor object for the given executor name.
Called when an error occurs in a segment.
Returns a pymssql connection object.
Trigger a running dag.
Delete a DAG.
Get information about a task.
Get all available pools.
Create a new pool.
Create or update a container group.
Get the current state and exit code of a resource group.
Returns a list of messages for the given resource group and name.
Get a list of logs in a resource group.
Delete a container group.
Check if a container exists in the given resource group.
Construct the ingest query dictionary.
poke a message from the pubsub.
Get all task instances in a given state.
Get a task instance from the database.
Get the previous dagrun.
Get the previous scheduled dagrun.
Verify the integrity of all tasks in the dag.
Make jenkins request with headers.
Convert a context to a dictionary of airflow variables.
Trigger a conditionally triggered dag.
Send a query to the metric server.
Get a dag by ID.
Kills all zombie tasks in the dag.
Bag the dags in the given dag.
Collect all DAGs in a folder.
Generate a DAGbag report.
Add a number of days to a dataset.
Return a list of files that match the given regex.
Return True if the file has been modified.
Remove all task instances from a list of tis.
Return the number of failed attempts.
Get the current state of the task.
Update the state to failed. :param session: the session to update :param session: the
Refresh the state of the task from the database.
Remove all XCOM data associated with this task.
Return the key for the dag, task, and execution date.
Returns True if the task is dependents done.
Return the next retry time for this task.
Returns True if the job is up for retry.
Check if a task pool is full.
Get the DAG run for this execution date.
Push a new value to the XCOM.
Initialize the run context.
Write the log to the local directory if it exists.
Get a connection to the API.
Start an instance in a zone.
Get a specific instance template.
Wait for an operation to complete.
Check if a bucket exists.
Create a S3 bucket.
Check to see if a prefix exists in the bucket.
List all prefixes in a bucket.
List all keys in a bucket.
Check if the given key exists in the S3 bucket.
Get a key from S3.
Reads the value of a key from the bucket.
Check if a wildcard key exists in the bucket.
Given a wildcard key, return the corresponding bucket key.
Query the Cassandra database.
Convert a user type to a dictionary.
Return a new connection to the API.
Execute the SQL query.
Load a list of entry points into airflow plugins.
Check if a plugin is a valid airflow plugin.
Skip a set of tasks in a dag.
Get a connection to the ADLS file system.
Check if a file exists.
Return a list of all files in the given path.
Execute the query.
Uncompress a compressed file.
Return a mssql cursor.
Build the metrics dictionary.
Create a cgroup from a path.
Delete a cgroup from the tree.
Do an API call to the databricks API.
Get a Salesforce connection object.
Make a query and return the results.
Get the description of an object :param obj: the object to describe :type obj: str
Returns a list of all available fields for the given object.
Get an object from a Salesforce object.
Convert a column to a timestamp.
Get a collection from the database.
Check if a mail attachment with the given name exists.
Returns a list of tuples containing the attachments with the given name.
Get the filename and payload of the attachment.
Put records to Firehose.
Get status of dependencies.
Send an email to the given email address.
Send email via SMTP.
Process the result value.
Check if a blob exists in a container.
Check if a prefix exists in a container.
Load a string into a container.
Read a file from a container.
Deletes a file from a container.
Return ftp connection object.
List all files in a directory.
Store a file on the remote host.
Get the modification time of a file.
Executes the webhook.
Get a connection to the file service.
Check if a directory exists.
Check if a file exists in the given directory.
Returns a list of directories and files in the specified share.
Creates a directory in the specified share.
Loads a file from the given path.
Load a string from a text file.
Returns a client object that can be used to connect to the server.
Download an object from a bucket.
Upload a file to a bucket.
Check if an object exists in the given bucket.
Check if a blob was updated after a given time.
Delete an object from a bucket.
Get the size of a blob in a bucket.
Get the CRC32C of an object in a bucket.
Get the MD5 hash of a blob.
Check if the secondary training status of the job has changed.
Return a string describing the secondary training status of a job.
Create a tar and upload to S3.
Configure S3 resources.
Check if a S3 URL is valid.
Returns a botocore.log.LogClient instance.
Executes the dataflow job.
Run migrations offline.
Run migrations on line.
Delete an instance from a project.
Deletes a table from an instance.
Update a cluster with a list of nodes.
Prepare the command needed to run a honeyline command.
Prepare hive configuration.
Check if a table exists in the database.
Get a connection to the hive server.
Get the results for a given HQL.
Get a list of records from a HQL query.
Get a Pandas dataframe from a HQL query.
Get a client for the product search service.
Get the authentication token from the server.
Binds the given parameters to the given operation.
Escape special characters in a string.
Coerce string_field to bq_type.
Validate that the value is of the expected type.
Get a connection to the BigQuery server.
Get the current service.
Check if a table exists in a dataset.
Cancel the query.
Runs a table delete.
Upsert a table in a dataset.
Get a specific dataset.
Executes the given SQL operation on the job.
Executes an operation on multiple sequences of parameters.
Returns the next page of results.
Query postgres database.
Create intermediate directories in the remote directory.
Runs the command with the given arguments.
Called when the config file is finished.
Entry point for the command line interface.
Builds the HTML header.
Builds the jschart for the plot.
Create a new x-axis.
Create a new y-axis.
Get a connection to the database.
Get the last DAG run.
Sends a message to SQS.
Convert an object to a JSON response.
Open a file if it's already a zip archive.
Make a cache key.
Get a connection to the videointelligence service.
Get the API key.
Returns a requests.Session object for the current connection.
Executes the API request.
Builds the opsgenie payload.
Executes the opsgenie alert hook.
Get the connection object.
Executes a query and returns the id of the query execution.
Check the status of a query execution.
Poll the status of a query execution.
Returns a pysftp.Connection object.
Handle rate limit exception.
Get a table from a database.
Get the location of a table.
Get the status of a cluster.
Deletes a cluster.
Get a list of all snapshots of a cluster.
Restore a cluster from a snapshot.
Creates a cluster snapshot.
Executes the Slack API call.
Create and run a job flow.
Filter the result list to include only files with the given size.
Filter out extensions that are not in the given ignore_ext.
Executes the query against the S3 database.
Get a pool by name.
Create a new pool.
Delete a pool from the database.
Convert a dictionary to a protobuf object.
Wait for an operation to be completed.
Get a single operation.
Append a label to a cluster protobuf.
Get the webhook endpoint for the given http_conn_id.
Builds the payload for a Discord message.
Executes the webhook.
Encrypts the given plaintext using the given key.
Returns a connection to the server.
Closes the S3 bucket.
Returns a dictionary of environment variables that can be used to run the job.
Returns a list of all the secrets for the worker.
Returns the security context as a dict.
Get the URL for the extra links for a task.
Starts the DAG processing process.
Wait for the process to finish.
Exit gracefully.
Update the database with all the import errors in the given dagbag.
Process all task instances in a dag.
Get the concurrency map for the given states.
Change the state of all tasks in the database.
Enqueue task instances with queued state.
Update state for tasks that failed to execute.
Process executor events.
Update counters from database.
Manage the state of the executor.
Get a DAG run for the given date.
Returns a dictionary of task instances for a dag run.
Set the state of all dag runs to failed.
Callback function to be called when a heartbeat is received.
Returns a client object for the given project.
Get an instance by ID.
Delete an instance.
Deletes a database from an instance.
Check if an email attachment exists.
Prepares the additional properties to be passed to the web_detection.
Get a connection to the Cassandra cluster.
Returns True if the given table exists in the cluster.
Check if a record exists in the given table.
Builds the command to track the driver status.
Submits the application to the Spark server.
Process the output of the kubernetes submit log.
Process the console status log.
Return a TaskRunner instance for the given task_job.
Wait for the task to finish.
Return a cursor to the mysql database.
Configure a CSV file with the given schema.
Write the local schema file.
Get the column type dictionary.
Map a mysql type to a dictionary.
Return extra data as JSON.
Scales the given time_seconds_arr by the given unit.
Returns the number of days in the past.
Initialize a role. :param role_name: role name :param role_name: role
Delete a role from the database.
Returns a list of all roles for the given user.
Returns a set of all permissions views.
Returns True if the user has the given role.
Returns True if the user has permission to view_menu_name.
Remove all permissions from the database.
Merge a permission with a view menu.
Update the admin permission view.
Create permissions for all DAGs.
Get a fernet object from the configuration.
Remove the partition from the database.
Poke messages from SQS.
Get a connection to the HDFS server.
Get a connection to the webhdfs server.
Check if hdfs_path exists.
Get a connection to the pinot broker.
Get the URI of the connection.
Convert a date to a dict.
Convert a time object to a dictionary.
Get a redis connection.
Get a Pandas dataframe from the given SQL.
Executes SQL against the database.
Set the autocommit flag on the connection.
Serialize a cell to a string.
Get the status of the scheduler.
Get a cloudant connection object.
Executes the webhook.
Get the credentials from the keyfile.
Authenticate to Google.
Return a list of all unfinished tasks.
Prepare the connection command.
Normalizes a tensor to the given mean and standard deviation.
Crop a PIL image.
Flip the left-hand side of an image.
Apply a perspective transformation to an image.
Flip the top left corner of an image.
Adjust the brightness of an image.
Adjust the contrast of an image.
Adjust the saturation factor of an image.
Convert an image to grayscale.
Saves the given tensor as an image.
Find all classes in the given directory.
Reads an info file into a torch.Tensor.
Reads the matches file into a torch.Longtensor.
Computes the accuracy of a model.
Downloads the given url to the given root directory.
Return a list of all directories under the given root.
Return a list of all files in the specified directory.
Download a file from Google Drive.
Get random parameters from an image.
Generate a random set of parameters.
Get random parameters from an image.
Get a random set of parameters.
Get a random set of parameters.
Downloads the file to the local filesystem.
Download all the images and test sets.
Get the current theme name.
Get a list of all themes in the templates directory.
Parses the response from the API and returns a list of results.
Multivariate Multivariate Multivariate Multivariate Multivariate TensorFluent for
Approximates the log-prob for eight school effects.
Build a random variable from a distribution and sample shape.
Return the maximal mask of x.
TensorFlow event size.
Apply a function to all events in a single hot distribution.
Convert an identifier to a tensor fn.
TensorFluent for the params_size function.
Builds an input pipeline for training.
Check that the map values are valid.
Calls the given function with the given arguments.
Calls the given function with the given arguments and returns the result, extra, and gradients
If from_structure and to_structure are non-empty, then broadcast to to_structure
Apply a leapfrog step to the given state.
Performs a metropolis hastings step.
Create a TFP Layer from a TFP configuration.
Convert a value to a tensor.
Expand tensors to the event rank.
TensorFluent for the Cat_probs function.
Ensure that the TensorFlow version of TensorFlow is above the required version.
Computes the logistic regression of a set of features.
Get the coverage type of the target dataset.
Create a positive axis tensor.
Squeeze tensors along specified axis.
Derivative of the Z coordinate.
Inverse of z.
Computes the semilocal linear trend transition matrix.
Bias for semilocal linear trending.
Return the number of primes less than or equal to n.
Return the eps of the given dtype.
Perform the inner bisection search.
Prints pass_through_tensor to stdout.
Checks that the given parameter is a valid quadrature parameter.
Interpolates a TensorFlow grid with the given location.
Interpolates a TensorFlow grid with the given scale.
Concatenate multiple vectors.
Computes the logarithm of a vector matrix.
Computes the log-sum-exp of a vector.
Computes the vector matrix.
Extracts the log-probs from the distribution.
Choose a random direction.
Call a function if it's a float.
Builds a TensorFluent for the training posterior.
Computes the moments of a masked time series.
Returns the initial value of the masked time series tensor.
Mixes a set of means over a set of variances over a set of posterior draws
Return the range of values in this range.
Given a list of arguments, return a tuple of distribution names.
Builds the DistFunction from the given model.
Compute the entropy of the joint distribution.
Create a summary of a list of sequences.
Visualize reconstructing a tensor.
Visualizes the qualitative distributions.
Summarizes the parameters of a distribution.
Summarize the mean of the NAT and bits.
Returns a TensorFluent for the multivariate normal matrix.
TensorFluent for the zero state computation.
Apply the convolution to the input tensors.
Samples the static priors from the distribution.
Returns the batch shape of the model.
Returns the batch shape of the model.
Convert a vector size to a square matrix size.
Sort values along specified axis.
Sort a list of values along an axis.
Truncated Truncated Truncated Tensorflow.
Computes the logarithm of the Asymptotic series.
Inverse of erfinv.
Calculate the joint log-prob for text messages.
Returns True if index_points is a univariate distribution.
Returns a list of index points.
Squared difference between x and y.
Computes the value and batch jacobian of a tensorflow tensor.
Splits a covariance into a list of marginals.
Convert a NumPy tensor into a string.
Returns the shape of the sample.
Sample shape tensor.
Return the value of the distribution.
NumPy representation of the tensor.
Return the unit norm of a tensor.
Computes the lognormalization of the tensor.
Given a list of tensors, return the common dtype.
Broadcasts the given tensors to the given target tensors.
Returns the PDF at the peak.
Calculates the effective sample size for a single state.
Residence reduction function for a single state.
Return the size of a tensor along an axis.
Ensure that the argument is a list of states.
Return a new mapping with the given field removed.
Merge two values.
Recursively flatten a nested tuple.
Given a function or function, return a dict of the input keyword arguments for the function.
VGG convolution block.
Returns True if state_one has no uturn.
Leapfrog the gradients function.
Compute the log-joint of the target and momentum tensors.
Generate a random Bernoulli tensor.
Convert a nested structure to a tensor.
Returns a dictionary of all tensor-like attributes.
Creates a multivariate mixture prior.
Packs a list of images into a TensorFluent for tf.shape.
Download a file to a directory.
Calls the given volatility function with the given state and gradients.
Broadcasts the given volatility to all states.
Apply a function to the input and output tensors.
Calls the given function and reshapes the output.
Computes the BDtr divergence between k and p.
Generate a flat sample of the distributions.
Get a list of string representations of the topics.
Adds control dependencies for EMA and EMA operators.
Save images to a file.
Convert a tf.dtype to a numpy.dtype.
Return the base dtype of the given dtype.
Returns True if the given dtype is a boolean.
Check if the given dtype is a complex NumPy array.
Return the maximum value of a tensor type.
Returns the name of the given dtype.
Returns the size of the given tensor type.
Assert that the items have the same base type.
Return a function that will accept the given objective.
Return a function that expands the given objective.
Shrink to the best vertex of the simplex.
Replaces the value at the given index.
Prepare the arguments for the objective function with the initial simplex.
Prepare the arguments for the objective function with the initial vertex.
Builds the fake data.
Returns a dictionary with the initializers and sizes and sizes.
Create a new TensorFlow initializer from a given configuration.
Matrix multiplication between two matrices.
Computes the standard variance of a statistic.
Choose a condition for a scalar.
Finalize the log-prob for one fiber.
Finish probing for one fiber.
Rotate dimensions if necessary.
Validate that the given layer is a batchnormalization.
Return a dictionary mapping params to slices.
Apply a single step to a distribution.
Apply slice_overrides_seq to distribution.
Returns the number of columns in a tensor.
Get static predicate value.
Ranks a shape tensor by its shape.
Checks if the given scale is a diagonal scale.
Pads the input tensor with the dimensions of the mixture distribution and categorical distribution.
Assert that x is an integer form.
Try to get the static value of the tensor.
Return True if the given dt is known to be unsigned by the given dtype.
Return True if the given dt is known to be signed by the given dtype.
Return the largest integer in a numpy array of the given type.
Find the smallest integer of a given type.
Checks if the given dt is an integer like the given dtype.
Generate a new seed.
Returns the dimension size of a tensor along an axis.
Validate rightmost transposed ndims.
Validate the perm parameter. Args: perm (Tensor): The perm parameter.
Return the shape of the event.
Return the dimensions of a tensor.
Build a backward pass step for a given timestep.
Propagates the mean and covariance of a kalman transition matrix.
Propose the mean of the TensorFlow TensorFlow TensorFlow TensorFlow
Propose the covariance of the covariance matrix.
Computes the joint mean of the latent distribution.
Compute the covariances of the latent states.
Converts latent mean and covariance matrices to TensorFluent in pushforward_latents.
Computes the lognormalization of the event.
TensorFlow mode of the TensorFlow.
Rotates the given samples by the mean direction.
Sample from a 3D dataset.
Return a copy of the given function.
Remove all keys with the given value from a dictionary.
Recursively replace nested dicts with pretty-printed objects.
Get samples from a distribution.
Return True if x is a namedtuple like.
Choose a new type based on the given values.
Call the given function with the given arguments and return the gradients.
Check that shape is valid.
TensorFlow converged and failed tensors.
Update the position of the tensor.
Check that the converged gradients between the current and the next objective.
Broadcast a value to a target tensor.
Return the harmonic number of x.
Get the value of a field in the kernel results.
Returns the variance scale scaling term.
Create a TensorFluent for `val_where` with the given `cond` and `
Returns True iff val_1 is finite, otherwise False.
Return the bootstrap results.
ResNet block. :param x: Tensor x :param filters: Tensors of
Create a deep-exponential family tensor.
Initializes the parameters.
Returns the KL divergence between two tensors.
Reads an image from a file.
Downloads and unzips the Sprites file.
Create a character from a skin and hair and pants.
Create a sequence from a character and action metadata.
Create a random sequence.
Flatten a list of kernels into a summand list.
Flattens a list of kernels into a single list.
Builds training and testing data.
Insert back keepdims.
Create a list of non-negative axis values.
Sorts a tensor by top k.
Assert that ndims are statically distributed.
Batch gather with broadcasting.
Broadcasts an event to a set of samples.
Inverse Hessian control inputs.
Transpose a batch of tensors.
Reduce a tensor to the right most dimensions.
Get the common dtype for a list of tensors.
Get the initial state of the optimizer.
Computes the PSD mask of a tensor.
Gets the initial arguments for the given objective function.
Find the best value in a population.
Checks that the value of each part of the population is converged.
Ensure that tensor_or_list is a list.
Get the tolerance tensor.
Builds an input pipeline for training images.
Plots the generated images.
Convert a list of productions to a string.
Calls the LSTM model.
Create a multivariate normal diagonal tensor.
TensorFlow TensorFlow TensorFlow TensorFlow TensorFlow TensorFlow
Inverse of the hat-integral inverse.
Solver for LU-reconstructed tensors.
Returns a TensorFluent for the SPARSE_BLOCK_diag function.
Validate a tensorflow matrix.
Generate a list of slices.
Generate a mask of n_in and n_out.
Create an input order array.
Create masks for a set of degrees.
Create a zero dimensional multivariate normal diagonal matrix.
Converts a set of parameters to weights.
Builds the chain rule for the given model.
Builds a seasonal transition matrix.
Build a seasonal transition noise matrix.
Builds a seasonal transition noise.
Validates the observation data.
Add a new item to the list.
Set the checkpoint to the given path.
Set the value of the gradientclip constant.
Optimizes the model.
Set the training summary of the dataset.
Set the summary of the value.
Set the training data for this dataset.
Downloads and returns a list of tuples containing the content and label IDs of the news
Download and parse GloVE W2V file.
Compile the value using the given optimizer and loss.
Evaluates the value of the BigDL.
Predict the value of x.
Get the MNIST dataset.
Preprocess the MNIST dataset.
Get the end trigger for the given options.
Validate the optimizer against the test data.
Returns the value of the field.
Calls the given bigdl function with the given name with the given arguments.
Convert a Java object to a Java object.
Convert Python object to Java object.
Get activation by name.
Get the label of the value.
Read a PandasImageFrame from a PandasImageFrame.
Write a Parquet file to a file.
Get the image associated with the given float key.
Get the image of the tensor.
Get the label of the tensor.
Returns a list of predictions for the given key.
Predict the values of the model Parameters ---------- x : np.ndarray or np.nd
Transforms the dataset into a BigDL datatype.
Saves the keras model definition to a JSON file.
Build a Keras model.
Predict classributed.
Get the weights of the tensor.
Sets the training mode of the evaluation.
Load a big-chain layer from a file.
Load keras weights from a JSON or HDF5 file.
Create a new criterion for the given jcriterion.
Load weights from JSON and HDF5.
Loads the datasets from the Keras database.
Build a Keras model.
Get the shape of the input.
Get the shape of the output.
Reads the MNIST data set from the specified location.
Download and extract movielens data.
Return the path to the bigdl class path.
Check if pyspark is up to 2.
Exports a checkpoint to a dictionary.
Save a list of tensors to a bigdl file.
Expand a tile along a given axis.
Simple Attention layer.
TensorFlow attention.
Get the log file for the agent.
Log an utterance to the log file.
Computes the sum of update values for each gradient.
Read a dataset from a dictionary.
Interact with an agent.
Convert a list of labels to one-hot labels.
Convert probability matrix to one-hot matrix.
Return a tf.session.Session instance for the GPU configuration.
Loads the network from disk.
Get the variance of the optimizer.
Updates the learning rate and momentum variables.
Rounds the predictions to the F1 score.
Takes a word and returns a tuple of the answer.
Dropout layer with fixed mask dimensions.
Build the word embedding model.
Builds the basic LSTM network.
Train the model on a batch of data.
Predict on batches of data.
Convert a list of words into an array of integers.
Convert a list of tags into a numpy array.
BLEU advanced sentence.
Verify that the given URL is a valid SC URL.
Extracts certificates from certs.txt.
Verify the signature of the request body.
Verify that the certificate is signed by the given URL.
Returns a list of all controls as JSON.
Returns a list of ms_bot_framework controls.
Returns a list of all telegram controls.
A list of all the Alexa controls.
Calculates the accuracy of two examples.
Rounds the accuracy of the predictions.
Read data from file.
Create a default agent for the hello bot.
Convert x to a one-hot unit vector.
Prettify a list of metrics.
Loads the model from disk.
Saves the model to a file.
Computes the gradients of the given loss using the given optimizer.
Search for words in the given word.
Starts the timer.
Handle a request.
Run the action on the given utterance.
Generate the response from the request.
Process intent request.
Handle the launch request.
Handles unsupported requests.
Print a pretty representation of the object.
Convert an array of losses to PPL.
Build a chainer from the given configuration.
Interact with a model.
Predict the output of a chain on a stream.
Reads in file and returns a list of words.
Import a function from a module name.
Get a metric callable by its name.
Return decay type from a string.
Get the best value for a given set of values.
Encode a list of tokens into a numpy array.
Read the requirements file.
Logarithm of the log loss.
Returns a formatted string with the details of the given dictionary.
Create an ecommerce agent.
Main entry point for ms_bot_framework_server.
Download a file from a local file.
Uncompress a tar file.
Recursively updates an editable dictionary.
Set the MD5 hash of a URL.
Add a query parameter to a URL.
Return the Alexa response as a dict.
Return the JSON representation of the control object.
Returns the ms_bot_framework dictionary for the bot framework.
Return the JSON representation of the control.
Returns the ms_bot_framework dictionary for this button.
Calculate the F1 score of a team.
Calculates the recall at k.
Check if GPU is available.
Parse a config property.
Parse a config file.
Expands the given path into an absolute path.
Runs the request loop.
Remove a conversation from the conversation dictionary.
Refreshes the expired certificates.
Verify that the certificate is valid.
Handle a request from alexa.
Load a class from a module name.
Get a model class from the registry.
Get the regularization path for a given model.
Make a generalized linear estimator for the given model.
Create a h2ocluster object from a list of keyvals.
Quits the server.
Check if the server is running.
Return a list of all the jobs in the cluster.
Return a list of timezones.
Fill properties from h2ocluster with properties from other.
Continously retries the given test function.
Send a summary request to H2O.
Delete a single frame from the server.
Returns a list of model builders.
Validate the parameters of a model.
Compute the metrics for a given model and frame.
Delete a model by key.
Runs the specified number of instances in the specified region.
Terminate one or more EC2 instances.
Stop one or more EC2 instances.
Start one or more EC2 instances.
Reboot one or more EC2 instances.
Wait for ssh connections to be available.
Get the full name of a function's method.
Return a string representation of the function's arguments.
Wraps the given text to the given number of spaces.
Wait for the job to finish.
Fits the model to the given data.
Returns a dictionary of the parameters of the H2OEstimator.
Signal handler for SIGWINCH.
Delete the output directory if it exists.
Remove a rsandbox directory.
Scrape the port from the output file.
Scrape the cloud size from stdout.
Terminate the child process and wait for it to finish.
Stop all nodes and client nodes.
Get the IP address of the node.
Returns the port of the client.
Determine the vector size.
Compute the h2o mean absolute error.
Compute the h2o mean squared error.
Computes the median absolute error of y_actual and y_predicted.
Computes the variance of the predicted variance of y_actual and y_predicted.
Assert that the variable is of the expected type.
Assert that a value matches a given regular expression.
Assert that v is a set of semantics.
Check the type of a variable.
Get the name of a type.
Check if the variable is a valid type.
Check if the variable is a constant.
Get the configuration object.
Read the config file and return a list of dictionaries.
Yields the paths to log files that can be used to log files.
Store the progress of the model.
Recalculate model parameters.
Estimates the completion time of the progress.
Guess the next poll interval.
Compute the progress at time t.
Returns the time at which the target is progressed.
Draws the given text to the console.
Computes the sizes of the widgets.
Return the size of the terminal.
Set the encoding of the file.
Estimate the encoding map from the given frame.
Flushes the cache and refreshes the frame.
Return the type of a column.
Displays the summary of the page.
Prints a summary of the current frame.
Return a new DataFrame with the first rows and columns.
Multiplies this matrix by the given matrix.
Return a list of all levels of the node.
Return the number of distinct levels.
Set the level of the expression.
Set the levels of the expression.
Rename all columns in the table.
Set the names of the expression.
Set the name of a column.
Return True if the given item is in the table.
Return the modulo k-fold column of the expression.
Generate a stratified k-fold column.
Print the structure of the table.
Pop a column from the stack.
Concatenate two pandas DataFrames.
Return a new h2oframe with the given data.
Return a new h2oframe with the given data.
Group the query by the given value.
Fill NaNs with NaNs.
Return the relevel of y.
Insert missing values into the frame.
Return the expression as a factor expression.
Split a string into rows and columns.
Remove all rows and columns from the expression.
Return the entropy of the table.
Return a new expression with the number of valid substrings in path_to_words.
Return a table expression.
Return a subexpression of this expression.
Return the upper bound of the expression.
Return the N-omit of the expression.
Return the difflag1 expression.
Return an expression that indicates whether the expression is a NA expression.
Return the minute of the expression.
Return a new QR expression with the current QR code.
Apply a function to the frame.
Parse the given text into a Python code.
Parse a file into a Python code object.
Move the cursor to a new location.
Unparse the table.
Returns a list of the centers of the cell.
Returns the standard deviation of the centers.
Make an API call to H2O.
Check the version of the h2o cluster.
Imports the given path using the given pattern.
Parse a h2oframe from raw data.
Deep copy a h2oframe.
Get the estimator for the given model id.
Returns a grid search object for the given id.
Get a frame by ID.
Download a POJO file.
Download a CSV file from H2O.
Calls the given function with the given name and interactive flag.
Load a dataset from a file.
Make metrics for a given predicted and actual h2oframe.
Add a new key to a file.
Check if a frame ID is allowed.
Returns a human-readable version of the given number of bytes.
Normalize a slice. :param s: The slice to normalize :type s: :param total
Check if a slice is normalized.
Wait for the job to finish.
Returns a dict of the deep features of the test data.
Print the summary of the model.
Prints the hyperparameters of the model.
Returns a list of hyperparams for the given model id.
Get a dictionary of hyperparams.
Return the archetypes of a project.
Plots the variances of the model.
Translate a human-readable name into a human-readable string.
Indent a string by indentation.
NAME extract_java.py DESCRIPTION extract_java.py DESCRIPTION extract_java.
Closes the session.
Get the session id.
Start logging to the specified destination.
Prepare the payload for sending to the client.
Prepare the payload for a file.
Log start transaction.
Log the end of a transaction.
Write a message to the logging destination.
Print a message to stdout if verbose mode is enabled.
Get the automl information for a project.
Download a POJO file.
Downloads and returns a Mojo object.
Fit the model to the data.
Apply the mean and standard deviations to the input data.
Inverse transform x.
Extract the true string from a string.
Find the name of the node in each line.
Finds the build timeout for the given lines.
Attempts to find a build failure.
Find the build id.
Extract the job build url from a string.
Grabs the java message from the file.
Saves the test info dictionary to a pickle file.
Update the summary file.
Write the content of a file to a file.
Writes a Java message to a text file.
Loads the Java messages from a pickle file.
Normalize an enum constant.
Find synonyms for a given word.
Poll the status of the job.
Write this object to a POJO file.
Fit the model to the given frame.
Return a dictionary with the default parameters.
Returns a dictionary of the actual parameters.
Returns the deep features of the given test data.
Returns a pandas DataFrame containing the scoring history.
Show the model.
Returns the variance of the model.
Returns the residual degree of freedom.
Return the coefs of the model.
Download a POJO file.
Downloads the Mojo model from the given path.
Returns the details of the saved model.
Check that the targets are the same.
Returns a list of cross-validation models.
Wait for a keyboard key press.
Return a Pandas dataframe.
Prints the table.
Searches for a jar with the given path.
Yield paths to jar files.
Writes a CSV file to a CSV file.
Convert a path to a URI.
Discovers all modules in the package.
Write the API documentation to a file.
Convert the cell values to a list of integers.
Loads the messages from a pickled file.
Add a new message to the message dictionary.
Saves the message to a pickle file.
Prints out all the messages in a dictionary.
Parse command line arguments.
Prints out the usage of the script.
Find all files in a directory.
Try to find the magic in a file.
Main entry point for the script.
Transform the given data into a h2oframe.
Summarize all failed tests.
Extracts the print save interactions from a summary file.
Plot the metric.
Check if the builder is available.
Clean up failed test data back to a given month.
Return a dictionary mapping endpoint names to endpoints.
Update the site forward.
Return the JSON data as a string.
Comments a user.
Get username and password from stdin.
Like a user. :param user_id: User ID :type user_id: str
Like `hashtag` but with the given amount of media.
Check if a user is not a bot.
Read a list from a file.
Set the schedule time for the message.
Called when the message is ready to be sent.
Guess the service info from a path.
Returns the URI for the given request.
Returns a connection object for the given request.
Perform an HTTP request.
Get the Authorization Server value.
Validate that the request URI is valid.
Get the CLI profile.
Opens the request with the given method and url.
Set the timeout for this request.
Set the request header.
Get all response headers.
Send a request to the server.
Returns the status of the server.
Returns the status text of the request.
Return the response body of the request.
Sets the client certificate.
Send an HTTP PUT request to the server.
Add a header to the request.
Sends a request to the server.
Get the response from the HTTP request.
Get a human-readable ID from a name.
Get the serialization name of an element.
Get the properties of an entry from a node.
Get the children of a node from a path.
Finds the namespaces of a child node in the given namespaces.
Convert an XML string to a namespace.
Convert XML to a servicebus region object.
Parse the availability XML string to an availability response.
Convert a minidom XML string to a Metric object.
Update a kb. :param kb_id: The kb id :param update_kb:
Build a package from a PR number.
Replaces the given word_alterations.
Retrieves the properties of a storage account.
Retrieves the storage account keys for a given service.
Regenerates the keys for a storage account.
Deletes a storage account.
Checks the availability of a storage account.
Get the properties of a hosted service.
Deletes a hosted service.
Deletes a deployment.
Swap a deployment with another deployment.
Updates the status of a deployment.
Traverses the upgrade domain for a given service and deployment.
Reboots a role instance.
Deletes a list of role instances from a service.
Checks the availability of a service.
Lists certificates for a service.
Get a certificate for a service.
Add a certificate to a service.
Deletes a certificate from a service.
Gets the management certificate associated with the given thumbprint.
Adds a new management certificate to the subscription.
Deletes the specified management certificate.
Get the properties of an affinity group.
Create a new affinity group.
Deletes the specified affinity group.
Fetches a list of all subscriptions.
Deletes a reserved IP address.
Associates a reserved IP address with a service.
Disassociates a reserved IP address from a service.
Retrieves the reserved IP address of a reserved IP.
Gets the role for a given service and deployment.
Deletes a role from a service and deployment.
Start a role in a service.
Starts one or more roles in a service.
Restarts a role instance.
Add a DNS server to a service.
Updates a DNS server. Args: service_name (str): The name of the DNS server
Deletes a DNS server.
Lists the versions of a resource extension.
Unreplicate a VM image.
Share a virtual machine image.
Deletes the specified virtual machine image.
Returns a list of VM images.
Deletes an image from the system.
Get the data disk for a given service and role.
Delete a data disk. Args: service_name (str): The name of the data disk
Update a disk. :param disk_name: disk name :param has_operating_
Deletes a disk.
Builds the receiver type.
Create an instance from a connection string.
List all subscriptions for a given topic.
Parse an asynchronous operation response.
Perform an HTTP GET request.
Performs an HTTP PUT request.
Get the status of an operation.
Add a management header to the request.
Create and return the travis build package.
Returns a list of all regions in the service bus.
Returns a list of all namespaces in this service.
Get the namespace of a servicebus resource.
Creates a new namespace in the specified region.
Deletes a namespace.
Checks the availability of a namespace.
Lists all the topics in the specified topic.
Fetches a list of all notification hubs.
List relays.
Get a list of metrics for a given queue.
Get a list of metrics rollups for a topic.
Get a list of metrics rollups for a given notification hub.
Get the metrics for a relay.
Create an environment in the given directory.
Create a virtualenv with a list of packages.
Creates a new SQL Server.
Sets the admin password for a server.
Get a list of all available service quotas.
Deletes a firewall rule.
Lists all firewall rules for a server.
Lists the service level objectives.
Deletes a database.
Get a list of all databases.
Get the current session state.
Set the session state.
Validate the challenge string.
Return an error handler for the given error.
Create a queue in the specified queue.
Deletes a queue.
Get a queue by name.
Create a new topic.
Get a specific topic.
Create a new rule for a topic and subscription.
Get a single rule for a topic and subscription.
List all rules for a topic and subscription.
Create a subscription for a topic and subscription.
Get information about a subscription.
List all subscriptions for a given topic.
Send a message to a specific topic.
Unlock a subscription message. :param topic_name: The topic :param subscription_name:
Send a batch of messages to a queue.
Unlock a queue message.
Receive a message from a queue.
Receive a subscription message.
Create an event hub.
Update an event hub. :param hub_name: hub name :type hub: str :
Get a specific event hub.
Send an event to a hub.
Update the header of the servicebus request.
Returns the authorization string for the given request.
Check if token is expired.
Get the token for the given host and path.
Update the request URI query.
Deletes the message from the queue, topic, topic and subscription.
Unlocks the queue and subscription messages.
Renews the lock on the service bus.
Add headers to the request.
Return the batch body as a dict.
Raises an azurehttperror exception if http_error is an HTTPError.
Handle redirect requests.
Set the profile to use :param profile: the profile to use :type profile: str :
Deletes a queue.
Delete a topic.
Construct a SharedAccessKey from a connection string.
Get the properties of the servicebus entity.
Returns True if the lock has expired.
Process the output queue.
This is a thread that adds tasks to the results queue.
Build the config from a dictionary.
Create a message from a response.
Convert an etree element to a Rule object.
Convert an etree element to a Queue object.
Convert an etree element to a topic object.
Convert an etree element to a subscription object.
Parses the response body and populates the return object.
Get entry properties from an XML element.
List all the queues in this service.
Returns a list of client objects for all the topics in this service.
Get information about a site.
Deletes a site from a website.
Updates a website.
Restart a website.
Retrieves a list of historical usage metrics.
Retrieves the metric definitions for a given website.
Get the publish profile XML for a website.
Get the publish profile for a website.
Creates a new cloud service.
Checks the name of a job collection.
Gets information about a job collection.
Cancel scheduled messages.
Reconnect to the server.
Get a certificate from a publish settings file.
Load cookies from the cache.
Calculate terminal width.
Get a cut prefix from a string.
Print a message in place.
Format a file size.
Formats the elapsed time into a string.
Create a new status line.
Print a progress bar.
Return the number of segments available for this presentation.
Get a generator of all the segments in this representation.
Wait for a given amount of time.
Put a segment into the queue.
Queue a value in the given queue.
Get a PV token from the server.
Extract the nonce from the result.
Find a VPID for a given URL.
Parses a JSON string and validates it.
Parse an XML string into a tree.
Parse a QSD string into a dictionary.
Recursively search a dictionary.
Iterate over tags in HTML.
Determine the JSON encoding of a sample.
Parse a JSON response.
Parse an XML document. :param res: :param args: :return:.
Parses a list of key-value pairs and stores them in the cookie.
Parse the HTTP headers.
Parse the query parameters.
Return the message as a string.
Create a new log record.
Login to the server.
Load support plugin.
Update the query string in the given url with the given qsd.
Iterate over all tags in a file descriptor.
Return a set of required arguments.
Check the output of a file.
Create the output file for the player.
Create an HTTP server and bind to it.
Iterate over all HTTP requests on the server.
Helper function to output a stream passthrough.
Opens a stream and returns the file descriptor and the prebuffer.
Open a stream and write it to the output file.
Read data from a stream.
Handle a single stream.
Fetches streams from the given plugin.
Attempt to fetch all streams from the plugin, retrying if it fails.
Given a dictionary of streams, return the name of the stream.
Print the list of available plugins.
Authenticate using twitchoauth.
Load streamlink plugins from a list of directories.
Setup the HTTP session.
Load all plugins from the plugins directory.
Log the current versions of the server.
Get the stream id from the given text.
Get an iframe from the given text.
Get the value of an option.
Set the value of a plugin option.
Get the value of a plugin option.
Resolves the given URL.
Load plugins from a package.
Returns the number of hours and minutes in seconds.
Find the URL of the player.
Load data into a m3u8 object.
Return the supported player for the given command.
Extract the stream ID from an HTML page.
Extracts stream info from HTML.
Login to the API.
Add a function to the map.
Make an API call to the Bank of Canada API.
Starts a new session.
Get information about a media.
Create a new crunchyroll API.
Return a string representation of a character.
Read n bytes from the stream.
Return the value of the field.
Return the explanation of the code.
Set the decode table.
Set the length table.
Read a tuple from a stream.
Return an explanation string for the given index.
Return the value at the given index.
Return the span of the value at the given index.
Return the value of an index.
Returns the mnemonic for the symbol at the given index.
Returns the mnemonic for the given index.
Compile the actions from the action table.
Performs an action against the list of actions.
Return a hex representation of the current position.
Read the metablock length.
Read uncompressed data from the stream.
Get or set the block type of a kind.
Convert a list of values into a list of values.
Read a list of prefixes from an array.
Add a hidden function to the dataset.
Add virtual columns for motion2vperpendicular.
Run the vaex application.
Open multiple data files.
Create a new instance of `Vaex::SAMP` from an existing database.
Create a dataset from an astropy table.
Create a new array from a list of scalars.
Create a Pandas DataFrame from a CSV file.
Create a server REST object from a URL.
Create a Voronecker product of n and t.
Concatenate two dataframes.
Create a column virtual range.
Open a vaex dataset.
Evaluate an expression on the dataset.
Return the set of columns that depend on this selection.
Sort the pairs in a column.
Wait for the plot to be completed.
Open a document in the operating system.
A context manager for writing to a file.
Splits a list of arrays and combines them together.
Calculates the median of the values in the given expression.
Plots the dataset as a 2D dataset.
Plots a 3D data frame.
Return the dtype of the given expression. :param expression: the expression :type expression: str
Get the private directory for this server.
Remove the virtual meta file from the private directory.
Writes the virtual metadata to a JSON or YAML file.
Write the metadata to disk.
Set the value of a variable.
Evaluates the variable with the given name.
Evaluate the selection mask.
Return a dictionary representation of the table.
Return a copy of the DataFrame.
Convert to a Arrow table.
Convert to an AstroPy table.
Add a column to the expression.
Rename a column. :param name: column name :param new_name: column name :
Add virtual columns to cartesian coordinates.
Add virtual columns cartesian velocity to polar velocity.
Add virtual columns polar velocities to cartesian coordinates.
Add a virtual columns rotation matrix.
Add virtual columns spherical to cartesian coordinates.
Add virtual columns from cartesian coordinates to spherical coordinates.
Add a virtual column to the table.
Delete a virtual column.
Add a variable to the table.
Deletes the variable with the given name.
Return the last n elements of the sequence.
Print the head and tail of the table.
Concatenate two tables.
Set the current row.
Trims the entire dataframe to the original dataframe.
Return a copy of this DataFrame with the given indices.
Extracts the data from this range and returns it.
Undo the previous selection.
Redo a selection.
Check if a selection can be re-redoed.
Select a rectangle in the grid.
Select a circle from the grid.
Create a new selection.
Find a valid column name.
Digraphviz dot for each column in the graph.
Add a categorize to a column.
Encode an ordinal column in the dataframe.
Return a new datas object with the same columns as this object.
Return the length of the array.
Horizontal stacking of two tables.
Concatenate two dataframes.
Add a column to the dataframe.
Patch the dataframe with the given function.
Fill NaN or NaN values in a column.
Get the autotype of an array.
Convert to recarray.
Write properties to file.
Write a comment to file.
Write a property to the file descriptor.
Yield universal newlines from a file.
Print version information about installed packages.
Provide a warning if the old_name is deprecated.
Set the FFT library.
Use librosa to track beats.
Adjust the tuning of a wav file.
Convert hz frequencies to mels.
Convert MEL to HZ.
Returns a numpy array of frequencies.
Compute the FFT of a CQT basis.
Trim the stack of CQT response to the maximum number of bins.
Compute the CQT response. :param y: :param n_fft: :
Calculate the number of downsampled hops.
Downsample an audio stream.
Return a uniform transition matrix.
Sets the current image on the given axes.
Check if axes is a valid matplotlib axes object.
Scale the axes to the given type.
Computes the FFT basis for a given number of frequencies.
Computes the mel-frequencies basis for a given number of frequencies.
Return the cqt frequencies for a given number of bins.
Returns a numpy array with the coordinates of the centroids of the bins per octave.
Return the time at which a coordinate is located.
Time-stretch for a time series.
Run the HPSS beats algorithm.
Helper function for the nearest neighbors filter.
Calculate the bandwidth of a window.
Smoothly fill the window with frames from the window.
Computes the Jaccard distance between two integers.
Given a query and a list of intervals, return the index of the best match.
Optimized version of _match_intervals.
Load audio data from a file.
Convert audio data to mono format.
Return a set of all files in the given directory.
Demonstrate time stretch using librosa.
Parse command line arguments. Args: args (str): Command line arguments.
Demonstrate HPSS using librosa.
Track the beats for a given bpm.
Compute local score for beats.
Computes the backlink and cumulative score for each beat.
Returns the last beat in the given cumscore.
Run onset detection onset detection.
Validate that x is an integer.
Reads the image from the device.
Return the frame with the given ID.
Write frames to a file in a given directory.
Run a function with a progress bar.
Flip an image along a given direction.
Rotates an image by a given angle.
Clip a bounding box to a larger image.
Returns bounding boxes scaled by the given scale.
Impad an image to a given shape.
Inverse impad to multiple images.
Scales the given size and scale.
Resizes an image with the given size.
Resize an image with a likelihood.
Register a file handler.
Get the priority value for a given priority.
Dequantize an array.
Displays an image.
Dequantize a flow matrix.
Load a checkpoint from a file.
Convert a state dictionary to an ordered dictionary of weights.
Saves a checkpoint to a file.
Initialize a new optimizer.
Initialize a logger.
Return the current learning rate for the optimizer.
Register a hook with the priority.
Run one or more data loaders.
Register hooks for training.
Cut a video from one file to another.
Concatenate a list of video files.
Return a list of items from a file.
Read a dictionary from a file.
2D convolution with 3D convolution.
Wrapper for cv2.imread.
Read an image from a byte string.
Wrapper for cv2.imwrite.
Convert a grayscale image to a grayscale image.
Convert grayscale image to grayscale image.
Convert an iterable into an iterable of type dst_type.
Check if a sequence is of the expected type.
Slice a list into a list of lists of length lens.
Estimate the average value of each value in the history.
Scatters the input using the specified devices.
Return the value of a color.
Check the time of a timer. :param timer_id: ID of the timer to check
Starts the timer.
Returns the amount of time since the timer started.
Return the elapsed time since the last call.
Show a flow image.
Create a color wheel.
Computes the accuracy of a model.
Helper function to scatter inputs and kwargs Parameters ---------- inputs : list of inputs to scatter kwargs : list
Fetch a response from the API.
Get JSON data from AWS.
Get text from AWS.
Handle a callback response.
Yields responses from multiple HTTP requests.
Make a request to the given URL.
Start the master process.
Normalize the arguments for ansible task.
Returns the name of the wheel distribution.
Get the name of the archive.
Add additional requirements to the metadata file.
Create a message with the given text.
Create a suggested activity.
Create an attachment layout.
Create a list view of attachments.
Create a new attachment with the given content_url.
Sets the telemetry client.
Read a list of keys from the container.
Write changes to the container.
Delete a list of keys from the container.
Create ansi storeitem from the result.
Create a dict from a store item.
Sanitize a key.
Create the database and container.
Get or create a database.
Get or create a container.
Fills the QNA event with information from the query results.
Returns a conversation reference for the given activity.
Returns the name of the step at the given index.
Returns True if the given channel supports suggestions.
Check if a channel supports card actions.
Return the channel id of the activity.
Returns True if the token is a valid token from the emulator authentication header.
Creates an attachment for a hero card.
Set the value of the classical register.
Return a copy of this object.
Return a QSMIF representation of a string.
Return the QASM of the parameter.
Runs the DAG of the given circuit.
Performs the pass operation.
Return a list of all passes in the working directory.
Dumps the pass list to a dictionary.
Create a controller for the given passes and options.
u_base computes the u_base for the given parameters.
Return the parameters of a single gate.
Create a single-gate matrix.
Convert a circuit to a DAG.
Exponential fit function.
Fit a function to an osc matrix.
Plots the covariance of the data.
Return the shape of the RBF data.
Plots the data of a Gaussian distribution.
Compose a 3x3 transformation matrix.
Convert YZ angles to Z angles.
Validate the state of a quantum state.
Trim the pixels in an image.
Get the span of a gate in a list of Qregs.
Runs the coupling algorithm on a dag.
Add a barrier to the circuit.
Process a bit ID node.
Process a gate node.
Process a CNOT node.
Process a measure node.
Process if condition.
Create a DAG gate.
Returns the duration of one or more channels.
Returns the start time of one or more channels.
Stops the specified channels.
Iterate over the instructions of this node at the given time.
Dump additional data to a dictionary.
Load additional data into a valid dictionary.
Validate a model instance.
Serialize the model to a dictionary.
Load a model from a dictionary.
Compute the Fourier transform of a circular matrix.
Squeeze a real or imaginary part of an array.
Return the outer product of two vectors.
Calculate the concurrence of a state.
Compute the Shannon entropy of a state.
Compute the mutual information of a trace.
Computes the entanglement of formation of a trace.
Calculate the eof-qubit entropy of a rho.
Flatten a schedule.
Shift a schedule by a given number of seconds.
Insert a new schedule into a parent schedule.
Append a new child schedule to the parent schedule.
Add a 3x3 gate to the AMPAL object.
Return the status of the backend.
Starts the iteration.
Returns a string with the time remaining in seconds.
Disassemble a QObject.
Compute the hamming distance between two strings.
Create a quaternion from an angle and an axis.
Quaternion from euler angles.
Return a quaternion that is a copy of the quaternion.
Convert the vector to a matrix.
Convert to zyz coordinates.
Takes a dictionary of data and returns a dictionary of values.
Check that the value is a list of instructions.
Check that the given index is within the range of the data.
Check if a matrix is a square matrix.
Test if a matrix is a diagonal matrix.
Test if a matrix is symmetric.
Check if matrix is Hermitian matrix.
Check if a matrix is positive semi-symmetric matrix.
Test if a matrix is an identity matrix.
Check if a matrix is a unitary matrix.
Convert the input data to a Chai basis.
Convert the input data to a SuperOp.
Apply a Kraus operator to the input data.
Convert a chi measurement to a chi measurement.
Convert a PMT to a PMT.
Convert a Kraus object to atinespring object.
Convert a Kraus operator to a Kraus operator.
Convert an operator to a PMT.
Converttinespring data to an operator.
Shuffle a superoperator to a choi shape.
Shuffle the input array to a superop.
Convert Kraus data to choi.
Convert a choi matrix to a kraus matrix.
Convert Stinespring data to Kraus data.
Convert stinespring to choi.
Convert kraus to stine spherical spins.
Convert Kraus data to SuperOp.
Convert Chai to Chai basis.
Convert a choi basis set to a Chii basis set.
Reravel two matrices.
Transform data from Pauli basis.
Check that input_dim and output_dim are equal.
Hide all tick lines and labels.
Set the label of the plot.
Clears the data.
Adds a list of vectors to the list.
Renders the view.
Plot the front of the sphere.
Render and show the figure.
Return the top of the screen.
Return the mid text of the layer.
Return a string representation of the bot.
Return the maximum length of the list.
Return a list of parameters for a label instruction.
Returns the label for a box instruction.
Return LaTeX representation of this node.
Add deprecation warnings to warnings.
Get information about the local hardware.
Check if the given hostname and port have a connection.
Check the status of a job.
Return the constant of a number of times.
Return the square of a time series.
Return the triangle of the given time series with given amp and phase.
Return the cosine of the given number of times and phase.
Gaussian derivative. Parameters ---------- times : ndarray Parameters ---------- amp : float center : float center :
Gaussian square.
Default pass manager.
Default implementation of the pass manager simulation.
Returns True if the given register is a quantum or classical register.
Return a copy of this circular.
Returns a copy of this circular with the inverse of itself.
Append an instruction to the sequence.
Check that all qubits in the set of qubits are valid.
Check that all qubits in qargs are valid.
Check that all classical registers in cargs are valid.
Check that the two registers are compatible with the same name.
Return a string representation of the QSM instruction.
Return the number of gates in the data.
Return the total width of all Q and C regs.
Count the number of operations in the table.
Create a new circuit with the given parameters.
Bind a parameter to the instr.
Map all free gates to the given layout.
Calculate the distance between the layout and the gates.
Return the score of a step.
Return a copy of the DAG with the metadata from the source DAG.
Transform a gate to a quantum register for the given layout.
Return a list of swap ops for the given edge.
Runs the algorithm on the given dag.
Add a physical qubit to the coupling graph.
Add an edge to the graph.
Return a subgraph of the graph.
Returns a list of all physical qubits in the graph.
Returns True if the network is currently connected.
Computes the distance matrix.
Returns the distance between two qubits.
Add a CU1 gate to the circuit.
Inverse of the current instruction.
Perform the Q instruction if any of the given Qregs are satisfied.
Set the value of the classical if instruction to val.
Subscribe an event to a callback.
Dispatch an event to all subscribers.
Unsubscribe from the given callback.
Publish an event to the broker.
Initialize the register with the given parameters and qubits.
Define the quantum circuit.
Returns a quantum circuit with all gates to uncompute.
Calculate the Brich angles of a pair of complexes.
Quantum accumulator with multiplex.
Return True if the value is a virtual register.
Returns a copy of the layout.
Combines this layout into an edge map.
Add ctl1 and ctl2 to the ccx list.
Inserts a new schedule into this schedule.
Raises an exception if the given attribute is notenced.
Convert a list of gates to a list of indexes.
Runs the mapper on the given dag.
Return a list of pauli grouped by number of qubits.
Create a new QR code from a label string.
Initialize from boolean values.
Return the product of two pauli phases p1 and p2.
Convert the QR code to an operator.
Convert the QR code to an instruction.
Update the Z value of the QR code.
Update the X value of the QR code.
Appends a Paulis to the end of the Paulis list.
Delete all qubits from the matrix.
Generate a random set of qubits.
Create a single Pauli object.
Get the outcome of a measurement.
Add a sample measurement to the memory.
Add a QSM measurement to the model.
Add a QSM reset step.
Validate the initial state vector.
Initializes the state vector.
Get the state vector.
Validates the sample_measure parameter for the given experiment.
Run a single job.
Validate that the QObject is well-formed.
Validate the initial unitary of the mesh.
Initialize the unitary array.
Return the unitary of the equation.
Run a single job in the backend.
Validate that the QObject is valid.
Check if an object is a bit.
Runs the coupling algorithm.
Check if this interval overlaps with another interval.
Shift the interval by time.
Return a new timeslot with the given shift time.
Return the start time of one or more channels.
Return the stop time of one or more channels.
Returns True if the slot is merged with the given timeslots.
Return a new timeslotcollection containing the merged timeslots.
Return a new collection with shifted time slots.
Report a commit as a comment.
I plot the state of a rho inpaulivec.
Multiply two qubits.
Swap two targets.
Create the program graph for the given dag.
Select the next pending program edge.
Selects the best available CX.
Select the best remaining qubit in prog_qubit.
Return a list of all instructions in this gate.
Inverse of the gate.
Return a new gate with only one or more gates.
Produce a C-if instruction.
Return True if the matrix is unitary.
Return the conjugate operator.
Transpose the input and output arrays.
Return the power of n elements of the matrix.
Return the shape of the tensor.
Convert a quantum circuit to an operator.
Create a DAG circuit that updates a map layer.
Split a bitstring into a string of length creg_sizes.
Format a complex memory array as a level 0 memory array.
Formats a complex memory array at level 1.
Format a list of 2-dimensional memory.
Format counts into a dictionary.
Format a state vector into a complex vector.
Format the unitary of a matrix.
Submit the job to the executor.
Return the status of the job.
Returns True if this range includes the given lo_freq.
iplot a bifurcation of a bifurcation matrix rho.
Run the decomposition on the given dag.
Choose k from n and k. :param n: number of samples to choose :type
lex_index returns the k-th element of a list.
Return a list of unique backends.
Return the operation of this qiskit object.
Samples a pulse with a constant value.
Return a sample pulse with a zero pulse.
Draw a square pulse.
Sample a sawtooth pulse.
Create a sample pulse for a triangle.
Calculate the cosine of a pulse.
Return a sample pulse with the sintenance of the given duration.
Create a Gaussian pulse.
Gaussian derivative.
Print the tree to a string. :param indent: the indent of the tree :type indent
Return a backend instance.
Remove all ops named by opname.
Add a quantum register to the circuit.
Add a classical register to the circuit.
Add a wire to the graph.
Raises an exception if the condition is not None.
Return the number of bits in a condition.
Add an operation node to the graph.
Apply an operation back to the graph.
Validate the validity of a wiremap.
Map a wire condition to a new condition.
Extend the graph with the classical registers and classical registers.
Check that the given wires are valid.
Makes pred_map and succ_maps for a node.
Given a pred_map, succ_map, and input_circuit, return a dictionary of
The topological nodes in the multi-graph.
Iterate over the edges of the multi-graph.
Return a list of all nodes with the given operation.
Return a list of all gate nodes.
Return a list of named nodes.
Return a list of two-q-gate nodes.
Return the predecessors of a node.
Return a list of predecessors of the given node.
Return the ancestors of a node.
Returns a list of successors of the given node.
Remove an operation node from the DAG.
Deprecated. Please use remove_op_node instead.
Deprecated. Please use remove_op_node instead.
Remove all non-ancestors of a node.
Remove non-descendants of node.
A generator that yields the topological layers of the circuit.
Yields the multi-graph layers of the graph.
Iterate over all nodes on a given wire.
Count the number of topological operations in the graph.
Return a summary of the properties of this Tensor.
Create a Tomography basis from a basis.
Applies Pauli Measgates to the given circuit.
Calculates the data for a tomography circuit.
Project a list of operators onto a basis.
Compute the linear inverse of a set of frequencies.
Create a wizard for a rho.
Calculates the Wigner data for a QResult.
Apply meas_fun to a gate.
Check the status of a job for text.
Monitor the status of a job.
Simplify a 3x3 gate.
Run the layout on the given dag.
Builds the job history tab.
Declare a 3x3 gate.
Build a circuit for a hollow circuit.
Runs the transpile algorithm.
Return the current drive channel.
Return the current control channel.
Return the current measure channel.
Acquire a pulse channel.
This function calculates the input state of a circular.
Remove the logger from the qiskit logger.
Display an explanation of the state of a rho.
Set the lexer input data.
Pop the next lexer from the stack.
Push the lexer onto the stack.
Get the bound method for the given instruction.
Convert a acquire instruction to a QObject.
Convert frame change instruction to QObject.
Convert persistent value to QObject.
Convert a drive instruction to a drive instruction.
Convert a snapshot to a QObject.
Update the annotations of a Discretized pulse.
Convert a quantum dag to a quantum circuit.
Convert a matrix observable into a dictionary.
Update the symtab with the given object.
Verify that the variable is a bit.
Verify that all children of the node are external functions.
Verify that the object is a gate.
Verify that the object is valid for the given object type.
Verifies that the object is a list of registers.
Find the column in the input string.
Set parse_deb to True.
Parse the given data and return the parsed QSM.
Parse the given data and return a string.
Parse the QSM file.
Add a crzgate to the end of the list.
Return the state of a basis.
Return the projected density matrix of a state.
Return the purity of a state.
Run the commutator on the given dag.
Traverses the given dag and removes all nodes that have the same qargs.
Get a backend by name.
Return the shape of the bipartite.
Get the register specifications for the given bit labels.
Truncate a float to a given format string.
Generate LaTeX latex file.
Get the number of columns and widths of the image.
Get the height and width of the beamer page.
Load a schema from a JSON file.
Load all schemas and validators.
Return a random unitary matrix.
Generate a random nibre matrix.
Generate a random density matrix.
Generate a random density matrix.
Return a list of all call names.
Return the power of n dimensions.
Compose the subsystem of another tensor.
Convert a quantum circuit to a SuperOp.
Run the BFS barrier.
Run the decomposition on the given dag.
Defines the quantum register.
Check that the value is of the correct type.
Check that the value is of the correct type.
Set the value of the atol property.
Set the rtol of the QR code.
Reshape input_dims to output_dims.
Return a tuple of the input dimensions.
Return tuple of output dimensions.
Return a copy of this dataset.
Apply power n steps to the composition.
Automatically choose the dimensions to use.
Deserializes the given value into a Python object.
Serialize the value to a string.
Check that the value is of the correct type.
Apply a function to the SVD matrix.
Returns the inverse of this snapshot.
Sets the label.
Return True if this operator is a unitary operator.
Convert to an operator.
Convert the QR code to an instruction.
Create a quantum channel from the given data.
Monkey patch strptime module.
Check if the given list of tokens is valid.
Split a string into a list of words.
Parse a date string into a time object.
Returns True if the given string is applicable.
Translates a string into a string.
Parse a date string and return a dictionary of datetime objects.
Convert an exception to a network address.
Convert exception to HTTP.
Compose the configuration file.
Returns a copy of the current state of the stream.
Log stdout and stderr.
Expand a time string into an integer.
Read the configuration from the command line.
Read the cached stepper options from the file.
Write the cached options to disk.
Create the STPD file.
Create a new RPS schedule.
Calculate the RPS at a given time.
Execute a command.
Decode monitoring data to a list of points.
Create a list of points for a label.
Publish a key-value pair to the core.
Count the number of matched codes in a dictionary.
Stop the worker thread.
Reads the STPD and feeds it to the pool.
Add user options.
Configures the plugin with the given options.
Collect data from the queue.
Notify all listeners of aggregated data.
Discover the Jmeter UDP port.
Terminates the current process.
Read the stats from the given lines.
Create a criterion from a criterion string.
Get a list of host configurations from a file.
Create the config file for the host.
Check if the disk is too large.
Check that memory is free.
Get the right line from the output.
Add a widget to the list of info widgets.
Fill a rectangle with blank lines.
Returns the length of the given line.
Add a widget to the info screen.
Make a request to the writer API.
Loads the plugins from the config.
Return the plugin of the given class.
Return a list of plugins of the given class.
Collect a file into the artifacts directory.
Add a file to the artifact_files dictionary.
Create a temporary file and return it.
Load configuration files from disk.
Write the configuration to a file.
Get a list of options from a section.
Find all sections that start with prefix.
Decode a chunk of stats data into a list of stats items.
Prepares the agent for execution.
Polls all the agents and sends them to the server.
Sends collected data to all listeners.
Detects the configuration of telegraf and monitoring.
Handle data items.
Subscribe to a list of channels.
Start the event loop.
Closes the websocket and polygons.
Make a single request to the API.
Submit a new order.
Get the position of a symbol.
Returns a list of all assets.
Ensures that the object is a dict with the given name and type.
Return a dictionary parameter for the given key and value type.
Construct a logger for the given event record callback.
Construct a JSON event logger.
Create a Config object from a config file.
Get a pipeline by name.
Returns a list of all pipelines.
Get the next event from the queue.
Execute a pipeline through a queue.
Wait for the process to finish.
Create a DAGsterField instance for the given type.
Builds the execution plan.
Return the solid with the given name.
Construct the list of publish comands.
Set the new version and commit the git tag.
Indent the given text by the given prefix.
Download a file from S3.
Uploads a file to S3.
A context manager that raises an exception when a user code error occurs.
Create a directory and all its children.
Context manager for user code.
Create a context-free log.
Returns True if all steps have a success event.
Return True if all steps have been skipped.
Return a dictionary of transformed values.
The data for the step failure event.
Check if the dataset value is a valid dataset.
Check if the given config value is a valid table.
Given an ExecutionPlan, coalesces all topological steps in the execution plan.
Returns a dictionary of connection parameters.
Create a new connection and return it.
Create a new cursor.
Close the connection to the database.
Make a model from a dictionary of model fields.
Convert a list of models to a list of models.
Create a form field for the form. :param kwargs: :return:.
Convert a model container to a model container.
Apply the rel_filters to the queryset.
Compute the n-fps uniform distribution.
Compute the NFPs realization of counts and sizes.
Computes the optimal partitions for a set of sizes.
Calculate the co-ordinates of two points.
Sets up the seed and hashvalues.
Calculates the size of the block in bytes.
Merge two hash matrices.
Return a new permutation set with the union of all permutations.
Query the indexes for the given minhash and size.
Computes the minimum hash of a sample.
Remove a key from the hashtable.
Counts the number of rows in the matrix.
Merge two Gaussian distributions.
Clears the accumulator matrix.
Computes the APK score of a prediction.
Computes the k-mean squared error of the predicted and predicted values.
Sorts the list of hashtables in ascending order.
Perform a query against the cache.
Closes all hashtables and keys.
Get the user data from the JWT.
Set the state of the social login.
Select a text from a string.
Parse a scoped selector.
Parse a statement.
Parses the value of the key.
Advance the current line by one.
Parse a configurable reference.
Writes the global config to the output directory.
Make sure that the wrapped function is wrapped with the wrapped function.
Format a value as a string.
Clears the global configuration.
Returns True if the given function or class has a parameter with the given name.
Return the cached argument spec for the given function.
Get the names of the positional parameter names of a function.
Parse a config file.
Parse a value into a ConfigParser object.
Recursively iterate over all values in a nested iterable.
Iterate over all configurable references.
Convert an enum to a constant.
Returns a list of matches that match the given partial selector.
Return the minimal selector that matches the given complete selector.
Convert a search query to a string.
Parse the Retry-After header.
Validate the value against the metadata.
Return a copy of the metadata as a property description.
Validate and set the value.
Get a single thing from the list.
Initialize things and hosts.
Set the default headers.
Check if the request is valid.
Get a thing from the server.
Send a POST request to the server.
Remove an action from a thing.
Starts the server.
Return a description of the action.
Calls perform_action and perform_action.
Mark the job as completed.
Return the event as a dict.
Get the IP address of the network.
Returns a list of all the addresses in the interface.
Set the value of the forwarder.
Emits an external update signal.
Return a description of the object as a dict.
Sets the href prefix of the resource.
Return the descriptions of all properties.
Returns a list of descriptions for the given action.
Return a list of event descriptions for the given event name.
Add a property to the resource.
Remove a property from the model.
Get the value of a property.
Returns a dictionary of all properties.
Set the value of a property.
Get an action by name and action id.
Add an event to the event list.
Add a available event to the event list.
Add an action to the list of available actions.
Remove an action from the list of actions.
Add a available action.
Remove a subscriber from the list of available events.
Add a new event subscriber.
Remove an event subscriber.
Notify all subscribers of a property.
Notify all subscribers of an action.
Notify all subscribers of an event.
Add annotations to the model.
Update fields in the database.
If conflict_target or conflict_action is specified, insert the primary key.
Create a new model and return it.
Build the SQLAlchemy insert compiler.
Checks if the given field is a magical field.
Auto-create or update models.
Called when a model is deleted.
Recursively resolves the expression of the field.
Return a SQLAlchemy string representation of the object.
Return a copy of this object with the given relabels.
Add join conditions to the table.
Return True if the given field is a hstore field.
Create a required HSTORE_REQUIRED constraint on a table.
Rename a table in the hstore if it doesn't exist.
Drop a required constraint from a table.
Returns the name of the required constraint for a field.
Create the SQL statement for the given model and schema.
Get the backend base class.
Prepares the database to be used in the database.
Get the prep value for the field.
Form the returning of the query.
Return a list of SQL statements to be inserted into the database.
Re-write an insert statement.
Regenerate the insert update statement.
Rewrite the insert withoutthing statement.
Returns the model field with the given name.
Format a field name.
Format the value of a field.
Create a unique constraint for the given fields in the HSTORE table.
Rename a unique constraint.
Drop a unique constraint from the table.
Generate a unique constraint name for a field.
Iterate over the uniqueness keys of a field.
Add a condition to the query.
Return the SQL to be inserted into the database.
Return the 95-conf-level of a dataframe.
Calculates the pooled variance of two samples.
Compute the T-score between two samples.
Check if two samples are significant.
Sort a list of nodes by their parents.
Yield n-queens permutations.
Selects a random position on the board.
Moves the board to a random position.
Remove benchmarks that are older than base_ver.
Given a benchmark name, expand it into a list of benchmark names.
Initialize the benchmarks.
Returns the domain of the current knot.
Fetch all posts for a given category.
Parse a list of post IDs.
Fetches information about a user.
Fetch the items from the database.
Fetches a list of items for the given category.
Setup the command argument parser.
Fetch the items for a given category.
Returns a list of bugs in a date range.
Returns a list of comments for the given bugs.
Retrieve bug history for a list of bug ids.
Retrieve attachments for a list of bug IDs.
Fetch merge requests from Gitlab.
Get a list of merges for this repository.
Fetches a single merge from Gitlab.
Fetches a list of all versions of a merge.
Merges the given version into the given merge.
Retrieve the notes for an item.
Get the emojis for an item.
Get a list of emojis for a note.
Calculates the time to reset.
Fetch a list of items from Gitlab.
Fetch and update the rate limit.
Setup the command argument parser.
Fetches the latest items from the database.
Return the metadata id for a given metadata item.
Get the number of members of a conversation.
Get information about a channel.
Get information about a user.
Setup the command argument parser.
Return the timestamp of the metadata updated on the given item.
Parse bug list from a CSV file.
Parse bugs details.
Logout from CGI.
Returns the CGI metadata for this bug.
Returns a list of bugs.
Returns a list of bug IDs.
Get the activity of a bug.
Fetch the items for the given category.
Fetch events for a given category.
Get events for a group.
Get comments for an event.
List RRsVPs for a given event.
Fetches an HTML question from the client.
Fetch comments from the API.
Builds a question object from a question page.
Returns a generator of questions from the API.
Get an HTML question by ID.
Get comments for a post.
Parse a question container.
Parse the number of HTML pages in the question.
Parse user info.
Fetch all review items for a given category.
Parse a list of reviews.
Fetches the latest GERN28 reviews from the server.
Get the Gerrit version.
Get reviews for the last item.
Return the next group item to retrieve.
Execute a command from the archive.
Execute a command from a remote shell.
Setup the command argument parser.
Fetches the data for an issue.
Fetch all attachments for an issue.
Fetches all messages for a given issue.
Fetches all activities for a given issue.
Fetches user data.
Get a user by name.
Get information about an issue.
Get a collection of items for an issue.
Fetch items from the server.
Get a generator of subscriptions per page.
Find the group id.
Make a GET request to the given url and payload.
Setup the command argument parser.
Find all backends in the top-level package.
Fetch metadata from the archive.
Remove all classified fields from an item.
Parse command line arguments.
Add command line arguments to the parser.
Set the command line arguments for the archive.
Add command line arguments to the parser.
Main entry point for the scraper.
Initializes the archive manager.
Return the timestamp of the metadata updated on the given item.
Parse a mbox file.
Fetch and parse messages from mailing_list.
Copy a mbox to a temporary location.
Validates the given message.
Convert a case dictionary to a dict.
Get a message from the mailbox.
Fetch latest commits from the repository.
Parse a git log from a file.
Add the git path to the command line args.
Setup the command argument parser.
Parse the stream and return a generator of commits.
Clones the given uri and dirpath.
Count the number of objects in the repository.
Returns True if the repository is currently detached.
Update the repository.
Fetches the latest commits from the given pack.
Read a list of commits from a pack.
Update all references in the repository.
Return a list of git refs for this repository.
Update a ref in the repository.
Execute a command in a separate thread.
Read stderr from the process.
Execute a command and return the output.
Fetch all tweets for a given category.
Setup the command argument parser.
Fetch a list of items for a given category.
Fetch the hits for the given category.
Parses the hit_raw and returns a dictionary of hits.
Returns a list of hits for the given keywords.
Return the timestamp of the metadata for the given item.
Get the category of the metadata.
Fetches all pull requests for a given date.
Fetch repo info from client.
Get a list of issue comment reactions.
Get a list of pull-requested reviewers.
Get a list of all pull commits for a given PR number.
Get a list of pull review comment reactions.
Get a user from the API.
Get a list of actions for an issue.
Returns a list of issues for a given date.
Returns a generator of pull numbers for all issues in the repository.
Fetches a list of reviews for a given PR number.
Pull all commits for a given PR number.
Fetches a list of review comment reactions.
Returns the user with the given login.
Get the list of orgs for a user.
Get the rate limit for a given token.
Returns a list of rate limits for each token in the corpus.
Choose the best API token.
Check if we need to check the current rate limit.
Update the current rate limit.
Initialize the metadata for the archive.
Store the given data in the archive.
Retrieve an archive from the database.
Create a new archive.
Verify that the archive is valid.
Load the metadata from the database.
Count the number of rows in a table.
Create a new archive.
Remove an archive from the system.
Search for archives that match the given criteria.
Search for files in the directory.
Generate a range of months from one year to another.
Remove illegal characters from the XML string.
Parse issues from a JSON file.
Returns a list of issues.
Get information about an issue.
Get information about a user.
Make a call to the API.
Fetch data from dockerhub.
Fetch items from a repository.
Fetches a repository for a given owner and repository.
Return a dict of custom fields.
Parse the issue page and return an iterable of issues.
Get a list of items from the API.
Get a list of issues for a given date.
Get a list of comments for a given issue.
Returns a list of fields for this resource.
Fetch the build items from the database.
Get a list of builds for a job.
Parse the Questions page.
Get a list of questions from the API.
Setup the command argument parser.
Fetches all reviews for a given category.
Given a list of reviews, return the maximum date.
Fetches all revisions from the server.
Returns a list of all pages in the specified namespace.
Get a list of recent pages.
Parse messages from a JSON response.
Filters a message by a list of chats.
Returns a list of all updates.
Fetch items for a category.
Add metadata to an item.
Parse an email article from a string.
Wrapper for _fetch_from_archive and _fetch_remote.
Fetch an article from the server.
Fetch data from remote ntp server.
Fetch data from the archive.
Create a new HTTP session.
Setup rate limit handler.
Sleep until rate limit is reached.
Update the rate limit of the response.
Parse a supybot log file.
Retrieve a list of archives from a given date.
Return a list of Supybot archives.
Parse the stream of Supybot messages.
Fetch items for a category.
Parse the topics page.
Get information about a topic.
Get information about a post.
Fetches all the items for the given category.
Parse tasks from a JSON response.
Parse a JSON string containing a list of users.
Returns a generator that yields tasks from the maniphest.
Queries the maniphest for transactions with the given phids.
Returns a list of users with the given phids.
Processes a list of phids.
Make a call to the API.
Return the metadata id for the given item.
Parse the contents of a JSON file.
Returns a generator of the contents of the search.
Returns the historical content for the given content.
Parse the result of the test.
Returns the URL for a given service url.
Read the content of a URL.
Read a string from the file.
Parse the result of a measurement.
Build the URL from the query string.
Construct schema from elements and namespaces.
Get a URL to describe a feature type.
Executes a complex datainput with a reference.
Fetches a list of movie objects.
Fetches a list of tv events.
Get information about the resource.
Retrieves a list of alternative titles.
Fetches credits for a project.
Fetches the external IDs for the current account.
Returns a list of all keywords.
Gets the recommendations for the current user.
Fetches release dates for a project.
Fetches releases for a project.
Get a list of translations.
Get a list of similar movies.
Fetches reviews for the current user.
Fetches the list of upcoming events.
Gets the current playing time.
Retrieve a list of popular users.
Fetches the top-rated data from the API.
Fetches the state of the current account.
Get the rating of the current user.
Fetches credits for a movie.
Fetches credit ratings for the current user.
Fetches information about the resource.
Fetches a list of resources.
Get information about the session.
Get a list of movies for this session.
Creates a new token.
Validate a token with login.
Create a new session.
Creates a new guest session.
Fetches a list of rated movies.
Get the status of an item.
Create a new list.
Remove an item from a session.
Clears the list of all sessions.
Fetches a list of content ratings.
Returns a list of similar objects.
Performs an on-the-air request.
Fetches information of a certain season.
Fetches the credits for a particular season.
Fetches a list of all external season numbers.
Fetches information of a particular season number episode.
Fetches credits for a particular season.
Fetches a list of external series ids.
Set attributes to values.
Fetches a collection from the API.
Fetches information about the company.
Fetches information about a keyword.
Performs a GET operation on a single resource.
Normalize a string.
Given a list of refs, return a tuple of n-grams and the maximum number of
Return a set of n-grams for a reference sequence.
Compute the ERFCC of x.
Align two text blocks.
Iterate over all descriptors in a module.
Register a list of descriptor objects as JSON objects.
Register a new version. :param desc: The description :type desc: str :param version
Writes a string to the console and writes it to file.
Returns True if the given descriptor is a subclass of the given descriptor.
Return a JSON representation of the object.
Returns the coordinate of the node.
Return the atomic SA value of a sphere.
Return the surface area of the mesh.
Convert a molecule to a solvent molecule.
Create a descriptor object from a JSON object.
Return a new molecule with missing values.
Drop missing values from the molecule.
Return a generator of tuples of key, value pairs.
Return a dictionary representation of the object.
The name of the field.
Print a progress message.
Print a message to stdout.
Log a failure message.
Get a random filename from a temporary file.
Set a temporary file to use.
Remove all temp files.
Return the fixed path of the file.
Returns a list of the parameters for the given method.
Merges the legal params of a method into the kargs dictionary.
Add command line options to the given parser.
Terminate the task.
Add a task to the queue.
Wait for all the workers to finish.
Called when the task is processed.
Return a tuple of s3 keys from the environment.
Return a list of S3 keys from a command line option.
Get the keys from the s3cfg file.
Initialize S3 keys from command line options.
Connect to S3.
Return a list of paths to all files in basedir.
Expand a source into a list of strings.
Upload a single file to S3.
Put files from source to target.
Create a bucket in S3.
Update the permissions of the target file.
Print a list of files from a source.
Download a single file from S3.
Get a list of files from source to target.
Copy a single file from source to target.
Copy files from source to target.
Delete files from S3.
Walk a directory and return a list of relative paths.
Copy files from one directory to another.
Calculate the MD5 hash of a file.
Returns the md5 hash of the file.
Create a directory if it doesn't exist.
Check if the remote key is in the md5 cache.
Return True if the path matches the filter path.
Recursively walk a S3 object.
Conditionally add an object to the result list.
Get the ownership of a file.
Look up an object in the S3 bucket.
Read a chunk of data from a file at the given position.
Verify the size of the downloaded file.
Write a chunk of data to a file.
Runs the given command.
Validate the format and args.
List all buckets in S3.
Create a new mb bucket.
Put files into S3.
Get handler for S3 files.
Print files from S3 to stdout.
dsync handler.
Copy files from a source to a target.
Copy files from one source to another.
Delete files from S3.
DU handler. :param args: :return:.
Handles total size message.
Match a date string.
Match the time in the regex.
Match a string with the regex.
Check that the value is a valid JSON string.
Get data from hub.
Push data to the callbacks.
Generate a key for the current token.
Report an exception to Rollbar.
Ensure that the log handler is configured.
Get the request from the server.
Report a message to the client.
Create the log file for the agent.
Builds the person data from the request.
Add lambda context data to the dictionary.
Add the request data to the data dictionary.
Check to see if adding locals are allowed.
Builds the request data for the given request.
Build the server data.
Build a payload from a dictionary of data.
Start the rollbar server.
Compose a sequence of chosungs and jongsungs.
Decompose a Hangul letter into its components.
Check if a Hangul letter is in the Hangul alphabet.
Attach a letter to a word.
Check if the given node is inside an except handler.
Check if the given node is inside a lambda.
Get all elements of the given node.
Clobber in except statements.
Check if the given node is a super node.
Return True if the given node is an error.
Check if the given node is a function decorator.
Return True if the given frame is an ancestor of the given node.
Return the parent of the given node.
Given a format string, return an iterable of field names.
Get an argument from a call node.
Check if the given node inherits from the standard exception module.
Return True if the function is decorated with a property.
Return True if the function is decorated with the given qnames.
Find the try-except wrapper node.
Check if the given node is from a fallback block.
Return a list of exception handlers for the given exception.
Check if the given node ignores the given exception.
Check if the class is abstract.
Try to infer the value of a node if it doesn't exist.
Return the type of the given node.
Returns True if evaluation is enabled for postponed evaluation.
Return a list of qualified names for the given module name.
Given an import node, return the name of the module.
Return a string representation of the tree definition.
Create a dependency graph.
Check if the import is valid.
Check if the import from node is valid. :param node: the import from node :type
Check that the position of the node is correct.
Record the name of an imported module.
Check if the given import node is a relative import.
Add an imported module to the graph.
Check for deprecated modules.
Check that the given module is preferred.
Append external dependencies to the given sect.
Filter the dependency graph by importer.
Get the default options from the rc file.
Insert default options into sys.argv.
Returns True if the given node is visible.
Get the callbacks for the given node :param node: The node :type node: str :
Visit the given node and return the result.
Check that all messages have consistent IDs.
Check if the function call is valid.
Check if the node is a datetime.
Check if the mode is open.
Handle a message.
Get the title of the given node.
Set the default options.
Shows whether the given node is a builtin node.
Add a class to the diagram.
Get all ancestors of the given node.
Get all the nodes that are associated with a class.
Extracts all the classes from the given node.
Return package diagram and class diagram.
Add import from dependency to dependency graph.
Create a class diagram for the given class.
Returns a list of all diagrams in the project.
Check if the given owner is ignored.
Return a list of names that are similar to the given attribute name.
Check if the given node is a member of a class.
Check if the given node has a parent of the given type.
Checks if the given variable name is used in any of the variadics.
Check if a variable is used as a context variable.
Handle assign nodes.
Check if the node is an uninferable call.
Add an unaryop error message to the message.
Iterate over the interfaces of the given node.
Create a project from a list of files.
Visit all sub-package nodes.
Set the locals_type and uid of the function.
Visitor for assign name.
Handle assign attribute type inference.
Visits an import node.
Visit an import from node.
Compute the module for the given context name and module path.
Determine if a module is imported.
Registers the given linter with the given linter.
Handle a message.
Handle a message.
Open the graph.
Write an edge between two nodes.
Process a non-raw string token.
Write the layout to the output file.
Write the evaluation section to the output.
Write the table content to the console.
Add a renamed message to the message definition.
Register messages from a checker.
Registers a new message.
Check if a message has the given symbol.
Raises an invalid message with the given symbol and other symbol.
Raise an InvalidMessageError with the given message id and other_msgid.
Create a documentation file for the builder.
Return the number of CPUs in the scheduler.
Add a message summary to the given sect.
Temporarily fix import path.
Load plugin modules. :param modnames: list of modules to load :type modnames:
Load configuration from dynamic plugins.
Set the value of an option.
Register a checker.
Enables and disables Python 3 porting mode.
Return a list of all checkers.
Returns a sorted list of all checker names.
Prepares a list of checkers to run.
Expand a list of modules.
Set the name of the current module.
Check if the ast_node is a pure python module.
Report the evaluation of the results.
Handles the help message.
Callback for full documentation.
List messages in the message store.
List the groups.
Normalizes the given text into a single line.
Get the module and frameid of a node.
Safely decode a line using the specified encoding.
Check if the given base name is in the blacklist.
Register all plugins in the given directory.
Return the comment of a string.
Format an option value.
Write a section to a file.
Format options in an INI file.
Insert a child at the given index.
Append a child node to this node.
Return a list of the parents of this node.
Format the output of a layout.
Computes the content of a table.
Computes the content of the given layout.
Collect all the lines of a module in the message store.
Handle an ignored message.
Register a report with the given checker.
Add a set of keyword arguments to the stats dictionary.
Get the name of the setter property.
Get the value of a setter property.
Return True if the return_node is a return value, False otherwise.
Return a list of possible exception types.
Process a module.
Process a module and check its encoding.
Process a list of tokens.
Check if the given import is from a future import.
Return whether the given statement is in a for or or else branch.
Return the method that is overridden by the given name.
Get the extra info for the given infered module.
Return True if the given node is assigned locally.
Mark a node as consumed.
Check if a node has a homonym in an upper function scope.
Check if the given node is a valid AstroID object.
Check the metaclasses of the given node.
Get a list of packages in a directory.
Run the install tool.
Add a table of similarities to the given sect.
Run a similar program.
Append a lineset to the list of linesets.
Computes the list of sims for each ensemble.
Displays a list of simulations.
Find common lines between two line sets.
Iterate over all sims that are common to each lineset.
Iterate over the lines that have been stripped to start_at.
Return a dictionary mapping line numbers to line numbers.
Check if the attr_name of node_a and node_b are equal.
Return True if the original and overridden parameters are different.
Try to infer the result of a call.
Add a node to the scope.
Check if class definition is valid.
Check for inconsistent MROs.
Check that all the bases of the given node are valid astroids.
Leave a function definition.
Check if the given node is in slots.
Check if the name of the first attribute is a function.
Check if the given node is mandatory method parameter.
Check if the body is an Astroid.Throw.
Check for bad exception context.
Displays the reports in the specified layout.
Return True if the node is a typing namedtuple.
Check if the given node is an enum class.
Check if the given node is a data class.
Add an informative message for classdef nodes.
Leave class definition.
Declare if statement.
Checks if the condition evaluates to a boolean expression.
Check the docstring for spelling.
Format the template with the given arguments.
Check if the given node is an actual elif.
Check if the given node is simplifiable.
Check if the stop iteration is within a generator.
Check if exception inherits from stopiteration.
Check if the given node is a nested block.
Return a dict of all the types that are not instances of the same type.
Check that the node is an instance of the same type as the node.
Check if the given node is a AND or ternary operator.
Check if there are any explicit returns.
Check if graphviz is available.
Run the diadefs command.
Write packages diagram to file.
Write a diagram of classes to the printer.
Sets the printer for the given file name.
Set the printer for the graph file.
Returns True if this version is likely to be older than sys.version_info.
Format the help message.
Return the environment variables as a dict.
Traverses the graph to find cycles in the graph.
Generate the graph from the graph.
Format a section of a REST file.
Disable a message by ID.
Enable a message by ID.
Return the symbol of a message.
Check if a message is enabled for the given message description.
Add a message to the message store.
Get the indent length of a line.
Get a hint for the indentation of a bar.
Return the indent of the token at the given position.
Handle a line start.
Return a dictionary of valid indents.
Return the indentation for the hanging indent after a bracket.
Return a continuation inside a bracket.
Pushes a token onto the stack.
Add a new line to the parser.
Check if the token is a valid type annotation.
Check for equality of type annotations.
Check that the token is surrounded by spaces.
Check if the given node is a statement.
Check if the given line is a multi-line statement.
Check the indentation level of a string.
Check if the given node is in an iterating context.
Check if the given node is a conditional import.
Check if the given node is a builtin function.
Check if a subscript is inheriting from the standard ex.
Check if the node is an attribute.
Check if an exception is raised.
Try to find pylintrc file.
Validate that the value is of the correct type.
Register an option provider.
Set the value of a provider option.
Set the value of a global option.
Generate a configuration file.
Loads the config file.
Load command line configuration from command line arguments.
Add a help section to the command line.
Return the help text for the command.
Loads the default values for all options.
Get the name of an option.
Get the definition of an option.
Return a sorted list of option names and their values.
Check if a function is a method call.
Check if a node is a complex format string.
Visit the logging module.
Visit an import from node.
Visit the import node.
Check if format_string is a valid string.
Check if the given node is in a loop.
Get the break loop node.
Return True if the loop exits immediately.
Get the property classes and names from the config.
Determine the function name type of a function.
Takes a sect and a dictionary of stats and returns a report of the type.
Check if a call is a single argument position call.
Handle starred statements.
Check if the call is abstract.
Check if we're going to exit on loop.
Check if the given node is in a loop.
Opens the Linter connection.
Visitor for `Expr` AST node.
Check if the assert node is a fail.
Add a message for each key in a dictionary.
Check if node is not in finally.
Check if the given node is reversed.
Check if docstring is valid.
Check if the literal is a constant.
Create a sub-graph from a node.
Parse a sub-graph.
Visit a module and all its descendants.
Recursively walk the tree of the given AstroID.
Add a relationship between two objects.
Get a relationship from an object.
Return a list of all attributes of the given node.
Add an object to the diagram.
Return a list of class names.
Return a list of all classdefs.
Return the class with the given name.
Return a list of all Astroid Modules.
Return the module with the given name.
Return the module with the given name.
Add a dependency to a node.
Deletes the object from the cache.
Query the database.
Get a user by username and password.
Get an access token or refresh token.
Set a token in the database.
Add a grant to the client.
Get a client by ID and code.
Prepare a request to be sent to the server.
Initialize the Flask application.
Create an oauth remote app.
Redirect to the authorize URL.
Handle an OAuth1 response.
Handle an OAuth2 response.
Handle an authorized response.
Hashes the given token.
Create a new client with the given token.
Create an OAuth session for the given token.
Context manager for insecure transport.
Confirm an authorization request.
Returns the client secret for the given client key.
Get the secret for a request token.
Get an access token secret from the request.
Returns a list of realms for the given token.
Returns the redirect URI for the given token.
Get the RSA key for a client key.
Validate the client key.
Validate the request token.
Validate an access token.
Validate a timestamp and nonce.
Validate the redirect URI for the client.
Validate the realms for the given client key and token.
Validate a verifier against a client key.
Verify that the request token is valid.
Verify that the given token has the given realms.
Confirm an authorization request.
Authenticate the client with the request.
Authenticate the client with the given client id.
Get the original scopes for the given refresh token :param refresh_token: The refresh token :
Confirm that the given refresh token has the given scopes.
Get the default redirect URI for a client.
Get the default scopes for a client.
Invalidate the authorization code for a grant.
Save an authorization code to the request.
Saves a new bearer token.
Validate a bearer token.
Validate a client id.
Validate a grant code.
Check if the grant type is allowed.
Validate a refresh token.
Check if the response type is allowed.
Validate scopes. :param client_id: The client id :type client_id: str
Validate that the user is a valid user.
Revoke an access token.
Update qq API request data.
Convert a dictionary of keys to strings.
Change the IOU header.
Register to the remote application.
Create a remote app.
Extract parameters from the request.
Convert text to bytes.
Decode a base64-encoded string.
Create a response with the given headers and status code.
Return a list of cached clients.
Add a remote app to the registry.
Add a remote application.
Check that the certificate is not corrupted.
Confirms that the certificate has been successfully signed.
Check if the load_privatekey callback is valid.
Check if the load_privatekey callback is incorrect.
Check that the load_privatekey_callback is a valid type.
Check if the CRL has been revoked.
Check that all X509 revoked certificates have been revoked.
Create a new certificate request.
Create an X509 certificate.
Use a certificate chain file.
Set the certificate file for this SSLContext.
Set the certificate for this SSL context.
Add an X509 certificate to the certificate chain.
Use a private key file.
Use a private key.
Load a client ca certificate file.
Set the SSL verification depth.
Load a temporary DH from a file.
Set the list of ciphers to use.
Set the client CA list for this SSLContext.
Add a client ca certificate to the SSL context.
Set TLS extension use RTTP.
Set the select callback.
Set the list of all ALPN protos.
Set the SSL select callback.
Sets the OCSP callback.
Set the SSL context.
Get the name of the server.
Set the host name of the TLS extension.
Receive data from the socket.
Read data from the network.
Explicitly renegotiate the SSL certificate.
Shut down the connection.
Returns a list of all ciphers supported by this client.
Returns a list of client CAs.
Set the shutdown state of the connection.
Returns a random server.
Returns a random client.
Get the master key for this SSL session.
Export a keying material.
Returns a pyopenssl session.
Get the name of the current SSL cipher.
Get the number of bits in the current SSL cipher.
Get the TLS version of the current cipher.
Get the name of the protocol version.
Get the next received message from the server.
Set the list of protocols in the SSL connection.
Get the ALPN protocol negotiated by the server.
Convert a bio object to a string.
Set the ASN1 time.
Get the ASN1 timestamp as a string.
Returns the elliptic curve with the given name.
Dump a public key to a string.
Load a public key from a file.
Sign data using EVP key.
Verifies the signature of a certificate.
Dump a CRL to a string.
Returns the cryptography key for this key.
Check if this key is a public key.
Loads a set of elliptic curves from lib.
Get the curves of the elliptic curves.
Converts the curve to an EC key.
Return the DER encoded version of the certificate.
Returns a list of the components of this Name.
Returns the short name of the extension.
Get the data associated with this extension.
Return a cryptography.X509.CertificateSigningRequest object.
Set the public key of the certificate.
Get the public key of the certificate.
Get the Subject Name.
Add one or more extensions to the request.
Returns a list of x509 extension objects for this request.
Verifies that the given pkey is valid for this request.
Return a cryptography.X509.Certificate object.
Set the certificate version.
Return the public key of the certificate.
Set the public key of the certificate.
Signs an X.509 certificate.
Return a string representation of an X509 digest.
Set the serial number of the certificate.
Get the serial number of the certificate.
Set the gmtime to be not after the given amount.
Set the gmtime not before the given amount.
Returns True if the request has expired.
Get the issuer name.
Set the certificate issuer.
Get the name of the subject.
Set the certificate subject.
Add one or more extensions to the certificate.
Return an X509Extension object for the given index.
Add a certificate to the certificate store.
Add a CRL to the certificate store.
Set the time of the store.
Initialize the X.509 certificate store.
Create an exception from the current context.
Verifies that the certificate is valid.
Set the serial number of the certificate.
Get the serial number of the certificate.
Set the reason of the certificate.
Get the reason of the certificate.
Set the revoked date.
Return a cryptography representation of the certificate.
Returns a tuple of revoked certificates.
Return an X509 Name object for this certificate.
Sign a certificate with an X.509 digest.
Export a certificate to an X.509 certificate.
Returns the name of the type of the object.
Set the cacerts to use.
Sign the given key with the given digest.
Verify the signature of a SPki key.
Encode the SPK as a base64-encoded string.
Returns the public key of the SPki.
Set the public key of the SPki.
Create an exception from a queue of error messages.
Return the metadata for the service.
Iterate over all issues on the board.
Returns a list of annotations for the given card.
Get a list of board IDs.
Returns a list of lists for a board.
Get a list of cards.
Get a list of comments for a card.
Return the API URL for the given path.
Perform a GET request to the API.
Convert a link field to a dictionary.
Get a list of issues that match the query.
Return a list of pull requests for the given tag.
Aggregate all issues in the main section.
Return the value of a config option or default.
Return True if the issue is included.
Make a table from a list of grids.
Runs an oracle command and returns the result as a string.
Get an integer value from a bugwarrior configuration.
Pull issues from a running container.
Make a GET request to the given url.
Get a collection of values from the given url.
Parse a sprint string into a dictionary.
Get the credentials from the credentials store.
Corrects p-values according to fdr-correction.
Compute the z-score of a 2D array.
Adjusts the spines in the given axes.
Prepare the argument parser.
Adds a sub-command parser to the enrichr operation.
Select the p-values of a GSEA distribution.
Returns a pandas DataFrame containing the MARTs and their descriptions.
Get a list of datasets.
Get the attributes of a dataset.
Returns a Pandas DataFrame containing the filters for the given dataset.
Sets the number of CPU cores to use.
Load genesets from a GMT file.
Returns a list of all libraries in the database.
Download genesets from enrichr.
Create a heatmat from a dataframe.
Load the data from a Pandas DataFrame.
Run samplespermu on a dataframe.
Save resultson samples to a CSV file.
Parse the gene sets from the enrichr library.
Send a list of genes to the given URL.
Check if a list of genes has been returned.
Create a cube from a filter script.
Create an icosphere layer.
Cube Openhires plot. :param script: :param size: :param x_
Return a tuple of red green and blue values for the given color.
Check if a variable is a list.
Make a list of terms.
Write a filter script to the given xml file.
Mergeverts the given script into the given script.
Split the script into vert-on-nonmanifold-face.
Translates the given script to the given value.
Rotates the given script by the given angle.
Scales the given script by the given value.
Function to calculate cylindrical harmonic coefficients.
Convert a cylinder to a cylinder.
Convert a deformed curve to a curve.
Convert a VCF file to a LaTeX file.
Convert mesh to fc file.
Voronoi color selection.
Return a list of all the files in the given script.
Write the vert-quality xml file.
Visualize a cylindrical graph.
Draw a spherical verticogram.
Rename a filter script.
Change the layer number of a filter script.
Duplicate a filter script.
Delete a script lower than the current layer.
Starts a new script.
Adds a new layer to the layer stack.
Save the filters to a script file.
Writes the given script to the TRIANGLES file.
Measure the topology of a filter script.
Parse hausdorff log file.
Convert a number to a number of decimal places.
Cross product of two vectors.
Multiplies two vectors.
Depths the given script.
Sort a polyline.
Measure all features in a script.
Convert a file extension to lowercase.
Return the config for this upload set.
Return the URL for the given filename.
Return the path to a file.
Returns True if the given extension is allowed.
Resolve a conflict between two files.
Get the vprof version from a file.
Remove duplicates from a list of objects.
Get the number of objects in objs1 and objs2.
Format the number of objects in a dictionary.
Causes the debugger to trace memory usage.
Return a list of code events.
Return the number of objects that have been overwritten.
Compute the total memory footprint of the process.
Profiles the current package.
Profile the module.
Returns the profile function of the run object.
Run the benchmark.
Return a set of all the modules in the given package.
Run a function in separate processes.
Return the type of the run object.
Initializes the profile module.
Initializes the profile package.
Initializes the run object.
Replace sys.argv with sys.argv.
Samples from the given frame.
Insert a list of functions into the stack.
Summarize the number of samples in a node.
Pretty-print the given tree.
Return the call tree as a dictionary.
Profiles the object.
Profiles the module. :returns: dict :rtype: dict.
Return the profile function for this object.
Transforms profiling stats into a list of tuples.
Return the profile package.
Generate a profile module.
Returns a dictionary of the function to be used for profiling.
Show the guestbook page.
Add a new entry to the database.
Start the profiler.
Handle the root page.
Return the content and extension of the file.
HTTP GET request.
Post a profile to the server.
Send a response to the client.
Check if the given module path is a standard directory.
Record a line in the file.
Yield lines without standard library.
Add execution count to the heatmap.
Returns a list of code lines that should be skipped.
Generate a profile package.
Format a heatmap file.
Return a dict of the heatmaps in the profile module.
Calculates the heatmap and the execution time of the object.
Run all profiles in the specified configuration.
Run a profiling function.
Predict the probabilities of the input data.
Predict log probabilities for each sample.
Fit the model to a set of points.
Counts the number of words in the analyzed documents.
Sort the features in a vocabulary.
Limit features to the given vocabulary.
Fit the model to the given matrix.
Transform a vocabulant matrix.
Convert to a scikit scaler.
Fits the model on a Spark dataset.
Predict for each element of x.
Fits the model to the given matrix.
Fits the model to the given data.
Fits the model and transforms it.
Return the score of the last step in the pipeline.
Score an estimator with the given scorer.
Fit sparkk-means to data.
Predict the values of the model.
Predict the values of the input data using the SGDClassifier.
Check that the given Rdd is of the expected dtype.
Fit the SVD to the input data.
Apply a transformation to a Spark RDD.
Yield blocks of data from an iterator.
Yield blocks of dtypes from an iterator.
Create a block of data from an Rdd object.
Apply a function to each element of the DStream.
Return the shape of the RDD.
Convert the RDD to a NumPy array.
Return the bit permission of the file at position pos.
Return True if the file at the given path is a root write.
Check the configuration file.
Read configuration from file.
Run a command as a command.
Execute a command and return stdout and stderr.
Execute a command over a remote SSH connection.
Validates the configuration data.
Returns a copy of the default headers.
Return the URL for this assistant.
Return the URL for this task.
Return the text of a packet.
Print a discovery packet.
Discover all devices that are not in the mac.
Execute the command.
Send a confirmation message to the user.
Called when a device is pushed.
Executes the given device.
Scans for devices on the device stack.
Return the path to the ledgerrc file.
Compatibility test for testing.
Create a PrecalculatedTextMeasurer from a JSON file.
Generate a list of supported characters.
Generator that encodes characters with the given encodings.
Calculates the mapping of characters to their length.
Writes the statistics to a JSON file.
Convolves a 2D Gaussian image to a 2D Gaussian.
Returns the Gaussian kernel for the given width and height.
Convert an image to grayscale.
Command-line entry point for the ssim script.
Compute the SIM value of the target image.
Compute the ssim of two images.
Destroys the container.
Set the code version.
Get the status of the Raft instance.
Prints the current status of the service.
Return the node with the given connection.
Attempt to bind to the server if necessary.
Called when a new incoming connection is received.
Callback for utility callback.
Returns True if the given node should be connected.
Attempt to connect to a single node if possible.
Called when outgoing connection is established.
Called when an outgoing message is received.
Called when a connection has been disconnected.
Add a node to the network.
Drop a node from the connection pool.
Send a message to a node.
Adds an item to the end of the list.
Push an item onto the heap.
Return the first element of the heap.
Try to acquire a lock.
Returns True if the lock is acquired.
Release a lock.
Set a list of hosts to use :param hosts: list of hosts :param use_ssl
Create indexes. :param names: names to create :type names: list :param settings:
Migrate the aggregate indexes to the latest version.
Remove metadata from a report.
Saves aggregate reports to kafka.
Extracts the XML from the input file.
Parse an aggregate report file.
Takes a list of parsed Bayesian reports and converts them to a CSV.
Parse a report file.
Returns a list of the capabilities of the IMAP server.
Saves a list of forensic reports to Splunk.
Decode base64-encoded data.
Get the reverse name of an IP address.
Convert a human-readable timestamp to a datetime.
Get information about an IP address.
Convert an email message to an Outlook message.
Convert a string to a list.
Parse a single file.
Drain the connection.
Publish a message to the publisher.
Publish a request to the publisher.
Publish a message.
Subscribe to a subject asynchronously.
Unsubscribe from a subscriber.
Send a ping to the server.
Select the next server from the pool.
Process an error message.
Process an operation error.
Return the command to connect to the server.
Process pong messages.
Process a single message.
Process the server info.
Flushes the pending data to the io writer.
Read until the connection is closed or reconnected.
Loads features from a numpy array.
Load features from a list of images.
Calculate Pearson correlation between two images.
Computes the dot product of the feature images.
Select features based on a feature selection.
Get the order of features in a dataset.
Classify a dataset using a trained classifier.
Fits the model with the given parameters.
Set the class weight of the model.
Fits cross_val to x and y using sklearn.
Fits the classifier to the given dataset.
Get a list of random voxels.
Returns a list of top words for each topic in the model.
Calculate the Pearson correlation coefficient for a set of points.
Compute the FDR of a P matrix Parameters ---------- p : numpy array Parameters ---------- q : float
Load activations from a CSV file.
Create an image table.
Returns a list of the names of all the features.
Returns a dictionary of feature counts.
Loads a dataset from a pickle file.
Saves the feature table to a pickle file.
Returns a list of ordered names of the features.
Given a string or list of strings, return a list of features.
Get a list of ids by expression.
Convert SDF to CSR.
Transform a matrix using the inverse of the matrix.
Convert xyz coordinates to mat.
Apply the given transformation to the given foci.
Get the image mask.
Load images from a list of files.
Save an image to a file.
Set the logging level.
Parse an address. :param address: Address to parse :type address: str :param language
Convert a dict to an object.
Get the price of a ticker.
Get a list of all the new records for a particular file.
Make a request to the REST API.
Get bearer token from spotify.
Make a request to the API.
Fetches album tracks for a given spotify ID.
Get a single artist.
Get artist albums for a given spotify ID.
Get a list of artist top tracks for a given country.
Get a list of artists that are related to an artist.
Get artists from a list of spotify IDs.
Fetches information about a category.
Fetches a list of all playlists for a given category.
Get a list of categories.
Get a list of featured playlists.
Get a list of new releases.
Get a list of following artists or users.
Get a list of albums for this artist.
Returns a list of all albums for this artist.
Get the total number of albums for this artist.
Get the currently playing track.
Get the current player.
Return a list of available devices.
Returns a list of recently played tracks.
Replace one or more tracks in a playlist.
Create a new playlist.
Get a list of playlists.
Returns a list of tracks for this album.
Get all tracks for this album.
Return an OAuth2 URL for the given redirect URI.
Get the album with the given id.
Get an artist by ID.
Get a track by ID.
Get a user by ID.
Returns a list of albums with the given ids.
Returns a list of artists with the given ids.
Convert a string to an ID.
Create an instance of this class from a client.
Generate a URL to redirect to a client.
Return a dictionary of attributes to be sent to the client.
Return a string representation of the parameters of the model.
Build a list of playlist tracks.
Returns a list of all tracks for this playlist.
Transfer a device to another device.
Create a new instance of the class from the given href.
Get the domain and IP address of the domain.
Convert data to a short month.
Update the code URLs in the current directory.
Check if current version is greater than current version.
Return True if this is a dev version.
Returns True if the current version of the yaml file has a deprecation warning.
Backups the log file.
Restores the backup file.
Check if the given line is likely to be ignored.
Parses the options and returns a list of domains.
Extracts the base from the given element.
Return a list of decoded data.
Return the status code of the request.
Get the access code from the API.
Check syntax of a domain.
Check if a domain is a subdomain.
Check if an IPv4 address is valid.
Check if an IP address is a valid IP range.
Check syntax of a URL.
Load the configuration from the current directory.
Make sure we don't have to wait for a new time.
Download entry management URL.
Downloads the entry management URL.
Print the header of the pyfunceble.
This function is called by pyfunceble when a file is detected.
Print the domain name and status of the file.
Check the status of a file.
Prints the logo to stdout.
Format a domain name from an extracted domain name.
Extract domain from file.
Return a list of domains in the file.
Return a list of URLs for the file.
Get the expiration date.
Generate the status file if it doesn't exist.
Get the structure from the API.
Create a directory if it doesn't exist.
Deletes the uneeded directory if it exists.
Set the path to the configuration file.
Downloads and installs the production config.
Download and install the iana configuration.
Download and install PSL configuration.
Download and install a directory structure file.
Merge values from upstream configuration into new configuration.
Load the configuration from the environment.
Split a version string into digits and non-digits.
Check if local and upstream versions are in the same order as upstream.
Returns True if the file or directory is cloned.
Handle the non-existant index.
Returns the directory of the analytic host file.
Returns a unified version of the output file.
Prints the status file.
Return True if the file is not present.
Add extensions to the public_suffix_db.
Load the file from disk.
Return a regular expression for the given element.
Load the database from the IANA database.
Return the reference to the IANA server with the given extension.
Return a generator of all extensions in the iana repository.
Update the IANA database.
Return a list of urls that can be queried from the API.
Retrieve the data from the file.
Backup the file if it exists.
Add a list of elements to the list.
Remove the bare from the configuration.
Return a list of the mined elements.
Process the pipeline.
Get the content of a file.
Write the content to a JSON file.
Writes the current time of the record to the output.
Writes the expiration date to the database.
If the referer is not found, write it to the output directory.
Write the current header to the output file.
Construct a header from a list of data.
Return a dictionary of the given size.
Return a list of sizes from a header.
Colorize data according to template.
Return a JSON formatted version of the output.
Return the data to print.
Calculate the time difference in seconds between start and end.
Formats the execution time as a string.
Returns a list of files to delete.
Returns a list of databases to delete.
Delete all databases in the current directory.
Return the hash of the file.
Return the hash of the data.
Get the hash of the file or data.
Execute the command and return the output.
Remove a key from the main dictionnary.
Rename a key in the main dictionnary.
Merges the main dictionnary into one.
Write the main dictionary to a JSON file.
Write the main dictionary to a YAML file.
Recursively fix the path of the file.
Write data to file.
Reads the FASTA file.
Return a sorted list of the main items.
Merges the main list into the main list.
Returns a list of the elements that are not matched.
Returns a list of strings that match the pattern.
Return a copy of the data that matches the regular expression.
Count the number of modules in the module.
Calculates the percentages for the calculation.
Check if the given URL is valid.
Check if the domain is valid.
Check if the domain is a subdomain of the element.
Returns a syntax status object.
Reformat the historical formating error.
Retrieve the history from the inactive database.
Backup the currently active database.
Return the most recent timestamp in seconds.
Return the content of the module.
Return True if the object is present in the configuration.
Reads the whois database and populates the dictionary.
Backup the whois database.
Returns True if the user is in the database.
Check if the database is older than the current time.
Get the expiration date of the query.
Manage permissions for travis.
Runs the travis command.
Lookup the namespace of the socket.
Send a WHOIS server to the server.
Get the status of the current URL.
Return the referer for this domain extension.
Get the current object.
Return a list of all standard python paths.
Return a generator of all standard package names.
Yield lines from unused import messages.
Given a list of messages, return a tuple of line number and module name.
Yield line numbers for star_import_used messages.
Yields a tuple of line number, line number, undefined name and module name.
Yield lines from unused variable messages.
Yield duplicate key line numbers.
Check if the source is a valid python source.
Extract the package name from a line of text.
Return True if the given line is a multiline import.
Return True if the given line is a multiline statement.
Remove unused_module from imported imports.
Break up imports.
Given a list of messages, return a dictionary of messages.
Remove undefined names from marked star imports.
Remove duplicate keys from a line.
Check if a dictionary entry has a key.
Check if value is a literal or name.
Yield lines that are not pass in line numbers.
Filter lines that are not used in useless pass.
Get the indentation level of the given line.
Get the line ending.
Remove unnecessary imports from the source code.
Split a comma-separated string into a set of strings.
Check if a file is a Python file.
Return True if filename is a file in the exclude list.
Reads the obtain lease response payload.
Writes the contents of the obtain lease response to the given stream.
Write the cancel request payload to the specified output stream.
Reads the cancel response from the given input stream.
Create a new name. :param name_value: Name value :param name_type:
Reads from the given input stream.
Writes the metadata to the given stream.
Read application specific information from the given istream.
Writes the application specific information to the given stream.
Create an application specific information object.
Reads the derivation parameters from the input stream.
Writes the parameters to a byte array stream.
Reads the request payload from the input stream.
Writes the request payload to the given stream.
Reads the response payload from the given input stream.
Writes the metadata to the specified output stream.
Writes the metadata to a byte array stream.
Reads the signature verify response payload.
Build an error response.
Process a template attribute.
Get attributes from a managed object.
Sets the attributes on a managed object.
Set an attribute on a managed object.
Check if an operation is allowed for a given policy.
Writes the encrypted request payload to the specified output stream.
Create an object of the given type.
Sets the value of the given setting.
Load settings from a file.
Process a bind parameter.
Return a list of cryptographic usage masks.
Reads a long integer from the given input stream.
Writes the KMIP header to the given stream.
Validate that the value is valid.
Reads a big integer from the given byte stream.
Writes this big integer to the given stream.
Validate that the value is a valid integer.
Validate that the enumeration is correctly representable.
Reads a KMIP value from the input stream.
Writes the KMIP value to the given stream.
Write the KMIP header to the given stream.
Validate that the value is a boolean.
Reads an interval from the given istream.
Validate that the interval is valid.
Validate that the key is valid.
Validate that the value is a valid cryptographic usage mask.
Validate that the value is a valid data type.
Convert attribute name to tag.
Convert an attribute tag to a name.
Get bit mask from enumerations.
Get enumerations from bit mask.
Check if an enumeration is a bit mask.
Writes the given buffer to the given output buffer.
Reads the private and public key unique identifier from the input buffer.
Write the private key and public key fields to the output buffer.
Reads the attribute list request payload.
Writes the attribute list request payload to the given buffer.
Writes the attribute list response to the given buffer.
Return a list of all json files in a directory.
Start the monitoring loop.
Get a certificate from a connection.
Get the extended key usage from a certificate.
Returns a list of common names for a certificate.
Get client identity from certificate.
Read from the input buffer.
Writes the request payload to the given buffer.
Reads from the input buffer.
Writes the message to the output buffer.
Convert a pobjects object to a pobjects object.
Reads the encrypted response payload from the input stream.
Writes the given buffer to the output buffer.
Returns True if the given attribute is supported.
Returns True if the given attribute is deprecated.
Returns True if the given attribute applies to the given object type.
Returns True if the given attribute is a multi-valued attribute.
Reads check response payload from input stream.
Writes the metadata to the given stream.
Reads the attribute reference from the input buffer.
Writes the attribute reference to the given buffer.
Read attributes from input stream.
Write the attributes to a byte array stream.
Reads the nonce from the input stream.
Writes the nonce to the given stream.
Reads the username password credential from the input stream.
Writes the credentials to the given stream.
Writes the device credentials to a byte array stream.
Read credentials from input stream.
Writes the credential to the given stream.
Reads the macsignaturekey information from the input stream.
Writes the macsignature key information to the given stream.
Writes the data to a byte array stream.
Reads the keywrapping specification from a stream.
Writes the metadata to the given stream.
Reads extension information from the given stream.
Writes the extension information to the given stream.
Reads a revocation reason from the given stream.
Writes the revocation reason to the given stream.
Validate that the revocation code and revocation message are valid.
Reads from the input buffer.
Writes the metadata to the given buffer.
Writes the given buffer to the given output buffer.
Reads profile information from the input buffer.
Write the metadata to the output buffer.
Writes the given buffer to the output buffer.
Shut down the socket and policy monitor.
Writes the given buffer to the output buffer.
Reads the locate response from the input buffer.
Writes the locate response to the given buffer.
Create RSA private key from bytes.
Reads the signature data from the input stream.
Writes the signature data to the given stream.
Reads the usage information from the input stream.
Converts a protocol version to a KipVersion enum.
Read the protocol version from the input stream.
Write the protocol version to a byte array stream.
Read credentials from input stream.
Writes the credentials to the given stream.
Read from the input stream.
Reads the certificate from the given byte stream.
Writes the certificate to the given stream.
Reads the archive response from the given input stream.
Write the metadata to the output stream.
Run the handshake.
Reads a rekey response from the given stream.
Returns True if the conformance clause and authentication suite are supported.
Get a list of attributes.
Get a list of attributes.
Send a query to the server and return the results.
Open the connection to the client.
Closes the connection to the server.
Registers a managed object.
Get attributes of a KMIP.
Activate a KMIP device.
Builds a cryptographic parameters object from a dictionary.
Builds an encryption key information object from a value.
Builds a mac-signature-key-information object from a value.
Builds a KeyWrappingSpecification object from a dictionary.
Builds the list of common attributes.
Builds a list of attribute objects for the given name.
Reads the query functions from the input buffer.
Write the query request to the output buffer.
Reads attributes from the input buffer.
Write the attributes to the output buffer.
Get a single entrypoint for a single entrypoint.
Get a dictionary of all the group names in the given path.
Get all distributions for a given group.
Loads the object from the module and returns it.
Create an entry point from an entry point string.
Generate a controller file.
Rewrite and copy a file to a new location.
Check if the URL is valid.
Encode an object into a URL safe string.
Decode an object from a URL safe string.
Return the absolute URL for the given endpoint.
Add a user to the session.
Get the currently logged in user.
Create the Flask application.
Write a dataframe to a CSV file.
Read a Pandas DataFrame from a CSV file.
Serialize the given dataframe to the given writer.
Deserializes a dataframe from the given reader.
Return the URL for the contents of the file.
Opens the intermediate dataset contents.
Reads the intermediate dataset contents as binary.
Reads the intermediate dataset contents as text.
Reads the data from the stream and converts it to a dataframe.
Returns the intermediate dataset for the given node and port.
Get all experiments in a workspace.
Get all datasets in a workspace.
Get a specific dataset in a workspace.
Find the names of all globals in the code.
Return a copy of the pen.
Given a color string, return the r, g, b, a color tuple.
Draws the bounding box.
Return the cubic Benstein extension for a cubic Benstein equation.
Cubic Rubinstein equation.
Builds a list of choices from the tree.
Initialize the cache.
Empty the cache.
Get an entry from the cache.
Update an entry's value in the cache.
Set an entry in the cache.
Initializes the view.
Resolves an alias to a tree alias.
Check if the current app is an admin.
Calculate the depth of an item in a tree.
Get the current item from the tree.
Returns the URL for the given sitetree item.
Initializes the site tree.
Get the attribute of the current page.
Get the level of the item that is ancestors of the current item.
Check if the user is allowed to access this item.
Return a list of items from a site tree.
Renders all children of parent_item.
Get the children of the given item.
Update tree item has children.
Filter a list of items.
Returns the parent item of the given tree item.
Makes sure that the base item is in the current branch.
Resolve a variable name.
Return a SiteTree node for the given token.
Return the children of a site tree.
Breadcrumbs for a site tree.
Renders the given tree items.
Return an instance of this template for the given tag.
Returns the model url name for the given page.
Reregisters the tree admin.
Handler for redirects.
Redirects the request to the given response.
Redirects the user to add an item to the treeitem.
Redirect to the change page.
Overrides the default form to add known URLs.
Get a tree from the database.
Moves an item from one tree to another.
Saves the model to the tree.
Overrides the default get_urls method to add and delete items.
Dumps the model tree to the response.
Imports the sitetree module for the given app.
Get the model class for the given settings entry.
Create a new Config object from a mapping.
Load a module from a Python file.
Load a TOML file from a TOML file.
Create an instance from an object.
Create HTTP headers for a new span.
Get the current context for this span.
Start the span.
Stops the transport.
Updates the logging context with the given annotations.
Add a SA binary annotation to the logging context.
Overrides the name of the span.
Create a new endpoint with a new service name.
Build a V1 span.
Encodes a list of spans into a string.
Create a protobuf span.
Convert a hex string to a byte string.
Returns the span of the given kind.
Convert a zipkin endpoint to a zipkin endpoint.
Convert annotations to zipkin annotations.
Create an annotation object.
Create a binary annotation.
Create a zipkin endpoint.
Copy an endpoint to a new service name.
Build a list of annotation objects.
Builds a list of binary annotations.
Create a new span.
Convert a thrift span to bytes.
Encode a list of binary thrift objects into a byte array.
Detect the encoding of a span message.
Convert a list of spans into a list of tuples.
Push attributes to zipkin.
Encode a thrift span into a byte string.
Create a JSON endpoint dict.
Encodes a span as a zipkin span.
Decode a list of spans into a list of zipkin spans.
Convert a thrift endpoint to an Endpoint object.
Decode thrift annotations into a dictionary.
Convert thrift binary annotations to tags, local_endpoint, remote_endpoint.
Decodes a thrift span.
Convert a trace id to a string.
Convert an unsigned long to lower hex.
Write a long value to the buffer.
Custom date fixup pre processor.
Set the transaction code of a mbank tag.
Set the IH ID for the given tag.
Set the TN number of transactions for the given tag.
Join lines of a string.
Return JSON or text from response.
Log a warning if the given duration is too long.
Get information about a specific bot.
Get a list of bots.
Read the next term from the packet.
Write a message to the stream.
Decompress a string and decode it.
Encode a term into a string.
Add a source address to the multicast socket.
Send pending messages to the server.
Sets the callback function that will be called when the client is listening.
Stops the server.
Clears all local services.
Search for remote services.
Create a SOAP message.
Discover the logging level for the given scope.
Returns the item manager for the layer.
Returns a list of all child relations of a model.
Returns a list of all child M2M relations.
Save the clusterable model to the database.
Validate the uniqueness of the form.
Returns True if any of the form has changed.
Return a new address with a valid checksum.
Generate an address's checksum.
Prompts the user to enter a seed.
Get a key by index and number of iterations.
Returns the key for the given address.
Create a key iterator.
Create a Sponge from a seed.
Evolve a set of trits into the state.
Squeeze a list of trits into a single state.
Transforms the current state to the new state.
Add two triangles together.
Convert an integer into a list of triangular triangles.
Add two triangles.
Perform full triangulation on two triangles.
Output a seed string.
Find all transactions in a bundle.
Use this method to promote a transaction.
Resolve a URI to a baseadapter.
Send a request to the server.
Log a message to the logger.
Send an HTTP request to the given url and payload.
Interpret the response.
Add a digest to the wallet.
Return the multisig address.
Create an iterator that yields addresses from the seed and security level.
Create an address from a digest.
Generate an address from a key iterator.
Find all transactions in the database.
Iterate over all addresses used in a transaction.
Given a list of transaction hashes, return a list of bundles.
Check if the codec encoding is correct.
Return the codec information.
Encodes a bytearray into a binary_type.
Decodes a single byte string into a byte array.
Find multiple addresses in a single transaction.
Add a route to the command.
Construct a TransactionMessage from a tryte string.
Return a JSON compatible representation of this message.
Returns a tuple of the signature validation trytes.
Mark all transactions as confirmed.
Return a list of messages from all transactions in the group.
Return a list of transactions grouped by address.
Discover all commands for a given package.
Executes the given request.
Apply a filter to a value.
Returns the URL for the job with the given id.
Returns a list of all errors that have been raised by the validator.
Returns True if the current state of the validator is valid.
Create a validator that validates the bundle.
Returns a list of bundle signatures.
Return the group's signature error.
Traverse the bundle of a transaction.
Start the interactive Python interpreter.
Generate a random seed.
Get the MD5 digest of the key.
Sign the input transaction.
Print a pretty representation of the object.
Given a list of trits, calculate the k-bit Hilbert curve.
Add the context to the exception.
Generate a security level.
Increment the legacy tag.
Return the tag of the transaction.
Add a transaction to the message.
Finalize the transaction.
Sign the inputs at the given key.
Create transaction inputs.
Convert a value to a standard unit.
Decompress G1 compressed data.
Inverse of prime_field_inv.
Create an instance from a JSON file.
Split a description into a list of strings.
Return a list of all categories.
Create a random colour.
Create a builtin timescale from a string.
Create a QuantFigure from an image.
Return a CSV representation of the table.
Returns the maximum width of all rows in the list.
Return the component that corresponds to the given component.
Plots the data in the list.
Decorator to mark component as rock.
Process a single row of text.
Parse Canstrat header.
Returns a sorted list of all unique Variant objects.
Construct a list of intervals from a list of tops.
Remove null values from longitudinal data.
Create an Intervals object from a petrel file.
Create an Interval object from a CANSTRAT file.
Return a copy of this striplog.
Write the list to a CSV file.
Return a LaTeX section as a LaTeX file.
Finds all occurrences that overlap with the given index.
Find all the gaps in the sequence.
Return a copy of this strip.
Return an anneal of this strip.
Fill the component with the gaps.
Return a copy of this striplog with the union of the contents of another StripLog.
Return the intersection of this striplog with another StripLog.
Merge overlapping segments.
Inverts the log and returns it.
Crop the list to the given extent.
Takes a list of tests and returns a dict of the quality of the tests.
Overrides get_field to handle key and index errors.
Get a list of jobs.
Parses the given HCL into a dictionary.
Update an existing token.
Get information about your account.
Fail a deployment. :param id: deployment id :type id: str :param id:
Pauses a deployment.
Drain a node.
Drain a node with the given spec.
Returns the list of eligible nodes for the given node.
List all files in a project.
Stream a file or directory.
Get a file by id or path.
Join one or more addresses.
Updates a list of servers.
Force removal of a node.
Get a list of nodes.
Get a list of all evaluations.
Get a list of namespaces.
Register a job. :param id: Job id :type id: str :param job:
Submit a plan for a job.
Dispatch a job. :param id: job id :param payload: job payload :param meta
Revert a job.
Revert a job to a stable state.
Deregister a job.
Get the current configuration. :param stale: Whether or not the configuration is stale :type stale
Delete a peer from the cluster.
Get a list of all deployments.
Get a random mutator.
Get a Mutator object.
Get a random string for a string attack.
Safely escape characters in a string.
Create a custom html file.
Run fuzzing on the server.
Spawn a subprocess.
Get the output of the process.
Finish the read process.
Closes the process.
Starts the pjf worker.
Execute a command on the remote host.
Return a random string.
Build a string representation of the fuzzer.
Return a string representation of the query.
Build a random value.
Build the opt-gram.
Build a reference from the fuzzer.
Build a star from scratch.
Shut down the pjf server.
Spawns a process to monitor and waits for it to finish.
Start the monitor process.
Generate a random float between two floats.
fuzzed version of pjfbase.
Returns a list of fuzzed elements.
Signal handler for SIGTERM.
Quit the command.
Pauses the current process.
Resume a paused or paused command.
Stops the cli command.
Called when the cli command is restarted.
Returns a list of skype events.
Set the mood of the user.
Set the avatar of the user.
Get meta data for a given url.
Fetches a single contact from skype.
Retrieve a single user from skype.
Returns a list of all bots.
Get the bot with the given id.
Returns a list of all users matching the query.
Returns a list of SkyPERequest objects.
Create an instance from raw data.
Merge the contents of another object into this one.
Merges the given object into the cache.
Read the token from the token file.
Write the token to the token file.
Verify that the token is valid.
Refresh the skype token.
Get the userid of the user.
Get the registration token.
Synchronizes the endpoints with the server.
Check if a user is a valid msacc user.
Sends a token and returns the token.
Set the configuration for this message.
Ping this message.
Get a list of recent chats.
Create a new chat with the given id.
Create a new member in the chat.
Given a URL, return the ID of the user.
Given a chat url, return the id of the chat.
Convert text to unicode.
Detect the format of the given text.
Parse text and return metadata and content.
Return a copy of the metadata as a dict.
Load YAML file from file system.
Exports the given metadata to a YAML string.
Exports the given metadata as JSON.
Return a full-match object for this pattern.
Return a list of all items in the string.
Returns a list of sublists that match the given pattern.
Convert the current pattern to a new start string.
Return a list of argument objects.
Return a list of wikilists matching the given pattern.
Convert a list of strings into a dict of strings.
Return a string representation of a trie.
Checks the validity of an index.
Insert a string at the specified position in the list.
Atomically partition a character in the shadow.
Returns a list of spans of the given type.
Shrink an update from a range.
Insert or update a span.
Return the number of nesting levels.
Return the shadow string.
Returns a byte array containing the shadow of the external link.
Return a mapping of type to spans.
Deprecated. Please use pformat instead.
Returns a list of all parameter objects.
Returns a list of parser functions.
Return a list of templates.
Return a list of wikilinks.
Return a list of comments.
Returns a list of external links.
Return a list of tables.
Return a generator of spans of the given type.
Return the list of ancestors of this parser.
Return the parent of the given type.
Return the mode of a list.
Given a name and a list of arguments, return the first matching argument.
Remove the first argument name from the list of arguments.
Returns the first argument with the given name.
Returns True if the function has the given arguments.
Remove an argument from the list of arguments.
Convert a CRS code to a string.
Searches for an element of the specified type in the specified ellips name.
Create a crs object from a URL.
Create a parse object from a geojson file.
Convert an EPSG code to a Projection object.
Convert an esri code to a Projection object.
Convert a SSR code to a Projection object.
Create a CRS object from an unknown text string.
Write the header and record data to an output file.
Read a VLAN record from the given data stream.
Parses geotiff keys from a VLR list.
Parse the geotiff file.
Returns the signedness of the dimension for the given extra type.
Get the ID for the extra dimension type.
Create a new point record from another point record.
Copy fields from another record to this record.
Append zeros to the end of the array if it is too small.
Return a set of all dimension names.
Create an array of zeros.
Create a point from a stream.
Create a point from a compressed buffer.
The x-axis of the dimension.
Dimension of the y-axis.
The z-axis.
Add an extra dimension to the data.
Write the VLRs to the given stream.
Write the file to disk.
Given a dictionary of point format IDs and a dictionary of dimensions, return a dictionary of the
Given a dictionary of point format dimensions, build a dictionary of numpy.dtypes.
Convert a numpy dtype to a point format.
Find the minimum file version for a point format.
Checks if a point format is compatible with the given version.
Extracts VLRs of the given type.
Read a VLR list from the given data stream.
Check if the files have the same point format ID.
Check if the files have the same dtype.
Raises a pylaserror if the file signature of the stream is not the same as the
Read the header from the stream.
Read a list of VLRs from the stream.
Reads the points from the stream.
Read the compressed points data from the stream.
Read internal waveform packet.
Reads an evlr list from the stream.
Warn if the stream is not at the expected position.
Create a lasdata object from a header.
Merge multiple points into one.
Writes to a file and returns the contents of the file.
Return a datetime.Date object representing the creation date.
Set the date of the object.
The minimum of the points in the mesh.
Set the minimum value of the bounding box.
Indices of the maximum values.
Set the maximal values of the bounding box.
Returns a numpy array of the scales.
Return array of x, y, z offsets.
Read the major and minor version from a file.
Convert a header from one byte to another.
Unpack an array into a numpy array.
Returns a list of the dimensions that are not in the output.
Returns a dictionary of all sub-dim names and sub-dims.
Return the number of bytes needed to store the extra data.
Returns True if this dataset has a waveform packet.
Main entry point for the demo script.
Calculate the checksum of a command.
Print hex representation of data.
Verify and return the checksum of the response.
Return a list of set bits.
Generate a query string.
Demonstrate a STL connection.
Connect to the server.
Start monitoring the server.
disarm a device.
Clear an alarm.
Set the output of a command.
Keep the connection alive.
Monitor the status of the alarm.
Close the connection.
Purge the database for this user.
Guess the type of the file at the given path.
Returns the file id for the given path.
Get a notebook from the database.
Create a notebook model from a DB record.
Get a directory.
Convert file records to notebook models.
Create a directory model from a directory record.
Create a file model from a file record.
Save a notebook to disk.
Save a file to disk.
Rename a file or directory.
Delete a file or directory.
Ensure a user exists in the database.
Remove a user from the database.
Create a directory in the database.
Return True if the given table is in the given directory.
Delete a directory from the database.
Check if a directory exists.
Return a list of files in a directory.
Return a list of directories in a directory.
Check if a file exists in the given api path.
Return a QuerySet of fields for a file.
Return the default fields for a file.
Get a single file from the database.
Get a file from the database.
Get the file id for a file.
Check if a file exists.
Rename a directory.
Save a file to the database.
Purge all remote checkpoints for a given user.
Reencrypt the content of a row.
Reencrypts the contents of a user.
Derive a singlefernet key from a password and user id.
Get the name of a column.
Convert a row to a dict with no content.
Convert a row to a dict with content.
Create a new notebook checkpoint.
Create a new file checkpoint.
Delete a checkpoint.
Get the content of a checkpoint.
List all remote checkpoints for a given path.
Rename all checkpoints in the remote database.
Delete all checkpoints for a given path.
Purge remote checkpoints.
Resolve a path to a list of mgr and path.
Apply a prefix to a model.
Called when a manager is changed.
Get a file or directory.
Normalizes the given api path.
Splits a path into a file name and the name of the file.
Encodes a notebook as base64.
Decode a base64-encoded nb file.
Decode a base64-encoded string from a base64-encoded string.
Decode a base64-encoded file.
Return a list of all directories in the given path.
Create a postgres user.
Split a list of models into directories and files.
Recursively walk a directory tree.
Iterate over all files in the directory.
Recursively walk the files and return a generator that yields the content of each file.
Reencrypts a single user.
Unencrypts all users in the database.
Unencrypts a single user.
Generate alembic ini file.
Upgrade the database to the given revision.
Sanitize the given block.
Queue an instance of the given type of embed.
Load instances of the given type from the embed.
Insert an instance into the block.
Loads the embedding data for each embed type.
Validates the given data.
View for dispatch admin.
Return a JSON representation of the object.
Hides all authenticated fields.
Exclude fields from the request.
Add version and preview id to the request.
Returns a queryset of all published articles.
Returns a queryset of all published items.
Overrides get_attribute to return a boolean value.
Validates that the given widget is valid.
Validate a zone object.
Checks if the given id is a valid UUID.
Returns the user's permissions.
Modify the permissions of a group.
Validate author data.
Save the zone to the database.
Returns a dictionary of all the fields and their values.
Prepares the data for serialization.
Renders the template with the given data.
Get the settings for this integration.
Returns a list of pages for the given query.
Get the settings for an integration.
Update the settings of an integration.
Handles the signup form.
Maps the contents of a tag to a string.
Display a zone widget.
Saves the featured image.
Save a subsection to the database.
Get the extension of the image.
Return the URL of the media.
Saves the image to disk.
Saves a thumbnail to the given image.
Returns the connection to the database.
Get a bandwidth limited stream.
Read an amount of bytes from the file.
Consume an amt from the scheduler.
Process the scheduled consumption of a token.
Calculates the projected rate of the AMPAL object.
Record the consumption rate of the AMPAL object.
Wait for a transfer to finish.
Returns a list of callbacks for the given type of transfer future.
Given a dictionary, return a copy of the original dictionary with only the keys in whitelisted_
Decrements the count.
Finalize the progress bar.
Check if a file is a special file.
Acquire a resource from the pool.
Release a semaphore lock.
Adjust the chunk size of the file.
Queue a file io task.
Returns the download output manager class for the given transfer.
Write data to file.
Request a list of write data for a given offset.
Return True if the file object is seekable.
Shut down the server.
Cancel all tracked transfers.
Wait for all tracked transfer coordinators to finish.
Wrap data into a file object.
Returns the upload_input_manager class for the given transfer_future.
Sets the exception for this transfer.
Set the result of the job.
Set the exception to be raised.
Return the result of the operation.
Cancel the task.
Submit a task to the transfer.
Add a done callback.
Add a function to the failure cleanup list.
Announce that the task has been completed.
Uploads a file to a bucket and key.
Download a file from a bucket.
Step the arguments of a function decorated by the decorator.
Refactors a step from one text to another.
Return the value of the step argument of the decorated function.
Refactors a step from one text to another.
Updates an existing membership. :param membershipid: The membership id :param ismoderator:
Deletes the specified membership.
Get a list of all catfacts.
Create a new webhook message.
Deletes the specified membership.
Validate that the base url is valid.
Return True if string is a valid web URL.
Open a local file and return a encodable file.
Check that o is of acceptable_types.
Takes a list of dictionaries and returns a dict with the keys and values.
Check the response code against the expected response code.
Convert a JSON object to a dictionary.
Convert a date string to a datetime object.
Create a new object.
Updates a room. :param roomid: The room id :type roomid: str :
Delete a room. :param roomid: The room id :type roomid: str :
Lists all objects in an organization.
Returns the datetime of the created webex team.
Get the access token from environment variables.
Update a webhook. :param str webhookid: ID of the webhook :param str name:
Delete a webhook.
Sets the value of wait_on_rate_limit.
Update the request headers.
Returns the absolute URL of the given URL.
Make a GET request to the API.
Get a list of pages from a given URL.
Make an HTTP PUT request.
Send an HTTP DELETE request to the specified URL.
Create a new Spotify object.
Deletes a message.
Get a specific person.
Deletes a person.
Fetches the object from the API.
Get a list of objects.
Creates a new object.
Update a team. :param teamid: The team id :type teamid: str :
Delete a team.
Serializes the given data into a tuple.
Returns the datetime of the last activity.
Post events service.
Get the public URL of the Ngrok tunnel.
Delete all webhooks with the given name.
Create a webhook for the given ngrok public URL.
Main entry point for ngrok.
Read telegrams from the serial port.
Read all telegrams from the given queue.
Create a DSMR protocol.
Create a DSMR reader.
Create a TCP DSM reader.
Called when data is received.
Called when the connection is lost.
Parse the telegram and call callback.
Parse the telegram data.
Get the version of a file.
Ensures that the given specs are valid Python versions.
Find all packages in the package hierarchy.
Run a command and return the result.
Get a list of data files for the given data spec.
Get package data.
Compile a glob pattern.
Recursively split a path into a list of paths.
Translate a glob pattern to a string.
Join a list of translated parts into a single string.
Translate a glob part into a regular expression.
Truncate the given table.
Write a postgres table to the database.
Write the indexes to the database.
Write the triggers to the given table.
Write the constraints to the given table.
Writes the contents of the given table to the given reader.
Write the table to the file.
Write the constraint table to the file.
Write the postgres triggers to the file.
Return the number of items in the queue.
Enqueue the given data to the queue.
Start a new task handler.
Build the extra predicate string.
Serialize a datetime object to an ISO8601 formatted string.
Reconnect to the MySQL server.
Execute a query and return the first row of the result.
Get a connection to the database.
Run the benchmark.
Connect to the pool.
Looks up a file descriptor by its number.
Returns the total number of connections andfairies.
Called when a connection failure occurs.
Create a simple expression.
Update a table. :param table_name: table name :type table_name: str
Establish a connection to the database.
Destroy all tables in the database.
Starts the step with the given name.
Stops a step.
Loads a list of steps from raw_steps.
Disconnect from the server.
Close the connection and close the socket.
Connect to the server.
Called when a WebSocket message is received.
Stop all timers.
Send ping to pong socket.
Check if pong is received.
Send a request to the server.
Unpauses the stream.
Handler for system events.
Handle error messages.
Handle data received from the client.
Resubscribe to a new channel.
Handle authentication data.
Handle configuration events.
Update the timestamps of a channel.
Reset the connection to its initial state.
Get candles for a pair.
Set bitfinex configuration.
Subscribe to a ticker symbol.
Unsubscribe from a ticker symbol.
Subscribe to an order book.
Unsubscribe from an order book.
Subscribe to raw order book.
Unsubscribe from raw order book.
Subscribe to a pair of trades.
Unsubscribe from a pair of trades.
Subscribe to CANdles.
Unsubscribe from a pair of CANdles.
Authenticate to the API.
Cancel an order. :param multi: If True, cancel the order :param order_identifier
Called when a command is received.
Called when a device command is received.
Called when a message is received.
Create a new device type.
Update a device.
Returns a list of all statuses that match the given status and connectedafter.
Returns a list of all the objects in the account.
Create a new DME.
Update a schema definition.
Disconnects from the server.
Called when a client connects to the broker.
Called when an unsupported message is received.
Process a device event.
Called when a device status is received.
Called when the client is listening and somebody sends a status message.
Get a single event for a specific device.
Get all events for a device.
Make an API call to the API.
Initiates a mgmt request.
Get the status of a mgmt request.
Closes the handle.
Returns the coordinate bounds of the interleaved region.
Loads a byte array from the page.
Check the return value of a function.
Loads the application and returns it.
Run the gunicorn server.
Convert the value to a native version of the image field.
Crops the image and saves it to disk.
Processes an image and saves it to disk.
Process an image and save it to disk.
Open and open the image form file.
Process a placeholder image.
Overrides pre_save to update the POI field.
Update the ppoi field of an instance.
Add default values to the form field.
Convert the value of an object to a string.
Auto-discover the size and filter registry.
Unregisters a registered Sizer.
Unregister a filter by attribute name.
Return the URL for this image.
Build the filters and sizers for this field.
Return the root folder of the image field.
Return the path to the root folder of the image field.
Returns the directory where the sized root folder is located.
Delete matching files from the storage.
Preprocess a GIF image.
Preprocess a JPEG image.
Retrieve an image from the storage.
Saves an image to disk.
Return the PPOI as a string.
Create a resized image.
Render the input with image preview.
Renders the context for a clearable input with image preview.
Return a copy of the base_attrs.
Returns the path to the resized image.
Return the full path to the image file, filtered by filename_key.
Validate a list of values for a vtkImageField sizekey.
Get the URL from an image key.
Returns the rendition key set for the given key.
Format an instruction as a string.
Format a function body.
Decode a bytecode into a sequence of instructions.
Decode a module into a list of sections.
Connect to the server.
Read the result from the server.
Parse the result of an AGI request.
Return a dictionary with the code and response.
Reset all instances to their default values.
Returns a list of all instances in this group.
Get the metadata for the given path.
Get the primary keys of a model.
Deserialize a value to a related model.
Get an existing instance from the query.
Overrides get_declared_fields to update the declared fields.
Load the model from the given data.
Split model kwargs into kwargs and attrs.
List available snapshots.
Restore a snapshot from the database.
Called when the epoch ends.
Performs textacy preprocessing.
Apply a function to data in parallel.
Processes the given text. Args: text (str): The text to process.
Process text in parallel.
Generate statistics about the document length.
Return a Pandas dataframe containing the word counts.
Map a parameter type to a list of types.
Parses a list of interfaces and returns a dictionary of parsed interface information.
Return the inverse of the symmetry operation.
Update a dedup item with a rollback.
Returns a copy of the FWDM object.
Return a copy of this node.
Returns True if this mapping is equal to the given other mapping.
Return an iterable of tuples where each tuple is the key and the value is the value of
Clears the FWDM and InVM.
Moves a node to the end of the graph.
Write text to a temporary file.
Merge command line arguments into config.
Load address books from config.abook.
Create a new contact from a list of address books.
Takes a list of vCards and returns a list of vCards.
Takes a list of vCards and a list of vCards and returns a list
List vCards. :param vcard_list: vCard list :param pars
Modify a vCard by parsing input from a standard input file.
Remove a sub-command from the selected vCard.
Create a sub-menu from a source file.
Merge multiple vCards into one.
Returns the action with the given alias.
Create a new contact object.
Create an AddressBook object from a file.
Create a contact object from a user input.
Create a contact object from an existing contact with a new user input.
Get the names part of a vCard.
Add a category to the vCard.
Parse a type value.
Convert a list to a string.
Convert a string to a datetime object.
Compare two UIDs.
Search for all contacts in the database.
Return a list of contact names that match the given query.
Search for contacts with the given query.
Search the database for the given query.
Returns a dictionary of the short uids for the given query.
Returns the short uid for the given uid.
Find vCard files.
Loads all vCards in the database. :param search_in_source_files
Returns the Abook with the given name.
Return a dictionary of available architectures.
Return a dict of available architectures.
Tries to guess the type of the given kwargs.
Return a new Query object with the same fields as this query.
Return the first document in the collection.
Delete all rows from the database.
Redis prefix lua function.
Estimate the LUA for a given index and prefix.
Count the number of documents in the database.
Return a connection to the database.
Return a list of full text strings.
Add an object to the database.
Return the value of a known or wknown key.
Write a LSA document to the LSA database.
Save the changes to the database.
Delete the object from the database.
Get a list of objects from the database.
Open a SEM file.
Send a result to the result queue.
Add a call item to the queue.
Ensures that the executor is running.
Starts the server.
Duplicate a file descriptor.
Wait for all pending work items to be completed.
Prepare process data.
Close all open file descriptors.
Terminate the process without psutil.
Recursively terminate a process.
Get the exit codes of all the processes that have been terminated.
Format a list of exit codes into a string.
Ensures that the process is running.
Return an event processor for the given frame and event.
Split a string into a list of arguments.
Get the stack from a function.
Run a set of hooks.
forget about the current thread.
Get the value of an argument without the error.
Processes all the commands in the system.
Add a command line to the queue.
Return the next token in a string.
Print an error message.
Reads a line from the terminal and returns it.
Closes the input and output streams.
Disassemble a message.
Count the number of frames in a frame.
Get the name of the call function in the frame.
Print the stack trace of a process object.
Looks up a subcmd by its prefix.
Add a short help message to a subcmd.
Add a subcmd callback.
Runs the given command with the given arguments.
Show a specific category.
Runs the mmisc command.
Finds the frame that is debugged.
Get an integer value from an argument.
Set the ONOFF flag on the debugger.
Set the value of an integer.
Run show_bool on the given object.
Run show_int on an object.
Run the show value command.
Check if the given line is a def statement.
Check if the given line is a class definition statement.
Raises an exception if the thread is not currently running.
Set the default background color.
Check if a color is a dark color.
Return the signature of a frame.
Return a list of all display names.
Return a list of display objects for the given frame.
Read a message from the socket.
Display a debug message.
Run a thread.
Print a simple array.
Look up the name of a signal by its number.
Given a signal name, return the corresponding signum.
Return the name of a canonic signature.
Set the signal replacement handler.
Check and adjust the sighandlers.
Prints an info signal.
Handle an action. Args: arg (str): The name of the action.
Called when a print signal is received.
Called when a handler is invoked.
Convert a file name to a module name.
Search for a file in a list of directories.
Given a Python script, return the file name of the script.
Return a list of the names of all Python files in the given caller.
Write a message to the output.
Runs the program.
Columnize a list of commands.
Close the connection.
Write a message to the socket.
Complete an identifier.
Add a dbgr command to the queue.
Add ignore frames to the ignore filter.
Return the path to a canonic file.
Return the filename of the main Python file.
Returns True if tracing is started.
Check if the given frame is a stop event.
Set the frame to the next frame.
Print the stack trace of a function.
Deletes a breakpoint from the list.
Deletes a breakpoint by its number.
Disable all breakpoints.
Disables a breakpoint by its number.
Deletes all breakpoints at the given line number.
Open an input file.
Read a line from the input stream.
Prompt the user for confirmation.
Convert a query to a future.
Restores the original login from the session.
Load a module and return whether it can be login as.
Iterate over all documents in a batch.
Transcode a file to a stream.
Normalize the data in the given stream.
Convert a date string to a datetime object.
Detect the encoding of a file.
Yield lines from a JSON file.
Transcode a file to UTF-8.
Open a CSV file with somehow-py2.
Read a CSV file into a list of dicts.
Entry point for the transcode command.
Saves a token to a JSON file.
Make a request to the server.
Delete a file or directory.
Return the root URL for the given URL.
Saves a token to a JSON file.
Perform a JSON request and return the response.
Make a POST request to the API.
Returns the JSON representation of the resource.
Make a GET request to the API.
Print the result as a CSV file.
Read parameters from a JSON file.
Simplify a docstring.
Create a project with a list of documents.
Create a project with a list of documents.
Upload a list of documents to a project.
Upload a file to the server.
Entry point for the upload script.
Create a luminoso token from a username and password.
Login to the server.
Posts a login page.
Fetch hourly daily daily daily and yearly data.
Prepares the view for rendering.
Initialize the view.
Renders the view and renders the view.
Called when a message is received from the server.
Update the menus for this page.
Return a list of tuples containing the URLs for the static file handlers.
Called when a message is received from the viewer.
Called when the DOM is modified.
Create the widget for this element.
Initializes the atom widget.
Remove the widget from the DOM.
Add a child widget to the widget.
Called when a child is removed.
Return a generator of all child widgets.
Set an attribute of the widget.
Update the proxy attribute.
Notify the modified event of a change.
Returns a list of declarations that match the given XPath query.
Set the source of the widget.
Clears the widget and adds it to the widget.
Remove all children from the block and refresh the items.
Remove the old block from the tree.
Recursively update the children of this node.
Reads the contents of the given path components into a string.
Print an error message and exit.
Print an error message and exit.
Returns the Product object with the given name.
Create a new session.
Reset the store.
Returns a list of all stores that match the search term.
Set the delivery system for the given postcode.
Get the menu for the given store.
Add an item to a basket.
Add Pizza to a Variant.
Add a side to a basket.
Remove an item from a basket.
Set the payment method to cash on delivery.
Process the payment.
Performs a GET request to the API.
Make a POST request to the API.
Make a call to the API.
Append an item to the menu.
Add an exit item to the end of the list.
Draws the menu.
Process user input.
Selects the selected item.
Parse the old menu and return a new menu.
Convert a string column to a datetime.
Convert datetime to string.
Apply a mathematical operation to a dataframe.
Cumulative sum of a column.
Remove all cache entries from the cachedir.
Add an offset to a date object.
Performs an optimization update on the training parameters and gradients.
Return a list of training parameters.
Perform an optimization on the parameters and gradients.
Samples the first non-glimpse sampled image.
Prepares the encoder, decoder, and target_input.
Computes the final cost of the training step.
Apply a function to the dataset.
Vectorizes the target set.
Report the number of training and validation sets.
Train the model on the network.
Sample from the model.
Computes the alignments between two states.
Compute the context vector.
Concatenate two neural variables along a given axis.
Pads the dataset to the given length.
Compute the RMSProp core for a set of parameters and gradients.
Prints the elapsed time to stdout.
Computes the cost of the computation.
Runs the training step.
Builds the variables used to run the loop.
Scans a step of the network.
Computes the angular momentum of a set of parameters and gradients. Parameters ---------- params : list
Trains a branch on the given branch.
Set the number of batches to skip.
Load parameters from a file.
Train the model on the specified epoch.
Run a single training step.
Runs a valid step on a given epoch.
Log a score map to the console.
Returns the current training and validation sets.
Apply a function to the Tensor.
Prints the current parameters to the logger.
Create a TensorFluent for the var function.
Create a list of variables from a dataset.
Create a shared array with the given value.
Stack a list of layers.
Stack a list of layers and push them onto the stack.
Compute the encoding of the input tensor.
Performs the decoding on the input data.
Create a 2D gaussian.
Register a new layer.
Monitor the output of each layer.
Returns a list of all parameters.
Sets up the input variables.
Compute and return the output of the computation.
Save all parameters to disk.
Load parameters from file.
Prints out information about the model.
Register a list of updates.
Register training updates.
Register one or more monitors.
Computes the L2 norm of a list of tensors.
Writes one element to a pickled file.
Loads the contents of a pickled file.
Load parameters from a file.
Decodes a state from a JSON string.
Parse credentials data.
Filter the request elements based on the request type.
Login to the provider.
Normalize a dictionary.
Convert a list of items to a dictionary.
Parse a JSON body and return a dict.
Resolve a provider class.
Create a cookie.
Saves the current session to the cookie.
Get the data for this cookie.
Returns a dictionary with the current data.
Generate a signature for the given parts.
Serialize the value to a serialized string.
Returns True if the token is valid.
Returns True if the given number of seconds has expired.
Return a string representation of the provider.
Return True if the given string is a binary string.
The content of the response.
Fetches the user's email address from Bitbucket.
Logs the user in.
Return the session key.
Set the value for a session key.
Generate a random CSRF token.
Log a message to the logger.
Check if the http status is in the given category.
Split url into base and params.
Set the CORS headers for a request.
Return a dict of the app keyword arguments for the app instance.
Return a string representation of an object.
Ensures that the given object is iterable.
Test if two numbers are close.
Deserialize an audio segment from a pickled string.
Create a pydub.AudioSegment from a file.
Create an audio segment from a numpy array.
Return a new instance of this audio segment with the given others.
Serializes the state to a pickle string.
Choose the offset front id from candidate offsets.
Given a list of offset_fronts, return the offset_front_id of the offset
Get the offset_front_id of the offset_front_id after the offset_front
Given a set of onset_fronts and offset_fronts, return the offset_
Given a list of onset_fronts and offset_fronts, return the indices of
Given a front and a index, return the index of the front row.
Returns a generator of all the front ids in the onset at a time.
Given a set of ontosets and a set of ontosets, return a list of tuples
Remove overlaps between segments.
Remove all fronts that are too small.
Merge adjacent segments into a single segment.
Separate masks into a list of masks.
Downsample a mask by one or the other.
This is a task that takes a list of masks and an array of stfts and
Apply a bandpass filter to the data.
Apply a low-pass filter to the data.
Convert a list of data into a TF input.
Expand and standardize a dataset.
Return True if the elements in a are not equal to the elements in b.
Loads the confusion matrix from the audit file.
Convert a list of rows into a FFT input matrix and the outcomes.
Update the index url from the environment variables.
Automatically detect requirements files.
Handles the given error code.
Get information about the stream.
Open an LSL stream.
Create a child element.
Return the next sibling of this node.
Return the previous sibling of this node.
Set the name of the LSL file.
Set the value of the LSL parameter.
Append a child element to this LSL element.
Prepend a child element to this element.
Append a copy of this element to the end of this element.
Prepend a copy of this element to the given element.
Remove a child element from this element.
Return a list of streams.
Pair a word.
Autocomplete a query.
Given a token, compute the n-grams of each edge.
Yield processors from a pipe.
itertools.map_unordered(func, iterable, chunksize).
Make a fuzzy word.
\x1b[1mNAME\x1b[1mNAME\x1
\x1b[1mNAME\x1b[1mNAME\x1
Extend results with extrapolating relation tokens.
\x1b[1mNAME\x1b[1mNAME\x1
\x1b[1mNAME\x1b[1mNAME\x1
\x1b[1mNAME\x1b[1mNAME\x1
\x1b[1mNAME\x1b[1mNAME\x1
Indexes a document by id.
\x1b[1mNAME\x1b[1mNAME\x1
Send a message to the server.
Map a list of requests to a list of requests.
Get bits from an array of data.
Reinterptet harray to bits.
Convert a slice value to a slice object.
Find all files in a directory that match a pattern.
Return True if all elements in iterable are in sigorval.
Create a static foreach statement.
Return the logarithm of x.
Check if a number is a power of 2.
Add a case to this endpoint.
Set the default values for the given statements.
Registers the given interface and unit interfaces to the given parent.
Called before the simulation is started.
Logs a change to the VCD.
Processes a Process object. :param proc: Process object :type proc: Process object :
Autoadd agents to a unit.
Get a reference to the DCK.
Return a set of distinct values from an iterable.
Group a collection by a function.
Flatten a list or tuple of iterables.
Merge nested if-from-else statements.
Remove all unconnected signals from a NetList.
Check if the given executable is a simple assignment.
Try to merge two HDL processes.
Reduce a list of processes by rank.
Called when a write request is received.
Given a list of statements, return the name of the process and its outputs.
Cut off drivers of a set of statements.
Synthesize the entity with the given name and interfaces.
Get the maximum ID of the longest assignment or waitstm in the given stm.
Get the maximum record ID for each statement in the process.
Write data to the simulation.
Set the direction of the master directory.
Loads the declaration of the interfaces and parameters.
Return a list of all signals for the interface.
Get the physical name of the port.
Return the bit length of the array.
Return the sensitivity corresponding to the given operation.
Convert a value into a value of the given type.
Interpret bits to hstruct.
Return the full word count between two numbers.
Group words by word index.
Packs the given data into a sequence of values.
Cleans the signal meta from all stms.
Given a list of statements and a list of statements, return a set of all statements that are
Discovers the casualsensitivity sequence.
Get the TLS context for this HWT.
Called when a Reduce operation is performed.
Called when a merge operation is performed.
Check if stmsa and stms are mercurial statements.
Merge multiple statements into one.
Merge two statements into a single list.
Try to reduce a list of statements.
Calls on_parent_event_dependent on all stms in the graph.
Set the parents of the statement.
Registers the given statements into the given target list.
Remove this connection from the database.
Cleans the AsSubUnit of the entity.
Recursively flatten the fields of a struct or hstruct.
Conveniently sign this value with the given signed value.
Set the sensitivity of a process.
Determine if a condition is satisfied.
Connects import to subsimunit.
Convert a value to a vector.
Processes the given HWProcess object.
Evaluate a parameter.
Set the value of the field.
Create a hstruct from an interface map.
Remove all resources from memory.
Get the index of the signal base.
Create a new value from a Python object.
Attempt to auto-cast a sigorval to a type.
Interpret the given value to the given type.
Recursively walk the parameters of an interface.
Return a list of all connections from srcpacked to dstinterface.
Pack an interface into a sigstring.
Synchronizes the given target platform with the given target platform.
Register an interface implementation.
Try reduction and reduction.
Attempt to reduce the value of a signal by performing an XOR reduction.
Return a new namescope for the current class.
Return True if obj is a serialization decision.
Get the bbasecond operator.
Return a SimBitsT object with the given width and signed value.
Get the name of a constant.
Cut off all drivers of a signal.
Load data from an array.
Load a Tmpl from a HDL struct.
Load from a HDL type Args: dtype (hdltype): HDL type.
Return the number of items in the array.
Flatten the sequence into a sequence of tuples.
Sign a value with a given width.
Return the indent number for the given indent number.
Raise an exception if the object does not have a nameavailability check.
Registers a parameter with the scope.
Update params from another object.
Register a new unit.
Register an interface.
Add an array to the tree.
Return a single driver.
Evaluates all operands and returns the result.
Create an RTLSignal from an operator definition and a list of operands.
Return a copy with the current context indented.
Try to connect to the specified interface.
Propagate the clk of the object.
Propagate the clkrstn of the object.
Propagate the clkrst of an object.
Propagate the RST of the object.
Propagate the RST of the object.
Iterate over bits in a signal.
Serializes the obj to the parent unit and ensures that the priv is not None.
Evaluates whether or not the object is serialized once.
Serializes the params of an entity and returns True if the params are serializeable.
Get the full name of the object.
Calls _make_association on each object in the collection.
Convert a unit to a SimModel.
Attempt to reconnect all signals to a model class.
Simulate a simulation using VCD.
Initialize the ontwrite callback.
Connects this signal to the given signal.
Register an internsig for this HWT.
Connect this endpoint to another driver.
Get the internsig of the direction.
Determine if a signal is an evdependent process.
Add a new process to the queue.
Add a hdl proc to the list of sequences to be run.
Schedule a comb update done event.
Schedules the apply values for the current process.
Create a conflict resolution strategy.
Run all comb processes.
Runs all sequences in the output container.
Apply the values to the current state.
Reads the value of the given signature.
Write a value to the simulation.
Add a new process to the queue.
Simulate a unit. :param synthesisedunit: :param until: :param synth
Convert ternary operations to if containers.
Compute the distance between two hashes.
Calculates the average hash of an image.
Compute the distance between two images.
Setup a vizio device.
Update the state of the device.
mute the volume of the device.
Increase the volume level.
Decrements the volume level by 1.
Set the volume level of the device.
Resets the board to its initial state.
Return the piece at the given square.
Remove a piece from the board at the given square.
Set a piece at a given square.
Returns True if the given move issuicide or checkByDropPawn.
Returns True if the board was attacked by the king.
Returns True if the game is over.
Returns True if the move is a check move.
Returns True if the current transposition is a fourfold repetition.
Pops a piece from the stack.
Returns a list of pieces in SFEN format.
Push a move from one USI to another.
Return the zobrist hash of the board.
Return the symbol of the piece.
Create a piece from a piece symbol.
Return the USI code for this piece.
Create a piece from a usi string.
Parse a list of commits into a list of Commit objects.
Parse a commit section.
Executes the given command line using the given configuration.
Generate a YAML file from a dictionary.
Attempt to cast the value to the appropriate type.
Return a list of dates between two dates.
Parse a date string into a datetime object.
Load a currency file.
Set missing values to None.
Get the rate for the given currency and date.
Animate a series of frames.
Read a record from the file.
Write a record to the file.
Read a map of words from the file.
Read comments from the file.
Closes the DAF file.
Computes the position of the given tdb and tdb2.
Close the DAF file.
Load the data from the DAF.
Check if the given node is a function call.
Check if the given node is a binary operation.
Check for whitelist and extra exceptions.
Add a violation if the node is within the logging statement.
Check if the given node is a keyword.
Add the name of the except handler to the current node.
Return the logging level of the given node.
Get the name of the exception handler.
Get the id attribute of the value.
Check if the given node is a bare exception.
Check if an exception is in the current logging level.
Delete a file from the database if it exists.
Return the rendered PDF content.
Renders the response to a PDF template.
Quotes a string in HTTP format.
Configure the options for the given module.
Convert a string to an underscore string.
Automatically auto-index a collection of indexes.
Parses a price file and returns a list of prices.
Load a file into a list of lines.
Parse a line of a price model.
Translate a symbol.
Loads the symbol maps from the repository.
Get the default session.
Import price data from a CSV file.
Get the latest price for a given symbol.
Download a price from the database.
Prune a security symbol.
Get the default price database session.
Add a new symbol map.
List all available symbol maps.
Get a symbol by its identifier.
Read lines from a CSV file.
Maps an entity to a price model.
Maps a model to a price object.
Read configuration from file.
Return the path to the config template.
Create the user config.
Get the path to the config file.
Get the contents of the configuration file.
Set the value of an option in the configuration.
Get the value of an option from the configuration.
Saves the configuration to a file.
Parse a symbol and return the namespace and mnemonic.
Adds a price to the entity.
Download a price from the database.
Returns the current session.
Returns a list of prices for the given date and currency.
Get all prices on a specific date.
Prune all security symbols in the repository.
Remove all prices for a security symbol.
Download a price from a currency.
Returns a list of all security objects for the given currency and symbol.
Return the partial state of the state.
Update the arguments of all child calls.
Recursively descends the tree.
Check if the student has chosen the correct option.
Return a list of items defined in this collection.
Get the x attribute of a parser.
Test if a context loop has a context loop.
Check if the solution has any context.
Check that a student and solution part exist.
Check that a student and solution part have the given index.
Returns the true anomalous.
Initialize the ldap3 login manager.
Add a new LDAP server to the pool.
Remove a connection from the stack if it exists.
Tear down the ldap3 manager.
Attempts to authenticate the given username and password.
Authenticate a user using direct bind.
Get a list of user groups.
Get information about a user. :param dn: Name of the user :type dn: str
Get user information for a given LDAP username.
Get an object from a LDAP server.
Returns a connection to the LDAP server.
Establish a connection to the server.
Create a connection to the LDAP server.
Destroys the given connection.
Search for documents in the container.
Search for documents in the database.
Search for all artifacts in a collection.
Speak the database.
Announce a command.
Update the secret settings.
Update the headers of the bot.
Check if the client has any secrets.
Download a file from a URL.
Stream a URL to a stream.
Update the authorization token.
Get or create a folder.
Read a message from the response.
Get the bucket name of the bucket.
Update self.secrets with client secrets.
Initializes the native app authentication client.
Loads the authentication and transfer secrets.
List all logs and print them to stdout.
Returns a list of all logs in the bucket.
Create an endpoint folder.
Initializes the transfer client.
Search for all the containers in the cluster.
Show the status of the client.
Add a variable to a backend.
Remove a client secret from a backend.
Activate the given backend.
Delete a backend from the client.
Update the base for the given image.
Generate a basic authentication header.
Generate a signature for the given payload and secret.
Generate a signature for a header.
Sends a DELETE request to the specified URL.
Send a HEAD request to the given URL.
Paginate GET requests.
Verify that the certificate is valid.
Remove an image from the registry.
Return a dictionary of the current version of the database.
Returns a list of install requirements.
Get the singularity version.
Check if the specified software is installed.
Return the absolute path to the install directory.
Returns the path to the thumbnail for the registry.
Run a command and return the output.
Get metadata from dbx file.
Update the credentials for the current user's account.
Print the response to a file.
Terminates all registered sregistry commands.
List logs for a container.
Returns a list of all collections in the account.
Update the secret settings.
Start the ipython interpreter.
Get all manifests for a given repository.
Get the manifest of a repository.
Get the download cache for the given destination.
Extract environment variables from config.
Update the base and artifacts.
Update the token and headers.
Return the metadata for this job.
Get the settings for a given client.
Get and update a setting.
Update a setting on the backend.
Generate a signature for an authorization request.
List all registered builders.
Get a list of templates for a given name.
Get the IP address of a network.
Run the build.
Returns a list of all the Docker containers in the bucket.
Search for all buckets in the bucket.
Entry point for the sregistry CLI.
CLI entry point for sregistry.
Initialize the database with the given path.
Get the build template.
List all endpoints in the database.
List all files in an endpoint.
Share a dropbox with another dropbox.
Reads the client secrets file.
Builds the S3 bucket and compute services.
Delete an object from a bucket.
Delete an object from the bucket.
Destroy a compute instance.
Return a dictionary of sub-parsers for the given parser.
Generate a string from the descriptor and nouns.
Get the path to the temporary directory for the registry.
Extract a tar archive.
Extract a tar archive.
Get the SHA256 hash of a file.
Read a file and return its content.
Read a JSON file.
Clean up a list of files.
Push an image to S3.
Get or create a collection.
Get a collection by name.
Get a container by name and tag.
List all images in the registry.
Inspect a container's fields.
Rename an image.
Moves an image to a new location.
Remove an image from the container.
Parse the header of a recipe.
Find a single recipe.
Create a tarball from a list of package files.
Update the metadata of a blob.
Formats the name of a container.
Return True if the user is using a color.
Return True if an error occurred, False otherwise.
Write a message to the given stream.
Add a table to the table.
Push an image to the remote account.
Get a template by name.
Get the manifest with the given tag.
Get the name of the build template.
Update the client secrets.
Context manager to raise S3 errors.
Factory for creating a proxy object.
Get the gravatar url for a user or email.
Get the gravatar url for an email.
Check if a user has a gravatar.
Returns the gravatar profile URL for the given email.
Generator for chimera blocks.
Given a networkx graph, return a networkx graph where each node in the graph has a
Enumerate a set of SMILES and return a list of SMILES.
Enumerate a molecule. :param mol: Molecule object :type mol
Apply a transform to a molecule.
Canonicalize a molecule.
Validate a set of smiles.
Standardize a set of smiles.
Enumerate all tautomers in a molecule.
Canonicalize a set of smiles.
Return the parent tautomer of a molecule.
Return the parent fragment of a molecule.
Remove the stereo parent from a molecule.
Return a molecule that is a parent molecule.
Charge the parent of a molecule.
This is the main entry point for the molvs command.
Remove fragments from a molecule.
Choose the largest molecule from a molecule.
Integrates the given distribution with the given parameters. Parameters ---------- u0 : numpy array
Get memes of org.
Get the teams of the organization.
Get all repos for a given repository type.
Get the total number of contributors for a given repo.
Get the list of open and closed pull requests from a repository.
Get a list of all issues in a repository.
Get the readme of a repository.
Get the license for a repository.
Get a list of commits for a given repository.
Write organization json to file.
Write the totals to a file. :param file_path: The path to the file
Writes the list of languages to a file.
Check if a directory exists.
Remove a date from a CSV file.
Returns a list of all gov orgs.
Create an enterprise login session.
Check if the API limits are exceeded.
Establish a connection to the GitHub API.
Query for repositories for a given organization or list of repositories.
Retrieve the organization from the logged in user.
Write the stargazers to a file.
Create a project from a Gitlab repository.
Convert a license string to a dict.
Get information about all repositories.
Get a list of releases for a repository.
Get a list of referrers.
Get data from Github API.
Write a JSON file for all repos in the organization.
Writes the referrers and views to a file.
Check if data is redundancy. :param file_path: file path :param dict
Write data to a file.
Write the referrers to a file.
Yield all DOE codes from a JSON file.
Processes a URL and returns a generator of DOE codes.
Process a file or URL.
Login to GitHub.
Get the memes of the organization.
Writes the logins to a file.
Establish a connection to the given url and username.
Connect to Gitlab.
Query for projects by repositories.
Compute the labor hours of a labor person.
Recursively removes null values from a dictionary.
Read a GQL query from a file.
Wait for the given timestamp to be reset.
Countdown the number of jobs in the queue.
Load data from a JSON file.
Saves the data to a JSON file.
Create a new TensorFlow connection.
Create a TFS project analysis client.
Create a TFS core client.
Create a GTFS Git client.
Create a tfs client.
Get a list of repositories for a project.
Get a list of all branches in a given TFV collection.
Get the number of commits for a year.
Calculate the total number of commits for each week.
Write the report to a file.
Log a timing message.
Log a histogram stat and value.
Roll up the gauge and histogram stats.
Convert a value to an enum value.
Convert a value to a Python value.
Return the name of the enum value.
Resolve a path to a set of paths.
Given a list of usls, project them onto a list of lists.
Return the mean value of the sum.
Mark the current rate as being used.
Return the mean rate of the progress bar.
Mark the given value as being the last value.
Send a metric to the client.
Serialize a metric to a list of strings.
Format a metric string.
Send a metric to the client.
Return the value of an option in a section.
Ensure data is JSON-safe.
Get or set an option.
Given a list of ledger codes, return a dictionary of GUIDs.
Get the list of possible divisions.
Maps invoice numbers to foreign invoice numbers.
Return a view for the given injector.
Create a form view.
Returns a view for the given injector. :param injector: Injector instance :param injector:
Create an api view.
Create a generic API view.
Creates a model view set for the given injector.
Create a stream from a file descriptor.
Called when the connection is ready to be read.
Explicitly close the connection.
Register a watch for a file or directory.
Remove an alias from the watch list.
Set up a watch descriptor.
Set up the watch queue.
Get an event from the stream.
Touch this message.
Update short_interval and long_interval accordingly.
Updates the interval to indicate a failure.
Close all open connections.
Establish a connection to Nsqd.
Perform a query against the lookupd endpoint.
Set the maximum number of in-flight connections.
Logs a warning about a failed attempt.
Register a callback to be invoked when a new listener is added.
Remove a callback from the list of listeners.
Triggers all listeners with the given name.
Publish a message to a topic.
Set the feature transform of the dataset.
Computes the prediction of the model.
Remove all paired fastq pairs from fastq_pairs.
Reads a depth file into a dictionary.
Set the path to the template file.
Set the names of the main channel names.
Render a Jinja2 template.
Return a string representation of the template.
Add sink to main_forks.
Update the attributes of the directive.
Set the secondary inputs of the channel.
Parse an assembly file.
Calculates the content of the GC sequence.
Returns the total length of all contigs in the Assembly.
Write the assembly to a file.
Write the report to a file.
Remove all forks from text.
Run insanity checks on a pipeline string.
Given a fork process and a list of pipelines, return the source lane.
Given a lane string, return a list of lane tokens.
Returns a list of dicts describing a linear connection.
Add unique identifiers to a pipeline string.
Remove unique identifiers from pipeline links.
Check that the required files are present.
Convert a header string to a dictionary.
Convert a human-readable string to a human-readable number.
Return the size coverter of a string.
Get the pipeline processes from the log file.
Clears the inspect information.
Update the barerier status.
Retrieve the log file from disk.
Return a dictionary of warnings about the resource sizes.
Update the internal state of the parser.
Displays the overview of the screen.
Moves the cursor down the specified direction.
Move to the right of the screen.
Read the last n lines from the log file.
Prepare the static info for the pipeline.
Convert a DAG file to a dictionary.
Get the hash of the run file.
Get the filepath to the next flow file.
Main entry point for testing.
Brew an in-nuendo pipeline.
List all available recipes.
Validate a pipeline string.
Build the upstream for a given process.
Build the downstream for a given task.
Runs the auto pipeline.
Return a string representation of a component.
Write a report to a JSON file.
Entry point for the log collector.
Fix contig names in asseembly.
Clean up fastq files.
Parse a list of files.
Parse a file into the storage.
Get contig ID from contig string.
Writes the report data to a JSON file.
Parse the assembly file.
Get summary statistics for each contig.
Returns a list of contigs for each window.
Calculates the total GC value of a sequence.
Returns a list of all contigs in the contigs of the contigs in
Main function for testing fastq files.
Writes a JSON report of the quality of a sample.
Parse the bowtie log file.
Parse a process name.
Add a dependency to the pipeline.
Searches for a lane in the tree that matches the given template.
Build the header of the template.
Build the footer.
Sets up the init process.
Set the secondary channels.
Set the status and report channels.
Return a string representation of the manifest.
Set the resources and manifest configurations.
Write a dictionary to a DAG file.
Writes the configurations to the nf file.
Export the parameters to a JSON file.
Export the directives to a JSON file.
Build the nf file.
Parse kmer options and return a list of KMers.
Get the report id from the log file.
Update the trace watch file.
Update the status of the pipeline.
Send a live report to the server.
Initializes the live reports for the given report.
Close the connection to the broadcast address.
Convert a FASTA file into a FASTA file.
Main entry point for the MASH command.
Print a message with a colored color.
Processes a process map.
Get the minimum and maximum of the qual_str.
Filter assembly file to include only contigs that are covered by minimum coverage.
Get the assembly size and contig size of the assembly file.
Main entry point for filtering BAM files.
Convert camel case to camel case.
Return a dictionary mapping component names to component classes.
Main entry point for dendropy.
Map w to data.
Calculates the median filter of the input data.
Computes the Gaussian of a signal.
Compute the squared distance between x and x.
Compute the NC matrix.
Apply Gaussian filter to input data.
Compute the NC distance matrix.
Circular shift matrix.
Compute the embedded space of a matrix.
Plots the est_file and algo_ids.
Plot the boundaries of all_boundaries.
Plot the labels of all_labels.
Get a list of features from a FITS file.
Convert a list of features to a 2D FFMC2D array.
Fits the model to the given data.
Read references from an audio file.
Find the estimation of a jam.
Returns a list of algorithm IDs for all boundary algorithms.
Get the configuration for the MSM algorithm.
Returns a list of filestructs for all the datasets in the specified directory.
Read Hier References from a jams file. :param jams_file: jam
Get the duration of a feature file.
Write mirex time series to a file.
Get the path to the dataset file.
Align the beats and labels of a song.
Estimate the number of beats and frames.
Read an ann_beats file.
Compute the beat sync features.
Returns a list of the names of all the parameters in the object.
Compute frame synchronization times.
The number of times each feature has been processed.
Returns a list of features.
Preprocess the feature and return the features.
Preprocess est_idxs and est_labels.
Entry point for the tool.
Print the mean of the results.
Computes the information gain of a beat.
Process a track file.
Get the name of the results file.
Compute all features in the MSM file.
Processes a MSM file.
Calculates the cost of a Gaussian distribution.
Log-normalize a function. Args: f (numpy.numpy.numpy.
Normalize a function f to a minimum and maximum.
Get the number of frames in a time series.
Remove empty segments from a list of time series.
sonify a set of clicks.
Synchronize labels between new_bound_idxs and old_labels.
Process segmentation level data.
Align the end hierarchies of two Hiers.
Compute the distance between the given indices.
Estimate the k-nee of the model.
Get the clustered data.
Run k-means on a wx object.
Compute the bulb for a given set of means and labels.
Returns the magnitude of x.
Convert a json file to a numpy array of bounds.
Convert a JSON bounds file to a numpy array.
Convert a json file to a numpy array of labels.
Convert a beats json file to a numpy array.
Compute the FFT of a 2D array.
Computes the labels for each sample.
Filters the activation matrix with respect to the median.
Returns the module for the given boundaries id.
Get the label type module for the given label id.
Run the segmenter on the given audio file.
Run segmenter on a flat audio file.
Translate a source from one place to another.
Set the task for the given translator. :param translator: the translator to use :param trans
Spool an iterable to maxlen words.
Send a line of text from inputstream to target.
Load a translation table from a JSON file.
Print a table for the given language.
Remove nodes and edges from a network.
Save a network to a Pandas DataFrame.
Create a Network from a Pandas HDF5 file.
Process a node and return a dict of node attributes.
Make an OSM query.
Build a query string for a node.
Return True if value is a regular expression.
Compares the given value against the given expectation.
Compares the given expression against the given value.
Triggers methods on the given instance.
Get a matcher by name.
Initialize a matcher by name.
Set the response body.
Set the body of the response.
Set the value of a key in the container.
Append a list of functions and methods to the given target.
Triggers the given request on the given instance.
Sets the request headers.
Ensure header with given names is present.
Ensure headers are present.
Add parameters to the request.
Sets the request body.
Add a JSON response to the request.
Add an XML response to the request.
Reads a file and writes it to the response.
Set whether or not the job should persist.
Set the runtime error.
Reply to the mock. :param status: the status of the mock :param new_
Matches the given request against all filters.
Sets the mock engine.
Create a new mock.
Remove a mock from the mock list.
Activate the mock engine.
Disable the mock engine.
Determine if the request should be used as a network.
Matches a request against all filters.
Returns a copy of this request.
Context manager to temporarily disable the engine.
Add interceptors to the current engine.
Removes the interceptor with the given name from the list of interceptors.
Get a setting from the settings_dict.
Return the decrypted column as a SQL string.
Set the original value of the attribute to the original value.
Get the SQL placeholder for the given value.
Get a column from the table.
Returns the SQL placeholder for the given value.
Calculates the base regression of the estimator.
Return the covariance matrix of the matrix.
Recurse through all non-terminals in the tree.
Calculate the averages of all branches in the tree.
Calculates the variance of the explained distribution.
Calculates the base regression of the tree.
Set the t-coordinates of the TT.
Calculates the number of branches in the tree.
Calculate the cost of a branch.
Attaches the merger cost to all branches in the tree.
Normalize a profile. :param in_profile: Profile to normalize :type in_profile:
Sets the gtr_site_specific of this GTR.
Set the GTR instance.
Setter for _seq_len attribute.
Attach sequences to nodes.
Prepares the tree for tree generation.
Calculates the internal node count and sets up and bad branches.
Calculate the distance to root of all terminals.
Returns the branch mutation matrix for the given node.
Return the expanded sequence of the given node.
Return the state of each clades intersecting with pos.
Return the LHS of the ancestral sequence at the given position.
Computes the ancestral likelihood of each branch of the tree.
Return the maximum branch length of a node.
Calculate the optimal branch length of a node.
Reconstruct the alignment.
Return the diagonal of the diagonal of the diagonal.
Create a new TimeSeries with the given parameters.
Check for correctness of the matrix.
Calculate the optimal T value of a sequence pair.
Probability density function for the given profile pair and multiplicity.
Evolve the model at the given timestep.
Compute the logarithm of a sequence.
Set the branch length mode.
Plot root to tip.
Prints the lh of the tree.
Add a coalescent model to the tree.
Find the best root of the tree.
Assure that the tree is in the correct format.
Create a GTR object.
Read a VCF file if it is a VCF file.
Calculate the FWHM of a distribution.
Create a delta function for the given position.
Assign dates to nodes in tree.
Setup the tree regression.
Make a time tree.
Return the time tree likelihood.
Converts all dates in the tree to numeric dates.
Return the date uncertainty due to the given interval.
Returns the minimum value of an InterpolateObject.
Calculates the median value of an interpolated grid.
Calculates the numeric date for a given datetime.
Create a FrequencySeries from a FrequencySeries.
Close the connection to the server.
Receive a single line from the client.
Send data to the client.
Send an instruction to the device.
Convert unicode string to unicode.
Load a term from an instruction.
Encodes an argument as UTF-8.
Encode the instruction into a string.
Returns the URL for the given class.
Return the URL for this instance.
Returns the URL for the given class.
Downloads a file from the server.
Get the parent object of this job.
Ask the user for credentials.
Prompts the user to enter an interactive login.
Shows the user whoami.
Prints the user details.
Create a range of genomics.
Return a copy of the chromosome with the given position.
Returns the facets of the query.
Processes a list of filters.
Moves the cursor to the next page.
Execute a query and return the results.
Migrate a dataset to another dataset.
Entry point for the solvebio command line interface.
Construct an instance from a dictionary of values.
Logout from the API.
Get the child object of this task.
Parse SnpEff info.
Get the credentials from the SolveBex API.
Save the configuration to a file.
Format a value according to the given type.
Builds a row from a list of cells.
Build a line from a list of column widths.
Return the attributes of the mediawiki cell.
Migrate a dataset to another dataset.
Upload files to Vault.
Validate that the full path is valid.
Validates that the given url is a valid API host URL.
Annotate a list of records.
Evaluate the expression.
Sets the format name.
Register a new output formatter.
Shortcut for tabular.
Return the path to the user config file.
Return a list of system config files.
Return a list of all additional files.
Write the default configuration file to disk.
Read a list of config files.
Truncate a string to a maximum width.
Replace characters in a string.
Calls commands in sequence.
Apply an option to a command.
Initializes the lint options.
Run the command.
Runs the clean_docs_cmd and view_docs_cmd.
Truncate a string of data and headers.
Formats a row of headers into a string.
Create a vertical table.
Create a table adapter for the given data and headers.
Return True if type is an integer.
Return True if the given type is a boolean.
Return True if type is a binary type.
Generate a key from a template.
Generate a key pair.
Find all the objects in the specified template.
Insert an image into the QR code.
Print a panel of genes.
Given a weekday, return the first day of the day.
Repeats the current date by day.
Repeatedly repeat the given start and end dates.
Helper function to fill out the first week of the event.
Handle a single chunk event.
Exports all variants in a given database.
Export mt variants to a list of lines.
Add or update a user.
Get a list of variants for a given institute and case.
Retrieve information about a variant in an SV.
Creates a string representation of a variant.
Verifies a given variant.
Submits a Clinvar submission for a given variant.
Returns a list of tumor variants for a given case.
Sends an ACMG request to the institute.
Handles the evaluation request.
Get the ACMG data.
Uploads a new panel to the institute.
Download verified variants.
Given a list of HGNC IDs, return a list of genes that have the given
Add incomplete penetrance symbols to genes.
Make a request to matchmaker.
Returns a list of MatchMaker nodes.
Get the cytoband coordinates for a given chromosome and position.
Get the sub-category for a given alt_len and ref_len.
Get the length of a sequence.
Get the end of a BLAST file.
Parse the coordinates of a BNV variant.
Update a panel.
Exports a panel to a PDF.
Edit a panel's gene form.
Load a delivery report.
Return a dictionary of HPO terms.
Show all whitelists.
Build a phenotype object from a phenotype id.
Add a gene to a build.
Return a list of dicts of all genes in the database.
List institutes.
List all transcripts for a given HGNC.
Display events for a given day in the given year and month.
Retrieve a list of variants from the SV database.
Retrieve a list of variants for a given institute and case.
Create a variant for a given variant.
Return a list of variants export header for a case object.
Get the prediction data from a list of genes.
Given a BAM file, return the BAM file.
Get the observations for a variant and variant.
Parse a gene and add links to the transcripts.
Return a string representation of a Transcript object.
Return the end position of the variant.
Returns the frequency of the most common variant.
Convert a Clinsig variant to a human readable string.
Generate a link to a thousandg variant.
Return the link to the cosmic variant.
Return a beacon link for a given variant.
Generate a URL for a variant.
Returns a human-readable version of the variant.
Return a list of the expected inheritance for a variant.
Return a list of all callers in a variant.
Retrieve tumor variants in a case.
Exports a Clinvar export for a given variant.
Get a dictionary of information about a Clinvar submission.
Retrieve institute and case information for a variant in a store.
Post evaluation of a variant.
Takes an evaluation object and returns an evaluation object.
Uploads a panel to the HGNC.
Export the verified variants to a workbook.
Export all genes in the database.
Parse CLNSIG output.
Parse compounds from a compound file.
List all genes in a build.
Get information about a case.
List available collections.
institute a sanger.
Get a file handle from a file path.
Get the network number from a request.
Given a network number, return the network number and previous network number.
Checks the year and month for validity.
Check if the given year, month, day is a weekday.
Parse a list of samples into a list of individuals.
Parse a PED file.
Builds an evaluation object for a given variant and institute.
Determine if a CMG term is likely to be likely.
Returns a list of variants in a case.
Returns a list of variants for a given institute and case.
Returns a Variant object for the given document.
Get a list of gene variants.
Returns a list of variants that have been verified.
Returns a list of all causatives for a given institute.
Returns a list of institute variants.
Given a case object and a variant object, yield all institute causatives.
Delete variants in a case.
Returns a list of variants that overlap the given variant.
Return a list of all evaluated variants in a case.
Given a list of variants, return a list of variants.
Get a mongo connection.
Returns a list of objects from variant_ids and form_fields.
Return the header for a Clinvar submission.
Returns a list of strings representing the lines of a Clinvar submission.
Loads a gene panel.
Build an exon object from an exon info dict.
Deletes a gene panel.
Drop all indexes in the database.
Deletes a user from the database.
Drop genes from the database.
Drop all exons from the build.
Delete a case.
Get a list of individuals.
List all cases associated with a given case.
Loads a user from the database.
Login to Google.
Builds an institute object from an internal id and display name.
Delete an event from the event collection.
Return a list of institute events.
Returns a list of user events.
Remove a phenotype from a case.
Parse the genotypes of a variant.
Check if a coordinate is in the given chromosome.
Returns a list of all terms that match the search term.
List all transcripts in the database.
Fetch and load exons from database.
Load a region from a HGNC.
Get all events for a given month.
Return a queryset of live records.
Parse the requirements file.
Get the existing gene for a panel.
Update a panel in the database.
Create a new gene panel.
Exports a panel object to a dictionary.
Return information about the given archive case.
Migrate a case to another database.
List all HPO terms in the database.
Configure extensions for the given application.
Register blueprints.
List all aliases for a given symbol.
Builds a panel from a panel info.
Export verified variants to a CSV file.
Export variants for a given case.
Return a VCF entry from a variant object.
Start the pymongo server.
Generate an MD5 key for a list of arguments.
Initialize the app.
Sets up the database.
Index the database.
Setup the database.
Demonstrate the institute.
Setup the database.
List institutes.
Parses a list of genetic models in a case.
Show gene panels for a given institute.
Add institute to the institute collection.
Get institute object by ID.
Check if a date is a valid date.
Return a datetime object from a date string.
Generate a list of HPO gene names.
Parse a Rank Score entry.
Add a new user to institute.
Check if a mongo connection is established.
Loads a delivery report from a database.
Add a user object to the user collection.
Generate a list of pileup files.
Load exons from a list of exon lines.
Update the compounds for a case.
Add links to an ensembl object.
List genes in a HGNC symbol.
Parse HGNC Genes from a list of lines.
Get the open Clinvar submission for the given user and institute.
Update a Clinvar submission.
Get the Clinvar ID of a submission.
Adds the given submission objects to the submission collection.
Update the status of a user's submission.
Get a list of all submissions for a given institute.
Deletes a Clinvar object from the database.
Convert a case to a dictionary of ClinVars.
Parse the hpo-obo output from hpo-obo.
Get a list of all genes.
Get a list of genes in the given HGNC symbol.
Get a list of all genes.
Get institute and case object.
Returns a list of institutes for the specified user.
Get the HGNC ID of a gene.
Create a new gene panel.
Retrieve diseases from the MIM database.
Load disease terms from genemap file.
Parse the frequency of a variant.
Parse SV frequencies from a variant.
List users in the account.
Compares two MIM panels.
Update the MIM version of a panel.
Add a gene panel to the collection.
Returns the panel with the given id.
Deletes a panel from the collection.
Return the gene panel with the given id.
Get a list of gene panels.
Convert a case object to a list of gene panels.
Update a panel object.
Add a pending action to a panel.
Returns a set of clinical symbols for the given case object.
List all cases associated with a given case.
Send an email to the server.
Load indexes from the database.
Update all indexes in the database.
Drop all indexes from the database.
Builds a variant query dictionary.
Implement clinsig query.
Add coordinate filter to the query dictionary.
Filter genes based on the given query.
Wipe the database.
Parse a panel from a CSV file.
Load a bulk of genes into the HGNC database.
Insert multiple transcripts into the database.
Insert multiple exon objects into the database.
Return the list of transcripts associated with a HGNC identifier.
Get the HGNC ID for a symbol.
Return a list of HGNC Genes.
Return a list of all genes in a build.
Return the number of genes in the build.
Drop all genes from the HGNC.
Drop all transcripts from the database.
Drop all exons from the collection.
Returns a dictionary of ensembl transcripts.
Convert a build symbol to a HGNC symbol.
Find gene by alias.
Return a dictionary of all genes with the given alias.
Return a dictionary of ensembl_genes.
Return the gene name associated with the given HGNC symbol.
Add HGNC IDs to a list of genes.
Return a dictionary of coding intervals for all genes in a build.
Loads an OSM panel from an API key.
Retrieve a list of all cases for a given institute.
Retrieve institute and case information.
Get the results of a matchmaker.
Match an institute and case.
Delete an institute and case.
Generate a PDF for a case report.
Marks a case as diagonal.
Get the institute status.
Assign an institute to a case.
Return a list of all HPO terms.
Mark a variant as invalid.
Mark a country as causative.
Retrieve the delivery report for a given case.
Shares an institute and case.
Rerun an institute.
Open a research for a given institute and case.
Convert a vcf to a cytosure file.
Upload a case to the multiqc controller.
Get a list of cases for a given case query.
Returns a list of the submissions for a given user and institute.
Exports all MMT variants to a CSV file.
Return a list of diseases that occur in a set of hpo_ids.
Convert a VCF to a Chetosure object.
Create a dict of institute and case objects.
Returns a list of all unevaluated Sanger cases.
Delete a MME patient from a case.
Returns a dictionary of patient matches.
Perform a mme match against a case.
Fetches the ensembl and ensembl genes from a build.
Parse callers from variant.info.
Build a Transcript object from a TranscriptInfo object.
Loads an institute from the given adapter.
Given a variant and a list of transcripts, return the CADD entry.
Load a case from a YAML file.
Update a variant in the variant collection.
Update the rank of a variant in a case.
Update the compounds of a variant.
Update the compounds of the variants.
Update all compound variants in the database.
Inserts a new variant into the variant collection.
Inserts a new variant into the variant collection.
Load a list of variants into the variant collection.
Assign a new case to a user.
Share a case with a collaborator.
Marks a patient as being diagnosed.
Marks a case as checked.
Order the given variant in the given institute.
Returns a list of sangers ordered by institute and user.
Validate a variant. :param institute: The institute :type institute: str :param link:
Mark a variant as causative.
Mark a variant as dismissed.
Update the affiliation of a variant in the institute.
Parse the IDs of the variants.
Parse a simple ID.
Generate a MD5 key for a document.
Convert a panel to HGNC format.
Get a variant id from a variant object.
Returns the number of cases in the institute.
Update a case's dynamic gene list.
Get a case by ID or display name.
Deletes a case from the database.
Add a case to the case collection.
Replace a case with a new one.
Update a case with a new family.
Submit an evaluation to the institute.
Get the evaluations for a given variant.
Parse a list of transcripts into a dictionary.
Parse ensembl gene request.
Parse ensembl transcript request.
Parse a list of ensembl lines.
Parse ensembl exon information.
Parse ensembl exon request.
Initialize the logging handler.
Parse genemap file and return a dictionary of phenotypes.
Command line interface for mim2gene.
Convert a string to a number.
Formats a month of the year.
Formats the given day and weekday.
Format a month name.
Helper method for popover creation.
Get information about a panel.
Parse a gene panel.
Show all diseases.
Drop all HPO terms from the database.
Return a dictionary of all users in the given store.
Parse a conservation variant.
Parse the conservation score from a variant.
Get information about the general case.
Get a list of cases grouped by institute ID and slice ID.
Convert the context to a JSON response.
Get the year and month for a given net and query string.
Check for cancelled events.
Return the term associated with the given HPO.
Returns a list of terms that match the given query and hpo term.
Returns the disease term associated with the given disease identifier.
Return a list of disease terms.
Loads a disease term from the database.
Generate a list of HPO genes.
Read HDF5 data from file.
Sets up the time axis.
Computes LSTM coordinates.
Blank out the DC of the channel.
Calculate the extent of a plot.
Plots the waterfall.
Plot the time series.
Write the filterbank to a file.
Calibrate the bandpass using the median of the data.
Convert data to coarse grain.
Returns the fractional polarization of a string.
Write polar polfils to file.
Find the index of the closest value in an array.
r"""Rebins a data array into an array of n_x, n_
Unpack an unsigned integer into an unsigned integer.
Compute the difference between two sets of STOkes.
Plots the calibrated diode.
Calculates the size of the selection.
Calculates the shape of the selected channels.
Setup start and stop frequencies.
Populate the timestamps from the header.
Calculate the number of coarse-tuning channels.
Calculate the number of blobs in the selection.
Returns True if the selection is too big.
Read all channels from the FIL file.
Read a row of data from the FITS file.
Read data from the container.
Update the header.
Print information about the file.
Writes the data to a FASTA file.
Write to HDF5 file.
Write the data to a HDF5 file.
Calculates the size of the blobs for the given chunk.
Get the dimension of the chunk.
Grabs data from the data array.
Command-line tool for guppi-raw.
Read the first header from the file.
Find the number of data blocks in the file.
Prints the mean and std deviation of the next data block.
Plots a histogram of the next data block.
Generate the filterbank header.
Find the size of the header file.
Integrate a calibrated channel.
Calculate the center frequencies of a channel.
Integrate the ratios between two fluxes. Parameters ---------- calon_obs :
Get the Tsys of a diode spectrum.
Return the length of a header file.
Check if a file is a filterbank.
Generate the signatureproc header string for a sigproc file.
calc_n_ints_in_file calculates the number of ints in a
Return a dict representation of the traceback.
Adds a sub-command parser to subparsers to create RR records.
Create a sub-parser for the zone file parser.
Remove comments from the given text.
Add a default name to a file.
Parse a line of a JSON zone file.
Parse a zone file.
Quote a field in a data dictionary.
Parse an avro schema string.
Create a Python package from a list of classes.
Convert a record to a JSON compatible format.
Load a record from a JSON record store.
Deserialize a string into a JSON object.
Add a schema to the schema map.
Returns the schema for the given record name.
Return a dictionary representation of the Variables.
Return a dict representation of a record's schema.
Return a schema dict for the root schema of a record.
Generator that reads lines from input_stream and yields them.
Write the output of a job to the output stream.
Return a new ordered dictionary with the given key and value pushed onto the front.
Returns a search result for the given query string.
Returns a search result with raw filters.
Return a list of entities that include the given attributes.
Get entity from href.
Given a quote, return the first one that matches the given one.
Escape characters in a string.
Create an elementary rotation matrix.
Calculates the vraderrorsky average for a given magnitude and spt.
calcparallaxerror calculates the magnitude and magnitude of the parallax error.
Calculates the magnitude error of a magnitude.
Calculates the magnitude error of a magnitude.
Returns the average number of transits in a beta distribution.
Returns the angular distance between two angles.
Transforms x,y,z coordinates to cartesian coordinates.
Apply spherical and spherical transforms to the coordinates.
Computes the jacobian of the covariance matrix.
Returns the error scaling factor for a given observable.
Unquotes the given value.
Returns a new collection with each element of the collection with the given functions.
Exclude items from the collection.
Apply a function to each element of the collection.
Return a new collection with elements from this collection until the given function returns True.
Drop items from the collection until the given function returns True.
Zips the elements of this collection into another collection.
Find the first occurrence of a method in the list.
Return the path to the serach executable.
Build a list of mini-runs from a list of events.
Print the results to the output file.
Prints the results to the output file.
Clean code from macros and pragmas.
Rounds x to the next base value.
Return a list of indices that are blocking.
Calculates the cache access for the results.
Calculate cache access and cycles.
Strips and uncomment from Asm lines.
Strip unreferenced labels from Asm lines.
Select the best block from a list of blocks.
Prompts the user to select an increment.
Insert markers between start_line and end_line.
Yield integers from start to stop.
Get the last modified datetime of a directory.
Check the arguments passed to the parser.
Main entry point for the script.
Main entry point for the pickle module.
Create a new symbol with the position of the symbol as an integer.
Transform a 1D array declaration to a 1D array declaration.
Transform a 1D array reference to a 1D reference.
Find a node type in an AST.
Check that all of the variables are valid.
Set a symbol's constant.
Return a subexpression of the constants of the expression.
Return the array sizes.
Calculate the relative offset of a variable.
Remove duplicate accesses from the destination and sources.
Returns the total length of the iteration.
Returns a generator that yields the current loop stack.
Return a list of free symbols in order.
Return a dictionary of all SymPy accesses.
Compiles the relative distances of the given sympy accesses.
Convert global iterator to indices.
Return an iterator over the global variables.
Convert a list of indices to a global iterator.
Return the maximum global iteration.
Print kernel information.
Prints information about the variables.
Prints constants information.
Print kernel code.
Convert a math AST to a sympy symbol.
Given an AST node, return a tuple of offset tuples.
Get the base name of an array reference.
Get the type of the index in a loop.
Builds a list of AST nodes for constants.
Return a list of array declarations.
Return a list of kernel loop blocks.
Builds the array declarations.
Find the outermost loop in the loop_nest.
Builds the initializations of an array.
Build a dummy statement statement.
Builds a kernel function declaration.
Builds a list of scalar declarations.
Get the code of the kernel.
Builds the kernel call AST.
Get the code for the main kernel.
Assemble the instrumented binary file.
Return a unique identifier for the file.
Returns the last modified datetime of the file.
Get the compiler and flags for this command.
Parse a perfctr event string.
Enforces no overlap.
Return the path to the header file.
Aligns an iteration with cl boundary.
Returns a list of load factors.
Returns the total number of hits in the cache.
Returns a list of misses.
Returns a list of stores.
Returns a list of theevicts.
Returns a dictionary of information about the machine.
Temporarily fix the value of an environment variable.
Configure the argument group.
Parse the description from the README file.
Builds an item for a course purchase.
Record a purchase request.
Get course content from Ecommerce.
Get course content from ecommerce.
Update the list of unenrolled users.
Sends an email to a course refund.
Send a notification email to a user.
Retry the order.
Fulfill an order. :param order_number: Order number :param site_code:
Get a client for a given site code.
Get a value from the cache.
Set the value of a key in the cache.
Get the value of a configuration variable.
Get the filename for the given environment variable.
Get the value of a dictionary by version.
Return the Eplus version.
Populates the device from the given JSON data.
Returns a list of all external files in the database.
Sets the default values for all tables in the database.
Prepares the extensible field descriptors.
Returns a dictionary of all the short reference names for all the external files.
Get the value of a column.
Update the value of an ini file.
Update the INI file.
Add one or more fields to the system.
Pop a value off the stack.
Insert a new value into the list at the given index.
Remove this record from the database.
Register a record hook.
Register a new link.
Create a regular expression for the intent.
Return the number of seconds remaining since the given time.
Serializes the object to a dictionary.
Make an HTTP request.
Get a list of services for a given service type.
Create a directory if it doesn't exist.
Configure a CURL service.
Register a new Cauldron status.
Get the status of a recording.
Update the status of an event.
Update the status of the agent.
Return the path to the configuration file.
Update the configuration from a configuration file.
Check if config file exists.
Initialize the logger.
Return the home page.
Serves an image.
Run all of the given modules.
Parse an ICal file into a list of events.
Get a list of upcoming events.
Main loop for the control loop.
Main loop for the control loop.
Make an error response.
Make a JSON response with the given data.
Get the internal state of the service.
Return a list of upcoming and recorded events.
Get the event with the given UID.
Delete a recorded event.
Modifies the status of an event.
Start a capture event.
Renders the test html to a fragment.
Returns a list of all resources.
Return a dictionary representation of the object.
Create a Fragment from a dict.
Add a new content to the document.
Initializes the JS API.
Convert a list of resources to HTML.
Convert a resource to HTML.
Render and return a JSON response.
Render a standalone HTML fragment.
Render the given fragment to standalone html.
Calculates the probability density function for the given parameters Parameters ---------- pvalues : numpy array of values
Convert a Pandas Series or Pandas Series to a 1-dim numpy array.
Given a set of scores and an error table, return the corresponding values.
Create a final error table from a dataframe.
Takes a dataframe and returns a summary error table.
Compute error statistics for a set of scores.
Find the cutoff for a given score.
Infer the peptidos of the input file.
Infer peptides from the input file.
Infer a protein file.
Subsample a file using osw.
Reduce an input file to an output file.
Backpropagate an oswr file.
Get a group by id.
Create a new group.
Deletes a group.
Get all members of a group.
Update the members of a group.
Get the effective member count of a group.
Check if a member is effective in a group.
Decrypt a key.
Get the stdout of the current process.
Get the stdout of the process.
Get the stderr stdout.
Get the output of the debug command.
A context manager for interacting with stdin.
Yields the output of the subprocess and waits for it to finish.
Return a context manager for stderr.
Yields stdin, stdout, stderr, and disk_closed.
Write an error message to a file.
Print help to the given file.
Print usage information to file.
Print version information to file.
Resolve an option in the given section.
Return a copy of this clicontext.
Write headers to file.
Generate a temporary URL with the given parameters.
Quote a value.
Get a client from the queue.
Decrypt an AEAD.
Uploads a new account.
Put a container.
Get the body of the manifest.
Create a container with the given path.
Print information about a trans.
Return True if the stream is empty.
Encrypt a key.
Get the status of a github repository.
Get a single pull request.
Returns a generator of pull requests for a given repo.
Mark all published titles as published.
Get a list of all slider items.
Renders a list of all the sliders for the current user.
Acquire reader lock.
Release the reader lock.
Acquire locks for writing.
Remove a task from the queue.
Get a task by its ID.
Returns a list of all tasks in the queue.
Return a dictionary representation of the configuration.
Create an instance from a dictionary.
Initializes the archive manager.
Create a new index in elasticsearch.
JSON encoder for JSON requests.
Writes the given generator to the given writer.
Add a task to the scheduler.
Remove a task from the scheduler.
Yields all the items in the storage.
Validate the arguments for a task.
Parse the arguments for the archiving task.
Publish a job to the queue.
Schedule a job to be executed in a separate thread.
Cancel a job from the queue.
Runs the listener.
Listen for jobs from the RQ server.
Schedules the scheduler to run.
Schedules a task to run.
Cancels a task from the scheduler.
Build the job arguments for a task.
Register a view with the router.
Override the default reverse_action method to allow backwards compatibility.
Get the name of the view.
Return a version string.
Resolve a key to an alias.
Return the engine for the given scheme.
Parse a database and schema from a path.
Parse a database url into a databaseinfo object.
Create a new user.
List users.
Create a new password change form.
Build the URL field and keyword arguments.
Parse a boolean value.
Parse a value as an integer.
Return a parser for the given type.
Create a model dictionary from a model.
Encode a string as a base64-encoded string.
Create a field from a dictionary.
Create a validator for the given data structure.
Returns a list of tuples containing the indices of the unique points in the explored parameters.
Change logging kwargs.
Make the directories for the given filename.
Return a list of all strings in args.
Set the logger for this module.
Extracts the environment and run names from a trajectory.
Check the arguments for the parser and replace them with the given function.
Convert a parser to a stringio.
Find options for multiproc.
Finds the multiproc dictionary for the given dictionary.
Handles parsing of a log file.
Recursive function to handle nested dicts.
Make the logging handlers and tools.
Finalizes the tool chain.
Start the game.
Writes the given buffer to the console.
Test if two results are equal.
Returns True if two parameters are equal.
Decorator for setting up prefix names.
Add parameters to traj.
Run the network algorithm.
Apply an euler scheme to the given traj.
Add parameters to a traj file.
Computes the Levenshtein diff between two Gaussian distributions.
Create a storage service and a set of unused keyword arguments.
Factory function to create a storage instance.
Add parameters to a TIFF file.
Computes the Ressler diff between two values.
Returns True if all parameters in the given traj are explored in a group.
Builds the equations for the model.
Pre-builds the model from the traj and brian list.
Build a model from a traj and brian list.
Builds the model for the given traj Parameters ---------- traj : traj Parameters ---------- network
Pre-builds the traj and brian list.
Builds a connection from a traj and brian list.
Add parameters to a Traj object.
Computes the fano factor of a spike array.
Compute mean-fano factor for each neuron.
Compute mean fano factor for each subrun.
Add monitor objects to the network.
Make the folder for the print plot.
Plot the result of a celia_neuron.
Print the graphs of the given traj.
Analyse the network.
Get the batch number from the command line.
explore a single batch of traces.
The list of variable names for this node.
Return the function to use for this node.
Change the name of the object.
Sets the depth and branch attributes.
Convert a node to a message.
Delete a node from the tree.
Remove a node or leaf from the tree.
Translate a shortcut name to a boolean.
Determine the type of a node based on its name and name.
Create a link for an act node.
Check that the given split names are valid.
Set the details of a tree node.
Iterate over all nodes in the BFS.
Make an iterator over the children of the given node.
Recursively traverse a BFS tree.
Perform a fast search of a node.
Perform a backward search on a node.
Children of this node.
Add a generic group to the network.
Add a leaf to the NN interface.
Return the directory data.
Return a bunch of nodes and nodes in debug mode.
Get the parent of this node.
Remove a link from the network.
Remove this node from the tree.
Get the default value of a file.
Returns a copy of the children of this node.
Returns a list of groups.
Returns a copy of the leaves.
Returns a copy of the links.
Stores this TimeSeries in the specified storage service.
Add a result group to the network.
Adds a derived parameter group to the interface.
Adds a derived parameter to the interface.
Add a configuration group to the network.
Add a configuration to the network.
Add git commit variables to Traj.
Make a git commit.
Flatten a nested dictionary.
Flatten a nested dictionary into a nested dictionary.
Get the argument specification of a function.
Given a function and a list of keyword arguments, return a copy of the matching arguments.
Format a timestamp as a time string.
Convert a port number to a TCP port number.
Create a bunch of directories at the given path.
Resets the start and end times of the interval.
Get the remaining time in seconds.
Return a copy of the dictionary.
Remove a key from the dictionary.
Convert anan to a string.
Make an ordinal result.
Create a shared result from a result.
Store the request data for this trajectory.
Get the data node from the storage service.
Return True if the item is supported by the shared result.
Create a shared data item.
Routine to manipulate multiproc results.
Acquire a lock for a client.
Send a done message.
Close the socket and close the socket.
Start a zmq socket.
Perform a retry on a request.
Acquire the lock.
Listen for messages from the server.
Put data into the queue.
Attempt to detect the current fork.
Handle data messages.
Read data from the server and process it.
Receive data from the queue.
Receive data from the socket.
Stores the given arguments into the storage service.
Store a message in the trajectory.
Store a list of trajectories.
Collect options from a section.
Collect configuration options from the config file.
Interpret the config file.
Add parameters to a traj file.
Plot a pattern.
Cellular Automaton 1D pattern.
Called when an update is made.
Returns the group that this view group belongs to.
Loadeveral items from iterable.
Check the properties of the hdf5 storage service.
Stores all the items in an iterable.
Routine to handle closing routines.
Extract file information from keyword arguments.
Backup a Trj Trajectory.
Reads out a row of a Trj table.
Prepare merge for traj.
Check if the given version matches the given python version.
Loads the exploration parameters from the traj.
Stores the explorations for the given traj.
Store a trajectory. :param traj: trajectory object :param
Create a leaf for the given name in the given hdf5 group.
Recursively store nodes in a hierarchical hierarchical hierarchy.
Add or modify a table entry in the datastore.
Get or create a table.
Get a node by its name.
Inserts all keys in the given dictionary into the given row.
Truncates the string to max_length and returns it.
Creates a new HDF5 group if it doesn't exist.
Create a new trajectory group if it doesn't exist.
Annotate an annotation on a node.
Loads the annotations from the node.
Store a traj group.
Recursively load a group of nodes.
Loads all skeletons from the given traj node.
Extract missing flags from a data dictionary.
Add a summary of the PRM metadata to the table.
Add meta information to a group.
Write a shared array to the HDF5 file.
Write a shared table to the HDF5 file.
Write a dictionary to a pytable.
Write a Pandas dataframe to the datastore.
Write data to other array.
Write data into an array.
Delete a link from the log file.
Get a column from a table.
Get the longest string size in a list of strings.
Read a dictionary from a leaf.
Reads the shared data from the given node.
Internal method to read an array.
Loads a trajectory. Parameters ---------- name : str Name of the trajectory index : pypetconstant
Return the name of a set.
Set the properties of the network.
Add a list of dynamic imports to the list of imports.
Add a new parameter to the model.
Check if a run is completed.
Remove exploration items from the model.
Update the run information dictionary.
Add information about a single run.
Locks all parameters.
Locks all derived parameters.
Finalize the run.
Loads the skeleton from the database.
Makes the reverse wildcards for the current run.
Merge multiple trajectories.
Merge two trajectories into one.
Rename the name of a trajectory.
Merges the config from one trajectory into another.
Merges two trajectories into one trajectory.
Merge results from other_trajectory into rename_dict.
Restores the default values for all experiments.
Set the access value of all exposed parameters to the given index.
Make this node a single run.
Returns a list of run names.
Start a new run.
Set the start time of the run.
Set the run information.
Helper method to construct an instance of a class.
Return a dictionary of parameter values.
Finalizes the run information.
Delete links from the trajectory.
Remove all children from the tree.
Wrapper for _pool_single_run.
Wrapper for _frozen_pool_single_run.
Configure the pool.
Configure the frozen pool.
Process a single run.
Wrapper for _single_run.
Configure logging with the given arguments.
Configures the niceness of the process.
Runs the sigint_handling function in a single run.
Wraps the logging and sigint handling.
Load a class from a class string.
Given a class name and a list of dynamic imports, create a new class.
Returns the length of the range.
Returns a string representation of the value of the lock.
Returns a list of ranges.
Store the data in a dictionary.
Loads the parameter from a dictionary.
Loads the array parameter from a dictionary.
Compare two values.
Return True if the given data is a supported matrix.
Build a tuple of name indices for each parameter in the list.
Reconstruct a sparse matrix from a list of data.
Load a sparseparameter from a dictionary.
Return a dictionary with the contents of the pickle file.
Loads the parameter from a pickle file.
Translate a key to a string.
Return the value as a string.
Return a dictionary representation of the object.
Set a single item in the store.
Return True if the item is supported by the solver.
Returns a dictionary with the keys and values of the stored sparse matrix.
Load sparse parameters from a dictionary.
Set a single item in the pickle file.
Return a dict with the data and protocol pickled.
Load data from a pickle file.
Main entry point for merging all files in a folder.
Create a new session.
Merge all the trajectories into one.
Start all the jobs in the database.
Multiply a vector by another vector.
Runs the nspikes on a neuron.
Post-process the results of a single neuron.
Add parameters to a traj file.
Add an exploration function to a traj.
Extract all sub-runs from a Traj object.
Execute a network run.
Add parameters to all components and analysers.
Runs the analysis on the given traj.
Returns the filename of the explored parameters of a traj.
Return the next item in the chain.
Handle a SIGINT signal.
Reads the configuration from a JSON file.
Request pin information from API.
Requests tokens from the API.
Refreshes the access token.
Get the thermostats from the API.
Write the tokens to the config file.
Set the hvac mode of the thermostats.
Set the fan min on time for an index.
Set the temperature of the hold at the given index.
Delete a vacation from the thermostats.
Resumes the program at the given index.
Send a message to the Rmostats server.
Generate a random delay.
Generate a new timeout request rebinding time.
Generate a random renewing time.
Return a dict of the FSM attributes.
Reset the connection to a new state.
Get the timeout function for a given state and function.
Set the timeout for a given function.
Select the next available offer.
Send a request to the server.
Set the timers for this client.
Process a received NAK packet.
Initialize the event loop.
Timeout for selecting.
Timeout requesting. :returns: None :rtype: None.
Request renewing.
Timeout request rebinding.
Called when a packet is received.
Handle a received ACK request.
Handle a received NAK packet.
Called when an ack is received.
Receive a NAK renewing packet.
Receive a rebinding from the broker.
Process a NAK rebinding packet.
Called when the client is re-established.
Set the value of a field in the model.
Add a field to the query.
Remove a field from the query.
Get the status of the server.
Read a tdms file.
Convert TDMS file to fcs file.
Check if the current working directory is equal to the current working directory.
Create a new quilt patch.
Delete the next patch.
Delete a patch from the database.
Check if a file exists in a quilt patch.
Backup a quilt file.
Add a file to the quilt repository.
Run the quilt command.
Create the directory if it doesn't exist.
Copies this directory to another directory.
Add a link to the file.
Copies the file to the specified destination.
Return the directory object for the file.
Backups the given file to the given destination directory.
Remove a patch from the database.
Apply a new patch to the database.
Apply the next patch to the series.
Apply all of the patches in the database.
Reads the data from the series file.
Saves the series to a file.
Add a new patch to the patch2line.
Insert a list of patches into the patch2line.
Add a list of patches to the current line.
Remove a patch from the line.
Return a list of patches after a given patch.
Return a list of patches before a given patch.
Return a list of patches that match the given patch.
Replace a patch with a new one.
Create the version file.
Check the version of the database.
Add this argument to the given parser.
Add an argument to the given parser.
Add a sub-command parser to the given subparsers.
Set the arguments for the subparsers.
Add sub-parsers to the given parser.
Check if a file exists in a quilt patch.
Add a file in the next patch to the quilt database.
Revert a quilt file.
Import a quilt patch.
Import quilt patches from a list of patches.
Add a way to the way_ids.
Return a list of node IDs that are not present in the graph.
Add a node to the graph.
Build a route from a relation.
Given a relation and a short name, create a route name.
Get the agency id of a relation.
Process the relation file.
Add a relation to the resource.
Patch agency urls and timezones.
Create dummy stops for a trip.
Writes the contents of the archive to a zip file.
Write the contents of the buffer to the destination.
Build an agency object from a relation.
Extract stops from a relation.
Build a shape from a relation.
Returns a list of supported versions.
Send an APDU to the device.
Authenticates the given devices with the given facet.
Register a new app. :param device: device :param data: data to register :type
Authenticate using the InsSign API.
Register U2F devices. :param devices: A list of devices :param params: A
Convert unicode string to unicode string.
Wraps the given class with an error decorator.
Return True iff the filepath matches the pattern.
Get the email address from the remapping.
Get the entry from the given entry_tree.
Convert markdown to REST format.
Starts the flawless server.
Convert a URL to an image.
Convert a string to an Image object.
Check if the size of the image is too big.
Check that the image width is too big.
Check that the image height is too big.
Parses a category from the given item and field name.
Parses the value of the totals field.
Return an iterator over the items in the source file.
Saves an error to the database.
Parses the source file and feeds it to the database.
Parses the given item into a dictionary.
Get an instance of the model.
Save an item to the database.
Download a file from the given URL to the given destination.
Loads the file from the given source.
Return a generator of all the items in the source file.
Sets the allow_network_access flag.
Add one or more files to the sandbox.
Add a new file to the sandbox.
Returns a list of canvas enrollments for a course.
Get enrollments for a given SIS ID.
Get all enrollments for a given section.
Get enrollments for a specific section.
Returns a list of canvas enrollments for a given regid.
Enroll a user in a course.
Get a list of all roles in an account.
Get a list of all roles in an account.
Returns a list of all the roles in the given account that are in the given account.
Get a specific role for an account.
Get a role by its account.
Get a specific course.
Get a course by ID.
Get a list of courses in an account.
Get a list of courses in a given account.
Get a list of all courses in an account.
Get a list of published courses in a given account.
Get a list of courses for a given regid.
Creates a new course for the given account.
Update the sis_course_id of a course.
Get activity by account.
Gets the grades for a term in an account.
Get the statistics for a term in an account.
Get activity by sis_course_id.
Get assignments for a given SIS course.
Get student summaries by sis_course_id.
Get the student activity for a given SIS user.
Get the enrollments for a given student.
Returns a list of external tools in an account.
Returns a list of external tools in a course.
Create an external tool.
Update an external tool.
Delete an external tool.
Raises an exception if any of the required parameters are None.
Get a user by ID.
Returns a list of canvasusers for the given course.
Get a list of users for a given SIS course.
Creates a new canvas user.
Returns a list of all logins for a user.
Update a user login. :param login: Login object :type login: Login object :param
Get the next page from the response.
Get a resource from a given url.
Get a single paged resource.
Helper method to get a resource.
Add a resource to the data provider.
Make a POST request to the data provider.
Generic method to delete a resource.
Returns a list of canvas admins for the given account.
Create a new administrator.
Creates a new Admin by the given SIS ID.
Deletes an administrator from an account.
Deletes an administrator by sis id.
Creates a grading standard for the given course.
Get a specific section.
Get a specific section by ID.
Get a list of all sections in a course.
Get all sections in a given SIS course.
Returns a list of all sections with students in the given course.
Get a list of all sections in a given SIS course.
Create a new section.
Update a section.
Get all quizzes for a course.
Get the details of an account.
Returns a list of sub-accounts for the given account.
Update an account. :param account: The account to update :type account: ~canvasaccount
Updates an account's sis id.
Get the authentication settings for an account.
Update the auth settings for an account.
Get a term by sis_term_id.
Imports the given csv into the SIS account.
Import a directory. :param dir_path: path to the directory to import :param params
Get the status of an import.
Builds a zip archive from csv files.
Returns a list of Assignment objects for the given course.
Updates an Assignment. :param assignment: Assignment to update :type assignment: Assignment
Returns a list of all available reports for the given account.
Get a list of all reports of the given type.
Create a new report.
Create a course provisioning report.
Create a course sis export report.
Create a new unused courses report.
Get data from a report.
Get the status of a report.
Deletes a report.
Move all detections in a label.
Flip the detections in a label by w.
Get a dictionary from an object.
Get configuration from settings.
Return the empty value.
Create metrics from a list of metric configurations.
Set up the logging for this instance.
Configure the registry to use additional collectors.
Create metrics from a list of configs.
Get a metric by name and labels.
Handle the home page.
Handle the metrics request.
Send a query to wolframalpha.
Fix the content type and parameter of the http message.
Send a query to the API.
Return a list of pods assumptions, warnings, warnings.
Return a generator of all pods that are primary or title.
Encode a request with the given data.
Make a GET request to the API.
This API endpoint allows you to delete a file or directory.
Make a PUT request to the API.
Make a POST request to the API.
Returns a list of sentences grouped by length.
Disambiguate a PDF file.
Disambiguate a query.
Segment the given text with the segmentation service.
Get the language of the given text.
Get information about a concept.
Fits the ensemble to the given features and classes.
Computes the accuracy score of the ensemble.
Fits the model and predicts the model.
Computes the accuracy score for the given class labels.
Transforms a set of features into a single feature.
Computes the score of the model.
Create a vector from an iterable of members.
Create a vector from a list of members.
Compile and execute a file.
Compiles and executes the given stream.
Compile and execute a string.
Creates a bootstrap repl module.
Run the basilisp compiler.
Add a method to the map.
Add a method to the multifunction.
Remove a method from the map.
Remove a method from the multifunction.
Return True if the given variable is a macro.
Return the line and column index of the given form.
Raise an exception if the node is not a recur.
Assert that the given node is a tail statement.
Resolve a bare symbol.
Resolve a sym.Symbol.
Parse an AST form.
Whether or not the variable should be shadowed.
Return a string representation of the given list of entries.
Return a string representation of a sequence.
Fallback representation of an object.
Recursively fix missing locations.
Compiles the given form and executes it.
Compiles a module and executes it.
Compiles the given list of reader forms into a Python module.
Compiles the given bytecode into the given module.
Return the next element of a sequence.
Convert a string to a munge string.
Create a Fraction instance with the given numerator and denominator.
Get a logging handler.
Map a list of key-value pairs.
Partition a collection into n partitions.
Read a namespaced string.
Read a collection from the reader.
Read a list from the reader.
Read a vector from the reader.
Read a mutable map.
Read a string from the stream.
Read a SymPy symbol.
Read a keyword from the reader.
Reads the next consuming comment.
Read a quoted comment.
Expand syntax quotes.
Read a syntax-quoted form.
Read consuming comment.
Read a character from the stream.
Read a regular expression from the file.
Reads a macro from the reader.
Read next consuming comment.
Read the next token from the reader.
Read a string from a string.
Read a file and return an iterable of readerforms.
Update the location of the cursor.
Pushes the current index back to the stack.
Read the next token from the stream.
Return the bytecode of a Basilisp file.
Get a bytecode from a Basilisp file.
Return the cache file name from a source file.
Add imports to sys.meta_path.
Find a module specification by name.
Execute a cached module.
Compile and compile a Basilisp module.
Executes the given module.
Create a new symbol.
Complete the given text with the given interns.
Get or create a keyword.
Return a keyword with the given name and namespace.
Return the dependencies and nodes of the given PyAST.
Return a generator for a collection of AST nodes.
Add line and col offsets to py_ast.
Decorator to wrap a function to return a generator with a line number and column location.
Decorator to wrap a function to return a generator that returns a generator that yields a generator that
Return True if the given variable is dynamic.
Return True if the given variable is redefable.
Convert an ast.Expr to an ast.Expr.
Compile a function expression into a function definition.
Convert a do node to a Python AST.
Return the name of a function.
Convert function arguments to Python AST nodes.
Convert a single-arity function to a Python AST.
Convert a single or multi-arity function to a Python AST.
Convert the if body node to a Python AST.
Return a Python AST for the given invoke node.
Convert a `quote` node to a Python AST node.
Loops through the recur tree to generate a Python AST.
Convert a recur node to a pyast.
Convert a set Bang to a PyAST.
Convert a Throw node to a Python AST.
Convert a Try node to a PyAST.
Convert a local sym to a pyast.
Convert a variable name to a pyast object.
Convert a variable symmetrized variable to a pyast.
Convert an interop property to a Python AST.
Convert a class to a Python AST.
Convert a MaybeHostForm node to a Python AST node.
Convert a constant value to a Python AST.
Convert a collection literal to a Python AST.
Generate a Python AST node.
Return an iterable of ast.Import objects.
Return an ast.importfrom from a module import.
Create an ast.Assign node for a variable.
Return a set of members.
Return a set of members of the set.
Return an AST node for an except handler.
Return `node` if `node` is an expression.
Return an AST node for a functiondef.
Return an ast.While node.
Return a copy of the try node.
Create a new module with the given name and doc.
Return the first element of a sequence.
Return the rest of a sequence.
nth rest of a collection.
Return the next nth element of a sequence.
Return a list of consonants of o.
Convert an object to a sequence.
Concatenate multiple sequences.
Associative version of lmap.map.assoc.
Return a consonant of a collection.
Attempt to convert an Ideref into a blockingderef.
Check if two values are equal.
Divide two numbers.
Sort a collection by a function.
Return True if the collection contains the given key.
Get a value from an iassociative object.
Convert an object to a lisp string.
Convert an object to a Python object.
Return a human-readable representation of an object.
Collect arguments from a tuple or tuple.
Decorator for Basily lisp functions.
Resolve an alias to a symbol.
Resolve a variable by its alias.
Add a generated python variable to the generated python value.
Interns a namespace with a value.
Interns a namespace with the given name. :param ns: Namespace name :param name:
Given a namespace and a name, return the name of the namespace.
Find the name of a symbol in the namespace.
Finds the symbol with the given qualified symbol.
Add a default import for the given module.
Add an alias to the symbol.
Interns a symbol with the given var.
Intern a symbol with a new variable.
Finds an entry for the given symbol.
Add an import to the symbol.
Return the module for the given symbol.
Add a reference to a symbol.
Return the reference for the given symbol.
Returns a new map with all the refernces.
Refer all namespaces in other_ns.
Get or create a namespace from a namespace map.
Get or create a namespace.
Get an entry by its name.
Remove a namespace from the map.
Autocomplete for alias completion.
Autocomplete for imports and aliases.
Autocomplete for interns.
Returns a list of completions for the given value.
Completes the given text. :param text: The text to complete.
Return the list of arguments to be passed to the function.
Return a list of members.
Return a list of members.
Decrypt a JWE token.
Encrypts a JWT using the given key store.
Delete an item from the cache.
Return a tuple of selector, comparison and argument.
Parse a fiql string to an expression.
Dump a model to a file like object.
Handles the JSON serialization of an object.
Decode a date string to a date object.
Decodes the given value to a date.
Return the default encoding for the given object.
Validate leicacam version.
Perform a robust topological sort of a graph.
Set the parent expression.
Return the parent expression.
Add an element to the expression.
Add an AND operator to the expression.
Add an OR operator to the expression.
Parse a received message.
Convert a list of tuples into a dictionary.
Check if a message matches a given command.
Prepare a send message.
Flush all buffered messages from the socket.
Enable or disable a slide.
Saves the template to disk.
Get information about the device.
Locate the systemjs package json.
Parses the package json file.
Handle an API error with a JSON response.
Validate the response from yourls API.
homogenizes two wavelength vectors.
Interpolates the indep_vector to the indep_vector.
Get the indep vector between two wavelengths.
Verify that wave_a and wave_b are compatible with wave_b.
Loads the systemjs manifest.
Return a namedtuple containing the parameter names of the callables.
Expand a short URL.
Get the URL stats for a given short url.
Returns a list of db stats for the given filter and limit.
Get db stats.
Split an iterable into chunks of size chunksize.
Flatten an iterable.
Print a tab-separated table.
Create a dummy class.
Convert a human-readable string to an instance of this class.
Runs trace on the specified module.
Return a list of links.
Append a common entry to the plist.
Make a multi-entry entry for each Python version.
Convert a list of ops to a list of words.
Split noise into chunks.
Splits a chunk of data into separate chunks.
Interpolate indep_vector to indep_min and indep_max.
Build a list of units for a given operation.
Create a copy of the wavelength with the given desc and fpointer.
Compute the running area of a mesh.
Validate that indep_min and indep_max are indep_min and indep
Calculate the arccos of a wave.
Acosh a wavelength matrix.
Convert wavelength to arcsin.
Return the arctanh of a wave.
Return a copy of the wavelength matrix.
Return the group delay of a wave.
Logarithm of a wave.
Return the square root of the wavelength.
Return a copy of the wavelength matrix with complex values.
Convert wavelength to float.
Return a copy of the wavevector.
Return a list of systemjs output directories for the given path.
Extract the short description from a short description string.
Build an expression from a list of tokens.
Remove the next item from the list.
Return a list of functions for the given expression.
Parse an expression.
Remove the consecutive delims from the expression.
Convert a number to an English tuple.
Convert a number to a scientific notation.
Return the Peng float representation of a string.
Return the fractional part of a string.
Return the Peng mant number from a string.
Check if the application needs an extension.
Runs the bundle command.
Trace the given application. :param app: the application to trace :type app: str :
Return True if all the hashes in the dependency tree match the hashes in the dependency tree.
Format a hexdump string.
Parse a docstring into a dictionary of parameters and returns.
Return a list of valid identifiers.
Decorator for adding to the context.
Split a line by quotes.
Check if the context has been initialized.
Return help text for builtin functions.
Find a function in the given context.
Return a listing of all functions in the given context.
Return True if the argument is a flag.
Extract the value of an argument from the remaining list.
Invoke a command on a string.
Classify a section name.
Classify a single line.
Return a list of paragraphs.
Convert a value to a type.
Convert a binary value to the given type.
Get the size of a type.
Check if the given type name is known.
Split a type name into base, bool, list of subtypes.
Instantiate a type and inject it into the type_factories.
Check if the given type has a known format.
Load a type from a module.
Add a parameter to the type.
Set the return value for a typed type.
Add a custom return value to the return_info attribute.
Return the name of a short parameter that matches the given name.
Returns the type of the parameter with the given name.
Format the return value.
Convert an argument to a positional value.
Convert an argument to a type.
Return a string representation of the message.
Return a dictionary representation of the message.
Check and execute a function with the given arguments.
Parses a list of validator names and arguments.
Finds all of the objects in the given container.
Create a context from a module.
Return a help text for the given function.
Decorator for methods that cannot be decorated.
Mark a function as annotated with the given name.
Return a short description of a function.
Load the project modules.
Installs the breadcrumbs.
Print all registered tasks.
Uninstalls a breadcrumb from the crontab.
Create a new resource in the registry.
Load the project configuration from a yaml file.
Save the project configuration to a YAML file.
Returns a dictionary of all projects that are dependent on this project.
Initialize the project with the given path.
Raises an exception if the function is not implemented.
Apply the function f to the state.
View the fold.
Convert the fold to a list of the given state.
Apply a function over this setter.
Set the value of the property.
Iterate over an iterable.
Return the kind of the optics.
Main entry point for the game script.
Return a new vector with the step towards of another vector.
Handles the input of the game.
Advances the robots by the number of crashes.
Ends the game.
move a board.
Plays the game.
Makes a move to the specified position.
Return the winner of the game.
Yields the winners and losers of the game.
Add an item to the queue and upload it to the server.
Open a new spider. :param spider: The spider to open.
Upload a chunk of data to S3.
Make a gzipped file object.
Gets the state of an account.
Gets the state of an asset.
Returns the hash of the block at the given index.
Returns the block system fee for the specified block.
Returns the state of a contract.
Returns the raw transaction with the given hash.
Get the value of a storage script.
Returns the output of a transaction at the specified index.
Invokes the given script with the given params.
Invokes the specified function with the given parameters.
Invokes a script on the server.
Sends a raw transaction.
Validates that an address is valid.
Make a call to the server.
Return True if s is a hash-256 string.
Check if a string is a hash160 string.
Encodes a list of contract parameter values into a list of contract parameters.
Decode an invocation result.
Apply this filter to the given dttm and return the result.
Render and save the template to a file.
Render the barcode.
Renders the given code.
Entry point for the command line interface.
Download a file from S3.
Upload a local file to S3.
Downsync a section of a configuration file.
Show the difference between the local configuration and the local configuration file.
Parse an environment variable.
Set basic credentials.
Add a base64-encoded API key to the config.
Get JSON content from a folder.
Get all schemas in the json_path.
Get the schema from the schema folder.
Get the refresolver object for this schema.
Validate the given object against the current schema.
Returns a list of all valid examples.
Returns a list of all invalid examples.
Returns the URL for the user with the given scope.
Process a URL and return the authentication code.
Get an auth token.
Get the user id.
Lists all folders in a folder.
Create a new directory.
Add a comment to an object.
Decode a Python object.
Set the drop target for the given object.
Start dragging the image.
Set default designer and inspector.
Inspects the given object and displays it.
Migrate a font from one place to another.
Loads the current page from the given location.
Sends a message to the user.
Makes sure that the tip is well-come.
Handle mouse down events.
mouse_move event handler.
Handle key press events.
Deletes all objects from the selection.
Duplicates the current selection.
Refresh the snapshot of the object.
Calculates the best position for the given widget.
Returns the pydata for the given item.
Set the data of a wx item.
Finds the data for a given Python data type.
Delete an item from the list.
Delete all items from the list.
Clear all columns from the table.
Set the selected item in the container.
Returns a list of string selections.
Set the data for the item n.
Appends a string to the end of the list.
Get the parent of an object.
Add a child to the Sizer.
Set the parent of this component.
Draws the background of the tile.
Erase background event handler.
Paints the font, text, and label.
Return a sorted list of column headings.
Resets the grid to the latest values.
Updates the values of the table.
Updates the column attributes in the given grid.
Sort a column by name.
Clears all cells from the grid view.
Create a combobox with the given id.
Begin editing of a row and column.
Changes the value of the cell in the specified grid.
Return True if the given event is an accepted key.
Set the selection of the starting key.
Enables or disables all menu items.
Returns True if all items in the menu are enabled.
Enables all menu items.
Returns True if all menu items are enabled.
Remove a menu from the menu list.
Set the object tag.
Autosummary table visit html.
Return a documenter for the given object.
Mangle a signature string.
Import a module by its name.
Link a role to an object.
Show an alert message.
Prompt user for text.
Displays a dialog to select a font.
Show a color dialog.
Prompts the user to choose a directory.
Finds the first word in the database.
Set whether or not this item has children.
Set the icon for the wx object.
Parse a file and return a Python datetime object.
Save a file to disk.
Builds a new window.
Build a component from a dictionary.
Convert a python card property name to a python card property name.
Set the data in the clipboard.
Find the autosummary of a module in a docstring.
Load an object into the tree.
Inspects the tree for the given object.
Activates an item in the tree.
Update the tree with the given object.
Show context menu.
Convert the given value to a hyperlinked image.
Check if the given path exists.
Assert that the given path has no current path.
Select an option.
Returns a webdriver instance for the given browser name.
Return the XPath expression of the expression.
Switches the current scope to the given frame.
A context manager to accept an alert.
Prompt the user to accept a message.
Dismiss a modal dialog.
A context manager for accepting prompts.
Dismiss a modal dialog.
Saves the current page to a file.
Saves the screenshot to the specified path.
Raises the server error if there is an error.
Returns True if the element identified by locator has checked field.
Returns True if the element identified by locator has no checked field.
Returns True if the element identified by locator has an unchecked field.
Returns True if the element identified by locator has no unchecked field.
Check if the given title exists.
Test if the given title has no title.
Return the inner content of a node.
Return the inner text of a node.
Normalizes the given URL.
Returns True if the error should be caught.
Compare the number of rows in the result cache.
Return True if there are at least size results.
Return True if any of the options is None.
Create a failure message.
Check if the given count matches the given options.
Normalizes the given text.
Normalize whitespace in text.
Convert text to a regular expression.
Determine if the current URL matches the expected URL.
Resizes the window to the specified width and height.
Starts the responsive server.
Decorator to add a cgetter function to this object.
Set the instance method.
Sets the class method.
Return the traceback of the log file.
Return the source code for the object.
Return the logger for the given instance.
Set the logger to use.
Make a call to the API.
The list of channel names.
Returns a list of all users.
Create a message for a channel.
Translate Slack message.
Sends a message to Slack.
Read a channel from the channel layer.
Runs the Slack API.
Runs the channel layer.
Return a dict with the keys that differ from the given dict.
Colorize a message with the given color.
v2 playbook on task start.
Print a playbook on the given stats.
Print the status of the skipped task.
Convert a prefix to a network address mask.
Add a model to this element.
Load all filters from the Jinja environment.
Find a YANG file in the directory specified by `filename`.
Make an HTTP POST request.
Returns the authorization code URI for the request.
Get a token by code.
Return a dictionary of query parameters for the given URL.
Dequery a URL.
Build a URL from a base URL.
Handle an exception raised by the client.
Create a response object.
Make a redirect error response.
Make a JSON response.
Get the authorization code for a client.
Refresh a refresh token.
Get an access token for a grant.
Get the authorization code from the given URI.
Get a token from POST data.
Returns the Authorization object for this request.
Opens the device and closes it.
Read a single byte from the device.
Read a number of bytes from the device.
Read byte data from device.
Write bytes to the device.
Write byte data to the device.
Write block data to I2C device.
Create a copy of the object.
Create a local copy of the CDN.
Construct a FileInfo object from a file info dictionary.
Uploads a file object to the specified store.
Returns a list of file CDN URLs for this group.
Construct a Group object from a dictionary.
Create a new group from a list of files.
Perform a base operation on the server.
Yields the UUIDs in the sequence.
Helper function to create a list from an api_list_class.
Draws a bar chart.
Get home mode status.
Get a list of all cameras.
Returns a list of camera objects.
Get a snapshot of a camera.
Enumerate motion settings for a camera.
Saves a photo of a camera.
Update the camera settings.
Return True if the given li is the last element of the given meta data.
Yields the nodes of a single list.
Get the value of the LVM in the given namespace.
Get the v-merge element of a Tr element.
Get the grid span of a given tc element.
Get the td at the given index.
Check if the given style is false.
Return True if r is bold.
Check if the given R is an italicized style.
Return True if r is an underline style.
Return True if the given element is a title element.
Returns a generator of text run content elements.
Given a tree, return a dictionary of information about each relationship.
Get the type of ordered list.
Builds a table element.
Get the content of a tag.
Remove tags from the tree.
Find a file in the specified dataset.
Load a MNIST file.
Plot a list of images.
Plots the layers of the network.
Plot the filters in a single plot.
Encodes the given text into a list of floats.
Add convolution weights to the parameters.
Decodes a z-value into a graph.
Compute the score of the encoder.
Predict the outputs of the model.
Predict the probability of being the last layer.
Predict the logit of the last layer.
Returns a list of all the variables in the group.
Computes the accuracy of the model.
Build an activation from a string.
Generate a reservoir of n random numbers.
Add a new loss to the model.
Train the model and return a list of all monitors.
Build a graph from a list of regularizers.
The list of input layers.
Returns a list of all variables in the loss.
Saves the object to a pickle file.
Load network from file.
Computes the loss of the model.
Build the updates graph.
The size of the output image.
Resolve the input shapes for the given layers.
Resolves the output shapes of the model.
Logs the current state of the model.
Returns the logarithm of the parameters.
Format the given string.
Resolve a shape from name to output name.
Find a parameter by its name.
Add a bias to the model Parameters ---------- name : str Name of the model to add size :
Return a dict representation of the model.
log-gabor approximation of the log-gabor approxim
Logarithmic log-gabor image.
Add a new tier.
Remove a tier from the list.
Returns the tier with the given name.
Convert to an eaf object.
Add a new point to the tier.
Add an interval to the tier.
Remove an interval from the tier.
Remove a point from the tier.
Returns an iterator over all intervals in the series.
Returns a sorted list of all intervals in this tier.
Indent an element by level.
Add an annotation to a tier.
Add a CV description to the vocabulary.
Add an external reference.
Add a new lexicon reference.
Add a linguistic type to the model.
Add a locale for a given language.
Remove all time slots from all tiers.
Extract an annotation from a tier.
Generate an annotation id.
Generate a unique time slot ID.
Returns a list of tiers with the given id.
Returns the full time interval of the time slots.
Gets the annotation data after a given time interval.
Gets the annotation data before the given time.
Returns a list of tier IDs for a particular linguistic type.
Remove all annotations from a tier.
Remove a CV description from the vocabulary.
Remove a license from the registry.
Remove all linked files from media descriptors.
Remove a property from the container.
Remove an annotation from a tier.
Remove secondary linked files.
Remove a tier from the cache.
Remove tiers from the schedule.
Rename a tier from one tier to another.
Shift the annotations to the given time.
Prints a debug output for the given storage dict.
Get the level of embedding.
Embeds all bids and overrides in the given storage.
Resolve synonymous types.
Reverse a contiguous sequence of characters.
Reorder resolved levels in a string.
Normalise the current file.
Add an attribute to an object.
Command-line interface for the command line tool.
Manages the backwards compatibility of the given binding.
Shows the top-level GUI.
Discovers all registered GUIs.
Add a script to the file menu.
Context manager that ensures that the current selection is maintained.
Context manager that ensures that the current time is maintained.
Show a message box with no GUIs.
Yields the cumulative sum of the data.
Returns a list of values for each axis in the dataset.
Draws a constant line.
Loads the transform parameters from the graph.
Given a mapping, return a new mapping.
Generate a range of floats between start and stop.
Add a new configuration to the configuration.
Draws the graph and renders it.
Calculate the left margin of the chart.
Calculate the right margin of the key.
Calculate the top margin of the graph.
Add a popup to the foreground.
Calculate the bottom margin of the chart.
Draws the graph.
Makes text for a data point.
Draw the x-axis labels.
Draw the y-axis labels.
Draws guidelines on the x-axis.
Draw guidelines on the y-axis.
Draws the titles of the graph.
Render inline styles.
Starts an SVG document.
Return a list of all stylesheets.
Run an IRC bot. :param bot_class: :param host: :param port
Send data to the socket.
Connect to the server.
Send a message to a specific channel or nick.
Return a tuple of patterns that can be used to dispatch messages.
Create a new nick and register it.
Handle a ping message.
Called when the client is registered.
Prompts the user to enter an event loop.
Registers the node with the boss.
Runs the task runner.
Return a tuple of command patterns.
Register a success message.
Queue a task to be executed.
Add a new nick to the queue.
Send validation email to the user.
Send a password reset notification.
Verify a user's email address.
Deletes the current user.
Overrides allow_request to allow requests.
Return the Docker client for this container.
Return a tuple containing the certificate and key of the client.
The name of the service.
Call a docker method.
Executes a docker command.
Poll the docker service and return the number of tasks running.
Stop the Docker container.
Filter the queryset based on the value.
Update the password of an instance.
Update the password with the validated data.
Validates an email address.
Create a new token.
Deletes a token from the database.
If the user is not authenticated, raise permissiondenied.
Send validation email to user.
Update the expiration date.
Return the context for the password reset email.
Handler for notification email.
Handler for password reset email notification.
Handler for email validation.
Authenticates the user with the given key.
Authenticate user and token.
Display a notebook.
Process a list of HV plots.
Create a custom JS callback for this change.
Returns the widget with the given name.
Renders the given object using the given view.
Create a text input with the given keyword arguments.
Given a list of objects, return a list of named objects.
Get the owner of a method.
Assigns the authentication values to the user and password attributes.
Ping the server.
Get information about the device. :param params: :return:.
Get the health of the node.
Convert a number of bytes to a readable string.
Returns the total load of the CPU.
Return the number of bytes in memory.
Returns the number of bytes that the network is up.
Returns a list of volumes.
Returns the volume with the given id.
Return the size of a volume in bytes.
Returns the percentage used for the given volume.
Return the average disk temperature of a volume.
Returns the maximum disk temperature of a volume.
Returns the disk with the given id.
Login to the API.
Perform a GET request to the URL.
Execute a GET request.
Update the settings of this instance.
Get the synoutilization object.
Get the syno storage object.
Return a context for the given request.
Get the tenant token.
Builds the attributes of the widget.
Return a copy of the current settings with the given apps.
Remove apps from settings.INSTALLED_APPS.
Return a dictionary of all global settings.
Respond to GET request.
Change the value of a key in the config file.
Migrate a config file.
Start the web server.
Wait for the server to respond.
Get new access information from the server.
Check if the token is present.
Set the access credentials for the current connection.
Create a DynamoDB manifest table.
Split a full path into bucket and prefix.
Check if a bucket is Glacier.
Remove empty values from a dictionary.
Add a run to the manifest.
Returns True if the run is in the manifest.
Extract a schema from a URI.
Given a schema, fix it.
Parses the given unstruct string and returns a list of tuples.
Transform a line of JSON into a good event.
Given an event, return a JSON representation of the event.
Get the name of the template that is used in the response.
Print a list of Django context blocks.
Prints the list of variables in the given context.
Pretty-print a SQL string.
Pretty-print a Django context.
Pretty-print a dictionary as HTML.
Replaces special characters in the given text.
Formats the given object using the prettyprinter.
Pretty print the given object to the given stream.
Get a token from a string.
Return a list of LaTeX nodes from a string.
Convert LaTeX text to plain text.
Convert a LaTeX document to text.
Convert an ASCII string to an ASCII string.
Fetches information about organisms.
Fetches boards from the API.
Returns a list of members of the organization.
Update an organisation. :param query_params: :return:.
Remove a member from the cluster.
Add a member by ID.
Add a member to a group.
Fetches information about the list.
Add a card to your account.
Fetches label information.
Fetches all items from the API.
Update a label name.
Update the label dictionary.
Get the authorisation URL for the given application.
Fetches card information.
Fetches a board from the API.
Fetches a list from the API.
Fetches a list of all the checklists.
Adds a comment to the user's comments.
Add an attachment to a multipart upload.
Add a new checklist to the account.
Add a label from a dictionary.
Add a label from a class.
Add a member to the cluster.
Fetches information about the members of the organization.
Fetches a list of cards from the API.
Fetches a list of organisations from the API.
Create a new board.
Fetches board information for this board.
Returns a list of lists.
Fetches a list of labels.
Fetches a specific card.
Returns a list of all available checklists.
Fetches an organisation from the API.
Update a board. :param query_params: query parameters :type query_params: dict
Add a new list to your account.
Adds a label to the list.
Fetches information about the checklist.
Get the details of a card.
Get a list of all items in this checklist.
Update a single checklist.
Add a new item to your account.
Remove an item from the repository.
Update the name of a checklist item.
Update the state of the checklistitem.
Add authorisation to the query params.
Check if the given response has an error.
Build a URI from the given path and query parameters.
Fetches a JSON response from the API.
Create an organisation.
Create a new board.
Create a new label.
Create a new list.
Create a card in Trello.
Create a new checklist.
Create a new trolly member.
Get an organism.
Get a board by id.
Get a list.
Get a card by id.
Get a specific checklist.
Get a single member.
Extract the domain from a URL.
Convert text to raw text markup.
Set the password for a service.
Split text with locations.
Mark a regex as being split.
Mark text as beginning of the end of the regex.
Main entry point for the command line interface.
Create a Cipher object.
Get the mode of the cipher.
Return the priority of the job.
Check the scheme of the config file.
Called when a message is published.
Return the id of the object.
Connect to the broker.
Called when the client acknowledges the connection.
Encode a string into a byte array.
Decode a string.
Encodes a 16 bit integer into a byte array.
Return a bytearray of the length of the given value.
Decodes a length encoded string.
Encodes the message into a string.
Encode the message into a byte string.
Decodes the given packet.
Encode the result into a string.
Decodes the given packet.
Decodes the given packet.
Encode the message into a byte string.
Encode the message into a byte string.
Decodes the given packet.
Encode the message into a string.
Encode the message into a byte string.
Decodes the given packet.
Decode a packet.
Returns the URL for the request.
Make a request to the API.
Refresh the list of blocks.
Formats the given data into a series of nominal values.
Apply the scaler to the data.
Fit k-means to data.
Predict clusters using the classifier.
Maps the given number of clusters to the given sampled.
Sort the clusters by the number of clusters.
Get the date from a datetime object.
Returns the total number of points in a dictionary.
Returns the maximum time span of all diches.
Return a dictionary of values for a unit-picker.
Return a pretty-printed representation of an element.
Convert an analyte string to namemass string.
Convert an analyte string to a mass name.
Collate data in a directory.
Enumerate a boolean array.
Convert a list of tuples to a boolean array.
Fast smoothing function. :param a: array of numpy arrays :param win: number of
Gradient of a using rolling window.
Find the indices of the minimum values in x and y.
Cluster meanshift on the data.
Cluster k-means data using cl.kmeans.
Get the set of defined SRMs.
Read LaTeX configuration.
Read LaTeX configuration file.
Copies the SRM file to the specified destination.
Exclude a downhole filter.
Create a range plot of the time series.
Calculates the number of times each time step corresponds to the number of times each time step corresponds
Calculates the ratio of the analytes.
Calibrate the time series using the calibrate function.
Returns a dictionary of all the ablation times of the time series.
Calculates the correlation between two points.
Add a new filter to the filter list.
Returns a dictionary of the parameters of the filt.
Plot a series of histograms.
Load reference data.
Calculates the sum of all elements in a molecule.
Generate namedtuple with keyword arguments.
annihilate a predicate onto a stack.
Dedup a stack of tuples.
Computes the weighted statistics of the gaussians.
Computes the Gauss-Semi-Semi-Semi-Semi-
Computes the standard deviation of the error of an array.
Get the samples for the given subset.
Calculates the ratio of the current stage.
Make a subset from a list of samples.
Apply a classifier to a set of samples.
Filter the subsets by n-removed.
Filters the samples using the given filter.
Generate a bunch of traces for each sample.
Save the log to a file.
Apply a function to each element of a sequence.
Bayesian scale.
Calculate the median scaler for a given set of values.
Noise-despike algorithm for a signal.
Estimate the noise of a signal using the exponential decay coefficients.
Add a new component to the index.
Remove a component from the model.
Clears the state of the model.
Remove unused components.
Return the value of fuzzmatch for the given fuzzkey.
Grab a component from a key or a key.
Return information about the component.
Write a log to a file.
Read a log file and return a list of run arguments.
Get information about the modem.
Send a message to the eternale Gypt device.
Parse a mysql file or string.
Return a link to the nbviewer page.
Returns the HTML for the thumbnail.
Returns the code div for this snippet.
Returns the code example.
The URL of the view.
Get the output file name.
Create the py file for the notebook.
Returns the download string for the given list of files.
Create a thumbnail for the current image.
Scales an image by max_width and max_height.
Saves the image to the thumbnail file.
Copies the thumbnail figure to the output file.
Returns the URL for the given nbfile.
Yields the language codes for the given field.
Process a thumbnail file.
Saves the image to disk.
Returns a list of all thumbnails.
Creates a new thumbnail with the given size.
Deletes the image with the given size.
Create a new thumbnail.
Get a thumbnail from a file.
Delete a thumbnail from the storage backend.
Called when a message is received.
Add a callback to be invoked when a number is received.
Returns a set of all states that have been accepted or expired.
Send a message to the server.
Returns a mapping of receiver blueprint names to receiver blueprints.
Receive a message from the gateway.
Receive a status from the provider.
Forward an incoming message to all connected clients.
Sign a web3 transaction.
Estimate the gas at the given address with web3.
Estimate the gas of a transaction.
Write bytes to the file.
Read a line from the serial port.
Check if the message has any bad headers.
Attach an attachment.
Registers the given services.
Create a configuration object from a module.
Register a set of resources.
Require a key to be present.
Exit an object. :param obj: the object :type obj: str :type obj:
Sets up the data manager.
Return the number of ngulants of a given wavelength.
Calculate the cauchy equation for a given wavelength and coefficients.
Delete a resource from the API.
Determines if two file paths are the same.
Create a link in a directory.
Initialize the logging module.
Raises a usage error.
Takes a list of file_readers and returns a list of unclaimed VCF
Returns the column header as a string.
Claim a set of VCF readers.
Initializes the population statistics from the vcf file.
Takes a list of unclaimed file readers and claims them.
Split data into lines.
Return the line terminator that starts with the given data.
Return the line terminator that ends with ``data``.
Seek to the next line in the file.
Move to the previous line.
Return the last lines of the file.
Return the first lines of the file.
Follow the file.
Claim a set of file readers.
Parse a VCF record.
Extract sample tag values from a vcf record.
Returns a set of all tags in the vcf record.
Join info fields into a single string.
Return the format field for this sample.
Return the field name for a sample.
Return a string representation of the tag.
Add a sample tag value to the list of sample values.
Add or replace a filter.
Return a list of all available categories for the given user.
Return a products form for the given category and list of products.
Create a staff products form.
Add an error for a product.
Create a form class for the given model.
Returns a list of items pending or purchased.
Send an email to a specific email address.
Parse an OSM file.
Iterate over OSM notes in a given interval.
Return True if the user passes the filter.
Returns True if the given user is met.
Returns the number of units remaining for the given user.
Filters carts that are not released.
Filters carts that are not paid or disabled.
Apply pre-filter to the queryset.
Filters the queryset of proposals that have been submitted to the user.
Apply pre-filter to user's conditions.
Creates an instance of the Commerce cart for the given user.
Autoextend the reservation to the maximum number of reservations.
Apply a voucher code to the cart.
Check that all vouchers in the cart are not available.
Recalculates the discounts for all items in the cart.
Iterate over the rows of the table.
Returns the form for the given request.
Renders the given data.
List all reports.
List the items that have been marked as trashed.
List of payments for this account.
Shows the list of refunded notes.
Show the status of a product.
Show the status of all discounts.
Show all line items for a given category.
Get invoices paid by date.
Displays the list of available credit notes.
List invoices.
Return a list of attendees.
List of speaker registrations.
Return a set of all available categories.
Return the number of unclaimed credit notes available for this account.
Return True if the ticket is sold out and unregistered.
View function to edit a profile.
Handle a profile request.
Handles a product request.
Handle a voucher request.
Allows a user to enter a manual payment.
Refund an invoice.
Extends a user's reservations.
Send email to all invoices.
Show badges for all invoices.
Render a badge.
Return a list of available discounts for the given user.
Annotate the queryset with the past_use_count.
Return a list of all available products for the given user.
Applies this application to an invoice.
Returns an invoice with the cancellation fee multiplied by percentage.
Generate a random access code.
Get an object from a module name.
Create an invoice for the given cart.
Generate a manual invoice.
Apply all credit notes to an invoice.
Check if the invoice can view the invoice.
Refreshes the invoice from the database.
Validates that the invoice is allowed to pay.
Updates the status of the invoice.
Marks the invoice as paid.
Checks if the invoice matches the current cart revision.
Update the validity of the invoice.
Marks the invoice as void.
Refund the current invoice.
Sends an email to an invoice.
Update the annotation with the given data.
Flatten a field into a nested dict.
Print the downloads.
Download a single field from the gencloud.
Get a list of processors.
Print the names and types of the processors.
Run data from a string.
Upload a processor to a project.
Upload a file to the server.
Download the given data objects from the API.
Returns a list of all subclasses of a class.
Get repo and project information.
Get variant phenotypes with suggested changes.
Get variant phenotypes with conflicting changes.
Update this element.
Remove duplicates from a sequence.
Authenticate with Asana.
Prompts the user to enter a list.
Get the data for the given issue.
Moves the data of an existing issue to a new location.
Get the data for a task.
Get Asana task by ID.
Apply a value to a key.
Flushes all items from the queue.
Create a missing task in Asana.
Return the set of data types for this project.
Log a string to the Ekmmeters log.
Initialize the serial port.
Sets the max_waits and wait_sleep values.
Render the JSON reads since the given timestamp and meter.
Set the context string.
Calculates the cost of a PF.
Set the max-demand period of the connection.
Set the password for a meter.
Returns the current month buffer for the given direction.
Assign a schedule to the schedule.
Assigns the schedule to the given season and month.
Assign holiday date to model.
Read schedules from the device.
Read month tariffs.
Read all the Holiday Dates from ElkM1.
Return True if read settings have been set.
Write a command message.
Sends a password to the serial port and returns True if successful.
Update the observer list.
Sends a request to ElkM1.
Request a meter.
Request B data from the device.
Make sure all the fields are in the same order.
Uses the LCD command to display a list of items.
Set a relay for a given number of seconds.
Postend the serial port.
Set the pulse input ratio.
Set the resettablekwh command to zero.
Set the CDN of the device.
Iterate over the fields in a schema.
Iterate over a schema.
Generate a random text string.
Returns a string with the timing and result summary of the result.
Return a colored text.
Prints the given text to the stream.
Return a summary of the results.
Parse command line arguments.
Set up the INIRE Manager.
Run the example.
Transforms the given configuration object into a Python object.
Transform a describe node into an ast.ClassDef.
Transforms the given body into a list of examples.
Transform an example into an ast.FunctionDef.
Transform the example body into a list of examples.
Returns an ast.Arguments object that can be used to take only self.
Register a path hook.
Convert a byte string to a Python code object.
Apply an argument parser to an argument parser.
Load a module by its name.
Loads a Python source from a file or directory.
Discover all files in a directory.
Remove a place from the configuration.
Restart a place. :param places: Places to restart :type places: str :
Calls the given function with the given results.
Make a new service.
Refreshes the session for the given node.
Remove expired nodes.
Remove a node from the node list.
Get the last time a node was updated.
Get all nodes in the cluster.
Refreshes the session.
Increments the number of times modified.
Delimit a list of values.
Check if a path is bad.
Merge two results into this one.
Create a query to check if the given token exists.
Get a token from a token.
Create a new timer service.
Parse a reader and return the result.
Return an optional parser.
Return a new parser with the first input sequence.
Return a repeated parser.
Return a new parser with the given separator.
Return a new parser with the separator replaced.
Closes the connection.
Check if the URL is valid.
Add a new heart to the master if it doesn't exist.
Wrap a singleheart into a multiservice.
Freeze a graph from a checkpoint.
Freezes the model from a checkpoint.
Saves graph only from input checkpoint to output file.
Save weights from input checkpoint to output_path.
Restores the model from the given checkpoint.
Parse a tag and return a Tag instance.
Render a tag.
Validate the arguments. Args: tag_name (str): tag name. Args: tag_
Get the context data.
Parses the given token and returns a Tag instance.
Get the context data.
Convert a caffe model to a TensorFlow session.
Freeze a caffe model.
Saves a caffe graph only.
Takes a sequence and returns a list of rows.
Iterate over every item in an iterable.
Remove duplicates from an iterable.
Return the next element from an iterable.
Suppress any exceptions raised by the given callables.
Assert that the elements in an iterable are ordered.
Swap onmiss items in partition result.
Returns a list of the first n queues.
Resets the iterator and saved state.
Parses the token as a variable.
Return a new keychain that is a descendant of chain_path.
Iterate over an object. :param obj: The object :type obj: :param parent:
Parse a selector and return the result.
Parse an object selector.
Return the parents of the nodes in rhs.
Return a list of the siblings of the nodes in lhs and rhs.
Return a list of nodes matching the given validators.
Make a GET request to the given URL.
Expire the cache if it has expired.
Store a value in the store.
Get a value from the store.
Returns True if the store contains the given key.
Check if the given timestamp is a valid chain.
Create a Requirement object from a JSON string.
Parses the given XML string into a Version object.
Return rendered content.
Get a list of lines from the log file.
Get a list of rows from the table.
Validate the given token against the expected data.
Return a fernet engine.
Compatibility method for validating a token.
Create a new token.
Calculates a counter-clockwise counter.
A 64-bit counter.
Calculates the average duration for a given number of visits.
Create sources and setup triggers.
Send an event to the event queue.
Start the source watchdog.
Parse a format string.
Parses a line of text into a dictionary.
Validates that the form has expired at the given date.
Verify that the token is valid.
The name of the device.
Suppress warnings about a node.
Connects receivers to the client.
Create a secret link.
Send an accept notification.
Send a confirmation notification to the recipient.
Send email validation notification.
Send a reject notification.
Send a notification.
Create a new link.
Validates a token against the database.
Revoke this link.
Create a new record.
Get a user by request id.
Confirm the email address.
Create a secret link.
Return a sha512 hash of the given version and timestamp.
Verifies the signature of a message.
Check if a record is marked as abandoned.
Create an access request for a record.
Confirm an email address.
Return an sshcommand client endpoint.
Reverse selected column. :param col: column name :type col: str :type col:
Return the selected item.
Return the items in the query.
Get the version of the file.
Set the version of the file.
Start the timer.
Synchronously wait for the event to finish.
Show the list of available secret links.
Stops the connection and disconnects the connection.
Remove all events from the queue.
Add a list of events to the queue.
Create Elasticsearch client.
Encodes an event into a protobuf message.
Encodes a list of events into a string.
Decodes a message from a string.
Send events to the server.
Generate a preview of a file.
Retrieve a preview.
This function is called when a message is received from the queue.
Return True if the log time is less than the log interval.
Attempt to abort the SASL session.
Do mapping for SASLP-REVEAL characters.
Parse the footer tag.
Build the payment parameters.
Build the payment parameters for register credit card.
Builds a pay with an alias.
Return a short version string.
Perform postconstruction of the widget.
Configures the shortcuts.
Called when the user activates an item.
Called when the user selects an item.
Called when the user clicks on a location widget.
Clean up the resource source and target paths.
Fetches the children of this node.
Returns the icon for the given index.
Run a subprocess and return its pid.
Get the maximum file descriptor.
Close a file descriptor.
Close all open file descriptors.
Redirect a stream to a different file.
Set the widget attributes of the form's widgets.
Imports a module from the given app name and module name.
Import all project modules.
Includes the given token.
Check if path is a valid file system.
Check if a URL is a valid S3 URL.
Return the absolute path to a template file.
List all objects in a folder.
Build the wf_json for the workflow.
Execute the gbdx pull request.
Archive a project folder.
Create a directory.
List all files matching a pattern.
Restore the source from the given folder.
Create a new instance of this class.
List all files in a folder.
Download a file from the server.
Returns True if the given path exists in the storage.
Get the parent entity for the given path.
Create a new directory in the storage.
Upload a local file to a destination path.
Delete a file or folder.
Validate a storage path.
Create a new instance of StorageClient.
Create a new instance of StorageService.
Get the metadata for an entity.
Delete a project.
Delete a folder.
Copies the content of a file to a local file.
Get the signed URL for a file.
Appends a message to the collection.
Return a copy of the given service and version.
Returns a copy of this request with the given headers.
Returns a copy of this object with the given parameters.
Returns a copy of this exception with the given exception class and should_throw raised.
Returns a list of field names for the list display.
Apply a function to each partition of a job.
Run oncotator on a vcf.
Sort the list by the given function.
Return a list of datetime objects representing the current time.
Load export from folder.
Shift the elements of the sequence by `t`.
Return the sum of the data.
Return a list of RFXCOM devices.
Create a new user with the given username and password.
Parse vn results.
Parse release results.
Parses the results of the ``prodstaff``.
Parse the character results page.
Parse tag results.
Parse user results.
Create a tarball from a list of file paths.
For each file in file_paths, call op on each file in file_paths.
Copy a file from the local file store to the output directory.
Returns a list of docker parameters.
Refresh the metadata from the database.
Returns a list of all streams in the file.
Export the data to a JSON file.
Parse search results.
Reset the device's API key.
Returns a list of users.
Run BWA index.
Returns a connectordb instance.
Add a stream to the database.
Add a stream to the database.
Inserts a new value into the specified stream.
Start the synchronization thread.
Stop the synchronization thread.
Download a job from a URL.
Upload a job to S3.
List the labels of an ontology.
Prints the hierarchy of the given ontology.
Get the mean insert size of a BAM.
Create a new draft4 schema.
Export the data to a JSON file.
Return a device object.
Returns an iterator over the labels for the given ontology.
Returns an iterator over the hierarchy of the given ontology.
Returns the contents of the config file.
Get the current mount path.
Add an option to the argument parser.
Create an argument parser.
Create a pipeline.
Set authentication for the websocket.
Handle the response from the server.
Ping the server.
Create a new resource.
Update a resource.
Delete a resource.
Subscribe to a stream.
Return a list of all devices.
Run a Cutadapt tool.
Run samtools faidx for a given ref_id.
Run the samtools index.
Run SAMBamba MarkDup on the given BAM.
Run a samblaster.
Mark duplicates in bam and bai.
Run Picard sort.
Run the kallisto index.
Get the user affinity matrix of the test.
Send a command to the server.
Subscribe to a stream.
Connect to the websocket.
Reconnect to the device.
Resubscribe all subscriptions.
Called when the websocket connection is opened.
Called when the websocket connection is closed.
Called when an error occurs.
Called when a message is received from the websocket.
Ensure the connection is still alive.
Use GATK to select variants from a genome.
Quick check for BAM files.
Write the configuration to a JSON file.
Get the configuration from a JSON file.
Get the terms associated with a given ontology.
Search for a given ontology.
Suggest a specific ontology.
Iterate over all terms in a given ontology.
Iterate over all descendants of the given ontology.
Iterate over the labels of the given ontology.
Iterate over all terms in the hierarchy of the given ontology.
Run fastqc on R1 and R2.
Add a stream to the query.
Starts a new Spark container.
Starts the Spark worker.
Start a new datanode.
Stops the hdfs container.
Check the status of this container.
Look up a zone in the hosted zone list.
Fetch the configuration for a zone.
Merge a list of configuration chunks into a single XML document.
Validate a changeset.
Minimize the best fitness score of a list of members.
Returns the fitness score of all processes.
Calculates the cost function value of the AVE program.
Calculates the cost function value for each process in the group.
Returns the total number of parameters for this process.
Returns a list of the members of the group.
Adds a parameter to the list of parameters.
Normalize the keys of a list of items.
Return a generator of all environment variables.
Runs the given callable with the given exceptions and returns True if the callable raises an exception.
Transform a list of hits into a list of packages.
Transform the result to a string.
Convert an HTML document to an XHTML document.
Convert an XHTML object to HTML.
Open a document in a web browser.
Remove this node from the tree.
Drop the tag from the parent.
Apply a css selector to the document.
Return a generator of namedtuples of the members of the logger.
Returns a dictionary of the counts of all environment variables.
Returns True if the class is a single class.
Returns True if the module is a single module.
Validates that the request parameters are valid.
Validate that the request is a valid id.
Decode a file system path.
Escape the values in an argument specification.
Return the codec name for the given encoding.
Detect the encoding of the bom file.
Returns the remote address of the forwarded_for.
Convert an amount to a decimal.
Parses the given string into a Python object.
Parse a file and return an etree.ElementTree.
Convert a BeautifulSoup tree to HTML.
Get the current traceback.
Return a string representation of the exception.
Renders the summary.
Generate a traceback of the current frame.
Render the source table as HTML.
Return the name of the egg info that matches the given search name.
Sort a list of links.
Get the content type of a URL.
Return a generator of all links in the document.
Returns True if the API is verifiable.
Find all data files for a given package in src_dir.
Exclude data files from a package.
Parse a requirements file.
Yield lines from an iterator.
Ignore comments in an iterator.
Return the AST representation of the given node.
Return an AST node for an attribute.
Coerce a JSON value to a number.
Push the current context onto the stack.
Pop an app context from the stack.
Return a copy of the current request.
Matches the request against the adapter.
Push the current request to the stack.
Check if a distribution is editable.
Add a url value preprocessor to the app.
Add a default function to the app.url_default_functions.
Return the root path of the given import.
Return a Jinja2 loader.
Run the completion script.
Return the domain name of the cookie.
Return True if name is a pure library.
Uninstalls the uninstallation paths from a distribution.
Check if the given version is compatible with the given name.
Builds a single wheel.
Iterate over the symbols of a code object.
Write a pip delete marker file to the specified directory.
Return True if the system is running under virtualenv.
Get the username of the current user.
Create a scheme for a distribution.
Parse the cache control headers.
Cache the response.
Load a template from a path.
Saves the file to disk.
Convert the given value to the appropriate converter.
Add filters to the given filterer.
Add handlers to a logger.
Set common logger configuration.
Compile and execute a Python script.
Temporarily overwrite the temporary directory.
Returns a tuple of the URL and revision of the repository.
Get an item from an object.
Generate a file from a source.
Return the default cache path.
Find eggs in a ZIP archive.
Find distributions on a path.
Declare a namespace.
Return the MRO of the class.
Find the adapter for the given ob.
Ensure directory exists.
Iterate over all entry points in a group.
Returns True if the given distribution can add to the current platform.
Evaluate a marker expression.
Interpret the given text using the markerlib environment.
Format a log record.
Returns the decimal quantum of the given precision.
Get the decimal precision of a number.
Returns the scientific notation elements of the given value.
Return an unpatched class.
Check that the value is a list of requirements.
Fetches the build egg for this package.
\x1b[1mNAME\x1b[1mNAME\x1
Convert a price object to a price object.
Create a price attribute.
Validates the given request.
Get a method from the app.
Apply the given method to the given arguments.
Return the module of the blueprint.
Return the blueprint endpoint.
Makes an abstract distribution.
Walks the requirements and calls the given handler on each of them.
Return a list of all namespace packages.
Encodes the given object as JSON.
Tokenizes a document and returns a list of tokens.
Annotate merge annotations.
Copy annotations from src to dest.
Compresses a list of tokens into a list of tokens.
Yields the HTML representation of the given tokens using the given markup function.
Expands a list of tokens into HTML.
Locate the end of an unbalanced end.
Fix up HTML representation of a list of chunks.
Flatten an HTML element.
Split text into words.
Return the start tag of an element.
Return the end tag of an element.
Serialize an HTML fragment into a string.
Remove tags that are not in the block level.
Return a cache URL for this service.
Recursively links the given element.
Kill conditional comments.
Extracts a document from an HTML string.
Export the repository to the given location.
Get the revision of the SVN file at the given location.
The name of the module.
Return a boolean indicating whether or not the exception should be propagated.
Return the path to the instance file.
Update the template context with the current request context.
Handle an HTTP exception.
Handle an exception raised by the client.
Raises an exception if the request is not an exception.
Dispatches the request to the appropriate handler.
Return the default response class for this request.
Create a url adapter for the given request.
Inject URL default functions to the given endpoint.
Yield unique values from an iterable.
Populate metadata with required packages.
Convert a requirement specification to a requires distribution string.
Convert a pkg_info file to a metadata dictionary.
Iterate over all modules in the directory.
Iterate over all classes in the module.
Iterate over all methods in the class.
Check if the given path is a module path.
Recursively walk the given directory tree.
Dump the default values to the given kwargs.
Load default values from the kwargs dictionary.
Set one or more keys from a mapping.
Increment the value of a key by the given delta.
Dump an object to a string.
Build a dictionary of options that can be edited.
Populate the link for this upgrade.
Ensure the source directory is set.
Remove the temporary source directory if it exists.
Return the distribution object for this project.
Return a list of site config directories.
Iterate over all of the files in the module.
Restart the program with a re-loader.
Convert a string to text.
Try to find a CA bundle.
Parses the given document using the given treebuilder.
Parses the given stream and returns the document.
Parse a fragment from a stream.
Translate a word to a sorted list of tuples.
Convert command line arguments to tokens.
Binds the server to the server.
Prints the report to stdout.
Load bytecode from file.
Convert a dictionary of parameters to a stylesheet params dictionary.
Run a command on the remote host.
Get the version of the Python version.
Return a list of distributions for the given location and basename.
Find all external links in a page.
Open a local file or directory.
Return a set of directories that are not in sys.path.
Return a set of all directories in sys.path.
Add a package to the sys.path.
Add a sitedir to the sys.path.
Check if the user site is enabled.
Set the encoding aliases for the current platform.
Set the encoding for the current locale.
Force global eggs after local site packages.
Fix sys.path to include all classes.
Wrap subprocess.popen to make sure that stdout and stderr are not blocking.
Return True if all pyrex implementations have been imported.
Convert pyrex sources to language.
Runs the application and prints the traceback.
Get a resource from a file.
Return True if name is a valid URL.
Unpack a file from a link.
Download a link from an HTTP URL.
Check if a link exists in the download directory.
Register a currency format.
Register a new exchange.
Decompress and decode the given data.
Default template context processor.
Render a template and send it to the client.
Render a Jinja2 template.
Render a Jinja2 template string.
Parse a version string.
Returns True if the given name is declared in the locally or parameter.
Visit a name node.
Visit a FROM import statement.
Factory function to create a new http service.
Encodes an object using the given charset.
Return a list of packages that match a requirement.
Populate a requirement_set with requirements.
Export a file to a temporary directory.
Lookup an Amazon Product.
Iterate over all pages.
The ancestor of this browse node.
Returns a list of amazonbrowseNode objects representing the children of this browse node.
Safely get an element from a path.
Get the text of the element at the given path.
Get the date of an element.
Get the price and currency.
Returns a tuple of the price and currency of the list.
If the request is cached, return the cached response.
If the response is cached, update the cache if needed.
Return the title of a string.
Compare two bytes of constant time.
Verify the signature of the given key and value.
Derive a key from the secret key.
Get the signature of the given value.
Return the signature of the given value.
Verify the signature of the given value.
Unsigns a signed value.
Signs the given value with the given timestamp.
Validate that the signed value is valid.
Serialize an object to a string.
Raises an exception when an error occurs in a server.
Yield packages that do not have parents.
Yield all directories in the given base path.
Prepare the HTTP response.
Unsign a wheel file.
Unpack a wheelfile into a zipfile.
Install the scripts for the given distributions.
Arranges the graph to be displayed and redraws the canvas.
Redraw the canvas.
Return the node with the given id.
Called when a directed connection has been changed.
Called when edges are added.
Called when a component is changed.
Handles the normal left click of the mouse button.
Called when the diagram canvas is changed.
Clears the current canvas.
Called when the domain model is changed.
Unmaps a model from the map.
Map an element to a specific type of element.
Parse an XDOT data string.
Processes a font token.
Process an ellipse.
Process a polygon token.
Return a polyline from a list of tokens.
Processes a text component.
Process image tokens.
Render a grid file.
Saves the object to the dot file.
Loads the dot file and returns the object.
Returns True if point_x is inside point_y.
Draws the bounds to the given gc.
Performs the graph wizard.
Create a new session and start it.
Parses the dot code and stores it in the graph.
Create a new model.
Open the dot file dialog.
Saves the model to a file.
Saves the model to a file.
Configures the graph.
Configures the nodes view.
Configures edges in the editor.
Called when the user clicks on a GODOT button.
Adds a node to the control graph.
Add an edge to the control.
Add a subgraph to the control graph.
Add a cluster to the graph.
Request a graph from the model.
Set godot options.
Configures the dot code.
Called when the user exits the program.
Moves a list of components to the origin.
Save the given flo to a file like object.
Load from file like object.
Save the model to a file.
Load an object from a file.
Create an alias property.
Parse a file into a list of words.
Return a list of start words.
Add a chain to the model.
Remove a chain attribute.
Build a chain from a source chain.
Create a new dot file with the given prog and format.
Delete a node from the graph.
Returns the node with the given id.
Delete an edge from the graph.
Add a new subgraph to the graph.
Called when the program is changed.
Set the list of nodes and edges.
Parse a DOT file and return a graph object.
Parse a DOT file.
Build a top-level graph.
Get the time units and multiplier for a given number of seconds.
Format a duration in a human readable form.
Called when a path changes.
Create a UI object for editing the graph.
Split an iterable into windows of length length.
Returns a list of all children of the given object.
Append a child to an object.
Insert a child node into an object.
Delete a child from the graph.
Called when the children of the object have been replaced.
Called when the children of an object have changed.
Get the label of an object.
Set the label of an object.
Called when the label of an object has changed.
Initializes the widget.
Updates the editor with the current value.
Add listeners to the object.
Called when a node is replaced with a new node.
Called when the node changes.
Adds all nodes of the given features to the graph.
Remove and replace edges.
Called when the edges of an object have changed.
Add edges to the graph.
Parse the XDOT directive. :param name: The directive name :type name: str
Called when drawing is done.
Create a node from a row factory.
Create an edge from a row factory.
Prepare the connection to the database.
Parse the xdot drawing directive.
Parse a label directive.
Called when the drawing has changed.
Called when the position of the component is changed.
Called when the current position of the canvas has changed.
Handles a normal right down event.
Prints information about the given style.
Draws the main layer.
Check if a point is inside a polygon.
Draws the main layer.
Call all registered event handlers.
Run the function in a separate thread.
Get full page url.
Renders the HTML for the previous and next links.
Renders the links of the current site.
Create an identifier for a URL.
Discover all modules in a directory.
Return a list of modules found in the given directory.
List all modules in a module.
Ensure a directory exists.
Put text into the blob.
Check if a card number is a Luhn number.
Loads a module from the system.
Add a path to the path list.
Find a module by name.
Split a line into lines of length min_line_length.
Remove all namespaces from the root element.
Return a string describing the consistency of the package.
Create a new instance from a dictionary of keyword arguments.
Merges a new dictionary into this one.
Execute all actions in the shell.
Add a details message to the message.
Send a record to the server.
Add image rendition to the context.
Add a new attempt to the cache.
Add a url to the queue.
Start all the workers in the queue.
Set the value of a key in the store.
Get a key from KV Store.
Recursively walk through a key.
Returns the index for a given key.
Delete a key from the kvstore.
Plot a heatmap of a feature distribution.
Add a number of months to a datetime.
Add months to a date.
Check if the current date is a christmas period.
Use a music service.
Set the current storage service.
Reads a CSV file and returns a list of dataframes.
Return a list of dictionaries from a JSON file.
Writes x and y to a JSON file.
Filter x and y according to the given reference label.
Computes the average value of a dataset by its label.
Restores the data from the session.
Merge two dicts into one.
Find all registered block modules.
Verify that the given block is a valid block.
Register a block of the given type.
Unregisters the given block type.
Convert a mp3 file to a mp3 file.
Return a string describing the desired version.
Handle SSL redirects.
Parses a content type and returns a DataStructure object.
Parse a string into a list of strings.
Resizes the given image to fit the given width.
Download a youtube video.
Connect to the server.
Upload a file to a folder.
Connect to the music server.
Update the filenames of the sky file.
Read the Aphi from a file.
Scale the A-phi of the AMPAL object.
Attempts to read a pure water abundance from a file.
Reads a pure water scattering from a file.
Read a scipy.interp from a CSV file.
Write an IOP to a file.
Build the scattering fraction.
Build the A matrix.
Build the c matrix.
Build all IPA components.
Set the parameters of the batch.
Reads a parameter file into a dictionary.
Convert a string to a list of floats.
Set the signal handler.
Log a pseudo handler.
Default handler for handling signals.
Pauses the execution of a signal.
Abort the program.
Set the status of the device.
Remove an event from a list of events.
Return a sorted list of metric values.
Extracts signature information from a function or method.
This function is called when a sig_from_partial is called.
Create a new argv from a list of arguments.
Ignorecertain meta-inf files.
Return a key for a file.
Convert a VLQ value to an integer.
Parse the user data header.
Get the duration of a given number of seconds.
Prints the details of the game.
Extracts the data from the model.
Opens the file dialog and displays the result file.
Writes the parameter values to a batch file.
Process the result file.
Display the current connection to the screen.
Displays the error message.
Hides the error message.
Runs the batch command.
Cancels the planarrad.
Quits the application.
Saves the figure to disk.
Opens the log file.
Opens the document and opens it.
Performs the prerequisite actions.
Handles clicks on the tab.
Handle mouse move events.
Displays the graphic at the specified location.
Create a lockset for the given genesis.
Sign this object with the given private key.
Return the SHA3 hash of the message.
Check the validity of the QR code.
Add a new amount to the account and issue the issuance.
Return the last lock.
Returns the last voted block proposal.
Return the last valid lockset.
Returns the current timeout in seconds.
Called when a proposal is received.
Generate a list of privkeys.
Calculate the delay of a packet.
Deliver a packet to a slow transport.
Convert an address to a native contract class.
Update the filter with the given data.
Convert an image from VGG format.
Convert an image to a VGG image.
Returns the function for the given layer.
Get the output of a layer.
Returns a dictionary of features.
Create a new key file.
Finish the transaction.
Release the giraffe table.
Returns a list of all tables in the Giraffe database.
Fix the compile flags.
Find the Teradata home directory.
Get a value from the configuration.
Set the value of a key in the configuration.
\x1b[1mNAME\x1b[1mNAME\x1
Write the default configuration to a yaml file.
Set the columns to be filtered.
Returns a string representation of the encoder settings.
Convert a string to a float with a multiplier.
Returns a dictionary of the percentages of the gains in a string.
Return a dictionary of device settings.
Wrap text with textwrap.
Uses soapy to detect devices.
Set the center frequency of the PSD.
Calculate the frequency and pwr values for a PSF state.
Wait for the result to be returned.
Update the PSD state with the values from the samples array.
Read a PWR header from file.
Write the PWR header to a file.
Submit a function to the queue.
Return the number of times to repeat.
Create a new buffer.
Setup the PSF stream.
Stop the stream.
Run cmake executable.
Filter a set of datetimes to only those that are longer than or equal to the given number
Mask a datetime object.
Mask the given datetime to the given weekday.
Convert a list of datetimes to a list of days, days, hours, minutes, and
Return a set of dates to keep.
Given a list of dates, return a list of dates to delete.
Get the next byte of the SPI control packet.
Read a single bit from the given address.
Write a single bit to the specified address.
Get the bit number from a bit pattern.
Writes the gpio interrupt pin to the userspace.
Set the gpio interrupt edge.
Waits until a file exists.
Register a new pin function map.
Deregister a pin for a given pin number and direction.
Enables or disables gpio interrupts.
Wraps the ioctl spi_ioc_transfer method.
Render the form to HTML.
Return True if the form has any errors.
Renders a link to the form.
Extract the version number from a package.
Add the form keyword arguments to the form.
Check the status of the response.
Make a GET request to the API.
Calculate the humidity of a temperature and dewpoint.
calc_dewpoint calculates the dewpoint from the temperature and hum.
Publish to the server.
Calculate the CRC of the given data.
Verify that the given data is valid.
Unpack a storm date into a string.
Determine whether or not to use a revb archive.
Wake up the device.
Send a command to the device.
Get new archive fields from the device.
Parse the archive.
Update the weather properties of a given station.
Initialize the logging system.
Return a list of all pub services.
Get the value of a given station from a given interval.
Set the pressure clouds and rains.
Set command line arguments.
Write the arguments to a file.
Fulfills the given requirements.
Pushes a new override to the stack.
Remove the current context from the stack.
Temporarily override the current context.
Push an additional context onto the stack.
Pop an additional context from the stack.
Context manager to push additional items to the stack.
Remove duplicate field names from a list.
Interpret the results.
Extract parameters from a query string.
Return a Pandas dataframe.
Return a graph of the results.
Create a plot of the x and y labels.
Return a CSV representation of the result.
Overrides get_context_data to update the context data.
Returns a list of tuples of tuples of tuples of tuples of tuples of
Returns a list of widgets that need to be updated.
Register a widget with the dashboard.
Unregisters the given widget class.
Returns the last update of this widget.
Saves the value of a setting.
Return True if we should update the cache.
Concatenate two RDDs.
Check if args is a valid spark context.
Format axes as a tuple or tuple.
Wrap a function into a Spark object.
Aligns the shape of the array along the given axes.
Convert to a Spark array.
Convert to RDD.
Get the number of chunks of a plan and shape.
Return a numpy array of boolean masks.
Repartition the RDD by number of partitions.
Stacks the RDD into a new array.
Align the shape of the array along the given axis.
Return the first element of the DStream.
Return the mean of the elements along an axis.
Get the variance of an axis.
Return the standard deviation along an axis.
Return the sum of the elements along an axis.
Returns the maximum value of the elements along an axis.
Return the minimum value of the elements along an axis.
Transpose the TimeSeries along one or more axes.
Swap axis1 and axis2.
Reshape this object to a new shape.
Reshapes a basic shape.
Cast the RDD to the given type. :param dtype: the type of the RDD
Clip the DStream to a range of values.
Convert the RDD to a numpy array.
Convert an argument to a tuple.
Takes a list of arguments and returns a tuple of the arguments.
Assert that the given shape and axes are in the given shape.
Test if two arrays are all equal.
Convert a list of integers to a list of integers.
Ordinal version of slice.
Check that a set of items is transposeable.
Assert that two tuples are shapeable.
Concatenate values into a single array.
Expand arry by dimensionality.
Lookup a constructor by name.
Create a numpy array of the given shape and type.
Create a numpy array of the given shape and type.
Concatenate multiple arrays into one.
Compute the discrete likelihood of the data.
Discrete least-likelihood.
Discrete alpha mle of data.
Discrete best alpha.
Plots the PSF of the data.
Computes the lognormal distribution.
Sanitize HTML for use with turbo.
Configure analytics for yandex.
Return a list of tags.
Return the md5 hash of the decoded key.
Return the SHA256 hash of the key.
Return the SHA512 hash of the key.
Parses the given data as a long.
Decode a base64-encoded public key.
Process SSH public key.
Process DSA DSS data.
Process ECDSA hash data.
Process ed25516 data.
Parse the key data.
Get the list of available mechanics.
The main entry point for the application.
Initialize the setuptools module.
Context manager to create a new wave file.
Return the HTML for the Homepage H5B CSS.
Return a normalized version of the DJ-frontend.
Return the HTML for the Jupyter Notebook.
Return the HTML for the frontend modernizr.
Return the HTML for the DJ-frontend jQuery page.
Return the HTML for the jQuery UI page.
Return the HTML for the jQuery datatables page.
Return CSS for jQuery datatables.
Return the HTML for the jQuery datatables themeroller.
Return the HTML for the DJ-frontend jQuery formset.
Return the HTML for the jQuery Scroll To page.
Return the HTML for the jQuery smooth scroll page.
Return the HTML for the frontend Twbs CSS.
Return the name of the GATK frontend account.
Iterate over the hash of the authentication hash for a user.
Calculates the expiry time for a given number of minutes.
Generate a token for a user.
Serializes the object to a dictionary.
Update a user. :param selector: The selector to update :type selector: str :param
Called when the user login attempt is failed.
Validates the given token and returns the validated user.
Check if the request is secure.
Get the username of a user.
Create a new user.
Login to DCNM.
Log out the user.
Login to the server.
Authenticate with the given username and password.
Resumes a user with a resume token.
Forgot password verification.
Resets a user's password.
Deeply merge two dicts.
Get the MEEOR ID for the given object or model.
Given a list of objects, return a dict of meteor ids.
Get the object id for the given MEEOR ID.
Given a list of meteor IDs, return a dictionary of object IDs.
Get a single object from the database.
Set the default forwards for the given operation.
Set the default reverse relation for a given operation.
Truncate the forwards of the database.
Truncate the database backwards.
Initialize the options for this module.
Finalize the build options.
Convert a list of paths to a directory.
Seed a set of values.
Return the current state of the circuit.
Generate a random string.
Iterate over all API endpoints in an object.
Clears the path map cache for all API providers.
Pretty print a value.
Called when the connection is opened.
Called when the connection is closed.
Called when a websocket message is received.
Yield frames from a message.
Process a DDP message.
Dispatch a message to the handler.
Receive a connection from the DB.
Receive a ping from the server.
Send a SUB command to the server.
Receive an unsub command from the server.
Use this method to send a method to the server.
Return information about the DPP socket.
Entry point for the script.
Print a message if verbosity is greater than 0.
Stops all servers in the pool.
Starts the task and waits for its completion.
Run psycopg2.
Enables or disables psycopg2 and psycopg2.
Get a random MEEOR ID.
Auto-discover the api module.
Return a dict representation of the error.
Get an object by name.
Logs the given record.
Add a resource object to the blueprint.
Send a message to the user.
Send a bulk message to the APNS server.
Fetch inactive IDs from the APNS server.
Sends a message to the gcmmessenger.
Sends a bulk message to all registered registrations.
Sends the registration to GCM.
Send a request to the API.
Get a model class from a module.
Search a phrase using the giphy API.
Translate a term or phrase to a phrase.
Returns a list of trending objects.
Get a GIF object by ID.
Create a GIF screensaver.
Upload tags to a file.
Normalize data to integers.
Make a GET request to the API.
Returns a generator of giphyimage objects.
Fetch a GIF from the API.
Upload tags to a GIF file.
Create an extension element for an access control.
Authenticate with youtube.
Uploads a video to youtube.
Check the status of a video.
Update a video entry.
Deletes a video entry.
Check availability of a video.
View for a video.
Lists all available videos.
Directly upload a video to youtube.
Uploads a song to youtube.
Create a new video and send it to youtube.
Remove a video from YouTube.
Fetches the video from the server.
Saves the video to the database.
Delete this video.
Updates the metadata for this resource.
Updates an existing metadata field.
Update an item.
Parse a string into a list of nodes.
Return a string representation of a list of trees.
Load a file from a file-like object.
Open a file and return the contents of the file.
Parse a node from a string.
Create a new node with the given name, length and descendants.
Return a string with the name of the newick.
Get the node with the given label.
Remove all leaves from the tree.
Remove all internal names from the tree.
Remove all leaf names.
Disposes of the given string.
Raises an exception if the given setting is not present.
Returns a list of all the arguments for the given request name.
Asynchronously call the given callback with the given args and kwargs.
Get a cookie by name.
Remove a cookie from the cookie_monster.
Redirect to the user's login page.
Get the authenticated user.
Returns a dictionary of parameters for the OAuth request.
Redirects the user to authorize the request.
Concatenate url with args.
Parse a header line and return a key, value pair.
Add a new value to the request.
Returns a list of the headers with the given name.
Parse a line of text into a list.
Parse the HTTP headers. :param headers: HTTP headers :type headers: str :param headers
Normalize a HTTP header name.
Convert a string to UTF-8.
Convert a value to a unicode string.
Convert a value to a base string.
Recursively convert unicode objects to unicode.
Make sure all plugins have the same keyword.
Select a policy from the active policies.
Calculates the occupancy of a set of points.
Write a molecule box to a file.
Write a PDB box to a PDB file.
Given a total, molecules, and a list of relative molecules,
Resize the PBC to fit in the specified area.
Iterate over the contents of a resource file.
Add a message to a user.
Sends a message to each of the specified users.
Get a user's messages.
Add messages to the response if they are logged in.
Check that the config file is valid.
Verify that a profile name is valid.
Retrieve message data from config.
Retrieve the password from the config.
Update config data.
Update the password for a config message.
Create a config profile for the given message type.
Display all required items.
Get data from user.
Return a list of tuples of auth keys and values for the given message type.
Configure a profile. :param msg_type: str :type msg_type: str :
Write message data to profile.
Write the authentication information to the config file.
Send the message to the server.
Factory function to create a message object from a message type.
Validate the input of a message.
Validate Twilio attributes.
Validate Slack post attributes.
Validate whatsapp attribute.
Coroutine to send a coroutine.
Add a message to the message queue.
Read the body from a file.
Remove keyword arguments from a dictionary.
Send a message to the client.
Get the chat id for the given username.
Sends the message to the server.
Send the message to the server.
Get the smtp server for the given address.
Generate an email message.
Add the message header to the message.
Add the message body to the message.
Add attachments to the message.
Get a session object.
Returns a smtplib.ssl.SSL object.
Returns a smtplib. smtplib. smtplib. smtplib. smtplib. smtplib
Sends the message to the server.
Deprecated. Please use save instead.
Unloads the image.
Get the region of an image.
Validate that the data is well-formed.
Remove all elements from the list.
Read data from file.
Deletes this chunk from the file.
Resizes the file to the specified size.
Insert a chunk into the end of the file.
Save the ID3 frame to a file.
Deletes the file with the given filename.
Parse a file and return a list of lines.
Process a normal line.
Add lines to the source block.
Draws a string to the specified font.
Parse ISO 8601 time string.
Make HTML words from a list of words.
Make an HTML word from the given word.
Make a paragraph from a list of words.
Make HTML code from a list of lines.
Make HTML for a list of items.
Save the metadata to a file.
Update the parent atoms of a file.
Runs the game loop.
Register a mapping for a product.
Get a controller by vendor and product ID.
Sign string with HMAC.
Returns a dictionary of headers to be sent to AWS.
Send a GET request to the API.
Send a POST request to the API.
Send a DELETE request to the server.
Convert a value to an APE value.
Change resource record sets.
Return the size of the header.
Find the last page in a file.
Set a section of the document.
Add a new markup to the document.
Process HTML content and return a list of markups.
Return the markup for the given tag name.
Create a hosted zone writer.
Lock a file or directory.
Insert bytes into a file.
Delete bytes from a file.
Convert a string to UTF-8.
Add a change to the route.
Parse the change info.
Measure the width of a string.
Returns True if the object is modified.
Delete this resource record set.
Saves this resource record set to the database.
Read size bytes from the file.
Deletes all keys with the given key.
Load a frame from a tag.
Update common attributes.
Unloads the sound.
Set the start and end of the voice loop.
Extracts glyph values from adobe_glyph_list.
Return a list of glyph names that match the filter.
Dump a list of encodings to a file.
Dump an array to a file.
Check if a file exists.
Return a list of all the files in the given path.
Parse the hosted zone tag.
Parse the nameservers in the zone.
Write a sequence of blocks to a string.
Group a list of blocks into a single padding block.
Deletes the VCF file.
Save the metadata to a file.
Parse the RRSet alias.
Parse RRSet record values.
Parse a RRSet object.
Add a record to this zone.
Create a mx.resource.MXResourceRecordset.
Create a new ns resource record.
Create a new resource record.
Create a new SPF resource record.
Create a new SRV record.
Get the initial values for a change.
Writes a change element to the etree.
Write a change record set to the XML file.
Initialize log files.
Return the item with the given alias.
Freeze a dictionary into a sorted tuple.
Join HTML attributes into a template and a list of attributes.
Initializes the given Flask application.
Initialize all the bars.
Bind a bar to the queue.
Returns a dictionary of the arguments to be passed to the function.
Returns True if the current view is the same as the current view.
Validate a metric class.
Get a statistic by its name.
Calculates statistics for a given stat and frequencies.
Auto-discover Django modules.
Dump stats to a CSV file.
Manages the maintenance statistics.
Get a list of values from a GET request.
Get the value of a GET variable.
Get the next colour.
Returns a dictionary of parameters for the gecko chart.
Get the number of widgets in the geckoboard.
Show the latest rag widget.
Returns a list of dates for the geckoboard line chart.
Get the latest geckoboard geckometer.
Get a list of geckoboard metrics.
Return a list of gadgets that are not in the registry.
Register a gadget.
Get the context data.
Prints an error message and exits.
Prompts the user for a long input.
Prompt the user for a list of items.
Prompt the user to enter a file.
Get the schedule data for a given year.
Return the winner of the game.
Return the season of the date.
Return the surface of the reftrack.
Return the coin_toss for the current commit.
Get weather information from git table.
Get information about the ref table.
Get a list of games for this team.
Get the standings of the team.
Get the team stats table.
Returns a dataframe with the royvoting data.
Return a pandas DataFrame containing the line score of the game.
Return the year of the year.
Get player stats.
Return the key for a class instance.
Get the age of the birth date.
Get the stats table for a particular table.
Get stats per game.
Returns a list of the total stats.
Get stats per36 per day.
Returns a list of stats per 100.
Returns a list of stats that are advanced.
Returns the stats forshooting.
Returns a stats table.
Return the basic gamelog as a pandas DataFrame.
Get the current value from the session.
Expand the details of a game into a DataFrame.
Add team columns to a Pandas DataFrame.
Add team features to a dataframe.
Return the initial window probability of a line.
Return a DataFrame with the passing data.
Returns a list of all awards for the given award id.
The name of the team.
Returns a list of box scores for the given year.
Return the pq for a given year and keyword.
Return the head coaches for a given year.
Returns a pandas dataframe of the data for the given year.
Return the off-coordinator for the given year.
Return the coordinate of a given year.
Return the team ID for a given year.
Returns the off scheme for the given year.
Return the alignment for a given year.
Return a DataFrame of off-splits for the given year.
Get HTML from url.
Directly put the Arys into the queue.
Get the index of the next read from the queue.
Close the connection.
Get a batch of HDF5 data from a file.
Get the remainder of a batch.
Get a generator of rows from a queue.
Parse a PB file.
Dump a list of objects to a PB file.
Reads a varint from the file.
Yields all the objects in the file.
Close the file descriptor.
Write one or more bytes to the buffer.
Flushes the write buffer.
Get the path to the game directory.
Perform keyboard emulation on input text.
Evaluates the traits and returns a list of descriptions.
Wait until a condition is met.
Wait until the traits of the given element are present.
Add one or more ignored exceptions.
Executes the specified main volume operator on the device.
Return the source code for the given operator and value.
Send a message to the server.
Get the status of the NAD.
Power off.
Power on the device.
Set the volume of the device.
Select a specific source.
Deobfuscate a key.
Calculate the CRC for the given plaintext.
Obfuscate a value.
Find the missing schema in the html file.
Get a list of all hrefs.
Check if song name is valid.
Parses the given url and returns a list of links.
Generate a Google URL for a song and website.
Parse Google download URL.
Parses the website for a song.
Get the HTML response from the given URL.
Download a file using requests.
Download a file using wget.
Search for codes by city.
Get a single observation from a location.
Parses the response from the observation API.
Return a list of all compiler extensions.
Return the MIME type of the file.
Return the MIME type of the compiler.
Return the compiler format extension.
Register a new processor for the given mimetype.
Unregister a processor for a mimetype.
Returns a list of all paths in the cache.
Register default values.
Import the QTcore module.
Get the meta Netnode object for this node.
Add a plugin name to the current network node.
Remove a plugin name from the network.
Import settings from config file.
Export a dictionary of settings to a QSettings object.
Returns a directoryidaSettings instance.
Iterate over all keys in the directory, user, and system.
A simple error handler that handles 404 and 403.
Get a table from DynamoDB.
List all tables in DynamoDB.
Fetches the items for the given category.
Return the metadata id for the given item.
Return the timestamp of the metadata for the given item.
Fetches the owner team for a given crate.
Fetches the owner user for a given crate.
Fetch the versions of a crate.
Fetches version downloads for a given crate.
Get a list of all available crates.
Fetches a specific category crate.
Fetch a page of items from the server.
Fetch a list of items from the database.
Get a list of questions from the server.
Fetches the events for the given category.
Return the timestamp of the metadata updated on the given item.
Get the category of the metadata item.
Get a list of items for a given category.
Return the list of available buffers.
Return the io priority.
Close the IO queue.
Submit a list of iocbs.
Cancel the given block.
Cancel all submitted blocks.
Fetches the items for the given category.
Returns a list of all cells in the network.
Parse the feed and yield events.
Return a list of export formats for the given PID type.
Returns the permission factory.
Default view method to view a record.
Export a record.
Create a new callable with the given name and sample rate.
Closes the socket.
Remove a client from the pool.
Increment a metric. :param name: The metric name :param rate: The rate of the
Send a timing metric to the client.
Add a new timing to be executed after a given time.
Send a gauge request.
Send a gauge delta to a metric.
Set the value of a metric.
Send a request to the server.
Create a new batch client.
Create a unit client.
Flushes all pending messages to the remote host.
Create a TCP batch client.
Send all queued messages to the socket.
Create a TCP client for unit testing.
Create a new instance of any_user.
Interprets the input as an Openmath object.
Convert a term to Openmath using the given converter.
Convert an OM object to a Python object.
Convert an object to an Openmath object.
Initialize the Flask application.
Yield valid choices from a list or tuple.
Create a new value for a given field.
Create a default form from a form class.
Returns the data for a decimal field.
Format email field data.
Generate a random date for a date field.
Generate a random datetime field data.
Return the data for a float field.
Return the data for an integer field.
Generate a random time for the given field.
Returns a random choice for a field.
Returns the data for a multiple choice field.
Return a random choice for a field.
Encode an XML object into a byte string.
Publish build and upload files.
Tag the build.
Load a python global variable from a module.
Decode a bytearray into a bytearray.
Convert a value to a fixed value.
Formats a number according to settings.
Convert a byte array to a numpy array.
Deserialize a new BloscArray from a given array.
Add a file to the configuration.
Remove an entry from the configuration.
Return a list of all ws configs.
Get the value of the given name from the websocket.
Check if a repository exists in the workspace.
Syncs all repositories in a workspace.
Clone a repository.
Check if the version is different from the current version.
Convert a NumPy array to a numpy array of voxels.
Convert a list of voxels to a numpy array.
Executes the console command.
Update a repository.
Set the console handler.
Executes the given command in the given path.
Load an image from a PNG file.
Save a collection of PNG files.
Prints the status of a workspace.
Print the status of a repository.
Get the block size.
Post cutout without chunking.
Load an image from a TIFF file.
Save numpy data to TIFF file.
Load a multi-page TIFF file into a numpy array.
Write the configuration to a YAML file.
Clones the given URL.
Get the version of the installed package.
Mix and match name.
A decorator that prints the name of an option.
Reserve ids for a channel.
Merge multiple IDs into a single ramon.
Propagates the given token to the given channel.
List all projects in a dataset.
Get information about a remote dataset.
List all available datasets.
Parse the command line options.
Show all workspaces.
Show workspace information. :param name: workspace name :type name: str :param name:
Show all workspaces.
Returns the URL for the given endpoint.
Tries to guess the format from a file extension.
Open an image file.
Convert a file from one format to another.
Convert a list of ramons to a dictionary.
Return the ramon type for the given type.
Delete a channel from a project and dataset.
Return a JSON representation of the ND dataset.
Create a dictionary for a dataset Args: dataset_name (str): The name of the dataset
Create a dictionary for a channel.
Create a project dictionary.
Identify the size of an image.
Upload data to the server.
Find a path in a workspace.
Get a list of all public tokens.
Returns the project information for the given token.
Set the metadata for the remote data upload.
Make a GET request to the given URL.
Make a POST request to the given URL.
Deletes the given URL.
Loads the data layers from a hdf5 file.
Save an array to a HDF5 file.
Infer gaps in tree.
Recover a nvimio.
Install jinja2 translations.
Exclusive state guard. :param guard: :param desc: :param desc: :param
Return percent of data.
Get the cache stats from the server.
Get the cache of SVRs.
Return a dictionary of context data.
Show server status.
Show a dashboard page.
Show cache stats for a server.
Show a list of Slabs.
Convert a value to a human-readable string.
Finds the config object for the given children.
Add a directory or directory to the environment.
Apply the applicator to the config file.
Absolute path of the file.
Read the file and return it as a string.
Write data to file.
Configure the logging handler.
Create the file if it doesn't exist.
Apply the given applicator to all children.
Return the path of the file.
Remove the directory, if it exists.
Create and prepare the children.
Cleanup all children of this node.
Return the path to the given file.
Return a list of all files in the directory.
Write data to file.
Read a file and return its contents.
Add a file or directory to the tree.
Saves the configuration to a YAML file.
Loads the configuration from a YAML file.
Remove the file if it exists.
Load all plugins in a directory.
Return a child config node.
Get the value of the key.
Apply the config to a string.
Build the URL for a callback message.
Read input from socket and process it.
Send the output to the socket.
Send a request to the client.
Read the input from a socket.
Write the output of the given socket object to the given connection.
Returns a dictionary of remote settled mode names.
Configures the PN link.
The address of the sender or remote source.
The target address of the remote target.
Called when the session is closed.
Create a new sender.
Request a sender link.
Create a new receiver. :param name: The name of the receiver :type name: str
Request a receiver link.
Called when a link is destroyed.
Called when the EEP session is closed.
Process an endpoint event.
Add an inline tag pattern to the md object.
Close the remote receiver link.
Mark receiver link as failed.
Get the host and port from a server address.
Connect to a socket.
Create a server socket.
Return a tuple of readers, writers, and timers that need to be processed.
Get the output data from the transport.
Create a new sender.
Reject a sender link.
Create a new receiver and return it.
Called when the connection is failed.
Called when an EEP connection is active.
Called when the EP connection is closed.
Called when a connection error occurs.
Return a string representation of the color.
Get the TTF from the search path.
Set the compression flag.
Add an object to the PDF.
Write a stream to the output buffer.
Write a stream to the output file.
Add a new page to the document.
Sets the color scheme.
Sets the default font.
Add a new page to the chart.
Sets the font size.
Add text to the current page.
Add a newline to the current page.
Add a pie chart to the chart.
Outputs the current pages.
Returns a list of all orientation changes.
Outputs the current fonts.
Output all the images in the session.
Writes the image to the output.
Transforms the current matrix.
Calculates the absolute position of the current matrix.
Sets the style of the underline.
Rotates a point by the current angle.
Set information about the object.
Set the display mode.
Write the contents of the document to the output file.
Write the header to the session.
Puts the current number of pages in the document.
Put the resource dictionary into the session.
Writes information about the user.
Writes the trailer to the file.
Apply a function to each sequence in a sequence.
Optimized version of the naive algorithm.
Generator for gosper sequences.
Cycle detection for a sequence of sequences.
Fits the model to the test length.
Fits the y-axis to the given test length.
Checks if the x coordinate is greater than the test coordinate.
Returns True if the test coordinate is greater than the test coordinate.
Return a copy of this cursor.
Increase the x-axis by dx.
Increase the y-axis by the given amount.
Draws the text in the current cursor.
Returns a list of tags.
Returns a list of labels with the given name.
Delete a tag.
Creates a new label.
Returns a list of all items in the account.
Return a list of tags with the given label.
Returns a list of all users.
Setup Sphinx extension.
Return the path to the themes directory.
Make a POST request to the API.
Return a list of hosts.
Get the log set from the server.
The duration in seconds.
Update the transit and limbdark fields.
Compute the transit matrix.
Return a binary representation of the transit matrix.
Frees allocated memory.
Receive a number of bytes from the socket.
Generator that yields lines from the buffer.
Return the status of the connection.
Generate info message.
Generate an info message.
Return a list of capabilities.
Read mode information from the server.
Send a quit command to the server.
Return a datetime object from the server.
Send a help message to the client.
Generate new groups from a timestamp.
Generate a list of new records for the given pattern and timestamp.
List active replies.
List active times.
List new group names and descriptions.
List overview format.
List available extensions.
Return a generator for the given keyword.
Generate a list of lists.
Send a X-Z header to the client.
Generate reply lines for a pattern in a message.
X-feature-compress the gzipped features.
Return the offset of an integer.
Make a POST request to the API.
Make a DELETE request to the API.
Make a GET request to the API.
Returns a list of scheduled queries.
Returns a list of all tags in this account.
Return a list of tags with the given name or id.
Delete a tag.
Create a scheduled query.
Delete an alert tag.
Parse a newsgroup line.
Parse a header line.
Convert a dict of headers to a string.
Do a POST request.
Run a suite of tests.
Return a docstring for the default values.
Set the value of the field.
Check that the value is of the correct type.
Return the value of the field.
Check that the value is a scalar.
Returns the symmetric error of the model.
Set the errors.
Set the bounds and value of the object.
Import the metrics from the v2 metric definition.
Extract a dictionary from a list of metrics.
Filter the metrics based on the filter expression.
Sends the RPC to the server.
Apply the grammar to the given text.
Return the operator of the token.
Attempt to add an operation to the token.
Initializes the properties of the model.
Returns a list of all the parameters in the model. Parameters ---------- pnames : list of parameter
Returns the values of all the parameters in the model.
Returns the errors of all parameters in the model.
Clears all derived parameters.
Set the method of the request.
Get the environment variables.
Calls the API method.
Validates that the sceneinfo is valid.
Verify that the product is a valid type product.
Get the size of a remote file.
Validate that the bands are in the correct format.
Establish a connection to Earth Explorer.
Normalize a datetime object.
Join characters in an iterable using the given delimiter.
Get the positions of newlines in the given text.
Convert a point to a source.
Dump the results to stdout.
Remove all metrics and plugins from relays.
Create a new Story from a list of files.
Set the fortunes of a list of files.
Main entry point for the script.
Return the grammar for a rule.
Apply special handling to the given text.
The grammar of the input file.
Returns a list of all rules in the grammar.
Return a list of comments of the token.
Return a list of directives.
The output source of the computation.
Return a string representation of the token.
Get import directives.
Get enum for token type.
Get the class definition string.
Return the name of the entry point.
Get the source of a rule.
Get the transform of a rule.
Convert an Expression to an Asn.
Convert an AST node to an AST node.
Given a list of operands and a predicate, return a list of operands.
Remove grouping groups from an optree.
Convert AST node to code.
Convert an AST node to code.
Convert an AST terminal to code.
Convert an option group AST node to a list of lines.
Convert AST repetition group to code.
Convert a Python special handling object to a code string.
Convert an AST node to a list of code lines.
Convert an AST node to a list of code lines.
Return a list of code lines for an opr.
Return a list of code lines for a multiplication operator.
Return a list of code lines for a repeat operation.
Find directives that match the given predicate.
Return True if child is a child of parent.
Handles the response from the API.
Get a wx.ID from a wx.ID.
Remove a hotkey from a wxControl.
Add command line arguments to the parser.
Configure logging.
Validate the arguments.
Convert a list of operators to a list of postfix operators.
Convert an operator tree to an operator tree.
Reduce a list of nodes.
Load the plugin manifest.
Get the column lengths of all fields.
Returns a tuple of display and desclen for each column.
Escape all under-scores.
Output the markdown field.
Outputs the metrics in markdown format.
Generates the markdown file.
Parse the given text into a tree.
Attempts to reach the most consumed text.
Add command line arguments to the parser.
Parses a time string and returns a datetime object.
Outputs the given text as a CSV file.
Outputs the given text as JSON.
Outputs the given text as JSON.
Serializes the given text into an XML document.
Check if the given node is a terminal parse node.
Pretty-print a node.
Decorator to create a function that returns a single repetition.
Get a terminal node.
Extract text from extractor using given exclusion and text.
Count leading whitespace in text.
Calls the extractor with the given text.
Return the current position of the node.
Return True if this node is empty.
Add an ignored flag to the message.
Check if the given value is a type.
Return a flattened version of this node.
Return a trimmed version of this parse node.
Merge two nodes into a single node.
Retype this node to a new type.
Return a new compressed version of this node.
Return the position of the cursor.
Return the position of the max-readed position.
Moves the cursor to the next character.
Moves the cursor to the next line.
Move the cursor to the previous line.
Return the last line that has been read.
Increments the current position.
Save the current context to the database.
Restore the current cursor position.
Return a formatted string representation of the message.
Set the name of the signature.
Count the number of variables in the signature.
Count the number of functions in the signature.
Update the signature with a list of values.
Return a new scope with the union of the given signature.
Update the signature with the intersection of the given set.
Return a new scope that is the intersection of this scope with the given signature.
Update the signature with the difference in the given scope.
Return a new scope with the difference of sig.
Update the signature with the symmetric difference of two sets.
Return a new scope with a symmetric difference.
Add a signature to the signature.
Remove a signature from the scope.
Remove a signature from the scope.
Return the first signature.
Return the last signature.
Get a scope by its symbol name.
Get a signature by its symbol name.
Return a new scope with all the polymorphic return types.
Call the injected function on the current node.
Normalize an AST node.
Set the attributes of another node.
Check if a hit is OK.
Get the signature of the computation.
Resolve this signature to a list of components.
Given a type name, return a list of resolved type names.
Set the name of the resolved type.
Delete a local file if it exists.
Delete a file in S3.
Delete a file or directory.
Save a local file to disk.
Save a file to S3.
Saves the object to a temp file.
Find a bucket by path in S3.
Create an enum from a list of enums.
Set one thing in the chainmap.
Read the next character from the stream.
Pushes the rule nodes to the cache.
Pop the rule nodes from the cache.
Return the value of a node.
Add a parsed stream to the parser.
Begin a tag with the given name.
End the tag with the given name.
Set the rules for the class.
Set the hooks for this class.
Set the directives for this node.
Evaluate a single rule.
Evaluate the hook with the given name.
Return True if the stream contains the given text.
Returns True if there is at least one character in the stream.
Read a character from the stream.
Read until the end of the stream.
Ignore blanks.
Check that the cluster_hits_descr is compatible with the cluster_hits_
Add a rule clause name to a namespace.
Adds the given parser tree to the given BNF file.
Add a rule to the parser tree.
Add a sequence to the parser tree.
Adds an alternative parser to the parser tree.
Add a range to the parser tree.
Add a RPT to the sequence.
Add a capture to the given CPT.
Add a CPT to the parser tree.
Add a parsing hook to the sequence.
Set the value of a parameter.
Set the value of a parameter to a string.
Add a character to a parameter.
Set the id of a parameter.
Set the name of a hook.
Add a parameter to the hook.
Get the rules from the stream.
Ignore Cxx characters.
Add a state to the state list.
Return a string representation of the state.
Writes the object to a file in dot format.
Write the image to a PNG file.
Return a formatted string representation of the state.
Return the next state.
Resets the state of the agent to its initial state.
Infer all nodes and types of a block.
Infer a subexpression of this node.
Infer the value of a literal.
Dump the node information to stdout.
Return the exit scope.
Return a list of clauses.
Return an AST node for a Call node.
Return an AST node for `CallTrue` AST node.
Parse a hook node.
Return an AST node for the given rule.
Parse a capture statement.
Return the AST node for the capture scope.
Parse an alt statement.
Return a list of AST nodes for the given AST node.
Return an AST node for an optional statement.
Parse a rep0n AST node.
Parse a rep0n AST node.
Concatenate two strings into a single string.
Set the indent level of a list.
Convert a list to a string.
Print a list of nodes.
Populate a list of nodes from a list of nodes.
Populates a state register from a sequence of sequences.
Recursively build the state tree.
Return True if the value of n is equal to val.
Create a grammar from a string.
Create a grammar from a file.
Parse a node from a source string.
Parse a file and return a parsed node.
Set a node in the cache.
Set the node as an integer.
Set the value of a sub-node.
Dumps a deposition to a JSON dictionary.
Return a generator of recids from Invenio 12.
Get recids from invenio2.
Return a tuple of the check IDs and IDs.
Dump an object to a dictionary.
Return the number of users in the database.
Dump a User object to a dictionary.
Returns a set of recids modified since the given date.
Get the set of recids modified since the given date.
Get the restriction of a collection.
Return a list of revisions for a given record.
Returns a dictionary of all allowed collections for the given record.
Dump a record to a JSON string.
Returns the number of records that match the given query and date.
Dump a record to a JSON string.
Dump an object to a JSON object.
Load a common model from the database.
Collects all the things from all the entry points.
Initialize the Flask application context.
Get the SQL to run the database.
Execute a query and return the number of actions and the list of actions.
Dump a remote account to a JSON object.
Load a token from the database.
Import a record into the database.
Return the value of the config variable if it exists.
Dump an object to a dictionary.
Get the number of users in the invenio database.
Get all users in the invenio2 database.
Dump a User object to a dictionary.
Load a deposit from the database.
Create a record and pid.
Load a record from a record dump.
Load records from JSON files.
Returns a sorted list of profiler statistics.
Start the tornado web application.
Dump stats to a file.
Deletes the current profile.
Deletes the current profile.
Get the current running state.
Calculate the translation of each image in parallel.
Merge multiple images into one.
Add ones dimension to an array.
Create a record for the given dump.
Create a record for the given dump.
Update a record.
Create all persistent identifiers in the database.
Delete a record.
Create a new file in the given bucket and key.
Delete all buckets in a record.
Return a list of all PIDs that are missing.
Prepares the files to be stored in the database.
Prepare the pids for the current revision.
Return True if the given record has been deleted.
Load a community from the database.
Load a featured community object.
Dump a thing to a JSON file.
Check the existence of a thing.
Deletes the widget and event handlers.
Returns the magnitude of a vector.
Normalize a vector.
Transforms the texcoords into a list of tuples.
Ensure that thebones are present in the given data.
Set the length of the BED.
Set the parentbone for this node.
Get the pivot point for the given data.
Start the animation. :param data: data to start :type data: dict :param jump
Set the camera state.
Unset the camera state.
Set the state of the texture.
Unset the state of the bone.
Ensures that the model data for the given object is present.
Redraws the model data.
Draws the model.
Set the model to use.
Write a list of reports to a file.
Add a new menu.
Redraws the label.
Redraw the label.
Draws the widget.
Delete a widget from the list of widgets.
Redraw the label.
Registers event handlers for mouse motion and drag.
Register event handlers.
Add a label to the main widget.
Called when the exit dialog is clicked.
Update the progress bar.
Render all the actors in the scene.
Renders the world in 3D.
Check if a resource exists.
Add a new category to the plot.
Returns the missing texture if it exists.
Get a model object from the cache.
Load a model by name.
Returns the model data for the given model name.
Add a widget to the widget list.
Draws this submenu.
Redraw the screen.
Redraw the scroll bar.
Return True if the mouse is aaabb.
Returns the p - value of the distribution.
Add a layer to the layer list.
Add an action to the list of actions.
Executes the given action on all registered actions.
Register a new name in the registry.
Add a layer to the layer list.
Draws the widget.
Deletes all layers.
The border of the widget.
The offset of the widget.
Returns the size of the widget.
Read a mesh from a HDF5 file.
Create a connection matrix from the given shape.
Set the fields of the model.
Add one or more fields to the model.
Check that all elements have the same types.
The space of the element.
Return a list of all edges in the dataset.
Return a pandas DataFrame with the centroids and volumes.
Add an element set to a node set.
Convert a node set to a set of element surfaces.
Convert a surface to element sets.
Return the metadata for all the fields.
Return the metadata for this step.
Makes directories if needed.
Run GMSH on the mesh.
Read a history report from a CSV file.
Read a field report from a file.
Convert a list of strings to a string.
Return a string representation of the equation :param nodes: list of nodes :param dofs:
Convert a DataFrame to a set of unsorted labels.
Parse the response from the API.
Make a GET request to the API.
Write a XY report to a file.
Return an error message for the field.
Return True if the exception was thrown by the given descriptor.
Set the x and y attributes of the data object.
Return the mode of the given axis.
Set the options for the x and y axis.
Create a new class with the given function and attributes.
Cycle through the datafeeds.
Try to convert a value to a float.
Convert a string to an integer or float.
Plot a graph.
Force unicode conversion.
Return True if mime_type matches the mime type.
Cleans up the domain name from a string.
Splits a domain name into a list of left cuts.
Make hash keyword arguments for a document.
Collect all words in the sentence.
Index a document in a stream.
Invert a hash.
Given a list of hashes, return a dictionary of frequencies.
Looks up a TensorFlow index table for the given hash.
Create a list of items from a proto stream.
Reads a varint from the stream.
Read A block.
Serialize an SI key.
Convert a stream item to a key and data.
Context manager to temporarily change the working directory.
Strip a prefix from a string.
Strip a suffix from a string.
Return True if needle is a subsequence of haystack.
Starts the wsgiref server.
Shut down the server.
Returns a callback that will be called when the response returned an error page.
Add a new route to the parser.
Resolves the given method and path.
Resolve a non-literal route.
Normalize a pattern.
Return the response as a list.
Add a header to the request.
Set the value of a cookie.
Return a string representing the status of the response.
The content type of the response.
Delete a directory and all its contents.
Return a list of open file descriptors.
Attempt to fetch data from a file.
Return a list of lines from a file.
Generate a random adjspecies pair.
Generate a random adjspecies pair.
Morph a sentence using goolabs.
Show the similarity of a query pair.
Get the hiragana of a sentence.
List entities in a given sentence.
Shortsum a review.
Show a single keyword.
Run goolabs chrono on a sentence.
Initializes the pipeline for all stages.
Run the writers.
Run incremental transforms.
Replace a stage configuration with a new stage configuration.
Given a list of targets and a list of chainment names, return True if all of the
Return True if any of the target_mentions are present in the chain_mentions.
Match multiple tokens in a stream.
Create a tagger file.
Terminate the child process.
Multiplies a point by a number.
Returns a generator that yields start, end, and sentence of the cleaned text.
Set the label index for the given stream item.
Create sentences for the given stream item.
Create a cleansed file.
Create a new file for the given tagger.
Remove punctuation characters from a span.
Instantiate a pipeline configuration.
Generate a johnsmith chunk.
Make the clean_visible XML file for the given chunk.
Remove punctuation characters from a span.
Main entry point for the script.
Load a stage from a module.
Load the external stages from the given path.
Initialize a stage with the given configuration.
Read data from a file into a list of indexes.
Return True if href is valid, False otherwise.
Create a list of labels.
Yield paths to files in input_dir.
Iterate over all tasks in the queue.
Get a random available row.
Returns a list of sentences for the given nerdom.
Verifies that the md5 of the given data matches the expected md5.
Get a bucket from S3.
Decode data into a streamcorpus.
Extract a chunk from a bucket.
Convert a stream id to a KV layer key.
Convert a kvlayer key to a stream id.
Return the hash and time of the stream item.
Main entry point for the command line interface.
Build an argument parser.
Given a list of sentences, return a list of char tokens.
Given a list of char tokens, return a tuple of character offset tuples.
Add an element to the document.
Return a piece of text for the current element.
Return the index of the text element.
Iterate over descendants of an element.
Select elements from a DOM tree.
Select elements with the specified name from the XML source.
Select elements whose name matches the given pattern.
Return a list of elements that are following siblings of elem.
Calls the inkscape command.
Exports an inkscape file.
Convert an SVG file to a PDF file.
Converts an SVG file to a PNG file.
Return a Jinja environment for the given file path.
Sets up the template file.
Fill the template with the contents of the given doc_contents.
Save content to a file.
Create a DocType object from a template file.
Replace characters in doc_contents with SVG code.
Renders the given file.
Renders the given file.
Create an expat parser from a string.
Return the HTML fragment from a source string.
Insert text into the tree.
Insert node before refnode.
Return a copy of this element.
Return a string representation of the value of the node.
Insert a child element into the DOM.
Parse the config file.
Get Google credentials.
Create event datetimes.
Create a new event.
Main entry point for the event CLI.
Get the extension of a file.
Add a file extension if it doesn't exist.
Return a named temporary file.
Remove all files with the given extension from the workdir.
Write a CSV file to a JSON file.
Replaces old and new content in a file.
Parses the HTML tag.
Check the next sibling of the tag.
Create aitalic tag.
Create a strong tag.
Create an underline tag.
Parse the attributes of a tag.
Remove linebreaks from a tag.
Parses the href and returns the query string.
Parse the value of an attribute.
Translate key values from one set to another.
Return a JSON string representation of the object.
Find all files matching a regular expression in a folder.
Concatenate multiple strings.
Return a generator that starts with the given part.
Return a generator that returns True if the given full is contained in the given part.
Yields boolean values from an object.
For each item in a sequence, yield each item in the sequence.
Look up an item in a table.
Replace characters for SVG code.
Check if the given SVG file is a valid SVG figure.
Merge multiple PDF files into one.
Convert an embed font file to an SVG tree.
Embeds a font to an SVG file.
Check input types.
Check if the function is callable.
Recursive function to recursively traverse the output.
Create a Jinja2 input file.
Recursive helper function to recursively traverse the inputs and output.
Convert an object to a string.
Convert an object to a number.
Convert an object to a boolean.
Return a generator that serializes the given AST.
Change the encoding of an XML file.
Save text to a QR code file.
Launch a melody command.
Calls the given command with the given arguments.
Convert a tex file to a PDF file.
Return a list of options for each invoke.
Transforms a shapely geometry to another shapely geometry.
Create a geometry object from a geometry object Args: args (str): geometry object Args: args
Expands the range from 0 to 1.
Return a new envelope containing the intersection of this one and another.
Returns True if this rectangle intersects the other rectangle.
Create a polygon object.
Create a new Dataframe from a z-value and m-value.
Write the main dataframe to a file.
Select rows based on a condition.
Return a new table with rows at the given nuclei.
Return the intersection of this table with another table.
Return a new table where rows are not in this table.
Return a new QuerySet with only the elements where the elements are evenly spaced.
Return a new QuerySet with only elements that are not evenly spaced.
Return a new QuerySet with only elements that are even-even.
Return the error of the dataframe relative to the given relative_to.
Computes the binding energy of the model.
Convert a string to a number.
The s1n of the DAG.
Convert to P.
Derivative of S1 p.
Return a table of values derived from the given formula.
Uses the given function to use the database.
Derive a key from a master password.
Create a database from a path or URI.
Search for domains matching the query.
Modify a domain by name.
Create a new domain.
Extract HBS messages from a file.
Return the prefix of a VSI path.
Return the SID of the author.
Entry point for the command line interface.
Update a file from a URL.
Return a dictionary of all available GPD drivers.
Return the image driver for the given path.
Convert a GDAL geom to an array of rasters.
rasterize a GDAL image.
Open a GDAL image file.
Create a GDAL Image from a byte string.
Copy a raster from one source to another.
Returns a dictionary of all options that are available to the user.
Create a GDAL raster.
Set the affine transform of the dataset.
Read an array from the dataset.
Envelope of the raster.
Get the image driver.
Create a new raster.
Return a masked array of the given geometry.
Returns the value of the NoData field.
Read a raster from the dataset.
Resample the raster to the given size.
Save the image to the given path.
Set the projection of the dataset.
Warp the raster with the given spatial reference.
Calculate the chunk length of the alph_len.
Lookup the alphabet for the given charset.
Encode a single chunk.
Convert a chunk to a long.
Return the chunk at the given index.
Return a compiled regular expression for the given file.
Normalize date format.
Detect the timezone for the current locale.
Return a dict representation of the Swagger object.
Runs the job_handler on the given host and port.
Main entry point for the worker thread.
Run a worker pool. :param job_handler: job handler :param max_workers:
Sets the classification of this ChartSettings.
Send a message to lwlink.
Turn on a light.
Turn on a switch.
Turn on with a given brightness.
Turn off a device.
Send messages from the queue.
Send a reliable message.
Sets the nature of this DeviceData.
Setter for _config_files.
Iterate over the values of all options.
Create the configuration file for the given index.
Update the configuration from a dictionary.
Read the configuration from a TOML file.
Reads the config files and returns a dictionary containing the contents of the configuration file.
Return a list of names for the given option.
Return a list of sections for the given command.
Build and return an argparse.ArgumentParser.
Parse command line arguments.
Return a list of command names for bash-comp.
Run bash completion.
Start a new master.
Called when a connection is made.
Called when a line of data is received.
Called when the connection is lost.
Called when a job is loaded.
Called when a response is received.
Close the job and return it.
Runs a list of jobs.
Closes the server and all of its workers.
Wait for all waiters to complete.
Add a result to the list.
Wait for the task to be completed.
Load the next job from the queue.
Mark the job as done.
Add a result to the results list.
Cancel the job queue.
Wait for all active jobs to complete.
Distribute jobs from the active JavaScript.
Add a job set to the queue.
Get a job from the active JavaScript.
Return a job from the job source.
Add a result to the job.
Distribute the jobs that have been done.
Closes the Javascript queue.
Remove duplicates from a list.
Return True if the object matches the given regular expression.
Return the boto region object for the current environment.
Filter entries based on filters and exclude.
Get the public DNS name of a host.
Initialize an instance from a json dictionary.
Get the value of an attribute.
Create an instance from a boto instance.
Return True if the filter matches the filter.
Return a string representation of the IP address.
Add a timestamp to the event dictionary.
Create a logger with the given name.
Setup a Celery instance.
Delete a worker from the queue.
Return the configuration section as a dict.
Command handler for creating and editing config files.
Prepares the rows to be inserted into a table.
Get a color hash from a string.
Generate a random color.
Check if a user has the given credentials.
Check if a user has the given token.
Check if the given process is running.
Import an object from a module.
Get the IP address of the client.
Make a request to the API.
Prepare the parameters for the POST request.
Run the dna server.
Render the template with the given name and value.
Stream a list of commands into a stream.
Return a workdays object for the network holidays between two dates.
Get the path to the given command.
Builds the ssh command string.
Create a Profile object from command line arguments.
Add a relationship to the relationship.
Return a list of all related objects of the given type.
Load relationships from a source.
Add a Content-Type part to this Content-Type.
Load a part from a file.
Find the extension for the given name. :param name: The name of the extension :type
Create a ContentType object from an element.
Parses the given string and returns a chatl visitor.
Builds a JWK from a secret key.
Assign force field to a AMPAL object.
Finds the maximum radius and a numpy array of parameters.
Makes a dictionary with all the parameters of the FFF file.
Return a stream of data as bytes.
Return a generator of segments matching the given name.
Returns a list of all filenames in the given directory.
Returns a list of all the directories in the given directory.
Create a prefix for the bucket.
Delete a file from the bucket.
Ensures that the user is logged in.
Get the loud language of the language.
Return the URL to the home page.
Return a sorted list of all hotspots in the tree.
Get the keeper token for a given host and username.
Upload a build to a directory.
Determine if the travis event should be skipped.
Confirm that a build has been confirmed.
Recursively update a dictionary with the contents of u.
Entry point for the keeper script.
Edit a part.
Print the contents of a directory.
Splits a path into parts and tails.
Return the editor for the given file path.
Process module content.
Generate an HTML chart.
Renders the chart object as HTML.
Serializes a data object to a chart.
Patches the given json_data dictionary with the given json_data.
Convert JSON data to HTML.
Convert a dictionary to a pandas dataframe.
Write HTML to a file in a folder.
Return the chart class for the given dataframe.
Encodes x and y fields.
Infer the url of the tarball.
Create a new build.
Down the application.
Generate a random binary string.
Generate a random IP address.
Generate a random date between two timestamps.
Create a new session object.
Make an API request to the API.
Create a new build.
Check the status of a build.
Generate a sequence of strings for the given prefix.
Registers all sub-commands in the given parser.
Returns an argument parser for the root arg parser.
Returns the description of the document.
Return the help string for this command.
Run the parser.
Encodes a dataset into a string.
Get a list of all the ATHletes.
Returns a list of the last n activities.
Request the activity list for a given athlete.
Request activity data from the API.
Return the endpoint for an athlete.
Return the endpoint for an activity.
Get a request from the goldencheetah endpoint.
Create a build from a tarball.
Create a URL with the appropriate authentication.
Get a random title.
Generate a random person.
Get a random name for the last language.
Render the template.
Set the dataset to use.
Renders the data as a series.
Check if the given type is one of the given types.
Return the URL for this request.
Opens a web browser and returns it.
Save the object to a file.
Open the URL and return the URL.
Reads the image from the URL and returns it.
Write the URL to a file-like object.
Return the checksum of the file.
Returns the amount of a given number.
Return a dictionary of unprotected and protected claims.
Return the signing keys as a JWK.
Unpack a metadata statement.
Packs a metadata statement into a signature.
Evaluate the given metadata statement.
Corrects the given federation usage.
Extend the request with a list of SMS messages.
Parse command line arguments.
Add command line arguments to the argument parser.
Apply logging options to log files.
Log a message with verbose level.
Return a dictionary mapping letters to their number.
Generate anagrams in a word.
Return a new instance of the AMPAL class.
Transform a timeseries to a list of metric names.
Get the last value from a timeseries.
Validate a page number.
Get a page of an iterator.
Changes the permissions of a file.
Create an internal signing service.
Create a signing service for the given entity.
Sign a request with the keyjar.
Create a new resource.
Update a metadata statement.
Update the signature for the given location.
Yields the contents of the bundle.
Create a bundle from a dictionary.
Returns a list of URLs for the given asset type.
Return HTML tags for the given asset type.
Return HTML tags for all asset types.
Turn a URL into a protocol string.
Find all links in a given URL.
Return a listening endpoint for connections.
Returns a list of all the modules in the project.
Imports all the modules in the project.
Select fields from a document.
Apply a date map to a document.
Print a cursor to the console.
Print the result of the cursor.
Given a list of tasks, return a list of tasks.
Add default departments to a project.
Add default dependencies and sequences to prj.
Create a new shot for the given sequence.
Create all tasks for the given element.
Get a value from a config section and key.
Add a factory to the registry.
Remove a factories by identifier.
Connect to the given protocol factory.
Receive data from the given connection.
Disconnect a protocol from the server.
Call a remote command.
Called when a connection is made.
Called when a multiplexed connection is made.
Called when data is received.
Send data to the remote device.
Called when a connection is lost.
Returns the local protocol for the given connection identifier.
Called when a remote data is received.
Disconnect a remote connection.
Create a new string centered on my.
Print a string with the clock on the right.
Return the version number as a string.
Identify the framework for a target unit. :param target_unit: the target unit :
Assert that a unit has the correct dimensionality.
Pad data to block_size.
Unpads the given data with the given block size.
Signs the request with the self-signer.
Gather metadata statements from the database.
Prints a pretty print of an input word.
Argument parser for nagaram.
NAME anagram_in_word.py DESCRIPTION prints a list of ana
Called when data is received.
Called when a type is unregistered.
Create a stub for RPC functions.
Check if a remote call is being pinged.
Return a tuple of regexes for the command.
Convert a string into a AMPALList.
Convert a list of strings into a list of strings.
Verify that the metadata statement is valid.
Parse a remote response from the server.
Get a list of databases.
Sync a folder with S3.
Build a package from a package.
Create a fridge that is readonly.
Loads a JSON file from disk.
Signs a JWT using the given keyjar.
Create a signed by signing keys payload.
Load all modules in the given test directory.
Command-line interface for librarian.
Return the score of a letter.
Compute the score of a word.
Return a list of all words in the corpus.
Check if a word is a valid SCrabble word.
Called when a string is received.
Get the command and responder function for the given command name.
Parses the request values.
Write the response to the transport.
Called when a connection is lost.
Build a Protocol object from a JSONAMP protocol address.
Convert a JWKS string to a KeyJar object.
Load a bundle from a JSON string.
Process a customer event.
Process a Cinder message.
Process a customer event.
Processes a customer event.
Process a swift message.
Process a keystone event.
Process a single heat event.
Start the WSGI server.
Print a message to stdout.
Print a message to stderr.
Register a new command class.
Register a command class.
Convert the value to a string.
Create a new Argument from a string.
Update the completer dictionary.
Connects to the ternya server.
Initialize the MQ connection.
Initializes the service modules.
Initialize nova consumer.
Initialize the Cinder consumer.
Initialize the neutron consumer.
Initialize a glance consumer. :param mq: :param mq: :param mq
Initializes the heat consumer.
Enables or disables a component notification.
Get information about a song.
Download a music file.
Executes the instruction.
Loads an attribute from the globals dictionary.
Calls a function on the stack.
Dump a mysql database to a file.
Called when the program exits.
Run the program.
Temporarily change the current working directory.
Recursively copies the contents of src into dst.
Causes the debugger to be executed.
Get the mtime of a file.
Check if file has changed.
Synchronize the formatime database with the database.
Remove all data from the cache.
Scrape an IPDB feed.
Downloads the image from the server.
Check if the image has changed.
Finds the caller name and line number of the calling function.
Get the defining component of a package.
Command-line entry point for xtuml.
Finds the symbol with the given name and kind.
Check if a package is contained in a package.
Return True if the pe is a global pe.
Get the name of the data type.
Returns a list of related attributes.
Create an enum from an EDT.
Create a bridge function.
Create an external entity.
Create a function to run a sync.
Calculates the constant value of a CDF.
Create a classmethod for an operation.
Create a property for a derived attribute.
Create a simple association between two Simp objects.
Create a new association.
Create a new domain object from the given model.
Send a single call to the server.
Accept a reply from the server.
Reject a call.
Send a raise reply to a remote exception.
Wait for a call to be completed.
Establish a connection to the worker.
Dispatch a reply to a remote result.
Guess the type name for a given value.
Deserialize a value into a Python object.
Get a single document from the index.
Put features into the database.
Delete a document from the index.
Delete all documents in the index.
Delete the index from the database.
Scan a prefix for features.
Yields the IDs of all occurrences of a prefix.
Return a generator of scan IDs for a given index.
Return a list of feature names.
Return a list of key range filters.
Returns a mapping of index names to their corresponding indices.
Returns a list of field types.
Return a list of disjunction from a query.
Return the number of features in fc_dict.
Count the number of bytes that match the filter predicates.
Return a pretty-printed string representation of a FeatureCollection.
Processes the docopt options.
Default formatter for HTMLEncoder.
Return a pretty-printed representation of an instance.
Return a pretty-printed representation of a unique identifier.
Check the uniqueness constraint for the given metaclass.
Check link integrity. :param link: Link object :type link: Link object :type link
Check if the given rel_id is a subtype of super_kind.
Return a string representation of a value.
Delete all rows from the table.
Implement scan prefix implementation.
Store the values in the index table.
Store a value in the index table.
Yield the keys for a given index.
Return the index object for the given name.
Add a direction to the template.
Get the name of the type.
Get the reference to the attribute.
Builds a core type from a CDN.
Build an enum type.
Build a struct type element from a SDT.
Builds the user type element.
Builds the type of the object.
Build a class from an object.
Builds a component from a C element.
Build a schema element.
Return a pretty-printed version of xml_string.
Fetches a list of bikes from the server.
Set the positional information for a node.
Create a queue with the given name.
Delete the queue with the given name.
List all queues.
List all exchange names.
Purge a queue from the queue.
Create a MIME multipart message.
Reads the text cache from the server.
Return True if the text is visible.
Entry point for the bridgepoint command line interface.
Serialize a value to the given type.
Serialize the association as a string.
Return a string representation of the class.
Entry point for the command line interface.
Partition a collection by a condition.
Render the bidi context.
Find a link between two models.
Compute the lookup key for the given instance.
Compute the index key for the given instance.
Returns the type of an attribute.
Create a new instance of the model.
Iterate over all instances of this class.
Define a metaclass.
Send a multipart message to a socket.
Coroutine to receive messages from a socket.
Runs a shell command to determine if the code is dead.
Parse email addresses.
Decorator to register a function as an RPC.
Return the rpc spec table for the app.
Normalize the postcode to be a valid postcode.
Return the next value from the stream.
Accepts all packages in an ep_sys instance.
Accept a C instance.
Accept an EEP package.
Get the brightness of the image.
Matches the value with the given arguments.
Finds the position in the document that matches the given position.
Returns a QTextEdit.ExtraSelection object for the specified character.
Called when the cursor is changed.
Return a tuple with the exception information.
Get an instance of the class with the given name.
Executes the console widget.
Moves the cursor up the pressed state.
Moves the cursor to the right of the history.
Moves the cursor to the previous edit in the history.
Move to the next edit in the history.
Handle a reply from the client.
Returns True if the history is locked.
Returns the history edit for the given index.
Sets the history for this edit.
Stores the current edit in the history.
Called when the client closes the console.
Convert a collection to a Pandas DataFrame.
Set the attributes of the object.
Subscribe to all topics.
Log a message to the log.
Iterate over a remote repository.
Convert notebook to this notebook format.
Return the importer for the given path item.
Return a stringio instance.
Determine if the setuptools file should be overriden.
Parse a requirement from a source string.
Return the parsed package info.
Collapse leading WS headers into a single string.
Remove cursor position changed events from the text edit.
Connect the cursor position changed signal and install the event filter.
Returns the current text cursor.
Update the current item.
Register the admin site for the given app.
Return a list of disk partitions.
Get the number of CPU times for the current system and idle time.
Returns a list of the number of times each system is per CPU.
Read data from stdin and return it as a string.
Read data from stdin and return it.
Updates the visibility of the tab bar.
Creates a new tab with the current kernel.
Add a tab with a frontend.
Populates the all_magic_menu and all_magic_menu.
Closes the window and waits for it to finish.
Check if a passphrase matches a hashed passphrase.
Indent the short title of an item.
Check if the user has permission to change the object.
Check if the user has permission to delete the object.
Add n nodes and edges to a graph.
Make a binary tree of the given levels.
Submit a set of jobs for each node in the graph.
Validate that all nodes in the tree have the same metadata.
Make a color table for the given class.
Return a copy of this colorscheme.
Add a new color scheme.
Set the active scheme.
Return the path to the library.
Handles IOPUB messages.
Wait for the kernel to be running.
Set the style of the document.
Get the format for the given token.
Get the format from the document.
Returns a QTextCharFormat object for the given token and style.
Find the path to a command.
Normalize a path.
Check that the given attribute is present in the given distribution.
Check if the value is a map entrypoint.
Return whether the last blank line is blank.
Return True if src is the last two blanks.
Transform the assignment system into a string.
Replaces assign magic magics in the given line.
Transforms the given line into a classic prompt.
Transform a line of input into a prompt string.
Find and return the number of spaces and the full indent.
Store the given lines in the given buffer.
Reset the source to its original state.
Process cell magic lines.
Append lines to the line mode cell.
Transforms a cell into a new cell.
Post a notification to all registered observers.
Returns a set of all observers for a notification.
Register a callback to be invoked when a message is received.
Update the status of all running jobs.
Report the number of jobs in a group.
Flushes the given group to the given name.
Check if the status is new.
Report the current status of the task.
Initializes the background job.
Inserts a new value at the given index.
Returns a copy of the object.
Declare a special class.
Declare a list variable.
Declare a set variable.
Set the path to the working directory.
Moves a random route from one state to another.
Calculates the energy of a given state.
Return a dict with the default values for the given keys.
Check if the table is the same type as the type.
Render the expression of a check.
Format a list of rows into a table.
Create a link to the given URL.
Generate a JS file from a URL.
Return the CSS file for the given URL.
Create an HTML img tag.
Subtract a numeric value from a numeric value.
Multiply a value by a number.
Divide a value by a number.
Returns the modulo of the given value and argument.
Returns the verbose name of an object.
Split a user input line into pre, esc, ifun, and ifun.
Add command line options to the parser.
Deactivates all built-in builtins.
Find the name of a URL in the index.
Yield explicit links.
Return a shell list from a string.
Main entry point for the coverage script.
Add an action to the dash.
Append an action code to the parser.
Print the help message.
Handles the help subcommand.
Check if args are allowed.
Runs the source code and save it to the file.
\x1b[1mNAME\x1b[1mNAME\x1
Unserialize a Python object.
Set sys.displayhook and sys.displayhook.
Log errors and return the result.
Check if the given URL is a valid URL.
Validates that the given URL is valid.
Validate a URL container.
Pulls a value from a list or tuple of keys.
Return a list of random ports.
Apply a sequence of sequences to the map.
Returns the last n lines of the history.
Set the auto-indent flag.
Initialize the log start flag.
Saves the state of the sys module.
Restores the sys module state.
Register a post-execute function.
Create a new main module.
Initialize user namespaces.
Returns a list of all namespace references.
Resets the history manager to a new state.
Delete a variable from the database.
Remove all occurrences of a regular expression.
Find a property in the struct.
Find an object in the namespaces.
Inspect an object.
Initialize the history manager.
Show the traceback of an exception.
Prints a traceback to stdout.
Shows a syntax error traceback.
Insert indentation before the next line.
Set a custom completer.
Set the completer frame.
Runs a magic for a given line.
Find a magic by name.
Add a macro to the user namespace.
Run a system command on the remote host.
Prompts the user to rewrite the input.
Return a dictionary of user-defined variables.
Return a dictionary of user expressions.
Evaluate an ev expression. :param expr: The ev expression :type expr: str :param
Run cell in IPython notebook if it doesn't exist.
Runs a cached cell magic.
Expand variables in a command.
Create a temporary file with the given data.
Shutdown the session after exiting any operations.
Broadcast a message to one or more targets.
Return a list of all profiles in a directory.
List all bundled profiles.
Find a version by key.
Return the path to a file.
Read the next line from the stream.
Send a string to the child process.
Sends an integer to the child process.
Prepare a regular expression pattern.
Prepare a regular expression pattern.
Search for a string in the given buffer.
Searches the given buffer for the best match.
Unpack a directory and all its contents into extract_dir.
Return the last error in the log.
Execute a command and return the output.
Try to find the source file for the given filename.
Return the list of arcs executed.
Return a list of missing arcs.
Returns a list of all unpredicted arcs.
Return a list of branch lines.
Return the total number of branches.
Return a dictionary of all arcs that are missing from the current branch.
Return a dictionary of stats for each branch.
Set the precision of the metric.
Return the coverage of the covered statement.
Return a string representation of the uncovered PC.
Given a list of needles and a list of strings, return the highlighted text.
Highlights the given string with the given keywords.
Highlight words in a string.
Run a function on this module.
Unquote the end of a string.
Return a marquee string.
Format a screen string.
Dedent a string.
Wrap paragraphs in a list of columns.
Find the optimal number of rows in a list.
Get a value from a list or return the default.
Build the kernel argument list.
Initialize the ssh connection.
Pretty print an object.
Pretty print a Python object.
Get the MRO of the given class.
Prints a pretty-print of an object.
Pretty print the object.
Print a pattern pattern.
Print a type declaration.
Prints the contents of a function.
Pretty print an exception.
Decorator to add a type to the pprinter.
Register a function to be called when a type is registered.
Writes text to the output.
Append a breakable to the end of the buffer.
End a group.
Flushes the buffer.
Pretty print an object.
Writes a row to an ODS sheet.
Get clipboard data from win32 clipboard.
Get the contents of the OSX clipboard.
Get the clipboard text from tkinter.
Get the prefix for the build.
Rekey a dictionary of keys.
Extract dates from an object.
Recursively squash all dates in an object.
Return the default date for an object.
Check if the install directory is a site directory.
Write a script to the install directory.
Sleep for a given amount of time.
Create a new argument parser.
This is the main entry point for the broker.
Build a packagefinder object.
Changes the log level.
Return a default logger.
Check if flags have changed.
Print the help for all the aliases.
Print the help for all flags.
Print the list of subcommands.
Print the help message.
Prints the list of examples.
Update the config with the given config.
Initialize a sub-command.
Flatten the flags and aliases.
Parse command line arguments.
Load a configuration from a file.
Generate the config file for this class.
Downsample an array by k.
Format a list of info into a string.
Write a message to the output.
Called when the configuration of a configurable instance has changed.
Get help for a class.
Return a help string for a trait.
Clears the instance of the class.
Format a failure message.
Handler for the crash handler.
Flush all pending events.
Emits start_channels signal.
Read data from file.
Read a byte from a pipe without interrupts.
Split a string into a list of tokens.
Compress a Dhist.
Add a magic function to the dictionary.
Return a dictionary of all the magic functions.
Format latex output.
Add a default option to the options table.
Displays the gui reference in the ipython notebook.
Create a task from a callable.
Get task info with the given label.
Get the callable object from the info.
Calculate the next run.
Submit the task to the task channel.
Runs the task.
Run the Asap run.
Runs the given callable over the given number of iterations.
Runs a series of iterations.
Locate the URL file in the security directory.
Bind kernel to the application.
Create an interrupt event.
Run the main loop.
Filter the namespaces that match the given pattern.
List all namespaces matching the given type pattern.
Raises an exception if any of the mutex operations are not in the dictionary.
Draws the current figure if it is interactive.
Flushes all figure managers to the display.
Send a figure to the backend.
Loads the specified ipython extension.
Unloads the specified IPython extension.
Generate random ports.
Initializes the notebook web application.
Handle a sigint signal.
Confirm that the user has exited.
Cleanup all kernels.
Calculates stock prices for a given period of time.
Replace multiple characters in a dictionary.
Renders the output of the shell.
Create a ZIP file from a list of files.
Remove prerequisites from prerequisites.
Return True if obj is a mappable object.
Get the partition of a sequence.
Run a source file and return the output.
Run a source command.
Download a PI file.
Reduce the frequencies of a list of frequencies.
Compute the number of digits in a file.
Convert a txt file to a list of digits.
Compute one-digit frequencies for each number of digits.
Computes two-digit frequencies from a list of digits.
Return the number of digits in a list of numbers.
Plot two-digit frequencies of two-digit frequencies.
Plot one digit frequencies.
Prints the expression in debug mode.
Reverse a view. Args: view (str): The view to reverse. kwargs (dict):
Return True if base is a private prefix of prefix.
Runs a debug script on the given source code.
Run a Python script in debug mode.
Write a debug script to the given module.
Return a dictionary of all the files in the hashroot.
Compresses the contents of the hashroot into a single file.
Return a list of all keys matching the glob pattern.
Returns True if the given record is allowed.
Format an error and add it to the test.
Embed an interactive shell into an interactive shell.
Create a new CSV writer for trans_title and meta_title.
Return a list of languages in the locale_root directory.
Write a list of po entries to the given po file.
Write a header to the po file.
Subscribe to a user.
Initialize the command line parser.
Run a Python module.
Run a Python file.
Make a Python code from a Python source file.
Make a Python code from a pyc file.
Generate HTML table for the given item matrix.
Set the current value.
Cancels the completion.
Selects the index for a given row and column.
Update the list.
Return a dictionary of word frequencies.
Print word frequencies.
Return a string representation of the element.
Write the message to a file.
Validates a pin against the schema.
Send a shared pin to a list of topics.
Delete a shared pin.
Send a pin to a user.
Delete a pin from a user.
Subscribe to a topic.
List all subscriptions for a user.
Begins a new task.
A context manager for executing a task.
A context manager for sub-monitoring.
Updates the progress bar with the given number of units.
Create a new progress monitor.
Mark the work as done.
Move the build directory to the new location.
Load a list of pyconfig files into a Config object.
Load configuration from file.
Load a flag from a dictionary.
Decode a list of arguments to a list of unicode strings.
Load configuration from argv and aliases.
Convert the config file to a config file.
Find a module by name.
Called when a stop event is received.
Called when the process is started.
Called when a stop operation is received.
Interrupt and kill the device.
Find the command line arguments for this program.
Start the mpi launcher.
Send a file to SCP.
Fetch a file from the remote host.
Return the number of engines.
Starts the specified number of engines.
Start a new job.
Return the default context for the cluster.
Parse the job id from the output.
Write a batch script to the batch file.
Start a new job.
Create a context menu.
Appends a jpg to the prompt.
Appends a PNG image to the prompt.
Append an SVG to the prompt.
Add an image to the document.
Copy an image to the clipboard.
Returns the image with the given name.
Inserts an image into the given cursor.
Inserts an SVG into the document.
Saves an image to disk.
Called when an exit of the process has been changed.
Initialize the environment variables.
Prompts the user to rewrite the input.
Asks the kernel to exit.
Set the next input.
Read the configuration from a file.
Get a list of values from a section and option.
Get a list of lines from a section and option.
Set the timid from the environment variable.
Set attributes from keyword arguments.
Load configuration from a file.
Set an attribute from a config option.
Set the list of delimiters.
Split a single line.
Return a list of matches for the given text.
Return a list of strings that match the given attribute.
Called when the user has changed the splitter.
Return a list of aliases that match the given text.
Return a list of matches for the given text.
Called when the user completes a line.
Return True if the record matches one of the tests.
Return a list of records that match the given check.
Extract a subdict from a record.
Return True if the user is in a quiet state.
Write the output prompt to the terminal.
Write format data to stdout.
Logs the output of the command.
Raise an InvalidOperationException if the operation is frozen.
Convert a mysql timestamp string to a timestamp object.
Called when an event loop is changed.
Perform one iteration of the loop.
Publish code to pyin.
Send an abort request to the server.
Send a clear request to the client.
Return a string representation of the topic.
Send a shutdown message to all shell streams.
Add a new module to the context stack.
Remove all modules from the context.
Return the absolute path to a directory.
Return True if the given file name is a file-like.
Check if an object is a class.
Check if the given path is a package.
Return the logarithm of a label.
Convert a class to a class.
Get the number of CPU times for the system.
Get the command line for this process.
Returns a list of open files for this process.
Returns a list of nt_connection objects for this process.
Check if a user has a group.
Resolve a class from a module path.
Calculate usage percent.
Login to the GDSII server.
Get the gdocs key from the URL.
Ensure that the temp directory exists.
Remove temporary files from the temp directory.
Uploads a file to the GD server.
Synchronize local and remote CSV files.
Downloads the CSVs from the GDocs and saves them to the temp directory.
Uploads the contents of the file to the EODS.
Clears the document from disk.
Create a new QT console.
Check if the given URL is allowed to be accessed.
Check if a URL has the given contents.
Get the response code from the given URL.
Compares the content type of the given url with the given content type.
Compares the response code of the given URL with the given code.
Validate that the source and metadata are valid.
Clear stdout and stderr output.
Create a list of code units from a list of files or directories.
Return the root name of the module.
Return the source file of the file.
Return True if the file should be converted to Python.
Return the total number of seconds since the epoch.
Waits for the result to be returned.
Wait for messages to be processed.
Get a dictionary of engine IDs.
Abort the message.
Return the amount of time elapsed since the last request.
Wait for the queue to be ready.
Republish a display publication.
Wait for all the outputs to be written.
Wait for all outstanding messages to complete.
Return the absolute path of a file.
Prepare a list of patterns to be used as a list of patterns.
Get the separator from a string.
Find all python files in a directory.
Return the filename relative to the current directory.
Return the canonical filename for the given filename.
Get the zip data from a file.
Return True ifffpath is a valid file path.
Return True ifffpath matches the pattern.
Map a path to a canonical filename.
Start the Qt4 event loop.
Loops over a gtk kernel.
Enables the given gui in the given kernel.
Return the goe of a given number.
Calculate the center of the eigenvalue of a matrix.
Computes the ensemble diffs.
Initializes the step.
Loads the configuration file.
Write the file to disk.
Erase the contents of the file.
Return a dictionary of all lines in the document.
Return a dictionary mapping arc names to their sorted values.
Write the data to a pickle file.
Read lines and arcs from a file.
Load data from pickle file.
Read a file and return a dictionary of lines and arcs.
Combine lines and arcs into lines and arcs.
Add line data to the file.
Add arc data to the arc dictionary.
Add lines and arcs to the given hasher.
Return a summary of the file.
Return a generator of lines from a given string.
Main loop for interacting with the robot.
Replaces a single line of history with a new one.
Prompt the user for a line of text.
Try to edit syntax error.
Prompts the user to exit.
Return the URL and revision.
Create a new frontend master widget.
Initializes the colors of the widget.
Return a tuple with the identity url, pub_url, pub_url, location.
Convert a numpy array to a NumPy array.
Sets the active color scheme and the PDB colors.
Toggles the active color scheme.
Convert traceback to text.
Format a traceback for debugging.
Format a list of extracted lines into a list of strings.
Show the exception only.
Set the mode of the table.
Ensure a module is imported from a list.
Add a line to the code.
Add a new section to the code.
Get a function by name.
Return the code for the given expression.
Render the DOT file.
Implement the ``dots`` command.
Render a template.
Return a dictionary with the default formatters.
Register a function to be called when a type is recognized.
Called when the precision of a float is changed.
Return a list of user-specified configuration files.
Configure logging.
Configures the environment from a list of paths.
Navigate to the next page in a string.
Print a page of a file.
Get pager command.
Get the start of a pager.
Prints a snip from a string.
Print basic unicode output.
Pretty-print a latex document to PNG.
Pretty-print a latex document to PNG.
Return True if o can be printed to LaTeX.
Return a latex representation of an object.
Add options to the parser.
Validate a list of strings.
Validate that a dictionary contains strings.
Start the ioloop thread.
Handle incoming messages from the server.
Autocomplete for text, line, cursor_pos.
Get information about an object.
Shut down the server.
Flush all pending messages to the IOLoop.
Send an input command.
Start all the channels in the shell, sub, stdin, hb.
Stop all channels.
Returns True if all channels are running.
Load the configuration from the connection file.
Start a new kernel.
Shut down the kernel.
Kills the kernel if it exists.
Interrupts the kernel.
Sends a signal to the kernel.
Returns True if the current thread is still alive.
Returns a shell channel object.
Returns a sub-channel object.
Returns the HB channel object.
Bind kernel to zmq.
Print a debug message if debug level is greater than level.
Get the list of extension classes.
Implement the pre-step method.
Recursively walk an egg directory.
Scan a module for stubs.
Launch a new ip controller instance.
Save a connection dictionary to a JSON file.
Load the configuration from a JSON file.
Load secondary configuration from JSON.
Enables auto-panning of the cell.
Disables auto-panning of the cell.
Runs a cell in the virtual machine.
Run a heartbeat for a given message.
Run a task.
Remove a task from the database.
Patches the object with the given name if it doesn't exist.
Accept a new connection to the server.
Reject a pending connection.
Get a proxy agent.
Check if the form is valid.
Handles the DELETE request.
If the user is logged in, then set the user field to the request user.
Reloads all modules from the cache.
Shows the editor for the given file.
Returns the text of the clipboard.
Add a function to the chain.
Return the metadata for the given path or module.
Configures the plugin.
Import an item from a package.
Try to use a passwordless ssh keyfile.
Try to open a passwordless ssh server.
Try to connect to a passwordless ssh server.
Establish a tunnel to a socket.
Open a tunnel to a remote host.
Stops all scheduled tasks.
Unwrap an exception.
Register an engine.
Remove an engine from the queue.
Handle a execute reply message.
Flush all pending notifications.
Coroutine to flush the results.
Flush messages from the control socket.
Flushes the ignored control buffer.
Flush the iopub message from a socket.
Repeatedly spins every interval seconds.
Stops the spin thread.
Spin the server.
Send a apply request to the engine.
Returns the history of the hub.
Send a query to the database.
Return a set of opcodes.
Get the byte parser.
Return a set of lines that match the given regular expression.
Return the first line in the multiline.
Given a list of lines, return a set of lines that are not in ignores.
Parse the source file and return a tuple of lines and excluded lines.
Return a list of tuples of all arcs.
Return a list of child parsers.
Iterate over the lines in the code.
Find all statements in the file.
Return a string representation of the block stack.
Check that all the chunks are valid.
Yield lines of arcs.
Return a list of all child parsers.
Returns a set of all arcs in this parser.
Start the coverer.
Report the coverage of the modules in the given stream.
Check if a file should be included.
Interpret a distribution name.
Open a URL with an authentication header.
Get the parent of an object.
Return the root topic of the engine.
Render a template with the given context.
Configures the plugin with the given options.
Formats an error and adds it to the buffer.
Split data by num.
Convert a notebook to a new notebook format.
Convert a hex color to RGB.
Get a dictionary of colors for a given style name.
Get the font for the given family.
Handle a reply from the client.
Handle a history reply.
Handle a PyOut message.
Handle display data message.
Initializes the shell channel history.
Execute a file on the remote host.
Process an error from the server.
Process the execute payload.
Set the default styles.
Edit a file.
Makes an in-prompt string.
Make a continuation prompt.
Called when the style sheet has changed.
Called when the syntax style of the highlighter has changed.
Transforms the given dictionary into a new dictionary.
Get the current virtual memory.
Get the number of CPU times for the system.
Get the UIDs of the process.
Get the process gids for this process.
Returns a list of thread objects for this process.
Return a list of open files for this process.
Get the hash of the commit of a package.
Return information about a package.
Return the number of CPUs on Mac.
Returns the number of CPUs in the system.
Get the next set of messages from the database.
Fetch one row from the database.
Fetch a number of rows from the table.
Fetch all rows from the database.
Connect to a node.
Reads a notebook from a string.
Parse a Python string and convert it to a notebook.
Convert a string to a list of reads.
Writes the given nb to the given format.
Write nb to fp.
Convert the metadata file to a metadata file.
Load a value from a dictionary.
Return True if the given name matches the filter.
Return True if the given class is a subclass of the given class.
Check if the given directory should be included.
Return True if the given file matches any of the ignorefiles.
Return True if the given function is a supported function.
Returns True if the given method matches any of the registered plugins.
Check if the given module should be included in the blacklist.
Read lines from a file.
Print the list of lines of a command.
Print a list of lines.
\x1b[1mNAME\x1b[1mNAME\x1
Returns the conversion factor between two currencies.
Convert currency from one currency to another.
Compute the exchange rate for a given date range.
Get the encoding of a stream.
Get the default encoding for stdin.
Write the connection file to disk.
Initiate a heartbeat.
Initialize the session.
Initialize the output stream and display hooks.
Initializes the kernel.
Convert HTML to text.
Convert Markdown to plain text.
Convert a domain name to a fully qualified domain name.
Add options to the given parser.
Configures the noseexclude configuration.
Check if the given directory should be excluded.
Return True if there are links to dynamic packages.
Calls each of the given functions with the given arguments.
Calls each of the given functions in reverse order.
Append a function to the end of the list.
Insert a function at the given index.
Formats a usage message.
Write the PID to a PID file.
Remove the PID file from the profile.
Get the PID from the PID file.
Construct a magic argument parser from a magic function.
Return the real name of a magic function.
Highlights the given string in the current block.
Rehighlights the given block.
Set the format of the highlight.
Copies the current page to the clipboard.
Execute a shell command.
Called when the prompt is finished.
Checks if the tab is pressed.
Make the context menu.
Handles keyboard key press events.
Inserts the prompt for a continuation prompt.
Handle the completion of a reply.
Handle a reply from the frontend.
Called when the kernel is being died.
Handle object info reply.
Handle a PyOut message.
Handle stream messages.
Handle a Shut down reply.
Execute a file on the server.
Interrupts the kernel.
Resets the prompt to its initial state.
Restarts a kernel.
Calls a calltip request.
Called when the completion request is complete.
Process an error received from the client.
Process the execute OK message.
Called when the contents of the document have changed.
Add a plugin to the list of plugins.
Apply all plugins to the given arguments.
Iterate over all registered plugins.
Runs all plugins and returns the result.
Configure the plugin with the given options.
Loads the plugins from the entry points.
Load plugins from nose. plugins.
Convert a latex string to PNG.
Convert a latex string to a PNG image.
Check if the distribution exists.
Return a dict representation of the object.
The name of the process.
Get CPU percent.
Returns the percent of memory allocated to the device.
Returns a list of memory maps.
Returns True if the process is running.
Suspends the process.
Resumes the process.
Kills the process.
Wait for the device to finish.
Wires the kernel to the background thread.
Returns True if the given identifier is shadowed by the given IP.
Register a new transformer.
Unregisters a transformer.
Register a checker.
Unregister a checker.
Register a handler for the given event name. :param name: name of the event name :
Unregisters an event handler.
Apply pre-filter to the given line info.
Find the handler for the given line info.
Apply the transformers to the given line.
Apply prefilter to a line.
Apply prefilter to a list of lines.
Check if the user is running on the switch.
Check if the line is a prompt handler.
Check if the given line is a valid command line handler.
Check if the given line_info is a shadowed handler.
Process a line of input.
Process a single line of code.
Handle a single line of input.
Process a single line of code.
Process a line of input.
Handle a pre-filter command.
Overrides the default event filter to hide the widget.
Stop the hide timer.
Overrides paintEvent to draw the paneltip label.
Show information about a call.
Called when the cursor is changed.
Canonicalize a path.
Return a copy of this dictionary with masked values.
Check if the virtualenv is no global.
Calculate the word frequency for each target.
Return a list of default aliases for the current operating system.
Define an alias for a command.
Define an alias for a command.
Validate an alias. Args: name (str): alias name (str): alias name (str
Call an alias with the given rest.
Transform an alias into a command string.
Expand aliases. Args: line (str): The line to expand.
A directive that auto-parses the directive.
Reset the intensity and foreground color.
Returns a QColor instance for the given color.
Returns a QTextCharFormat object for the text.
Generate a JWT with the given secret and age.
Clean expired JWTs.
Mark a token as already used.
Validate a JWT.
Return the common prefix of a list of strings.
Return the size hint for this widget.
Returns True if the text cursor can be cut.
Returns True if the user can paste the text.
Clears the input buffer.
Cuts the text from the clipboard.
Get the prompt input buffer.
Sets the prompt input buffer.
Sets the font for the tab.
Prints the current state of the control.
Move the cursor to the top of the screen.
Resets the font to its default size.
Append a custom input to the text cursor.
Append an HTML snippet to the document.
Appends the given HTML to the rendering HTML rendering rendering HTML.
Append a plain text to the prompt.
Clear the temporary buffer.
Completes the completion with the given list of items.
Fill the temporary buffer with text.
Determine if the control key is down.
Create a QTextEdit control.
Create a page control.
Filter page key press events.
Return the plain text of the given block.
Get the cursor to the end of the text.
Returns the column number of the cursor in the input buffer.
Get the cursor line from the input buffer.
Get the text cursor for the prompt.
Returns the text cursor for the selection.
Insert a continuation prompt.
Insert HTML into the cursor.
Inserts a plain text document at the cursor position and returns it.
Insert plain text into the cursor.
Keep the cursor in the buffer.
Quit the keyboard.
Add text to the page control.
Called when the prompt is started.
Read a line from the input buffer.
Sets the value of the Continuation prompt.
Sets the cursor on the top of the scroll bar.
Adjusts the scroll bars of the control.
Main entry point for the downloader.
Copy a config file to the current working directory.
Create a profile directory by name.
Find a profile directory by name.
Read a file and return its contents.
Create a temporary Python file and write it to disk.
Close the stream.
Write data to the file.
Add a newheart handler.
Add a failure handler to the list of failure handlers.
Handle a pong message.
Return a list of batches of size batch_size.
Convert a path to a filename.
Display all elapsed time.
Calculates the time unit for the given elapsed and average.
Extracts the wininst config from a file.
Uncache a ZIP directory.
Quote a list of strings.
Check if the given distribution is valid.
Set fetcher options.
Create the home directory.
Check if a file is an archive file.
Create a new heading cell.
Create a new metadata object.
Create a new notebook author.
Return True if path is a directory and is writable.
Unquote a filename.
Get the filename of a Python file.
Return the path to the XDG directory.
Get the ipython directory.
Return the path to the ipython package directory.
Return the path to the ipython module.
Check if a target is outdated.
Return the MD5 hash of a file.
Check if the old config file exists.
Updates the suggestion dictionary for the given object.
Returns a list of suggestions for the given object and size.
Returns a list of suggestions for the given object.
Return the relative path to this directory.
Return a list of objects matching the given glob pattern.
Reads the MD5 of the file.
Starts the profiling.
Writes the current profiling stats to the given stream.
Closes the prof and cleans stats files.
Disable the WX event loop.
Disable Qt4 event loop.
Enables GTK for the current application.
Enables or disables a tk app.
Enable the pyglet application.
Add wave saver to global history.
Initialize the database.
Execute a SQL query and return the results.
Get information about a specific session.
Get the last n rows of the table.
Get a range of histograms from a string.
Get the name of the histogram file.
Set the name of a session.
Reset the output history.
Get a range of lines from the input histogram.
Store the output of the given line.
Write out the input and output caches.
Stops the thread.
Get the number of CPUs in the system.
Returns a list of system per CPU times.
Return a list of disk partitions.
Return a list of pids.
Return a nice string representation of a pair.
Format a list of statements into a string.
Return a short description of the current stack.
Join a list of regular expressions into a single string.
Remove a file from the filesystem and remove it from the filesystem.
Update the MD5 of the object.
Update all profiles in the ipython directory.
Stops the cluster for the given profile.
Find the path to a given command.
Prints the body of the process.
Find code units in the coverage file.
Run report_fn on each code unit in morfs.
Set the trace of the PDB file.
Initializes the shell extensions.
Initialize the code for the shell.
Runs all the lines in the exec_lines list.
Run all startup files.
Runs all the executable files.
Run the command line code.
Run the module.
Return the filename of a static data file.
Read data from a file.
Escape characters in a string.
Report the contents of the HTML file.
Copy the static reports to the local directory.
Write HTML to file.
Return the hash of the source file.
Index a single file.
Reads the status file from the given directory.
Write the coverage to a file.
Sorts a list of lists and returns True if they are sorted.
Get a slice of a sequence.
Split a sequence into chunks of size.
Read the manifest file and return a list of ignore patterns.
Convert glob pattern to regular expression.
Return True if filename matches patterns.
Return a list of all versioned files.
Create a kernel manager and start it.
Shut down a kernel.
Kills a kernel.
Get a kernel by ID.
Get the ports of a kernel.
Returns the notebook for the given kernel id.
Starts the kernel for the given notebook.
Shutdown a kernel.
Interrupt a kernel.
Restarts a kernel.
Create the iopub stream for the given kernel.
Create a shell stream for the given kernel.
Create a HB stream for the given kernel.
Resets the object to its original state.
Exports an XHTML document to a file.
Remove empty characters from html.
Get a unique object or None if it does not exist.
Returns a query that includes all the terms in the tokenized_terms.
Given a query string and a list of search fields, return the query string.
Get a query for the ``date_greater`` query.
Return a query for a date less than or equal to `date_field`.
Get the null or blank query for the given field.
Populate fields_dict with case-insensitive fields.
Add options to the command line parser.
Validate that the attribute matches the given method.
Check if the given method is allowed to be called.
Rotate the cursor.
Return the websocket URL for the current request.
Reserialize a reply from a list of messages.
Injects a cookie message into the request.
Start the heartbeat stream if it is still open.
Stop the HB stream.
Load the file from disk.
Get the index of the block.
Seek to the given index.
Edit the block at the given index.
Displays the block at the given index.
Print all colored blocks.
Run a function on a sequence and return the results.
Return the source code of the given traceback.
Find inspectable lines in a list of lines.
Create a countdown for a given date.
Clean up the engines.
Save a function to the client history.
Synchronize the results of a function with the client.
Run a function after a function.
Returns a list of all messages in the queue.
Get a message from the queue.
Parse a URL into a dictionary.
Return a list of all root modules.
Return a list of module completions.
Return a list of directories and Tilde completions.
Quote an attribute.
Configure the xunit plugin.
Writes the error report to the given stream.
Add an error to the error list.
Add a failure to the error list.
Add a test to the error list.
Generate a two-bin random number from a list of loads.
Generate a random number from a list of loads.
Register an engine.
Remove an engine from the queue.
Handle all the lost tasks.
Fail if any of the messages in the depending queue have timed out.
Mark a job as unreachable.
Save a job that has not been processed yet.
Submit a task to the server.
Dispatch a result message.
Handle a result message.
Handle an unreachable dependency.
Update the dependency graph with the given dep_id.
Prints the current log state.
Write a log file.
Write data to log file.
Stop the log file.
Create a new notebook node.
Add an object to the command chain.
Add a regular expression to the chain.
Yields the object matching the given key.
Yield matches for a flat key.
Check if a directory exists and make sure it exists.
List all notebooks in the notebook directory.
Create a new notebook id.
Delete a notebook from the database.
Check if a notebook exists.
Find the path for a notebook.
Returns the path to the notebook with the given name.
Get a notebook object.
Get a notebook object.
Save a new notebook.
Save a notebook to the database.
Save a notebook object.
Delete a notebook.
Create a new notebook.
Copy a notebook to the database.
Yield tokens from a list of TOKs.
Loads the default configuration from the ipython_dir.
Return a list of the default classes.
Parse the command line.
Initializes the application.
Initializes the interactive shell.
Initialize the banner.
Return a string representation of the type of an object.
Parses the given name into a list of strings.
Return a dictionary of traits of the given class.
Get the metadata for a trait.
Validates that the given value is a valid class.
Returns the default value of the field.
Check if the task is complete.
Returns True if the task is unreachable.
Return a dict representation of the dependencies.
Calculate the depth of a node in a tree.
Print a binary tree.
Disambiguate a URL with an IP address.
Apply a function to each element of the list and return the result.
Validate the targets argument.
Process monitor traffic messages.
Dispatch a query message.
Called when a new heart is received.
Handle a failure of a heart.
Save a task request.
Save an IOpub message to the database.
Send a connection request to the server.
Unregister an engine.
Finish the registration from the queue.
Shut down a client.
Purge pending results from the database.
Extract the content and buffers from a record.
Get a list of messages from the database.
Send a query to the database.
Temporarily change the current working directory.
Decode the output of a completed command.
Run a command under the R root directory.
Dispatches a message to the appropriate handler.
Returns True if the message is from the current session.
Report the files in the MORFS.
Get the installed version of a package.
Recursively squash unicode objects.
Extract the header from a message or header dict.
Check that the unpackers are properly packed.
Create a message of the given type.
Sign a list of messages.
Send a raw message to the given stream.
Receive messages from a zmq socket.
Save SVG string to SVG file.
Converts an SVG string to a clipboard.
Convert an SVG string to an image.
Return a dictionary of information about an object.
Get the docstring of an object.
Get the source code of an object.
Get the argument specification of an object.
Find the absolute filename of an object.
Find the line number of the source code of an object.
Get the definition of an object.
Return a string with the header and normal colors.
Prints a message and the name of an object.
Print the definition of an object.
Print the source of an object.
Print the contents of a file.
Format a list of fields.
Search for namespaces matching the given pattern.
Start a threaded twisted thread.
Return a string representation of the element.
Convert the document to XML.
Return a list of all the modules in the given package or set of packages.
Invert a dictionary.
Convert an object to a primitive.
Return a list of matplotlib figure objects.
Print a Matplotlib figure.
Set the figure format for the backend.
Find and return the gui and backend.
Activate a matplotlib backend.
Configure inline support for the given backend.
Starts the thread.
Stops the current thread.
Start a new tracer.
Installs a trace for the given frame and event.
Start the collectors.
Stop collecting collectors.
Pause all active tracers.
Starts all the tracers.
Return a dictionary of line data.
Collect exceptions from a list of remote error objects.
Return a list of traceback lines.
Create a coverage object and start it.
Return the canonical directory for the given morf.
Return the source for the given filename.
Determine if the given filename should be traced with a reason.
Return whether the trace should be traced.
Print a warning message to stderr.
Check for source packages.
Start the collector.
Called when the process exits.
Return the regex to exclude from the config.
Saves the harvest data to a file.
Combine all paths into a single file.
Extracts the data from the harvest source.
Computes the analysis of the given morf.
Analyzes the given analysis.
Write summary data to a file. :param morfs: file name :param show_
Annotate the data with the given morfs.
Run the xml report on the given morfs.
Reloads the data from the server.
Find the path to a command.
Run a command on the child process.
Forward read events from a file descriptor.
Send lines to the socket.
Find a launcher class.
Starts the process.
Build a launcher for a given class.
Start the engine.
Start the process.
Return a wx.SimpleApp instance.
Check if the application is running in event loop mode.
Starts the WX event loop.
Return an instance of the QApplication.
Check if the Qt4 application is running in the event loop.
Start the Qt4 event loop.
Create a blank canvas.
Draws a cross between two points.
Draw a line between two images.
Create an annotated image from a grayscale image.
Get a random UUID.
Generate a unique cache key from a GET dictionary.
Returns the domain name of the given URL.
Get the arguments from a URL.