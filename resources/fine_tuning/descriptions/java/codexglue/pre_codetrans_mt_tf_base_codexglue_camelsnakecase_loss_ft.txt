Emits the given value if it is not already in the queue.
Wrap an observable.
Returns an observable sequence that is sorted according to the given comparator.
Observe on a ConnectableObservable.
Creates a new unicast processor with the specified capacity.
Creates a new unicast processor.
Attempts to convert the source to a scalar, if possible.
Create a Flowable that contains a single value extracted from the supplied value using the supplied mapping function
Resets all schedulers to their default values.
Create a Maybe from a completable source.
Create a Maybe from a SingleSource.
Retries at most the given number of times, retrying on failure.
Throws a NullPointerException if the given object is null.
Returns the identity function.
Creates a callable that just returns the given value.
Returns a function that just returns the given value.
Returns a function that casts the given object to the given target class.
Creates a new unicast subject with a default buffer size.
Creates a new unicast subject with the specified capacity.
Creates a new unicast subject with the specified capacity.
Create a new unicast subject.
Returns the error.
Waits for the operation to complete and returns the error.
Blocks until at least one item has been added to the queue or the timeout is reached.
Drains all elements from the given queue into the given subscriber.
Requests the specified number of items from the specified subscription.
Consumes and completes the next request.
Returns the value of the notification.
Get notification error.
Validates that the upstream is not null and that the next is not null.
Atomically sets the value of the given disposable to the given value.
Validates that the upstream subscription is valid and that the next subscription is not null.
Sets the value of the upstream subscription to the value of the next.
Cap the addition of two values to prevent overflow.
Cap the result of two multiplications.
Caps and adds a value to the current value.
Converts a Throwable to a NullPointerException.
Adds an object to the set.
Shuts down the pool.
Creates a new scheduled executor service.
Sets the subscription.
Loops through the queue of objects and emits them.
Wraps a Throwable or throws a RuntimeException.
Flattens a throwable into a list.
Throws the given exception if it is not an exception.
Clears the set of resources.
Returns the number of items in the set.
Attempts to convert the given observable source to a scalar.
Convert an observable to a scalar Observable.
Attempts to add the subscriber to the tail of the queue.
Returns true if an observer is registered to receive notifications, false otherwise.
Starts the stream.
Starts an unbounded subscription.
Offers the given item to the queue.
Returns the resource that has been set.
Completes the stream with the given value.
Emits an error to the downstream.
Completes the stream.
Waits for the specified number of items to be available.
Sends a request to the upstream subscription.
Adds a subscriber to the list.
Removes the given publish disposable from the list.
Observe on flowable.
Parses the annotations for the given method.
Sets the delay in milliseconds.
Creates an error response.
Calculates the delay for the given time unit.
Creates the sample data.
Returns the HTTP method for the given HTTP method name.
Searches the LDAP directory for a user.
Encodes the given password using the configured salt generator.
Returns true if the encoded password matches the raw password.
Performs version checks.
Returns true if checks should be disabled for the given spring version and security version.
Get the Spring Security core version.
Configures an attribute exchange.
Get OAuth2 client.
Configure the OAuth2 resource server.
Compares an attribute value against a distinguished name.
Retrieves the specified attributes from the specified dn.
Searches for multiple values for the given attribute name.
Search for a single entry in the directory.
Builds the search controls from the original search controls.
Finds the primary keys for the given ACLs.
Builds the PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails object.
Create the embedded server.
Create the servlet api filter.
Create the JAAS API integration filter.
Creates a type resolver builder for the default typing.
Add the Spring Security filter chain.
Get the token for a particular series.
Get the list of granted authorities for the specified attributes.
Creates a cipher with the specified algorithm name.
Override afterPropertiesSet to catch servlet exceptions.
Authenticates the user if necessary.
Returns true if the principal of the request has changed.
Performs the pre-authenticated authentication.
Check the content length.
Maps a collection of authorities to a set of granted authority.
Sets the login processing URL.
Update the authentication defaults.
Update the default access settings.
Maps a password value to a string.
Extracts the remember me cookie from the request.
Encodes the cookie tokens.
Adds a cookie to the response.
Resolves the argument for the given parameter.
Extract the query string from the request.
Gets the service port.
Returns the principal of the current user.
Invalidates the session and clears the authentication.
Authenticates a username-password authentication token.
Sets the context environment properties.
Returns the full URL to redirect to for this request.
Render the end of the tag.
Initializes the user details service.
Gets the user details service.
Adds the pkce parameters to the attributes and additionalParameters.
Determines if the request requires authentication.
Service ticket request boolean.
Proxy ticket request boolean.
Returns true if the current context is authenticated, false otherwise.
Determines if the proxy receptor should be used for the given request.
Creates the security expression root.
Gets the JWK set.
Encodes the given value using UTF-8.
Get the granted authorities based on the web sphere groups.
Load user by assertion.
Get the pre-authenticated principal.
Concatenates the given arrays into a single one.
Returns a sub-array of the given byte array.
Returns a list of all granted authorities for the specified attributes.
Pre-process the map to get the list of granted authority.
Gets the granted authority collection.
Adds the granted authority collection.
Get the pre-authenticated principal.
Gets the shared object.
Builds the HTTPS redirect URL for the given request.
Invokes the method with the given JoinPoint.
Checks if the given string is a valid role.
Returns an array of roles that have at least one role.
On login success.
Switches to the user specified in the username parameter.
Attempts to exit the current user.
Sets the URL of the exit user.
Display a random contact.
Creates a filter chain that uses Spring Security.
Decodes a JWT token.
Authorize using an access expression.
Authorizes using URL check.
Convert a JWT to a collection of granted authority.
Generates a CSRF token for the given request.
Displays the admin page for the given contact id.
Displays the add permission page for the given contact id.
Add a permission to a user.
Gets the role with the default prefix.
Creates a UserDetailsResourceFactoryBean from a string.
Returns the values of the specified attribute.
Returns the first value of the specified attribute.
Encodes a char sequence into a byte array.
Decodes the given byte array into a string.
Looks up the parameter names for the given object.
Add a contact.
Finds all configuration attributes for the specified target class.
Adds a secure method to the registry.
Returns a collection of all config attributes.
Returns true if the given method name matches the given mapped name.
Configures any HTTP request.
Handle bind exception.
Returns a random contact from the database.
Clears the authentication attributes from the session.
Returns the field with the given name from the given class.
Create service url.
Create redirect url.
Extracts the prefix from an enc pass.
This method is called to commence the authentication process.
Checks the filter stack for duplicates.
Returns an array of registered types.
Extracts the cause from the given throwable.
Registers an access manager with the parser.
Convert a collection of authorities to a set.
Compares two byte arrays and returns true if they match.
Sets the default failure url.
Set the function to resolve hidden inputs.
Builds the request URL.
Checks if the given string is an absolute URL.
Creates a list of attributes for the given identifier.
Converts a serializable identifier to a serializable identifier.
Creates the entries for the given ACL.
Creates a new ObjectIdentity in the database.
Updates the object identity of the given acl.
Saves the request in the session.
Create a server web exchange matcher for the given path patterns.
Returns a matcher that matches any exchange.
Create a new TextEncryptor using the specified password and salt.
Encrypts the given password using the given password and salt.
Creates an encryptor for queryable text.
Writes the headers for the X-Frame-Options.
Determine the target URL for the given request and response.
Determine the target URL to use.
Sets the target url parameter.
Returns the directory with the immediate parent populated.
Builds a distinguished name from the given username.
Creates a map of shared objects.
Configure the JAAS login loop.
Gets the current date.
Internal parse date.
Updates the cache with the given key and value.
Sets the authentication details for the given request.
Get the security name of the user.
Get the list of groups for a given security name.
Builds a DN for a group.
Validates that the number of allowed sessions has been exceeded.
Copy the details from the source authentication to the destination authentication token.
Returns a list of filters that match the specified request.
Get the filters for the given URL.
Returns the application context for the given page context.
Get the full DN.
Sets the session attributes.
Creates a preemptive basic authentication scheme with the given user name and password.
Adds the given filters to the list of filters.
Adds a filter to the list of filters.
Creates an authentication scheme with the given user name and password.
Creates a new NTLM authentication scheme.
Creates a new authentication scheme with the specified user name and password.
Creates a proxy for the specified URI.
Prints the given response options, response body, and optional log detail.
Set the redirect configuration.
Sets the default charset for query parameters.
Sets the default object mapper type.
Sets the JAXB object mapper factory.
Sets the log config.
Sets the session config.
Sets the object mapper configuration.
Sets the JSON config.
Sets the xml config for the rest assured mock mvc client.
Sets the encoder configuration.
Sets the header config.
Sets the async config.
Sets the mock mvc config.
Sets the multi-part configuration.
Sets the configuration for the MockMvc param.
Sets the matcher configuration to use.
Sets the allowAllHostnames setting.
Declare XML namespaces.
Sets the declared namespace for this path.
Issue a HTTP request with the default uri and content type.
Sets the default request headers.
Set proxy settings for this client.
Sets the name of the control.
Adds a header to the multi part specification.
Sets the credentials for basic authentication.
Sends a NTLM request to the server.
Creates a new headers instance with the specified header and additional headers.
Resets the MockMvc instance to a clean state.
Adds a header to the response.
Builds the rest assured response.
Matches any cookie value that matches the given matcher.
Matches a cookie's comment.
Matches a cookie by its expiry date.
Matches any cookies whose domain matches the given matcher.
Matches a URI path.
Matches an HTTP cookie that has the Secure attribute set to the given matcher.
Matches any cookies that match the given matcher that are considered HTTP only.
Matches a cookie by its version number.
Matches any cookies whose age is greater than or equal to the specified matcher.
Expects the header with the given name and value to match the given matcher.
Expects a header with the given name and expected value.
Expects a cookie with the given name and value.
Returns a new proxy specification with the specified host.
Set the return type.
Sets the default parser type.
Create a default log configuration with a print stream.
Enable logging of request and response if validation fails.
Creates a new HTTP request.
Sets the default boundary for multipart uploads.
Adds an attribute to the request.
Adds a header to the request.
Adds a multi-part request.
Adds additional result handlers to the current request.
Sets the given parameter to the given value.
Add parameters to the http client.
Sets the HTTP client factory.
Sets the HTTP multipart mode.
Executes a GET on the given path.
Returns the integer value of the specified path.
Returns the byte value for the given path.
Returns the short value of the specified path.
Returns the value of the specified path as a float.
Returns the value of the specified path as a double.
Returns the long value of the specified path.
Returns a list with the given path and generic type.
Returns the value of the specified path as a Map.
Returns the object at the given path.
Sets the body of the request.
Adds a cookie to the request.
Adds a parameter to the request.
Adds a parameter to the request.
Specifies the update strategy to use for this request.
Returns a filter that logs responses to the given print stream if the response matches the given matcher.
Creates a new Cookie object with the specified cookie and additional cookies.
Cleans up the set of keys and sources for collected state.
Index all explicit bindings in this level.
Returns the binding for the given key, or throws an error.
Convert a constant string binding to a string binding.
Cleanup the given binding.
Remove a failed binding.
Returns the internal dependencies of the given binding.
Create an uninitialized binding.
Returns an array with the parameters of the given parameter injectors.
Binds the given Injector to its state.
Binds a logger to the given injector.
Checks for misplaced binding annotations on the given member.
Returns true if method A overrides method B.
Initializes the delegate.
Returns the type of the provider.
Resolves all types in the given array.
Canonicalizes a type literal for use as a key.
Prepares the built-in converters.
Canonicalizes the given class loader.
Checks if the given class loader has the same version of CGLib.
Returns true if the given member is publicly callable.
Fixes the annotations of the given key.
Requests that the given instance be injected.
Validates all pending injections.
Creates a new instance of the class with the given arguments.
Create a new scope.
Makes the given scoping injectable.
Normalizes the path.
Generates an annotation of the given type.
Checks if is retained at runtime.
Finds a scope annotation in an array of annotations.
Returns the binding key for the given type, member and annotations.
Returns a string representation of the given key.
Initializes the delegate.
Add a direct type binding to the binder.
Get a constructor injector from the cache.
Returns true if the given class has a scope.
Create a new real map binder.
Returns the key for a new value.
Provisions a new instance based on the injectors specified in the context.
Replaces the source objects.
Returns the corresponding module for the given module.
Returns the collection of assisted methods.
Checks if is type not specified.
Check if a constructor has matching parameters.
Returns the dependencies of the given implementation.
Removes assisted dependencies from the given set of dependencies.
Checks if the given dependencies are valid for an optimized inject.
Returns the binding from the injector.
Invokes a method on a proxy.
Creates an error message for when an implementation with a hint is not found for the given key.
New real multibinder.
Returns the key for the new item.
Finds the next filter matching the request.
Returns true if the constructor has at-inject annotation.
Returns the internal constructor.
Returns the internal dependencies of this factory.
Returns a new module instance for the given module, using the given method scanner.
Get the annotation for the given method.
Returns the line number for the given member.
Initializes the injector.
Validates that the given object is an instance of the given key.
Creates a new instance of this class.
Creates a new members injector for the given type.
Gets the injectors for the given set of injection points.
Returns a key for the given type and annotation strategy.
Returns a strategy for the given annotation.
Returns a strategy for the given annotation.
Prunes stack trace elements that are not AOP internal classes.
Returns the source of the binding.
Creates a new message with the specified format and arguments.
Creates a new message with the specified format and arguments.
Creates a new message with the specified format and arguments.
Convert the given object to an object of the correct type.
Returns true if the given class should be skipped.
Get a stack trace element from a list of module class names.
Main method to run the manager.
Pushes a dependency onto the stack.
Pushes the given source object onto the state stack for the given key.
Creates an initializable that returns the given instance.
Provisions the given provider with the given dependency.
Notifies all registered processor that a connection event occurred.
Adds a processor for a connection event type.
Get the result of the given future task.
This method launders the specified throwable.
Registers the given processor for the given command code.
Registers the default processor.
Returns the processor for the given command code.
Try to get a URL from the cache.
Decodes the protocol code.
Get all connection pools.
Scans the connection pools for idle connections.
Returns a connection to the given URL, creating it if it does not already exist.
Creates a connection to the given URL.
Remove a task from the connection pool.
Heal the connection if need.
Creates a connection from the given URL.
Closes the connection to the given address.
This method is called when the connection is closed.
Closes the connection.
Set an attribute if it is absent.
Registers a user processor.
Registers a user processor.
Dispatches an rpc request to the user processor.
Deserializes an rpc request command.
Pre-process a remoting context.
Logs the timeout of an rpc request.
Debug log.
Process the given message using the given executor.
Sends a one-way command to the remoting server.
Convert a bit set to a byte value.
Convert an int value to a BitSet.
Add a reconnect task.
Converts an rpc request to a RemotingCommand.
Filter connections based on service status.
Closes the given connection, retrying if necessary.
Get system property boolean.
Logs an informational message if INFO logging is enabled.
Is request timeout boolean.
Get user processor by class name.
Get a random connection from a list of connections.
Returns the value associated with the given key in this context or the given default if no value is
Returns the value of the specified property.
Resolves the response object for the given response command.
Deserializes the response and returns the response object.
Deserializes the response and converts it to a throwable.
Detailed error message.
Creates an RPC server exception with the given error message.
Prints the connection trace information.
Create a new EventLoopGroup with the specified number of threads.
Parse the remote address of a channel.
Parses the local address from the given channel.
Parses the remote IP address from the given channel.
Parses the remote host name from the given channel.
Parses the local IP address from the given channel.
Parses the remote port from the given channel.
Parses the local port of the given channel.
Parses a socket address to its host address.
Adds a connection to the pool.
Removes a connection from the pool and tries to close it.
Registers a custom serializer for the specified class.
Returns the custom serializer for the given class name.
Registers a custom serializer for the given command code.
Returns the custom serializer for the given command code.
Checks if the remote address is connected.
Initialize the write buffer's water mark.
Returns a FrameDataImpl1 instance for the given opcode.
Writes a batch of outgoing messages to the given channel.
Sets the error code.
Validate that the payload is a valid UTF-8 string.
Update the payload.
Check if a protocol is supported by the server.
Translate single frame check length limit.
Translates the packet size of a single frame.
Generate the final key.
Process a frame that is either a continuous frame or a non-fin frame.
Process a binary frame.
Logs a runtime exception.
Process a frame's text.
Process a frame indicating that the current continuous frame is fin.
Process the frame if it is not fin.
Process a closing frame.
Check that the buffer size is not exceeded.
Gets the payload from the byte buffer list.
Returns the total size of all the buffers in the list.
Translate the handshake http server into a handshake builder.
Translates a handshake HTTP client into a HandshakeBuilder.
Decodes the socket buffer.
Sends an error response to the client and closes the connection.
Sends a response due to an internal server error.
Generate a response due to an error.
Sends a message to the client.
Resets the socket.
Connects to the data source.
Returns the port of the request.
Sends a handshake to the server.
Sets the connection lost timeout.
Stops the connection lost timer.
Starts the connection lost timer.
Restarts the connection lost checker service.
Sends a ping if the connection has been lost for too long.
Cancels the connection lost timer.
Called when a websocket handshake is received.
Sends a pong frame to the client.
Stops the server.
Returns the port of the socket.
Reads additional data from the queue.
Accepts a new connection from the server.
Reads data from the input stream.
Writes the given key to the socket.
Setup the selector and server thread.
Ensures that a single thread is running.
Shuts down the server.
Get the socket for the given connection.
Broadcast data to all connected clients.
Broadcast text to all connected clients.
Broadcast data to multiple clients.
Fills the draft frames map with the given data.
Transfers bytes from source to dest.
Starts the JPA entity manager factory.
Returns the entity manager with the specified name.
Executes the given block within a transaction.
Convert arguments to scala buffer.
Wraps the given arguments in a list if needed.
Get a message for the specified language.
Get a message for the specified keys.
Check if a message is defined at a specific language.
Provide the preferred set of messages for this language.
Returns the messages that are preferred for the given request.
Sets the language for the given result.
Adds bindings for the given modules.
Set self-bindings for the specified modules.
Set self-bindings.
Returns a builder that overrides the specified modules.
Set self-overrides for a list of modules.
Set self-injection bindings.
Disable the given modules.
Executes the request and returns a CompletionStage that can be used to complete the request.
Gets an existing file from the environment.
Binds the binding to the given scope.
Creates a new tuple of the given elements.
Creates a tuple with five values.
Convert an execution context to an executor.
Creates a new JPA unit with the given name and unit name.
Creates a new JPAUnit with the given persistence units.
Creates a new JPAPersistenceUnit from a map of key-value pairs.
String flow.
Creates a flow that invokes a callback on a JSON node.
Adds a constraint validator to the factory.
Creates a new instance of the given constraint validator class.
Gets the matching accessible method.
Handles a client error.
Handles a bad request.
Handles a forbidden request.
Called when a resource is not found.
Handles a server error.
Logs a server error.
Converts a throwable to a useful exception.
Displays an internal error page.
This method is called when the server sends an error to the user.
Builds a doc handler from a list of files.
Builds a documentation handler from a directory.
Builds a new doc handler from the given directory and jar file.
Builds a documentation handler from a directory and a jar file.
Builds a documentation handler from a jar file.
Consumes the data of this stage.
Creates an entity from the given content.
Creates a new instance with the given content.
Create a new chunked entity from a source of bytes.
Creates a new result with the specified status code and JSON content.
Creates a new Result with the specified status code and JSON content.
Creates a new result with the specified status code and content.
Sends an input stream with the given status code, content and content length.
Creates a new Result with the specified status code and content.
Finds a user by its id.
Returns a new lang that is preferred over the given candidates.
Makes a unique call.
Create a new call with the specified fragment.
Returns the absolute URL for the given request.
Returns the web socket URL for the given request.
Returns a function that executes the given block on a connection.
Creates a function that returns the result of executing the given block on a connection.
Creates a new server with the given mode and port.
Convert an object to a JSON node.
Converts a JSON node into an object of a given class.
Parses the given JSON string as a JSON Node.
Parses a JSON document from the given input stream.
Returns targetPath relative to startPath.
Returns the canonical version of the given URL.
Returns a list of tuples where the key is the name of the constraint and the value is
Returns a tuple with the name of the constraint and the list of attributes of the constraint.
Causes the given completion stage to be completed after the specified duration.
Parses a cron expression into a Date.
Calculates the interval of the given cron expression.
Create a new Websocket client.
Returns a new instance of the GuiceApplicationBuilder configured with the given context.
Renders the todo page.
Stores a value in the session.
Flash a message.
Returns a key that is qualified with the given instance.
Returns a binding key that is qualified with the given annotation.
Binds the binding to the given implementation.
Binds the binding to the given provider.
Binds the wrapped value to an instance.
Converts the binding to the given key.
Binds this binding to the given provider.
Returns a list of available langs.
Returns the preferred language from the list of available langs.
Creates a new  evolutions reader backed by a map.
Creates a new  evolution reader with the given default evolutions.
Cleans up the evolution database.
Adds a custom configuration loader to the application.
Creates a new application builder with the specified module loader.
Loads the given modules into the application.
Load the application with the given modules.
Load the application with the given modules.
Load the application with the given bindings.
Create a new GuiceApplicationBuilder.
Encodes a cookie to a string.
Returns the first entity manager on the stack.
Returns the current entity manager stack.
Push or pop an EntityManager from the stack.
Bypasses the given flow using the given splitter function.
Merges the given flow into a single flow by using the given merge strategy.
Converts the given argument array to a list of error arguments.
Fills the form with the specified value.
Gets the global errors.
Returns the errors as a JSON object.
Returns the value associated with the given key.
Fills the form with the given value.
Parses the given text into an object of the given class.
Parses the given text into an object of the given field.
Prints an object to a string.
Prints a field and its type.
Prints a string representation of the given type.
Registers an optional converter.
Registers a custom formatter for the given field type.
Encodes a cookie to a string.
Returns a list of nodes matching the specified path.
Convert a java.util.list to a scala.collection.seq.
Convert an array to a scala.collection.Immutable.Seq.
Convert an array to a scala.collection.Immutable.Seq.
Creates a mapped web socket acceptor that accepts JSON messages.
Returns a new web socket that accepts incoming messages from the given function and maps them to the given
Computes the cost of a primitive promotion.
Calculates the total cost of a transformation.
Returns the cost of object transformation.
Get message by key and arguments.
Get a message at the specified keys.
Creates a new database from the specified driver, JDBC connection URL and configuration.
Creates a parallel sorter for the given arrays.
Sorts the specified subset of the array, using the given comparator.
Merges the specified range of elements in the specified array into this array, using the specified comparator
Invokes the method.
Loads an argument at the given index.
Emits a field instruction.
Generate code to push a zero or null value on stack.
Unbox or zero.
Generates code to process an array of the given type.
Generates code to compare two null values.
Resolves all the bridges declared in this class.
Filters all constructors that are visible to the given class.
Sets the superclass of this class.
Generates the get field method.
Adds the signature and exception types for the given method.
Returns the cardinality of the set.
Sets the naming policy to use.
Finds all methods with the given names and descriptors.
Resolves a path relative to a base path.
Reads a string from a file.
Sets the host of the request.
Creates a new HTTP request with the given method and destination.
Creates a new connect request.
Creates a new GET request.
Creates a new HTTP POST request.
Creates a PUT request.
HTTP PATCH request.
Creates a DELETE request.
Creates a new HTTP HEAD request.
Creates a new TRACE request.
Creates an HTTP OPTIONS request.
Set the request path.
Set the cookies in the request.
Add a single query parameter.
Add a map of query parameters to the request.
Sets the query string.
Returns the query string.
Returns the host url.
Set HTTP Basic Authentication header.
Set the host header to use for this request.
Returns a buffer that can be used to write data to the output.
Removes the range between two labels.
Returns the number of exceptions in the exception table.
Collects all action interceptors.
Collects all filters from the filters manager.
Collects all action results.
Collects all action runtimes.
Sets the value of a simple property.
Returns the value of the specified property of the specified bean.
Extracts the reference from a property name.
Gets the writer.
Set an object reference.
Returns the named object reference.
Lookup an object reference.
Returns the entity descriptor for the specified table.
Find table descriptor by column ref.
Returns the alias of the specified table reference.
Registers a table reference.
Looks up an entity descriptor by table name.
Registers a hint.
Serializes the given value into the given JSON context.
Injects the request attributes to the target.
Injects the request parameters into the target.
Inject uploaded files into the target.
Converts a property name to a column name.
Convert a column name to a property name.
Converts the given column name to a column name.
Store a value in a prepared statement.
Converts the given object to the given destination type.
Gets all wrappers.
Resolves the wrapper for the given wrapper class.
Creates a new instance of the specified wrapper class.
Converts path separators to system separators.
Returns the path of the file with the given separator.
Splits a filename into its components.
Returns targetPath relative to basePath.
Registers a component.
Registers an action config with the action config manager.
Starts the web application.
Registers all the components in the madvoc container.
Exclude one or more jar files from being scanned.
Included jars.
Include rules entries.
Exclude entries from the list of excluded entries.
Scans a jar file for classes.
Scans the classpath for classes.
Returns the bytecode signature of the given type.
Scans the given paths for classes.
Starts the scan.
Create a new transaction.
Get default scope type.
Get or init a scope of the given type.
Execute the given consumer for the specified scope type.
Prepares a CSRF token.
Assures that the size of the given set is at least 1 token per session.
Check if the session contains a CSRF token with the specified value.
Creates a copy of the given bean object.
Make a copy of this instance.
Visits a property.
Initializes the template.
Resolve a scope by type.
Registers a PETITE bean.
Registers a bean definition.
Remove a bean from the registry.
Resolves the bean names for the given type.
Registers a new ctor injection point for the specified bean.
Registers a PETITE property injection point.
Registers a set injection point for the specified property of the specified bean.
Registers a method InjectionPoint for the given method name and arguments.
Registers initialization methods for the given bean.
Registers the given destroy methods on the given bean.
Registers a PETITE provider.
Registers a PETITE provider.
Iterate over all beans of a given type and invoke the consumer for each bean name.
Defines a map of parameters.
Intercepts an action request.
Resolves the Java version to be used.
Pushes an int on the stack.
Checks that the argument index is valid.
Returns a field name for the advice field with the specified index.
Returns the name of the advice method with the given index.
Generates code to load all the method arguments for a special method.
Loads the static method arguments for the given method.
Loads the method arguments for the given method.
Loads the method argument at the given index.
Stores the method argument at the given index.
Generates code to prepare the return value of a method.
Create method signatures key.
Generates code to create a new array.
Stores the value of an object into an array.
Extract encoding from Content-Type header.
Checks if the given flags object contains no flags.
Returns the bearer token from the Authorization header.
Require authentication.
Prepares a response for a file download.
Prepares the response.
Gets all cookies with the given name.
Read request body from reader.
Read the request body from a stream.
Stores the context path for the given page context.
Store the context path in the context path variable.
Returns true if the specified parameter is part of the query string.
Prepares an array of parameters to be used in a request.
Copy request parameters to request attributes.
Invokes the body.
Renders the given body into a character array.
Renders the given Body into a String.
Invokes all init methods of the bean with the given invocation strategy.
Calls the destroy methods of the bean.
Creates a new instance of the bean.
Injects parameters into the bean.
Rewrite action path.
Adds a header with the specified name and value.
Puts a key-value pair into the map.
Put base property.
Adds a profile property.
Get a profile property.
Resolves macros in the given string value.
Extracts a map from a set of profiles and wildcard patterns.
streamtoword.
Hashes a password with a salt.
Check that a plaintext password matches a hashed one.
Reads all remaining bytes from the input stream and writes them to the output stream.
Copies up to max bytes from the input stream to the output stream.
Parses the action definition.
Resolves the action config for the given annotation values.
Detect and register the alias.
Reads the interceptors for the given action class or method.
Reads the action filters from the given action class or method.
Read package action path.
Read method action path.
Parse the method alias from the annotation values.
Create action runtime action runtime.
Sets the response status to Modified if the request was modified since the last request.
Apply advice to target class.
Inject target into proxy.
Visits an annotation of the field.
Resolves the real name for the given json name.
Returns the JSON name for the given real name.
Looks up the type data for the given class.
Looks up the type data for the given class.
Find subclass type data.
Resolves a JSON name for the given type.
Resolves the real name of a type.
Returns the content of the file.
Copies the bootstrap methods to the given character buffer.
Sets the major version and the class name.
Puts the constant pool information into the given byte vector.
Put bootstrap methods into the given byte vector.
Adds a constant field reference to the symbol.
Adds a method reference to the constant pool of this symbol.
Adds a constant reference to the constant pool of this class.
Adds a reference to a constant pool entry.
Adds a constant.
Adds a new CONSTANT_Integer_Or_Float to the constant pool of this symbol table
Adds a constant.
Adds a new CONSTANT_LONG or CONSTANT_DOUBLE to the constant pool of this symbol
Adds a name-and-type constant.
Adds a name and type to the constant pool of this symbol.
Adds a constant.
Adds a code point constant.
Add a constant method handle to the constant pool of this symbol.
Add constant dynamic reference.
Add constant invokedynamic reference.
Adds a constant reference to the constant pool of this symbol, creating a new constant if necessary.
Adds a reference to a dynamic or invokedynamic method.
Adds a reference to a constant pool entry.
Adds a new Utf8Reference to the constant pool of this symbol table.
Adds a bootstrap method to this symbol.
Adds the type table index1 to the type table index2.
Returns a hash code for the specified name.
Clears all entries from this multi map.
Returns a list of all values associated with the given key.
Returns an iterator over the elements in this queue in proper sequence.
Returns a list of all entries in this map.
Increases the capacity if necessary to ensure that it can hold at least the number of elements
Appends a subsequence of the specified character sequence to this buffer.
Visits an annotation of the class.
Visit the end of the TMD.
Create the first chain delegate.
Create the first chain delegate.
Parses a string into a Path.
Pushes a field onto the path.
Configure the servlet context.
Executes the path.
Returns an array of FieldDescriptors representing all the fields in this class.
Create a new bean definition for registration.
Convert JTA TransactionMode to DB TransactionMode.
Reads a property from the source object.
Put all of the mappings from the specified map into this map.
Appends the given buffer to this buffer.
Writes the contents of this list to the specified writer.
Writes the contents of this list to the specified output stream.
Writes the content of this response to the given output stream.
Returns the string value for the given key.
Returns the integer value for the given key.
Get a long value from the map.
Get a double value.
Returns the float value for the specified key.
Returns the value associated with the given key.
Adds a string value to the object.
Uses the folder with the given name.
Receives messages from the SMTP server.
Updates the flags of the email.
Closes the folder if it has been opened.
Looks up a named parameter by its name.
Validates the action against the given profiles.
Adds a validation violation to the validator.
Sets the MIME type of the raw data.
Sets the download file name.
Sets the target input stream.
Set the target class name.
Set the target class.
Processes the input stream of the target class.
Creates a new instance of the class.
Create a new instance of this class.
Writes the given byte array to the debug folder.
Sets the from address of the email.
Sets the email address to send.
Adds a recipient's address.
Set reply to addresses.
Sets the email addresses of the recipient's email addresses.
Creates an EmailMessage with the specified text and encoding.
Creates an EmailMessage with the specified HTML.
Sets a header.
Returns the value of the system property.
Returns the boolean value for the specified name.
Returns the value of the given option as an integer.
Returns the long value for the specified name.
Get the resolved parameters for this method.
Serialize key value.
Looks up an alias.
Resolves the alias of the given value.
Resolves the given path and value to an absolute path.
Resolve result path string.
Get last index of slash dot.
Returns the last index of the dot after the first dot.
Returns the index of the first occurrence of the dot after the specified path.
Resolves the schema name for the given type.
Resolves the column descriptors for the given property.
Initializes the filter with the given key and tweak.
Mix a vector onto the matrix.
Demixes the element at position j into position d.
Compute the key schedule.
Initializes the hasher with the given key message and Tweak values.
Encrypt block.
Converts a byte array into a long array.
Remove any bounding characters from the given string.
Returns the path to the resource.
Compresses the given file using zlib.
Gzips the given file.
Uncompresses the given file.
Returns a list of the names of all entries in the given zip file.
Unzips the given file to the given destination directory.
Adds a file to the ZIP output stream.
Adds content to a ZIP output stream.
Returns the FieldDescriptor for the given field name and declared flag.
Returns the property descriptor for the given name.
Sets the bundle name on the request.
Sets the session locale.
Returns the session's locale.
Filter parameters for bean name.
Sets the profile to use for the entries.
Reads a 64-bit little-endian integer from the buffer at the given offset.
Reads the contents of an input stream into a byte array.
Reads a label.
Gets the bytecode offset of a type annotation.
Reads a bootstrap method attribute.
Inspects the constructors of the class.
Returns a ctor descriptor matching the specified arguments.
Gets the request map.
Create the request map and add it to the request.
Convert array to array.
Initializes the filter.
Adds a search path to the search path.
Search for a file in the classpath.
Include files matching the given patterns.
Exclude files matching one or more regular expressions.
Adds a path to the path list.
Finds all files in the directory.
Initialize the todo list.
Returns an iterator over the files in the directory.
Resolve bean wiring mode.
Resolve bean name.
Returns a writer for this output stream.
Get the output stream.
Returns the class name of the type.
Gets the constructor descriptor.
Returns a method descriptor for the given return type and argument types.
Returns a method descriptor for the given method.
Appends the descriptor to the string builder.
Returns the number of elements in the collection.
Returns the number of arguments and return sizes for the given method descriptor.
Marks the transaction as rollback only.
Commits or rolls back the transaction.
Rolls back all resources.
Requests a resource for the given resource type.
Pops a name off the stack.
Writes a string.
Writes a unicode character.
Writes a char sequence to the output.
Set the parsing error log level.
Starts a new region with the given parameters.
Returns true if the value is a string containing the specified string.
Registers a pseudo function.
Looks up a pseudo function by name.
Visit a class.
Visits an annotation of the field.
Generate the static initializer block.
Generate the proxy constructor.
Process all super methods.
Finds the index of the last occurrence.
Appends the given string to the current one.
Replace the ASM instructions in the given class file with the actual class definition.
Get the attribute prototypes.
Registers a new SQL type.
Looks up a SQL type for a given class.
Looks up a SqlType instance by class.
Create socks4 proxy info.
Create socks5 proxy info.
Create a new HTTP proxy configuration object.
Returns the total number of thread transactions.
Returns the total number of transactions in the thread with the given status.
Associate a transaction with this block.
Continue the existing existing transaction with the destination transaction.
Looks up a resource manager for the given resource type.
Create a proxy object for the given target class.
Appends the given method name to the path.
Pads the specified text to the left with spaces to make it the specified size.
Convert a string to camel case.
Format a paragraph of text.
Converts tabs to spaces.
Escapes a string so that it can be used as a java.lang.String.
Unescapes a Java String.
Resolves the bean name and returns the bean instance.
Returns the bean with the specified name.
Initializes the given bean definition.
Invoke a provider definition.
Registers a new bean with the specified name.
Set a bean property.
Gets a bean property.
Shuts down all scopes.
Resolve the parameters of a method or constructor.
Renders the body of the page.
Returns the value of the property.
Ends the document.
Create the element node.
Remove last child node if empty text.
Get the query string.
Gets the action class name.
Calculates the upper bound of the range.
Replaces all occurrences of a substring in a string.
Replaces the first occurrence of sub in s with with with.
Replaces all occurrences of a character in a string with another character.
Replace first occurrance of sub in s with with with with s.
Replaces the first occurrence of a character in a string.
Replaces the last occurance of sub in s with with with.
Replaces the last occurance of sub with with with with.
Remove a substring from a string.
Removes the specified character from the specified string.
Returns true if all strings in the array are not empty.
Returns true if all the strings in the given array are not blank.
Converts an array of primitives to a string array.
Changes the first character of a string to upper or lower case.
Returns the title of the specified string.
Removes all occurrences of the specified character from the specified string.
Returns true if src starts with sub.
Checks if a String ends with a specific char.
Count the number of occurrences of sub in source ignoring case.
Compares two string arrays ignoring case.
Searches for the first occurrence of a whitespace character in the specified string, starting at the specified
Strips the leading char from the given string.
Strips the trailing char from a string.
Strips a char from a string.
Strips a character from a string.
Strips the specified character from the specified string.
Crops all the strings in the array.
Trims all whitespace characters from the beginning of a string.
Trims off white space from the end of a string.
Returns the index of the first occurrence of the specified string in the specified region.
Joins a collection of objects using the given separator.
Joins an array of objects with a separator.
Convert charset.
Checks if the char at the specified index is equal to the specified char.
Surrounds a string with a prefix and suffix.
Prefix the given string with the given prefix.
Add a suffix to a string if it does not already exist.
Cuts the given string to the first occurrence of the given substring.
Cuts a string from the beginning of another string.
Cuts a prefix from a string.
Cuts a suffix from a string.
Cuts the given string by the given prefix and suffix.
Inserts the given string into the given source string at the given offset.
Repeats the source string a given number of times.
Reverses a string.
Returns the longest common prefix between two strings.
Returns the common prefix of the given strings.
Shorten a string by appending a suffix.
Converts a string to uppercase using the specified Locale.
Removes any leading or trailing quotes from a string.
Convert a byte array to a hexidecimal string.
Convert a string to a byte array.
Detect quote character.
Visits a primitive enum value of the annotation.
Visits an annotation of the field.
Registers a new entity type.
Registers an entity.
Remove an entity descriptor.
Create entity instance.
Sets the target interface.
Injects the target object into the wrapper.
Looks up all the properties that are annotated with annotations.
Detect database and configure db oom.
Closes the output stream.
Writes the specified byte to this output stream.
Invalidates the session.
Gets the encoded name of the email.
Writes the contents of this ApproximateHistogram object to a byte array.
Writes the contents of this mail to the given destination file.
Writes the contents of this mail to the specified output stream.
Appends an argument to a method argument list.
Prepends a type argument to a method argument.
Change the return type of a method.
Strip whitespace from the beginning and end of the text.
Register converter for given type.
Lookup converter by type.
Parses the given CSS query and returns a list of nodes.
Selects elements from a collection of selectors.
Processes the selectors and adds them to the results.
Selects the first node matching the query.
Recursive method that walks the list of descendants and selects the first node.
Recursive method to walk a tree of nodes.
Select and add.
Unpacks the compressed character translation table.
Refills the input buffer.
Execute a query that returns a page of data.
Removes the select part from the given SQL statement.
Remove the FROM clause from the given SQL statement.
Remove the last order by.
Decodes HTML entities to HTML entities.
Detects the name of the entity.
Build order sql.
Builds the SQL for a page of data.
Resolve columns and properties.
Find by column name.
Find by property name.
Returns the property name for the given column name.
Returns the column name for the given property name.
Returns the value of the id property of the given object.
Sets the value of the id property of the given object.
Returns the key value for the given object.
Appends a string to the end of the string list.
Sets the index of the string array.
Increases the capacity of the array to accomodate the index.
Calculates the length of the array.
Create mixing message.
Create scoped proxy bean.
Initializes the internal data structures.
Returns true if the given file should be accepted.
Uses a watch file to watch for changes.
Starts the timer.
Called when a directory has changed.
Adds an enumeration to the end of the list.
Computes and returns the size of the field information in bytes.
Put field info.
Creates a new target with the given value.
Writes a property value to the output.
Decorates a page with decora tags.
Parses the given page content using the given decora tags.
Writes the decorated page.
Writes a single region.
Starts the server.
Runs a process and returns its result.
Returns the IMAP store for the given session.
Create gzipped output stream.
Initializes the template.
Appends the column name to the query.
Adds a rule to the list of rules.
Applies the rules to the given value.
Process includes.
Processes the excludes.
Returns the name of the pseudo class.
Adds all elements from the given collection to this collection.
Finds and returns the insertion point for an element.
Binds an annotation to an action config.
Registers a new action configuration.
Looks up an action config by type or annotation type.
Defines a consumer for the given action config type.
Set the system mail properties.
Validates a value.
Finds the last table in the document.
Fix the foster elements.
Register session beans.
Gets the session map.
Initializes the proxy.
Add a method to the list of advice init methods.
Ends the current action.
Adds a value to the configuration.
Extract profiles and add.
Add a value to the map if the operator is set to ADD.
Convert a type descriptor to a class name.
Convert a type reference descriptor to a human-readable name.
Convert a Java type to a type reference.
Add all the given consumers to the list.
Create a collection of the given length.
Convert to single element collection.
Convert value to collection.
Convert collection to collection.
Adds a line number.
Makes the given visitor visit this label.
Puts the given byte vector at the given offset in the given byte vector.
Adds a forward reference to the list.
Marks a transitive closure as belonging to a specific subroutine.
Compare two numbers.
Fixes the accent of the given character.
Puts a byte into this vector.
Puts two bytes into this vector.
Puts a short value into the buffer at the current position.
Puts a byte and a short into this byte vector.
Puts two bytes into the buffer at the current position.
Puts an int into this vector.
Puts a byte value into this byte vector.
Puts a 64-bit long into this vector.
Puts a byte array into this vector at the specified offset and length.
Enlarges this buffer to contain the given number of bytes.
Authenticate user via http session.
Authenticate user via token.
Authenticate user via basic authentication.
Finds the default message for the given key.
Returns the bundle with the given name, locale and class loader.
Gets the element at the specified position in the specified array.
Sets the id value of an entity.
Save an entity in the database.
Update an entity.
Update a property of an entity.
Update a property of an entity.
Find by id.
Find one entity by property.
Find one entity by criteria.
Delete by id.
Delete by id.
Count count of an entity.
Increase property value.
Decrease the value of a property.
Find related entities.
List all entities of a class.
Removes all entries from the cache.
Returns a set of entries.
Puts the value for the given key in the cache.
Removes the value associated with the specified key.
Get the stack trace of the current exception.
Get the stack trace of a throwable.
Gets the stack trace chain.
Gets the exception chain.
Converts an exception stack trace to a string.
Converts an exception chain to a string.
Builds a message with the root cause.
Unwraps a throwable.
Registers the class scanner as a consumer.
Registers a component class with the madvoc container.
Returns the system class loader.
Gets the resource as stream.
Gets the resource as stream.
Gets the class as stream.
Gets the class as stream.
Creates a new RouteChunk and adds it to this one.
Find or create a child with the given value.
Parses the given request into this request object.
Convert to collection.
Invokes a setter on a bean property.
Sets the value of the array at the specified index.
Create a new instance of a bean property.
Extracts the type of the property.
Stop the authentication process.
Starts the authentication process.
Convert a local date to a Java date.
Convert a local date time to a Gregorian calendar.
Defines a proxy for the given class.
Add a check to the registry.
Resolves a class to a validation context.
Add all property annotation checks for the given class.
Collects checks for annotations on a property.
Collects validation checks from annotations.
Copy the default properties from an annotation to a check.
Encodes a string for use in a URI.
Encodes the given string using the specified encoding.
Encodes a URI scheme with the specified encoding.
Encodes the given URI host with the given encoding.
Encodes the given URI port with the given encoding.
Encodes the path component of the URI with the specified encoding.
Encodes the query component of the URI with the specified encoding.
Encodes a query parameter in the specified encoding.
Encodes a URI fragment with the specified encoding.
Inspect the properties of the class.
Returns an array of all property descriptors.
Get all cookies in the response.
Uncompress the response body.
Closes the connection to the server.
Returns true if the given scope should be accepted.
Encrypt a byte array.
Decrypts the given encrypted content.
Map to bean.
Converts a list of objects to a bean of the specified type.
Sets the value of the specified property on the target object.
Generate map map.
Compares two DBEntityColumnDescriptors.
Sets the default header.
Sends the given request.
Send a request to the server.
Adds the default headers to the request.
Reads the cookies from the response and adds them to the cookies map.
Add cookies to the request.
Sends an email.
Sets the subject of the MIME message.
Sets the sent date.
Sets the headers from the email with data.
Sets the people.
Sets the recipients.
Add body data.
Sets the content of the part to be sent.
Create attachment body part.
Get the content type from the data header.
Saves a result set.
Close all result sets.
Closes the query.
Closes the query.
Sets the number of rows that should be fetched from the database.
Set the maximum number of rows in the result set.
Executes an UPDATE statement.
Executes the query and returns the first long result.
Get the generated columns.
Get the query string.
Creates a proxy for the given target and aspect class.
Create a Collection from an Iterator.
Creates a stream from an iterator.
Compares two objects based on their comparators.
Sets the default wiring mode.
Prints a message to the console.
Returns the name of the caller class.
Shorten a class name.
Exclude specified types from serialization.
Serializes the given object to the given appendable.
Serializes an object to a String.
Clones an object via serialization.
Writes an object to a file.
Reads an object from a file.
Converts an object to a byte array.
Converts a byte array to an object.
Resolves the names of the MappedTypes tables for the given types.
Create the table names for the types.
Read a single column from the result set.
Caches the given result set.
Resolves a provider name to a list of provider definitions.
Given a table name, this method converts the entity name to a table name.
Checks if the connection is valid.
Renders the specified view to the specified target.
Locates the view page for the given path.
Commits the request and returns the response writer.
Returns the output stream for this response.
Writes the content to the response.
Sets the content type.
Prints a string to the output.
Login using basic auth and request params.
Converts the given auth token to a JSON object.
Login using basic authentication.
Convert a URL to a File object.
Create a directory if it does not exist.
Creates a directory if it does not already exist.
Copy a file or directory.
Copies a directory from srcDir to destDir.
Moves a file from srcFile to destDir.
Moves a directory.
Deletes a directory and all its contents.
Read a UTF-8 encoded string from the specified file.
Read the contents of a file into a char array.
Writes chars from a character array to a file.
Writes a string to a file.
Appends a string to a file.
Read count bytes from a file.
Writes a byte array to a file.
Appends a byte array to a file.
Copy a file or directory.
Deletes a file or directory.
Create a temporary directory.
Checks if the file is binary.
Checks that the srcDir is a directory and that the destDir is a directory.
Checks that srcFile and destFile are valid.
Prints the usage for the given command.
Resolves a method name for an action class.
Registers an action definition.
Register a path alias.
Moves the iterator to the next value.
Create a new CharSequence from the given char array starting at the given offset.
Executes the method.
Match upper case.
Returns a char sequence for the specified range of characters.
Returns all URLs for the given class loader.
Sets the BCC recipients for the email.
Registers a new serializer for the given type.
Lookup a serializer for the given type.
Parse the request stream.
Returns the value of the specified request parameter.
Get request parameter values.
Get the value of a request parameter as a FileUpload.
Get the uploaded files for the given param name.
Initializes the filter.
Parses the given template and appends it to the given SQL builder.
Finds the end of a macro in a string.
Count the number of escapes in the given template starting at the given macro.
Build a query string from a multi-map.
Parses a query string into a MultiMap.
Prepare header parameter name.
Extracts the media type from the given content type.
Renders the given node as an HTML string.
Renders the given node as an inner HTML string.
Loads the configuration from the servlet context.
Resets the state of this object to its initial state.
Sets the lazy flag.
Replace the target class with the mapped type for path.
Parses the given string as a JSON list.
Parse as map map.
Resolves a lazy value.
Skips the object.
Parses a string.
Parse string content.
Parses a Unicode character.
Parse an unquoted string content.
Parse a number.
Parses the array content.
Create an empty ctor.
Create a simple method wrapper.
Resolves the raw type name for the given type name.
Resolve a reference to a property.
Resolves references from the given parameter references.
Read references from annotation.
Build default references.
Build a default reference for the given property descriptor.
Removes duplicate names from the given array.
Converts an array of references to an array of bean references.
Convert an AN value to references.
Runs the joy application.
Finds a method in a class by it's name.
Finds a constructor matching the given parameter types.
Resolve all interfaces of the given type.
Compares two arrays of parameters.
Force access.
Creates a new instance of the given class.
Returns the superclasses of the given type.
Returns the child class of the given instance.
Returns the JAR file of the given class.
Sleep for a period of time.
Sleeps for a period of time.
Waits for an object to become available.
Returns a thread factory that creates new threads with the given name and priority.
Returns the value associated with this Supplier.
Visits a parameter of this method.
Visits an annotation of the method.
Visits a field instruction. A field instruction is an instruction that loads or stores the value of
Visits a method instruction.
Visits an invokedynamic instruction.
Visits a jump instruction. A jump instruction is an instruction that loads or stores the value of
Visits a MULTIA method.
Visits a try catch block.
Convert the properties to a writer.
Copies the input stream to the output stream.
Moves the iterator to the next element.
Moves the cursor to the next record in the list.
Joins the given arrays.
Joins the arrays into a single array.
Resizes an array to a new size.
Appends an element to the end of an array.
Removes a component of the specified type from the specified buffer.
Finds the first occurrence of the specified value in the specified array.
Returns the position of the first occurrence of the specified value in the specified array or -1 if
Returns the index within an array of the first occurrence of the specified substring starting at the specified index
Enables or disables XHTML parsing mode.
Parses the content into a Document.
Parses the given lagarto parser into a DOM tree.
Compute max stack and local.
Ends the current basic block with no successor.
Collect attribute prototypes.
Injects the context for the given target object.
Registers a pseudo class.
Looks up a pseudo class by name.
Invokes the given action request in a background thread.
Gets all bean property names.
Visits all the properties of the source object.
Returns true if the given property name matches the given rule.
Resolves the injection points for the given type.
Reads the parameters from the filter configuration and stores them in the target object.
Sends the bundle file to the client.
Looks up a bundle file by bundle ID.
Looks up the gzip bundle file for the given file.
Registers a bundle.
Creates a digest for the given source.
Create a bundle.
Clears the contents of the cache.
Fix css relative urls.
Updates the given column in the given entity.
Create table ref name.
Returns the current DB session.
Convert to single element array.
Parses the given signature and returns a map of all the generics found.
Resolves the set injection points for the given type.
Returns true if the given property type should be included in the serialization.
Opens the connection for a query.
Opens a transaction.
Closes the current transaction.
Commits the current transaction.
Rolls back the current transaction.
Creates a new Properties object filled with values read from a file.
Creates a new Properties object filled with values read from a string.
Load properties from a string.
Returns a subset of the given Properties object.
Create a new Properties object from classpath.
Gets the property.
Resolve all variables in the given properties object.
Resolves the value of a property.
Resolves the scope pattern.
Returns the transaction mode for the specified method.
Registers the given annotations.
Read transaction annotation.
Accepts the given node.
Returns true if the given node matches the element.
Accepts the given node at the given index.
Unescape the given value.
Build the JRE packages.
Clones this node into the given destination node.
Detaches this node from its parent.
Add a child node.
Inserts a child node at the specified index.
Inserts a new child before the specified child.
Inserts the specified children before the specified child.
Inserts a new child after the specified child.
Inserts the specified children after the specified child.
Removes all child nodes from the DOM.
Finds a child node with the given name.
Filters the child nodes of this node.
Check if this node is valid.
Initializes the child element nodes array.
Initializes the sibling names of this node.
Initializes the list of child nodes.
Changes the owner document of a node and all of its children.
Gets the previous sibling name.
Returns the text content of this node.
Returns the inner HTML of this node.
Visits all the children of this node.
Get the CSS path for this node.
Callback method for when a decora tag is found.
Called when a start tag is encountered.
Defines the decora tag.
Adds a new proxy aspect to the server.
Add a root package and a mapping.
Adds the root package of the given action class.
Finds the root package for an action path.
Resolves the validation message from the request.
Returns a new BeanReferences object with the duplicated names removed.
Adds a pattern to the list of properties files to load.
Executes the given consumer for each target.
Iterates over targets and invokes the given consumer for each injection point in the given scope.
Iterates over targets and invokes the given consumer for each injection point of the given scope.
Extracts the values of the parameters.
Makes the targets for the given action.
Creates the action method argument.
Adds a session to the session map.
When a session is destroyed, remove it from the session map.
Adds the specified value to the array.
Adds all elements from the specified array to this array.
Removes the element at the specified position.
Resolves the target for the given result path.
Sends an error if the target is not found.
Converts the given value object to a string.
Registers an action filter.
Returns the name of the pseudo function.
Resolves the given type to an array of property injection points.
Create socks4 proxy socket.
Returns the number of attributes in this list.
Gets all action results.
Returns true if the given character equals at least one character in the given match.
Find the first occurrence of a character sequence that is equal to a given character sequence.
Finds the first occurrence of the specified character in the specified array and returns the index of the
Set command line arguments.
Set environment variable.
Runs the process.
Invoke a listener.
Copies the contents of the given frame to this frame.
Returns the abstract type corresponding to the given type descriptor.
Sets the input and output frame from the given array of local and stack.
Get the local index of the local variable.
Sets the local variable to the given index.
Pushes a new abstract type onto the stack.
Pushes a new type onto the stack.
Pop a number of elements from the stack.
Pops a method descriptor from the operand stack.
Adds an initialized type to the list of initialized types.
Get the initialized type for the given abstract type.
Puts an abstract type into the given byte vector.
Removes expired entries from the cache.
Visits a module.
Visits an outer class of the class.
Visits an annotation of the class.
Get the current thread's session.
Closes the current thread session.
Creates the execution array.
Invokes the action method.
Read the request body.
Calculates the first item index of a page.
Calculates the first item index of a page.
Returns true if the given value matches this interval.
Convert char array to byte array.
Finds the index of the first occurrence of match in source starting at index.
Resolve the node name.
Resolve attribute name.
Loads properties from a file.
Loads properties from a file.
Loads properties from the specified input stream.
Loads properties from a map.
Loads properties from a map.
Load properties from classpath.
Returns the value associated with the given key, or the given default value if no value is associated
Set a value for a key in a profile.
Extracts the properties from the active profiles into the target map.
Extracts properties from the map and stores them in the target map.
Extract sub props.
Returns the inner profiles as a map.
Add inner map.
Resolves the active profiles.
Get the names of all profiles.
Returns the names of all profiles that match the given wildcard.
Adds a new property injection point to the list of properties.
Adds the given injection point to the list of injection points.
Adds a new method injection point.
Add init method points.
Add destroy method points.
Resolves the target class for a proxy.
Injects the target object into the wrapper.
Returns the type of the target wrapper.
Finds the FieldDescriptor for the given field name.
Returns the raw type of this field.
Resolves the key type for this field descriptor.
Resolves the raw component type for this field descriptor.
Creates a new JsonResult from the given object.
Creates a JSON result from an exception.
Resolve http method from method name.
Match a string against a pattern starting at a specified index.
Resolves the loading for the given class name.
Loads a class from the classpath.
Returns the URL of the resource with the given name.
Waits until the end of the queue is reached.
Detect annotation type.
Builds the injection point.
Visits this type.
Returns an array of URLs for the given class loader.
Sets the bean.
Update the bean.
Loads the property descriptor.
Connect to the database.
Adds an iterator to the end of the list.
Prints the logo.
Stops the joystick.
Create a socket.
Creates an SSL connection to the given host and port.
Get the default SSLSocketFactory.
Gets socket factory.
Generate random string.
Returns a number of random characters.
Generate count random ranges.
Creates a new instance of the target type.
Injects the specified value into the specified object.
Convert value to target type.
Visits a service and a list of providers.
Creates a default type cache.
Puts a new value into the map.
Returns an array of MethodDescriptors representing all methods in this class.
Resolves a hostname to an IP address.
Parses an IP address as an integer.
Validate againt ip.
Resolves the host name of an IP address.
Download bytes from a URL.
Downloads a string from a URL.
Downloads a file from the given URL to the given file object.
Connects to the given host and port.
Connects to the given host and port.
Gets the primitive class name index.
Loads a class from the given ClassLoader.
Load array class by component type.
Shuts down all bean instances.
Create a binary search for an element in an array.
Creates a binary search for an element in an array using a comparator.
Add one or more exclude clauses.
Include rules based on the given includes.
Include all bean properties that match the given template.
Starts the tag with the specified index.
Register a component.
Resolves the SQL type of the given column descriptor.
Preprocess the SQL string.
Create result set mapper.
Find generated key t.
Populate generated keys.
Creates a wrapper for the action interceptor.
Sets the bean with the specified name.
Sets the map of query parameters.
Sets the objects in the array.
Inserts the given chunk after this one.
Lookup the type of an entity.
Finds the entity descriptor for the given column reference.
Resolves the table reference.
Resolves the class of the given object.
Appends missing whitespace to the given string builder.
Returns an enumeration of the file parameter names for this request.
Includes the specified page in the current request.
Returns the full URL for the given request.
Returns the request URI.
Resolves the parameter names for the given action class method.
Starts the application.
Shuts down the Plexe container.
Filter by subject.
Filter by message ID.
Filter by from address.
Filter by to address.
Filter by cc address.
Filter by bcc address.
Filter by flags.
Sets the given flag on the email filter.
Filter by received date.
Filter by sent date.
Filter by size.
Appends the conjunction of the given EmailFilters to this one.
Appends the OR terms of the specified EmailFilters to the end of this filter.
Appends the given EmailFilter to the current one.
Concatenates the given search term with the current search term.
Encodes a byte array into a base 32 string.
Check if the request is eligible for gzip compression.
Validates the given target object against this validator.
Validates the specified target object against the specified validation context.
Enables the specified profile.
Enable the given profiles.
Check if the given list of profile names match.
Parse the request body.
Returns the number of milliseconds since the epoch.
Add two dates.
Subtracts another date from this one.
Sets the integer and the fraction.
Emit a comment.
Report an error.
Creates a hash for the given password.
Generate a PBKDF2 key.
Converts a hexadecimal string into a byte array.
Resolve provider definitions.
Sets the name of the attachment.
Sets the content id from the name if missing.
Resolves the content type.
Parse a field type signature.
Compute the size of the attributes.
Puts the attributes into the byte vector.
Decodes a Base64 string into its original form using the specified encoding.
Decodes a query string.
Starts the database.
Check connection provider.
Visits a method.
Visits the end of the node.
Create a method signature visitor.
Convert an array of objects to a csv string.
Converts a line of text into an array of strings.
Resolves the injection point for the given type.
Creates a class reader for the given advice class.
Returns a cached class reader for the specified advice.
Encrypt a string.
Decrypt a string.
Get a logger by name.
Sets the name of the component.
Create action request action request.
Creates a wrapper for the given action filter class.
Remove a bean from the list of beans to destroy.
Calls the destroy methods on all destroyable beans.
Gets the received emails.
Starts the clustered service container.
Runs the report.
Prints an error message.
Prints the message rate.
Maps an existing file to a read-only buffer.
Closes the session.
Performs the work for this recorder.
Returns the current position in the log.
Offers a vector to the buffer.
Appends padding to the end of the message.
Closes the ControlSession.
Poll for error response.
Stops a replay.
Event when an image is available.
Notifies the client that an image is unavailable.
Reads the status of a channel.
Reads the status of a channel.
Sets the limit on the number of bytes that can be read from the buffer.
Appends a sequence of bytes to the buffer.
Polls the subscription for new fragments.
Creates a new mapped byte buffer for loss report.
Takes a snapshot of the current state of the registry.
Creates the default header.
Writes the key buffer to the given direct buffer.
Writes a label buffer to this message.
Sends a connect request to the Aeron servers.
Tries to connect to the given response stream with the given correlation id.
Sends a close session request.
Sends a request to start a recording.
Sends a stop-recording request to the server.
Attempt to replay a message.
Sends a STOP_REPLAY message to the client.
Sends a list-recording request to the NFVO.
Sends a list recordings request to the NFVO API for a URI.
Sends a list recording request to the NFVO.
Extends a recording.
Sends a request to the server to get the position of a recording.
Sends a stop position request to the controller.
Sends a list-recording-subscriptions request.
Returns true if the given UDP channel matches this UDP channel's tag.
Returns the destination address for the given channel URI.
Returns a description of this MulticastOptions object.
Adds a receive destination to the list.
Inserts a new packet into the buffer.
Finds the first control toggle counter.
Adds a parameter to the request.
Returns the channel tag.
Returns the name of the entity tag.
Adds a session id to a channel.
Returns the tag of the parameter value.
Appends padding to the term buffer.
Update the publisher limit.
Allocate a new buffer.
Returns the label name for a given type id.
Scans the term buffer for availability.
Clears all of the fields of this builder.
Validates this builder.
Sets the prefix.
Sets the media.
Sets the control mode.
Sets the term length.
Sets the term offset.
Sets the linger.
Closes the transport.
Check if the frame is valid.
Receives a buffer of data from the datagram channel.
This method is invoked when a new term is found to be active.
Processes the timeouts for the given retransmit sender.
Converts the given status to a human readable string.
Allocates a new counter.
Resets the vector with a new buffer.
Validates the vector.
Validates and computes the length of an array of vectors.
Returns the length of the producer term buffer.
Validates the socket buffer lengths.
Validates the page size.
Validates that the session ID range is valid.
Validates the publication unblock timeout.
Sets the error code.
Resets the state of the leader.
Encode cluster members as a string.
Adds the member status publications to the cluster.
Closes all publications of a cluster member.
Check if a quorum is active for the given members.
Get the highest log position of a quorum of members.
Resets the log positions of the cluster members.
Checks if a cluster member has voters reached a specific position.
Checks if the candidate term has won the vote on the full count.
Check if a cluster member has a majority vote for a candidate term id.
Determines the member with the given id and endpoints.
Validates the endpoints of a cluster member.
Check if two members have the same endpoints.
Check if candidate is unanimous.
Check if candidate is a quorum candidate.
Check if a cluster member is not having duplicate endpoints.
Finds the index of the member with the given id.
Remove a member from an existing cluster.
Returns the highest id of the cluster members.
Creates a mapped byte buffer from the existing CNC file.
Checks if the CNC driver is active.
Checks if the CNC driver is active.
Checks if the driver is active.
Requests a driver termination.
Returns the length of a volatile frame.
Writes a frame length in an ordered manner.
Writes the type of a frame.
Writes the given flags into the given buffer at the given offset.
Frame the term offset into the given buffer.
Writes a term ID to the given byte buffer at the given offset.
Find counter id by recording.
Find counter id by session.
Returns the recording id for the given counter id.
Checks if the given counter is active.
Sets the application specific feedback for this message.
Reloads the index.
Finds the last entry of the type term.
Creates a recovery plan.
Creates a recovery plan from a list of snapshots.
Appends a term to the log.
Appends a snapshot to the log.
Commits the log position for the given leadership term.
Writes a single entry tombstone.
Closes the context.
Offer a vector to the publication queue.
Unblock a term buffer.
Returns the channel of the packet.
Sets the flyweight channel.
Check term length.
Checks that the given page size is a valid page size.
CAS the active term count.
Computes the position of a term.
Computes the length of the log in bytes.
Stores the default frame header.
Applies the default header to the given metadata buffer.
Rotates the log to the given term id.
This method initialises the tail with the given term id.
Gets the term offset.
Gets the raw tail volatile.
CASes the raw tail.
Terminate token buffer.
Allocates a counter with the given parameters.
Finds the counter id for the given counters reader.
Checks if the counter has a replay.
Get the snapshot recording id.
Converts the given flags into an array of characters.
Sets the flyweight channel.
Offers a buffer to this cluster.
Wraps the given buffer.
Commits the current frame.
Aborts the current frame.
Entry point for the example.
Closes all resources.
Returns the position of the frame.
Allocates a new counter.
Find the counter id for the given service id.
Allocates a new atomic counter.
Closes the CNC stream.
Dispatches the given decoder to the given consumer.
Adds a new slab to the buffer.
Sets the byte at the given index to the given value.
Adds a statistics object to the aggregator.
Convert array type.
Convert a struct type to a group type.
Annotate a message with the given position.
Ends the previous bit packed run.
Reads one record from the input stream into the output stream.
Reads the footers from the configuration.
Reads the footers from the given summary file.
Reads the parquet footer of the given parquet file.
Reads the next row group.
Reads the next filtered page.
Read dictionary page.
Adds a writer to the pool of writers.
Remove a record writer from the pool.
Update the allocations.
Registers a scale call back.
Starts the stream.
Starts a new block.
Starts a new column.
Writes a dictionary page.
Writes a page of data to the output.
Ends the current block.
Copies length bytes from from to to to.
Writes the end of the parquet file.
Reads parquet metadata files and merges them into a single parquet metadata object.
Writes the merged parquet metadata files to the given output path.
Writes the metadata file to the given output path.
Merges the given MergedFileMetaData into the given MergedFileMetaData.
Reads a value.
Tells whether or not the given schema is null.
Returns the first non-null object in the array, or null if the array is empty.
Makes a value from the given string using the given schema.
Create a new thrift meta data object from the extra meta data.
Creates a new thrift meta data from the given thrift class.
Returns the extra meta data for this thrift operation.
Write null values.
Writes the page to the parquet file.
Initialize from a page of data.
Allocates the values buffer.
Check if the i'th element is an enum.
Calculates the bit widths for the delta block buffer.
Throws the given exception if it is an instance of the given exception class.
Get statistics based on type.
Returns a builder for reading the given primitive type.
Merges the given statistics into this statistics instance.
Returns the non-null schema.
Creates a new TaskAttemptContext.
Invokes the method with the given arguments.
Generate a string representation of the members of this type.
Merge the fields of the given group type with the fields of the given group type.
Initializes the counter from the given reporter and configuration.
Get the filter from the configuration.
Reads all the footers in parallel.
Generate parquet input splits from a list of HDFS blocks.
Writes a message to the output.
Validates that all fields in the given descriptor have the same index as the parquet schema.
Serializes a message descriptor to a string.
Make sure that all required fields have been set.
Check a set.
Read file meta data.
Closes the record writer.
Sets the schema for the given job.
Adds a mapping between a class and a parquet type.
Asserts that the given primitive type is valid for the given column.
Checks if the given long value is an int and casts it to an int.
Creates a parquet schema from the given schema.
Creates a new schema mapping from the given parquet schema.
Creates a new schema mapping that maps the fields of the given schema to the given parquet schema
Writes the header of a DataPageV2.
Skip to match.
Writes the given object to the given configuration as a base64 encoded string.
Remove a value from the cache.
Puts a new value into the cache.
Get the current value for the given key.
Writes a value to an Avro schema.
Set the glob pattern.
Writes content to a file.
Opens a file for reading.
Creates a new unbound record filter for a column path.
Convert a struct to a message type.
Creates a wrapper for a list.
Creates a list of elements group type.
Gets the merged key value metadata.
Gets the parquet split from the file.
Gets the fields by name.
Resolve schema access.
Gets the input files.
Checks that the parquet files are valid.
Get the input files from a directory.
Creates a filter that returns records starting at the given position with the given page size.
Creates a new ListConsumer for the given class.
Initialize the path to partition info map.
Merges the given tuple into a single tuple summary data.
Sum up the given tuple and return a tuple summary data structure.
Reads a struct.
Reads a map entry.
Write an integer value to the stream.
Reads an int in little endian from the stream.
Sets the avro schema for the given job.
Create a Kafka topic if it does not exist.
Create a duplicate of a pipeline stage bean.
Creates the list of interceptors for the given stage.
Creates a new Interceptor bean.
Parses a schema from a string.
Convert milliseconds to days.
Gets the avro schema from the record header.
Upgrade from v1 to v2.
Copy blobstore resources to staging directory.
Resets the schema to a clean state.
Reports the health of a thread.
Registers a new thread health gauge.
Stores the configurations for the control hub.
Authenticates the current user with the given credential.
Upgrade the pipeline configuration if necessary.
Upgrades the given stage configuration if needed.
Upgrade the stage configuration if needed.
Upgrades the services if needed.
Upgrade the stage if needed.
Gets the fields to null.
Returns true if the given name is a system class.
Adds the specified element to the list.
Add and get evicted.
Returns the value for the given key, or the given default value if there is no value.
Adds any errors to the list of reported errors.
Returns the descriptor for the given proto file.
Finds all the file descriptors in a set and adds them to a map.
Populate defaults and extensions.
Get the descriptor for the given file and message type.
Convert protobuf field to SDC field.
Converts a SDC field to a protobuf message.
Converts a SDC field to a protobuf message.
Upgrade config bean to jersey config bean.
Checks the connection to a Kudu Master.
Converts a Kudu type to the corresponding Kudu type.
Create a field from a row result.
Intercepts the given list of interceptors.
Gets the text.
Add missing configs to stage conf.
Parses the response and returns a Record object.
Adds the response headers to the given record.
Writes the response header to the output field.
Writes the response header to the record.
Saves the metadata to the staging area.
Configures the client with the given issues.
Parses the headers only.
Increments the source offset by the given amount.
Parses a paginated result.
Adds the response headers to the given header.
Resolves the headers from the configuration.
Process the response and return the source offset.
Checks if a property is defined in the configuration.
Converts a DataParserException to a DataParserException.
Converts the given DataGeneratorException to a new DataGeneratorException.
Returns the credentials from the credentials file.
Add stage outputs to a pipeline.
Copies a character to the buffer.
Removes duplicate packages from a set of packages.
Find the next main line.
Resolves a single live file chunk.
Closes the current connection.
Escapes a string so that it can be used in a quoted-string.
Get flow control settings.
Creates a new instance of the grpc channel provider.
Puts a batch of entries into the cache.
Creates a new Grok expression from the given expression.
Auxiliary digest expression.
Adds a dictionary from an input stream.
Adds a dictionary from a reader.
Stops the aggregators.
Rolls all the Aggregators in this group by a given window.
Serializes an object to a JSON string.
Deserialize the body to an object of the given type.
Deserialize an object from a file.
Writes a record to the output.
Evaluate EL expression as a string.
Generate the list of inner fields from the map.
Get the table name from the metadata record.
Get the database name from the metadata record.
Get the internal field from the metadata record.
Get the location field from the metadata record.
Get the value of the customLocation property.
Get the schema for an Avro schema.
Get the data format from the metadata record.
Create a new schema metadata field builder.
Validate partition information.
Generates a partition path from a map of partitions.
Serializes an avro schema to an HDFS file.
Sets the parameters for the given operation.
Get the current configuration.
Parses an rfc3164 formatted time string into a long.
Format the given template with the given arguments.
Starts the push source context.
Checks if the given record contains the given solr fields.
Filter the list of field names that should not be autogenerated.
Sends an onRecordErrorException to the error handler.
Parses the given source name and jar name into a dependency.
Parses the given URL into a dependency.
Returns the singleton instance of the Crawljax connector.
Closes the connection to the Elasticsearch server.
Gets the label from the numeric code.
Verifies that the dependency with the given key exists in the map.
Get the operation type from the header.
Builds a subdocument mutation.
Generate the alter table SQL statement.
Configures the SASL mechanism.
Take the next batch of messages from the producer.
Commits an offset to the control channel.
Sends an error to the control channel.
Injects the given stage into the given instance using the given configuration.
Get the definitions of a hide stage.
Get the definition for the publisher with the given name.
Formats the given column name.
Formats a value to be used in a dynamodb request.
Get information about a pipeline.
Create a draft pipeline fragment.
Get a list of pipelines.
Import a pipeline fragment.
Returns the file path for the specified directory template.
Get the operation from the record.
Returns the path to the field with the given op.
Retrieves an enriched event from the queue.
Get a runner from the queue.
Returns the idle runner for the given idle time.
Adds a runner to the end of the queue.
Destroys the pipeline.
Validates that the container is not destroyed.
Checks if the given stream exists.
Get the last shard id of a stream.
Processes a batch of records.
Override handleSqlException to add a custom data error message to the list of errors.
Returns a hash code for the given operation on the given record.
Compares two files.
Retrieves the PID of the given process if it is feasible.
Validate and extract fields to hash.
Returns the user group information for the specified user.
Rolls the current timers and returns a new instance of the active stats bean.
Creates a snapshot of the active stats.
Ensures that the directory exists.
Writes the given batch using the given schema table classifier.
This method is used to write a batch of records to the database.
Writes a record to the cache.
Generate no more data event.
This method detects a new partition.
Updates a record for HDFS.
Processes the given value with the given group name.
Checks if two stages have the same version.
Starts the bootstrap cluster.
Configures the auth token and builds a new authenticated client.
Resolves the headers.
Evaluates the given expression and returns the corresponding http method.
Fills the bindings with null values.
Returns the value of the field at the specified path, or null if the field is null.
Loads a schema from the registry.
Registers a new schema in the registry.
Loads a schema from the registry.
Get the schema id for a given subject.
Loads a schema from the registry.
Writes the schema id to the output stream.
Detects the schema ID from the given byte array.
Get the default values from the schema.
Parses the given payload into a list of Records.
Logs the details of this version as a warning.
Get the bad records from the error sink.
Initializes the schema generator.
Gets the outward edge vertices for the given vertex.
Gets the inward edge vertices for the given vertex.
Serializes the given offset map to a JSON string.
Deserializes a map of offset values from a JSON string.
Queues a report.
Get the report with the given id.
Checks if the SDC check point file exists.
Writes the offsets to the main offset file.
Deletes a blob.
Handles GCS origin error.
Handles an archive operation.
Returns a live file reader.
Releases a previously acquired reader.
Set the DPM base URL.
Adds a default header to the request.
Parses the given string into a date.
Escapes a string so that it can be used in a URL.
Get the client for the base path.
Initializes the connection to the kinetica server.
Get the metadata for a table.
Create a new event builder.
Builds a schema from a map of field names to schemas.
Converts Oracle code to SDC code.
Adds jars to the job.
Check if the field name is equal to the field name in the fieldOrderByList.
Check the condition expressions for the given field name.
Gets the lag for the given file offset.
The premain method is used to start the bootstrap process.
Returns the parallelism of this operation.
Runs a query.
Get the table description.
Validate that the table accepts inserts.
Get the column type for a field.
Check if the field is nullable.
Get the schema of a table.
Get the column properties.
Get the class for a given type name.
Initializes the AerospikeClient.
Returns the topic for the given record.
Returns an input stream to read from the file.
Returns an output stream to write to the file.
Returns true if the file exists.
Parses a string representation of an fs permission.
Validates that all services are available.
Creates a new simple aggregator.
Returns the unit of the given simple aggregator.
Creates a new AggregatorData instance.
Creates a new group-by-aggregator.
Starts the data provider.
Stops the aggregator.
Rolls the data by the specified amount.
Releases a reference to the login manager.
Converts a glob to a regular expression.
Returns a list of S3ObjectSummary objects that match the given path matcher, lexicographically.
Stop capturing batches.
Produce empty batches for runners that have been idle for longer than the specified time.
Creates the failure batch.
Convert a Record to a BoundStatement.
Sets the values in the given configuration map.
Generates the kudu lookup key.
Reads a line and appends it to the StringBuilder.
Rolls the timer one second.
Enables the given DPM.
Disables DPM for an organization.
Normalizes the DPM base URL.
This method retrieves a user token.
Logs out the user.
Update the token file.
Updates the dpm properties.
Returns the schema for the field of the given type.
Creates a complex schema for the given field.
Gets the decimal scale or precision.
Returns the default value for the given schema.
Initializes the metrics if needed.
Compares two files.
Returns the index of the group with the specified name.
Returns a list of the names of the groups.
Checks if the character at the given position is escaped.
Returns true if the character at the specified position in the string is a backslash.
Returns true if the given string is inside a character class.
Count the number of open parens in a string.
Extracts the group information from a named pattern.
Replaces all occurrences of the given regular expression with the given replacement string.
Serves up a JSON document.
Refresh the schema of the given table.
Returns true if the entry has expired.
Returns the offset of the current file.
Fast forwards the stream.
Convert a string to a number.
Parses a single part of the record.
Parses a set of values from the buffer.
Looks up the primary key columns for this table.
Creates the custom field mappings.
Returns the SQL type for the given field.
Returns the table name.
Sets the primary keys of the given record to the given statement.
Handles SQL exception.
Executes the pipeline.
Prepares a batch context.
Finishes a batch and calculates the metrics.
Flattens the entire record into a map.
Creates a DetachedStageRuntime for the given bean.
Executes the given record.
Gets the columns to parameters.
Returns the condition for the given partition column.
Validates the specified offset against the stored and specified columns.
Returns a list of bundle content generator definitions for the given list of generators.
Returns an array of non-empty arguments.
Get the operation object for the given operation code.
Convert bytes to display format.
Scans a live file.
Get the number of pending files for the given live file.
Checks if a specific dependency is whitelisted.
Returns true if the expected version string matches the given set of versions.
Entry point to the Spark Streaming Binding Example.
Propagates the runtime configuration to the listeners.
Validates the report description.
Upgrade from V1 to V2.
Extract named groups.
Sends a consumer commit message to the producer.
Creates an embedded SDC.
Sets the fields in the record.
Get the list of remote pipelines with changes.
Create a new RemoteDataCollectorResult from the given future.
Create a gauge with the given name and pipeline name.
Gets the columns to parameters.
Generate the header attributes for the file.
Validates a single record.
Handles the old temp parquet files.
Returns an Avro input stream for the given record.
Returns a DataFileReader for the given input stream.
Writes a parquet to a temp file.
Checks if the given field is an input encrypt field.
Checks if the given field is an encrypt field.
Checks that the given field is of type byte array.
Checks that the given field is of type byte array.
Prepare encrypt byte array.
Changes the parent pattern of this matcher to the given pattern.
Appends a replacement string to the given string buffer.
Returns a map of named groups.
Replaces all the occurrences of variables in this matcher with the given replacement.
Get the value of a global variable.
Creates the start event.
Creates the stop event.
Fixes the offset for the given column.
Extract as runtime.
Executes a SQL alter table add partition query.
Executes a SQL statement to set the properties of a table.
Returns the location of the given database.
Executes the given HBase query.
Executes the given query.
Execute a batch of commands.
Run the consumer for each pipe in the pipeline.
Gets the OffsetCommitTrigger from the pipeline.
Checks if the onRecordError method is set on the pipeline.
Accepts a consumer.
Returns the id of the record to be inserted.
Gets the value from the field.
Sets the document fragment in the given record.
Sets the document in the record.
Sets the N1QL mapping on the given record.
Handles the whole file data format.
Returns true if there is an incomplete transaction with the given sequence number in the given transaction.
Sets the class loader of the current thread and executes the given supplier with the given class loader
Logs out the user.
Clears the exceptions list.
Replace the variables in the path.
Ensures that the given path has proper permissions.
Starts the EMR binding.
Returns the directory path for the given record.
Renames a path to the final name.
Returns true if the record should be rolled.
Matches the given string against the given pattern and template variables.
Returns a map of file offsets.
Get the remaining wait time from the given start time and max wait time.
Returns the offset lag for the given offsets.
Creates a new instance of a StageLibraryDelegate.
Creates a new instance of the given delegate definition.
Returns the metric value for the given metric id, metric type and metric element.
Find the end of the header.
Returns the size of the request body.
Saves a byte buffer to a temporary file.
Creates an SSLSocket from the given key and trust store classpath.
Returns the MIME type of a file.
Handles the session.
Stops the server.
Adds the default handlers to the router.
Sends the body of the message to the output stream.
Creates a new fixed-length response with the given status code, mime type, data and total
Whether to use gzip when accepted.
Adds a cookie to the queue.
Unload the queue.
Decodes the given base64 value into a string.
Base64 encodes the given value.
Sets the table name.
Returns the name of the given principal.
Inserts a session repository filter into the context.
Resolves the principal name from the session.
Returns the session for the given id.
Returns the JNDI name for the given model node.
Returns the canonical parameter types of the given method.
Registers a new interposed synchronization.
This method is called before the completion of the task.
Get the current transaction.
Adds the bean factories to the module specification.
Returns true if the given persistence unit's cache region name matches the configured cache region name.
Returns the list of service names that are dependencies to the server configuration.
Decreases the read lock count.
Increments the read lock count.
Add a service to this deployment archive.
Handles the calculation of the next expiration date.
Adds the search dependency if the module is a JPA module.
Make the top level deployment archives visible from static modules.
Creates a new deployment descriptor.
Sets the config name and file.
Gets the security meta data.
Gets the servlet url patterns mappings.
Returns a map of servlet name to class name mapping.
Resolves the views.
Get the available connectors for a given operation.
Parse the core environment element.
Parse the process-id environment element.
Returns the path address of the given operation.
Sets the address of the given path operation.
Returns the value attribute of the given operation.
Returns true if the defaults should be included in the given operation.
Creates a composite operation from the given operations.
Creates a ADD operation.
Create a model node representing an add operation.
Creates a read-attribute operation.
Creates a write attribute operation.
Creates a model node which undefines the given attribute.
Get the value associated with this context.
Add a URL context factory.
Removes a URLContextFactory from the set of URL context factories for the given scheme.
Loads validation providers from the service loader.
Modify the deployment.
Configure the endpoints for the deployment.
Modify the context root of the deployment.
Get the transport class name from the deployment properties.
Set the outgoing run as identity.
Pop the outgoing run as identity.
Process the deployment management.
Injects the specified property into the specified object.
Returns true if the given class type matches the given property type.
Find a method in the class hierarchy.
Find field by name and type.
Derives useful information from the request.
Runs a standalone runner and collects the results.
Runs a JDK Collect on the given server environment.
Register a resource adapter deployment.
Unregister a resource adapter deployment.
Registers the transformers.
Writes the given params to the given output stream.
Reads an exception from an input stream.
Gets the lock owner.
Release lock.
Adds a log entry.
Add a CDI context parameter to the war meta data.
Returns the component view that this view is displaying.
Invokes the given endpoint.
Returns the view method that matches the given method.
Checks if the given method matches the given view method.
Gets the EJB security meta data.
Returns the new security domain.
Ensures that the security domains are the same.
Set the IDL name.
Returns the absolute path of the entry.
Construct a JNDI name from a string.
Process the JAAS deployment.
Override handleRequest in order to perform processing for this interceptor.
Returns true if the current thread is in a transaction.
Returns the cached transaction synchronization registry.
Returns the cached connection factory.
Gets the last component of a name.
Checks if the given name is empty.
Creates a new name not found exception.
Creates a new naming exception with the specified message and cause.
Creates a new naming exception with the specified message, cause and the specified remaining name.
Creates a new cannot proceed exception.
Create a naming enumeration from a collection.
Binds a value to a name.
Returns the active management for the given operation.
Creates a component instance for the given instance.
Get the resource root for the spring integration jar.
Resolves the runtime name for the given path element.
Returns an XML listener builder for the given resource definition.
Get the primitive analysis for a class.
Shuts down the thread pool.
Returns a list of URL patterns for the given URL pattern.
Gets the servlets.
Gets the servlet mappings.
Gets the security constraints.
Gets the login config.
Gets the context params.
Get the WebResourceCollectionsMetaData for a security constraint.
Get the init-param from the servlet meta data.
Factory method for creating a new SecurityConstraint.
Creates a new web resource collection.
Creates a new servlet.
Creates a new servlet mapping.
Factory method for creating the AuthConstraint.
Factory method for creating the UserDataConstraint.
Creates a new param value.
Factory method for creating the ParamValueMetaData.
Registers session bean interceptors.
Stop the weld service.
Returns the JNDI name for the given model node.
Resolves the given attribute definition to a string.
Returns the type of the given URL pattern.
Returns true if the specified connection adapter should use a pooled connection factory.
Returns true if the given resource adapter should use an external pooled connection factory.
Get the name of the active MQ.
Returns the name of the default persistence unit.
Registers this activity as being started.
Stop this activity.
Called when the server is suspended.
Resumes the deployment.
Called when an invocation completes.
Notification that a transaction has been created.
This method is called when the server starts.
Remove the controller from the naming store.
Get the ServiceName for a Capability.
Create the resource roots for the deployment.
Get all deployment module class loaders.
Returns true if the given PersistenceUnitMetadata needs a class file transformer.
Returns true if two phase bootstrap is allowed for the given persistence unit.
Returns true if the default data source should be used.
This method skips the mixed synchronization type check.
Get orb from server and port.
Initializes the applet.
Initializes the method handles.
Set the active naming store.
Validate the default values.
Checks the type of a parameter.
Lookup the default value annotation.
Validate the base type of the given method.
Get the list of deferred EntityManagers.
Converts a status code to a human readable string.
Adds a cache type and its dependencies to all registered event listeners.
Extracts the database dialects.
Investigates the dialect.
Identifies a dialect by its name.
Check the database.
Parses the given date as a date in the scheduler format.
Set the node name in the prepared statement.
Marks the given deployment unit and all of it's parent deployments as such.
Reads the parameters from the given input stream.
Writes the return value to the output stream.
Writes an exception to the output stream.
Looks up the given lookup object starting at the given index.
Start the sfsb creation.
Marks the end of sfsb creation.
Gets the current SFSB invocation stack.
Pushes the given map of extended entity managers to the stack of managed entities.
Removes the last call of the current SFSB context.
Get the current call.
Deploys the module described by the module specification.
Returns the idl of the type of a class.
Inserts a primitive into an Any object.
Converts a Java class name into an IDL class name.
Returns true if the given string is a reserved IDL identifier.
Get the signature of a class.
Returns the signature of a method.
This method returns the string representation of a primitive type.
Returns the batch permission with the specified name.
Gets or creates the transaction scoped entity manager.
Associates the specified value with the specified key in this map.
Convert security role to a model node.
Returns the most recent entity version of the given timer.
Loads all the timers for a given timed object.
Returns the directory for the given timed object id.
Add a listener to a scope.
Remove a listener from the list of registered listeners.
Fire an event.
Returns a consumer that closes the wrapped value.
Add a credential to the subject's private credentials.
Get an object instance.
Add a transaction management interceptor for the given view.
Replaces all occurrences of a substring in a StringBuilder with a given string.
Creates the in-vm transport configuration.
Add an ear prefix if the configured name is relative to the deployment unit's parent.
Get the root deployment unit.
Returns the name of the service.
Create view configuration.
Create injection source injection source.
Returns the list of interceptors for the given method.
Add a InterceptorFactory to the View.
Adds a InterceptorFactory to the list of interceptors that will be applied to the specified method
Returns the client interceptors for the given method.
Adds a InterceptorFactory to the list of interceptors that will be applied to all methods in
Adds a client interceptor for a method.
Puts the given data into the private data map for the given type.
Thrown when reading an unexpected XML element.
Get the JAX-WS EJB endpoints attached to the deployment.
Get the JAX-WS Endpoints attached to the deployment.
Get the name of the endpoint.
Returns the endpoint class name for the given servlet meta data.
Gets the servlet for the given name.
Get a required attachment value from the deployment unit.
Get an optional attachment value from the deployment unit.
Get the JBossWebWebMetadata associated with the deployment.
Get the JBossWebServiceComponent for the given JBoss deployment.
Gets the EJB metadata for the given class name.
Get the context root for a deployment.
Returns the class for the given name.
Returns the resource with the given name.
Returns all resources with the given name.
Lists the resources under the given path.
Pop the top of the stack.
Returns the entity manager for the given scoped name.
Register clean up listener.
Deploys a WAR.
Returns true if all fields of the given class are public.
Factory method for creating a new HTTP endpoint.
Create a new archive deployment from a deployment unit.
Checks if the deployment unit is a JAX-RS deployment.
Sets the next timeout.
Sets the state of the timer.
Merges the given deployment data into this deployment data.
Deploys the module described by the module specification.
Add the remote transactions dependency.
Returns the set of all container interceptors.
Returns true if the specified method is on the level of the specified interface.
Throws an exception if one of the given elements is missing.
Returns the class object for the given class name.
Get the component type of a parameterized type.
Parses the given name into a Name object.
Converts a string into a vector of component names.
Parses a name component from a string.
Deactivates this object.
Converts a servant to a reference.
Authenticates the user.
Checks if is type matched.
Looks up a service by name.
Unbind a JNDI binding.
Instantiates the given bean using the given configuration.
Configures the given bean using the given bean meta data configuration.
Dispatches the specified lifecycle joinpoint to the specified bean.
Returns the current selector or the default selector if there is none.
Convert a name and bean state to a service name.
Creates a service name from a class and a bean state.
Returns the class with the given name.
Process the annotations for the given deployment unit.
This method is called after all the steps in the deployment.
Validates the given descriptor.
Create the deployment descriptor.
Create the web app descriptor.
Returns the authentication method for the given deployment.
Deploy the service descriptor.
Handle stateless session bean.
Create a stub class for the given class.
Returns the byte representation of an anonymous object id.
Returns a copy of the list of registered persistence providers.
Clears the cache of deployment specific providers.
Adds the specified persistence provider to the set of deployment class loaders.
Finds the parent module classloader of the given class loader.
Deploy the service.xml file.
Adds the PU service to the deployment.
Sets the annotation indexes for the given deployment unit.
Get the persistence provider adaptor for the given deployment unit.
Saves the given PersistencProviderAdaptor to the deployment unit's attachment.
Lookup the provider for the given deployment unit.
Gets the annotated classes.
Create an EJBArchive from a deployment.
Build enterprise bean meta data.
Performs a participant refresh.
Returns the analysis for the specified class.
Lookup a container analysis for the given class.
Creates a new work-in-progress instance for the given class.
Returns the name of the IDL module.
Converts an integer to its hexadecimal representation.
Converts a long to its hexadecimal representation.
Returns true if the method is an accessor method.
Returns true if the given method is a mutator method.
Returns true if the method has no exceptions.
Reads the name of an attribute.
Returns the name of the attribute to write.
For overloaded methods, fixup the names of the overloaded methods.
Fixes up the case names of the abstract analysis.
Escapes special characters in the name.
Parses an XML description of a subsystem and adds it to the model.
Parse the default context propagation element.
Processes the attributes of the given reader.
Loads a provider module by its name.
Creates an add step handler.
Deploys the deployment.
Writes an attribute.
Creates a session on the remote server.
Infers the destination name from the given address.
Registers a set of endpoint handlers for the specified endpoint class.
Get the job XML names for the given job name.
Initializes the class loader.
Returns the request URI.
Create a new context using the given URL.
Looks up an object by its name.
Binds an object to the specified name.
Call unbind method.
Returns an enumeration of JNDI bindings.
Calls the destroy method on the given naming context.
Destroy a subcontext.
Bind a new context.
Create a new subcontext with the given name.
Looks up a link by name.
Add a property to the environment.
Remove a property from the environment.
Adds the transformations for the given version to the given builder.
Remove a security domain.
Looks up a JNDI context.
Creates a new modular reference of the specified type with the specified factory.
Creates a new instance of the modular reference.
Create a new instance of the specified type, using the specified address and factory class.
Returns the idl for the given type code.
Waits for a service to be available.
Computes the masked password.
Initialize the security vault.
Starts a new vault session with the specified alias.
Display information about a newly created attribute.
Displays the current vault configuration.
Returns the vault configuration as a string.
Check that the value is not null.
Get the deployment service name for a resource adapter.
Inserts the value into the given Any object.
Returns true if the specified permission implies the specified permission.
Get the action string.
Returns the name of the logger.
Send a state change notification.
Returns the value of the given type.
Returns the context service name for this component.
Returns the set of all interceptors.
Add a method interceptor to this class.
Add a dependency to this component.
Returns the list of interceptors for the given method.
Returns the list of interceptors that will be used to intercept the given method.
Add a timeout view interceptor.
Adds a InterceptorFactory to the list of interceptors that should be instantiated around construct.
Add a post-construct interceptor.
Add a pre-destroy interceptor.
Add a pre-passivate interceptor with the specified priority.
Add a post-activate interceptor.
Sets the component create service factory.
Remove the JNDI bindings from the context.
Adds the remote transport providers to the builder.
Returns the context service name for a component.
Returns the context service name for the given module.
Returns the bind info for the environment entry.
Returns the BindInfo object for the given JNDI name.
Gets the cache.
Returns an array of ValueMember objects.
Get the value members for the type code.
Creates the subsystem root.
Parses a configuration element.
Starts the service.
Create job operator service name.
Add a component to this deployment.
Add a message destination mapping.
Returns the set of components for a given view type.
Returns the set of components with the given name.
Returns the set of components for the given view and component name.
Resolve the message destination.
Adds the transformers 2 1 0.
Adds an attribute to the transformation description to reject the defined attributes with the default value.
Pop identity from state cache.
Loads the ids manually.
Check the version integrity.
Computes and returns the slot for the given JSF version.
Get the constant type code for a class.
Add a type code for a class.
Ensure that the given package exists in the given container.
Adds the interfaces for the given analysis.
Adds the abstract base valuetypes for the given analysis.
Adds a class to the class map.
Adds an interface to the class.
Add a value analysis.
Add an exception to the exception list.
Gets class level injection type.
Starts the store.
Stops the naming store.
Check if the given method type is allowed.
Check transaction sync.
Get all component classes.
Get the timers associated with the waiting on tx completion.
Returns a map of parameters that are not in the allowed keys.
Get the parameters from the configuration.
Convert a type to a class.
Convert the given value to the given class.
Returns the types of the values in the given array.
Checks if the given type names match the given type infos.
Returns the next binding in the list.
Get the next batch of bindings.
Convert a COS binding to a JNDI binding.
Observes the resources.
Shuts down the health checkers.
Returns an object handle for the specified locator.
Converts the given model node to an enum value.
Skip amount bytes in input stream.
Throws an exception if both elements are required.
Adds a component to this module.
Adds a set of class loaders to the deployment.
Unbinds a component from the context.
Looks up a name in this context.
Returns a list of class names for the given name.
Returns a list of all bindings for the given name.
Adds a factory to the chain.
Saves the given context object properties to this context handle.
Creates the io subsystem if it does not already exist.
Create the handler for the welcome content.
Get a bean from the pool.
Calculates the operation analysis map.
Collects metrics for a resource.
Prepare the deployment unit.
Performs the actual deployment.
Publishes the deployment.
Stops the web application.
Start the Weld service.
Registers an endpoint configuration for the specified endpoint class.
Calls the timer service to retry the given timer.
Post-processing of the timer.
Returns the declared methods of the given class.
Get declared fields of a class.
Get a constructor from the given class.
Get a method from a class.
Adds the Messaging ActiveMQ extension to the migration operations.
Check if a parameter is allowed.
Migrates the generic transport factory to a new one.
Cancels the task.
Run if not cancelled.
Set the type of the resource.
Returns true if the given function can be executed without an index.
Recursive method to find all classes in a directory.
Returns all classes that implement the given interface in the given package.
Gets the generic multivalue type.
Evaluates the condition for the given record.
Derives the field type from the field name and requested field type.
Update a record.
Finds a record from the cache.
Get the minimal set of nodes for a sharded query.
Moves all equalities from the left side of the where clause to the left side.
Add order by projections if needed.
Extracts the sub-queries from the query planning information.
Returns true if the given RID belongs to one of the given clusters.
Checks if the given query target has an index that supports sort only.
Returns true if the given class is a diamond hierarchy.
Get the order direction from the query planning info.
Returns true if the given key condition requires multiple index lookups.
Finds the best index for the given block.
Computes the common factor of the given list of index search descriptors.
Creates a new instance of the given strategy.
Check if this user has the permission to perform the operation.
Checks if a rule is defined.
Returns a compact representation of the server status.
Initialize the system database.
Load all local databases.
Removes a member from the cluster.
Elects a new lock manager.
Assigns the lock manager from the cluster.
Commits the current transaction.
Rolls back the transaction.
Update the identity after record commit.
Update the record cache after a rollback.
Prepares the given path for file creation or replacement.
Atomically moves the source file to the target file.
Returns a list of disjoint patterns.
Execute only locally if the operation is idempotent.
Geerbte Methode von org.xml.sax.ContentHandler
Check if the socket is connected.
Merge short from buffers.
Split short to buffers.
Execute the operation.
Puts a single value into the dictionary.
Remove a value from the dictionary.
Executes a command on the database.
Executes the query and returns the first result.
Creates a new channel.
Checks if the offset and length are valid and throws an exception if not.
Replaces the content of this file with the given file.
Execute a command on the server.
End the current request.
Adds the host to the address.
Attempt to start a request with the given command and session.
Gets the database.
Get the connection for this channel.
Kills the given connection.
Interrupt a channel.
Disconnect the client with the specified channel id.
Push the distrib cfg2 clients.
Swaps the entry at the specified index with the specified new value.
Releases all locks.
Synchronizes the schema of all registered entities.
Update the metadata.
Moves the cursor to the last record in the list.
Returns the next character in the stream.
Execute the sub-query.
Executes the callback when an async replication error occurs.
Registers a compression.
Returns the maximum number of open files allowed in the system.
Returns true if the expression allows indexed function execution on the target object.
Moves the buffer from the specified position to the specified position.
Fills the buffer with iLength bytes of filler.
Executes all steps until a return value is reached.
Executes all steps until a return value is reached.
Evaluates the condition for the given record.
Execute the ShutdownGraph.
Loads the configuration from the storage.
Parses the given request into a ret object.
Execute the request with the given input parameters.
Updates the schedule starting at the given start node.
Adds an index definition.
Creates a new aggregate projection that is a split of this one.
Determines the type of the given source object.
Returns the collate for the given document.
Returns the value of this option as a string.
Advances the probe to the next probe.
Executes the INSERT, UPDATE or DELETE SQL statement.
Builds a JSON object from a file.
Check the password for validity.
Create a hash of the input string.
Checks if the given algorithm is supported.
Creates a new index.
Returns a list of all vertices in the graph.
Returns an iterable of all edges in the graph.
Get the partition key.
Gets the DistributedCrudTaskSynchTimeout.
Get the features.
Checks if the given changes container has been filled up to the given page index.
Parses a timeout.
Parses the lock strategy.
Create a new cluster in the system database.
Frees the cluster with the given cid.
Starts profiling.
Shuts down the service.
Creates a new instance that is a singleton.
Grant access to a specific resource.
Revoke this access to a specific resource.
Evaluates the filter and returns true if the record is valid.
Resets the size of the bit table.
Returns the index of the given item in the table for the given index.
Spread a random number generator.
Creates a new index on this table.
Drops all indexes related to this class.
Returns the index that this index is associated with.
Returns the linked class.
Converts the document to a stream.
Removes the given listener from the list of listeners.
Register a database.
Timeout the request with the given request id.
Creates a copy of this database.
Attempts to merge the given value with this value.
Replaces the delegate with a tree bag with the given pointer.
Transform result.
Add a cluster to the database.
Closes all pools.
Called when a storage is unregistered.
Returns the names of all registered function factories.
Get the names of all collate factories.
Returns the names of all registered command factories.
Reads the field size and type from the current position of the stream.
Write the status code and reason to the response.
Write the response headers.
Writes a batch of records to the response.
Write a record to the response.
Send the response.
Send a stream to the server.
Opens a database connection.
Closes the connection to the database.
Listens for changes in a collection.
Completes a component operation.
Pushes the given component counters to the registry.
Push write cache counters holder.
Pushes a storage counters holder onto the top of the stack.
Pushes a new wal holder to the end of the snapshot.
Pushes the given component's counters to the given holder.
Stops the write cache flush timer.
Stops the timer that is used to check for fuzzy checkpoints.
Stops the full checkpoint timer.
Stop the commit timer.
Stops the WAL.
Stops the WAL.
Parses the given SQL statement.
Initializes the receive messages thread.
Initializes the timer to check if there are any known servers to be disconnected.
Remove this record from the database.
Set a property on this record.
Remove the property with the specified key.
Check if the given class name is in the schema.
Wraps the given cursor with the given source.
Define vertex attribute strategy.
Define edge attribute strategy.
Returns a list of new record entries for the given class.
Get a list of new record entries for the given cluster ids.
Add an index entry.
Merges the source set into the target set.
Evaluates the filter on the given record.
Check if the function can be executed without an index.
Prepares the keys for the given index.
Writes a page to the output.
Reads a single page from the file.
Truncates the page at the given index.
Opens the segment file.
Check if replication is active on a local node.
Gets the new node strategy.
Check if the execution mode is synchronous.
Check if the read-your-writes flag is set on the cluster.
Get a map of cluster names to a list of servers.
Get the list of servers for a list of cluster names.
Check if a server is contained in a list of clusters.
Check if a server is contained in a cluster.
Get the list of master servers.
Get a list of all configured servers.
Returns the set of cluster names that are on the specified server.
Get the set of clusters owned by the specified server.
Returns the owner of the specified cluster.
Get the configured cluster owner.
Get the list of configured servers for the given cluster.
Returns the names of all registered servers.
Get the list of data centers.
Returns the write quorum for a given data center.
Returns true if this instance is sharded.
Returns the list of servers for a given data center.
Get the data center of the given server.
Get the global read quorum for this cluster.
Get the write quorum for the given server.
Get the configuration of the cluster with the given name.
Get the data center configuration.
Clears the initialization stack and active stack.
Returns the index with the given name and index class.
Drops an index.
Add a vertex to the graph.
Add an edge to the graph.
Returns the vertex with the specified ID.
Get all vertices of a given class.
Get all edges of a given class.
Returns the edge with the specified id.
Reuse an existing database.
Shuts down the database.
Get the base type of this vertex.
Get the vertex type with the specified name.
Create a new vertex type with the specified class name and clusters.
Drop a vertex type.
Get the edge type with the specified name.
Create edge type.
Get the element with the specified id.
Drops an index on a key.
Removes the given exception listener from the list of exception listeners.
Fire an exception event to all registered background exception listeners.
Stop monitoring.
Registers the mbean with the platform.
Unregisters a previously registered MBean.
Fetches the write cache counters holder.
Fetch the system counters.
Fetches the component counters for the given component name.
Get the value of the property with the specified name.
Detaches an object from the proxied object.
Get the version of the given pojo.
Executes the given SQL command.
Set the dirty flag of a pojo.
Unset the dirty flag of a pojo.
Returns a list of all index types.
Returns a list of all available index engines.
Returns the list of missing nodes.
Get the responses that conflict with each other.
Returns the index of the group with the largest number of responses.
Computes the quorum response.
Returns a list of received responses.
Returns the cached execution plan for the given SQL statement.
Returns true if the left-hand side allows indexed function execution on the given target.
Get the library for this language.
Release a database engine.
Returns the position of the next record in the cache.
Update the size of this bag.
Returns the value at the specified index.
Checks if an index can be used by order by after a filter.
Returns the index within iText of the first occurrence of any string outside the specified range.
Jump to the next white space.
Jump to the first occurrence of one of the passed jump characters.
Sets the fetch plan to use.
Enqueues a repair record for the given RID.
Cancels a repair record.
Enqueues a cluster to be repaired.
Returns a map of alias to the set of aliases that depend on this pattern.
Creates a new POJO of the specified class name.
Registers the specified entity classes with the specified class loader.
Registers the given entity class and all of its super classes.
Sets the class handler.
Acquire a database connection from the pool.
Get the number of available database connections for a user.
Acquire a database from the pool.
Execute the Update Cluster action.
Returns an iterator that iterates over all instances of the given class in the order they are returned
Check the cache memory configuration.
Creates a new Vertex from a JSON representation.
Creates an Edge from a JSON representation.
Convert an element to a JSON object.
Create an ObjectNode from a DOM element.
Executes an import job.
Returns the status of the current job.
Returns a map where the key is the data center name and the value is a set of servers
Separates a cipher transform from its string representation.
Creates an object from a key config object.
Loads an algorithm from a file.
Create an object from an input stream.
Encrypts the given byte array using the given transform.
Writes the base64 encoded key to the given output stream.
Saves a password to a keystore.
Set the child context.
Adds an object to the set of unique result.
Get the value as an object or a map.
Authenticates the user with the given username and password.
Get the value of a key in a map.
Get the record to use.
Move the cursor to the next record.
Get the current transaction graph.
Gets the no-tx graph.
Set up the connection pool.
Returns the value of the property with the specified name.
Stops the current transaction.
Return the next token.
Returns the token at the specified index.
Get all of the vertices in the record.
Remove this vertex from the graph.
Adds an edge to this graph.
Add an edge to the graph.
Get the connection class for this field.
Get the connection information for this field.
Processes the list of broken RIDs.
Get the console methods.
Executes the given task on the local node.
Return the number of nodes with the specified status.
Waits for next retry.
Get the argument at this position.
Check if the request contains a parameter with the specified names.
Connects to the remote storage.
Lists all available databases.
Get server info.
Check if a database exists.
Drop a database.
Freeze a database.
Release a database.
Get the status of the cluster.
Get the graph from the database.
Parses the retry command.
Save the record to the database.
Delete the record.
Returns the authentication header for the given database name.
Authenticates the user.
Checks if a user is authorized to execute a specific resource.
Starts the server.
Method to adjust line and column numbers for the start of a token.
Sets the bucket pointer for the given page offset.
Gets the bucket pointer.
Ends the current atomic operation.
Acquire exclusive lock until operation completes.
Changes the maximum amount of memory in the read cache to the given value.
Listen on the specified host and port range.
Reads the configuration from the server configuration.
Shuts down the log manager.
Add an item to the cache.
Remove the entry for the given key.
Acquires an entry from the cache.
Returns the value associated with the given key, or null if there is no such key.
Clears the contents of this map.
Closes the entry for the given key.
Empty the read buffers.
Called after a write operation.
Writes an entry to the buffer after it has been read.
Puts an entry in the read buffer.
Returns the closest power of two greater than or equal to the specified value.
Process an incoming push request.
Convert the key to an enum.
Convert all underlying values to enum values.
Gets the serializer for the given type.
Initialize the shutdown queue.
Returns the engine with the given name.
Adds a new state to the readers state list.
Authenticates the given auth token.
Creates the metadata.
Attempt to acquire a read lock.
Get the current vertex in the given direction.
Returns the id of the element.
Sets a property on the current graph.
Removes the property with the given key.
Clears the contents of the cache.
Deletes the contents of the bucket.
Ends the batch importing process.
Creates a new vertex in the graph.
Parses a strategy word.
Extracts the position information from an embedded collection.
Executes the INSERT, UPDATE, REPLACE, REPLACE, or REPLACE command.
Checks if the given field value is a link.
Fill the buffer with the given values.
Set the version of this record.
Returns the type of the given record.
Initialize the distributed database instance.
Prints the stack trace of an exception to a String.
Convert this link to a record.
Register a new command.
Create a server user configuration object.
Analyzes the given SQL condition and returns a list of all matching conditions.
Create an indexed property.
Attaches all fields defined in this object to the object.
Returns the class of the index.
Returns the next value in the queue with a new current value.
Truncates the table.
Add a base class to this cluster.
adds the polymorphic cluster ids to the indexes.
Convert a link to a stream.
Releases an object to the pool.
Checks if there are any memory leaks.
Clears the memory allocations.
Converts a byte array to an int.
Called when a database is opened.
Install all clusters of the given class.
Dumps the current status of the servers.
Returns the index of the first occurrence of the specified object in the specified array.
Finds the first occurrence of an object in an array.
Returns the list of clusters that are involved in this query.
Handles the result of a search.
Returns the temporary rid of this query.
Reports a tip to the user.
Parses the fetchplan keyword.
Parses the keyword to see if it is a no-cache keyword.
Optimizes the sort by fetching the values from the index cursor.
Get the status of this batch.
Executes a command.
Handle JVM error.
Validates a put index value.
Rolls back a transaction.
Executes the given command.
Registers a cluster.
Set a property.
Execute the CREATE CLASS.
Executes the INSERT, UPDATE or DELETE SQL statement.
Delete the record with the specified version.
Callback for all registered hooks.
Delete the record with the specified ID.
Returns the number of instances of the given view.
Count the number of fields in the given class.
Activates this service on the current thread.
Registers an encryption.
Calculates the relative index for the given position.
Parses the next word.
Parses the next word.
Parses the next character.
Parses an optional keyword.
Checks if the given character is part of a separator.
Executes the INSERT statement.
Clears the configuration files.
Get the position in the buffer as a byte array.
Extracts the given token type and returns it as a string.
Acquires an access token from the OAuth2 provider.
Copies the token from the authentication details to the context.
Returns true if there are no more characters in the stream.
Reads the next line from the stream.
Skips the given number of bytes by reading from the underlying stream.
Ensures that the offset and length are valid.
Swaps the elements of two ints.
MurmurHash3 hash function.
MurmurHash3 hash function.
Writes the specified byte buffer to this output stream.
Truncates the file to the given size.
Moves the stream to a new position.
no fail refresh metrics reporting.
Awaits the completion of the current tasks.
Finds matches for the given query.
Finds the types that need to be compacted.
Deletes all the snapshots.
Returns the hash code of the specified field in the specified ordinal.
Removes all references that are outside the closure of the referenced schema.
Called when an announcement is complete.
Called when a cycle is completed.
Reads header tags from the input stream.
Extracts the primary key from an object.
Clears all bits in this bit set.
Reads the ordinals from the given stream.
Returns the estimated size of this set.
Returns the field value for the given row.
Copies length bytes from src to dest.
Copies length bytes from srcPos to destPos.
Compares the specified range of this array with the specified range of the specified array of bytes.
Copies length bytes from src to dest.
Copies length bytes from srcPos to destPos in order.
Reads a sequence of bytes from the given input stream into this array.
Writes the contents of this buffer to the given output stream starting at the given position.
Ensures that the given segment index has enough memory.
Returns the position of the field with the given name.
Calculates the deduped sizes and total number of buckets.
Returns true if the given dataset has any collections in it.
Generates all the files needed to generate the Hulk schema.
Generates the files for all schemas in the dataset.
Returns true if the specified ordinal matches any of the keys in the specified array.
Returns the record key for the specified ordinal.
Create a field path for a primary key.
Create a field path for a hash index.
Puts an object into the set.
Initializes this instance of the class.
Returns true if the given key exists in the set.
Adds a field to the specified type.
Given a collection of schemas, returns a list of schemas that depend on them.
Initializes this instance with the default values for the next major version of the schema.
Returns the value of the segment at the given index.
Find matching records.
Find matching records.
Set the element paths to match against.
Set the element key paths.
Restores the data model from the last state.
Runs a cycle.
Excludes the given key from the given index.
Excludes referenced objects from the graph.
Writes the given header to the given output stream.
Calculates the type metrics.
Writes the data for this record to the specified byte buffer.
Writes a fixed length integer to the given byte buffer.
Writes a fixed length long to the given byte buffer.
Return an ordinal to the pool.
Sorts the free ordinals in ascending order.
Calculates hash code for array of objects.
Returns a hash code for the given key and field type.
Resizes the storage to the specified size.
Finds a free ordinal for the given preferred ordinal.
Prepares the bucket map for writing.
Compares the given serialized representation with the given key.
Grows the key array by a given size.
Rehashes the previously added data for the given key.
Creates an empty key array with the given size.
Checks if two indexes are equal.
Finds the unique type that matches the specified key.
Swaps the current read state with the pending read state.
Returns the number of elements in the hash table.
Runs a compaction cycle on the current state engine.
Writes a snapshot of this state to the given output stream.
Writes the delta to the given output stream.
Adds the given schema names to the given set if they are not primitive or collection.
Normalize field path to param name.
Rebuilds the hash index.
Finds matches for the given query.
Triggers an asynchronous refresh with a random delay.
Triggers an async refresh with the specified delay.
Add a type diff for the given primary key paths.
Writes a variable-length integer to the output stream.
Write an integer to a byte array at a specific position.
Reads a variable size integer from an input stream.
Reads a 64-bit long from an input stream.
Add a view to this layout.
Refresh the size of the loading views.
Updates the UI to reflect the current state of the component.
Called when the user presses the pull button.
Create a new fact with a given name and value.
Adds the given facts to the rule.
Create a new rule builder for the given rule class and action type.
Create a new instance of the GREGORIAN rule.
Returns a copy of this rule with the specified fact type.
Returns a copy of this builder with the specified result type.
Create a new given rule with the specified name and value.
Creates a new rule with the specified name and optional facts.
Create a new ThenRuleBuilder.
Returns the instance of the given rule class.
Returns the first field annotated with the given annotation.
Gets the annotated method.
Gets annotation.
Registers an audit rule.
Updates the status of an audited rule.
Returns a map of all pending rules.
Returns a builder for the result type.
Add an action to the rule.
Add an action to the rule.
Resets the value to its default value.
Adds a new rule with the specified fact type.
Returns a list of all rules defined in the package.
Read empty line or end table.
Convert a list of services to an array.
Gets the ports from the build configuration.
Extracts the list of ports from the configuration.
Parses the port mapping.
Adds the port to the list if it is not null.
Shift the ports, returning null if there are no ports.
Add missing service parts.
Appends an image stream resource to the specified target file.
Compares two ports.
Convert a service name to a port number.
Get the host and port for the given service name.
Puts a value into the map if the key does not exist.
Merges all values in the toMerge if they are not present in the map.
Merge two maps.
Put all if not null.
Waits until the pod with the given name is ready.
Validates that the given string is a valid kubernetes identifier.
Converts an entity to a list of HasMetadata objects.
Returns the resource version of the entity, or null if the entity is null.
Check if the pod is ready.
Returns the current context.
Checks if a kubernetes list builder has a route with the given name.
Checks if the project has a resource with the given paths.
Reads and enriches a fragment from a file.
Convert a map of environment variables to a list of environment variables.
Merge two sets of resources.
Merge maps and remove empty strings from original map.
Checks if the pod spec specifies a local customisation.
Reads the configuration from a file.
Adds the port to the map if it is valid.
Gets the docker json config string.
Returns the plugin configuration for the given system and id.
Returns the secret configuration for the given id.
Downloads the given URL to the given target file.
Compare two version strings.
Blend profile with configuration.
Looks up a profile by name.
Reads a profile from the classpath.
Read all profiles from classpath.
Find profile yaml file.
Get the list of profile paths for the specified extension.
Creates a list of profiles from a YAML stream.
Get image pull policy from config.
Returns true if shift mode is open.
Gets the replica count.
Returns the first child element with the given tag name.
Installs a template.
Removes a tag from a list of tags by its name.
Applies the given namespace to the cluster.
Submits a project for execution.
Applies a project request to the given entity.
Gets the Kubernetes Resource Namespace for the given entity.
This method is called when an error occurs during the apply phase.
Creates a Kubernetes Resource.
Enriches the given KubernetesListBuilder with namespace information.
Returns a map of environment variables to the main class.
Parses a duration in seconds.
Parses a duration in the form of a string.
Scans the output directory for files matching the given patterns.
Disables open shift features.
Checks if a service has an ingress rule.
Parses the given mapping file and returns the content as a map.
Returns the default icon reference.
Copies the app configuration files to the build directory.
Loads properties from a resource.
Returns the version of the spring-boot dependency.
Iterates over the configured enrichers and adds them to the builder.
Returns the raw processor configuration.
Flatten a map into a one-dimensional map.
Returns a template that can be used to instantiate a singleton resource.
Gets the build reference date.
Returns the value for the given key, or the given default value if no value is defined.
Returns the configuration map for the given name.
Prepares a list of processors to be used.
Adds the from configuration to the builder.
Returns the default from mode.
Get image name.
Get the registry.
Returns true if the server is online.
Returns the external service URL for the given service name.
Returns the value of the given property as a boolean.
Creates a Jetty client for the given URI.
Creates an internal node and starts it.
Scans the classpath for plugins.
Create an instance of the american express rewards balance from a JSON string.
Get the American Express rewards balance.
Create a paypal payment resource from a JSON string.
GETs the resource specified by the path.
Sends a POST request to the authorization endpoint.
Creates a new venmo configuration from a JSON object.
Collects device data from a Braintree fragment.
Collect device data.
Collects the device data from the Braintree fragment.
Get client metadata id.
Checks if the signature of the given package is valid.
Returns the value of the specified option as a string.
Parses a list of payment method nonces.
Gets the browser checkout recipe.
Gets the browser billing agreement recipe.
Asynchronously sends a GET request to the specified path.
Asynchronously sends a POST request to the specified path with the specified data.
Send POST request.
Approves a local payment.
Add a listener to the list.
Removes a listener from the list of registered listeners.
Request a billing agreement.
This method is used to handle the result of an activity.
Parse Paypal account response.
Adds a list of words to the dictionary.
Remove words from dictionary.
Convert a sequence of tokens to a list of strings.
Extracts a list of phrases from a sequence of tokens.
Detokenizes a list of tokens.
Fetch size bytes from channel.
Joins the given NAL units into a single byte buffer.
Concatenates a list of NAL units into a single byte buffer.
Returns the profile for the given integer.
Normalize and generate a fixed precision tap for a set of taps.
Reads to the next marker.
Reads a new buffer from the input stream and returns it.
Get the maximum available frame.
Modify the file.
Returns the total duration of all the edits in the specified track.
Converts a frame in a TrakBox to a time value.
Converts a timevalue to a frame.
Converts a Media Time Time into a Time Time Time in seconds.
Get the number of times the movie was edited.
Get the QT for a specific media frame number.
Get the video player's time in seconds.
Convert a timevalue to a timecode frame.
Formats a timecode to a human readable string.
Create a 7 bit integer from four bytes.
Set a value in a list.
Returns true if the given colorspace matches this colorspace.
Returns the width and height of the specified component.
Create a raw m.
Reads a single byte from the cache.
Creates a WAV header with the specified format and samples.
Create a WAV header from a multi-channel array of headers.
Parses an AAC message from the byte array.
Encodes the given symbol for the given context.
Splits a track into several edits based on the timescale.
Decodes a single frame.
Sets the endianness of this ByteBuffer.
De-block the mb-region.
Encode a native frame.
Encodes a long into an EBML encoded length byte array.
Get the length of an EbML value.
Adds a packet to the packet buffer.
Repositions the file.
Decodes a single bin.
Decode a bin bypass code.
Moves the position of the buffer to the beginning of the buffer.
Returns the frequency of the i'th sample.
Predict the plane of a point.
Initializes a block of integers with the specified number ofDC values.
Calculates the coefficients of a polynomial.
Divides each element of the block by its divisor and places the result in the block.
Concatenates the contents of a buffer into this buffer.
Reverses a 32 bit integer.
Seeks to the specified key frame.
Get the picture from the pixel buffer.
Get the change point id for a change point.
Convert a byte array to an int array.
Convert an integer array to a byte array.
Writes the audio data to a float buffer.
Convert a float buffer to a byte buffer.
This method interleaves a set of audio frames into a set of audio frames.
Deinterleaves the input buffer into the output buffer.
Get the size of the video.
Build a map to wipe out the whole image.
Reads an array of ULs from the given ByteBuffer.
Reads an int32 batch.
Calculates the MV of three components.
Encodes a picture into an encoded frame.
Encodes an IDR Picture into a byte buffer.
Encode a picture in PCM byte buffer.
Returns a list of all supported codecs.
Returns a list of all supported codecs.
Add a reference to this class.
Cleans up the reference queue.
Flushes all valid references to the pool.
Loads the native library.
Unpacks the library at the specified path.
Deletes all the temporary files.
Returns the default layout for the given number of channels.
Get a channel from a layout at a specific index.
Create a new media packet.
Returns a string representation of the current version.
Returns the default time base.
Creates a new demuxer.
Plays a video file.
Display the video at the correct time.
Creates a new codec descriptor for the given codec.
Prints the given option to the given print stream.
Registers a factory to handle URLs with the given protocol prefix.
Generates a unique name for the given object.
Create a new media audio resampler.
List of supported video frame rates.
List of supported video pixel formats.
Returns a list of all supported sample rates in the system.
Returns a list of supported audio formats.
Returns a list of supported audio channel layouts.
Set the flag.
Set the value of a flag.
Get the decoder.
Get the current demuxer.
Returns a copy of the available formats.
Create a new filter graph.
Returns the type of the filter.
Get a byte buffer from the buffer.
Creates a new audio frame with the specified audio format.
Performs resampling on a media picture.
Validates the image.
Validates the given picture.
Get the filter graph.
Returns the meta data of this key value bag.
Get the java cpu.
Get the CPU from the given GNU string.
Get the operating system for the given operating system name.
Returns the operating system for the given GnuString.
Plays a sound file.
Loads a library with the given name and major version.
Add a library to the list of loaded libraries.
Loads a candidate library.
Initialize the search paths.
Check if a library is already loaded.
Deletes this object from the database.
Get the stream at the given position.
Get the current muxer.
Creates a set script transaction.
Decodes a Base64 encoded string into a byte array.
Generates a random seed string.
Get a transaction by id.
Returns a list of transactions for the given address.
Get transactions from an address.
Get the list of block header values for the specified range of blocks.
Get the block with the given signature.
Send a transaction to the Bitcoin network.
Creates a scriptPubKey that can be used to pay a transaction.
Compile a script.
Writes a primitive array.
Flushes the stream.
Writes an object to a memory address.
Reads the class information for the last direct class.
Writes an object to a byte array.
Sets the file and channel for the MMF file.
Returns the specificity of the specified class.
Resizes the store to the given required size.
Remove the given binary key from the index.
Write a string asc.
Set the output stream.
Creates a new JSON configuration.
Create struct configuration.
Calculates the size of an object in bytes.
Clears all cached data.
Reads an object input from an input stream.
Reads an object input from the stream.
Get an object input stream from a byte array.
Returns an output stream that can be used to write to the specified output stream.
Register cross platform class mapping.
Returns the name of the class.
Writes an integer to the stream.
Writes a raw integer to the output.
Writes an integer into the output stream.
Write raw bytes to buffer.
Returns a cached instance of FST.
Notifies the listener that the object will be written.
Notify listeners that an object has been written.
Get the serialization information for a given Fst.
Writes an array to the stream.
Set the string to be parsed.
Writes a primitive array to the stream.
Finishes the change tracking.
Take a snapshot of the changes.
Register an object for writing.
Writes an object to a byte array.
Reads an object from the input stream.
Reads a byte array from the buffer.
Reads an int from the buffer.
Moves the head of the queue to the end of the queue.
Enables or disables the thread pool.
Starts the embedded Cassandra daemon.
Clean data from embedded cassandra tables.
Copies the given resource to the given directory.
Checks if a remote port is taken.
Returns an empty subscriber state.
Reads the onnx op descriptors from the classpath.
Calculate the shape of the output of this function.
Computes the logical or with another condition.
This method performs a logical AND operation on a number.
Performs a logical AND on an ndarray along specified dimensions.
Performs a logical OR on an ndarray.
Applies the given where condition to the given INDTo.
This method returns the first element of an ndarray matching a condition.
Convert this index to a flat property list.
Convert flat properties to function properties.
Serializes a collection of properties into an array of properties.
Set the throwable.
Set the exception to be rethrown only if it wasn't already thrown.
Merge two lists of coordinates.
Splits a list of doubles into a list of lists of doubles.
Convert a tensor data type to an nd4j data buffer type.
Shuts down the server.
This method returns current device architecture.
Convert a column of a matrix to an image.
Pooling 2D images.
Creates a new compression descriptor from the given byte buffer.
Splits the given list into batches of the given partition size.
Validate that the given arrays have the same shape as the given dimension.
Set the data buffer type.
Returns an array filled with values from 0 to num-1.
Convert a collection of matrices to a flattened NDArray.
Computes the Bilinear Products between two matrices.
Creates a complex number from a double array.
Creates a new complex number with the specified value.
Create a new complex array filled with the given value.
Returns true if the last synced time is greater than the sync time.
Subtracts c from this matrix and places the result in result.
Calculate the arc tangent of a complex number.
Rounds a complex number up to the nearest whole number.
Negate a complex number.
Calculate the absolute value of a complex number.
Calculate the power of a complex number.
Binarize the feature matrix to a given cutoff value.
Samples the data set.
This method returns the memory footprint of the data set.
Converts an exception to a string.
Returns the simple form of the hostname.
Convert an array of strings to a single string.
Converts a byte array into a hexidecimal string.
Returns an array of strings from a string.
Splits the given string around matches of the given separator.
Splits the given string around matches of the given separator.
Finds the first occurrence of the separator in the given string, starting from the given index.
Escapes a string so that it can be used as an HTML entity.
Joins the given strings using the given separator.
Camelizes a string.
Get the stack trace as a string.
Inverts a square matrix.
Returns the n-th element of the vector.
Checks if is actual on host side.
Checks if is actual on device side.
Create the shape information.
Create the shape information.
Check if the shape is a vector.
Get the order of the elements in the array.
Calculates the offset of the given indexes in the given ndarray.
Convert an array of indices to an array of INDArrays.
Returns the value at the given index as a short.
Reallocates the buffer for the given length.
Copy a block of data from one buffer to another.
Returns a buffer that is backed by a constant array.
Returns the URI of the Kafka connection.
power of a scalar.
Log of an ndarray.
Max function.
Find the maximum of two vectors.
Element-wise minimum function.
Find the minimum of two vectors.
stabilize a vector.
1-D ExpM Function.
1-p log of an ndarray.
Prepare bounds.
Returns the next data set.
Builds the allocation shape for the given buffer.
Checks if the given name exists in the given path.
Reads the data from the stream.
Sweeps the tail of the queue.
Create an ndarray from a native NPY array.
Create an ndarray from a python file.
Allocates a paged pointer.
Attaches an object to this manager.
Checks if the server is started.
Executes the given op.
Flushes the queue blocking until the queue is empty.
Returns the input stream for this resource.
Returns the device associated with the specified thread.
Attaches a thread to a device.
Returns the next device for the given thread id.
Gets the current operating system name.
Calculates the current architecture.
Publish an ndarray to the exchange.
Creates a new DataBuffer of the given type and length.
Intercepts the data type of the given operation.
Add c to result.
Processes a message received from the client.
Average pooling 3d operation.
Depth-wise convolution.
Resets all counters to 0.
Returns the class name for the given op.
Allocates a new array for this variable.
Returns the shape of the array.
Evaluate the SameDiff expression.
Create a compressed version of a double array.
Flatten a complex ndarray into a one-dimensional array.
Create a new array with the center of the given array.
Truncate an ndarray to the specified dimension.
Pad an ndarray with zeros.
finds the element of a vector that has the largest absolute value.
Broadcast an ndarray to all devices.
Sends a vector aggregation message to the client.
Gamma function.
Calculates the square root of a number.
Calculate the polynomial root of a number.
Returns the exponential of mc.
Raise x to y.
Raise x to the power of n.
Calculate the hyperbolic tangent of a number.
Calculate the hyperbolic sine of a number.
Calculate the hyperbolic cosine of a number.
Scales a number to prec.
Scales a number to prec if necessary.
error to prec.
Add a function to the registry by its ID.
Returns the inputs for the given function.
Updates the array for the given variable name.
Puts a shape for the given variable name.
Associates an INDArray with a variable.
Gets property for function.
Adds the given property to the list of properties for the given function.
Add a function to the list of outgoing functions.
Adds the arguments for the given function.
Check if the given function has incoming arguments.
Evaluate the pipeline.
Create a new variable with the given shape.
Add a one-like constraint to the query.
Creates a new zeros-like distribution.
Remove argument from function.
Set the gradient for the given variable name.
Average pooling 3d operation.
Creates a new GRU output variable.
Execute a list of differential functions.
Create a new WhileStatement.
Executes the given function.
Executes a list of SameDiffFunction instances.
Execute backward and end result.
Add a variable as a place holder.
Allocates a memory pointer.
Returns the number of bytes required to encode a data buffer of the specified type.
Get the string representation of the allocation mode.
This method returns the data buffer's type from the context.
Returns the numeric value of the given operation.
Destroy all workspaces for current thread.
This method prints allocation statistics for current thread.
TRMV is a specialized version of TRMV.
Computes the Z-value of the given accumulation.
Decodes the encoded threshold into the given target.
Returns the name of the node with the given name.
Perform a scalar operation on the given dimension.
Assert that no workspaces are active for current thread.
Computes the negative log likelihood of the given data.
Requests a tick.
Attempt to request a toe.
Releases the toe.
Get the current access state.
Copies this message to the clipboard.
Initializes the curr data set from a list of examples.
Initializes the host collector threads.
Returns the device pointer for the given buffer.
Synchronizes the host data with the data in the buffer.
Applies the updater to the given gradient.
Synchronizes the state of this segment to the host.
Create an ndarray from a matrix or vector.
Gets properties for function.
Has place holder inputs?.
Computes the difference between the gradients of this vector and the gradients of the given vector
Formats an ndarray to a string.
Create a new import state for the given graph.
convert an ndarray to a blob.
load complex from blob.
Save an ndarray to the database.
Copies the real part of this vector to the given vector.
Copies the imaginary part of this vector to the given vector.
Sets the value of this linear equation to the difference between this and the specified number.
Assign a vector to this vector.
Returns the rows with the specified indices.
Puts a row.
Put a single column in the matrix.
Subtract one dimension from another and store the result in result.
Computes the sum of two INDArrays.
Subtracts a complex number from this complex number.
Add this complex number to another.
Assign a scalar value to each element of the vector.
Create a new vector that is a ravel of this vector.
Computes the eigenvalues of a complex matrix.
Compute generalized eigenvalues of matrix a and matrix b.
finds the element of a vector that has the largest absolute value.
Copy a vector to another vector.
Computes the product of a vector by a scalar.
Processes a message received from the client.
Count the number of non-zero entries in the given weights and labels.
Do the actual reduction.
Returns the no-arg constructor for the given class.
Gets the constructor.
Invokes the given method handle with the given parameters.
Returns the first annotation of the given type, or null.
Returns the declared annotation of the given type for the given class.
Returns true if an annotation of the given type is declared on the given class.
Creates a proxy for the given interface and result.
Loads the given entity into the database.
Saves the given POJO to the database.
Create a proxy for the given service.
Get the metadata for the given kind, throwing an exception if the kind is not found.
Query for keys only.
Executes the given query using a HybridQueryResults object.
Query normal query results.
Query for entities that match the given query.
Performs a query against the Datastore and returns the number of results.
Partitions the input iterator into chunks of the given chunk size.
Loads the given keys and executes the load engine.
Format a message for log messages.
Create key key.
Compares two keys using the system's identity hash code.
Converts a Google Cloud Datastore.Key to a Google Cloud Datastore Key.
Converts a typed Key to a Cloud Datastore Key.
Gets the kind here.
Returns true if the specified type has missing type parameters.
Returns true if the given type is a super type of the given type.
Returns the exact direct super types of the given type.
Captures the given type.
Get a translator for the given key, context and path.
Returns the appropriate populator for the given class and path.
Returns true if the given class is an index instruction, false otherwise.
Returns true if the method is annotated with the AlsoLoad annotation.
Returns a list of all declared properties of the given class.
Gets the key metadata.
Get the value associated with the given key.
Executes the translation.
Fetches the pending entities.
Adds the indexed discriminators for the given class.
Register a class translator.
Gets the component type of a collection.
Returns the key type of the given map type.
Creates a new forward path from the given path.
Returns the final path of this path.
Returns the path as a string.
Returns the number of elements in this path.
Puts a collection of bucket updates into the cache.
Empty the cache with the specified keys.
Performs a cache put if all buckets are cacheable.
Get all values from the cache.
Returns the keys of a collection of buckets.
Sets the key for the given entity.
Sets the id of the given POJO.
Get the raw value of the parent.
Registers a subclass for the given type key.
Returns true if the two types have a common subtype.
Transforms the owner of the given type to the given type.
Looks for an annotation of the given type anywhere in the type hierarchy.
Add all of the mappings from the specified session to this session.
Loads a result from the round map.
Executes the next round.
Translates a result.
Fetches the entities with the given keys from the Datastore.
Loads the given entity.
Creates a new raw key with the given parent key, kind and id.
Gets the raw value of the given key.
Gets the id value.
Converts the given URL-safe key to a Google Cloud Datastore key.
Transactionless Objectify impl.
Executes the given work within a transaction, retrying if necessary.
Executes the given work once and commits the transaction.
Returns true if the given value matches at least one of the given conditions.
Objectify ofy.
Gets the async datastore.
Gets the metadata for the given entity.
Allocates a key range.
Opens a new Objectify instance.
Closes the objectify.
homogenizes the indexes of the given list.
Creates a new reference to the given value.
Returns the value associated with this key, throwing an exception if the value is null.
Add the value to the list for the given key.
Returns true if this future is done.
Generates an array of if conditions for the given field.
Executes the engine and waits for all pending tasks to complete.
Returns the container for the given type and path.
Get the stat for the given kind.
Unwraps a Throwable and throws it.
Gets the translator for the given key, creating it if necessary.
Gets root translator.
Create a translator for the given type key, context and path.
Loads the given entity into the given POJO.
Gets the property from the container.
Sets the value of the given property on the given pojo object.
Saves the entity into the database.
Get the value of the property.
Writes all extensions of the given message to the given generator.
Writes a content category to the JSON generator.
Writes a list of content categories to the JSON stream.
Processes the given snippet.
Returns an iterable over bids from the response.
Return the bid builder with the specified id.
Update the bids in the response using the given updater.
Remove all bids in the response that match the given filter.
Reads the extensions for the given message.
Returns true if the current token is null and is not null.
Registers an extension reader for the specified message class.
Register an extension writer.
Populates the given bid context with the data from the response.
Processes the fields.
Applies the given updater to all objects in the given iterable.
Filter a list of objects using a predicate.
Returns the name of the current element in the JSON stream.
Starts an object.
Starts an array.
Returns the next token from the JSON stream without consuming it.
Write a boolean field to the JSON stream.
Writes a list of strings to the JSON stream.
Writes a list of integers to the JSON stream.
Write a list of longs.
Writes a list of protocol message enums to the JSONGenerator.
Resolves a target against a base URL.
Returns a new URL with the query target replaced.
Returns the host segments of the URL.
Returns the host portion of the URL.
Gets the URL of the page with the given URL.
Load a list from storm conf.
Extracts the configuration element from a configuration map.
Returns the protocol for the given URL.
Generates a WARC file with the given fields.
Extracts the refresh URL from a value.
Get the metadata for the outlink.
Filters the given metadata and transferes it to the given destination.
Adds a new URL to the queue.
Cleans a field name.
Reads the charset from a byte array.
Get the charset from the content.
Get the charset from the meta data.
Sniffs the given content to see if it contains a clue.
Sets a value for the given key.
Get the first value of the given keys.
Get a list of cookies from a list of strings.
Check if the cookie domain matches the url host name.
Returns the cache key for the given URL.
Get the robot rules set from the cache.
Extracts the meta tags from a document fragment.
Attempt to ack the given tuple.
Returns true if the given URL matches the filter.
Filters the given URL string using the rules defined in this instance.
Read rules from a file in the classpath.
Processes the query elements of the given URL.
Create a new instance of the navigation filters based on the configuration file.
Add a record format to this bolt.
Returns the number of queries that should be throttled.
Triggers the pending queries.
Parse filters from storm conf.
Append a node to the current node.
Appends a processing instruction to the end of the list.
Receive notification of a comment.
Receive notification of the beginning of a DTD.
Returns the value of the URL field in the given tuple.
Trims the text if it is longer than maxLengthText.
Checks if the given status has a custom interval defined.
Construct a URL from storm conf.
Set the wheel item count.
Resolves the size and state of the given measure.
Set the drawable that should be used as the empty item.
Set the angle of the wheel.
Updates the position of the selected item.
Invalidates the drawable associated with a wheel item.
Converts a raw position into a wheel position.
Updates the camera's velocity.
Get the contrast color from the entry.
Clamps the given value to the given upper limit.
Writes the list of coverage files to a JSON file.
Returns the data as a byte buffer.
Set the string value.
Make a 1D array from this vector.
Makes an array char from a string.
Makes an array of char from a String array.
Creates a new array of the given length from the given array of values.
Returns the forecast time interval offset for the given record.
Shows the sprite sheet.
Show this dialog if it is not iconified.
Make an estimate of the size of a grid.
Scans a file and prints the number of records.
Creates a new UnitName with the given name and plurality.
Creates a new UnitName with the given name, plural and symbol.
Makes the plural form of the given name.
Returns true if the given date is included in the period.
Intersect this range with the clip.
Extend this range by another.
Extend this interval by the given date.
Sets the start date of the event.
Sets the end date.
Sets the duration of the event.
Add a MapBean to the toolbar.
Print error message.
Get the name of the NCD file.
Returns a string representation of the parameters.
Opens a DSP document from rawdata.
Compute the bounds of the edge.
Synchronize min and max sliders and duration field.
Computes an unlimited chunking for the given dimensions.
Registers a directory with the watch.
Process events.
Wrap a NetCDFDataset.
Check if a feature type is ok.
Finds the feature type of the given ncd file.
Writes a catalog to the output.
Converts a catalog to its HTML representation.
Returns the user defined CSS files.
Get the user's head.
Makes a dynamic catalog for the given path.
Add global services to the catalog.
Initializes the global credentials provider and user agent.
Get the content of the given URL as a String.
Uploads the given content to the given URL.
Returns the front page for the specified request.
Create a new catalog builder.
Extract the geospatial information from a GribCollection.
Get single dataset or by type name.
Checks if two vert coord values are almost equal.
Creates a new unit id.
Parses a gradients attribute specification.
Read the top of the file.
Convert two shorts to an int.
Converts a byte array into a 32 bit integer.
Get a java.util.Date from a julian day count.
Makes sure the given name is a valid NetCDF Object name.
Returns true if the given string is a valid NetCDF3 object name.
Reads the record data from the given section.
Reads a subset of the record data in the given section.
Fills in the non-record variables.
Makes a TimeStruct from this TimeValue.
Makes a TimeStruct from the given calendar.
Returns true if the given string contains a time template.
Add a function to the registry.
Get a boolean function by name.
Get the function with the given name.
Loads a new server side function.
Get the level name of a record.
Gets the description of a level.
Returns the name of the level unit.
Get the projection type for a given GDSRecord.
Checks to see if a level is a vertical coordinate.
Checks to see if a record is a layer.
Make a coordinate transform from an attribute container.
Make a dummy variable for a coordinate transformation.
Create a projection for the given GCT.
Loads and parses the preferences.
Saves the current state of the window to the persistent storage.
Returns a copy of this chronology with a different time zone.
Writes a count to the output.
Writes an array to the output.
Writes a byte array to the output.
Writes a byte array to the output stream.
Finish the init process.
Create a new CalendarDateRange from the given DateRange.
Creates a new GDS12 object with the specified template and data.
Parses the text from the DAP file and returns the number of elements consumed.
Parses the text from the DAP file and returns the number of elements.
Swap the header of the grid.
Read a grid.
This method can be used to get the list of grids from a file.
Writes an attribute to the output.
Writes the headers and service information to the output file.
Writes the list of operations to the output.
Reads all files in a directory and its subdirectories, passing them to the given closure.
Scans a log file and passes each log to the given closure.
Get the packing type for a given grid number.
Finds the grid with the specified parameter.
Computes the RPM package of a word.
Unpacks data from the IPK file into a float array.
DP ugrb.
Unpack GRIB 1 data.
Unpack GRIB2 data.
Prints the grids in the grid index.
Reads the next byte from the buffer.
Obtains a CalendarDate from the given Calendar object, year, month, day, hour,
Creates a new CalendarDate from the given java.util.Date.
Obtains a local date from the milliseconds specified.
Obtains a new calendar date from the specified calendar, with the specified milliseconds.
Parses a string of UD units into a CalendarDateUnit object.
Returns the difference between o and this date.
Creates a new atomic variable.
Setup the servlet.
Escapes a string so that it can be used as an identifier.
Creates a list of slices from a list of Range objects.
Unwraps the referenced file.
Returns true if the given list of dimensions contains variable length dimensions.
Computes the effective shape of a list of dap dimensions.
Add the given date to this date.
Multiply this unit by another.
Divide this unit by another.
Divide this unit by another.
Raise this unit to a given power.
Convert the given amount to a derived unit.
Convert the input array to a derived unit array.
Convert the given amount to the derived unit.
Returns the canonical string representation of this value.
Reads the data from the underlying stream.
Read 2D array data.
Flatten a time series collection from a list of station names.
Finds an inv service by its name.
Returns the gate size for the specified datatype.
Get the gate start for the specified datatype.
Get the gate count for the specified datatype.
Write a dataset to an output stream in XML format.
Returns the preferred size of all the components in the specified target container.
Verify that the given CrawlableDataset is a descendant of the given path.
Generate the proxy dataset resolver catalog.
Returns a new CalendarDateUnit instance for the given calendar name and unit name.
Returns a new instance of CalendarDateUnit with the specified calendar and udunit.
Constructs a CalendarDateUnit from a CalendarPeriod field and a base date.
Gets the quantity dimension.
Check if the file is a valid file.
Reads a 1-dimensional array from the input stream.
Reads the data for a variable.
Read a variable and write it to a writable byte channel.
Calculates the elevation of the given angle in degrees.
Calculates the step of the histogram.
Calculate the AZ value.
Calculates the coefficients for the given data.
Calculate the Nyquist coefficient for a given prf and wave.
Make a vertical transformation for the given dataset and time dimension.
Set the debug flags.
Set whether or not the index should be extended.
Read a range of xy from a variable.
Checks to see if a point is missing in a grid variable.
Get the bounding box of this axis as a LatLngRect.
Finish the sequence.
Writes a tab to the given string buffer.
Pads the given string to the given width.
Returns a string representation of an integer, padded with zeros if necessary to a specified length.
Returns a string representation of the given long value padded with zeros to the given width.
Formats a byte size as a string.
Prints the given double and its sigfig to System.out.
Prints a double value to standard output.
Returns a string representation of the shape.
Finishes the slice.
Returns the constraint as a string.
Composes two slices.
Maps the ith element of a slice to the given slice.
Dump the contents of a byte buffer.
Returns the earth ellipsoid type for the given name.
Returns the type of the ellipsoid with the specified epsg id.
Decode vlen data.
Extracts a list of URLs from the given URL.
Get the text content of the given URL.
Filters tags from an input stream.
Read a variable into a writable byte channel.
Adds all attributes from the given iterable to the end of this list.
Removes the specified attribute from this element.
Remove the attribute with the given name, ignoring case.
Gets the offsets in time units.
Add an action source listener.
Returns the standard date from the given text.
Returns the standard or iso date for the given text.
Get the origin of this scale unit.
Returns the current date.
Convert a double value to a Date.
Makes a value from the given date.
Makes a standard date string from a double value.
Get grid spacing in km.
Adds the dimensions of the grid to the NetCDF file.
Add a coordinate axis to the NCDF file.
Make a projection based on the type of projection.
Adds a GD variable to the solver.
Add a coordinate system variable to a NetCDF file.
Makes sure that we don't create a new lc.
Makes the geolatte projection of the geospatial record.
Makes a mercator from the latin value.
Set the dx and dy parameters.
Read an inv dataset from an XML file.
Reads the metadata for the given dataset from the given URL.
Returns the level type 1.
Checks if the file is a valid file.
Writes a byte array to the stream.
Set the clearname for this attribute.
Get the name of a coordinate.
Get the name of the coordinate of a particular dimension.
Builds the response as a XML string.
Builds a DAP exception.
Breaks up the levels of a variable.
Makes a z-dimension from a list of values.
This method creates a new variable for the specified dimension.
Make a coordinate axis from a reference variable.
Shave a bit from a float value.
Writes the contents of the given file to the given file.
Wrap a NetCDFDataset.
Opens a file for reading.
Clears all coordinate systems for all variables.
Find the coordinate axis with the specified type.
Find the coordinate axis with the given full name.
Find the coordinate system with the specified name.
Find a coordinate transform by its name.
Checks if the enhancer needs to be enhanced.
Sets the values of the given variable to the given values.
Sets the values of a given variable.
Creates a new array with the specified type and values.
Get the index of this matrix.
Get an existing file.
Returns a list of features that intersect the specified bounding box.
Discretizes a vector.
Adds the given metadata to this metadata.
Adds documentation for the given type and content.
Removes the documentation of the specified type.
Returns the maximum number of bytes that can be read from the given start value.
Returns true if the given NCDF file is mine.
Break up the convention names into a list.
Builds a convention attribute.
Builds the coordinate systems for this dataset.
Finds the coordinate axes in the given dataset.
Find all the coordinate systems in the dataset.
Makes the coordinate systems of the variables in this dataset.
Makes sure all coordinate systems are maximal.
Returns true if the given variable is a coordinate axis for the given axis.
Subset the given dataset.
Set the filter for the top dataset.
Mark a dataset as read.
This method initialises the servlet.
Returns true if a counter with the specified name has the specified value.
Adds a name, symbol and definition.
Compares two rows based on their column numbers.
Compares two booleans.
Pass reserved events to the given node.
Checks if the given date range is valid.
Registers a class with the DAP.
Registers a class with the DSP.
Returns true if the DSP is registered with the specified class.
Unregister a DSP class from the registry.
Returns the forecast time interval size in hours.
Get the forecast time interval offset of a record.
Gets the vert unit.
Alphabetically sorts this tree.
Find a variable with a specific attribute.
Finds a variable in the dataset with the given attribute value.
Finds the name of a variable that has the given attribute value.
Finds a variable with the given attribute name and value.
Finds the first nested structure in a structure.
Returns true if the given dataset has a record structure.
Get a literal value from a key.
Get a feature type from a dataset.
Get the variable name for a given key.
Returns the value of the j-th coordinate.
Connects the given longitude to the given value.
Returns the values of the coordinate array.
Create a new dSection with the specified range.
Finds the index of the closest point in the bounds of the given run to the given target
Returns the name of the column.
Adds an action to this menu.
Returns the match for the given path.
Test program to make sure the projection is visible.
Returns the index of the first occurrence of the specified data in this list, or -1 if
Add a picture to the cache.
Reports the size of the cache.
Stops all the background loading threads.
Stop background loading except for the specified URL.
Make a GET request to the given legal URL.
Create a new HTTP method for the given URL.
Returns a random float of the specified type.
Returns the number of items in the range [0, max).
Reads the data from the file.
Returns the file system provider for the given URI.
Read the station table.
Returns the index of the value associated with the given group.
Removes the data variable with the given short name.
Convert HGT height to meters.
This method is used to read the entire gridset.
Set the number of colors.
Calculates the affine transform for the given screen and bounds.
Converts a URI to an AuthScope.
Finish the computation.
Returns true if this factor is reciprocal to the given factor.
Returns a new inv catalog based on the contents of a directory.
Finds the first index where want is less than or equal to the current index.
Reads the metadata content from the given URL.
Read the content of the metadata element.
Adds the metadata content to the given element.
Validates the metadata content.
Read cat gen configuration element.
Read a dataset source element.
Read a dataset namer element.
Read a dataset filter element.
Read a result service element.
Create the cat gen config XML element.
Create the XML element that represents a dataset source.
Create the dataset namer element.
Create the XML element for the DatasetFilter.
Create the result service XML element.
Checks if a flag is set.
Construct the menu.
Adds parameters to a table.
Makes a parameter from a list of words.
Looks up a parameter by name.
Reads the contents of the stream into a String.
Reads the content of the stream into a byte array.
Replace the template for the specified ensemble.
Set the station information.
Accepts the edit value.
Gets a bitmap from the given file.
Sets the NCDF file to use.
Set the debug flags.
Parses the given name into a NamePieces object.
Returns true if this type is a group type.
Get the NetCDF NetCDF Length dim.
Get the shared dimension of a dimension.
Construct a list of dimensions from a DAP dimension array.
Return true if the given base type is an unsigned type.
Reads data from the DAP server.
Loads an icon from the classpath.
Loads an image from the classpath.
Creates a custom cursor with the specified name.
Reads a fill value from a file.
Reads a fill value from an input stream.
Read an array with a fill value.
Creates an array of primitives of the specified size.
Converts a byte array to a UTF-8 char array.
Converts a char array to a UTF-8 byte array.
Converts a byte array into a char array.
Reads a section from the given section spec.
Create an array structure from a parsed section spec.
Get the string value of a scalar member.
Get the structure of a scalar member.
Get the array of a member.
This function computes the members of a structure.
Adds the dimensions of this group to the given NetCDFFile.
Normalizes a path.
Add an explicit dataset to the cache.
Adds a new dataset scan to the dataset manager.
Finishes the scan.
Makes all the datasets available for reading.
Get the typical dataset.
Make a dataset from the given parameters.
Put resource control.
Add a point to the contour.
Get the bounding box of this polygon.
Get the bounding box of this polygon.
Performs validation on the given string builder.
Returns true if the given dataset matches the pattern.
Add all station point features from a dataset point.
Parses a constraint expression from the request URL.
Evaluates the clauses of this DAG.
Prints the constraint.
Try to fix missing fields in an OCDL file.
Set the shared dimensions for the given variable.
Check if we have a dimension with the wanted name and if so set it as unlimited.
Finds a nested group with the given name.
Reads the content of the xlink.
Returns the standard URI for this catalog.
Set the projection class.
Adds a component to the layout.
Invalidates the layout of the specified container.
Removes the specified component from the layout.
Calculates and returns the minimum layout size for the specified container.
Lays out the specified container.
Returns true if the given coordinate system is a radial coordinate system.
Returns the maximum radial value of the radial axis.
Convert the earth-to-sat coordinates to their SAT coordinates.
Converts a point from satoshis to earth coordinates.
Convert goes to geos.
Convert a scan geometry to the sweep angle axis.
Convert a sweep angle axis to a scan geom.
Sets the runtime coordinates.
Writes the given point obs dataset to the given file.
Rewrite point feature dataset.
Get the array sequence for the member with the given name.
Returns the full name of this object.
Returns a unique ID for this security token.
Get the Access object for the given service type.
Find a dataset by it's name.
Returns the parent catalog.
Get the list of metadata of a certain type.
Finds an inv service by its name.
Returns the list of variables for a given vocabulary.
Finds all the catalog references in a list of datasets.
Escapes a path for use in a URL.
Adds a stagger to the given array.
Interpolates the array by extrapolating its values.
Computes the rho of a point.
Returns the detail information for this rule.
Makes a structure from a part name and a list of dimensions.
Makes a missing variable.
Make a parameter variable.
Add the global attributes.
Returns the size of the variable with the given name.
Get a 1D array of the given type and length.
Looks up a state in the grammar table.
Returns a string describing a syntax error.
Print reduce symbols for a given rule.
Reads a DAP DMR encoded string.
Reads an error.
Reads into an array of bytes.
Reads the header from the input stream.
Converts an ISO 8601 formatted string to a java.util.Date.
Read a table from a URL.
Transfer a group from one dataset to another.
Get the stn file for the given location.
Opens the file with the specified parameters.
Returns the index of the first occurrence of the specified index.
Returns the end index of the subsequence captured at the given index.
Creates the all runtime collections.
Sets the value of the edit text field.
Returns the data type for the specified format.
Longitude Latitude and Longitude Longitudes are in degrees.
Cleans a unit name.
Cleans up the given name.
Checks if the given string is unitless.
Creates an instance of the notes factory.
Returns the variable ID for the specified variable note.
Parse a DAS file.
Finds the DodsV with the given name.
Recursive method to find the data v.
Finds a child by its index.
Gets the parent group.
Returns the dimension with the specified index.
Returns the index of the dimension with the specified name.
Returns the value of the units attribute.
Get the shape as a section.
Returns a slice of this variable.
Sets the enum typedef.
Reads a list of ranges from the input stream.
Reads a scalar string.
Reads an array from the input stream.
Reads an array from the given section.
Writes a CDL definition to a String.
Returns a string representation of this NCFile.
Sets the data type.
Set the dimensions for this shape.
Resets the shape to its initial state.
Set the dimensions for this group.
Resets the dimensions of this group.
Set the dimension at the specified index.
Sets the cached data.
Returns a list of all dimensions.
Set the bounding box of the bounding box of the poi.
Finishes the computation and sorts the grid list.
Returns an iterable containing all the datasets in this dataset.
Returns true if the path ends with one of the synextensions.
Opens the CDMSP with the given netcdf dataset.
Builds the DAP DMR file.
This method builds the sequence types for a given variable.
This method builds a list of dimension references for a given variable.
Returns an enum typedef that matches the given varenum.
This method returns the core dimensions of the specified dimensionset.
Scan bufr file.
Process a bufr message as a dataset.
Handles a POST request.
Get the current affine transform.
Determine if we want to rotate the map area.
Get the map area.
Convert a world to a screen coordinate.
Pan the map by the given amount.
Zoom to the specified location.
Recalculate the size of the image from the bounding box.
Add a listener to the list of listeners.
Removes an object from the list of listeners.
Sends an event to all registered listeners.
Sends an event to all registered listeners excluding the source of the event.
Prints a command to the given writer.
Print variable data with a CancelTask.
Print variable data section.
Prints the given structure data to the given print writer.
Prints an array to the given print writer.
Prints an array to the given print writer.
Writes an NCML file to the given writer.
Read an attribute as a double.
Add a parameter to the coordinate transformation.
Reads an atomvar as an object.
Checks if the level is positive up.
Checks if this unit is compatible with the specified unit.
Create a label for this quantity.
Sets the offset of the next bit.
Convert nb bits to unsigned long.
Convert nb bits to a signed long.
Opens a connection to the server.
Executes the DAS command.
Get the complete CE.
Convert a projection point to a lat lon point.
Get the IDL dataset catalog from an IDL file.
Returns a date range that is compatible with the idv.
Check if the given random access file is valid.
Handles the satellite information.
Handles the sensor information.
Reads the root element from a file.
Remove invalid XML characters from a string.
Unescapes a string using the given escape character.
Escapes a string so that it can be used in a URL.
Unescapes a single character from a URL.
Decodes a backslash-escaped string.
Encodes all must-escape characters in a string.
Add attributes for the global feature type and history to the given NetCDF file.
Swaps a short from a byte array at the specified offset.
Swap two bytes in a byte array at the specified offset.
Swaps a double value from a byte array at a given offset.
Swaps the bits of a float value.
Swaps a double value.
Convert a short to a byte array.
Convert an int value to a byte array.
Convert a long to a byte array.
Return a new vertical transform that is a subset of this one.
Writes the document to a string in XML format.
Makes a cubic spline.
Starts the XML file.
Write the list of features to the output file.
Add levels from a list of records.
Adds the dimensions of the given group to the given NetCDFFile.
Add this group to the given NetCDFFile.
Find a coordinate transform in the given group.
Returns the index of the level1 of the given record.
Stops the timer and prints the exit message.
Returns the file object for the given location.
Returns an existing file in the cache or null if it does not exist.
Shows the contents of the cache.
Cleans the cache from the given directory.
Calculates the bearing between two points.
Calculates the bearing between two points.
The main method.
Finds a point on the Earth's surface with the given latitude, longitude, and distance
Find a point on the default earth.
Find a point on the default earth.
Loads the picture in a thread.
Loads the picture with the specified image and rotation.
Load the image.
Stops the image loading.
Attempt to stop loading the image except the given url.
Get the size of the image.
Set the source buffered image.
Returns the standard URI for this URL.
Transfers all data descriptors from one list to another list.
Counts the number of bits in this table.
Compares two DataDescriptors for equality.
Loads the header.
Read the data from the input stream.
Get the field with the specified name.
Get a field as a double array.
Get a field as a String array.
Get boolean array by field name.
Returns the name of the specified field.
Get the names of all the fields.
Command-line entry point.
Returns a map of attributes.
Sets an attribute.
Removes an attribute.
Gets the group.
Returns the parent of this node.
Replies the escaped short name.
Returns the path from this node to the parent node.
Returns the path from this node to the root group.
Computes the FQN of this DAP node.
This method builds the DAP data structure.
Put a collection of beans into the context.
Get a list from the context.
Returns the value associated with the given key name.
Reads the data from a file.
Prints the variables in the DSP dataset.
Prints a compound instance.
Writes the given element to a string.
Writes the given element to the given file.
Writes an XML element to an output stream.
Writes the given element to the given writer.
Creates an XML element for a dimension.
Make a coordinate transformation from an attribute container.
Returns the value of the specified attribute as an int array.
Create a new BUI unit.
Clones the given unit definition.
Creates a unit database.
Get the singleton SI instance.
Finds the appropriate coord element based on the spacing of the axis.
Finds the index of the midpoint which is closest to target.
Subset values.
Open a feature dataset.
Open a feature dataset.
Annotate a Dataset.
Reads data from a file.
Assembles a URI from a set of parts.
Returns the canonical version of the given string.
Normalizes the given string so that it is syntactically correct.
Finishes the compiling process by setting the xlink href.
Returns the value associated with the given key.
Associates the specified value with the specified key in this map.If the map previously contained a mapping
Get the current date.
Prints a DAP node as XML.
Prints an XML declaration with the specified name and value.
Checks if an attribute is special.
Prints out the dimensions of a variable.
Checks if the given file is a valid area file.
Sets the attributes for the area directory.
Sets the attributes for the navigation block.
Returns the calibrator type for the given calendar name.
Sets the attributes of the calType attribute.
Finds the coordinates in the given dataset and populates the given TableConfig object.
Finds the name of the coordinate axis with the specified type.
Find a coordinate axis of the specified type in the dataset.
Find a coordinate axis of the specified type.
Find the dimension of a given axis type in a dataset.
Finds the best coordinate system for the dataset.
Finds the dependent axis of the given type.
Get the type of a variable.
Reads a marker from the input stream.
Writes a marker to the data output stream.
Starting point for the demo.
Get a String array from a structure member.
Get the parameter list of all the sensors.
Set the list of stations to render.
Sets the currently selected station, and redraws the map.
Redraws the plot.
Reads a rectangle from the stream.
Writes this rectangle to the specified output stream.
Adds the contents of another database to this one.
Add a unit.
Add a symbol to the unit.
Looks up a unit by its id.
Add a unit by its name.
Add a unit to the unit map.
Helper method to add a unique unit to a map.
Adds all installed look and feel to the given menu.
Finds a record based on its position in the file.
Reads an object from a dataset.
Serializes the object to the given output stream.
Construct a copy of this projection.
Open a feature dataset.
Open a feature dataset.
Opens a dataset for reading.
Annotate a dataset.
Add a partition to the partition list.
Makes a GRIB collection from this index.
Get a new instance of this class to match on the dataset name.
Get an instance of this class to match on the dataset path.
Writes a query capability to a file in XML format.
Read a structure from a Ucar.
Set the picture to be displayed.
Sets the image to be displayed on the map.
Zoom to fit.
Override paintComponent in order to paint the component.
Converts a time-series into a time-series int array.
Liefert die Nachricht einzelnen intdtf.
This method converts an int array into a human readable string.
Get the day of the month for the given year andimon.
Converts an IVCord number into a LVCCRD string.
Reverses the values in an integer array starting at the specified index.
Returns the name of the grid packing type.
Gets the data type.
Reads the data from the given input stream.
Externalize the output stream.
Returns the TagEnum for the given short code.
Get the next image.
Returns the number of elements in the array of the given type.
Returns the sum of all elements in the given array.
Set the grid to a given bounding box.
Sets the overlap.
Clear the grid.
Check to see if the rectangle is clear.
Finds the intersection of two rectangles.
Finds intersection of two points.
Finds the closest point in the grid.
Returns the squared Euclidean distance between the given point and the given point.
Get or create a base unit.
Search for a service type by fragment.
Searches the given URL for a service type.
Decode the path extension to a service type.
Check if the location is a DOS service.
Sends a variable to the specified output stream.
Returns the FQN suffix of a FQN.
Returns the prefix of the given FQN.
Locates a file in the filesystem.
Locates a relative path.
Extracts a byte array from a buffer.
Returns the structure path of a variable.
Returns null if path is null or empty.
Joins an array of strings with a separator between them.
Returns true if the path contains a drive letter.
Returns the list of protocols for the given URL.
Converts an index into a list of slices.
Converts an offset in a dap variable into a list of slices.
Checks if a list of slices is contiguous.
Checks if a list of slices contains a single point.
Converts a list of slices to an index.
Reads data from an input stream.
Set the station information.
Reads a configuration from a catalog.
Updates the list of groups.
Finds a variable by its name.
Get the AxisType of a variable.
Returns the statistic type for the given time range indicator.
Get a subset of the longitude axis.
Returns a list of RangeIterators for this point.
Set the default values for properties.
Get the session id from the session context.
Set the maximum number of redirects.
Sets the useSessions setting.
Closes the connection.
Set authentication and proxy.
Adds a session to the session list.
Sets the credentials provider for the given scope.
Validates the contents of this text field against the given URL string.
Create a new index with the specified shape.
Compute the strides for the given shape.
Returns the index section for the given list of ranges.
Reduce index.
Reduces the specified dimension to the specified dimension.
Transposes a two-dimensional array index.
Returns a copy of this index with the specified dimensions permuted.
Gets the index iterator.
Returns the current element in the iteration.
Set the index to the given array.
Set the value of a dimension.
Sets the components of this index to the specified indices.
Returns the name of the time interval.
Make a CalendarDateRange from a Calendar.
Returns a list of file date strings.
Makes a list of parameters from a DMPart.
Get the list of stations from the headers.
Get the list of station key names.
Returns a list of date strings.
Finds the index of a station by its ID.
Returns the file type.
Increases the indent depth by n.
Set the current indent level.
Reads an index from a single file.
Add a scan for a directory.
Returns true if a scan is needed.
Scan first time.
Set the debug flags.
Adds a variable to the document.
Writes the current state of the model to a file.
Validates an XML object.
Returns a string representation of this slice.
Set the original variable.
Reads the contents of this variable into the given section.
Returns true if conversion is needed, false otherwise.
Converts an array structure to an array structure.
Convert member info.
Finds the variable with the given original name.
Returns true if the given variable has data.
Enhance all variables in the dataset.
Returns true if resource control is OK.
Create an empty array sequence from the given sequence.
Makes an array sequence from a sequence of values.
Make a sequence from a part name.
Add vertical coord attribute.
Reads a catalog from an XML file.
Reads an inv catalog from a string.
Reads an inv catalog from a string.
Writes the given catalog to the given output stream.
Get a metadata converter by its key.
Get a dimensionless unit name.
Multiply this unit by another.
Divides this unit by another.
Converts an array of floats to an array of derived units.
Returns true if the given unit is compatible with this one.
Writes a feature to the GeoJSON string.
Writes a point to an XML string.
Writes a line to an XML string.
Write a polygon to an XML string.
Get all the child nodes of the given parent node.
Pass any reserved attributes from the given node to the given DAP node.
Get a string representation of a subset of a variable.
Creates a factory from an array structure.
Set a member's data array.
Create a matrix factory from a structure.
Get a geometry type by its name.
Make a station feature.
This method compiles the given Ceast AST into the DAG.
This method is used to compile a Ceast filter expression.
This method adds a definite node to the cluster.
Create a view for the given index.
Check if this rectangle is contained in the given rectangle.
Extend the bounding box by a point.
Extend the bounding box by a rectangle.
Return the intersection of this bounding box with the clipping box.
Creates a new array consisting of the elements of the first array plus the elements of the second
Returns true if the two arrays have the same number of elements.
Returns true if shape A is conformable to shape B.
Convert an array to another array.
Copies the elements of the given array into the given result array.
Copies all elements from one array to another.
Copies all elements from one array to another.
Get the minimum and maximum values of an array.
Set the given double value to all elements in the given array.
Make a builder for the catalog.
Factory method to create a projection.
Unescapes a DAP identifier.
URL-decodes a string.
Unescapes the given URL.
Escape a string for use in a backslash.
Unescape a backslash escaped string.
Splits an escaped name into a list of tokens.
Returns the index within the escaped name of the first occurrence of the specified character.
Convert backslash to dap notation.
Reads an atomic scalar value.
Get the path of a cursor.
Returns the value of a UI property.
Returns the class of the given component.
Compiles the dataset and databuffer.
This method compiles a structure array.
This method compiles a structure.
This method compiles a sequence array.
Compiles a sequence.
Read a Little Endian int on 8 bytes.
Returns the field with the specified name.
Returns the value of the specified field.
Sets the value of the specified field.
Adds a field to the table.
Adds a check box field to this record.
Adds a date field to this record.
Adds a double field to this record.
Adds a integer field to this record.
Adds a password field to this record.
Adds a text field to this widget.
Add a text field to this widget.
Adds a text area field to this table.
Adds a heading to the layout.
Adds a component to the layout.
Adds an empty row to this row.
Finds the first frame that is visible.
Returns the spacing of the cell.
Returns an array of all factors.
Computes the multiplication of this dimension and another.
Raise each factor by a power.
Checks if this dimension is reciprocal of the specified dimension.
Returns true if all factors in this factor set are dimensionless.
Creates a new Grib1ParamTables instance.
Creates a new Grib1ParamTables instance.
Adds a parameter table lookup.
Adds a parameter table to the lookup table.
Raises this unit to the given power.
Convert the input array to a derived unit array.
Initialize the unit table.
Make a vertical variable.
Peeks a name from the given file.
Reads a short from the byte array at the given offset.
Grabs an int from a byte array.
Reads a float from a byte array.
Reads a double from the byte array at the given offset.
Add an AA to the database.
Add a symbol to the unit.
Create a converter from one unit to another.
Sets the structure data.
Sets the feature data.
Draws this sprite on the specified graphics context, using the specified affine transform.
Get the shapes.
Reads data from an input stream and processes it.
Reads up to Want bytes from is into dest.
Reads more bytes from the input stream.
Reads a byte array from the stream.
Skips the given number of bytes.
Add the dimensions of this group to the NetCDF file.
Returns the index of the level with the specified value.
Check if the file is a valid file.
Read the header of the nc2 file.
Reads the data from the file.
Read one row of data.
Creates a new dataset from the given dataset.
Create a new variable.
Set the map area.
Set the map area.
Set the center of the map area.
Set the projection impl.
Adds the actions to the given menu.
Redraws the canvas after a delay.
Set the screen size to be the same as b.
Sets the value of the checkbox selected.
Returns the double value of the variable at the specified offset.
Reads a double value from the buffer.
Reads an object from the input stream.
Returns the name of the Gini entid.
Reads a scaled integer from the buffer.
Find parameter with given name ignoring case.
Swaps the byte order of the underlying byte array.
Get the number of times and start time index of a given file.
Returns the file name for the specified epoch and time index.
Get the list of file names.
Get the path to the DDF file.
Get the full path of a file.
Add a chsub.
Convert a reference date to a time coordintv value.
Read a WMO file from a random access file.
Returns a byte array containing the uncompilated data.
Decode a 12n13n14 pcode.
This code is copied from the original paper to the original paper.
Check the header of the message.
Generates the code for a 5 bit PDB file.
Generate code for a 128-bit field.
Convert a short array into an array of levels.
Get the dualpol levels for a given array of shorts.
Add a variable to the netcdf file.
Add a parameter to the netcdf file.
Uncompress the compressed form of a byte buffer.
Returns the unsigned short representation of the given byte array.
Converts a byte array into an unsigned short array.
convert byte array to object.
Sends a DAP request to the server.
Gets the request state.
Sends an error to the client.
Snaps the anchor point to the given point.
Stretch the component to the given point.
Parses the given text into a date-only format.
Replace the data variables in the given structure with the corresponding data variables in the given structure.
Ensures that the given memory array size is okay.
Reads a two byte int from a file.
Reads an unsigned short from the specified file.
Reads a four byte int from a file.
Reads a 32 bit unsigned integer from a file.
Reads a 32 bit unsigned integer from a file.
Reads a 4 byte float from a file.
Converting four int values to a float.
Reads 8 bytes from a file.
Count the number of bits in a byte array.
Construct a copy of this projection.
Return the Well Known Text representation of this location.
Escapes a string for use in an HTML entity.
Unescapes a backslash escaped string.
Splits a string by a backslash.
Creates a FMRC inv.
Get the special service name from the path.
Returns the number of projected components in this map.
Gets the reference time.
Creates a new instance of the class with the same shape, shape, and section.
Main method to run the indexer.
Reads a single record from the index.
Checks if the given NCDF File is mine.
Make a UTM transform from a netcdf dataset.
Re-acquires the area file.
Checks if this date is before the specified date.
Checks if this date is before the specified date.
Checks if this date is after the specified date.
Set the value at the given index in the list of values.
Adds a coordinate system to the list of coordinate systems for this variable.
Sets the units string.
Returns the value of the units attribute.
Initializes this object with the given read mode and preferences.
Reads a catalog from the file system.
Process a list of datasets.
Read all the cats in a directory.
Return true if lon is between lon beg and lon end.
Convert lat to string.
Convert a longitude to its string representation.
Compares this quantity to another.
Returns the currently selected dataset.
Set the currently selected dataset.
Makes a tree path from the given node.
Open all the catalogs.
Set the catalog from the given location.
Sets the name of the catalog.
Finds the alias of a variable.
Writes a variable-length integer.
Writes a string to the output.
Reads characters into a char array.
Set the debug flags.
Add a member.
Hides a member.
Returns a list of the names of all members.
Finds a member by its name.
Reads a bitmap from the given file.
Restore the state of the table.
Returns an iterator over the rows that are selected.
Returns the model index for this table.
Get the array data for a member.
Get the scalar value of a member.
Get a double array from a structure member.
Get the scalar value of a member.
Get a member as a float array.
Get the byte value of a scalar member.
Get a byte array from a member.
Get the scalar value of a member.
Get the array as an int array.
Get a scalar value as a short.
Get the array as a short.
Get the scalar value of a member.
Get a long array from a member.
Get the char value of a scalar member.
Get a char array from a member.
Do one dataset.
Creates a copy of this dataset.
Transfers metadata from one dataset to another.
Gets the metadata of the dataset that inherits from this dataset.
Adds a record to the list of records.
Prints a message indicating that the data set is missing.
Prints a summary of the records in the tracker.
Finds a record for a given ensemble, time and level.
Dumps the current state of the grid.
Makes a long name for the parameter.
Subset by intervals.
Compare two byte arrays for memequal.
Parses a DAP dataset from a DAP XML document.
Processes the attributes of the given dataset.
Add coordinates to the coordinate set.
Set the Gaussian latitudes.
Parses a variable selector.
Returns a string representation of a range specification for a given variable.
Checks to see if a rectangle is inside a bounding box.
Closes the reader and releases all resources.
Executes the request and returns the response code.
Identify the encoding station.
Match axis type and dimension.
Sets the input stream for this block.
Reads a character from the stream.
Starts the progress monitor.
Parses a string into a URI.
Returns a new URI with the given URIs excluded.
Nullify the given string.
Joins two URLs into a canonical path.
Returns true if the last modified time of the dataset is greater than the configured limit.
Copy information from another collection to this one.
Returns a sorted list of all filenames.
Sets the index file.
Gets the index file path in the cache.
Get the total number of counters in this group.
Adds a global attribute to this element.
Adds a global attribute with the specified name and values.
Deletes the global attribute with the specified name.
Renames a global attribute.
Adds a variable attribute to the end of the list.
Adds a variable attribute to the element.
Deletes an attribute from a variable.
Rename a variable attribute.
Makes the file a subtype of the current file type.
Writes the headers and bounding boxes to the output file.
Write the members of the geometry to a GML file.
Write the station obs dataset in XML format.
Returns the XML representation of the station collection.
Writes a DSR string to the stream.
Sends a DXR message.
Writes an error response.
Sends the DXR signal and closes the connection.
Flushes the stream.
Returns true if the specified value is contained in the array.
Returns the ith element of the array.
Shift this range by the given origin.
Reads the data from the file.
Reads data from a layout.
Returns a subset of this vector.
Set the values for this projection.
Make a double array out of an array of ints.
Get the dataset boundaries.
Check if requested variables are contained in the coverage collection.
Get a dataset source structure by its name.
This method is used to get the location of a resource.
Makes the vertical dimensions for the given list of vert coord.
Reads the PIB file.
Finishes the canonicalize process.
Transfers the metadata of a parent dataset to this dataset.
Transfers the metadata from one dataset to this one.
Transfers inherited metadata from one dataset to another.
Sets the contributors.
Adds a dataset to this model at the specified index.
Removes a dataset from this catalog.
Replaces a dataset in this catalog with another.
Add an invService to this service.
Remove a service from the registry.
The list of local services.
Remove a metadata object from the local dataset.
Get the value of a user property.
Performs validation on the given string builder.
Returns a list of descriptor strings.
Constructs the server path from the given HSREQ.
Get the capabilities of a feature.
Get a single feature.
Check parameters for error.
Handles a servlet request.
Get the capabilities for the given URL.
Returns the length of the file in bytes.
Returns the last modified date of the object.
Return a file to the client.
Writes the contents of a String to the response.
Sets the response content length.
Get the request URI.
Get the request path.
Returns the request path for the given request.
Returns the value of the parameter with the given name, ignoring case.
Save the current state of the split.
Writes a directory to the response.
Create a nested counter.
Calculate the number of replication bits.
Append a line to the buffer.
Create a document that contains a list of station collections.
Get the capabilities document.
Get the record at the specified coordinates.
Returns the coordinate at the specified index in the coordinate array.
Adds an item to the list box.
Handles the given exception.
Moves one step from the current position to the given position.
Get the NCEP gen process map.
Checks if the given endpoint is a CDM-RF endpoint.
Sets the value of this flag.
Creates a new GDS5 grid with the specified center and grid number.
Copy bytes from an InputStream to an OutputStream.
Reads the contents of an InputStream and returns it as a String.
Reads the contents of an InputStream into a byte array.
Writes the contents of a string to an output stream.
Copy the contents of a file into an output stream.
Copy raf b to out.
Copies a directory tree from one location to another.
Reads the contents of a file into a byte array.
Reads the contents of a file into a String.
Writes the given contents to the given file.
Writes a string to a file.
Writes the contents of an InputStream to a file.
This method is called when an exception occurs during parsing.
Invoked when a DAP 2 exception handler is requested.
Called when a bad url is received.
Gets the catalog.
Prints the catalog to the given print writer.
Prints the status of the server.
Print bad url.
Gets the reference date.
Reads the variable length data into an array.
Read an NCML document from a string.
Opens a new NCML Collection reader for reading.
Returns x if allowed by the allow chars and replace char.
Removes all non-ascii bytes from a byte array.
Filters out characters that are not letters or digits.
Filter 7 bit characters from a string.
Makes sure that the given string is a valid CDM object name.
Returns how many times string s1 matches string s2.
Pads the specified string to the left with the specified string until the desired length is reached.
Pads the string to the right.
Remove a substring from a string.
Removes a character from a string.
Removes a character from the end of a string.
Collapses all whitespaces in a string.
Replaces all occurrences of out in s in s.
Replaces all occurrences of the given char array with the given replacement string.
Replaces all occurrences of a pattern in a string.
Replaces all occurrences of match in original with subst.
Substitutes a string with another string.
Removes all occurrences of a character from a string builder.
Replaces all occurrences of a character in a string with another character.
Replaces all occurrences of out in sb with in.
Replaces all occurrences of the specified substring in the specified string with the specified string.
Removes all occurrences of bad characters from s.
Process a collection update event.
Check the state and update the collection if necessary.
Update the collection.
Returns the inv datasets.
Releases resources used by this class.
Create a deep copy of a structure data structure.
Copy an array structure to a byte array.
Copy a structure to a byte buffer.
Copy a structure data structure to a byte array.
Copy a structure to a byte array.
Returns the forecast time interval size in hours.
Create a new section with the specified range.
Returns a table analyzer for the given feature type and dataset.
Analyze the given feature type.
Synchronizes the grid reader with the data in the database.
Get the Gaussian Latitudes for a given type.
Swaps a long from the given byte array with the given offset.
Swaps the low four bytes of a byte array at the specified offset.
Swaps the specified char from the specified byte array at the specified offset.
Finds the coordinate axes of the given dataset.
Add a parameter to the transformation.
Returns the common parent of this group and the specified group.
Returns true if this group is the parent of the other group.
Sets the parent group.
Adds a dimension to this group.
Adds a dimension to this group only if it does not already exist.
Adds the specified group to this group.
Adds an enumeration to this group.
Adds a variable to this scope.
Removes a dimension by its short name.
Make a group from an absolute path.
Convert DDS-DSD attribute to DDS-DSD attribute.
Prints the DAS object to the given print writer.
Returns the variable with the given name.
Writes a grid to the file.
Replace missing values in an array.
Replace missing values in an array with a scaling factor.
Shift the longitude array to the start of a geometric object.
Write the grid to the current file.
Writes the message to the response.
Make the top index file from the feature collection configuration.
Reads the collection type from a file.
Update the GRIB collection based on the configuration.
Update leaf collection.
Open a GRIB collection from a data file.
Open a GRIB collection from a data file.
Returns true if the given URL matches the given URL pattern.
Add a triple to the triple store.
Looks up a key in the DataStore.
This method will set the known triplestore to true.
Inserts a triple into the triplestore.
Returns the local datasets.
Find a dataset by it's name.
Set the project to use.
Get the list of shapes that are available for rendering.
Create a list of shapes from a list of features.
Compares this object with the specified object for order.
Starts a progress monitor task.
Checks if the collection index file needs to be updated.
This method normalizes the input data into the output data.
Set the object at the specified index.
Get the structure data at the specified index.
Copy all the structures of the given structure to the given result.
Get the scalar value of a member.
Convert a scalar record to a double.
Convert a scalar record to an integer.
Get a scalar value from a member.
Get the byte value of a scalar field.
Get a scalar short from a member.
Get a scalar char from a member.
Get the string value of a scalar record.
Get the array structure for a member.
Get an ArraySequence from a member.
GetArrayObject Method.
Utility method for min and max.
Evaluates a CeastExpression.
Returns a string representation of this constraint.
Checks to see if a node references another node.
Evaluates the expression and returns true if the value matches the filter.
Counts the number of expansions in the structure.
Computes the enums of the variables.
Compute the groups.
Compiles the given SSEC file into a CE object.
Checks if the given file is a valid file.
Makes the actions system.
Returns the byte order for the specified KMachn value.
Sets the byte order.
Finds a key by its name.
Finds the file header with the specified name.
Returns the file's header as a float array.
Prints the parts of the path.
Get the data pointer.
Returns the distance from the specified word to the specified target word.
Reads a string from the stream.
Unpacks a DM part into a DM part.
Returns a string representation of the specified bit value.
Write a NetCDF file to a writable byte channel.
Parse a base element.
Parses a grid.
Parse aliases.
Decodes a list of data descriptors into a list of data descriptors.
Replicates a list of data descriptors.
Get the filename of the dataset.
Get the feature type.
Returns true if the absolute difference between the two float values is less than or equal to the given
Returns true if this node references the given node.
Parse a unit specification.
Returns true if the variable is tiled.
Makes the best coordinate from the time in the current time to the time in the current time
Convert lat lon rect to a projection rect array.
Show the time series for all the logs.
Convert a list of attributes to a map.
Returns the array of values.
Get the value at the specified index as a number.
Writes the CDL for this field.
Set the string value.
Sets the values of the array.
Scans the input stream.
Generates an inv catalog for the given proxy dataset handler.
Schedules a write of the given message to be written to the queue.
Sets the datatype of the TheddsDataset.
Jumps to the TRUEDDS datatype of the given access object.
Prepares the JVM to run in the GUI.
Create the tools frame.
Convert a list of coordinate axes into a human-readable name.
Returns the lesser rank of two coordinate axes.
Find the axis with the specified type.
Get the projection of this coordinate transformation.
Returns true if this shape should be rendered as a XY projection.
Check if this coordinate is a regular coordinate.
Returns true if subset is a subset of set.
Returns true if this map contains all of the coordinate axes in the given list.
Check if the coordinate axes contains the given axis name.
Returns true if the list of dimensions contains at least one dimension.
Returns true if this map contains all of the axis types in the given list.
Check if the coordinate axes contains the wanted axis type.
Creates a copy of this DAPNode.
Returns the currently selected bean.
Returns a list of all selected beans.
Returns a list of the selected cells.
Set the bean to be selected in the table.
Restore the state of the table.
Creates a new UnknownUnit with the given name.
Closes the stream.
Returns true if the given variable is an extra variable.
Returns true if the given variable is a coordinate.
Finds the coordinate axis for the given table.
Adds the data variables for the given table to the given list.
Adds the parent joins to the cursor.
Create a station feature from a data structure.
Creates a DAP node map.
Returns a new SimpleUnitFactory with the given name.
Creates a new SimpleUnitFactory with the given unit name and exceptions.
Checks if the two strings are compatible with exceptions.
Is the given ucar.Units.Unit a date reference unit?.
Checks if the given string is a valid time unit.
Returns the conversion factor between the input and output units.
Convert the given value to the given unit.
Return true if this unit is an unknown unit.
Returns the value of this offset.
Creates a new clause for a relational operation.
Creates a new boolean function clause.
Creates a new BET clause with the given function name and children.
Convert an array to a gray scale image.
Crawls an inv catalog.
Crawls a dataset.
Crawl direct datasets.
Gets the file or cache.
Get an existing file or cache.
Enables or disables debug leaks.
Get a list of all files in the system.
Closes the cache.
Repositions the stream to the given position.
Flushes the buffer to the file.
Reads a byte from the input stream.
Reads an array of shorts.
Reads an int from the input stream, unbuffered.
Reads an array of ints.
Reads an array of longs.
Read an array of floats.
Read an array of doubles.
Reads a string from the stream.
Reads a string from the stream.
Writes an array of booleans to the stream.
Writes an array of shorts to the stream.
Writes an array of characters.
Writes an array of ints.
Writes an array of longs to the stream.
Writes an array of floats to the stream.
Write an array of doubles.
Writes a string to the output.
Writes a byte array to the output stream.
Search forward in the file.
Appends the query to the StringBuilder.
Factory method to create a new IndexManager instance.
Finds the index file.
Checks if the index is a leaf.
Constructs the children of this directory.
Scans the given directory for children.
Reads a list of files from an index.
Returns a list of gridsets in this dataset.
Acquire a cacheable file.
Remove a file from the cache.
Ejects an object from the cache.
Releases a cacheable file.
Converting four bytes to a four-byte integer.
Update the given element in the cache.
Clears the cache.
Make a vertical transform for the given dataset.
Returns true if the axis is a global longitude.
Is this a vertical or horizontal coordinate system?.
Find the x and y coordinates.
Find the x-coordinates in the coordinate system.
Find the x-coordinates of a point.
Find the x-coordinates of a point.
Returns the position of the current item.
Get the item that corresponds to the specified pixel.
Iterate over the collection directory, calling the visitor for each file.
Get the contents of the remote files.
Get the name of the subcenter.
Parses a string representation of a unit into a field.
Returns a cached CalendarPeriod instance for the given value and field.
Parses a string representation of a period.
Subtracts the given start date from the end date.
Gets the conversion factor.
Returns the value of this period in milliseconds.
Get the offset between two dates.
Synchronizes the index with the data in the file.
Initializes the grid parameter table.
Puts the data root extension into the map.
Find longest path match.
Find the data root that matches the specified request path.
Convert a DataRootExt to a DataRoot.
Returns the date range for the given calendar.
Reindex a list of coordinates.
Create a new NetcdfFileWriter with the specified version, location and chunker.
Add a group to the NCFile.
Add an EnumTypedef to a Group.
Delete a group attribute.
Rename a group attribute.
Add a new record structure to the file.
Aborts the SPI stream.
Writes the given object's properties to the given print writer.
Extracts the metadata from the given dataset.
Divide this unit into another.
Convert the given amount to a derived unit.
Convert the given amount to the derived unit.
Convert a nested variable.
Convert a top variable.
Convert a VData array to an array.
Close all open databases.
Opens the database for writing.
Convert an int value to a period.
Ensures that the internal array has at least the given capacity.
Returns the element at the specified index in the array.
Creates a new catalog for the given directory.
Create a proxy catalog for the given path.
Get the type of coordinate.
Creates a new GRIB2PDS factory to create a GRIB2PDS
Calculates the time from the input stream.
Apply a scaling factor to a value.
Parses a local concept from a file.
Adds a local concept from an input stream.
Cleans a line of text.
Stores a concept.
Writes the local concepts to a file in GRIB1 format.
Write the lookup table file.
Shows the local concepts.
Entry point to the ECMWF LocalConcepts test.
Get a dataset source type by its name.
Expand the dataset.
Expands this dataset to include all the items in the catalog.
Name all the datasets in the given dataset container.
Name the dataset list.
Name the dataset tree.
Load a picture from an image url.
Stops the loading of the image except for the URL.
This method is called when the status of a source is changed.
Notify all the status listeners that the source picture has been loaded.
Creates a new scaled picture in a thread.
Get the size of the scaled image.
Get the string representation of the size of the scaled image.
Returns a list of concatenated parts.
Makes the header for a Gpak station.
Returns a list of types that can be used for snckua.
Checks if the given string is a valid group.
Set the root directory.
Create the root directory.
Gets the cache file for the given location.
Deletes all files in the cache that are older than the given cutoff date.
Cleans up the cache.
Is this a bufr table?.
Factory method to create a coordinate axis from a netcdf dataset and a dataset.
Makes a copy of this axis without storing it in the cache.
Returns true if this is a numeric data type.
Appends the information for this axis to the given formatter.
Get calendar from attribute.
Sets the list of rows.
Returns the currently selected row.
Increments or decrements the currently selected row.
Returns the model index for this table.
Set the selected index of the slider.
Sorts the array in ascending order using a quicksort.
Swaps the elements of a string array at the specified positions.
Get an existing file or null if it does not exist.
Rotates a longitude array.
Creates an XML object from a file.
Creates an XML document from the given input streams.
Creates an XML object from a resource.
Returns the standard filename for the given app name and store name.
Saves the current state of the preferences file.
Saves this exception message to the specified output stream.
Writes an atomic variable.
Write a structure to the given serial writer.
Writes a single structure.
Writes a single sequence.
Writes a DataCursor record.
Check if the file is a valid file.
Gets the value of the WMO_ID constant.
Reads the nth row from the stream.
Returns the data at the specified index.
Reads the data for the 0 bit GRIB data type.
Reads the data for the first 4 bits of the GRIB file.
Write a ColumnFamily file with a date range.
Make an estimate of the size of a grid file.
This method is used to create a grid file.
Set the stations.
Set the currently selected station.
Pick a station from this geolocation.
Pick the closest station to the given point.
Get the selected station.
Returns the name of the projection for the specified type.
Get a list of stations within a bounding box.
Get a station by name.
Get a data iterator for the given station.
Get a date data iterator.
Reads data from a file.
Computes the dot product of this vector with v.
Returns the Euclidean norm of this vector.
Normalize each element of this vector.
Set the services from the given datasetbuilders.
Returns the parameter with the specified id.
Returns the parameter with the specified id.
Add a new name with the given value.
Add a symbol and its value.
Returns the first prefix in the given set that starts with the given string.
Return true if the email is ok.
Returns the value of the specified parameter.
Calculates and returns the CRC32 of the raw data.
Returns true if the packet is thin.
Returns the index of the field with the specified name.
Returns the time type name for the given time range indicator.
Gets the time coord.
Sets the next polygon.
Sets the previous polygon.
Finds a property by it's name.
Set the current projection.
Subset the coverage data from time.
Register a class as an IO.
Registers an IOSP implementation.
Checks if an IOSP provider is already registered.
Deregisters an IOSP provider.
Check if a file can be opened.
Create a new NetCDFFile from a byte array.
Open a NetCDFFile from a byte array.
Opens a file in memory.
Opens a file for reading in memory.
Find the global attribute with the given name ignoring case.
Converts this NCML file to a NCML file.
Writes the CDL to the given output stream.
Writes the CDL to the specified print writer.
Writes a CDL definition to the given formatter.
Add an attribute to a group.
Adds an attribute to a group.
Adds the specified group to the specified parent group.
Adds a dimension to a group.
Removes the specified dimension from the specified group.
Adds a variable to the specified group.
Adds a variable to a group.
Adds a string variable to a group.
Removes the variable with the given name from the given group.
Sends an IOSP message to the SPI.
Sends a message to the SPI to add a new record structure.
Finishes the transformation.
Reads a section.
Reads a value from the given section and writes it to the given writable byte channel.
Read a list of arrays.
Reads an array from a variable section.
Returns the full name of the given node.
Makes a full path name from the given string.
Returns true if the file should be included.
Returns true if the file should be excluded.
Applies the AND filters to the given file.
Appends a value to the end of the attribute list.
Dispatch check value.
Force the value to be of the given type.
Check byte.
Check if the string is a valid short.
Checks if a string is a valid integer.
Checks if the given string is a valid U.S.
Checks if a string is a valid float.
Checks if a string is a valid double.
Returns the data type of the attribute.
Returns true if the given dataset is viewable.
Checks if the given string is a valid boolean string.
Checks if the given string is a valid alphanumeric string.
Returns true if the given string is a valid alphanumeric string constrained set.
Attempt to descend only from the given path.
Converts a unicode code point to a percent-hex encoded string.
Returns the value of the parameter with the specified key.
Compare two grid def records.
Process data from the input stream.
Process the input stream.
Removes leading and trailing quotes from a string.
Marks all variables in the given stack as stacked variables.
Writes the NCML file at the given location.
Get value from thredds config.
Writes the CDL to a String.
Creates a station helper.
Validates the input.
Returns the azimuth of the message.
Gets the elevation of the message.
Get the latitudes of all the rays.
Get the longitudes of all rays.
Get the altitudes of all the rays.
Get the azimuth of each ray in the system.
Get the elevations of the rays.
Selects a subset of the variables with the given names.
Selects the structure with the given variable name.
Adds a variable as a member of this structure.
Sets the list of member variables.
Sets the parent group of this variable.
Calculates the total number of elements in this vector.
Read a structure from the input stream.
Read an array structure from the file.
Get the name of a data category.
Returns the name of the class.
Adds a parameter to the list of parameters.
Returns the header of the file.
Convert lat lon rect to a projection rect.
Returns the version of the specified has conv.
Get the name of the Z-axis that is positive.
Set the color scale parameters.
Renders a plan view to the given graphics context.
Is this group a direct child of another?.
Returns the type of the message with the given name.
Installs the specified alignment in all columns of the given table.
Set the API key and secret.
Creates a label with the specified value.
Create a label from a list of lines.
Creates a label with the specified value.
Connect to a socket.
Lists the IP types in the Cloud SQL.
Opens a connection to the MySQL server.
Removes the given logger from the set of loggers.
Compiles the given source code into a class with the given name.
Adds a source for the given class name.
Read the graphic control extension.
Returns the next frame in the GIF.
Replies the property for the selectable persons.
Initializes the list change listener.
Get a person by it's id.
Add a validation message for a validator.
Set the person id.
Create a view model.
Loads the countries from the iso3166 resource.
Creates a new java view step.
Creates a new fxml view step.
Clears the given map by invoking the given consumer for all observables.
Create index events.
Attempts to access the given member.
Loads a view from a fxml file.
Query for a style row.
Reads a pixel value from a byte array.
Get the pixel values from a byte array.
Validate the image type.
Create a PNG image with the given tile width and height.
Set the tile data from the given bitmap.
Executes a query that returns a cursor.
Wraps a query.
Executes the query and returns the result.
Executes the given query and returns the result.
Handles a cursor.
Get the feature row for the given geometry index.
Register a table with the cursor wrapper.
Get the tile row for the specified tile coordinate and zoom.
Get the coverage data for the tile matrix set.
Get the coverage data for the tile table.
Get the coverage data for the tile table.
Get the coverage data tile results.
Zoom in or out of the coverage data tile matrix.
Get the coverage data tile results for the requested tile matrix zoomed in.
Get the coverage data tile results for the requested tile matrix zoomed out.
Get the tile matrix from the coverage request.
Get the value of the tile at the specified location.
Set the icon row for a geometry type.
Get the icon row for the given geometry type.
Opens or gets the bindings database.
Decodes a byte array into a bitmap.
Convert a bitmap to a byte array.
Create the table with the provided metadata.
Delete the table metadata for the table.
Get or create the table metadata.
Get the id of the GeoPackage.
Create a table metadata object from a cursor.
Create the extension.
Get the feature row from the cursor.
Executes a raw query against the user's database.
Query for custom cursors within the bounding box projected into a projection.
Query for objects within the envelope.
Returns the number of vertices within the envelope.
Query for rows within the specified bounds.
Builds the where part of the query.
Query for features within the bounding box.
Query for feature count within the bounding box projected into the provided projection.
Query for features within the envelope.
Query for feature ids within the specified bounds.
Counts the number of features within the specified bounds.
Set the data from a bitmap.
Set the data from a bitmap.
Sets the bitmap compression configuration.
Get the number of tiles in the map.
Adjust the bounds of the bounding box based on the zoom level.
Adjusts the bounds of the Google Maps API.
Adjust the bounding box of the GeoPackage to match the zoom level.
Adjust the bounding box for the GeoPackage.
Get the bounding box for the tile matrix and tile grid at the zoom level.
Get the tile grid for the specified zoom level.
Query for a tile row.
Query for tiles descending by zoom level.
Get the closest zoom level to the specified length.
Get the approximate zoom level for the given length.
Query for the tile grid for the zoom level.
Delete a tile from the database.
Count the tiles at the zoom level.
Returns true if this is a Google Tiles feature.
Get the pixel value from the image bytes.
Get the pixel values of a TIFF image.
Validate the image type.
Create a TIFF image for the given tile width and height.
Set the value of a pixel in an image.
Get or open the GeoPackage with the given name.
Get the current row from the table.
Moves to the next invalid location.
Query by base feature id list.
Delete a style mapping by its base id and geometry type.
Get the rectangle of the bounding box.
Get a rounded rectangle from the bounding box.
Delete missing databases.
Create and close the GeoPackage database.
Check if the database is valid.
Validates a SQLite database and closes it on error.
Validates the given database and closes it.
Validates a SQLite database.
Validate the database header.
Check if the SQLite database header is valid.
Add the internal databases.
Adds the external databases to the list of databases.
Import the GeoPackage into the database.
Get the GeoPackage Metadata for the database.
Get the GeoPackageMetadata at the external path.
Create a new row in the table with the provided metadata.
Populate a Geometry Metadata object with the values from the Geometry Envelope.
Delete the Geometry Metadata for the provided GeoPackage ID.
Create or update the geometry with the given metadata.
Update the geometry metadata in the database.
Get the count for the table in the GeoPackage bounding box.
Create a geometry metadata object from a cursor.
Update the contents of this table.
Draw a tile with the given text.
Get a list of simple attributes rows for the given ids.
Checks if the cursor should be closed and if so, closes it.
Get the mapping DAO for the user mapping table.
Get a simple attributes DAO for the table.
Returns the list of mappings for the given base.
Gets the mappings for the given related id.
Checks if a mapping exists for a given base id and related id.
Counts the number of rows in a cursor.
Register a custom cursor wrapper for this table.
Read the User Custom DAO for the table.
Get the tile for the bounding box.
Draw a single tile.
Reproject a tile to the requested projection.
Retrieves the tile results for the requested tile matrix.
Calculates the width and height of the line and polygon paints that will be used to draw
Sets the density of the gauge.
Set the paint to use for the line.
Set the polygon paint.
Draw the tile as a byte array.
Draw a tile at x,y, zoom.
Draw tile query index bitmap.
Query for the number of features in the specified zoom level.
Query for the number of features in the bounding box.
Query for features in the specified zoom level.
Queries for features within the bounding box.
Draw the tile query all bitmap.
Simplifies a list of points.
Get the paint for a point feature style.
Get the paint to use for a line.
Get the polygon paint for the feature style.
Get the paint to use for the polygon fill paint.
Get the style paint for a feature style.
Get the style paint.
Get the paint for a particular style row.
Get the paint for the style and type.
Puts a bitmap to the cache.
Wrap a ContentValues object in a SQL Quote.
Create a bitmap from the layers.
Recycles the layered bitmaps.
Get the bitmap for the given layer.
Get the canvas for the given layer.
Create a bitmap and a canvas for the specified layer.
Get the style mapping DAO for the feature table.
Get the style DAO.
Get the icon DAO.
Get the feature styles for the feature table.
Get the table styles for the feature table.
Get the style for the feature table.
Get the icons for the feature table.
Get the icon row for the feature table.
Get the feature styles for a feature row.
Get the feature styles for the feature table and feature id.
Get the styles for a feature row.
Get the icons for a feature row.
Get the styles for the feature id.
Get the icons for the feature id.
Set the feature styles for a feature table.
Set the table styles for the feature table.
Set the table icons for the feature table.
Set the feature styles for a feature row.
Set the feature styles for the feature id.
Set the styles for a feature row.
Set the styles for a feature.
Set the style for the feature row.
Set a default style for a feature row.
Set the default style for the feature table and feature id.
Set the icons for a feature row.
Set the icons for the feature id.
Set the icon for a feature row.
Set the default icon for a feature row.
Set the default icon for the feature table.
Gets the style id or creates it if it does not exist.
Get or insert the icon.
Insert a style mapping row.
Delete the table style for the feature table.
Delete the table icon mapping for the feature table.
Delete the style mapping for the feature table.
Delete the style mapping for the feature table.
Delete the style mapping for the feature id and geometry type.
Get the ids of all table style mappings for the feature table.
Get all table icon ids.
Get the ids of all style mappings for the feature table.
Get the ids of all icon mappings for the feature table.
Get the image bytes.
Flush output stream.
Get the pixel at the location.
Read the pixels from the image file.
Draw the feature row.
Draw the path on the canvas.
Draw the polygon path.
Add a linestring to the bounding box.
Add a polygon to the bounding box.
Get the cache for the given table name.
Remove a feature row.
Clears all caches and resizes them to the specified size.
Get the cached table styles.
Get the cached table icons.
Get the table DAO for the feature table.
Set the width of the column.
Set the height of the grid.
Get the derived dimensions for this bitmap.
Calculates the tile density based on the given density and tile width and height.
Read blob value.
Read a user defined custom table.
Gets the color.
Validate the color.
Create a color from hex color and opacity.
Get the GeoPackageManager.
Set the progress for this feature table indexer and tree indexer.
Get the highest index of the feature types in the list.
Index the feature row with the specified types.
Delete the index for the given feature index types.
Delete the index for the feature row and feature types.
Delete the index for the given types for the given geomId.
Delete the feature index for the feature id.
Return true if this query should be indexed.
Get the list of indexed types.
Query for feature index results.
Returns the number of features in the index.
Get the bounding box of the feature table.
Query for feature index results.
Get the index type.
Gets the internal file.
Get the path to an internal file.
Get the geometry type.
Sets the name of the geometry type.
Checks if the URL has a bounding box.
Replace the x,y and z values in the URL.
Checks if the given URL has a XY file.
Replace the bounding box of the tile url with the projected bounding box of the tile.
Replace the min and max latitudes and longitude values in the URL with the values in the bounding
Get the Geometry data.
Index the feature row.
Update the last indexed time for the feature table.
Deletes the index.
Delete the index for the given geometry id.
Returns true if the last modified date of this feature is the same as the last modified date of
Query the Geomajas cursor.
Query for geometries within the bounding box.
Get the count of geometries within the bounding box.
Query for features within the geometry envelope.
Return the count of geometries within the geometry envelope.
Query for features within the bounding box projected into the provided projection.
Get the count of features within the bounding box projected into the provided projection.
Get the feature bounding box with the projection applied.
Get the geometry metadata for the cursor.
Get the feature row for the cursor.
Get the feature row for the given geometry metadata.
Get the tile dao for the feature table.
Get the feature dao for the tile table.
Get the bounding box for the feature tiles.
Query by base id and related id.
Get a list of unique base ids for this user mapping table.
Get a list of unique related ids for this user mapping table.
Delete users by their base id.
Delete a user by its related id.
Delete by ids.
Builds the where clauses for the given base id and related id.
Create a new GeoPackage.
Delete the database.
Rename the GeoPackage with the new name.
Rename the content values of the table.
Get all the metadata.
Get the metadata for the database.
Get the metadata for the id.
Get or create the GeoPackageMetadata for the provided GeoPackage.
Determine if the database is external.
Get the metadata for the external path.
Get metadata where name like sort column.
Get metadata where name not like like sort column.
Get the metadata where name like like.
Create a GeoPackageMetadata object from a cursor.
Called when a view is created.
Adds a parallax view to the parallax container.
This method is called when a new view is created.
Create a custom view with the given name and context.
Appends the given event to the given cyclic buffer.
Find config file from system properties.
Get a resource from the class loader.
Automatically configures the logger.
Logs the status of a resource search.
Converts a socket address to a string.
Creates a new thread pool executor service.
Start converters.
Appends an event to the end of the list.
Adds a substitution property.
Returns the value associated with the given key.
Compiles the top node into a converter.
Advance to the next token and return it as a Node.
Converts a date to a regular expression.
Begins the interpretation.
Ends the execution of an event evaluator.
Initializes the logback context selector.
Creates a new dynamic context selector.
Sets up the properties for this logger.
Get the path to the external storage directory.
Gets the database directory path.
Returns the absolute path of the given filename.
Returns true if the given event is an error.
Get the discriminating value for this event.
Updates the mask if necessary.
Returns the filter chain decision for the given event.
Creates the key managers.
Create the trust managers.
Create a KeyStoreFactoryBean from system properties.
Get the location from the system property.
Returns a resource URL for the given location.
Iterates over the chain of converters to see if any of them handle a Throwable.
Stop the hook.
Prints the context in case of errors or warnings.
Prints status message if errors occur.
Prints the status of the context to the standard output.
Gets the entry for the given key from either the live or the lingerer map.
Marks the end of life of the given key.
Parses the given string into a format info object.
Rename a file or directory.
Checks if the source file is on different volumes.
Returns the value of the given environment variable.
Returns the value of a system property.
Set the MDC property map.
Returns a String representation of the given MDC property map.
Extracts the stack trace from the given throwable.
Checks if the current class is in the framework space list.
Adds a status to the status set.
Adds a listener to the list.
Looks up implicit actions that are applicable to the given element path.
Get the applicable actions for the given element path.
Set the class loader.
Gets the value of a system property.
Utility method to decapitalize a field name.
Returns an array of MethodDescriptors for the given class.
Returns an array of PropertyDescriptors for the given class.
Starts the output.
Add a new OnConsoleStatusListener instance to the status manager.
This method is called at the end of an interpretation.
Returns the discriminating value for the given event.
Returns true if the event should be discarded.
Start a new ShutdownHook.
Ends the execution of this action.
Returns the list of protocols that should be enabled.
Determines the cipher suites to use based on the supported cipher suites.
Returns the included and excluded strings for the given defaults.
Convert a scope string to a scope object.
Sets the properties in the specified scope.
Adds a new appender to the list of appenders.
Removes the given appender from the list of appenders.
Removes the appender with the specified name.
Handles a change in the parent level.
Calls appenders on all parent loggers.
Detaches the given appender from this writer.
Create a child logger by last name part.
Get the turbo filters for this call.
Log a SLF4J event.
Creates a socket and waits for it to become available.
Create missing parent directories for the given file.
Converts this level to an integer.
Convert an int value to a logging level.
Returns the number of times a resource appears in the classpath.
Get a resource from a class loader.
Returns the class loader for the given object.
Gets the class loader as privileged.
Gets the class loader of the given class.
Starts the encoder.
Returns the tag for the given event.
This method is called at the beginning of an interpretation.
Returns the index of the separator of the specified name starting at the specified index.
Returns true if the given event matches the marker list.
Returns the thread name for the given socket.
Checks if two files are on the same file store.
Appends an event to the buffer.
Sends a cyclic buffer to the client.
Add a mdc value level pair.
Creates a converter for the given simple keyword.
Create a composite converter.
Determine the compression mode.
Connects to the given URL and configures the context.
Configures the context from a file.
Configures the engine from an input stream.
Builds the interpreter.
Configures the given input source.
Configures the interpreter.
Returns the value of the specified property.
Sets the name of the component.
Returns true if the context has a status listener.
Returns the time when the last reset message was sent.
Starts the converter.
Gets the effective converter map.
Returns the header of the file.
Returns the file footer.
This method is called at the beginning of the interpretation.
Ends the current appender.
Returns a copy of the client list.
Adds a client to the list.
Removes a client from the set of registered clients.
Get a copy of the current context map.
Gets the value of method.
Get turbo filter chain decision.
Checks if the current operating system is android.
Initializes the default logger.
Returns all files in a folder that match a given stem regex.
Prints the status list of all statuses that have elapsed longer than the threshold.
Gets the database file.
Cleans up expired logs.
Check if the last check is expired.
Appends the given logging event to the given insert statement.
Appends the given event to the secondary event map.
Bind a logging event to the database.
Returns the given object's string representation truncated to 54 characters.
Computes the mask to be used for a reference event.
Merges the property maps of an event into a single map.
Inserts an exception into the database.
Returns the length of the prefix match between this path and the specified path.
Returns the effective level of this status.
Returns true if the given class is not an interface and is uninstantiable.
Create a new child value.
Processes an include request.
Opens an input stream to the given URL.
Trims out the head and tail tags from the given recorder.
Returns true if the server should be started.
Returns true if the response is transient.
Set the default hosts.
Ensures that the local index is not null.
Synchronise the data selection configuration with the server.
Syncs the database if necessary.
Waits until a task with the given ID has completed.
Lists all indexes that are offline.
Reads the content of the stream into a char array.
Reads the contents of an InputStream into a byte array.
Synchronously consumes data from the input stream and error stream.
Returns hosts that are up or could be retried.
Sets the type of the place.
Starts the asynchronous browse and returns immediately.
Puts a value into the cache.
Returns the value associated with the given key, or null if there is no value associated with the
Waits for all threads to complete.
This method is used to report a failure to the user.
Copies all files in src to target directory.
Initialize simulator properties from a file.
Gets the static field value.
Finds a method by its name.
Formats a value as a percentage.
Formats a double value as a string.
Formats a long value into a string of the specified length.
Writes a JSON string.
Writes an integer as a JSON string.
Writes a JSON double.
Reads a JSON numeric string.
Reads a JSON integer.
Read a JSON double value.
Reads a JSON string and decodes it as Base64.
Executes the given method call.
Invokes a method call.
Enqueue a method call.
Get a resource from the filesystem.
Updates the decoration of the guvnor decorator.
Refreshes the repository view.
Returns the current resource history view.
Opens an editor with the given name and contents.
Asynchronously reports an authentication failure.
Prompts the user for authentication.
Creates the default page.
Starts the background thread.
Sets the value of the keepAllAlive property.
Sets the flag indicating if the object should be omitted from the document.
Set the owner of this node.
Adds a new condition factor.
Creates a new ConditionTerm from a stream tokenizer.
Returns true if this condition matches the given condition term.
Finds the DSL file for the given source and input.
Loads the configuration from the given input.
Reads the configuration from the given input stream.
Get the menu for this control.
Add a response to the response body.
Appends a href to the end of the list.
Inserts a new href before the specified reference.
Removes the specified href from the page.
Add a propstat element.
Get the href of the document.
Get the status of the response.
Get the stack frame for the given value.
Returns true if class1 is a subtype of class2.
Checks if the given collection of proposals contains the given proposal.
Resets the reader to the beginning of the file.
Creates the actions.
Adds a connection to the list.
Returns the value of the specified property.
Removes a connection from the list.
Sets the location of the poi.
Sets the value of the specified property.
Sets the size of the gauge.
Dumps an array of constraints into a string.
Add a lock entry.
Adds a child to this node.
Removes a child from this node.
Override start to set the useCache preference.
Stops the bundle.
Returns the resource bundle for the given key, or the given key if not found.
Get the resource bundle.
Gets the rule builder form colors.
Set the date as a string.
Sets the date time.
Creates an error status.
Log error.
Adds a new field editor.
Adjusts the grid layout of the field editors.
Apply the font to the field editors.
Calculates the number of columns.
Initializes this page.
Fires a PropertyChangeEvent to all registered listeners.
Set the active editor.
Contributes this to the specified tool bar.
Determine the dialect to use for the given back text.
Create a new context for the given user context and locator.
Saves the given monitor to the specified file.
Create the table listeners.
Puts the given value into the request body for the given URL.
Puts the given value into the given URL.
Adds a token to the token list.
Add a child node.
Sets the file to be read.
Adds a new condition.
Adds a state token condition to the resource.
Returns true if this condition matches the given condition.
Get the prop.
Returns the status of the response.
Set the properties of this node.
Get the last line of the back text.
Get the last non dash line from the back text.
Binds the given id to the given binding.
Binds two strings together.
Binds an id to an array of bindings.
Creates the process for the example.
Create the process sample j.
Returns the current runtime id.
Visit a Rete.
Visits the given node.
Generates a unique ID for the given object.
Remove this node from the tree.
Add a set to this node.
Creates a new locator for the given resource URL and label.
Returns a presentation reconciler for the given viewer.
Returns true if the given object is a status with the same code, message, and extendedStatus
Returns true if the given term is contained in the condition.
Creates a new condition factor from a stream tokenizer.
Add the pages to the wizard.
Sends a http delete request to the kie rest endpoint.
Sends a HTTP POST request.
Get the status of a job.
Executes the pull operation with the given monitor.
Handles the results from a pull request.
Sets the value at the specified index in this array.
Add an active lock.
Filter proposals based on a prefix.
Reads the prefix backwards from the given document offset.
Calculates the rows for a given root.
Returns the appropriate EditPart for the given model element.
Returns the image descriptor for the specified path.
Declares an image in the registry.
Adds a vertex to the table at the specified depth.
Returns the row index for a given vertex.
Get the width of the table.
Dump the entire matrix.
Optimize the matrix.
Initializes the graphical viewer.
Draws a new graph.
Returns the breakpoint with the given source.
Set the href of this element.
Checks if the client can talk to the dav server.
Copies the content of this node to the specified destination.
Examines a multi-status response.
Extracts the property stats from a multi-status response.
Get the content of the resource.
Returns an enumeration of all the currently active locks.
Returns the property with the given qualified name.
HEADs the resource specified by the locator.
Attempts to acquire a lock.
Moves a list of qualified names to a destination.
Performs a check in to the DAV server and returns the result.
Refreshes the lock with the given lock token.
Removes the properties with the specified names.
Removes the property with the given qualified name.
Sets the content of the resource using the specified content type.
Sets the properties of this davObject.
Sets the property.
Unlocks the resource with the given lock token.
Updates the resource with the specified version.
Sends a version control request to the dav server.
Deletes the resource specified by the locator.
Examines the given status code and throws appropriate exceptions.
Returns true if the property has a child.
Writes the request body to the output stream.
Converts a byte array to a hexidecimal representation.
Converts an array of ints to a hexidecimal string.
Sets the isAllProp value.
Sets the isPropName property.
Set the property of this node.
Removes the last word from the given string.
Updates the rules in the tree.
Writes the content of this message to the given output stream.
Advances the iterator one step.
Marks the given build markers for the given parser errors.
Skip whitespace at the current position.
Add a resource to the guvnor.
Commit changes to a selected file.
Returns the age of the user.
Returns the content length.
Returns the maximum number of forwards.
Gets the value of the overwrite property.
Gets the passthrough flag.
Returns the timeout value.
Puts a property into the context.
Sets the timeout.
Opens a file for reading.
Parse the contents of a file.
Extracts the metadata from the given text.
Strips the object metadata from the given text.
Add tokens to the tree.
Get the children of the current condition.
Get the children.
Add a prefix to a list of children of a node.
Print the tree.
Recursively prints a node and its children.
Prints the tabs.
Reads a JSON value from a string.
Returns the image descriptor for the given id.
Invokes a request and returns the response.
Adds a field to the request.
Create the rule sample launcher.
Create the rule.
Create the rule flow for the monitor.
Create the rule flow sample launcher.
Gets the selected IU.
Creates an image of the printable layers.
Returns the name of the field that this alpha node points to.
Returns the mvel constraint evaluator.
Returns the value of the mvel constraint.
Adds properties from a GanttProject resource properties file.
Sets the baseline control.
Binds the specified member to the specified source.
Returns the member with the given name.
Optimize the list of vertices.
Initializes the dialog's controls.
Validates the page.
Generate an entity tag.
Returns the opposite of the given vertex.
Validates the given OTPs and adds them to the principals list.
Check if user is right.
Get the username for a public id from a file.
Adds a YubiKey to a user.
Verify an OTP token.
Clears the password.
Convert an OTP string to a public ID.
Check if the given string is a valid OTP string.
Creates an evaluation with the given node and source.
Creates an evaluation for the given node.
Clears all caches.
Check if the JDK 1.x is available.
Returns the package name of the given object.
Get the package name of a class.
Returns a unique descriptor for the given object.
Returns the type of the argument.
Checks if classes1 is more specific than classes2.
Returns the value of the specified property on the specified target object.
Returns a map of property descriptors for the specified target class.
Returns the property descriptor for the given name in the given class.
Gets the read method.
Read a character from the input stream.
This is the main method for the projection.
Select all expressions.
Converts the value to a long.
Convert the value to a double.
Convert an Object to a BigInteger.
Convert an Object to a BigDecimal.
Converts the given value to a string.
Returns the numeric type of the given value.
Converts the given value to the given type.
Converts an object to an integer.
Gets the numeric type.
Gets the numeric type.
Creates a new Number of the specified type and value.
Pops an evaluation from the stack.
Generates the OGNL getter for the given field.
Generate OGNL setter.
Flattens the children of this node.
Initializes the iterator with the given node and source.
Escapes the last character in the string.
Sets the root context.
Evaluates the expression with the given context, returning the result of the expression.
Set the value of an accessor.
Set the value of the given tree using the default context.
Returns true if the expression is a constant expression.
Returns the default watch service id.
Reloads the class loader.
Get the named archiver.
Check the archiver for problems.
Reads the contents of a file as a string.
Create the project.
Add a system property to the java object.
Add a system property.
Change the selected directory.
Refresh the state of the confirm button.
Create file observer.
Returns the currently selected folder.
Create a new folder.
Checks if the given file is a valid file.
Start a background job with the given message id.
Start a list.
Ends the current list.
Handle motion.
Get the crop rectangle.
Computes and returns the layout of the view.
Registers the listener with the media factory.
Add a span watcher.
Inflates the view, which is used to show the spinner.
Get the drop down view for the specified position.
Convert the spanned text into an HTML RT.
Check if the span is within a paragraph.
Creates a file with the same name as the original file.
Determines the original file for the given URI.
Returns the namespace of the given name.
Returns the local name of the given name.
Set the value of an attribute.
Set an attribute on the element.
Get the font name from the given file path.
Get the font name from the specified font file.
Check if we need a new buffer and if so, allocate a new buffer.
Writes a byte array to the stream.
Writes a byte to the buffer.
Writes an input stream to the output.
Writes the contents of this buffer to the specified output stream.
Returns the contents of this buffer as a byte array.
Set the font size.
Converts windows separators to unix separators.
Recomputes the focus of the highlight views.
Pans the view if necessary.
Centers the image based on the specified highlight view.
Resets the locator to the given values.
Validates a string against the set of regular expressions.
Add an element type.
Set the value of an attribute on the specified element.
Set the parent of the element with the given name.
Get the element type for the given name.
Returns the value of the named entity.
Removes all paragraphs from the given editor that are not in the given exclude list.
Applies the specified value to the selection.
Checks if the given domain is valid.
Called when an operation is executed by the editor.
Redos the last operation in the undo stack of an editor.
Replaces all occurrences of the search string with the replace string.
Returns the thread status for the specified thread, creating it if necessary.
Sets the decoding options for the given thread.
Returns true if the specified thread can be decoded.
Decode a bitmap from a file descriptor.
Get all fonts.
Get a map of font names to font paths.
Gets the system fonts.
Sets up the parser.
Get a reader for the given input source.
Get the input stream for the given public and system identifiers.
Copies the content of this buffer into the new element.
Expands entities in a string.
Looks up an entity in the buffer.
Restarts the stack by pushing the saved element to the stack.
Pop the top of the stack.
Pops the top of the stack, but only if the stack is restarted.
Returns the prefix of the given name.
Returns true if the prefix is a foreign prefix.
Removes leading and trailing quotes from a string.
Splits a string into an array of strings.
Fills the stack with elements that can contain the given element.
Saves the current instance state.
This method is called when the component is being removed from the DOM.
Attaches an image to an active editor.
Remove the link from the link editor.
Get the proper base matrix for the bitmap.
Get the maximum zoom factor.
Returns true if the given text exists in the selection.
Finds all the spans of the given string in the given paragraph and removes them.
Picks up a directory from a list of intents.
Rotate image by degree.
Set the output writer.
Writes a character to the output.
Writes a string to the output.
Returns true if localName equals value, false otherwise.
Writes an HTML escape sequence for a string.
Writes out the namespace declarations.
Writes out a qualified name.
Creates a stream if it does not already exist.
Waits for the stream to become active.
Completes the store snapshot with missing instance snapshots.
Waits up to the minimal amount of time to execute the next provisioning request.
Gets a list of records from Amazon Kinesis.
Performs an Amazon action retrying if necessary.
Attempts to execute the given action.
Checks if the bucket with the given name is accessible.
Loads the latest snapshot from the snapshot store.
Triggers the wildcard expander.
Replaces all occurrences of a pattern in a string.
Delete any character in charsToDelete from inString.
Add a resource lint report.
Updates the properties with the configuration.
Gets the config properties.
Creates an input stream to read the WRO file.
Converts a map of resource pre processors to a map of resource post processors.
Compiles the given content.
Reloads the cache with a new value.
Reloads the model with a new value.
Get the wrapped servlet request for the given location.
Creates a transformer from the base name and extension.
On error.
Sends a redirect to the specified location.
Processes a resource.
Create expander handler function.
Locates an input stream for the given URI.
Creates the configuration.
Registers the cache update period change listeners.
Processes the request and sets the response headers.
Sets the configuration.
Identify duplicate group names.
Merges the given model into this model.
Locates an input stream for the given URI.
Apply post processors to the content.
Decorates a resource post processor.
Process the request.
Splits the given string into an array of strings.
Load properties from the specified input stream.
Parses properties from a string.
Creates a custom wro manager factory.
Persists the fingerprints of the resources in the given groups.
Returns true if the specified group is a target group.
Extend the classpath of the plugin.
Returns the model resource as an input stream.
Initialize the wro manager factory from the properties.
Sets the model transformers.
Compiles the given content into a function with the given name.
Processes a list of resources and merges them into a single String.
Processes a list of resources and merges them into a single String.
Runs a list of resources in parallel.
Apply pre processors to a resource.
Decorates a ResourcePreProcessor.
Persists the fallback storage to disk.
Returns a collection of all declared fields of the given object.
Rewrites the given CSS URI to an image URL.
Compute new image location.
Adds a model transformer to the manager.
Serves the processed bundle.
Initializes the aggregated folder path.
Extracts the variables from the body.
Parses the given CSS string.
Replaces the variables in a CSS string.
Convert a ResourcePostProcessor to a ResourcePreProcessor.
Determines if this resource is eligible for inclusion in the given resource type.
Sends a gzipped response.
Factory method to create a new PathPatternProcessorDecorator.
Create a new decorator that will exclude the specified path patterns.
Creates a new resource change handler with the specified manager factory and log.
This method remembers a resource.
Apply a CSS import to a resource.
Filters nulls from the given collection.
Determines if the given request should be minimized.
Find imported resources.
Computes the absolute URL for the given resource URI.
Create items as string.
Gets the alias list.
Creates a new context with the given initial scope.
Evaluates the expression using the given source name.
Evaluates the given script.
Processes the input stream.
Check if the request is a handler request.
Create handler request path.
Renames a group.
Computes the destination folder for the given resource type.
Processes a group.
Check change for group.
Locates the stream for the given URI in the context of the standalone context.
Create an object pool with the given object factory.
Locates an input stream for the given URI in the given folder.
Opens a jar file.
Extracts the path from the URI.
Returns true if the request should be minimized.
Add URI locators to the factory.
Decorates a model factory with a list of model transformers.
Add a require statement.
Processes the given content and returns the result.
Log summary.
Called when a resource is being processed.
Returns the read-write lock for the given key, creating one if necessary.
Creates a process from the given source file.
Parses the given string into an array of properties.
Returns the current list of tasks.
Returns the compilation command for the given input.
Parses a header string into the headers map.
Adds pragma, cache control and expires headers to the map.
Gets the path info from the given location.
Get the servlet path from the given location.
Checks if the given path matches the given request.
Loads a regular expression with a given key.
Safely copies the contents of the given Reader to the given Writer.
Create a temporary file with the given extension.
Clean image url.
Sets the specified attribute to the specified value.
Generates a data URI from an input stream.
Generate data uri.
Sets the context with the given configuration.
Unset the context for the current thread.
Checks if the given cache key has changed.
Invoked when an exception occurs.
Checks if the resource has been changed.
Updates the hash for the given group.
Checks if the resource list has resources of the specified type.
Creates a process from the given source file and destination file.
Parses the group definition.
Create a group from an XML element.
Parses a resource element.
Returns the resources for the given group.
Stops the timer with the given name and todo flags.
Returns a timer with the given name and todos for the current thread.
Returns a timer with the given name, todo flags and thread id.
Prints the current saturation statistics to the logger.
Wake up all the workers.
Update the processed counters.
Updates the finished counters of the local statistics.
Atomically updates the counter if the given value is smaller than the given value.
The default implementation of the default visit method.
Insterts the given property into a taxonomy.
Ensures that the loader is loading.
Restores the current saturation.
Returns true if the cluster is in an inconsistent state.
Resets the taxonomy to its original state.
Restores the current instance taxonomy.
Returns a proof for the given entailment.
This method is called before the task is executed.
Invalidates this reasoner stage and all of its substages.
Get the individuals that need to be added to the taxonomy.
Returns the individuals that need to be removed from the taxonomy.
Creates an unsupported OWL API method exception.
Remove the element at the specified position.
Remove a key-value pair at a given position.
Finds the position of del in the array d.
Returns true if the specified array contains the specified element.
Add an element to an array.
Checks the occurrence numbers.
Adds another timer to this one.
Add a new timer to the rule application.
Puts the key and value into the keys array, if the key is not already present in
Removes the entry associated with the specified key from the specified values array.
Enlarges the capacity of this map.
Shrinks the capacity of the map if necessary.
Saves the given configuration to the given file.
Prints the declarations of the classes in the given taxonomy.
Gets all instance nodes.
Removes all of the elements from this set.
Combine list hash.
Copy the contents of the given InputStream to the given OutputStream.
Returns a new delegating incompleteness monitor.
Process a taxonomy.
Submits an input to the queue.
Appends the string representation of the given ELF object to the given appendable.
Marks the given query class as not computed.
Adds a direct type node to the list.
Checks if the chain matches the given chain starting at the given position.
Returns a new set that contains all elements of the input set that are returned by the functor
Add an element to the set.
Removes the specified element from the set.
Adds another counter to this one.
Logs the memory usage of the given logger.
Sets the configuration options from the given configuration.
Shuts down the server.
Prints the header of the page.
Print values to the logger.
Get a string representation of the given character.
Adds a counter to this rule set.
Writes a resource to the writer.
Returns the ActionInputParameter with the given name.
Get the PropertyDescriptor for the given property path.
Returns the required parameters for this action.
Checks if is single value type.
Adds a link to this document.
Sets the media type of the link.
Set the hreflang parameter for the link.
Add a rev parameter to the link.
Adds a link parameter to the request.
Expands the partial URI template with the given arguments.
Get the list of link rels.
Get the link revisions.
Returns true if there are unsatisfied required variables.
Returns the value as a formatted string.
Returns true if the property is hidden.
Returns true if the given property contains a value that should be included in the input.
Returns true if this property has an explicit or implicit include value.
Returns true if this request is required.
Returns the default value for this request.
Returns the name of the parameter.
Returns the property to expose or the parameter name for the given input parameter.
Get the vocabulary for the mixin.
Get the query string.
Appends the form to the given affordance.
Writes an input button.
Appends an input or select to the child input parameter.
Appends the given affordance builder to this one.
Returns a collection of URI template components.
Strips the optional variables from the URI template components.
Returns the first node with the given name.
Get the first node that matches the given rel.
Returns an iterator over the children.
Returns an immutable map consisting of the entries of the given iterable, associating them with the
Construct a map from an Iterable of Map.Entry objects.
Returns an empty map.
Returns a set of entries in this map.
Returns the last key in the map.
Folds an operation into a single operation.
Drop all elements while the predicate is true.
Applies a function to each element of this stream.
Of tuple 2.
Applies the functions to each item in the list.
Registers a list of classes to the registry.
Returns the element at the specified position in the tree.
Appends an element to the end of the vector.
Concatenates items into this list.
Returns a mutable set containing the given items.
Returns a mutable list containing the given items.
Creates a set from the given items.
Returns an immutable list containing the given items.
Convert an array to an xform iterable.
Returns a string builder of spaces of the specified length.
Convert an array of objects to a string.
Construct a lazy ref from a producer function.
Apply the operation and return the result.
Inserts an item into an array at the specified position.
Copies the given array into a new array of the given class.
Suspend if assoaciated with thread.
This method is called before an async operation is initiated.
Builds the service components.
Validates a directory.
Creates an inheritance link between a concrete class and a superclass.
Copies all methods from the source class to the destination class.
Copy the given methods to the given destination class.
Remove a SBBEntity with the current class loader.
Check if notifications are enabled for the given parameter name.
Get the list of referenced RA links for the given service component.
Install service component.
Uninstall service.
Returns true if the named resource adaptor link is already in use.
Get the usage parameter sets for a given SBB.
Resets all usage parameters to their default values.
Displays the result.
Unfolds an array.
Executes a fire event.
Binds an object to the cache.
Unbinds a name from the cache.
Looks up an object by its name.
Returns the name bindings for this node.
Moves the cursor to the next event in the list.
returns true if this trace level is higher than the given one.
Extracts the given jar file to the given destination directory.
Pipes the data from the input stream to the output stream.
Associates the specified value with the specified key in this map.
Attach a SBB entity to this node.
Detach a SbbEntity from this SbbNode.
Return true if there are no SBB entities attached to this node.
Get the names of the SbbEntities attached to this node.
Attaches the given timer id to this timer.
Detaches the timer with the given id.
Returns true if there are no timers attached.
Returns the names of the timers attached to this node.
Adds a name bound node to the document.
Remove a name bound to this context.
Returns true if there are no names bound.
Returns a copy of the names bound to this node.
Sets the value of a cmp attribute.
Get the value of a cmp attribute.
Returns a copy of this node's attributes.
This method initialises the notification info.
Sends a usage notification.
Downloads a remote du.
Update the deployed components.
Install a deployable unit.
Uninstall a deployable unit.
Processes an internal undeploy.
Displays the current status of the application.
Checks if the log record is loggable.
Returns the logger for the given log record.
Get the set of SbbEntities associated with this SbbNode.
Get the permissions for the current policy.
Get the list of code sources for the current policy.
Checks if a profile with the given name exists in the database.
Remove the profile table.
Updates the configuration properties of this adaptor.
Informs the slee that it is running.
Informs the object manager that the object is stopping.
Activates the adaptor.
Deactivates the adaptor.
Schedules the end of all activities.
Remove this resource adapter.
Returns the resource adaptor interface for the given resource adaptor type.
Informs the adaptor that a service is active.
Derives an activity handle from an activity handle reference.
Called when an activity has ended.
Updates the RA configuration with the given properties.
Verifies that the given configuration properties are valid.
Indicate that the resource adaptor is stopping.
Mark the adaptor object as inactive.
Unconfigures the resource adaptor.
Unsets the resource adaptor context.
Unsets the Fault tolerant resource adaptor context.
Builds a map of profile attribute names to profile attributes.
Resumes the playback.
Returns the activity context handles for this activity.
Get the usage for a given parameter set.
Decorate the abstract class.
Sends an event to the registered listeners.
Fires an event.
Get the profile cmp associated with a profile.
Get all abstract methods from a class.
Returns the interface methods from the given interface class.
Create a new object pool for the given profile table.
Remove the object pool for the given profile table.
Returns true if the specified notification source is the owner of the specified alarm.
Sends an alarm message to the specified notification source.
Get the usage parameter set for a profile.
Returns the EventTypeDescriptor for this Event.
Checks if the given deployable unit accepts the given deployable unit.
Initializes the DeployableUnitWrapper.
Starts the deployment.
Stop a deployable unit.
Displays the status of the deployment.
Executes the after commit actions.
Executes the after commit priority actions.
Executes the after rollback actions.
Executes the before commit actions.
Executes the beforeCommit priority actions.
Returns the names of all defined tracers.
Creates a new tracer with the given name.
Remove the replication data.
Process the given component with the given usage parameters interface.
Get the object pool for a given service and SbbId.
Create object pool.
Executes the given activity handle.
Start an activity.
End an activity.
Check preconditions for firing an event.
Fire an event on an activity.
Generate sbb local object concrete class.
Makes the operation name of the getter.
Convert a string argument to an object.
Sets the profile id.
Extracts the message from the result.
Check if an object is in the cache.
Checks if this collection contains all elements from the specified collection.
Removes all of the elements in the specified collection.
returns true if this level is higher than the other level.
Reads the next value from the stream.
Cleans up the class pool.
Add a profile call.
Returns the profile with the given name, or creates one if it does not exist.
Passivate a profile object on transaction end.
Sets the value of this id as a string.
Generate the concrete class for the activity context interface.
Generate concrete methods.
Set a data attribute in the cache.
Adds an ACI name to the cache.
Remove all names bound to this context.
Removes a name binding from the cache.
Attaches a timer to the cache.
Remove all timers from the slee container.
Attach a SbbEntity to this activity context.
Detach a SbbEntity from this activity context.
Get the sorted set of SbbEntityIds attached to this SbbEntity.
Ends the current activity.
Add a component to the container.
Get the external dependencies.
Returns true if the dependencies are satisfied.
Returns true if there are duplicates.
Get the install actions.
Gets the uninstall actions.
Returns true if there is a reference to a duplication.
Close a profile.
Gets the object name.
Write the profile to the SLEE.
This method is called before setting the cmp field.
This method is called after setting the cmp field.
Before get cmp field.
This method is called after a non-null cmp field is set.
Before the management method invocation.
This method is called after the management method invocation.
Deletes a directory and all its contents.
Create the default constructor.
Create the default usage parameter getter for the given class.
Create the getter and setter methods for the SBBEntity.
Create the fire event methods for the given event entries.
Create the getSbbActivityContextInterface method.
Adds the given expression to this query.
Binds the specified key to the specified target.
Rebinds the named object to the specified target object.
Declarative Services method for decorating abstract SBB.
Invokes the method with the given name on the given proxy and returns the result of the method
Get the real field name for a field name.
Sets the value of the field with the given name in the activity context.
Returns the value of the field with the given name in the given return type.
Initializes the profile.
Unsets the profile context.
Get the profile local object.
Fire the add or updated event if needed.
Get the ProfileCompSlee10Wrapper.
Creates a class with the specified name and interfaces.
Creates the inheritance link for the given concrete class and super class name.
Adds the member values to the annotation.
Get the ActivityContextInterface for the given activity.
Gets the class pool.
Sets the deployable unit for this component.
Cleans up the class loaders, classloaders and permissions.
Executes an activity.
Check if the given class or interface is one of the given interfaces.
Returns a map containing all methods in the given interface and all superinterfaces.
Checks if the given tracer name is valid.
Query for profiles by static query.
Creates a temporary directory for the given deployable unit.
Get the entity manager for this component.
Starts the JMX server.
Switches the given class loader to the given profile.
Makes a call to the given method on the given proxy.
Checks if the current transaction is the same as the current one.
Converts the last access time stamp to a TTL value.
Checks if the profile class is visible.
Gets the profile object that is valid in the current transaction.
Get the names of all loggers that match the given regular expression.
Reset the logger levels.
Clear all loggers for the given name.
Add a new logger with the specified name and level.
Remove a handler from a logger.
Converts the given name and notification source to a log4j compatible name.
Synchronize the logging level with the log4j level.
Assign log4j level.
Resets the cache flags to their defaults.
Sends a notification to the trace manager.
Checks if the given tracer name is valid.
Writes the vendor data to the output stream.
Reads an object from an input stream.
Adds a domain to the list of direct dependencies.
Returns a list of all the dependencies.
Finds a class by name.
Finds a resource locally.
Finds all the resources with the given name locally.
Creates and registers the profile m.
Resume a transaction.
Returns the components of the SBB.
Get the resource adaptor entity links.
Initializes the SLEE state.
Shuts down the SLEE engine.
Validates a state transition.
Generate a getter for the named usage parameter.
Updates the given field with the given value.
Builds a new instance of JDBC.
Add a value to the query.
Executes the given operation using a query runner.
Creates a new region request from a string.
Gets the region.
Get the onType string for the given context.
Sets the list of viewing hints for this view.
Adds one or more viewing hints.
Sets the list of other content renderings.
Adds a rendering to the resource.
Merges the given list of profiles into a single profile.
Creates a new rotation request from a string.
Creates a size request from a string.
Initializes the ADB connection.
Get a dump of the current testcase.
Pops a box off the GPS2 device.
Pushes a GPS2 device to the ADB.
This method cleans the temp directory.
Pulls a dump from the device to the temporary directory.
Get the crash log file name.
Detabify the current line with the specified tab width.
Indents the current line with the specified number of spaces.
Tokenizes the given text and returns a list of HTML tokens.
Convert Markdown to HTML.
Escape special characters within tag attributes.
Adds an exception to the list of exceptions that should be handled.
Closes the cache.
Finds the fully qualified class name of the given type element.
Writes the class to the given filer.
Writes a bit vector01-divider.
Appends bit strings to a bit vector.
Reads the data from the given input stream.
Get a list of objects from a path.
Set the klov report.
Adds a screen capture to the current step.
Sets the system info for the extent report.
Create a selector that selects the given property.
Create a selector that applies a transformation to the value of a property.
Extract validation annotation data.
Find all annotations for a property.
Finds the annotations on the given property of the given class.
Returns the property descriptor for the given property name.
Converts a map of strings to an object of the given class.
Create a new complex type from a map.
Convert an object to a map.
Convert an object to a map.
Do get values.
Creates a composite validator for the given validation meta data.
Lookup the validators in the registry and initialize them with the given validation meta data properties.
Looks up a field validator in the registry.
Apply validation meta data properties to validator.
If the property is blank, remove it.
Updates the time and the approximate time.
Returns the number of elements in the cache.
Applies a supplemental hash function to a given hashCode, resulting in a
Tries to open the database.
Puts all the values in the given map into the database.
Deletes the given keys from the database.
Returns an iterable over the key-value pairs found in the database.
Loads all entries in the database with the specified keys.
Flushes and closes the database.
Reduce by double.
Reduce by r.
Calculates the variance of a set of double values.
Returns the mean of the array of longs.
Invokes the specified method on the specified object with the specified number of arguments.
Reduces an array by applying a reduction function to each element.
Returns the ISO 8601 UTC string of the given timestamp.
Returns true if obj matches any of the criteria.
Create a Criterion that will test if the field named by the given name is in the given
Creates a criteria from a list of objects.
Creates a criteria object from a JSON string.
Adds an array of integers to the array.
Returns the maximum element of the given array.
Returns the first N elements in a list.
Returns the last element of the given list.
Returns the last N elements in a list.
Returns the least of the specified elements in the specified list.
Returns the minimum element of the given list.
Returns the minimum element of an array.
Processes an array of maps and adds them to the new instance.
Handle collection of maps.
Create an object from a map.
Returns the value associated with the given key.
Creates the tool tip with the name space from the bundle.
Adds the decoded hexidecimal digit to the end of the sequence.
Process the write queue.
Starts the write queue.
Returns the substring at the specified index.
Returns the lowest common prefix of the specified string.
Checks if a char array is in a string.
Adds a character to a string.
Adds the given objects to the end of a string.
Compacts the given string by removing duplicate characters.
Splits the given string into an array of strings.
Split by space.
Split by pipe.
Splits an array of char arrays into an array of strings.
Changes the first character of a string to upper case.
Checks if the first character is inside the second character.
Under bar case.
Convert a number to a string.
Concatenates the given sorts into a single sort.
Sorts the given list according to the specified fields.
Returns a comparator for the given fields.
Returns the list of child comparators.
Returns true if the value is in the map.
Compares two ints and die if they are not equal.
Compares two int arrays and die if they are the same.
Get the sum of an array of values.
Rounds the given number to the nearest power of 2.
Sorts the given list by the given field name, ascending or descending.
Sorts the given list using the given sort-by and fields.
Set field value from map.
Converts an object to a list.
Creates the SQL to load all version data.
Returns a deep copy of the given list.
Returns true if the given object has a string field with the given name.
Check if class has string field with given name.
Check if class has a field with given name.
Get first comparable or primitive from class.
Gets the sortable field.
Compares two cache entries.
Compares the time of this entry to another entry's time.
Sorts the elements in the specified List according to the specified Sort values.
Sorts the given list using the given sort by name, ascending, and nulls first.
Sort entries collection.
Sort values collection.
Sort keys collection.
Sorts an array using a universal comparator.
Returns a universal comparator for the specified field.
Returns a comparator that compares two objects in ascending order and nulls first.
Returns the value associated with the specified key in the cache.
Returns the value associated with the given key, or null if the key is not in the cache
Evicts entries from the cache if necessary.
Automatically initializes the field with the given value.
Allocates a buffer of the given size.
Determines if we should exit.
Manages the input writer channel.
Check if the queue is empty, and if so, flush it.
Starts the monitor.
Starts the timer.
Returns the value associated with the given key.
Returns the main query plan.
Performs the actual filtering of a group.
Ticks the timer.
Syncs the output stream to disk.
Cleans up the output stream.
Writes the next buffer to the output.
Writes the given buffer to the output stream.
Initializes the output stream.
Puts all the entries in the specified map into the preference store.
Converts the given key to a byte array.
Read validator meta data.
Extracts validator meta data from the given string.
Read validator meta data.
Extract validator meta data.
Extracts validator meta data from a collection of annotations.
Convert annotation data to validator meta data.
Splits the given string around the given limit.
Split by white space.
Split by delimiters.
Splits the given string by the given delimiters.
Splits a string into an array of strings using the given delimiters.
Parse a double from the given buffer.
Parses a number out of a character buffer.
Parse a long from a buffer.
Get a property by its path.
Returns a field access map for the given object.
Returns the type of the property.
Injects the specified value into the specified object's property path.
Set the value of an indexed property of a class.
Get a value from a collection or array.
Returns the value of the specified property on the specified object.
Get the value of a property as an int.
This method initialises the Alert.
Creates a message with the specified key and list of arguments.
Creates a validation message.
Converts a list of keys to an array of values.
Gets the subject.
Parses the given text into an object.
Sends a request to the server and handles the response.
Deletes a database.
Creates a new database.
Get a list of uuids.
Triggers a replication request.
Executes the query and returns the result of the query as a specified class.
Filter the results by descending or ascending order.
Synchronize all design documents with the database.
Get a design document from the database.
Get all design documents from the desk.
Get a design document from the desk.
Saves the replicator to the database.
Finds a single ReplicatorDocument.
Finds all the ReplicatorDocuments.
Remove the Replicator.
Finds an entity by its ID and query parameters.
Finds documents based on a JSON query.
Checks if the database contains the given id.
Bulk inserts or deletes a list of objects.
Puts an object into the repository.
Executes a PUT request to the specified URI using the specified input stream and Content-Type.
Execute a POST request to the given URI with the specified JSON.
Executes a DELETE on the given URI.
Validates the response.
Sets the entity in the given HTTP request.
Adds an attachment to the message.
Returns the changes for this user.
Reads the next row from the input stream.
Convert the money to a string.
Shuts down the lock manager.
Writes the given byte array to the given output stream.
Adds tags to a metric.
Verify and create temp tables.
Returns the project ID for the given namespace name.
Checks if the request is a query request.
Send authentication request.
Returns the HTTP verb for the given exchange.
Generate subject access review string.
Handles a request result.
Handles a request failure.
Initializes the RxSession.
Finds all scheduled jobs.
Convert a map of bucket points to a list of bucket points.
Ends the exchange with the given status code and reason phrase.
Finds all the rows in the bucket with the given timestamp.
Creates buckets from start to end with a step.
Sends a message to the Kafka producer.
Sends a message to the other end of the queue.
Sends a message to a Kafka topic.
Scans the string cursor.
Adds a file to the zip file.
Replaces the entry for the given file with the given text.
Builds the archive.
Generates metrics for a single component.
Fetches content from the Content Specification.
Downloads the content of an order item.
Uploads the given export transformation to the container.
Generates metrics for the given components.
Creates a new directory in the specified parent directory.
Adds the object as a child of the parent.
Registers an adaptor for the given type in the given group.
Registers a renderer for the specified attribute type in the specified group.
Prepares a template for use.
Add a domain object to the assembly.
Sets a property.
Add a child object to the given collection.
Returns a supplier that creates a new file with the given prefix and suffix in the given directory.
Copy the contents of the given InputStream to the given OutputStream using the given hash assembler.
Parses the given file into a Document.
Parses the content of the specified reader into a Document.
Returns all the elements in the given parent element.
Returns a stream of nodes in the given parent element.
Get the first child element in the parent element with the given names.
Returns a stream of Elements that are children of the given names.
Validates an XML input stream against a schema.
Entry point to the file archiver.
Appends the string representation of the given content to the builder.
Creates a builder from a resource.
Processes a single entry in the ZIP archive.
Encodes the given string using ASCII characters encoding.
Sets the signature for the HTTP request.
Removes all whitespace characters from a string.
Signs the request with the call back.
Sets the data for the given key in the given recorder.
Complete a multi-part upload.
Invokes the FavoriteNotices action.
Add a notification state to an entry.
Returns true if the cache has expired.
Gets a notification.
Returns the list of addressees for the given id.
Get addressee by id.
Gets the events for a notification.
Gets an event.
Gets the REST endpoint for a single notification.
Gets the entry with the specified id.
Get the authentication token.
Returns the number of entries in the list.
Adds a list of notification categories to the list.
Fetch the notification for the given portlet request.
Creates a notification response with an error.
Maps the given response entity to a notification response.
Creates a notification entry for a notification.
Attach actions to a notification entry.
Normalizes a link.
Get the notification category from the preferences.
Get the notification source from the preferences.
Invokes the read notices for the notification.
Reads a notification response from a file.
Get the id of the student in the request.
Extracts the user id from the response.
Invokes the action.
Get notification attributes as a map.
Normalizes the vector.
Checks if box a is contained in box b.
Finds the closest point on the path.
Computes the sign of this vector.
Sets this se3 f64 to the same values as the given se3f64.
Sets the value of this transformation to the specified rotation.
Converts a 3x3 matrix into a 2x3 matrix.
Convert the input quadrilateral to the output quadrilateral.
Calculates the bounding rectangle for the given quadrilateral.
Calculates the bounding rectangle of a polygon.
Computes the center of the quadrilateral.
Computes the average x and y values of all vertices in the input matrix.
Calculates the convex hull of a set of points.
Removes almost parallel points from a polygon.
Calculates the average error of the closest point on a line.
Computes the area of the triangle formed by the two points.
Returns true if the given quadrilateral contains the given point.
Check if a point is contained within a triangle.
Calculate intersection of two lines.
Computes the intersection of two lines.
Computes the intersection of two lines.
Calculates the intersection of two lines.
Computes the intersection of two vectors.
Checks if a point is inside a rotated ellipse.
Computes the intersection area between two points.
Returns the element at the specified position in the matrix.
Convert a matrix to a quaternion.
Computes the X rotation for a rotation matrix.
Sets the value of the rotation matrix to the given angle.
Set the Y component of a rotation matrix.
Computes the Z component of a rotation matrix.
Sets the z component of a rotation matrix.
Convert the euler angles to a matrix.
Rotate a rectangle about an axis.
Sets the angle of the slope.
Calculates a twist based on a motion matrix.
Sets the transformations for the rotation and translation of the rotation matrix.
Interpolates the se3_f64 plane around the given where vector.
Computes the SVD of a list of points.
Solves a point on a plane.
Returns the length of the side at the specified index.
Checks if a point is inside this convex hull.
Convert a conic general f64 to a real DR.
Convert a general f64 to a general f64.
Convert a conic general f64 to a parabola general f64.
Convert a parabola general f64 to a conic general f64.
Divides a vector by a scalar.
Converts a dMatrix to a matrix.
Convert a 2D double array to a 3D double array.
Sets the rotation and rotation parameters.
Returns the half-distance between the given numbers.
Returns true if the two lines intersect.
Checks to see if a point is contained in a plane.
Replies if two spheres intersect.
Interpolate between two points.
Extracts the quaternion from the q matrix.
Computes the convex hull of the given input.
Sets the rotation and translation of a se3 to no-motion.
Converts a se3 f64 to a homogeneous matrix.
Converts a Se2F64 object to a homogeneous matrix.
Define a rotation matrix in terms of x,y,z.
Checks to see if two se3_f64 rotations are identical.
Convert a lat lon coordinate to a unit vector.
Draws a circle of the specified coordinates.
Returns the radius of a circle in square coordinates.
Finds the closest point between two points.
Finds the closest point on a line to a given point.
Finds the closest point on the plane to the given point.
Finds the closest point on a line to a given point.
Finds the point on the triangle formed by vertices a, b and c.
Transforms a Se2F64 object into a new one.
Transforms a set of points.
Returns true if the quadrilateral equals another quadrilateral.
Returns the acute angle between two points.
Convert the source angle to the target angle.
Convert a double to another double.
Convert the source to the target.
Convert a double to another double.
Convert the components of two vectors to a matrix.
Convert a point to another.
Convert the source to the target.
Convert the source to the target.
Convert the source to the target.
Converts a 2D DMatrix into a 3D DMatrix.
Converts the specified input into the specified output.
Convert a se3 f64 plane to a world.
Converts a point from cartesian space to cartesian space.
Convert a plane to a world.
Returns true if this vector is identical to t.
Returns a copy of this vector.
Computes the squared norm of this vector.
Computes the t-coordinate of a line.
Returns true if this matrix is uncountable.
Checks if the given parabola is equivalent to this one within the given tolerance.
Computes the center of this triangle.
Returns the acute angle between two lines.
Checks to see if a point is infinite in a given tolerance.
Generate a list of random points.
Converts a double to a double.
Computes the difference of two vectors.
Check if two points are in the same sign.
Sets this rectangle to be equal to the specified rectangle.
Converts a rotated ellipse to an ellipse quadratic model.
Computes and returns the point of a rotated ellipse.
Computes the angle from a point p to a rotated ellipse.
Computes the tangent of the specified ellipse.
Selects a tangent line to the ellipse.
Gets the corner at the specified index.
Distance between two points.
Computes the Euclidean distance between two points.
Calculates the distance between two points.
Calculates the distance between a point and a plane.
Calculates the distance between a point and a cylinder.
Calculates the Euclidean distance between two segments.
Calculates the squared Euclidean distance between two segments.
Returns the Euclidean distance between the given quadrilateral and point p.
Returns the squared distance between the given quadrilateral and point p.
Calculates the Euclidean distance between two points.
Returns the minimum squared distance between a point and a polygon.
Calculates the distance from the origin to the line.
Returns the Euclidean distance between the supplied ellipse and p.
Returns the distance between the specified point and the specified ellipse.
Add a transform to the path.
Calculates the closest point on a line to a point.
Finds the closest point on the ellipse to the point p.
Computes the polynomial for a given offset and length, and stores the results in the given output
Creates a random point.
Computes the perpendicular canonical representation of a double.
Checks if two points are identical within a given tolerance.
Normalizes the vector.
Create a matrix from a vector.
Converts a matrix to a 3D vector.
Returns the Euclidean distance between the specified two points.
Sets the ellipse.
Normalizes the vector.
Returns the magnitude of the triangle formed by the three points.
Returns the triangle formed by the quadrilateral.
Calculates the simple determinant of a polygon.
Computes the mean of an array of numbers.
Orders a list of points in clockwise order.
Computes the normal for a set of points.
Checks to see if a polygon is convex.
Multiplies each element of this vector by a scalar.
Finds and returns the maximum absolute value.
Computes the Euclidean distance between the specified two points.
Returns the squared Euclidean distance between the specified two points.
Generate a list of random points in the plane.
Generate a list of random points.
Returns a list of random points with the given standard deviation.
Calculates the mean value of the list of points.
Calculates the mean of a list of points.
Invalidates all the JWTs associated with the given credentials.
Invalidate all jwts in the cache matching the given predicate.
Combines a collection of strings to a set.
Get the features for the server.
Get the config dropins features.
Get the server.xml features.
Parse the include node.
Parse a feature manager node into a set of feature names.
Downloads the JSON files for the given product id and version.
Reads a set of JSON files and returns a set of feature names.
Check if there are only open liberty features to install.
Returns true if target contains any string in the reference, ignoring case.
Get the next product version from the version string.
Extracts the symbolic name from a jar file.
Gets the map based install kernel jar.
Returns true if file1 is a replacement jar file, false otherwise.
Extracts the version from the given file name.
Compares two version strings.
Installs a new product.
Checks if the given artifact is a Spring Boot Uber jar.
Gets the arquillian property.
Check if the diff reporter is working in this environment.
Moves the tortoise back to the center.
Checks if two objects are equal.
Loads an integer from a string.
Throw pizza party.
Verifies the approvals of the turtle.
Swaps the blank cells of this puzzle with the target one.
Returns the total distance between all cells in the grid and the goal.
Printf to standard output.
Printf to standard output.
Make a number of fish.
Prints a variable to the standard output.
Returns a random integer uniformly in [a, b ).
Returns a uniform random number in [a, b ).
Returns the poisson coefficient for a given lambda value.
Returns the number of discrete elements in the specified array.
Capitalize the first character of a word.
Uncapitalize first char of a word.
Fixes the path by appending a character if it does not already exist.
Create a string representation of a JoinCriteria.
Gets the token sentence.
Extracts the token from the request context and stores it in the response.
Extracts the auth token from the cookie list.
Registers all Guice bindings in the given environment.
Recursively gets all the permissions of a role.
Add a projection with an alias.
Convert JobInfo to JobDetail.
Converts a trigger info to a trigger.
Sets repeat count and interval values to the given trigger builder.
Sets the start and end time of the given trigger.
Send mail to server.
Writes the content to the output stream.
Initializes the scheduler.
Returns a sorted list of all the fields of the given class.
Returns a map of all the fields of the given class.
Configures the token encryptor with the given configuration.
Generate attributes hash.
Generate the token string.
Sends a message to the sender.
Generates a strong password for the given user.
Get user by username.
Hashes a password using SHA-256.
Verifies the strength of the given account name.
Commits the transaction if the transaction is active.
Rolls back the current transaction.
Starts the transaction.
Check if the request is authorized.
Parses a date from an object field.
Returns an internal error response.
Restriction to check if a field is equal to the given value.
Apply a not equals restriction to a field.
Apply a less than constraint to an object.
Apply a less or equals than constraint to a field.
Apply a greater than constraint to a field.
Apply a greater or equals than constraint to a field.
Create a restriction that tests if the given field contains the given value.
Restriction to check if a field is in another field.
Creates a new namespace manager with the specified namespace and href.
Return a copy of this resource representation with the given content.
Creates a new resource representation with the specified relation.
Create a new ResourceRepresentation with a new value.
Creates a new resource representation with the specified namespace and href.
Checks if the given byte array can be decoded.
Encodes a string to a byte array.
Compares two Readers for equality.
Moves a file or directory.
Touches the given files.
Get the base name of a file.
Adds padding to the buffer.
Get the short name of a class.
Get all super types of a class.
Verifies a password.
Reads a string from system.in.
Appends a byte to the buffer.
Appends bytes to the buffer.
Creates a copy of the given array.
Add another fraction to this fraction.
Subtract another fraction.
Multiply this fraction by another fraction.
Returns the result of this fraction divided by the specified fraction.
Returns the maximum value in an array of longs.
Get the smallest of the set of long values.
Asserts that the given condition is true.
Fetches the forecast content for the given coordinates.
Fetches the content of a given location.
Fetches the content of a given location.
Finds the most recent forecast for a given number of hours from now.
Finds the nearest forecast for the given date.
Fetches weather data for the given forecast query.
Creates a simple forecast for the current date and time.
Creates the long term forecast.
Parses a string of coordinates into a Location object.
Fetches the content of the meteo service.
Creates the name of the wind symbol.
Finds the beaufort level for the given forecast.
Creates a new URI from the given string.
Returns true if the given date is a sunday.
Gets the point forecast for the given date time.
Returns the best fit period forecast for the given date range.
Fetches weather data for a specific location.
Fetches weather data for a given location.
Update the database.
Invokes a method on the given object as a String.
Acquires an object from a data source.
Gets referenced object.
Gets the wrapped object.
Reads the configuration from the configuration file.
Gets the isSubstitutorEnabled.
Create class iterator.
Get the decoder to use based on the bootstrap configuration.
Returns a list of services for the specified interface.
Gets the module.
Acquires an input stream from a data source.
Returns the size of the data source.
Gets the wrapped data.
Returns the component at the specified index.
Returns the name of the component at the specified index.
Returns true if this node is colored.
Execute a HSRE pattern.
Searches for a loop in the dfa and sfa.
Add a subexpression to the match.
Return true if the given subexpression is dissecting the given range.
Clones the outgoings of the old state to the new state.
Recursive method to find all the options in a subtree.
Marks a subre as inuse.
Computes the nfa node of a subre.
Parses a subre.
Deltraverse a state.
Draws a nonword character in the given direction.
word cloneouts.
Scans a number.
Parse a bracket.
Scan plain text.
Allocate a new lacon.
Generate code for a single character.
Performs a vector operation.
Get the color for a given color.
Get a pseudocolor.
Processes a subrange of the current color.
This method is called when the user wants to change the color of the nfa.
Set the colorchain of an arc.
Uncolor the color chain of an arc.
Dump all the color descriptors for debugging.
Lex the beginning of the string.
Interpolates the given string with the given interpolated string.
Get the color for the given codepoint.
Sets the initial state of the state machine.
Returns the number of times the last state set was cold.
Sets the eclass for a given character.
Returns the unicode code point for the given cclass name.
Sort arcs by carc color.
Create a new state with the specified flag.
Moves all outs from old to new state.
Moves all transitions from old to new state.
Copies all transitions from old to new state.
Copies all outgoings from old to new state.
Drops a state.
Frees a state.
Copy an Arc.
Deep-copy traversal of a state.
Fills bos and eos arrays with the pseudocolors of the parent.
Dumps the state of this NFA to the log.
Dump the state.
Dumps all the arcs in a state.
Appends the string representation of the arc to the StringBuilder.
Optimizes the NFA.
Analyzes the chain of outgoings and checks if there is a match.
Combines two arcs.
Marks all transitions reachable from pre to post, and drops all reachable states.
Marks the given state asreachable from the given mark.
Marks s as able to reach s.
Fixes empty chains in the NFA by removing empty chains that are no longer used.
Return true if the arc is empty.
Loads the rule parameters from a properties file.
Gets the rule interpreter plugins.
Get the report plugins.
Gets the rule selection.
Main entry point for the CLI.
Gets the error message from an execution exception.
Adds the standard options to the options.
Gathers the options for all tasks in the given task factory.
Gathers the task names from the given task factory.
Interprets the command line.
Parses the arguments and returns the command line.
Executes the given task.
Reads properties from the command line.
Prints the usage to the standard out.
Returns the directory where the Jqassistant is running.
Creates the plugin class loader.
Returns the ids of all cells that are contained within the specified bounds.
Get the ids of all cells intersecting the given bounds.
Returns the URI for the given target and parameters.
Add a route to this router.
Returns the number of routes in the path.
Add route first.
Add a route to this router.
Add a route to the last existing route.
Returns true if at least one of the paths in this path match any of the paths in the
Returns a criterion that matches when the given property is equal to the given value.
Gets the store file name.
Compare the folders.
Compares two entries.
Compare bookmarks.
Set the last modified time of the servlet class.
Returns the list of source dependents.
Finds a class by its name.
Parses the authorization header.
Returns a new instance of the function mapper.
Map a function to a method.
Get a function mapper for the given function name.
Looks up a function by prefix and local name.
Sets the values of this instance from a character array.
Resolves a variable in the current context.
Parse the given file and return a list of nodes.
Parse a jar file into a Node object.
Parse a tag file and return a Node.Nodes object.
Create the JSP compiler.
Get a resource as a stream.
Calculates the last modification time of all channels.
Basic find class loaders.
Checks if the given classloader is a parent classloader of this classloader.
Starts the loading of a resource.
Reads the stream header.
Paginates through a list of objects.
Parses a string into a MetaKey.
Fills the requirements.
Get the TagFileInfo for the given tag name.
Parse the implicit TLD for the given path.
Get the checksum for a file.
Returns the size of a file.
Validates a channel name.
Seeks the stream to the specified block number.
Locates a block by its uncompressed position.
Returns a list of Maven VersionedArtifacts for the given channel and artifact id.
Update the opt state and the reps.
Calculates the 1 byte price for a single byte.
Calculate the price of a long rep.
Calculates the match price for a normal match.
Thrown when decoding an expected byte.
Thrown when decoding an invalid byte.
Scan the tlds and create a mapping for them.
Scan the specified resource path for TLDs.
Add a new wrapper for the given JSP URI.
Returns the parent class loader.
Sets the given bytecode for the given name.
Returns the bytecode birth time for the given name.
Saves the bytecode of the given class to the given file.
Check the compile state of all jsps.
Initializes the classpath.
Starts the background thread.
Stops the thread.
Starts the background thread.
Finds a channel by its name.
Finds a channel by its ID.
Update the deploy group cache.
Copy the contents of the given InputStream to the given OutputStream.
Parse a JSP file and return a Node.
Parse the attributes.
Add an include node to the parent node.
Parse jsp attribute and body.
Add an attribute to this element.
Add a child node to this node.
Returns an iterator of the attribute names.
Returns an iterator over the children of this node.
Return an iterator of children with the given name.
Converts this coordinates to a base maven coordinates object.
Finds the alias for the given variable name.
Sets the thread.
Returns the current thread's output stream.
Finds a stream to write to.
Writes an optional field to the writer.
Writes a value to the writer.
Adds a new element to the parent element.
Adds a new element to the parent element with the given name.
Writes the contents of the buffer to the specified Writer.
Sets the writer that will be used to write output.
Reallocate the buffer to hold len characters.
Generate a map from a page of nodes.
Returns the state with the given key, or null if there is no such state.
Registers a model with the given storage provider.
Stream boolean.
Display a monitor of a job.
Check if the request is authenticated.
Finishes writing to the output stream and closes the stream.
Creates a new Gson instance.
Returns true if the message should be encoded in LZM format.
Returns the union of provided and extracted meta data.
Get the JSP exception from the request.
Check if the given coordinates has a checkSum extension.
Finishes the compression.
Returns the exception that caused this request.
Evaluates an EL expression.
Make prefix from OSGi properties.
Checks if the given path is an XML file.
Parse the tag file directives.
Load a tag file.
Remove all generated class files for the given class file name.
Set the URI Root.
Scan the specified directory for files with the specified extensions.
Locate the URI root of a file.
Moves the position to the next position.
Tests if the next characters in the string match the specified string.
Matches a string with optional spaces followed by the given string.
Skip characters until the specified limit.
Skips the specified string until the end of the specified string is encountered.
Skip until the end of the tag.
Parse a single token.
Pop a file off the stack.
Makes the coordinates unclassified.
Filters the list of aspect informations by the given predicate.
Get missing factory ids.
Set the schema resource prefix.
Set the DD resource prefix.
Convert the given node into a tree node.
Merges the errors of the binding result and its children into the given result.
Initializes the given binder by binding all initializer methods.
Scans the bundle context for channel aspect informations.
Unqualifies a path.
Invokes a custom tag handler.
Get a byte array from the cache.
Returns an array of ints of the specified size, filling the array if necessary.
Create an AetherResult from a collection of artifact results.
Get a resource as an input stream.
Validates the given PageData against the TagLibraryValidator.
Pushes a stream into the stack.
Get the encoding from a jar file.
Report a fatal error.
Get the real path of a resource.
Get the resource at the given path.
Get a resource as a stream.
Get the resource paths for the given path.
Logs the given message and exception.
Adds a filter to the configuration.
Returns the number of bytes required to store a dictionary buffer.
Get the memory usage of a dictionary.
Sets the preset dictionary.
Moves the window to the new location.
Fills the window with data from the given byte array.
Processes pending bytes.
Returns the number of bytes that match the given distance and limit.
Get match length.
Verifies that this buffer matches the specified matches.
Moves the read position to the next available space.
Recycles the output stream.
Flushes the buffer to the underlying stream.
Clears the buffer.
Flushes the output stream.
Closes the response.
Writes a string to the output.
This method throws a JasperException with the specified error report.
Make a key from a map of meta data.
Generate the class.
Compile the report.
Initialize the Java compiler.
Check if the system jar is in the web.inf directory.
Quotes a character so it can be used as an identifier.
Generate the class declarations.
Compile the tag handler pool list.
Generate the XML prolog.
Generate the common postamble.
Generate the postamble for the page.
Generate the HTML for the given page.
Generate the tag handler attributes.
Reads the properties from the stream.
Export a channel to a zip file.
Validate the XML view.
Get the next handler in the stack.
Parse an EL expression.
Selects a property from two groups.
Check if the given URI is a jsp page.
Prints a comment.
Prints a string.
Print a string in the current line.
Prints a multiline string.
Gets the expression in XML.
Check the validity of a scope.
Escapes a string so that it can be used in an XML file.
Validate the expressions.
Get the tag handler class name from the path.
Converts a path to a valid Java package name.
Splits the given path by the given pattern.
Makes a java identifier from a string.
Mangles a char.
Returns true if the given key is a Java keyword.
Adds a property to the map.
Convert a modifier to a string.
Returns the metadata as a sorted set.
Executes the update.
Get the basename of a file name.
Puts a value into the cache.
Loads metadata from the database.
Builds a collection of metrics from the given payload.
Resolves a number.
Writes the given object to the given output stream.
Get the TTL for the given rollup type and granularity.
Create the prepared statements.
Logs the given list of delayed metrics for the given tenant.
This method is used to track delayed aggregated metrics.
Reads a double or long value from the stream.
Puts an unversioned double or long into the output stream.
Returns an unmodifiable map of all properties.
Creates a new container in the blob store.
Schedule slots for eligible shards.
Clears a slot from running.
Add a callback to be executed when an event occurs.
Register a listener to be called once for an event.
Remove a listener for a given event.
Emits the given event with the given arguments.
Returns the listeners for the given event.
Returns the name of the remote file.
Appends a RollupEvent to the file.
Parses a timestamp from a file name.
Starts the server.
Get the correct rollup computer for the given type and granularity.
Creates a new instance of the IO class based on the configuration.
Puts the given TTL configuration into the given map builder.
Computes the maximum lengths of the headers and outputs.
Formats an array of headers into a header string.
Formats the output of the given formatters.
Register ZooKeeper metrics.
Sets the name of the thread pool.
Add a metric index.
Get the complete metric names from the metric index map.
Splits the metric name into tokens.
Asynchronously put a record in the database.
Calculates granularity when points are less than equal to requestedDuration.
Set the server time in milliseconds.
Get a list of unique cassandra hosts.
Get the maximum number of connections per host.
Returns an iterable of MetricColumnFamily objects.
Inserts a collection of metrics into the store.
Inserts the given metrics into Cassandra.
Returns the set of locators to use for the given context.
Returns the regex to grab the current and next level of the given query.
Starts the upload thread.
Stops the uploader thread.
Checks if the locator is currently in a batch layer.
Returns true if the locator is currently in the discovery layer.
Checks if the given locator is currently in the token discovery layer.
Returns true if the given locator has been inserted into the given slot.
Set the locator for a slot.
Returns a map of finer ranges to an iterable of ranges.
Returns an iterable that iterates over all ranges within the given interval.
Inserts a batch of metrics to the Keyspace.
Inserts the given metrics into the given column family.
Returns true if the given metric should be delayed.
Returns the bound statement for the given metric if it is marked as delayed.
Get the metadata values for the given locator.
Check if the Content-Type header is valid.
Check if the accept header is valid.
Inserts a batch of discovery metrics to the index.
Checks if all the fields are valid, i.e.
Do the check.
Returns a new extractor instance based on the configuration.
Checks if the operating system is supported.
Starts the process.
Stops the MQTT server.
Creates a new instance of PnSignalingParams with default constraints.
Adds a list of ice servers to the connection.
Adds a list of ice servers to the peer connection.
Send a message to a user.
Sends a message to all peers.
Gets the value of the weitereAdresse property.
Gets the value of the userDefinedSimplefield property.
Gets the value of the userDefinedAnyfield property.
Set the value of the API suchfelder.
Gets the value of the multimediaAnhang property.
Gets the value of the statusVBM property.
Gets the value of the statusi property.
Gets the value of the statusHP property.
Gets the value of the importmodus property.
Gets the value of the adressdruck property.
Liefert den Wert.
Liefert den Bodenbelag.
Sets the region.
Sets the value of the area property.
Sets the address.
Sets the value of the description property.
Sets the value of the rentCollectionPeriod property.
Sets the value of the furnished property.
Set the phone1 number.
Set the phone 2 number.
The name of the contact.
Set the phone info.
Sets the email address of the main account.
Sets the value of the ccEmail property.
Sets the external id.
The identifier of the agent.
Set the Epart value.
Sets the value of the jahrgang property.
Set the value of Gebaeudeart.
Specifies the buero typ.
Checks if the given string is a numeric value.
Setzt die gebiet.Gebiete.
Set the gruppe.
Sets the agent value.
Gets the value of the property property property property.
Sets the value of the stand property.
Gets the value of the userDefinedExtend property.
Sets the value of zeiteinheit.
Gets the value of the zimmer property.
Gets the value of the haus property.
Gets the value of the bueroProaxen property.
Gets the value of the gastgewerbe property.
Gets the value of the landUnforstwirtschaft property.
Gets the value of the sonstige property.
Gets the value of the zinshausRenditeobjekt property.
Gets the value of the terrain property.
Sets the value of the umfang property.
Sets the value of the wohnungtyp.
Returns the country code for the given country.
Gets the country is is.
Returns the ISO 3166 country code for the given country.
Gets the country is is.
Returns the display name of the country.
Translate a country name.
Gets the value of the anbieter property.
Sets the value of the category property.
Gets the value of the pdf property.
Set the value of Aktion.Aktionart.
Sets the value of the realestateitems property.
Sets the value of the pacht.
Upgrades a document from a previous version.
Gets the value of the content property.
Returns the names of the fields in this meta data type.
Sets the value of the blick property.
Sets the value of the pauschalmiete.
Sets the monatsmiete.
Gets the value of the parkplatz property.
Set the value of the lastenaufzug.
Sets the value of the zustand art.
Gets the value of the feld property.
Dump the contents of this recordset to the specified writer.
Returns the value at the given position, or the given default value if there is none.
Prints the contents of the buffer to a string.
Sets the value at the specified position.
Sets the value of the ctype property.
Sets the haustyp.
Gets the value of the energiepass property.
Sets the value of the keller.
Set the grundst type.
Sets the value of the Geschlecht.
Set the hallen typ.
Gets the value of the wiederholungstermin property.
Gets the value of the teilungsversteigerung.
Upgrades a document from a previous version.
Gets the value of the bevorzugt property.
Gets the value of the wunsch property.
Sets the value of the art property.
Sets the modus.
Gets the value of the email sonstige property.
Gets the value of the tel sonstige property.
Set the handel type.
Set the value of the API suchfeld1 parameter.
Set the value of the API suchfeld2 parameter.
Set the value of the API suchfeld3 parameter.
Gets the value of the row property.
Set the distanz zu sport.
Gets the value of the anhang property.
Gets the value of the objektKategorie2 property.
Gets the value of the objektzustand property.
Gets the value of the hausKategorie property.
Liefert den Ausstattungsqualitaet.
Gets the value of the vermarktungsart property.
Gets the value of the interessent property.
Sets the Wert value.
Set the ACKERLAND value.
Sets the value of the BunerWartungsland.
Sets the bootsstaende.
Set the buero.
Sets the camping.
Set the Doppelhaus value.
Sets the value of Einfamilienhaus.
Sets the value of the einzelhandel gross.
Set the value of the EinzelHandelKlein.
Sets the value of the garagen.
Sets the garten.
Set the gastronomie value.
Set the value of Gewerbe.
Sets the hotel.
Sets the value of the Industrie.
Set the value of the keine bebauung.
Set the kleingewerbe.
Sets the lager.
Setter for the mehrfamilienhaus.
Sets the value of the obstpflanzung.
Set the value of Parkhaus.
Sets the produktion.
Set the Reihenhaus value.
Set the value of the stellplaetze.
Sets the value of the villa.
Sets the value of the wald.
Sets the value of the anbieter.
Gets the value of the wohnung.
Gets the value of the grundstueck property.
Gets the value of the einzelhandel property.
Gets the value of the hallenLagerProd.
Gets the value of the parken property.
Gets the value of the freizeitimmobilieGerblich property.
Gets the value of the objektartZusatz property.
Gets the value of the stellplatzart property.
Sets the maxDauer.
Gets the value of the feature property.
Sets the zimmertyp.
Upgrades a Document to a new Version 2. 5.
Setter for the keineAngabe.
Sets the value of the Erdwaerme.
Sets the value of the solarheizung.
Sets the value of the pelletheizung.
Set the gas value.
Sets the value of the oel property.
Sets the value of the fernwaerme.
Sets the value of the strom.
Sets the kohle.
Generates a random string of the specified length.
Generates a random alphanumeric string of the given length.
Generates a random string of the specified length that contains only numbers.
Gets the value of the wohnungKategorie property.
Sets the benutzer.
Sets the value of the objekte.
Gets the value of the feed property.
Sets the moeb.
Gets the value of the serviceleistungen.
Sets the sub administrative area.
Set the city of the location.
Set the locality of this location.
Downgrades a Document to its previous version.
Upgrades a document from the previous version.
Sets the land typ.
Gets the value of the field property.
Upgrades a document from a previous version.
Gets the value of the ad property.
Set the gastgew typ.
Sets the value of platzart.
Gets the value of the datenVerkabelungung.
Liefert den Wert.
Gets the value of the image property.
Sets the value of the priceType property.
Sets the value of the newDevelopmentAvailability property.
Sets the directions.
Sets the value of the CO2Rating property.
Sets the value of the energy_rating property.
Sets the value of the viewingDetails property.
Sets the value of the propertyStatus property.
Sets the value of the pictures property.
Set the bebaubar attr.
Upgrades a document from a previous version.
Set the parken typ.
Sets the alter attribute.
Set the freizeit typ.
Sets the value of the telefonart.
Specifies the value of the emailart.
Sets the value of the overseasSales property.
Sets the value of the overseasRent property.
Create a user defined simple field.
Gets the value of the fehler property.
Sets the value of the erbpacht.
Gets the value of the stp_sonstige property.
Gets the value of the valuelist property.
Sets the value of the minDauer.
Sets the zins typ.
Gets the value of the photo property.
Sets the metadata for this feed.
Sets the projects for this feed.
Sets the properties for this feed.
Upgrades the document from the previous version.
Gets the value of the immobilie property.
Gets the value of the objekt property.
Gets the value of the fehlerliste property.
Gets the value of the status property.
Sets the sonstige typ.
Sets the value of the distanz.
Gets the value of the distanzen property.
Gets the value of the distanzenSport property.
Returns true if the given exception is a checked exception and compatible with the declared exceptions.
Set the bindings.
Binds the given namespace URI to the given prefix.
Remove a binding for the given prefix.
Checks if the content has an opening tag.
Consumes comment tokens.
Consumes a line of text.
Returns the index of the first occurrence of the specified token in the specified line, or -1
Initialize logging from the given location.
This method binds a namespace URI to the given prefix.
Adds an iterator to the list of iterators.
Adds an option.
Adds a string option.
Adds an integer option.
Adds a long option.
Adds a double option.
Adds a boolean option.
Parses the command line arguments.
Returns a new instance of the given class.
Decrements the concurrency count.
Sets the target object.
Prepares the invocation.
Finds a matching method for this descriptor.
Converts an integer into a string of unsigned digits.
Serializes an object to a byte array.
Deserializes an object from a byte array.
Get a child element by its tag name.
Get the value of the first child element with the given tag name.
Returns a list of all child elements of the given element.
Returns true if the node name matches the desired name.
Returns true if the node name matches the desired names.
Set the size of a string.
Monitors the release of a handle.
Adds a release listener entry to a weak reference.
Returns true if the monitoring thread is alive.
Calculates the city of the given mobile number.
Starts a prefix mapping.
Ends a prefix mapping.
Adds the given callback to the list of callbacks.
Parses the jar file into a tree.
Returns the text color of the specified item.
Sets the values of this label.
Get the color of a specific item.
Set the text size.
Returns the x coordinate of the item which is currently being displayed.
Get the intro text.
Returns the names of all keywords in the library.
Returns the arguments for the given keyword.
Returns the documentation for the specified keyword.
Starts the remote server.
Stops the Jetty server.
Starts the server.
Convert properties from a file to a JSON string.
Convert properties from a file to a JSON string.
Converts an input stream into a JSON string.
Converts properties to a JSON string.
Converts a map of properties to a JSON string.
Converts a map of properties to a JSON string.
Converts a map of properties to a string.
Convert properties to json string.
Get the radius of the shadow.
Returns a builder for OCSP Fetchers.
Finds the OCSP intermediate certificate from the given certificate.
Executes the task.
Preprocess all markdown files in the given directory.
Substitute variables in a template string.
Extracts the title from a list of strings.
Adds the given title to the given HTML file.
Replaces the variables in the initialContent with the values in the variables map.
Update the relative paths in the HTML.
Copy files from one directory to another.
Checks if the given path is valid.
Wraps the content of the slider at the specified index.
Fades this animation up by the specified duration.
Fades this animation down by the specified duration.
Calculates a percentage for the given width.
Adjusts the width of the view to match the view's width.
Create an intent to launch an activity.
Launches the activity and waits for it to finish.
Get a list of fact sheets.
Download file from response.
Build http client.
Create an access control entity.
Update a data model.
Create a full export.
Set the host to use for the token provider.
Sets the client ID and client secret.
Process a graph QL statement.
Get a list of bookmarks.
Adds a set of graph permissions to a graph.
Writes the graph permissions for the specified graph.
Mark logic dataset graph with specified rulesets.
Closes the connection to the server.
Executes a SELECT statement.
Create mark logic dataset graph.
Limit the number of threads per process.
Resize the image.
Rotate the image by the specified degrees.
Set the gravity value.
Remove all profiles from the system.
Sets the font with the specified style size and color.
Create a new GIF from a file.
Add an image to the command line.
Parses the given arguments into the given target object.
Prints usage information for the specified target object.
Extracts the time unit from a string.
Parses the given target object with the given arguments.
Executes the specified URL with the default settings.
Executes the specified slide file.
Interprets the given file.
Sort a list of rectangles by size.
Render the template text.
Get the xml file for the specified slide number.
Check if the mouse event is in the range of the screen.
Find elements that overlap vertically with the specified element.
Execute outbound operation on SQS queue.
Executes the outbound operation for the given message.
Finds a resource with the given name and options and returns it.
Gets the temp directory, creating it if it does not exist.
Creates a new log value map with the given key-value pair.
Logs the specified message at the TRACE level.
Logs a message and stack trace.
Logs the specified message at the DEBUG level.
Logs a message and stack trace if DEBUG logging is enabled.
Logs a message object at the INFO level.
Logs the provided message at the INFO level.
Logs an informational message.
Logs a message object at the WARN level.
Logs a message and stack trace if WARN logging is enabled.
Logs the specified message at the ERROR level.
Logs the provided message at the ERROR level.
Adds the line and method information to the context.
Starts a Steno wrapper.
Writes the given key-value pairs to the given JSON generator.
Serializes a throwable.
Returns a log value.
Get the stack trace element of the caller of a logging event.
Creates a new database in the temporary folder.
Check the mappings for the given position.
Parses the save attributes of a cell.
Save this data to an object in the context.
Reloads a row from the context.
Parse save attribute string.
Get the save attribute list from a row.
Gets the save attribute from list.
Set the attribute to save objects in a hidden column.
Sets the save attributes for a sheet.
Set the save attributes for a row.
Prepare the data context and attributes for a cell.
Formats a number as a string.
Put shift attributes.
Set the workbook to be used.
Gets the value of the wbWrapper property.
Gets the formula evaluator.
Recalculates the maximum column counts.
Load a web sheet from the given input stream.
Loads a web sheet.
Loads a work sheet with the specified tab name.
Export the workbook to a file.
Performs the actual save.
Submits the message to the server.
Populates the component with the default values.
Get the current sheet configuration.
Reads an object from an input stream.
Returns the locale for the given component.
Get the picture of the response.
Replies the cell helper.
Gets the pic helper.
Gets the validation handler.
Gets the chart helper.
Convert an array of ptgs to a list of shared formulas.
Convert a PTG to its original representation.
Convert a PTG to a PTG for use in a watch list.
Create a single ptg from a ptg object.
Assembles a list of rows from a list of rowsmappings.
Assemble rows list from mapping.
Builds a row for a PTG base.
Returns the background color of the plot.
Get a color from a SolidColorPR.
Finds the color of the automatic fill.
Gets the x.
Converts a CtrColor to an XssfColor.
Get the x component of a color.
Converts an xssf color to a color.
Get triplet from xssf color.
Get the bg color from a cell.
Finds the component name from the class of the given component.
Populates the attributes of the given component with the values from the fcell's input
Match para meter of method.
Sets a property on an object using reflection.
Returns the value of the specified property of the specified object.
Setup control attributes.
Find cell validate attributes.
Setup the charts for the faces cell.
Setup the charts for a cell.
Setup the faces cell picture.
Initialize the charts map.
Get the title of the pie chart.
Sets the style for the specified series.
Methode permettant de charger toutes les cours
Setup the bar style.
Initializes the chart data and anchors map.
Gets the id of a chart from its parent.
Initializes the anchors map.
Generate single xssf chart.
Transform to collection object.
Get the hidden full name from a row.
Rebuilds the upper level formula.
Setup upper level formula.
Build cell formula for shifted rows.
gather rows mapping by full name.
Change index number in shift map.
Changes the final length of the given full name in the given map.
Changes the index number in a hidden column.
Sets the given full name in the hidden column.
Gets the original row number in the hidden column.
Set original row number in hidden column.
Finds the rows mapping for the parent table.
Finds child rows mapping from the shift map.
Finds an item in a collection.
Builds the current config range.
Returns true if the given row index is in the static row list.
Returns true if the given row is a static row reference.
Replace the expression with the cell value.
Returns a map of the cell indices of the merged regions.
Returns the list of skipped cells in the given sheet.
Adds the cell index number of the given cell range to the given list of cell index numbers.
Builds a sheet comment from a list of alias.
Builds the cell comment from the list of aliases.
Builds the sheet configuration.
Gets the sheet configuration.
Builds a FormCommand from a SheetConfiguration.
Verify that the last cell is not blank.
Builds a sheet.
Check and repair the last row of the sheet.
Build command list from sheet comment.
Sets the parent for a child command.
Checks if the list of commands contains the each command.
Match command to sheet config form.
Copy template for tie commands.
Builds the command list.
Process a method line.
Process the command line.
Move the comment to the map.
Creates a config command.
Builds the attribute map from the command line.
Creates a SheetConfiguration object from a FormCommand object.
Sets the footer of the SheetConfiguration.
Sets the body of sheet configuration.
Sets the header of the given sheet configuration.
Deletes a row from the sheet.
Removes the ranges from the given list of full names.
Finds the list of full names that should be removed from a sheet.
Gets the EachCommand from the varparts.
Insert an empty object into the data context.
Deletes the object at the given index in the data context.
Prepare data in context.
Indexes the given config range into the given index map.
Checks if is row allow add.
Inserts a template for each row of the source config range.
Evaluates the given value and creates a TieCell if necessary.
Evaluate user formula.
Checks if the given string is a user-defined formula.
Create cell comment.
Evaluates an expression and returns the result as a boolean.
Remove all rows in a sheet.
Remove a single row in a sheet.
Remove cached cell for row.
Remove rows in the body.
Loads the picture of the cell with the given row and column.
Loads the chart from the current row and column indices.
Assembles the new value for the input field.
Gets the cell value with format.
Get cell string value without format.
Get cell string value with type.
Gets the cell string value with number type.
Sets the value of a cell.
Set the value of a cell as a string.
Sets the cell value to boolean.
Sets the value of a cell as a date.
Sets the value of a cell as a number.
Copies a range of rows from one sheet to another.
Copy a single row from one sheet to another.
Copy a cell from one sheet to another.
Copy a value from one cell to another.
Copy cell style from source cell to destination cell.
Clones a cell comment to a new cell.
Creates an anchor for a comment.
Create or insert a comment for a cell.
Matches the comment settings of the source cell to the target cell.
Get the VML drawing from a cell.
Extracts the shape of a cell from a VML source.
Get cell style from source cell.
Convert a cell to a faces cell.
Gets the row and col from the component attributes.
Gets the initial rows from the configuration.
Gets the faces row from the body row.
Gets the faces cell from the body row.
Get a POI cell from a sheet.
Gets the skey from a POI cell.
Get or add a tie cell to the map.
Returns the name of the current data context.
Evaluates the expression with the given context.
Evaluates the expression with the given context.
Writes the object to the output stream.
Remove a row from the table.
Merges the given rows mapping into this mapping.
Recovers the row data.
Gets the chart type.
Convert a string style to a Stroke.
Init chart data from xssf chart.
Sets up the chart data.
Initialize the xssf data.
Initializes the xssf drawing.
Get the chart id associated with a chart anchor.
Get chart id from child node attributes.
Build each object.
Save this cell's data in the context.
Recalculate all formulas.
Get cell with row and col from tab.
Gets the faces cell with the given row and col from the current page.
Restores a data context.
Get the last collection from a full name.
Returns true if the current data context needs to be restored.
Start restore data context collection object.
Shifts the row ref of this cell.
Set the first row of this cell.
Sets the last row and cell reference.
Build cells for a row.
Build single cell.
Reads the object from the given input stream.
Builds the category list.
Build a list of chart series from a list of objects.
Build chart series in list.
Get a list of colors from a list of DPTs.
Returns the DPT with the specified index.
Sets the command index map.
Get the pictrues map.
Get the pictures from a spreadsheet and store them in a map.
Indexes the picture in the map.
Generate picture style string.
Generate chart style string.
Returns the pattern that will be used to match against.
Renders the current chart.
Recovers this cell from the given sheet.
Gets the row style.
Get the cell's font style.
Gets the cell font color.
Get the cell's font decoration.
Get cell style.
Gets the column style.
Get the alignment from a cell.
Get the vertical alignment from a cell style.
Calculates the total height of a sheet.
Setup cell style.
Gets the input type from the cell type.
Gets the resource paths.
Gets the resource as stream.
Removes the prefix path from a resource.
Evaluate an input string for a given type.
Finds a bean by its name.
Join an array of shorts with a separator.
Rounds a double value to the specified number of decimal places.
Returns the type of the current tab.
Get the tab style.
Returns the default date pattern.
Returns the decimal separator for the default locale.
Gets the thousand separator by default locale.
Sets the tie command alias list.
Build the form watch list.
Builds the watch list for a cell.
Adds a static row to the watch list if it is not already in the watch list.
Checks if the given string is a command string.
Parses the attributes of a widget.
Gets the attribute key in map by cell.
Parse validate attributes.
Finds the position of the first pair bracket after the specified position.
Parse command attributes.
Parse input attributes.
Parses the validation attributes of a cell form.
Split attribute data by eual sign.
Parse special attributes.
Process calendar attributes.
Process select item attributes.
Gather special attributes.
Parse comment to map.
Finds the position of the first non-cell name in the given string.
Remove chars from string.
Returns the Excel column name for a given numeric value.
Convert a column name to an integer.
Get a cell by its reference.
Convert the given height units to pixels.
Checks if a string is a valid date.
Parses a date entry.
Returns true if the given string is numeric.
Returns true if the given character should be continue.
Sets a property on an object using reflection.
Compares two cells.
Returns true if child is inside parent.
Removes all the hidden columns in the specified sheet.
Delete the hidden columns in the row.
Deletes a cell from a row.
Processes a system event.
Refresh the status after a status change.
Validate with row and col in current page.
Validate by tie web sheet validation bean.
Check error message from object in context.
Validate all rules for a single cell.
Do validation.
Validates that the given cell is in the current page.
Validates all rows in the current page.
Validates a row in the current page.
Validates the row index against the current page.
Refresh the cached cells in the current page.
Refreshes the cached cells in a row.
Sets whether submit mode should be shown in the view.
Performs pre validation of the current sheet configuration.
Clear the cell comment map.
Load the header rows.
Load the header row without the configuration tab.
Fill the headercells list with the maximum number of columns.
Get the style for the header column.
Gets the style for the width.
Gets the column width style.
Initialize the tabs.
Loads the data from the database.
Refreshes the data for the given row.
Refreshes the data for the given cell.
Finds the index of the tab with the specified name.
Loads the work sheet with the given name.
Prepare work shee.
Sets the first index of the data table.
Setup the row info.
Loads the body rows of the sheet.
Refresh cached cell.
Process refresh cell.
Create dynamic columns.
Adds a row to the repeat list.
Assembles the body rows in a range.
Sets the unsaved status.
Returns true if the status is unsaved.
Finds the most specific common constructor for the given type.
Writes the contents of an InputStream to an OutputStream.
Writes a long to the writer.
Writes a string to a writer.
Convert traffic stats tag to actual traffic stats tag.
Adds a bitmap to the result.
Adds a file descriptor to the result.
Remove the parameter with the given name.
Adds a header to the request.
Clears the content of the response.
Call play service.
Binds the service.
Unbinds the service.
Drops the listener from the streaming playback.
Stores the image to disk.
Converts the contents of an InputStream into a String.
Reads the contents of the given stream into a String using the UTF-8 charset.
Sends the content to the output stream.
Returns the number of bytes available to be read from the input stream.
Closes the input stream.
Reads a byte from the input stream.
Resets the stream.
Sends the start part to the output stream.
Sends the content disposition header to the output stream.
Sends the content type header to the output stream.
Sends the transfer encoding header.
Send end of header.
Send the end of the file.
Sends an array of parts to an output stream.
Returns the length of the given parts.
Checks if the given URI is a redirect.
Sends a NOT_MODIFIED response.
Sets the date header to the response.
Sets the date and cache headers.
Sets the Content-Type header for the given file.
Closes the given channel.
Sends the disposition header to the client.
Sends the data to the client.
Installs the cache with the given version.
Ensures that the working directory exists.
Performs a get on the disk cache.
Creates an input stream to read the entry body.
Resets the bitmap to a new size.
Get the singleton SSLContext instance.
Validates a PKCS12 format key store.
Replace the current scale type with a new one.
Builds a PendingIntent for the given RequestBuilder.
Disconnects the given connection from the server.
Binds the service to the context.
Unbind the service.
Notify listeners that the view has changed.
Opens a channel.
On accept data response data.
Override onReset to perform processing specific to this interceptor.
Wait for the loader to complete.
helper method to set the text of a TextView or hide it.
Hides the soft input.
Show soft input.
Toggles the soft input state of the TextView.
Calculates the width of a pixel based on density scale.
Logs a severe error message to the logger.
Clears the cache for the given URL.
Populates the given view with an image from the given URL.
Cancels the image loading of a view.
Creates an ImageConsumer for the given view.
Sets the result image to a consumer.
Sets the loading image of the given image consumer.
Starts a new image loader task.
Mem cache image.
Releases a buffer to the pool.
Adds the headers and content to the URL connection.
Add a simple parameter to the request.
Connects to the target server using a workaround if the target is a URL.
Computes the MD5 hash of the given text.
Returns the string identifying the given CublasGM algorithm.
Returns a string identifying the given cublas status.
If the given result is different to cublasStatus.CUBLLA_STATUS_SUCCESS
If the result of cublas execution was successful, this method will throw a CudaException
Adds a new lexeme to the frequency table.
Adds an ending to the frequency table.
Returns the estimated frequency of a wordform.
Prints a short description of this token and its attributes.
Verifies and sets the kamols attribute.
Removes kamols markup formatting from a tag.
Performs a GET request to the Appd endpoint.
Returns the query string for this request.
Process a JSON node representing a list of metric data.
Parses a list of app infos from a JSON string.
Get the connection configuration.
Sends a request to SignalFx to fetch all the metrics for all the apps in the
Creates a new CodeListReader instance for GC04.
Creates a new CodeListSet reader.
Creates a new reader for GC04 column sets.
Creates a reader that parses a GCodeList document.
Creates a new CodeListSet reader.
Creates a new reader for a Gc10 column set.
Get the ID of the passed column element.
Get the value of the passed column.
Get the column with the passed ID.
Get all the IDs of the keys in the passed column set.
Get the key with the passed ID.
Check if the passed column is a key column.
Create a new column with the given parameters.
Create a new key with the given parameters.
Set the number of lines to skip.
Add a new column to this read options.
Creates a writer builder for CodeList documents.
Creates a writer builder for CodeListSet documents.
Creates a writer builder for a Gc04ColumnSet.
Creates a writer builder for CodeList documents.
Creates a writer builder for CodeListSet documents.
Creates a writer builder for a Gc10 column set.
Creates a genericode validator for code list documents.
Creates a new validator for GC04 code list set.
Creates a new Validator for a Gc04ColumnSet.
Validates a GCodeList.
Creates a new validator for CodeListSet documents.
Creates a validator for a Gc10 column set.
Sends the log back to the server.
Sets the context.
Get the current log level.
Get the capture state of the JVM.
Sets the maximum log store size.
Prepends the given metadata to the given message.
Appends additional metadata to the stack.
Create a JSON object.
Sets the user identity.
Reads the contents of a file into a byte array.
Starts location updates.
Increases the size of a region by the given number of entries.
Adjusts the sizes of a partitioned region.
Reduces the number of entries in a replicated or local region.
Reads a snapshot record from the stream.
Dumps the time stamps to the given print writer.
Returns the time values since the specified index.
Convert a file to a chart.
Get the pool for the given server name.
Get a pool for the given JMX locator.
Checks if the given region name is already on the JMX server.
Get a member from a JMX server.
Lists all the host names in the JMX cluster.
Looks up the host name in the properties file.
Checks if the given data is an exception and sends it to the given result sender.
Executes the given function and returns the result of the execution.
Flattens the input collection into the output collection.
Query for objects that match the given criteria.
Creates a new bridge for when an entry is put into the cache.
Creates a bridge for when an entry is deleted.
Handles the given exception.
Get the onRegionFilterKeyFacts array.
Executes the function.
Returns a list of all the hosts in the JMX cluster.
Executes the function.
Get the application name from a list of resources.
Initialize the security.
Gets the region with the given name.
Returns the region with the given name.
This method constructs the list of keys that are different on the target map.
Returns true if the specified time stamp must be inserted at the specified index.
Closes the input stream.
Dumps the contents of a directory into a set of cvs files.
Dumps the contents of a CSV file to a CSV file.
Reconnect to the JMX server.
Stops all members on the given host.
Shuts down a member.
Shuts down all members of the JMX server.
Shuts down the given redundancy zone.
Stores a pagination map.
Read results by page.
Imports the given region.
Checks if the remote locators and locators match.
Executes the function.
Builds the check sum map.
Returns the value of the column with the given name.
Returns true if the given type mirror is a type of the given type.
Serializes an object to a byte array.
Deserializes an object from a byte array.
Creates an instance of the given class.
Checks if the given element has a table id.
Check for fields.
Checks if the given type is a super type of the given element.
brew java.
Emits the get_id method.
Convert this query to an Observable.
Checks if the given column name exists in the table object.
Returns the given string, or the given default if the given string is blank.
Capitalizes the first character of the given string.
Returns true if the given type mirror is a type of the given type.
Add a DESCRIBE clause to the query.
Reads the current temperature from the device.
Returns the cursor method name for the given type.
Sends an error message.
Gets the icon fonts.
Get all icons.
Get the background decoration.
Raises the given value to the given exponent.
Set this matrix from an array of values.
Calculate the power of a number.
Calculates the root of a number.
Exponential cumulative distribution function.
Returns the Natural Logarithm of a number.
Newton's method.
Calculate the arctangent of a number.
Calculate the arctan taylor of a number.
Return the square root of a number.
Prints the given pi string to System.out.
Returns the string representation of the given timestamp.
Set the limits.
Puts a float into the buffer.
Prints the current state of the trace.
Adds a complex number to this complex number.
Subtracts a complex number from this complex number.
Multiply this complex number by another.
Divide this complex number by another.
Sets this matrix equal to the contents of another matrix.
Get a row of this matrix.
Get a column of this matrix.
Set this matrix from a two-dimensional array of values.
Returns the transpose of this matrix.
Add another matrix to this matrix.
Subtract another matrix from this matrix.
Multiply this matrix by a constant.
Multiply this matrix by another matrix.
Print this matrix to the specified print stream with the specified width.
Set the image resource to display on the page.
Validate the coefficients.
Computes and sets the next position of the iterator.
Clears the current state of the SLD.
Convert a styled layer descriptor to its XML representation.
Convert a raw SLD into a StyledLayerDescriptorInfo.
Validates a styled layer descriptor.
Validates the given SLD.
Returns the area of the specified rectangle.
Set this matrix from another matrix.
Set this matrix from a two-dimensional array of values.
Compute the inverse of this matrix.
Computes the determinant of this matrix.
Computes the L2 norm of this matrix.
Solve linear equation Ax = b.
Print a decomposition of this matrix to a print stream.
Perform forward elimination of a matrix.
Perform forward substitution on a column vector.
Perform back substitution on a vector.
Given two vectors b and x, improve b by x.
Converts a square matrix into a matrix.
Returns the next random von Neumann.
Do iteration procedure.
Computes and sets the next position of the iterator.
Checks if the current position is equal to the previous position.
Computes the next position of the iterator.
Check if an interval is valid.
Add the given amount to the current vector.
Multiply two integers.
Raise a number to a given base and exponent.
Do iteration procedure.
Gets the sld manager.
Convert a long value to a char array of the specified size.
Decomposes a set of bits into a set of bits.
Print this message to the specified print stream.
Validate the biased exponent.
Validate the unbiased exponent.
Validate the biased exponent.
Validate the biased exponent.
Returns the next random value in the range [0, 1).
Returns the next random value in polar form.
Calculate the next ratio.
Prime sieve boolean array.
Computes the set of factors for a given number.
Do iteration procedure.
Computes and sets the next position of the iterator.
Checks if the current position is equal to the previous position.
Sets the JavaFX application.
Sets the configuration from a file.
Sets the default configuration.
Initialize fxml.
Sets the Geocode request latitude and longitude.
Returns the host port pair of the given service.
Gets the applicable attribute definition.
Evaluates the filter against the attribute definitions.
Sanitizes a string so that it can be used as a tag.
Set the address of the geocode request.
Query for names.
Query for service instances by name.
Gets a list of all collaborations that are currently logged in.
Returns the meta data for a decimal value.
Change user password for logged in user.
Get all users.
Retrieves the gravatar for the given email address and size.
Retrieves the gravatar for a user.
Populate from elastic search json.
Returns the type of the field.
Creates a new flow step.
Updates a flow step.
Creates a new flow step.
Get a flow step.
Gets a list of all steps in a flow.
Deletes a flow step.
Deletes a flow step.
Populates the table fields.
Closes the connection to the database.
This method is called when a message is received.
Called by the connection manager when the connection to the server has been closed.
Get the echo messages from the return value.
Returns a list of all the items in the user's personal inventory.
Creates a new table record.
Deletes a form container.
Gets the history of a flow item.
Gets the form and field historic data.
Gets the most recent form and field historic data.
Lock a form container.
Unlock a form container.
Unlocks a form container.
Creates a new form container.
Convert role listing param to a list of Role objects.
Creates a new form definition.
Updates a form definition.
Creates a new form definition.
Creates a new form definition.
Returns a list of all the forms that have been created for the logged in user.
Deletes a form definition.
Gets the storage key from the form definition and field id.
Initializes the memcached client.
Shuts down the memcached client.
Parses a string into a long, returning -1 if parsing fails.
Converts a document to a PDF file.
Gets the field values for a form from the cache.
Creates a new flow step rule.
Creates a new flow step rule.
Creates a new flow step rule.
Updates a flow step rule.
Updates a flow step rule.
Updates a flow step rule.
Moves the specified flow step entry rule up.
Moves a flow step entry rule down.
Deletes a flow step rule.
Deletes a flow step rule.
Deletes a flow step rule.
Initializes the session with the given password.
Get all user queries.
Get all the roles.
Get the service ticket as hex upper case.
Creates a Field using a Text Mask.
Creates a Field object with a Text Barcode.
Create field decimal spinner.
Creates a new decimal slider.
Creates a new field.
Updates a field's text masked.
Updates a field's text barcode.
Updates a field's decimal spinner.
Updates a field's decimal slider.
Updates a field's table.
Gets a field by its name.
Gets the fields by form name and logged in user.
Gets the fields for a given form type ID and logged in user.
Deletes a field.
Force delete field.
Gets the meta data for a table field.
Updates a field's value.
Get or create an index.
Creates a new flow.
Updates a flow.
Get flow by id.
Get a flow by its name.
Deletes a flow.
Deletes a flow.
Update the field value.
Returns a list of all the global field values.
Gets the form definition id and title.
Decrypt an encrypted init packet.
Closes the connection and cleans up the database.
Init a new request.
Get the exception message for verbose mode.
Creates a new admin user.
Request an access token.
Get user profile information.
Executes the request and returns the JSON response.
Execute a form request.
Gets the JSON response handler.
Checks if the connection is still valid.
Get the CloseableHttpClient to use.
Get the path to the Fluid system trust store.
Closes the connection to the database.
Get the list of fluid items for a given job view.
Sends a form to a flow.
Called when the connection is closed.
Called when a message is received from the client.
Sends a JSON message to the client.
Sends a message to the user.
Closes the current user session.
Execute a native SQL statement.
Request a license.
Apply a license to your account.
Create a field with a text value.
Create a FieldParametricText.
Create field paragraphText.html.
Creates a Field object with a multiChoice select many.
Create field date time.
Update field text plain.
Update field paragraph text html.
Update field date time and time.
Update field decimal plain.
Update field value.
Create a field value.
Returns the configuration with the given key.
Returns a list of all configurations.
Creates a new attachment.
Retrieves an attachment by its id.
Deletes an attachment.
Force delete attachment.
Parses the jar file.
Set the class loader for the given JAR file path.
This method validates that the name and parent are not null.
This method checks if the parent is an xsd schema and if so, adds the name
Verify that the type and simpleType are not null and not null.
Get the schema node for the given file path.
If the parent element is an xsd schema element, throw an exception.
Verify that the parent is an xsd schema element and that the ref tag is present.
Converts the given value to an object of the given type.
Create a CLI interface implementation.
Create a CLI instance using an existing set of options.
Parses the given arguments into an instance of the given class.
Parses the given arguments using the given options.
Returns a builder for the given path.
Removes a previously-added footer view.
Returns the value of a point.
Computes 3D Perlin noise.
Compute 3D Perlin noise.
Interpolate a cubic spline.
Bessel function of the second kind of order 5.
Sets the bounds of this scale.
Processes the given CloudTrailEvent.
Processes the given CloudTrailEvent.
Gets the account id of the user that created the event.
Applies the rule entity to the whitelist.
Gets the event serializer.
Creates a new file in the underlying folder.
Creates a new directory in the temporary folder.
Restores all properties that have been previously set.
Creates the implementation.
Adds an object to the collection.
Sets the value of the named property.
Get a property as an array.
Transitions to the next state with the given name.
Processes the queue of objects to remove from the map.
Get the type for the given type.
Returns the parameterized type for the given type.
Gets the type variable.
Prints the stack trace of this throwable.
Prints the stack trace of this throwable.
Replace the remote object with a stub object.
Starts the background thread.
Sets the task to execute.
Calls the accepted task and returns true if the task was accepted.
Called when a task is rejected due to an exception.
Calls the started method of the task.
Calls the completed method of the task.
Stops the task.
Returns the implementation of the job.
Add a job to the job queue.
Convert a blocking mode name to a blocking mode value.
Reads the next object from the stream.
Copy the readers from the old catalog to the new catalog.
Creates a new catalog instance.
Load the system catalogs.
Parses a catalog from the specified URL.
Parse the list of pending catalogs.
Parses a catalog file.
This method is called when an unknown entry is found in the catalog.
Resolves the doctype for the given public and system identifiers.
Resolves the document.
Resolves a system identifier.
Resolves the local URI for the given URI.
Makes the given system ID absolute.
Normalizes a URI reference.
Encodes a byte into its hexadecimal representation.
Add a delegate to this catalog entry.
Create a new soft value ref.
Notify all registered listeners that a throwable has occurred.
Adds a throwable to the stack.
Creates the implementation.
Compares this timer task with the specified task for order.
Returns the value of this field as an object.
Get the object at the given index.
Sets the object at the specified index.
Removes objects from the queue and removes them from the list.
Adds a new entry type.
Get the entry type for the given entry name.
Get the number of arguments for an entry of the specified type.
Returns the entry argument at the given index.
Set the context class loader for the given thread.
Swaps two elements of the specified positions.
Remove the node at the given index.
Cleanup the timeout.
Loads the class with the given name.
Preloads the protocols.
Creates a new URL with the given protocol.
Check if the handler.pkgs property is set to true.
Returns the value of this field as an object.
Creates the implementation.
Make a synchronized counter.
Turns a counter into a directional one.
Returns true if the current namespace is in an extension namespace.
Check the result of a notification.
Get the object instance for the given name.
Substitutes a string with a map.
Splits the given string around the given delimiter.
Joins a byte array into a single string.
Default to string.
Get the value of this field as an object.
Creates a new cache entry.
Returns the value associated with the given key.
Returns the value associated with the given key, or null if there is no such entry.
Remove an entry from the cache.
Flushes the internal state of the cache.
Returns a list of valid keys.
Set the resolution.
Looks up and returns the timed entry associated with the given key.
Get the children with the given tag name.
Get a unique child by tag name.
Returns the first child element with the given tag name, or null if there is no child with
Get the content of an element.
Returns the unique content of the first child with the given tag name.
Returns the content of the first child with the given tag name.
Sets the maximum queue size.
Sets the blocking mode.
Set the blocking mode from a string.
Executes the given task wrapper.
Resolves an external system.
Resolve external public id.
Query the resolver.
Appends the elements of appvec to vec.
Resolve all the system ids.
Resolves a system identifier.
Finds all the local system catalog entries for the given system.
Reads a catalog from a file.
Reads a catalog from an input stream.
Connects to the remote file system.
Opens a connection and gets an output stream to it.
Help delete.
Get the valid header value.
Creates a snapshot of this entry.
Creates a logger for this class.
Appends a list of objects to the given buffer.
Returns the short name of the class.
Returns a string representation of this implementation.
Returns an iterator over the names of all properties.
Get the PropertyGroup for the given basename.
Gets the compatible constructor.
Makes a copy of a serializable object.
Dereferences an object and casts it to the expected type.
Initializes the context.
Update the JNDI cache.
Returns the key set.
Returns the entry set.
Remove a property listener.
Notify listeners that a property has been added.
Notify listeners that a property has been removed.
Notify listeners that a property has changed.
Notify listeners that a property has changed.
Returns a property name with the given prefix.
Loads the configuration from the specified reader.
Loads properties from the specified class name.
Get the PropertyGroup for the property with the given basename and index.
Returns true if the entity has been resolved.
Resolves a system ID to an input source.
Resolves a system ID to an input source.
Resolves the classpath name.
Sets the value of this attribute to the specified text.
Normalizes the given public ID.
Encodes a public ID as a URN.
Decodes a public ID from its string representation.
Replaces all occurrences of oldStr in str with newStr.
Starts the timer.
Stops the timer and returns the elapsed time.
Make a synchronized StopWatch.
Compares the specified object to this object.
Generates a hash code from a byte array.
Generates a hash code for an array of objects.
Creates the internal data structures.
Sets the value of the field.
Returns the next token from the token stack.
Initializes the format manager.
Adds a vertex to the list of vertices.
Sets the root vertex.
Remove a vertex from the graph.
Performs a depth-first search starting from the given vertex.
Visits all edges in the graph reachable from the given vertex.
Finds a vertex with the specified data.
Finds all cycles in the graph.
Normalizes a string.
Parses the given XML string and returns the root Element.
Parses the given XML stream and returns the root element.
Parses the given source and returns the root element.
Creates a new element in the owner document.
Resolves a qualified name to a QName.
Copy attributes from srcElement to destElement.
Returns true if the given node has at least one child that is an element.
Returns an iterator over all the child elements of the given node.
Get the text content of a node.
Returns the child elements of the given node with the given node name.
Returns the parent element of the given node.
Adds a resource to the waiting list.
Reads a catalog from a file.
Returns the local host address.
Sets the system property class value.
Display information about a class.
Provide a human readable description for the given class.
Removes the package name from a class name.
Extracts the package name from a class name.
Force load.
Gets the primitive wrapper.
Get all interfaces of a class.
Returns an array of all unique interfaces implemented by the given class.
Returns true if the given type is a primitive wrapper.
Attempts to instantiate an instance of the given class property.
Returns the getter for the specified attribute.
Returns the setter method for the specified attribute.
Convert a class name to a java class.
Returns the value of a system property.
Get the list of filenames for a property.
Retains all weak references in the set.
Returns an iterator over the elements in this set.
Creates a new URL instance for the given protocol.
Returns an unmodifiable set view of this map's entries.
Add a bound property listener.
Remove a bound property listener.
Checks if a value is null.
Finds a property editor for a given type name.
Registers an editor for the specified type and editor type.
Converts the given text into an object of the given type.
Gets the context class loader.
Checks if the given throwable is a deadlock exception.
Schedules a timeout.
Drains the queue until it is cancelled.
Create a new subcontext with the given name.
Lookup an object by its name and class.
Throws an exception if the given object is not of the given class.
Appends information about a class to a string buffer.
Returns the transition with the given name.
Read the properties from the properties file.
Query the system property for the verbosity.
Queries the list of relative catalogs.
Queries the system properties for the list of catalog files.
Get the list of absolute URLs to the catalog files.
Query the preference as public.
Query whether the static catalog should be used.
Resolves an entity to an input source.
Resolves a source for the given href.
Makes the given URI absolute.
Resolves the class for the given object stream.
Invokes the setter method with the given value.
Get the local name of an element.
Returns the namespace URI of the given node.
Returns the namespace URI of the given element.
Creates a list out of an enumeration.
Returns an input stream to read the contents of the file.
Loads properties from a file.
Reads properties from the input stream.
Adds an edge to the graph.
Adds an outgoing edge to this vertex.
Adds an incoming edge to the graph.
Returns true if the given edge is connected to this vertex.
Removes an edge from the graph.
Finds the edge between dest and this vertex.
Finds the given edge in the graph.
Returns the cost of this vertex and the destination vertex.
Writes the contents of a jar file to the output stream.
Returns true if there are more elements in the iteration.
Sends an event to all registered listeners.
Installs the JVM type provider.
Dispatches an action to the platform thread.
Gets the action stream.
Strict many to one stream.
Strict one-to-one mapping.
Returns true if the user is allowed to access the robots.
Verifies that the instruction was generated.
Returns the sum of the degree of all words in the corpus.
Returns the arguments to pass to the superclass.
Informs this class that data has been read from the given resource loader.
Checks if the datasource is valid.
Creates a list of the given type.
Connect JDBC on with url and driver class and username and password.
Execute the given SQL in the given database.
Query in with SQL.
Create a filter using an example object.
On upgrade.
Backup the contents of this table to a CSV file.
Restores a database from a CSV file.
Set the empty text of the list view.
Dump the contents of this table to a CSV file.
Unescapes a CSV string.
Returns a list of values from a CSV row.
Splits a CSV string into a Map.
Convert a map to a csv string.
Joins a list of strings.
Joins an array of strings into a single string.
Reads a model from the index.
Write the configuration to an index file.
Inspects the id field of the entity.
Returns the base DAO class for the given entity.
Returns the bind type for this converter's converter.
Import data from a CSV file.
Backup all tables to csv.
Restore all tables from CSV.
Writes the index file.
Create a query from this template.
Create a typed query from this template.
Renders the query.
Deletes the record with the given id.
Saves the given object to the database.
Update the given object in the database.
Add a constraint for finding items that do not exist in an array.
Create a subquery.
Returns the next active stack.
This method returns an empty intention stack.
Add a plan to the list of bindings.
Selects a plan based on a selection policy.
Selects a random plan.
Sets the plan variables for an agent.
Gets the result at the given index.
Returns the serialized form of the parents.
Returns the array of children.
Increases the length of the given byte array by the given amount.
Creates a new logger with the specified name, level and file.
Moves the step of the body.
Sets the goals.
Pause for user input.
Initialize the intention selection pools.
Initialize the intention selector threads.
Start the intention selection threads.
Shutdown all intention selectors.
Registers an extension.
Resets the state of the manager.
Loads an agent of the given class.
Processes the plans for a given goal.
Creates the agents in the catalog.
Loads a class from the classpath.
Loads an extension from the classpath.
Checks if two objects have the same name.
Prints the usage of this program.
Parses the command line arguments.
Parses the command line argument and options.
Evaluates a query on an agent.
Returns the object at the specified index.
Find an object by its name.
Push an object onto the stack.
Returns the value at the specified index.
Pushes an object onto the stack.
Removes and returns the last object in the queue.
Get the type of an object.
Returns true if the given belief matches the given query.
The main method.
Converts a string to a byte array.
Posts a goal to the stack.
Sends a message to an agent.
Sends a message to the named agent.
Returns an array of bytes representing the set of goals.
Create a new belief set.
Adds a belief to this beliefbase with the given name and tuple.
Evaluates the query against this belief.
Suspend the agent.
Returns the field with the given name.
Registers a number of random neighbours in the beliefset.
Builds a random name.
This method is run in the worker thread.
Check if the agent execution stack is valid.
Removes finished agents from the set of active agents.
Manages the goal of an agent.
Shuts down the pool.
Sets whether or not an agent is idle.
Move pin A to pin B.
Initializes the library with the given configuration.
Wait until the thread is idle for a period of time.
Finishes the running.
Return true if all the pools are idle.
Get the poolid of an agent.
Picks an expression from the expression list.
Sets the expression.
Create a join expression.
Recursively joins the given properties.
Finds or creates a join for the given property.
Returns true if the end of the range is reached.
Get the upload stream from the request.
Override handleRequest in order to perform processing for this interceptor.
Check if the given parameter is set to the given value.
Get the value of a parameter.
Parses the given expression into a map of parameter names to values.
Configures the transaction manager with the given configuration.
Gets the target file.
Writes the given artifact to the generated file.
This method is called after a managed instance is created.
Returns the declared constructor of the given implementation class.
Builds a string representation of the configuration descriptor.
Get the method from the interface.
Returns the type of the field.
Returns the value of the dependency.
Persists the state of this object to the database.
Sets the default links for the given rel.
Set the default link template.
Handles the response links.
Handles header links.
Handle links in the body.
Parse a link object and add it to the link templates.
Gets the value of the key in the map, creating it if it doesn't exist.
Handles the capabilities of the client.
Checks if the given method is allowed.
Registers the default instance processors.
Registers an instance factory for the given instance type.
Registers an instance processor.
Registers a new class processor.
Adds an argument.
Create the list of target files.
Convert this object to an XML string.
Initializes the producer with the given context and variables.
Returns true if the given template has a reference to the given file.
Create a parameterized template model from a reader.
Create a parameterized template model from a file.
Sets the request path.
Returns a stoppable observable that starts at the given index.
Creates a new scope with the specified string and value type.
Set the value of a field.
Adds a capture appender to the given logger.
Remove the given appender from the given logger.
Clears the contents of the specified appender.
Parses the model.
Resolves all proxies in the resource set.
Returns an array of files in the given directory.
Recursive method to parse a directory.
Replies if the model is fully resolved.
Find all e.
Set the model directories.
Sets the file extensions.
Set the model resources.
Reads the next record in the file.
Sets the designated parameter to the given array of strings.
Converts the given string to an instance of the given value type.
Merges the specified template with the specified artifact and filename.
Returns the model directory.
Returns the template directory.
Writes the document to the response.
Starts the web view.
Configures the window.
Print the given view.
Writes the contents of an InputStream to an OutputStream.
Invokes a method on an interface.
Attaches the handler to the request.
Detaches from the request.
Returns the Cookies associated with this request.
Dumps the contents of the HTTP request.
Returns a list of all registered meters.
Loads the configuration from the given EventStreamConfig.
Sets the remote host to connect to.
Get the value of the parameter with the given name and type.
Removes the prefix from the path.
Returns the first common ancestor of the two given directories.
Convert an absolute path to a relative path.
Convert relative path to absolute path.
Returns the depth of a directory.
Dumps an error to the log.
Sends an object to the client in JSON format.
Adds a template to the list of templates.
Adds a list of parameterized templates.
Initializes the model with the given context and variables.
Finds all the parameter templates that have a reference to the given template file.
Enables or disables the save button.
Confirms deletion and then closes the dialog.
Invoked when an element is deleted.
Creates a new instance of the SPI managed class.
Get the sorted list of files.
Get a summary of the results.
Returns the summary row for the given directory.
Get the summary row for a sub directory.
Creates a new instance of the specified SPI managed class.
Returns the setup class.
Returns a list of all model directories.
Returns the list of model resources.
Sets the list of candidates for the twin col select.
Loads an XML configuration from the given input stream using the given loader.
Called when an error occurs.
Returns true if the given formal parameter is an object.
Reads the contents of the request into an array of objects.
Reads an object from an input stream.
Extract the parameter from a fit cell.
Returns a java.util.Map containing the hints associated with this query.
Returns true if the request is for an X-Requested-With header.
Returns true if the user agent is Android.
Handles an element event.
Returns a list of properties that have an annotation of the specified type.
Returns the annotation on the given property.
Formats the message and logs it.
Lookup a whois domain.
Returns true if there is a parser for the whois host.
Returns the SPI managed class for the specified interface.
Get the SPI managed method.
Process a not contains exception.
Process a not contains event.
Serializes this response to an HTTP response.
Get cookie value by cookie name.
Add cookie with given name and value.
Remove cookie with given name.
Returns an iterator over the cookies in the request.
Returns the target file list producer.
Adds a field to this class.
Returns the compiled class.
Verify the response for the given token.
Gets the value of the file.
Ensures that the given URI has a trailing slash.
Get the Http servlet request.
Invokes a method on the managed class.
Executes a mutable transaction.
Executes an immutable transaction.
Returns the list of files in the directory.
Returns the last file in the directory.
Returns the concrete config for the given configuration.
Returns true if the request path starts with the specified path component.
Returns a list of artifact factories for the given model type.
Get the http session for the given instance key.
Serializes the contents of this file into the given HTTP response.
Reads the metadata from the server.
Override handleRequest in order to perform processing for this interceptor.
Tear down the database.
This method is called before the component is destroyed.
Handles the allowed methods.
Triggers the upload of the blob.
Deletes the endpoint.
Extract column parameters from a fit row.
Returns the argument names.
Schedules the given periodic task for the given period.
Schedules a timeout task.
Loads the configuration from the configuration repository.
Returns the next element in the iteration.
Configures the application.
Prints the welcome message.
Prints the banner to stdout.
Creates a new ria instance.
Registers a shutdown hook that will be called when the server is stopped.
Triggers the notification.
Triggers the endpoint.
Inserts a new row into the table and replaces it with a new row.
Get the counts for all files in the result set.
setter for score - sets.
getter for variants - gets.
setter for variants - sets.
getter for question_type - gets.
setter for question_type - sets.
getter for token - gets.
getter for depLabel - gets.
setter for depLabel - sets.
getter for semanticType - gets.
setter for semanticType - sets.
getter for sections - gets.
setter for sections - sets.
indexed getter for sections - gets an indexed value - A collection of objects of type uima
indexed setter for sections - sets an indexed value - A collection of objects of type uima
getter for uris - gets.
setter for uris - sets.
getter for types - gets.
setter for types - sets.
getter for target_type - gets.
setter for target_type - sets.
getter for rank - gets.
setter for rank - sets.
getter for queryString - gets.
setter for queryString - sets.
getter for candidateAnswers - gets.
setter for candidateAnswers - sets.
indexed getter for candidateAnswers - gets an indexed value -.
indexed setter for candidateAnswers - sets an indexed value - A collection of objects of type u
getter for query - gets.
setter for query - sets.
getter for hitList - gets A collection of objects of type uima.julielab
setter for hitList - sets.
indexed getter for hitList - gets an indexed value - A collection of objects of type u
indexed setter for hitList - sets an indexed value - A collection of objects of type uima
getter for abstractQuery - gets.
setter for abstractQuery - sets.
getter for search_id - gets.
setter for search_id - sets.
setter for docId - sets.
getter for offsetInBeginSection - gets.
setter for offsetInBeginSection - sets.
getter for offsetInEndSection - gets.
setter for offsetInEndSection - sets.
getter for beginSection - gets.
setter for beginSection - sets.
getter for endSection - gets.
setter for endSection - sets.
getter for aspects - gets  aspects of the passage.
setter for aspects - sets  aspects of the passage.
getter for triple - gets.
setter for triple - sets.
getter for sourceRelation - gets.
setter for sourceRelation - sets.
getter for subject - gets.
setter for subject - sets The subject of the triple.
getter for predicate - gets.
setter for predicate - sets.
getter for isObjUri - gets.
setter for isObjUri - sets.
getter for operator - gets.
setter for operator - sets.
getter for operatorArgs - gets.
setter for operatorArgs - sets.
getter for concept - gets.
getter for score - gets.
getter for text - gets.
setter for text - sets.
getter for id - gets.
setter for id - sets.
getter for name - gets.
getter for abbreviation - gets abbreviation.
setter for abbreviation - sets abbreviation.
setter for concept - sets.
getter for variants - gets.
setter for variants - sets.
getter for namedEntityTypes - gets.
setter for namedEntityTypes - sets.
getter for concept_type - gets.
setter for concept_type - sets.
getter for occurrences - gets.
setter for occurrences - sets.
getter for concepts - gets.
setter for concepts - sets.
getter for originalText - gets.
setter for originalText - sets.
getter for args - gets.
setter for args - sets.
getter for label - gets.
setter for label - sets.
Returns the index of the next clear bit, or -1 if there is none.
Sets the bit at the specified index.
Frees the given buffer.
Creates a new instance of the cache value class.
Rehashes an array to a new size.
method to generate HELM notation for all MonomerNotations.
Checks if brackets are in the correct state.
Parses the given string and adds the source and target units.
Returns a string representation of this annotation.
method to add a new element to the group.
method to check if the given MonomerId is valid.
method to check if the given PolymerId is valid.
Checks the connection details.
Checks if the given string is a valid group ID.
Checks if the given string is a repeating string.
method to check if the last element of the polymer is a peptide or rna.
Returns the JSON representation of the notation container.
method to get a simple PolymerNotation by it's id.
Gets the current grouping notation.
Returns the HELM representation of the Polymer.
method to generate the HELM for the PolymerNotation.
Returns the HELM notation for the connections.
Returns the HELM representation of the groupings.
Returns the annotation as a HELM string.
method to get all polymerIds and groupingIds.
method to get a PolymerNotation by it's id.
method to set the polymer elements.
Converts the given string to a JSON-compatible string.
Sets the annotation.
Sets the count.
method to decide which MonomerNotation to use.
method to decide which MonomerNotation is in group.
This method converts a string into a helm entity.
Returns a list of the current value.
Parses the given test string.
Sets the rna to the given value.
Defines the ambiguity of the grouping.
Get the statistics for this job execution.
Creates a new edge-collection from the given edge-collection.
Creates a new edge-collection from the given nodes and edges.
Initialize the incoming paths internal.
Sort nodes by reachability.
Subscribe to a pattern with a method name.
Get the number of subscriptions that match a pattern.
Unsubscribe from a pattern.
Send a return request to the server.
Send a return sync request to the server.
Polls the queue for messages.
Send a shutdown message to the server.
Returns the given exception if it requires non-local handling, otherwise throws it.
Releases the given run state.
Creates a worker thread.
Try to add a worker.
Registers the given worker thread as a worker.
Deregister worker thread.
Signals work to be done.
Runs a worker in a separate thread.
Await work.
Returns the common submitter queue.
Return the number of tasks that need to be completed.
Submits a task to the external queue.
Makes a common pool for all worker threads.
Waits for this task to complete and returns the result of the task.
Builds a string from the given code.
Get the statistics of the worker queues.
Creates a new instance with the given elements.
Reverses the order of elements in this list.
Returns true if all elements in the given iterable pass the given predicate.
Left folds the elements in the given collection using the given function starting at the given value.
Folds a function starting from a given value into a new value.
Pushes a task onto the queue.
Converts a nullable object to an object of type A.
Creates a new map from the given keys and values.
Returns an empty A with the given equality.
Creates a new instance with the same keys and values as the given elements.
Create a new instance with the given equality and keys and values.
Returns an unmodifiable set view of the keys contained in this map.
Normalizes a resource name.
Marshals a bound object to a string.
Returns a sub-sequence of this sequence.
Creates a binary search for a list.
Returns a binary search for the element in the given list using the given comparator.
Sends a message asynchronously.
Binds a route binding handler.
Binds a filter handler to this binder.
Returns true if the tag body should be shown for the specified role.
Returns the int value of the given long.
Remove duplicate Strings in an array.
Return a string that is like the given string.
Runs the task and waits for it to finish.
Logs the given user in using the given password.
Gets the login user from the login session.
Checks if the given password matches the given password.
Saves a user in a cookie.
Generate the login key for the given user.
Returns a cookie user object for the given cookie uuid.
Forwards the request to the given path.
Returns the value of a request parameter as a long.
Log a debug message.
Get the caller information.
Converts a char array to a simple byte array.
Converts a char sequence to a simple byte array.
Converts a byte array to a simple char array.
Converts a char sequence to a byte array.
Lookup the locale data for the given locale code.
Schedules the calling task to be executed in the given number of seconds.
Crops the given image to the given coordinates.
Invokes the given invocation in the given time.
Invokes the given direct invocation in a new thread.
Gets the rest operations.
Renders an error in the AJAX response.
Renders an AJAX forbidden error.
Renders the given view using the attributes defined in this instance.
Parses the path from the URL.
Renders the data tables.
Render the empty data tables.
Sets the list of items to be displayed in the combo box.
Sends a redirect to the given URL.
Returns a list of all bindings of this type.
Get the name of the current method.
Compacts the memory.
Propagates the given metrics to the local metrics collection.
Encodes a string to a base 64 string.
Copy the contents of the given InputStream to the given OutputStream.
Copy the contents of the given InputStream to the given OutputStream.
Copy the contents of the given InputStream to the given Writer using the default encoding.
Copy the contents of the given Reader into the given Writer.
Copy characters from a reader to a writer.
Copy the contents of the given Reader into the given OutputStream using the default encoding.
Copy the contents of the given Reader into the given OutputStream using the specified encoding.
Compare two input streams.
Compares two Readers.
Applies all registered stages to the given input.
Returns the SQL for the given group name and SQL ID.
Unmarshals a string to an object of the given class.
Unzips the given file to the given destination directory.
Creates a new instance of the permission dialog fragment.
Override onResume to set the onKeyListener of the dialog.
Registers a converter for the given core value type.
Returns true if the given value matches the regular expression.
Returns true if the given value is a phone number.
Checks if the value is a phone number.
isBirthDay returns true if string value is a valid birthday.
Checks if a value is a valid URL.
Apply the pipeline to the context.
Encodes a string using base 64.
Decodes a Base64-encoded string into a byte array.
Converts a hexadecimal string to a byte array.
Reads properties from a UTF-8 stream.
Reads the content of an InputStream as a String.
Read the content of a file as a string.
Writes a byte array to a file.
Copies the given source directory to the given target directory.
Serializes a DOM Document to a String.
Parses the given file into a DOM.
Parses an XML string into a DOM.
Parses an XML document from an input stream.
Validate signature.
Signs the given document with the given public key and private key.
Returns true if the given class is cache-safe.
Returns true if the given class is an array and its component type is primitive.
Checks if is primitive wrapper array.
Resolves a primitive if necessary.
Checks if a type is assignable from another type.
Returns true if the given value is assignable to the given type.
Returns an array of all interfaces that the given instance implements.
Returns all interfaces for the given instance as a set.
Writes the configuration to a temporary file.
Returns the variables for the given URI.
Add a permission with a custom message.
Binds the specified implementation to the specified extension point.
Returns the builtin object for the given type.
Returns the primitive value for the given type.
Convert the given object to the given type.
Convert a user defined value type to the given type.
Queries a request parameter.
Adds a cookie to the request.
Allows derived classes to override session specific behavior.
Initialize druid database.
Adds a parameter to the query.
Sets the given parameter to the given value.
Shows a dialog with the specified permission bean.
Check if all values are granted.
Returns true if any value is denied.
Find records matching the given SQL query.
Finds the first record matching the given SQL query.
Returns true if the given column is new, false otherwise.
Returns true if the given method declares an exception of the given type.
Processes the queue of soft values.
Puts a key-value pair into the cache.
Matches a string against a pattern.
Reads the command line arguments for the given interface.
Gets the protobuf entity.
Checks if is protobuf entity.
Returns a map of all fields of the given class, including those inherited from the superclasses.
Gets the protobuf getter.
Returns the setter name for the given field.
Gets the thread-local mapper.
Returns the thread's JSON factory.
Convert an object to a JSON string.
Sets the borders of this rectangle.
Returns the user record for the given domain and user name.
Copy out attributes from one object to another object.
Copy out attributes.
Add this app to a frame.
Saves an access token.
Gets the access token.
Returns the default class loader.
Returns the resource with the specified name.
Gets the resource as stream.
Gets the class as stream.
Initialize this URI from another URI.
Initializes the scheme for this URI from a URI specification.
Initializes the path.
Sets the scheme of this URI.
Sets the userinfo.
Sets the host.
Set the port for this URI.
Appends the given path to the current path.
Sets the query string for this URI.
Sets the fragment for this URI.
Returns the URI of this URISpec.
Create a prepared statement using an iterator.
Initialize this applet.
Get the muffin for this param.
Set the muffin for this param.
Returns the contents of the clipboard.
Set the clipboard contents.
Load services by type.
Sets service parameters to a parametrized operation.
Get the service parameters from a parametrized operation.
Finds a parmetrized service by its id.
Find a service by its class.
Parses a query response and converts it to the specified response class.
Returns an iterator over the elements in this buffer.
Returns the encoding of the given XML string.
Creates a new Connection proxy instance.
Get the authorization from the authorization url.
Visit a package declaration.
Generates the code for a class declaration.
Visit an executable declaration.
Get an option from a map.
Returns a filter that accepts all modifiers in the given collection.
Returns a filter that accepts only declarations of the given type.
Returns a declaration filter that returns true ifff1 and f2.
Returns a declaration filter that accepts only those declarations that are accepted by both filters.
Returns the map lazily initializing it if necessary.
Makes the given constructor accessible.
Prepares an object query.
Replaces a slash with a hyphen.
Converts a byte array into a hexidecimal string.
Returns the indexes for the given name.
Parses a named SQL statement.
Convert a collection of non-protobuf entities to their protobuf representations.
Sets the value of a field in a protobuf.
Sets the given setter on the given POJO.
Check if this file should be included.
Creates a new instance of the ResultSet class.
Creates a map from a list of labels to their index.
Gets the generic supertype.
Polls from the queue.
Runs the poll individually.
Gets the declared field.
Returns all declared methods of the given class and it's super classes.
Returns the declared Method object for the given method name and parameter types.
Returns an array of all methods that are annotated with the given annotation.
Returns all constructors that are annotated with the given annotation.
Dumps a byte to stdout.
Returns the index within this string of the first occurrence of the specified substring, ignoring case.
Removes all chars from a string.
Cleans up the state of the state machine.
Initialize the Audit component.
Initialize the message queue.
Initialize password validator.
Initialize password authenticator.
Resolve locale code.
Looks up a locale by its code.
Create a new statement proxy instance.
Removes all of the elements from this set.
Pops an element off the stack.
Returns an input stream for reading this file.
Parses the command line arguments into a properties object.
Returns true if tokens match patterns.
Moves this rectangle to the specified coordinates.
Checks if this rectangle encloses the specified rectangle.
Check if this rectangle contains the specified point.
Computes the intersection between this rectangle and another.
Returns the union of this rectangular and the specified rectangular.
Replace the x-coordinates of this rectangular with the specified rectangular.
Replace the y-coordinates of this rectangular with the specified rectangular.
Returns the total number of columns of the specified column.
Returns the total number of rows in the matrix.
Returns the bounds of the specified cell relative to this rectangle.
Calculates the number of columns.
Calculates the number of rows in the table.
Unwraps a throwable.
Starts the JVM and waits for its termination.
This method is called when the code has been updated.
Copies and resizes the code buffer.
Initializes the service.
Returns a copy of this query parameter.
Adds a child to this node.
Clears the children of this node.
Returns the next element in the iteration.
Appends the given functor to the end of the body.
Adds instructions and this to the parent.
Invoked when a bound property is changed.
Register a work panel.
Update the component flags that are present in the component map.
Create a new instance of the class with the given parameters.
Returns true if the given term should be evaluated.
Optimizes a list of instructions.
Compares two Collection objects.
Processes the request.
This method is called at the beginning of a tag.
Renders a button.
Resets the state machine for training.
Initializes this instance of the learning engine.
Returns the value associated with the given key.
Returns the index of the first occurrence of the specified key in this dictionary, or -1 if
Sets the value at the specified index.
Removes the specified key and its associated value from this map.
Removes the value at the specified index.
Returns true if the given property exists.
Set a property on the callee object.
Get a property from the callee object.
Checks if the given primitive type is assignable from the given primitive type.
Initializes the class with the given callee.
Returns the decision tree for the given state.
Initialize lookup tables for this decision tree.
unify a query with another query.
unify internal boolean.
Compiles a query from the given clause.
Finds the maximum number of arguments in a clause.
Allocates the permanent registers for the given query clause.
Gathers position and occurrence information from a clause.
Displays a compiled predicate.
Displays a compiled query.
Converts a byte buffer to a string.
Returns the value of the attribute as a string.
Sets the value of the attribute.
Read the content of a term.
Checks if a class exists and is loadable.
Returns true if the given class is a subclass of the given parent.
Checks if parent is a subtype of child.
Returns true if the given class is a subclass of the given class.
Returns the class object for the given class name.
Creates a new instance of the given class.
Creates a new instance of the given constructor with the specified arguments.
Calls a method with the given name and parameter types and returns the result.
Calls a method on an object.
Call a static method.
Gets the constructor.
Find all matching setters for a property.
Creates a new transactional wrapper for the specified queue.
Creates a new queue wrapper for the specified queue and collection.
Gets the type from an object.
Resets the state of this object to the initial state.
Creates a new instance of the type with the given name, min and max.
Adds a time zone to the list of time zone names supported by this end point.
Adds a timezone to the list of supported timezones.
Adds a table to the schema.
Finds all free variables that match the given query.
Finds all free variables that match the given query.
Compares two search nodes.
Writes an object to a file.
Reads the contents of the given stream into a String.
Creates a new search node.
Generate the indent for the trace.
Returns true if the given var is the last body term in the argument list.
Chooses the best property to decide on.
Returns a new functor with the specified name and arguments.
Returns a new variable with the given name.
Executes the action with error handling.
Returns the element at the specified position in this list.
Set the texture to use for the gradient.
Override paint to enable double buffering.
Creates a buffered image of the specified size.
Create a buffered image of a binary image with the given pixel bits.
Creates a buffered image with the specified pixel masks.
Sets the queue search algorithm.
Runs the prolog parser.
Creates a new clause.
Parses a list of terms.
Parses a functor declaration.
Consumes a variable.
Parses an integer literal.
Parses a double literal.
Parses a string literal.
Peeks ahead and consumes a directive.
Interns an operator name and its associated arity.
Initializes the built ins.
Consumes a token of the given kind and returns it.
Consumes the next token of the given kind.
Binds the service.
Rollbacks the transaction.
Collects the elements returned by the iterator into the target collection.
Convert time of day to ticks.
Convert ticks to years.
Converts ticks to milliseconds with specified number of hours.
Converts ticks to milliseconds with the specified number of minutes.
Converts ticks to milliseconds with specified seconds.
Returns the number of ticks in the specified year.
Gets the ticks with a month set to a specific value.
Returns the given ticks with the given date set to the given value.
Returns the number of milliseconds since the epoch for the given year.
Reads a byte block from the source.
Returns the entry associated with the given key, or null if no such entry exists.
Copies the given entry into a new entry with the same key as the given entry.
Rehashes the hash table.
Called when an action is performed.
Sets the nextAvailable flag to the given value.
Sets whether prev available.
Sets the finished flag.
Returns an instance of the wam library using the provided symbol table.
Returns an iterator over all variables in this set.
Returns the expected probability of the given probabilities.
Generate probabilities for a given distribution.
Set the ticks.
Performs the forward action.
Creates a new URL from the given string.
Returns information about the current request.
Returns the headers of the request.
Get the cookies from the request.
Returns the request parameters.
Returns the request scope.
Returns the page scope.
Returns the current session scope.
Returns the application scope.
Returns the user's principal.
This method is called at the beginning of the tag.
Returns an HTML table with the given property name and values.
Set the current screen state.
Walks the term tree.
Compares two search nodes.
Updates the values of this property from the given registers.
Notifies the active listeners of the changes.
Leave a clause.
Returns true if the given context is in a top-level functor.
Sets the arguments.
Returns the fixity of the relationship.
Returns true if the associativity of this element is infix.
Compares this symbol with the specified symbol for order.
Invoked when a bound property is changed.
Register a work flow controller.
Returns an enum attribute factory for the specified class.
Creates a component factory for the given class name.
Returns the storage cell for the given variable.
Returns true if the variable is bound.
Set the attribute set for a column.
Sets the row attribute.
Returns the column attribute for the given column index, or null if the column is not in the
Returns the row attribute or null if there is no row attribute at the specified index.
Internal insert method.
Creates a new instance of the type with the given name.
Creates a new instance of StringPatternType.
Returns true if the given value is an instance of the given type.
Creates the initial context for the given term.
Updates the registers of this WAMLayout.
Get the value of this group.
Finds the goal path.
Caches a block of objects in the cache.
Get the properties for the given resource.
Set the current rate.
Reads data from the source into the given byte array.
Skips over and discards the next n bytes.
Gathers the disjuncts of the given disjunction.
Reads an int from a byte array.
Writes an integer to the byte array at the given offset.
Writes the 24 bit integer to the byte array at the given offset.
Reads a 24 bit integer from the byte array at the given offset.
Reads a short from the byte array at the given offset.
Writes the given short to the given byte array at the given offset.
Gets the child state for the given operator.
Returns an iterator of valid operators.
Returns the id of this object.
Returns the value of this property.
Set the value of this attribute.
Splits a string value into an array of strings.
Convert an array of strings to a list of strings.
Converts the given name to camel case.
Lists the handlers and appends them to the buffer.
Resolve the call point for the given functor name.
Sets the code address for the given functor.
Returns true if the given attribute is a sub-category of this one.
Returns the id of this object.
Returns the value of the attribute at the specified level.
Returns the last value of the path.
Writes the object out to the stream.
Reads an object from an input stream.
Computes the horizontal h for a given search node.
Returns c mod bucketSize.
Add an error message to the list of errors.
Writes a string to the output.
Classifies the given state.
Compares two objects based on their partial ordering.
Returns an iterator over the elements in this collection.
Returns the base 2 logarithm of an integer.
Returns the log base 2 version of the given value.
Log base 10v2 int.
Returns the log base 10v3 of the given value.
Returns the base 10 logarithm of the given value.
Returns the integer log base 10v2 of the given value.
Returns the number of characters in the specified integer.
Gets character count int.
Gets the character count decimal.
Sets the functor's head.
Emmits the given code to the given machine.
Sets the current screen.
Evaluates the expression.
Gets the key iterator.
Create the array properties.
Set the current rate.
Evaluate the operator.
Finds the properties.
Gets the properties using the system property.
Get the properties using the classpath.
Get the properties using the current working directory.
Called when a functor leaves the tree.
Returns the value of this term.
Sets the term to bind to.
Creates a new priority queue.
Clean up resources.
Appends the given logging event to this logger.
Fire the connector.
Initialize the printers.
Commits the transaction.
Rollbacks the transaction.
Request a write operation.
Adds a cached write operation to the cache.
Acquires a global write lock.
Releases the global write lock.
Enlist with the current session.
Enter a rule set.
Inserts the specified element into this queue waiting up to the specified wait time for space to become
Retrieves and removes the head of this queue waiting up to the specified wait time for space to become
Inserts the specified element into this queue.
Returns the next object from the source.
Returns the value of the given property as a boolean.
Returns the value of the given property as an integer.
Returns the value of the given property as a long.
Create a call to a mixin.
Sets the addition visitor.
Backtracks to the last unexamined successor.
Retrieves the code for the given WAM call point.
Executes the query and extracts the bindings.
Decodes a heap term.
Captures the current state of the camera.
Restores the state of the given object to its original state.
Get the value of an attribute on a class.
Set the value of the specified attribute on the specified class.
Get all field names of a class.
Executes the task.
Inserts an element into the queue.
Creates a new search node.
Creates a new priority queue.
Returns a term walker for the given visitor.
Creates a term walker that accepts the goal of a unary predicate.
Creates a new term walker for positional terms.
Creates a new term walker for the goal term of a unary predicate.
Creates a new term walker for positional terms that will traverse backwards from the current node of the
Reads properties from an input stream.
Reads properties from a file.
Get the properties for the given URL.
Reads properties from a file.
Computes the size of the grid.
Initializes the font metrics.
Add a PropertyChangeListener to the listener list.
Add a PropertyChangeListener for a specific property.
Remove a PropertyChangeListener for a specific property.
This method is called when a bound property is changed.
Creates a new instance of the type with the given name, minimum and maximum values.
Smoothly fades the specified color delta to the specified group.
Shows a horizontal bar to the user.
Shows the left bar.
Shows the right bar.
Sanitize radio controls.
Waits for the specified task to complete.
Waits for the given timeout for the given object to be available.
Executes the task.
Append the classpath to the command line.
Creates a new instance of the type with the given name, date range.
Prints an introduction to the console.
Initializes the console reader.
Evaluates the given sentence.
Evaluates the query and returns the result.
Get the multi-type data.
Gets the multi type data.
Gets the multi type data.
Get the multi-type data for the given short.
Returns the i'th multi type data.
Gets the multi type data.
Get the multitype data for a given float value.
Gets the multi type data.
Get a MultiTypeData object from a string.
Gets the multi type data.
Sets the value of the named attribute in the current scope.
Clears up to the given key.
Expands the value for the given key.
Internal insert method.
Compares two search nodes by their cost.
Parses the given array of terms and returns the corresponding array of terms.
Returns the operators with the given fixity.
Resolves the fixity of the candidate to the fixity of the fixities.
Makes a new node in the search tree.
Gets the errors.
Get the options in force.
Returns a usage string.
Adds the trailing pairs to the given properties object.
Add options to the given properties object.
Adds an option to the command line.
Check the argument format.
Compares two iterators using the given mapping function.
Returns an enumeration of the available options.
Returns an array of strings that represent the options of this Stemmer.
Set the selected stemmer.
Gets the actual stemmer.
Returns the stemmed version of the given word.
Runs the stemmer with the given arguments.
Creates a new type with the specified name, minimum and maximum values.
Resets the state of this object to the initial state.
This method is used to generate a tracing frame for the environment.
Returns a string containing the trace of the choice frame.
Calls the function with the given arity.
Get the next stack frame in the stack.
Navigates to the next page in the list.
Follows a path from the given address.
Follows a path from the current node.
Tidy up the trail.
unify if a1 and a2 are equal.
unify a constant.
Prints a single slot.
Get a random start state.
Checks if the given state is solvable.
Gets the child state for the given operator.
Returns an iterator of valid operator names.
Returns a string representation of the board.
Swap the tile coordinates.
Convert a string to a list of characters.
Convert a list of characters to a state.
Converts a log record into a log4j message.
Convert Level to Apache Log4j Level.
Adds an element to the queue to be requeued.
Creates a new requeue element and adds it to the queue.
Increments the size and count for the given record.
Decrements the size and count of the given record.
Signal signal on size threshold crossing.
Returns the enumeration for the specified name.
Returns the enumeration of bindings for the specified name.
Add a property to the environment.
Remove a property from the environment.
Runs the garbage collector.
LITERAL, LITERAL, LITERAL, LITERAL, LITERAL, LITERAL,
Resolves a mixin reference.
Pushes a variable reference to the stack.
Set the maximum height for a row.
Updates the max column width.
Makes a search node for the given successor.
Executes the forward action.
Substitute built-in symbols in the given clause.
Initialise the symbol table for the given clause.
Performs a top-level check on the given clause.
Returns a string representation of this list.
Evaluate the operator.
Transitions the thread to running state.
Signals the worker that it is in the process of being killed.
Indicate that the server is terminated.
Inserts an element into the queue.
Compares two nodes.
Inserts nodes into the tree.
Restarts the server.
Returns a set of objects that match the given search method.
Find all instances of the given search method in a bag.
Finds all solutions using the given search method.
Returns the next element in the iteration.
Restores the values of an object from a map.
Returns the value of the specified property on the specified class.
Sets the value of the specified property on the specified class.
Sets the value of the specified property on the specified class.
Captures the current state of the object.
Removes and returns the element at the top of the stack.
Convert the modifiers to a string.
Converts a string to an integer.
Convert a string to a Date.
Checks if the given string is a valid date.
isTime returns true if string s is a valid time.
Checks if the given string is a valid date time.
Returns a token source for the given string.
Gets the token source for the given file.
Creates a token source for the given input stream.
Is the given instruction a constant function?.
Is this instruction a void variable?.
Is the given instruction a non-arg function?.
Returns an iterator over the children of this node.
Returns the argument at the given index.
Returns an iterator over the children of this node.
Returns a string representation of this term's arguments.
Retrieves a single page of measure appenders.
Executes a query against the database to retrieve a list of measure appenders.
Executes the query and returns the result.
Emmits the given code to this linkage.
Sets the basic type for the given class.
This method consults the given input stream.
Prints a variable binding.
Expands the result set to a map.
Reads the stream.
Reads the content of the stream.
Returns the current time in milliseconds.
Returns the current uuid.
Updates the specified track info with the information contained in the specified playlist.
Update play info.
Render the output.
Handle resource request.
Handles the event request.
Fire start music request event.
Initializes the connection.
Starts the server.
Shuts down the thread pool.
Resets the parser to its initial state.
Parses the input stream.
Process a packet.
Sets the CLI option.
Creates a chat with the specified user.
Internalizes the state of this object.
Resets the content of this object to an updated map.
Sets the value of the property with the specified key.
Adds a filter to the packet.
Process the request.
Resets all properties to their default values.
Initializes the connection.
Sends a packet to the client.
Returns the next packet in the stream.
Opens the stream for writing.
Returns a list of all informations.
Returns true if the given descriptor is contained in the descriptor list, false otherwise.
Add an event life cycle listener.
Shuts down the thread pool.
Returns true if the entry is valid.
Masks null keys with null values.
Returns true if x equals y.
Returns the entry associated with the specified key, or null if there is no such entry.
Increases the capacity to ensure that it can hold at least the new capacity argument.
Copies all of the mappings from the specified map to this map.
Removes the mapping for the specified key.
Removes the mapping for the specified key.
Removes the specified mapping from this map, if it is present.
Adds a new entry with the specified hash, key, value and bucket index.
Create delegate map.
Encodes a binary value as an XML attribute value.
Encodes a byte array into a hexadecimal string.
Encodes the given string using the base64 algorithm.
Encodes a byte array into a base 64 string.
Iterate over a collection.
Sets the controller that will be used to select tracks.
Sets the controller to handle the progress jumps.
Sets the controller that will be used for playback changes.
Sets the controller that allows to change the volume of the device.
Broadcasts the given list of available playlists to all registered devices.
Handle command resources.
Handles the volume change event.
Handles the jump event.
Handle select track event.
Returns the thread cache for the given name.
Returns the request cache for the given name.
Returns the alt field for the given field and stream id.
Returns the path to the shard with the given id.
Adapts an Object to a Session.
Calls a method with the given name and arguments and catches and logs any exceptions.
Deletes the content of the given path.
Updates the given object with the given properties.
Sets the ping interval.
Schedules the ping server task.
Adds an array of application options.
Returns true if the given option is in the list of used options.
Parses the command line arguments.
Prints the command line usage for the given application.
Parses the command line arguments.
Initializes the connection.
Starts TLS.
Returns the first compression handler that supports one of the supported compression methods.
Sends a compression request to the server.
Starts stream compression.
Notifies the connection manager that a connection error has occurred.
Notifies the connection manager that a reconnection has occured.
Registers a SASL mechanism.
Returns the list of registered SASL mechanisms.
Gets the output plugin behaviour for the given list of identifications.
Log a message and exception.
Log a message and throwable with error level.
Logs a message and a stack trace.
Creates a start event for the given identification.
Creates a start event.
Notifies all registered listeners that a write has occurred.
Returns true if this provider provides the given resource.
Checks if the model contains any resources from the given source.
Returns true if this provider provides any of the given resources.
Provide a list of resources.
Gets the cached value for the given key space, column family and key.
Returns the cache key for the given key space, column family and key.
Remove a cached row from the cache.
Puts the specified properties into the cache.
Get the location map.
Recursively include a file or directory.
Includes the given jar file.
Adds a SASL mechanism to the list of default mechanisms.
Adds a collection of SASL mechanisms to the server.
Creates the debug log.
Activates the plugin.
Register all standard event listeners.
Registers an event listener.
Registers an event id.
Attempt to acquire a file lock.
Returns true if the event can be run.
Creates a new DSE session.
Create a music player error.
Request to start playing this track.
Stops playing this music.
Sends a command to the player.
Create a playlist request.
Create an answer to a playlist.
Appends the given post fix to the current URL.
Adds a query parameter to the URL.
Adds a query parameter to the URL.
Adds a query parameter to the URL.
Adds a query parameter to the URL.
Get the playlist with the given id from the event model.
Invoked when the launch button is pressed.
Check if startup is finished.
Checks if the given URL exists.
Invoked when the browser button is pressed.
Create an ImageIcon from a path and description.
Launch Nakamura.
Sets the values in this array to the specified values.
Exports the current state of this object to a map.
Returns the value at the given index as a Json object.
Returns the value associated with the specified key.
Returns the int value of the value, or the default if the value is null.
Returns the value of the parameter as a double.
Converts the value to a string.
Creates a command resource.
Verifies if the given command is valid.
Verifies the capabilities of a command.
Verifies if the given command and capabilities are valid.
Executes a batch of CQL statements asynchronously.
Returns all subclasses of the given class.
Returns a set of all subclasses of the given class.
Search for classes in the given location.
Searches the given directory for classes that are assignable from the given class.
Returns a list of resources representing this resource.
Returns the number of elements in this queue.
Process a packet.
Get the volume from the event model.
Sends an error response to an IQ.
Creates an error response.
Checks if the identifiable is a target of the list.
Sets the value of the loginEnabledPeriod field.
Decorates the given set.
Sets the name of the node.
Update the state of this channel.
Get the roster groups.
Appends the RSM to the QueryElement.
Parses an RSM query element into a RSM object.
Create a LeaveEvent.
Reloads the current roster.
Creates a new LDAP entry.
Returns a collection of entries in this roster.
Get the presence of the user with the given resource.
Set the offline presences.
Fire the roster changed event.
Sets the digest for the given connection id and password.
Override generateResource in order to generate the correct resource.
Creates a new player request.
Gets the time passed.
Registers an update listener.
Initializes the properties file.
Reloads the properties file.
Parses a stream error.
Parses a list of mechanisms.
Parses the compression methods from an XML file.
Parses a packet extension.
Decodes the given value into an object of the given type.
Verify if the given event model can be played with the given capabilities.
Get the playback state from a resource.
Get the secret key for the given subdomain.
Check if multiple subdomains are allowed.
Associates the specified value with the specified key in this map.
Gets the key set.
Returns a collection view of the values contained in this map.
Purges the specified reference from the cache.
Returns the entry associated with the specified key, or null if there is no such entry.
Returns the hash code for the specified key and value.
Creates a new reference entry.
Returns true if the event is controlled by this presence indicator.
Sets the presence of the user.
Updates the most-sentilar set of non-sentilar presences.
Delivers a message to all registered listeners.
Generate the script.
Initializes the output directory.
Load properties from a file.
Writes a St object to a file.
Returns the progress for the given event model.
Decorates the given collection with a synchronized wrapper.
Discovers a set of service resolvers.
Returns the current configuration.
Gets the value of the threadPool property.
Stops playing and looping music.
Verify if the given event is a stop music event.
Get the DSE cluster with the given parameters.
Add a connection listener.
Adds a packet listener to the receive listener list.
Add a packet sending listener.
Fire the packet sending listeners.
Adds a packet interceptor.
Notifies all registered InterceptorWrappers of a packet.
Convert an object to a value.
Called by the connection manager when it loses the connection.
Returns the current thread id.
Check if the given node is valid for the given thread id.
Get the key for the given value.
Performs a get operation on an object.
Looks up and returns the node at the specified index that is valid for the data.
Looks up a node in the tree.
Compares two objects based on their status.
Returns the least node in the tree with the given index.
Finds the most specific node in a subtree.
Returns the node with the key greater than the given index.
Finds the most valid node in the tree with the given index.
Returns the least valid node in the tree with the given index, or null if there is no
Copies a color from one node to another.
Checks if the node at the specified index is red.
Checks if the node at the specified index is black.
Returns the grand parent of the node with the specified index.
Returns the parent of the node at the specified index.
Returns the right child of the node with the given index.
Returns the left child of the node with the given index.
Rotates the subtree so that its left child is at index.
Rotates the right child of the given node.
Do red black insert.
red black delete.
Check that the given object is non-null and is a non-null comparable.
Inserts a value into the tree.
Returns true if the map contains the specified key.
Check if the map contains the given value.
Get the value associated with the specified key.
Removes the value associated with the specified key.
Clears all entries from the map.
Copies the entries of this transactional bidi tree into the new transactional bidi tree
Delete expired entries.
Culls the cache.
Activates this component.
Get player request optional.
Initializes the default roster store.
Opens a roster store.
Scans a range of addresses.
Subnet address 0.
Exports the metadata to a map.
Imports track info from a hash map.
Add all applications in the given set.
Execute an application.
Prints the list.
Prints usage information to standard out.
Main entry point for the tool.
Create a mute event.
Create a mute event.
Get a schema by name.
Writes a list of lines to a file.
Returns true if the application is in an exec jar.
Adds an option to the command line.
Gets the schema.
Get a field by its name.
Returns the package name of a jar entry.
Convert the content of the base map to a map of values.
Create event listener optional.
Sets the current state of the iterative state.
Iterate over a collection.
Performs the actual iteration.
Get track info from event model.
Exports the data to a map.
Imports a resource.
Draws an error image with the given lines.
Get image from url.
Get the contents of a URL as a JSON object.
Reverses the keys and values of the given map.
Computes the multiplication of two sets.
Starts the daemon.
Return this object to the pool.
Create an ended event.
Returns the current track in the queue.
Updates the specified track in the playlist.
Shuffles the tracks in the queue.
Verifies the capabilities.
Exports the queue and playback modes to a map.
Escapes a string so that it can be used as an XML document.
Called when a challenge is received from the client.
Convert this object to a JSON string.
Main loop of event handling.
Handles an event.
Join all queues.
Set the value of a property.
Remove a property from the map.
Adds a principal to the list of principals.
Removes a principal from the list of principals.
Called when the root window is closing.
Fires an event indicating that the user has encountered a problem.
Called when an event is fired.
Returns true if the resource is permanent.
Sets the name of the group.
Checks whether the map contains the specified key.
Returns true if this map contains the specified value.
Associates the specified value with the specified key in this map.
Removes all of the elements from this set.
Returns the hash code for the given key.
Checks if two keys are equal.
Checks if two values are equal.
Ensures that the capacity of the map is at least the specified capacity.
Calculates the new capacity based on the proposed capacity.
Creates an entry set iterator.
Loads a map from a binary stream.
Initializes the add-on.
Notifies all connection listeners that a reconnection has failed.
Notifies all connection listeners that an attempt to reconnect has been made.