Emit the given value in the fast path.
Wrap an observable.
Sort the list according to the given sort function.
Observes the given observable on the given scheduler.
Create a new unicast processor with the given capacity.
Create a new unicast processor.
Attempts to map a value from a publisher to a value using the given mapping function.
Create a Flowable that contains a single value.
Resets all of the settings to their default values.
Create a new Completable from the given CompletableSource.
Create a new Observable from a single source.
Retries at most the given number of times.
Asserts that the given object is non-null and returns it.
Gets the identity function.
Creates a Callable that only returns the given value.
Creates a just function with the given value.
Returns a function that casts the given object to the given class.
Create a new unicast subject with the current buffer size.
Create a new unicast subject with the given capacity hint.
Create a new unicast subject with the given capacity hint.
Create a new unicast subject with the current buffer size.
Gets the error.
Gets an error from the queue, waiting up to the specified time.
Waits for this session to complete before closing it.
Drains the max loop.
Submits a request for the given subscription.
Completes this request with the result of the previous operation.
Get the value of this property.
Gets the error.
Checks if the given upstream and next are disposed.
Atomically sets the value of the given reference once.
Checks if the given subscription can be completed.
Atomically sets the value of the given subscription to the given value.
Add two long values up to Long.MAX_VALUE.
Multiply two long values to get the max.
Atomically add the requested value to the current long.
Converts an exception to a npe.
Adds an object to the set.
Shuts down the pool of executor threads.
Creates a new scheduled executor service.
Sets the subscription.
Loop through the queue.
Wraps an error in a runtime exception.
Flatten an exception into a list of exceptions.
If the exception is an Exception, return it.
Clears the set of resources.
Returns the number of elements in the set.
Attempts to map an ObservableSource to a single value.
Create an Observable from a value and a function that maps each item in the collection to its
Check if there is anything left in the head.
Accepts an observer from the front of the front of the queue.
Starts the queue.
Starts the unbounded event loop.
Offers an object to the queue.
Returns the disposable associated with this context, or null if this context is not disposed
Completes the Future with the given value.
Called by the system when an error occurs.
Completes this request with the result of the operation.
Waits for the specified number of items to complete before returning.
Submits a request.
Adds the given PublishDisposable to the set of subscribers.
Removes the specified PublishDisposable from the list of subscribers.
Observes the flowable on the given scheduler.
Parse the annotations of the given method.
Sets the delay in milliseconds.
Returns an error response.
Calculate the delay for the given time unit.
Create sample data.
Returns the HTTP method value for the given method.
Searches for a single entry of a user.
Generate a SHA-256 hash of the given password.
Checks if the given raw password matches the given encoded password.
Checks if the given spring version is greater than or equal to the given spring version.
Determines whether or not the given spring security version should be disabled.
Loads the spring- security-core.properties file.
Attribute exchange configurer.
Get OAuth2 client.
Get the OAuth2 resource server.
Compares the specified value against the specified attribute on the specified dn.
Retrieves an LDAP entry from the context.
Search for values in a single attribute.
Searches for a single entry using the given parameters.
Build a new instance of SearchControls.
Performs a query to find all primary keys for the given list of sids.
Builds the authentication details.
Create the embedded server bean definition.
Create the servlet api filter.
Create the JAAS filter object.
Creates a new builder for whitelisted default Places.
Inserts the spring security filter chain into the web application context.
Get a token for a series.
Returns a list of granted authorities from a collection of attributes.
Returns a new instance of the cipher with the given algorithm.
Overrides the default behavior of setting the properties.
Processes the incoming request.
Checks if the principal changed.
Implementation of authenticate.
Check the content length of the response.
Maps a collection of authorities to a set of granted authority objects.
Set the URL to be used for login processing.
Updates the authentication defaults.
Updates the access defaults.
Map a password value into a string.
Extracts the remember-me cookie from the given request.
Encodes the cookie.
Sets a cookie to the response.
Resolve the method argument.
Gets the artifact query string from the request.
Get the service port from the cas service url.
Gets the principal from the security context.
Logout out the current request.
Authenticate the given authentication.
Set context environment properties.
Gets the full URL to redirect to.
Render the end of the tag.
Initialize the user details service.
Gets the user details service.
Adds the pkce parameters to the request.
Determines if the request requires authentication.
Check if the request requires authentication.
Proxy ticket request.
Determines if the current authentication is authenticated or not.
Check if the request should be proxied.
Creates the method security expression root.
Gets the JWK data.
Encodes the given string using UTF-8 encoding.
Gets the web sphere groups based on granted authorities.
Load user by assertion.
Gets the pre authenticated principal.
Concatenate byte arrays.
Copies the specified range of the specified array into the specified array.
Obtains a list of granted authorities from a collection of attributes.
Pre-process map.
Gets the collection of granted authority objects.
Adds a collection of granted authority objects to the result.
Gets the pre authenticated principal.
Gets the shared object for a given shared type.
Builds a https redirect url for the given request.
Interceptors the method invocation and returns the result.
Checks if the given role is present.
Checks if any of the given roles is present in the roles array.
On login success.
Switches the current user.
Attempts to exit the user.
Sets the exit user URL.
Displays a random contact.
The spring security filter chain.
Decodes a JWT.
Checks if the user has permission to access the given access expression.
Check to see if the user is allowed to access the given url.
Convert jwt to collection of granted authority.
Generates a valid access token for the specified request.
Display admin page for a contact.
Displays the Add Permission page for a contact.
Add a new permission.
Gets the role with the default prefix.
Creates a new UserDetailsResourceFactory bean from a comma separated list of users.
Get the values of an attribute.
Get the first attribute value for the given name.
Encodes the given character sequence into a byte array.
Decodes a byte array into a Base64 string.
Lookup parameter names.
Adds a new contact to the list of existing contact objects.
Finds configuration attributes for the specified method against the specified target class.
Add a new secure method.
Gets all config attributes.
Checks if the method name matches the mapped name.
Gets the any-request configurationurer for an AnyRequest.
Handles the bind exception.
Get a random contact.
Removes the authentication related attributes from the request.
Gets the field with the given name from the given class.
Create the service URL.
Create the redirect url.
Extracts the prefix from the passed String.
Sends a response to the client that this request is being sent to the client.
Checks for duplicates in the filters stack.
Gets the registered types.
Extracts the cause of the given exception.
Registers an access manager.
Converts a collection of grantedAuthority objects to a set.
Compares two byte arrays for equality.
Sets the default failure url.
Set the list of hidden inputs that should be resolved for this request.
Builds the request URL.
Checks if the given URL is an absolute one.
Returns a list of id's of attributes that match the given identifier.
Gets the identifier from the given result set.
Create entries in the database.
Create an Object Identity.
Update Object identity.
Saves the request in the request cache.
Creates an instance of PathMatcher for a given set of request patterns.
Returns a ServerWebExchangeMatcher that matches any exchange.
Create an encryptor for the given password and salt.
Encryptor text.
Encryptor queryable text.
Writes the allow-from header to the response.
Determines the target URL for the given request and response.
Determines the target URL for the request.
Sets the target URL parameter.
Retrieves the directory with the immediate parent populated.
Builds a distinguished name for the given username.
Create a map of shared objects.
Set the JAAS login configuration in the security map.
Gets the current date.
Internal parse date.
Updates the value in the cache if the value is non-null.
Sets the details of the authentication token.
Get the security name from the subject.
Get the list of web sphere groups for the given security name.
Builds a distinguished name for the given group.
Allowable sessions exceeded.
Copy the details from the source authentication token to the destination authentication token.
Gets the filters for the given request.
Retrieves a list of filters from the specified URL.
Gets the application context for the given page context.
Gets the full dn.
Sets session attributes.
Creates a new Basic authentication scheme.
Adds the given filters to the list of filters for this endpoint.
Adds a filter to the set of additional filters.
Creates a basic authentication scheme.
Creates a new authentication scheme with the given user name and password and workKB.
Returns a new authentication scheme with the given user name and password.
Proxy the given URI.
Prints the response body to the given stream.
Create a new rest assured config for redirect requests.
Returns a new encoder configuration with the default query parameter charset.
Sets the default object mapper type.
Sets the object mapper factory.
Return a new Rest assuredMockDXConfig for the given log config.
Sets the session config.
Return a new Rest assuredMockLookUpConfiguration instance.
Sets the new JsonConfig instance.
Create a new Rest assuredMockDXConfig.
Returns the configuration that should be used for the encoder of the server.
Return a new Rest assuredMockDXConfig instance with given header config.
Sets the configuration for an async config.
Return a new configured mock3d configuration.
Create a new configuration for a multi-part validator.
Return a new configuration object for a mock DWR param.
Returns a new rest assured mock DWR matcher config.
Create a certificate auth settings that allows all hostnames.
Declares namespaces.
Create a new XMLPathConfig instance with a new prefix and namespace.
Sends a HTTP request to the default uri and method.
Sets the request headers.
Sets the proxy to use.
Sets the name of the control to be used in the current request.
Set a multi part header with the given name and value.
Set basic authentication.
Set the user and password for the specified domain for thespecified authentication.
Create a list of headers for a given header and additional headers.
Resets all variables to their default values.
Sets a response header with the given name to the given value.
Builds the response object.
Specifies that the value of the cookie matches the given valueMatcher.
Specifies a comment matcher.
Set expiry date matcher.
Specifies the domain matcher.
Specifies the path matcher.
Specifies if the cookie should be filtered or not.
Specifies if the HTTP only matcher should be used.
Specifies the version matcher.
Specifies the max age matcher.
Expects that the response header matches the specified expected value.
Specifies the header to be included in the response.
Specifies a cookie to be included in the response.
Return a copy of this proxy specification with the given host set.
Sets the return type.
Sets the default parser type.
Returns a new instance of LogConfig configured with default settings.
Enables logging of request and response if validation fails.
Create a new instance of a HTTP request.
Sets the default boundary to be used when multipart upload.
Adds a request attribute.
Adds a header to the request.
Add a multi-part to the request.
Add result handlers.
Set a client parameter.
Adds the given HTTP client params to this factory.
Set the HTTP client factory.
Sets the http multipart mode.
Gets the result of an assertion.
Get an integer from a path.
Gets the byte from the given path.
Get the short value for a given path.
Get the value belonging to the given path as a float.
Get the double-value from the given path.
Get a long value from a path.
Gets a list of objects from the cache.
Get a map by path.
Gets an object from the given path and casts it to the given type.
Adds a body object to the current request.
Adds a cookie to the request.
Adds a parameter to the current request.
Adds a request parameter.
Sets the update strategy for form fields.
Log response to if the given matcher matches.
Create a cookies object from a cookie and additional cookies.
Cleans up the collected state for the given set of keys and sources.
Indexes the explicit bindings for this node.
Gets the binding for the given key or throws an exception if the binding could not be
Converts a constant string binding.
Cleans up any dependency-specific dependencies that could be found in the given binding.
Removes a failed jit binding.
Gets the internal dependencies of a binding.
Creates an uninitialized binding.
Gets all the parameter injectors from the given context.
Binds the injector instance to the provider instance.
Binds a logger to the injector.
Checks for misplaced binding annotations on the given member.
Returns true if method A overrides method B.
Initializes the delegate injector.
Returns the type of the provider.
Resolve all of the types in the given array of types.
Canonicalizes the given Type literal so that it can be used as a key for a
Prepares the built-in converters.
Canonicalizes the given class loader.
Tells whether or not the given class loader has the same version of the Galaxy library
Checks if the given member is publicly callable.
Fixes a key that has no annotations.
Initializes the given instance with the given binding and injection points.
Validates all pending injections.
Creates a new instance of the class.
Creates a scope factory.
Returns an instance of the InjectionScope associated with the InjectionScope annotation of the given injector.
Normalize the path.
Generates an annotation of the given type.
Checks if the annotation is retained at runtime.
Finds a scope annotation.
Returns the key for the given type and member.
Returns the name of the given key.
Initializes the provider's delegate.
Adds the direct type binding.
Gets the constructor injector from the cache.
Checks if the interceptor class has a scope annotation.
New real map binder.
Gets the key for a new value.
Creates an instance of a proxy for a single parameter.
Writes the results of a replace into the output stream.
Returns a module instance for the given module instance.
Gets the methods that were reported by the method invocation.
Checks if the given type literal is specified in the configuration exception.
Checks if the constructor has matching parameters.
Returns the set of dependencies for the given constructor and implementation.
Returns a set of dependency objects that are required to mark some of the dependencies as optional.
Returns true if the factory is valid for the given set of required dependencies.
Gets the binding from new injector.
Invokes the method on the proxy.
Reports a missing implementation with a hint.
Create a real multibinder that will set the value of the given key in the given
Gets the key for a new item.
Finds the next filter matching the given request.
Determines if the given constructor has at least one inject.
Gets the internal constructor.
Returns the set of internal dependencies.
Returns a module for the given module using the given scanner.
Returns the annotation for the given method, or null if none found.
Returns the line number for the given member.
Initializes the lookup processor with the given set of errors.
Validates and canonicalizes the given value.
Gets the current state of the object.
Creates a new instance of the injector with no listeners applied to the given type.
Gets the injectors for the given injection points.
Returns a new instance of Key with given type and strategy.
Returns a strategy instance for the given annotation.
Returns a strategy instance for the given annotation type.
Prune the stacktrace of the given exception.
Gets the binding source.
Creates a message with the specified message format and arguments.
Creates a new message for the given cause with the specified message format and arguments.
Creates a new message with the given message format and arguments.
Convert an object to its Java equivalent.
Determines whether a class should be skipped based on its fully qualified name.
Gets the stack trace element for the given module class names.
This is the main method for testing.
Pushes the given dependency onto the state stack.
Pushes the state of the given key to the given source.
Returns an instance of the given instance.
Synchronously invokes the given provider with the given dependency.
Process a connection event.
Adds a connection event processor.
Get the future task result.
Throws the given exception if it is a RuntimeException or if it is an error.
Registers a new remoting processor.
Registers a default remoting processor.
Get the command processor for the given command code.
Tries to parse the given URL and return the corresponding soft reference.
Decodes the protocol code from the given byte buffer.
Gets a map of all connections from the pool manager.
Scans the pool list for connections.
Get and create a connection to the given URL if it does not already exist.
Create a connection and heal if need be.
Removes a ConnectionPool from the pool.
This method will heal the URL if it does not already exist in the pool.
Do the real work of creating a new connection.
Closes a connection to the given address.
Handles the close of the remote server.
Closes the connection.
Set attribute if absent.
Register a user processor.
Registers a user processor.
Dispatches an rpc request to a user processor.
Deserialize the request command and send the response if necessary.
Pre-process remoting context.
Sends a timeout message to the remote endpoint.
Helper method to write a debug message to the logger.
Process the incoming message.
Adds a listener to the connection's channel to write and flush the request.
Converts a bit set to a byte.
Converts an integer to a bit set.
Adds a reconnect task.
Create a remoting command from the given request and invoke the command with the given invokeContext
Filter the list of connections and return only those connections that have been marked as active.
Close fresh select connections.
Gets a system property boolean.
Log an info message.
Is request timeout boolean.
Gets a user processor for the given class name.
Get a random connection.
Gets a value from the context.
Get the value of a property.
Resolves the response object for the given response command.
Converts the response command to an object.
Converts a response command to a throwable.
Returns the detail error message for the given response command.
Create an exception for a server exception.
Prints the connection trace log.
Returns a new event loop group with the specified number of threads.
Parse the remote address from the given channel.
Gets the local address from the given channel.
Parse the remote IP address of a channel.
Parse the remote host name from the given channel.
Returns the local IP address of the given channel.
Parse the remote port from the given channel.
Gets the local port from the given channel.
Parses the given socket address to get the host IP address.
Adds a connection to the pool.
Remove and try to close a connection.
Registers a custom serializer for the given class name.
Get custom serializer by class name.
Registers a custom serializer for command code.
Get custom serializer by code.
Returns true if the remote address is connected.
Initializes the write buffer water mark.
Get the frame corresponding to the given opcode.
Sends a batch of bytes from the given WebSocket object to the given channel.
Set the code for this field.
Check if the payload is a UTF-8 string.
Update the payload.
Checks if the requested protocol is in one of the known protocols.
Check the length limit of a single frame.
Checks the packet size of a single frame.
Generate the final key for the given input.
Processes a frame that is a continuous frame.
Processes the frame which is binary.
Log a runtime exception.
Processes the frame text.
Processes a single frame from the frame stream.
Processes a frame that is not fin.
Process the closing frame.
Check if the buffer list size exceeded its limit.
Gets the payload from the byte buffer list.
Gets the total byte buffer list size.
Translate handshake http server into handshake http server.
Translate handshake http client into handshake http client.
Decodes the frames from the given buffer.
Close connection due to wrong handshake.
Sends a response to the client and closes the connection due to an internal server error.
Generate the response due to an error.
Sends the supplied text to the client.
Resets the connection to its original state.
Starts the connect thread.
Gets the port from the URI.
Sends the handshake to the client.
Sets the connection lost timeout.
Stops the websocket connection lost timer.
Starts the websocket connection lost timer.
restarts the connection lost timer.
Execute connection lost detection.
Cancels the connection lost timer.
This method is called when a websocket handshake is received from the client.
On websocket ping.
Stops the server and waits for it to stop.
Gets the port number of the client or server.
Reads additional data from the socket.
Accepts the given selection key from the server.
Reads a single connection from the queue.
Do the write.
Initializes the selector and the server thread.
Checks if the current thread is closed.
Stops the server.
Gets the socket for the given connection.
Broadcasts a data point to multiple clients.
Broadcasts a message to all connected clients.
Broadcasts a data object to all clients.
Fills the map with data from the supplied draft.
Transfer bytes from source buffer to dest buffer.
Starts the application.
Returns the entity manager for the given name.
Adds a block that will execute the given entity manager in a transaction.
Converts the command line arguments to a Spark buffer.
Wrap args to list if needed.
Get the value of a property.
Get the message for a list of keys.
Is defined at translation time.
Return the preferred messages for the given collection of messages.
Loads the preferred message for the given request.
Set the language of the result.
A convenience method for creating instances of this class's self bindings.
Provide the self bindings for the given modules.
Define the self bindings for the play services.
Return a guice instance that overrides the given modules.
Set the modules that this module overrides.
Provide custom overrides for play.
Disables given modules.
Calls the method with the given request.
Return existing file.
Returns a binding that matches any annotation in the given scope.
Creates a tuple with the specified values.
Creates a tuple with the given values.
Converts an ExecutionContext to an executor.
Creates a new EntityReference with the specified name and unit name.
Creates a new instance of JPA persistence unit with n1 and n2.
Creates a new JPA object from the given map.
Create a flow that maps a string to a byte.
Create a flow that maps a json byte to a callback.
Adds a new constraint validator.
Creates a new instance of a constraint validator for the given key.
Gets matching accessible method.
Handles a client error.
Handles a bad request.
Shows a forbidden error page.
This method is invoked when the request is not found.
This method is called when a server error occurs.
This method logs a server error.
Converts a Throwable to a useful exception.
Handler for when an error occurs on a dev server.
This method is invoked when a server error occurs.
Builds a DocHandler for a list of files from a list of directories.
Build documentation handler from a directory.
Builds a DocHandler from a directory and jar.
Builds documentation handler from directory and jar.
Build documentation handler from jar.
Consume data with the given mater.
Converts a content to an http entity.
Converts a string to a strict HTTP entity.
Creates a new HTTP Entity chunked from the given source.
Set the response status with the given content on the given status code.
Send a status response to the client.
Create a Result with the given status code and the given content.
Convenience method to set the response status and stream.
Sets the status of the given file.
Finds a user by id.
Return the preferred language of the given collection.
Make a unique query.
Build a call with a fragment.
Returns the absolute URL for the given request.
Returns the full URL for the given request.
Gets the connection function.
Gets the connection function.
Create a new server with the given mode and port.
Converts an object to a JSON tree.
Converts a JSON object to an object of a given type.
Parse a JsonNode from the given string.
Parse a JSON document from an input stream.
Constructs a relative path from the start path to the target path.
Canonicalizes the given URL.
Gets displayable constraints.
Returns the displayable constraint for the given constraint.
Timeouts the given completion stage by the given amount and units.
Parse the given cron expression.
Calculates the number of milliseconds since the given date.
Creates a new HTTP client.
Create a guice application builder using the application context.
Render a todo view.
Sets a session value.
Sets the value of the specified flash parameter.
Returns a binding key which is qualified with the given instance.
Returns a binding key which is qualified with the given annotation.
Converts this binding to a specific implementation.
Adds the given provider to the binding.
Binds the given supplier to the given instance.
Create a new binding with the given key.
Converts the current binding to a provider.
Retrieves the available langs for the given application.
Determines the preferred language for the given list of supported languages.
Creates a new reader from a map of evolutions.
Get a reader for the provided evolutions.
Removes all the evolutions that match the given schema from the database.
Define a guice application using a custom configuration loader.
Define a new Guice module loader.
Load guice application from the given set of modules.
Loads the application with the given set of modules.
Load guice application from the given modules.
Load application with provided bindings.
Override this method to provide your own guice application builder.
Encodes the given cookie.
Gets the entity manager.
Gets the current EntityManagerFactory.
Push or pop an em.
bypass with flow.
bypasses a given flow if the merge strategy is enabled.
Convert argument list to error message source.
Fill the form with the given value.
Gets the global errors.
Translate errors as json.
Gets value.
Fills the current form with the given data.
Parses the given string into an object of the given type.
Parse the given field from the given text.
Prints a string representation of the given object.
Prints a field value as a string.
Print a value of the given type with the help of the given type.
Adds a converter that converts the given source type to the given target type.
Register a new SimpleFormatter for the given class.
Encodes a cookie.
Selects nodes from a given path.
Converts a Java List to a Scala List.
Converts an array of objects to aSeq.
A convenience method for creating a Sequence from an array.
Json acceptor.
Accept or result web socket.
Gets the primitive promotion cost.
Computes the total transformation cost of the given executable.
Gets the object transformation cost between two classes.
Get a specific message at a specific language.
Gets a specific message at the specified key.
Creates a database from the given configuration.
Creates a new parallel sorter with the given array of objects.
Sorts the elements in the specified range [lo, hi) using the given comparator.
Sorts the elements in the specified range [lo, hi) using the given comparator.
Invokes the method.
Loads a single argument from the state.
Visits a field of the given type.
Push zero or null to the stack.
Marks a non-null value as unboxed, or sets it to zero if
Generate code to process an array.
Adds a NullPointerException to the code emitter.
Resolves all bridge methods.
Filter the constructors from the given list.
Sets the superclass of this class.
Gets a field with the given names.
Adds a method to the set of method signatures.
Get the cardinality of this set.
Sets the naming policy.
Returns an array containing the methods of the given names and descriptors.
Resolves the child path.
Reads a file and returns its content as a string.
Overwrites the host header if present.
Creates a new request with the given method and destination.
Creates a new Request configured to connect to a destination.
Creates a new HTTP GET request.
Creates a POST request.
Creates a new HTTP PUT request.
Creates a PUT request.
Creates a new HTTP DELETE request.
Creates a HEAD request.
Creates a new HTTP TRACE Request.
Gets HTTP request options.
Set the path of the request.
Sets the request cookies.
Adds a query parameter.
Adds a map of query parameters to the query.
Set the query string.
Gets the query string.
Get the host part of the URL.
Set basic authentication.
Set the request's host header.
This method creates a buffer that will be used to write data to the client.
Removes the range from the first handler to the end of the first handler.
Gets the length of the exception table.
Collects all interceptors of the current action.
Collects the action filters.
Collects the action results.
Collects all the action new moments from the actions manager.
Sets the simple property.
Gets the property.
Extract this reference from the property name.
Gets the writer.
Sets a reference to an object.
Gets an object reference.
Lookup an object by its string name.
Gets the table descriptor.
Find table descriptor by column ref.
Gets the alias for the specified table.
Registers a table reference.
Lookup table ref.
Registers a hint.
Serializes an object to JSON.
Injects the attributes from the servlet request into the specified targets.
Injects the parameters from the specified targets.
Injects the uploaded files into the specified targets.
Converts a property name into a table name.
Converts a column name into a property name.
Apply to column name.
Stores the given value into the given prepared statement at the given index using the given SQL
Prepares a value of the given type for conversion.
Gets all the wrappers.
Resolves a wrapper for the given class.
Creates a new instance of the wrapper class.
Gets the separators of the given path.
Gets the path.
Splits a filename into its parts.
Constructs a relative path from the given target path and base path.
Registers a custom MADVoc component.
Adds an action config component to the web app.
Starts the web app.
Registers all registered MADVoc components in the container.
Excludes the jars that should be excluded from scanning.
Includes jars that should be processed by the scanner.
Includes entries from the scanner.
Exclude entries from the list of excluded entries.
Scans a jar file for uses of deprecated APIs.
Scans class files.
Gets the bytecode signature of a class.
Scans class files for the given paths.
Starts scanning class files.
Create a new DBJtxTransaction.
Get the default scope instance for the given scope class.
Gets or init scope.
Processes the scope declaration with the given type and passes it to the given consumer.
Prepares a session token.
Assure size.
Checks if the session contains a valid session token with the given value.
Creates a copy of a bean from the given object.
Makes a deep copy of this bean.
Visit a Property. This is the primary focus of the visitation. From here interesting information
Initialize the template data.
Resolves a scope for the given type.
Register a bean with a name and a wiring mode.
Registers a new bean.
Removes a bean from the container.
Resolve bean names for type.
Register a constructor injection point for a bean.
Registers a new property Injection Point in the given bean.
Register a Injection Point for a bean.
Register a method injection point for a bean.
Register the init-method- points for the given bean.
Register the given destroy methods on the given bean.
Registers a new instance of a SLF4J provider.
Registers a new instance of the given type using the given name and argument types.
Iterate over all beans of the given type and invoke the given consumer with them.
Define the parameters from a set of properties.
Intercepts the given action request and returns the result.
Resolves the platform version.
Pushes an int onto the stack.
Checks that the argument index is valid for the given method.
Gets a field name from the given index.
Gets method name.
Loads method arguments from the method visitor.
Loads the static method arguments from the method visitor.
Loads method arguments from the given virtual method visitor.
Loads the method argument of the given method into the given visitor.
Stores a method argument into the method visitor.
Prepares the return value for the given method.
Creates a key to represent a signature for a method.
Makes the given visitor visit an array of the given component type.
Stores the value of the given component of the given type into the given visitor.
Extracts the encoding from the content-type.
Checks if the given flags array is empty.
Resolve the Authorization header to be used in the request.
Sends an error response to the client that requires authentication.
Prepares the response for a download.
Prepares the response with the given file name, mime type, and size.
Gets all cookies in the request with the given name.
Reads the request body from a reader and returns it as a string.
Reads the request body from the given request.
Stores the given context path in the given page context.
Stores a context path in the servlet context.
Check if a parameter is present in the request.
Prepare parameters array.
Copy the parameters from the servlet request to the request attributes.
Invokes the body.
Render the body.
Render the body to a String.
Invokes all init-method points in the bean.
Call destroy methods on the bean.
Creates a new instance of the bean.
Injects any params of the given type from the given param manager.
Rewrite the given action path and http method.
Adds a new header with the specified name and value.
Puts a property into the given map.
Put base property.
Puts a profile property.
Gets a profile property.
Resolves the value of one of the defined macro names.
Extract the target map based on the given profiles and wildcard patterns.
Get a streamtoword from a byte array.
Hashes the given password using the given salt.
Checks whether the plaintext password matches the hashed password.
Copies all data from this buffer to the specified output stream.
Copy max int.
Parses the action definition for the given method and definition.
Resolve the action configuration for the given annotation values.
Detect and register alias.
Read action interceptors.
Read action filters.
Read package action path.
Reads the action path for a method.
Parses the method alias from the annotation values.
Creates an Action runtime with the given parameters.
Commits the last modified time of the request to the response.
Gets the advice for the given class.
Injects the target into the proxy.
Visits an annotation of the field.
Resolves the real name for the given json name.
Resolve the name of a JSON property.
Lookup type data.
Lookup the type data for the given type.
Finds the subclass type data for the given type.
Resolve json name.
Resolve the real name for the given type and json name.
Gets the file content.
Copies bootstrap methods from the given class reader to the given character buffer.
Sets the major version and class name.
Put constant pool.
Puts the bootstrap methods into the given byte vector.
Adds a constant field reference.
Adds a constant method reference to the symbol table.
Adds a constant member reference to the constant pool.
Adds a new constant member reference.
Adds a constant of integer or float.
Adds a constant integer or float.
Adds a long or double to the constant pool of the symbol table.
Adds a new entry to the map.
Adds a constant name and type to the constant pool.
Adds a constant name and type to the symbol table.
Adds a string constant to the constant pool.
Adds a constant utf8 string.
Adds a constant method handle to the symbol table.
Adds a dynamic reference to the given bootstrap method.
Adds a dynamic method that will be invoked by the bootstrap method.
Adds a dynamic reference to the constant pool.
Adds a dynamic reference to the method.
Adds a reference to a UTF-8 constant pool.
Adds a reference to a UTF-8 string constant.
Adds a bootstrap method handle and bootstrap method arguments to the symbol table.
Adds a merged type to the type table.
Computes a hash of the name.
Removes all entries from the map.
Returns all values of the given name in this map.
Returns an iterator over the entries of this map.
Returns a list of all the entries in this map.
Increases the capacity to ensure that it can hold at least the given capacity.
Append a range of characters to the buffer.
Visits an annotation of the method.
Create the first chain delegate for the current proxy.
Creates the first chain delegate.
Create method chain delegate.
Parse the given string as a path.
Pushes a field to the path.
Adds the filters to the servlet context.
Execute the method.
Gets an array containing all the FieldDescriptors of this instance.
This method creates a bean definition for the given name and type.
Converts JtxTransactionMode to DBTransactionMode.
Reads a property.
Puts the contents of the specified Map into this cache.
Appends the contents of the given buffer to this one.
Writes the list to a writer.
Writes the contents of this list to the specified output stream.
Writes this request to the given output stream.
Returns the value of the char sequence for the given key, or null if there is no
Get the Integer value for a given key.
Get a long from the map.
Get a double from the map.
Get the float value associated with a key.
Get a value from the map.
Puts a new value into the map, replacing any existing value for the given key.
Use folder.
Receive received messages from the e-mail server.
Updates the email flags from the received email.
Closes the given folder if it is opened.
Lookup a named parameter by its name.
Validates this action against the given profiles.
Adds a violation to the validator.
Specifies the mime or extension to be used in the raw data.
Use this method to set the mime type for the download file.
Sets the target input stream.
Sets the target class name.
Sets the class to be instantiated.
Processes the proxetta.xml file.
Create the class bytes.
Returns a new instance of the class represented by this class descriptor.
Dumps the proxy class in the debug folder.
Sets the sender address.
Set the email address to send to.
To address.
Sets the reply to addresses.
Adds a CC recipient's address.
Sends an email message with the specified text using the specified encoding.
Sends an HTML message to the email.
Adds a header to the response.
Gets the value of the given property.
Returns the value of the parameter with the given name, or the given default value if the
Returns the value of the given parameter as an integer or the given default value if the parameter
Returns the value of the given option as a long, or the given default value if the
Gets the resolved parameters of this method.
Serialize a key and value.
Lookup the action path for the given alias.
Resolves an alias for the given value.
Resolve the result path.
Resolve result path string.
Get last index of slash dot.
Get last index of dot after slash.
Gets the index of the dot after the slash.
Resolve schema name.
Resolve column descriptors.
Initializes the cache with the given key and the given tweak.
Calculates the mix graph of a given depth of d.
demix d by j.
Sends a key schedule for a given number of seconds.
Initializes the block with the given key message and the given TTL values.
Encrypts a block of data.
Converts a byte array into a long array.
Removes any bounding box inside the given string.
Get the path of the method.
Compresses the given file using the default compression.
Compresses the given file using GZIP.
Un gzips the given file.
Returns an unmodifiable list of the names of all entries in the specified zip file.
Unzips a file into a destination directory.
Adds the given file to the given zip output stream.
Adds the content to the zip stream.
Returns the FieldDescriptor for the field with the given name and optionally declared.
Returns the property descriptor for the given name, or null if not found.
Sets the request bundle name.
Sets the session locale.
Gets the current session's locale.
Filter parameters for bean name.
Adds one or more profiles to the props.
Reads a little-endian long from the given byte array at the given offset.
Reads the contents of an input stream into a byte array.
Reads a label from the given array of labels.
Gets the bytecode offset of a type annotation.
Read bootstrap methods attribute.
Inspects the public constructors of this class.
Returns a ctor descriptor for the given constructor arguments.
Gets the request map.
Create the request map.
Converts the given value to an array of longs.
Initialize the servlet.
Searches for a file in the given path.
Searches for a file using a search path.
Finds the files that match one of the specified patterns.
Searches for files that match one of the specified patterns.
Adds the file path.
Finds all the files.
Initialize the list of files to be processed.
Returns an iterator over the files in this directory.
Resolve bean wiring mode.
Resolve bean name.
Gets the output writer.
Gets the output stream.
Returns the class name of the parameter.
Gets the descriptor of a constructor.
Gets the method descriptor.
Gets the descriptor for the given method.
Appends the descriptor to the value.
Gets the size of this field.
Returns the number of arguments and return sizes for the given method.
Marks the transaction as rollbacked.
Call either the commit or rollback methods depending on the state of the transaction.
Rolls back all existing resources and removes this transaction from the list of managed resources.
Request a new resource.
Pops the name off the stack.
Writes a string.
Writes the given character to the output stream.
Writes a character sequence.
Sets the name of the log level to be used when parsing error logs.
Starts a new region with the specified start tagLen and deepLevel.
Checks if the given value is containing the given string.
Registers a pseudo function.
Looks up a pseudo function by name.
Generates the code for the request proxy.
Visits an annotation of this class.
Generates the code for a static initializer block.
Create the proxy constructor.
Process super methods.
Find the index of the lowest element in the range [ low, high).
Processes the given string and returns the result.
Replaces the ASM instructions in the given class file.
This method returns the array of Attribute prototype for this field and method.
Registers a new type.
Lookup the most specific type for the given class.
Lookup the SQL type for the given class.
Create an SLF proxy.
Creates a ProxyInfo instance with the given parameters.
Create an HTTP proxy with the given parameters.
Get the total number of transactions held by all threads.
Gets the total number of transactions with the given status.
Associates the given transaction with the current one if it isn't already associated.
Propagate a transaction to another transaction.
Lookup the resource manager for the given resource type.
Creates a proxy instance for the given class.
Append a method name to the path.
Increases the left padding of the given string by the given size.
Converts a string to camel-case.
Formats a paragraph of text.
Converts tabs to spaces.
Escapes a string so that it can be used in HTML.
Unescapes a string so that it can be used as an identifier.
Resolve a bean of the given type.
Gets a bean by its name.
Initialize the bean definition.
Invokes the provider method if it exists.
Adds a bean with the given name and wiring the given wiring mode.
Sets a bean property.
Get a bean property.
Shuts down this registry.
Resolve the parameters for a method or constructor.
This method is called after the body element has been processed.
Resolves value.
Ends the document.
Create a new element node for the given tag.
Removes the last child node if it has an empty text.
Gets the query string.
Gets the name of the action class.
Calculate the to.
Replaces all occurrences of a string with another string.
Replaces the first occurrence of sub in s with with with the given char.
Replaces all occurrences of a char array with a char array.
Replaces the first occurance of a string with a new string.
Replaces the first occurance of sub with with with with the given character.
Replaces the last occurance of a string with a new string.
Replaces the last occurance of a character with a new string.
Removes the first occurrence of the specified string from the specified string.
Removes the specified character from the specified string.
Checks if all strings are empty.
Checks if all strings are blank.
Converts the given value to an array of Strings.
Changes the first character of the given string to upper case or lower case.
Returns the title of the given string.
Encodes a char into a String.
Checks if the given string starts with the given string ignoring case.
Checks if a string ends with the specified char.
Count the number of occurrences of a case insensitive substring in a source string.
Compare two strings for equality ignoring case.
Gets the first whitespace index of the specified string.
Strip leading char from string.
Strips the trailing character from a string if it is present.
Strips the first occurrence of the specified character from the specified string.
Strip the first occurance of the specified character from the specified string.
Strips the first occurance of the specified character from the specified string.
Crop all of the strings in the array.
Removes all whitespace characters from the beginning of a string.
Removes all whitespace characters from the end of a string.
Returns the index of the first occurrence of a substring within the left boundary and the right boundary
Concatenates a collection of objects into a single string.
Join an array of objects into a single string.
Converts the given source string with the given charset name to the new charset name.
Checks if the character at the given index is equal to the given char to compare.
Surrounds the given string with the given prefix and suffix.
Adds a prefix to a string if it does not already exist.
Adds the suffix to a string if it does not already exist.
Cut the first occurrence of substring in string.
Cut the first occurrence of substring in string.
Cut the prefix from a string.
Cut the suffix from a string.
Cut the contents of a string that starts with a prefix and ends with a suffix.
Inserts a string into a new string at the specified offset.
Repeats the specified number of times in the specified source string.
Reverses a string.
Determines the maximum common prefix of two strings.
Finds the common prefix.
Shorten the string by removing any whitespace at the end of the string.
Converts the specified string to upper case using the default Locale.
Removes any double quotes from the string.
Converts an array of bytes into a hexadecimal string.
Gets the bytes from the given string using the default encoding.
Detects the first quote character in a string.
Visits an enum field.
Visits an annotation of the given name and descriptor.
Register a new entity type.
Registers an entity.
Removes an entity from the descriptor map.
Create entity instance.
Sets the target interface.
Inject target into wrapper.
Lookup annotated properties of a class.
Detect database and configure dboom.
Closes this output stream.
Writes a byte to the output stream.
Resets the session to be invalidated.
Gets the encoded name.
Returns a byte array containing the contents of this buffer's data.
Writes the data source to the file.
Writes the source to the given output stream.
This method appends the type parameter to the method name.
Prepend an argument to the method description.
Changes the return type of a method.
Overrides the default text handling whitespace characters.
Registers a new type converter.
Lookup a converter for a given type.
Parse the query and return the select nodes.
Select a collection of selectors.
Processes a list of selectors and adds them to the result list.
Selects the first node matching the query.
Walks the nodes of the specified list of descendants recursively.
Recursive method that walks the node tree.
Selects the node and adds it to the result list.
Unpack a character array from a packed string.
Checks whether we need to refill the block.
Get a single page of data from database.
Removes the SELECT part from the sql.
Removes the from part of a SQL statement.
Removes the last order by part from the SQL.
Decodes an HTML string.
Detects the first entity name in an array of characters.
Build SQL for sorting by column.
Builds the SQL for a page.
Resolve columns and properties.
Find by column name.
Find a column by its property name.
Returns the property name for the given column name.
Gets the column name for the given property name.
Get the value of the id property of the given object.
Sets the value of the id property of the given object.
Gets the key value.
Appends a string to the end of the string pool.
Sets the index of the String in the String array.
Expands the capacity of the string array to accomodate its capacity.
Calculates the length of the array.
Create the error message for the error.
Create a scoped proxy bean instance.
Initializes the map from the list of files in the directory.
Determines if the given file should be processed.
Use a new watch file.
Starts polling the watch task with the given polling interval.
Dispatches a change to the listeners.
Adds an enumeration to the end of the list.
Compute and return the size of the field info.
Adds information about this field to the given byte vector.
Creates a new target instance for the given value.
Writes the given property value to the injection point.
Decorates the given page and write the decora content to a writer.
Parse the given page and add the given decora tags to the document.
Writes the decora tags in the specified page.
Writes the region part of the decora tag.
Starts the server.
Runs the given process and waits for it to finish.
Gets the store.
Create a new gzipped response stream.
Initializes the template data.
Append column name.
Adds a rule to the list of rules.
Apply the flag to a value.
Process includes.
Processes the excludes if present.
Gets the pseudo class name.
Adds all elements in the specified collection to this collection.
Searches for the insertion point of the specified element.
Binds the given annotation type to the given action config class.
Registers a new action configuration for the given action class.
Lookup the action configuration for the given action type or annotation.
Registers an action with the given consumer.
Sets the system mail properties.
Checks that the given value is within the validation context.
Find last table node.
Fixes the elements in the roads.
Register session beans.
Get session map.
Initialize the proxy.
Adds a advice init method.
Ends the bundle.
Adds a new value to a section.
Extract profiles and add.
Add a new operator if the operator is non-null.
Converts a typed desc into the corresponding class name.
Converts a type description into a Typeref name.
Converts a Java type to a Typeref signature.
Adds multiple consumers to the consumers list.
Creates a new collection of the given length.
Converts an object to a collection.
Convert value to collection.
Convert collection to collection.
Adds a line number to this sequence.
Makes the given visitor visit this label.
Puts the value of this instruction into the given byte vector.
Adds a reference to the end of the list of forward references.
Marks a subroutine as being processed.
Compare two digits.
Fixes the specified accent.
Puts a byte into the byte vector.
Put one byte value into the byte vector.
Puts a short value into the vector.
Puts the given byte and short value into the byte vector.
Put a value into the byte vector.
Puts an integer into the vector.
Puts two short values into the byte vector.
Puts a long value into the byte vector.
Puts a byte array into the byte vector.
Enlarges the byte array to fit the specified capacity.
Authenticate user via http session.
Authenticate user via token.
Authenticate user via basic auth.
Finds the message with the given key in the given locale.
Gets a resource bundle.
Gets the value at the given index in the given array.
Sets the entity id.
Saves the given entity in the database.
Update all instances of the given entity.
Updates a property.
Update a property.
Find by id.
Find one by property.
Finds one entity matching the criteria.
Delete an entity by its id.
Delete a given entity from the database.
Get count of entities.
Increases a property by delta.
Decreases a property.
Find all the related entities.
Get a list of entities for the target class.
Clears the attribute map.
Returns a set of entries.
Sets a new value for a given key.
Removes a value from the map.
Gets the current stack trace.
Get the stack trace of the exception.
Get the stack trace chain.
Gets the exception chain.
Converts an exception stack trace to a string.
Converts a Throwable to a String.
Builds a detail message.
Unwraps the given throwable.
Register as consumer.
Accepts a madvoc component class.
Get the system class loader.
Gets a resource as stream.
Gets the resource as stream.
Gets the class as stream.
Gets the class as stream.
Adds a new child to this chunk.
Find or create a child with a specific value.
Parses the request and puts the parameters in the map.
Converts an object to a collection.
Invokes the setter for the given value.
Set the value of an array using a forced cast.
Creates a new instance of a bean property.
Extracts the type of the property.
Stop the servlet by removing the session and adding the cookie to the response.
Starts the authentication process.
Gets a date in the local date zone.
Converts the given local date time to a gregorian calendar.
Define a proxy for the given class.
Add a check.
Resolve for validation context.
Adds property annotation checks for the specified class.
Collects annotation checks on fields and methods of a property.
Collect annotation checks.
Copy default check properties.
Encodes the given URI part into a Base64 encoded string.
Encodes the given string using the given encoding.
Encodes the given URI scheme with the given encoding.
Encodes the host part of a URI.
Encodes the given URI port with the given encoding.
Encodes a URI path.
Encodes a URI query component.
Encodes a query parameter in the form of a URI component using the given encoding.
Encodes a fragment.
Inspect the properties of the class.
Gets the sorted array of all PropertyDescriptors.
Returns an array of all of the cookies found in the response.
Unzips the response.
Closes the http connection.
Determines if this scope should be processed.
Encrypt a block of data.
Decrypts an array of bytes.
Convert the map to an object of the given type.
Generates a list with the given component type.
Sets the value of a property on the target object using reflection.
Generates a map from the key and value types.
Compares two DBColumnDescriptors based on their isId property.
Sets the given default header to the given value.
Sends a request to the server.
Sends the request and returns the response.
Adds the default headers for the given request.
Reads the cookies from the response.
Adds the appropriate cookies to the given http request.
Sends an email and returns the id of the email.
Sets the subject of the email with the given data.
Sets the sent date of the email.
Sets the headers for the given email with data.
Sets the people from the email with the given data to the given email.
Sets the recipients in the email with the given data.
Add the body data to the email.
Sets the content of the email with the given partToSet.
Creates a body part for an attachment.
Gets the content type.
Saves the result set.
Close all result sets.
Close the query.
Releases any resources associated with this query and releases any associated resources.
Set the fetch size.
Sets the maximum number of rows in the result set.
Execute update.
Execute the SQL query and return the count.
Gets the generated columns.
Gets the query string from the callableStatement or the prepared statement.
Creates a proxy for the specified target.
Create a collection from the given iterator.
Creates a stream from the given iterator.
Compares two objects for order.
Sets the default wiring mode.
Prints a message and stack trace if enabled.
Gets the caller class.
Shorten the class name.
Exclude the given types from serialization.
Serializes the given source object to the given target.
Serializes the given object to a XML string.
Clones the given object via serialization.
Writes the given object to the given file.
Reads an object from a file.
Serialize an object to a byte array.
Reads an object from a byte array.
Resolve mapped types table names.
Creates the table names for the given entity types.
Read column value.
Cache the result of the query.
Resolves a method for the given type and method name.
Converts table name into entity name.
Checks if the connection is valid.
Renders a view to the specified target.
Locates the target for the given path.
Gets the current response writer.
Gets the response output stream.
Writes the given content to the response.
Sets the content type.
Print the given string to the output stream.
Logs in using the user's authentication token.
Gets the token as json.
Perform basic authentication.
Converts an URL to a container file.
Creates the specified directory if it does not already exist.
Creates a new directory if it does not already exist.
Copies the given source file to the destination file.
Copies the given directory to the given destination directory.
Moves the given source file to the given destination directory.
Moves a directory from one location to another.
Deletes all files and sub-directories of the given directory.
Reads the UTF-8 encoded characters from the given file.
Reads the contents of a file into a char array.
Write chars to a file.
Write string to a file.
Append string to a file.
Read the specified number of bytes from the specified file.
Write some bytes to a file.
Append bytes to a file.
Copies a directory to a local destination.
Delete a directory and it's contents.
Creates a temporary directory and deletes it if it does not exist.
Checks if the file is a binary.
Checks if the given directory exists and is the same as the source directory.
Checks the existence of a file and creates a directory if necessary.
Prints the usage of a command.
Resolves a method for an action.
Registers an action.
Register a path alias.
Moves the iterator to the next value.
Creates a new char array filled with characters from the given array.
Execute the method.
Match upper case.
Returns a character sequence starting from the specified index, and ending from the specified index.
Returns an URL array containing all the URLs of the specified class in the specified classloader.
Add BCC recipient address.
Registers a new type.
Lookup serializer for a given type.
Parses the request from the given input stream.
Gets the first value of the parameter with the given name.
Gets the values of a request parameter.
Get a file from the request.
Gets a file from the request.
Initializes the filter.
Parse the SQL template.
Find the end of a macro.
Counts the escape count of a macro at given index.
Builds a query from a multi-map.
Parse query.
Prepares a parameter name for a HTTP header.
Extracts the media type from the given content type.
Generates the HTML representation of the node.
Generates the HTML code for the given node.
Configures the web application with the given servlet context.
Resets the context to its initial state.
Set lazy state for the parser.
Replaces the class with the mapped type for the path.
Parses the given string as a list of objects of the given component type.
Parses the given string as a map.
Resolve lazy value.
Skip object.
Parse a quoted string.
Parse the string content.
Parses a Unicode value from the input.
Parse the content of the current line that contains unquoted characters.
Parses the next number from the input.
Parse the array content.
Creates the empty constructor.
Create method wrapper for simple methods.
Resolve the raw type name.
Resolve reference from value.
Resolve reference from values.
Reads references from annotation on method or constructor.
Builds the default references for a default method or constructor.
Build a default bean reference for the given property.
Removes all duplicate names from an array of BeanReferences.
Convert references to bean references.
Convert ann value to references array.
Runs the given consumer with the given DWR runtime.
Finds a method in a class by name.
Finds a constructor of the given type that supports all constructors of the given parameter types.
Resolve all interfaces of a class.
Compare two class arrays for equality.
Force access of an accessible object.
Creates a new instance of the class with the given parameters.
Get all superclasses of the given class.
Get the child class of the given instance.
Gets the jar file of a class.
Sleep for a period.
Sleep for a short period.
Wait for an object to be created.
Creates a thread factory to create daemon threads with the given name and priority.
Gets the current value.
Visits a parameter.
Visits an annotation of the given type.
Visits a field instruction.
Visits a method instruction.
Generates the instruction to invoke a dynamic instruction.
Visits a jump instruction.
Visits a multi-a field with the given number of dimensions.
Visits a try catch block.
Convert the properties to a writer.
Reads the data from the input stream and writes it to the output stream.
Moves the cursor to the next non-null element.
Moves to the next record.
Concatenates the given arrays into one.
Concatenate arrays of type T to one array of type T.
Resizes an array to a given size.
Appends an element to the end of an array.
Removes the given component from the given array.
Gets the index of the first occurrence of the specified value in the array.
Gets the index of the first occurrence of the given value in an array.
Gets the index of the first occurrence of the given byte array in the given range.
Enables the whitespaces between tags in the configuration.
Parse the given content into a Document.
Parse the given lagartoParser into a Document.
Computes the maximum stack and local.
Ends the current basic block with no successor.
Collects the attribute prototype.
Injects the given target object into the current scope.
Register a pseudo class.
Lookups a pseudo class by name.
Invokes the action request.
Gets an array containing the names of all bean properties of the given type.
Visits all properties in the source.
Checks if the given property name matches the given rule.
Resolve the injection point for the given class.
Reads the filter parameters from the configuration and sets them in the given target object.
Sends the bundle file to the client.
Lookup the bundle file for the bundle id.
Lookup the gzip resource for the given file.
Registers a bundle.
Creates the SHA-256 digest of the given source.
Creates a bundle from a list of sources.
Clears the action bundles and mirrors.
Fixes the url tags in the content that contain relative CSS URLs.
Update column.
Create table ref name.
Get the db session.
Converts an object to a single element array.
Parses the given signature and returns a map of all the generics found.
Resolves the injection point for the given type.
Checks if the given property type matches any of the ignored property types.
Opens the connection for a query.
Opens a new DB connection.
Closes the transaction.
Commits a transaction.
Rolls back the current transaction.
Creates a new Properties object from a file.
Creates a new Properties object from a string.
Load properties from a string.
Get a subset of properties.
Creates a new Properties object from the classpath.
Gets the value of a property.
Resolve all variables in a properties object.
Resolve the value of a property.
Resolve scope.
Returns the corresponding TransactionMode for the given type, method name, and argument types.
Registers the given annotations for this transaction.
Read transaction annotation.
Checks if the node should be processed.
Match element.
Checks if the node at the given index should be accepted.
Unescapes the special characters in the given value.
Build the list of packages for the given version number.
Clones a node to another.
Removes the node from its parent.
Adds the specified nodes as child of this node.
Inserts a child node at the specified index.
Inserts the specified node into the parent of the specified child node.
Inserts the given node as a child of this node.
Inserts the specified node into the parent of the specified ref child.
Inserts a child node after the specified child node.
Removes all child nodes from this node.
Finds the first child node with the given name.
Removes child nodes that match the given predicate.
Checks if the node is a child of this node.
Initializes the child element nodes array.
Initializes the sibling names list.
Initializes the child nodes list.
Changes the owner document of the node.
Get the previous sibling node name.
Get the text content of the node.
Returns the inner HTML of this builder.
Visits all child nodes of this node.
Get the CSS path of the node.
On decora tag.
On id attr start.
Define the decora tag.
Adds a proxy aspect.
Adds the given root package to the list of packages to scan.
Adds the root package of the given action class and its package mapping.
Find the root package for an action path.
Resolve validation message.
Removes duplicate names.
Adds a new props file.
Iterate over all the targets.
Iterate over the targets for the given scope and invoke the biConsumer for each.
Iterate over each target and out.
Extract parameter values from the targets.
Makes the targets for the given action based on the method parameters.
Create action method argument.
Notifies listeners that a session has been created.
Handles a session destruction.
Appends the specified value to the end of the current array.
Adds the specified array to the end of the current array.
Removes the element at the given position from the list.
Resolves the target for the given result.
Sends an error to the client if the target was not found.
Converts value object to string.
Madvoc router filter.
Gets the pseudo function name.
Resolves the injection point for the given class.
Create a socket to the SOCKS4 proxy.
Counts the number of attributes in this attribute list.
Gets all action results.
Checks if the given character equals one of the given character sequence.
Finds the first equal char in the given source starting at the given index.
Finds the first occurrence of the supplied match in the source array.
Adds command line arguments.
Adds an environment variable to the command line.
Runs the process.
Invokes the given listener for the given type.
Copies this frame from the frame.
Gets the abstract type from the given type descriptor.
Set the input frame from the api format.
Gets the local index of the output variable.
Sets the local index and the abstract type.
Pushes a new abstract type onto the stack.
Pushes a type to the top of the stack.
Pop the given number of elements from the output stack.
Pop the argument list from the stack.
Adds the initialized type.
Gets the initialized type.
Puts the abstract type information from the given abstract type into the given byte vector.
Prune expired entries from the cache.
Visits a module.
Visits an inner class.
Visit an Annotation. This is the primary focus of the visitation.
Get the DBThreadSession.
Closes the current thread session.
This method creates the array of execution objects for the current action runtime.
Invokes the action method.
Reads the request body from the request body.
Calculate the first item index of a page.
Calculate the first item index of the page.
Computes whether two values match.
Converts an array of characters to a byte array.
Finds the first diff.
Resolve node name.
Resolve attribute name.
Load props from a file.
Load props from a file.
Load props from an input stream.
Loads properties from the given map.
Loads properties from a map.
Load properties from the classpath.
Returns the value of the given key, or the given default value if the key does not
Sets the value of a profile.
Extract the active profile properties and store them in the target map.
Extract Properties map to target map.
Extract sub properties.
Return the inner map for the given prefix.
Adds the inner map.
Resolve active profiles.
Get all profiles.
Gets the profiles for a given property key name wildcard.
Adds a property injection point.
Add a set injection point to the injection point set.
Adds a method injection point.
Adds the init method points.
Adds the destroy method points to the given array.
Resolves the target class for the given proxy.
Inject target into wrapper.
Gets the type of the target wrapper.
Find the field with the given name in this class descriptor.
Gets the type of this field or read method.
Resolves the key type.
Resolves the component type of the getter or field.
Creates a new JsonResult instance for the given object.
Creates a JSON representation of the given exception.
Resolve the HTTP method name.
Return true if the given sequence matches the given pattern.
Resolves the loading for the specified class.
Loads a class from the classpath.
Returns the URL of the resource with the given name.
Wait for the thread to end.
Detect annotation type.
Build an InjectionPoint from the given annotation value, property name, type, and scope.
Loads the class metadata for the current type if available.
Returns an array of URL objects for the specified class using the specified classloader.
Sets the bean.
Updates the bean.
Loads the property descriptor.
Connect to the DBOOM server.
Add an iterator to the end of the iterator list.
Prints the logo.
Stops the application.
Create a socket to connect to the given host and port.
Create SSL Socket.
Get the default SSL connection.
Gets the socket factory for the proxy.
Returns a random string from the given array of characters.
Generate a number of random characters.
Generate a number of random ranges.
Creates a new array instance for the given target type.
Injects the given value into the target object.
Converts the value to the specified type.
Visits all providers of the given service.
Creates a default type cache.
Put t.
Gets the all MethodDescriptors.
Resolve the IP address for a given hostname.
Parses an IP address as an integer.
Checks to see if the given string is a validaint IP address.
Resolve the host name of an IP.
Downloads the given URL and returns the contents as a byte array.
Downloads a string from the given URL.
Downloads the given file from the given URL.
Connects to the remote host and port.
Connects to the remote host using the given connection timeout.
Gets the primitive class name index.
Loads the class with the given name using the given class loader.
Loads a class by name.
Shuts down the instance manager.
Search for the element in the array.
Searches for the element in the array using the given comparator.
Filter the list of rules that should not match any of the specified exclude patterns.
Include this rule with the specified include patterns.
Includes all properties of this class as specified in the given template.
Starts the tag with the specified index.
Register a new component.
Resolves the SQL type of the given DBColumnDescriptor.
Preprocess a SQL string so that it can be used in a SQL statement.
Create result set mapper.
Finds a generated key of the given type.
Populates the primary keys for the given entity.
Create a new instance of the action interceptor class.
Set bean.
Sets the query parameters as a map.
Sets the objects in the queue.
Inserts the chunk after the given one.
Lookup the entity descriptor for the given type.
Find table descriptor by column ref.
Resolve table.
Resolves the class for the given object.
Appends missing space.
Get all file parameter names.
Does the given page include the given request or not.
Gets the full URL for the given request.
Gets the request uri.
Resolve parameter names.
Starts the server.
Stops the engine.
Filter by subject.
Filter by message id.
Filter by from.
Add a to term to the email.
Adds a CC term to the email.
Filter by BCC recipient.
Filter the email by the given flags and value.
Creates a new set of flags with the given flag set to the given value.
Filter by received date.
Filter by sent date.
Filter the email by size.
Adds an AND term to each of the email filters.
Filter by OR.
Negates the given email filter.
Concatenates the search term into the current search term.
Encodes the given byte array into a base 32 string.
Check if the gzip is eligible.
Validates the given object against the current validation context.
Validates the target object against the validation context.
Adds the given profile to the list of enabled profiles.
Use a list of enabled profiles.
Checks if the profiles match.
Parse the request body.
Returns the milliseconds since the epoch.
Add the given julian date to this date.
Gets the julian date from the given julian date.
Sets the value of i to the specified fraction.
Emits a comment to the specified range of comments.
Report an error.
Generates a hash for the given password.
Generate a PBKDF2 hash of the given password.
Converts a hex string to a byte array.
Resolve provider definitions.
Sets the attachment name.
Sets the content id from the file name if not specified.
Resolve content type.
Parses the type from the signature.
Compute the size of the attributes.
Put attributes into the given byte vector.
Decodes the given string using the given encoding.
Decodes the given query string using the given encoding.
Starts the server.
Check connection provider.
Visit a Method. This is the primary focus of the visitation.
Generates the code for the end of the method.
Create a method signature from the given arguments.
Converts an array of objects into a csv line.
Converts a line of comma delimited text into an array of strings.
Resolve a InjectionPoint for a given class.
Creates and returns a class reader for the advice class.
Gets the cached advice class reader.
Encrypt a string.
Decrypt a string.
Gets the logger with the given name.
Sets the field name.
Creates an ActionRequest for the given action.
Create a new instance of the action filter wrapper class.
Destroys a bean.
Shutdown the destroyable beans.
Retrieves the set of received messages.
Main method that can be used to launch a clustered service.
Runs the report loop.
Prints an error to the standard out.
Print the rate.
Maps an existing file to a read-only buffer.
Closes the replay session.
Do the work.
Replies the current position in the log metadata buffer.
Inserts a fragmented message into the buffer.
Appends the specified amount of padding to the end of the current message.
Closes this session and all associated resources.
Polls for an error response.
Stops a replay session.
Fires an event that indicates that an image was available.
Notifies that an image is unavailable.
Send channel status.
Receive channel status.
Sets the limit for the output buffer.
Appends a buffer to the end of the current buffer.
Polls the next fragment.
Maps the loss report file to a mapped byte buffer.
Creates a snapshot of the streams from the given counters.
Create the default header for a given session id, stream id and term id.
Sets the buffer containing the key data.
Adds a direct buffer to the label buffer.
Connects the Aeron archive to the remote endpoint.
Try to connect to the given response stream.
Sends a close session request.
Start recording boolean.
Stops recording from a channel.
replay a specific recording.
Stops a replay session.
List recordings from a specific recording id.
List recordings for uri.
Adds a list recording request to the buffer.
Extend recording to channel.
Gets recording position.
Gets stop position.
Method to list recording subscriptions.
Checks if the udp channel tag matches the tag.
Gets the address of the destination of a channel.
Returns a description of this interface.
Adds an image connection to the image connections array.
Inserts a new packet into the buffer.
Finds a control toggle in the given counters.
Put or replace a parameter with a new value.
Gets the tag associated with the channel.
Gets the entity tag.
Adds a session id to a channel.
Gets the tag.
Appends padding to the end of the log condition.
Calculates and updates the publisher limit.
Allocate a new buffer with the given name, type, sessionId, and channel.
Gets the label name for a given label type.
Scan for available bytes from the given buffer.
Resets all fields to their default values.
Validates this context against the supplied media.
Sets the prefix for the channel.
Adds a media string to the channel.
Sets the control mode of the channel.
Sets the term length.
Sets the term offset for the current log buffer.
Set linger ns.
Closes this channel.
Check if a frame is valid.
Receive a remote address from the specified buffer.
Assigns a new retransmit action to the given term.
Process timeouts from the given retransmit sender.
Converts the given status to a human-readable string.
Allocate a counter.
Resets the content of a vector.
Checks that this vector is valid.
Checks that the length of each of the vectors is the same as the length of the
Computes the length of the producer window of a term buffer.
Validates socket buffer lengths.
Validates the page size.
Validates the session id range.
Validates the unblock timeout settings.
Adds the given error code to the buffer at the end of the response.
Resets the state of this instance to its initial state.
Encodes the given cluster members as a comma separated string.
Adds the member status publications to the channel uri.
Closes the publications of the given members.
Checks if the given cluster members has an active quorum.
Return the position of the quorum in the given ranked positions.
Resets the log position for the given cluster members.
Check if the given position is within the given leadership term id.
Check if the cluster has won't have any vote on the full count.
Checks if the cluster members have a vote for the given candidate term id.
Determines the member based on the member's id and the member's endpoints.
Checks if the provided member contains the provided member's endpoints.
Determines if two clusters share the same endpoints.
Checks if the given cluster member is a blacklisted candidate.
Checks if the cluster candidate is a quorum candidate.
Checks if the provided member's endpoints detail is the same as the provided member'
Finds the index of the given member id in the given array of members.
Removes the member with the given ID from the given array.
Return the highest Aeron ID in the given array of members.
Maps an existing cnc file to a new byte buffer.
Checks if the cnc file is active.
Checks if the driver is active.
Check the cnc file to see if the driver is active.
Requests the driver termination.
Reads the frame length from the buffer starting at the given offset.
Adds the frame length in little endian order to the given buffer.
Writes the frame type to the given buffer.
Fills the given byte flags in the given buffer at the given offset of the frame.
Sets the frame term offset in the given buffer.
Sets the frame term id in the given buffer.
Find the counter id for the given recording.
Find the counter id for a session.
Gets the recording id from the counters reader.
Checks if a counter with the given ID is active.
Flyweight application specific feedback.
Reload all the entries from the file.
Finds the last term in the list.
Creates a recovery plan for the given archive and service count.
Creates a recovery plan for the given snapshot.
Appends a term to the cluster.
Appends a snapshot of the given recording id, leadership term id.
Commits a new log position to the leader.
Tombstone entry.
Closes the context.
Inserts a vector into the buffer.
Unblock the given log buffer from the given array of buffers.
Returns the channel name.
Flyweight channel.
Check the term length.
Checks that the given page size is valid.
CAS active term count.
Computes the position from the given active term and the given position bits to shift.
Computes the length of a log segment.
Stores the default frame header.
Applies the default header to the given buffer.
Rotates the log.
This method initialises the given metadata buffer with the given partition index and term id.
Gets the offset of the term length from the given raw tail.
Gets the raw tail volatile long from the given metadata buffer.
CAS the raw tail of an update.
Adds a token buffer to the token buffer at the specified offset.
Allocate a counter with the given data.
Finds the first counter ID in the counters reader.
Check if the counters has a replay flag.
Gets the recording id from the counters.
Convert flags to char array.
Flyweight channel.
Offers a buffer to the cluster.
Wrap the given buffer starting from the given offset.
Commits the frame data to the buffer.
Abort the frame and return the frame back to the pool.
Main method that can be used to launch a media driver.
Closes all the resources used by this context.
Returns the position of this frame in bytes.
Allocate a counter.
Finds the counter id for the given serviceId.
Allocate a new counter with the given name and type id using the given counters manager.
Closes the output stream.
Dispatches a new recording descriptor to a consumer.
Adds a new slab to the buffer.
Sets the byte at the specified index in the buffer.
Adds a set of statistics.
Converts an array type into a group type.
Convert a struct type to a group type.
Generate an annotation for the given message.
Ends the previous bit packed run.
Reads one struct from the specified input stream and writes it to the specified output stream.
Reads the list of footers for the given configuration and status.
Read the footers for a summary file.
Reads the data from the given file and applies the given metadata filter.
Reads the next row group from the block.
Reads the next filtered row group from the block.
Reads a dictionary from a column chunk meta data.
Adds a new writer with the given allocation.
Removes the given writer from the queue if it exists.
Calculates and updates the memory pool size.
Register a new scale call back with the given name.
Starts the output stream.
Starts a new block.
Starts a new column.
Writes a dictionary page to the current output stream.
Write the data page.
Ends the current block.
Copies the content from the given input stream to the given output stream.
Ends and closes the output stream.
Merge the metadata files into the global and block data blocks.
Writes the metadata files to the output path.
Writes the job summary file to the output.
Merge the given global meta data into the given merged global meta data.
Reads the current value from the delta byte array.
Check if the given schema is null or contains null values.
Finds the first non-null object in the given array of objects.
Converts a string value into an object of the given schema.
Parses extra meta data and creates a new thrift meta data object.
Parses the given thrift class and creates a new thrift meta data instance.
Returns a map of metadata key-value pairs where the key is the name of the class
This writes a null value to the log.
Writes the page to the output stream.
Initializes the delta binary packing configuration from a page.
Allocate the buffers that holds the current min and max values.
Checks that the enum at position i exists in the expected type.
Calculates the widths of the MiniBlockBuffer that should be used for the delta block
Throw the given exception if it is of the given exception type.
Gets the statistics for a primitive type.
Gets a builder for the given primitive type.
Merge multiple statistics into a single one.
Gets the non-null schema.
Constructs a TaskAttemptContext from the given configuration and the task attempt id.
Invokes the given method on the given object with the given arguments.
Display the members in a human-readable string.
Merges multiple fields into one.
Initializes the counter for this job.
Gets the filter.
Gets the footers for the given set of file statuses.
Generates a list of splits based on the row group blocks and the block location array.
Writes the top-level message to the log record.
Validates that the schema is a valid H2O mapping.
Gets the descriptor for the given proto class and prints it in text format.
amend missing required fields.
Check set.
Reads meta data from an input stream.
Closes the output file.
Set the job's schema.
Adds a descriptor to a Parquet type.
Asserts that the type of the found column is a valid type for the primitive type.
Checks if the given long value is a non-negative integer.
Creates a schema mapping from an arrow schema.
Creates a schema mapping from a Parquet schema.
Creates a schema mapping from an arrow schema and a Parquet schema.
Writes the header of a Parquet data page to the output stream.
Skip to the first record that matches the record filter.
Writes the given object to the given configuration as a base64 string.
Removes a value from the cache.
Puts a new value into the cache.
Gets the value associated with the given key from the cache.
Writes a value to an Avro schema.
Sets the glob as a set of regular expressions.
Output the given content to the given logger.
Open an input stream to the given filename.
Return a record filter based on the given column path.
Converts a struct into a thrift schema type.
Creates a new group type.
Creates a new group type from a list of elements.
Gets the merged key value meta data.
Gets a split from the given input split.
Returns a map of field names to their corresponding class.
Resolve schema access.
Get the input files.
Checks that the input files are valid.
Get the list of input files from the partition directory.
Returns a record filter that filters records from the given start position to the given page size.
Creates a new ListConsumer and applies the consumer to each element of the given ListConsumer.
This method initialises the job's path to partition info.
Merge the given Tuple into a new TupleSummaryData.
Sum up a tuple to a schema.
Read a struct.
Reads a map entry.
Write an integer value into the stream.
Read 4 bytes in little endian byte order.
Set the Avro schema for the job.
Creates a Kafka topic if it does not already exist.
Return a pipeline with multiple stage beans.
Create interceptors for stage.
Creates interceptor bean instance.
Parses a schema from the given string.
Converts milliseconds to days.
Extracts the avro schema from the header of a record.
Upgrades from v1 to v2.
Copies a list of blobstore resources from the given path to the given blobstore
Resets all columns to their default values.
Reports the health of a thread.
Register a thread in the health report registry.
Stores the current set of control hub configurations for the given runtime.
Check the current user for a credential.
Attempts to upgrade the pipeline if the given issues are present in the given library.
Attempts to upgrade the given library to the given configuration if it is needed.
Attempts to upgrade the job if it is needed.
Create the upgrade services for the given library if it doesn't already exist.
Attempts to upgrade the stage if it's not already running.
Gets the fields that do not exist in the record.
Checks if the given class is in the given package list.
Adds the specified element to this set.
Adds the given element to the set of evicted elements.
Returns the value for the given key, or the default if there is no value for the
Adds the reported errors to the stage output list if it is not empty.
Loads and returns a descriptor for the given proto descriptor.
Gets all file descriptors from a set of descriptors.
Populates the default values for the given types and extensions.
Get a descriptor from a set of file descriptors.
Converts an object to a protobuf field.
Converts a field in a protobuf message.
Converts a field to a protobuf message.
Upgrades the given list of Config object to a list of Config objects that need to be
Check the connection.
Converts a KuduType to the Flink Kudu Type.
Creates a field in the given result.
Intercept records.
Returns the text content of the current line.
Adds missing configs to stage.
Parses the response and creates a record for it.
Adds the response headers to the given record.
Write response header to field.
Write response header to record header.
Saves the metadata.
Configures the client with the given issues.
Parses the response headers only.
Increments the source offset by the given increment.
Parse an paginated result.
Adds the response headers.
Resolve the request headers.
Processes the response and returns the new source offset.
Check if a property is defined in the configuration.
Converts a parser exception to a data parser exception.
Converts a generator exception to a data generator exception.
Gets the credentials.
Creates a new preview with an override of the provided stage outputs.
Copies the current character from the buffer to the supplied string builder.
Removes duplicate duplicates from a set of packages.
Finds the first line that matches the regular expression.
Resolves the main line for a given chunk.
Closes the connection to the database.
Escapes a string so that it can be used in a query.
Gets flow control settings.
Gets the channel provider.
Puts the given result into the given batch.
Compiles an expression.
Create the digest expression from the original expression.
Adds a dictionary from the specified input stream.
Adds a dictionary from a reader.
Stops the data set.
Roll the given new data window into the given new data window, using the given end time
Serialize the given object to JSON string.
Deserialize the request body into a new object of the given type.
Deserialize an instance of the given type from the given file.
Writes the record to the file.
Resolve el.
Generate inner field from the list.
Gets the table name from the given metadata record.
Gets the database name from the given metadata record.
Gets the value of the internal field of the given record.
Gets the location from the given metadata record.
Gets the custom location for the given record.
Extracts the avro schema from the given record.
Gets the data format from the given record.
New schema metadata field builder.
Validates the type information and partition name are valid.
Generates the path to use for the given partitions.
Serialize a schema to HDFS.
Set the parameters for this record.
Get the configuration for the API.
Parses the given string as an RFC3164 formatted time.
Formats the given template with the given arguments.
Start batch execution.
Check if the given record contains one of the Solr fields.
Filter out field names that have beenenerated.
Sends an onRecordErrorException to the ErrorRecordHandler.
Returns the dependency for the given jar name.
Parse the jar and its dependencies from the given URL.
Gets an instance of the connector.
Closes the bucket and disconnects the cluster.
Converts a string code into a label.
Verifies that the given config definition depends on the given key.
Gets the OperationType from the header of the record.
Builds a subdoc mutation.
Generates the SQL string for a alter table.
Configures with the given set of configs and the given login context name.
Takes all messages from the batch.
Commits a batch of messages.
Notifies the consumer that an error has occurred.
Injects issues into the given stage.
Get hide stage definitions.
Returns the definition of the lineage publisher for the given name.
Format the column name to upper case.
Formats a value as a string.
Get the pipeline info for a given rev.
Creates a new pipeline fragment.
Get a list of pipeline info.
Import a pipeline fragment.
Gets the file path.
Get the operation code from the record.
Get field path.
Retrieves the next event from the queue, waiting up to the specified wait time if necessary
Gets the runner from the queue.
Gets the runner for the given idle time.
Return a runner to the queue.
This method destroys this instance.
Validates that the queue is not destroyed.
Checks if the stream exists.
Gets the last shard id.
Process the queue and process the error records.
Handles SQL exception.
Get the hash code for each column.
Compare two files at the same time.
Gets the pid of the given process if it is an instance of UnixProcess class.
Validate and extract fields to hash.
Get proxy user information.
Roll the current time and return a new object with the rolled time.
Get a snapshot of the active stats.
Create the directory if it does not already exist.
Runs the given schema table classifier on the given batch of records.
Processes the batch by expression and writes the result to the given record writers.
Writes the given record iterator to the given record writer, using the given error record handler
Generates the no- more data event.
Detects if a new partition is present in the cache.
Updates the record's header and target directory according to an avro schema.
Processes the data for the given group and value.
Returns true if the two stage classes have the same version.
Starts the Spark application.
Configure auth and build client.
Resolve the request headers.
Evaluates HTTP method expression.
Fill the null types.
Returns the value of the field at the given path in the given record.
Loads a schema from the registry.
Registers a new schema.
Loads a schema from the registry.
Gets the schema ID from the given subject.
Loads a schema from the registry.
Writes the schema id to the output stream.
Detect schema id.
Gets the default values from the given schema.
Parses the given message and produces a single record per message.
Log the error details.
Gets the records that have been bad due to the given error policy.
Initializes the generator.
Gets the outward edge vertices for a given vertex.
Gets the inward edge vertices for a given vertex.
Serializes an offset map.
DeSerializes an offset into a map.
Queues a new report for the queue.
Retrieves a report.
Checks if is SDC.
Write offsets to the main offset file.
Deletes the given blob from storage.
Handles errors in GCS origin requests.
Handles the archive operation.
Gets a reader on the current file.
Releases a reader.
Sets the dpm base url.
Add a new default header.
Parses the given string as a date.
Escapes a string so that it can be used in a URL.
Gets the client.
Initializes a Kinetica connection.
Gets the table metadata.
Creates an event builder for the given event context and to event.
Builds a schema from a map of field names to a set of field levels.
Converts the given Oracle code to SDC type.
Adds the given set of classes to the job's jars.
Check field order by list.
Checks if the condition expressions are valid for the given field name.
Gets the offset lag for the given file.
The premain method.
Gets the parallelism of this task.
Runs a query.
Get the table description.
Checks if the table accepts inserts.
Gets the column type.
Checks if the field type is nullable.
Gets the table schema.
Get the column properties.
Tries to determine the class for the given type name.
Initializes the issues list from Aerospike.
Get the topic for a given record.
Gets the input stream for this file.
Gets the output stream for this proxy.
Checks if the file exists.
Parses a string containing a permission.
Checks if all the services are available.
Creates a new simple aggregator instance.
Gets the aggregator unit.
Creates a new aggregator instance with the given name and time window.
Create a new group-by aggregator.
Starts the data provider with the new data window end time.
Stops the data provider and returns the data map.
Roll the aggregator data to the given new data window end time.
Releases the reference to the login manager.
Converts a glob expression to a regular expression.
List objects lexicographically.
Stops the snapshot if it is running.
Produce empty batches for idle runners.
Create the failure batch.
Returns a bound statement for the given record.
Replaces the entries of this configuration with the entries of the given new configuration.
Generate the lookup key.
Reads the next line from the reader and appends it to the StringBuilder.
Roll the timer forward or backward.
Enable the given dpm in the given context.
Disables the dpm authentication.
Normalize dpm base url.
Retrieves a user token.
Logs out using dpm base url and user auth token.
Updates the token file.
This method updates the dpm base url with the given list of labels.
Get the schema for a field type.
Builds a schema for a field's type.
Gets the decimal scale or precision.
Gets the default value for the given schema.
Initializes the global metrics if needed.
Compare two files for order.
Gets the index of the specified group.
Gets the names of the groups used in this query.
Returns true if the character at the given position is escaped.
Checks if the given string is a slash escaped character.
Checks if a character is inside a character class.
Count how many times a character appears in a given string.
Extracts a list of group information from a named pattern.
Replaces all escaped characters in the given string with the given replacement.
This method does the actual http get.
Refreshes the given schema and table.
Checks if the given entry has expired.
Gets the current file offset.
Fast forward.
Converts a string value into an appropriate number.
Parse the type part from the buffer.
Parse the values from the buffer.
Lookup all primary keys for the table.
Create custom field mappings.
Converts a field type to a SQL string.
Gets the table name.
Set the primary key columns in the given record using the given op code.
Handles a SQLException.
Executes the command with the given set of offsets.
Prepare the batch context.
This method is called when a batch has been completed.
Flatten the entire record.
Creates a new instance of Stage runtime type associated with the given bean.
Executes the action.
Gets the columns to parameters.
Gets the condition for partition column.
Validates the stored and specified offset.
Retrieves the requested definitions for the given generators.
Gets the non-empty command line arguments from the given list.
Gets the operation.
Converts the given number of bytes to a human readable string.
Scans the specified live file, ignoring any errors that might occur.
Gets the number of pending files in the directory.
Checks if the given property is whitelisted in the specific whitelist.
Checks if the set of versions matches the expected set.
This is the main method for testing purposes.
Propagate the runtime configuration.
Validates the report description.
upgrade from v1 to v2.
Extract named groups from raw data.
Commits a commit to the consumer.
Create and return an embedded SDC object.
Set the fields in record.
Gets the remotePipelineAndValidationStatus objects.
Creates a new remote data collector result.
Create a gauge with the given name and pipeline name.
Get the columns to parameters for the given record.
Generates the header attributes for the given file.
Validates a single record.
Handles old temp files.
Gets the Avro input stream.
Gets the file reader.
Writes an avro record to a file.
Check input encrypt field.
Checks if the given field is encryptable.
Check input decrypt optional.
Checks that the given field is decryptable.
Prepare encrypt byte array.
Sets the parent pattern.
Appends the replacement from the parent pattern to the StringBuilder.
Return the named groups of this pattern.
Replaces all properties of this pattern with the given replacement.
Gets the global variable.
Creates an event record representing the start of an event.
Create a record representing the stop event.
Fix offset.
Extracts value as runtime.
Execute alter table add partition query.
Execute alter table properties query.
Execute describe database and strips HDFS host and port.
Execute the given query.
Execute the given query.
Executes a batch of commands.
Iterates over all the pipes and calls the consumer for each one.
Gets the offset commit trigger if any.
Instructs the pipeline to stop when an error occurs.
Accepts a consumer.
Gets the insert id for the given record.
Gets the value from field.
Set the fragment in the record.
Sets the document in record.
Sets the N1QL query mapping for the given record.
Handle the whole file data format.
Indicates whether or not an incomplete transactions contain the givengtid and sequence number.
Sets the class loader to the thread's context class loader and returns the result.
Logs out the user.
Sets the exceptions in the configuration.
Replace variables.
Ensure that the given path has the proper permissions.
Runs the ER binding application.
Gets the directory path for a given record.
Renames a temporary file.
Determines if a record should be rolled.
Checks if the given pattern can be matched against the given URI template variables.
Gets the current file offsets.
Gets the remaining wait time.
Gets the offsets lag information.
Creates a new StageLibraryDelegate instance.
Creates new instance of stage library delegate.
Gets the metric value.
Find the end of the header.
Gets the size of the response body.
Saves the contents of a byte buffer into a temporary file.
Creates an SSL instance for the given key and trust store.
Gets the mime type for a file.
Processes the request and dispatches the response.
Stops the server.
Adds default index mappings.
Send the request body to the output stream.
Creates a response with a fixed length response.
Determines whether this request should be sent to the client when it is accepted by the server
Set a cookie.
Unload the response from the queue.
Decodes the given base-64 string.
Encodes the given value as a base-64 string.
Sets the table name.
Gets the name of the principal.
Create a session repository filter.
Resolves the principal name for the given session.
Get session by id.
Get the JNDI name for the supplied model node.
Gets the canonical parameter types of a view method.
Registers an interposed synchronization.
This method is called before the completion of the task.
This method returns the current transaction associated with this context.
This method is called at the start of the deployment phase.
Checks if the scoped persistence unit name is a valid cache region name.
Gets the list of server config dependencies.
Decrements the read lock count.
Increments the read lock count.
Add a service to the set of services managed by this container.
Handles the restoration calculation.
Adds the module specification to the deployment.
Make top-level bdas visible from modules.
Creates a new instance of Jse for the given deployment.
Sets the configName and file.
Gets the security meta data.
Gets the servlet url patterns mappings.
Gets the servlet class mappings.
Resolves the view.
Get the list of available connectors for an operation.
Parse the core environment element.
Parse the process-id environment element.
Get the PathAddress for the given ModelNodeOperation.
Sets the address of the operation.
Gets the attribute value.
Checks if is include defaults.
Creates a composite operation.
Create an AddOperation with the given address and parameters.
Create a new add operation with the given address and index.
Create a read-attribute operation with the given address and attribute.
Creates a write attribute operation.
Create an undAttributeOperation with the given address and attribute.
Gets the value of the context.
Adds a context factory for the given scheme.
Removes the given factory from the set of context factories for the given scheme.
Load providers from the class loader.
Modifies the deployment.
Configure the endpoints for the given deployment.
Modify the context root of the deployment.
Gets the transport class name from the deployment.
Set the run as identity.
Get the run as identity.
Process the deployment management.
Injects a property value into an object.
Determines if the argument matches the given class type and property type.
Searches for a method with the given name and parameter type.
Find a field by its name and type.
Derives useful information for the http request.
Perform a standalone collect.
Gathers all the report files in the given directory.
Register a resource adapter deployment.
Unregister a resource adapter deployment.
Registers the transformers for the current subsystem.
Writes the parameters to the output stream.
Reads an exception from the given input stream.
Gets the lock owner.
Releases the lock for the given instance.
Adds a new log entry to the log.
Add context parameter to Weld deployment.
Gets the component view.
Invokes a WS invocation on the given endpoint.
Gets the component view method for the given sei and view methods.
Tests if the given method matches the given view method.
Retrieves the EJB security meta data for an endpoint.
Gets the domain to use.
Ensures that the two security domains are the same.
Sets the IDL name.
Gets the absolute name.
Returns the JNDI name of the specified name.
Process the deployment.
Handles a request from the client.
Checks if the current status of the transaction is active.
Gets the Transaction synchronization registry.
Gets the cached connection factory.
Gets the last component.
Checks if the given name is empty.
Thrown when the name is not found in the context.
Creates a naming exception with the specified detail message and cause.
Convenience method to create a naming exception.
Proceed an exception with an remaining name.
Returns a naming enumeration from a collection.
Binds the supplied value to the supplied name in the supplied context.
Gets the active queue for the given operation.
Creates a component instance from an existing component instance.
Get the Spring Virtual File that is used to store the files in the jar.
Resolve the name of the runtime.
Creates an XML listener builder for the given persistent resource definition.
Gets the primitive analysis for a primitive class.
Shuts down the server and releases all resources.
Get a linked list of URL patterns.
Gets the servlets.
Gets the servlet mappings.
Gets the security constraints.
Gets the login config.
Gets the context params.
Gets the web resource collections.
Gets the servlet init params.
Creates a new security constraint.
New web resource collection web resource collection.
Create a new servlet.
Create a new servlet mapping.
New auth constraint.
New user data constraint.
Adds a parameter value to a list of parameters.
Creates a new param meta data with the specified key and value.
Register session bean interceptors.
Stops the application server.
Get the JNDI name of the current context.
Resolve the value of the given attribute in the given model.
Determines the type of the URL pattern.
Determines whether or not the given resource adapter targets a pooled connection factory.
Checks if the given resource adapter targets an external pooled connection factory.
Gets the active WonderPush server.
Gets the default persistence unit name.
Starts the activity, register the suspend controller and the local transaction context.
Stops the application from being stopped.
Marks the server as suspended.
Resume the deployment.
Complete the invocation.
This method is called when a new transaction is created.
Start the service based on the naming store.
Stops the controller with the given name from the given context.
Get the ServiceName for the given capability base name and dynamic parts.
Creates the list of resource roots for the given deployment.
Returns a set of all the Class loaders of the top-level deployment.
Determines if a class file transformer should be applied to the given persistence unit metadata.
Checks if the persistence unit allow two phase bootstrap.
Check if default data source use should be used.
Checks if the synchronization type should be skipped.
Get an environment based on a server and a port.
This method initialises the applet with the given properties.
Initializes the method handles.
Set the active naming store.
Validates default values.
Check param type.
Lookup default value annotation.
Validate base type.
Returns an array of deferred EntityManagers.
Converts a transaction status to a string.
Adds the cache dependencies to the event listeners for the specified cache type.
Extracts the dialects from the sql.properties file.
Attempts to determine the correct dialect for the current database.
Identify the dialect.
Check database.
Converts the given date to a scheduler date.
Sets the node name for the given prepared statement.
Marks the deployment as being processed.
Reads the parameters from the given input stream.
Writes the given object to the given output stream using the remote object substitution manager.
Writes an exception to the output stream.
Performs a lookup using the given lookup starting from the given index, starting at the given
Begin the SFSB creation process.
Ends the sfsb creation.
Get the current SFSB manager.
Pushes the given entity managers onto the stack.
Pop the current SFSB stack and return the last SFSB stack as a map
Gets the current call.
Adds x enterprise api dependencies to the deployment.
Gets the type codegen for the given class.
Insert any primitive value into the given Any object.
Converts a Java class name to a DDL class name.
Checks if the given string is a reserved Unicode code point.
Gets the signature for a class.
Get the signature for the given method.
Converts a primitive type to a human-readable textual representation.
Get BatchPermission by name.
Get or create transaction scoped entity manager.
Associates the specified value with the specified key in this map.
Converts the given security role definition to a Fluo ModelNode.
Returns the most recent entity version for the given timer.
Load timers for a timed object.
Gets the directory for a timed object.
Adds a naming listener to the specified target scope.
Remove a naming listener.
Fire a naming event.
Close auto-closeable.
Adds a private credential to the subject.
Gets an object instance.
Adds tx management interceptor for view.
Replace all occurrences of 'from' with 'to' in the string builder.
Creates a new TransportConfiguration instance.
Adds a prefix to the name of the resource adapter if it is a relative name.
Gets the root deployment unit.
Get the service name.
Create a new view configuration for the given view class and component configuration.
Create the injection source.
Returns all view interceptors that match the given method.
Adds a view interceptor to the proxy.
Adds a view interceptor for the given method.
Get the list of client interceptors that match the given method.
Add a client interceptor to the proxy.
Add a client interceptor.
Puts the given data into the private data map.
Throws an exception for an unexpected XML element.
Gets the JAX-WS ejbs.
Gets the JAX-WS POJOs associated with the deployment.
Gets the endpoint name from the servlet meta data.
Gets the endpoint class name.
Gets the servlet for the given name.
Retrieves a required attachment from the deployment.
Gets optional attachment.
Retrieves the optional attachment for the given deployment.
Searches for a component with the given name in the deployment.
Gets the EJB metadata for an EJB class.
Gets the context root.
Loads the class for the given name.
Gets a resource from the classpath.
Gets a collection of URLs representing all of the resources with the given name.
Gets the resource list for a given path.
Pop an entity manager from the stack.
Get the EntityManager for the given pu scoped name.
Register a clean-up listener for the Transaction synchronization registry.
Adds the deployment to the deployment manager if the deployment is not a war.
Checks if all fields of a class are public.
Creates a new HTTP endpoint and adds it to the deployment.
Creates a new deployment.
Checks if the deployment is a JAX-RS deployment.
Sets the next expiration date.
Sets the timer state and the thread.
Merges all classes found in the deployment data.
Adds the module to the deployment.
Add the remote transactions dependency.
Gets the all container interceptors.
Return true if the given method is on the given level.
Checks that only one of the two elements is in the set.
Tries to load the class with the given name from the given visitor.
Gets the component type of a parameterized type at a specific index.
Parses the given name and returns a new Name object.
Converts a string into a vector.
Parses a component name.
Deactivates the object and releases all resources.
Gets the reference of the given object from the repository.
Authenticates using the given username and password.
Checks if the class is a known type.
Lookup a binding for the given name.
Unbind the JNDI binding.
This method attempts to instantiate the bean.
This method configures a bean using the bean's properties.
Dispatches a lifecycle joinpoint.
Gets the current selector.
Create a service name for the given name and state.
Converts a Java class instance name to a Java class instance name.
Searches for a class by it's name.
Processes the annotations of the given deployment and adds them to the composite index.
Process all the steps of the current deployment.
This method validates the descriptor.
Creates a web application descriptor for the deployment.
Creates the web app descriptor.
Gets the authentication method from the deployment.
Process the deployment.
Handles the session bean creation.
Generates a class for a stub.
Returns a byte array representing an anonymous object ID.
Returns a copy of the list of persistence providers.
Clears cached deployment specific providers.
Add a persistence provider to the set of deployment class loaders.
Find the parent module class loader.
Adds the ServiceDescriptor to the deployment.
Adds the given pu list to the current deployment.
Sets the annotation indexes for the given deployment.
Gets the persistence provider adaptor.
Saves the given persistence provider in the given deployment unit.
Lookup a provider for the given persistence unit.
Gets the annotated classes for a set of annotations.
Creates an EJB archive for the given deployment.
Builds the enterprise bean meta data.
Refreshes the participant from the context.
Gets the analysis for the specified class.
Lookup the done container analysis for a given class.
Create a work in progress analysis instance.
Gets the IDL module name.
Converts an integer to a hex string.
Converts the given long to a hexadecimal string.
Returns true if this method is an accessor method.
Returns true if the method is a mutator method.
Returns true if this method has any exceptions associated with it.
Read the name attribute.
Writes the attribute name.
Fixup the overloaded operation names.
Fixup case names.
Escapes a name so that it can be used in a script.
Parses XTS attributes.
Parse the default context propagation element.
Processes the attributes of the current node.
Load the list of providers for the given module name.
Creates an AbstractAddStepHandler to execute an add operation.
This method is called at the end of the deployment phase.
Write the attribute definition to the XML.
Create a new remote session.
Attempts to infer the destination name from a JMS queue or topic name.
Registers a set of endpoint handlers for a given endpoint class.
Gets the job XML names for a given job.
Initializes the class loader.
Returns the URI of the request.
Create a ResolveResult using the given URL and environment.
Lookup an object by name.
Bind an object to a composite name.
Calls unbind on the given component path.
Get the bindings for a named class.
Call destroy on the naming context.
Destroy a named context.
Binds a naming context to a named component.
Create a naming context with a composite name.
Lookup a named link.
Adds the value of a property to the environment.
Remove an object from the environment.
Adds the transformations to the given resource transformation description.
Removes the specified security domain from the map.
Look up a JNDI context.
Factory method. Creates an instance of the given type and factory class.
Creates a new instance of the given class name and factory class.
Factory method for creating a new RelationalReference.
Gets the ID for a given type.
Wait for the service to become up.
Computes the masked password.
Initializes the security vault.
Starts the vault session with the specified alias.
Create a display for the specified attribute.
Displays the configuration of the vault.
Returns the configured vault configuration.
Throw an exception if the given value is null.
Get the deployment service name of a resource adapter.
Inserts the value of this WString into the specified Any object.
Checks if the jndiPermission implies the path.
Returns the action string.
Gets the name of the log file.
Sends a notification of an attribute change event.
Gets the value for the given type.
Gets the context service name.
Gets all interceptors of the current class or method.
Add a method interceptor.
Add a service to the set of dependencies for this component.
Gets all component interceptors that match a method.
Gets the list of interceptors that are around timeout interceptors for the given method.
Add a timeout view interceptor.
Adds a new interceptor factory to the list of around construct interceptors.
Adds a new interceptor factory that will be invoked after construction.
Add a pre-Destroy interceptor.
Add a pre passivate interceptor.
Adds a new interceptor factory that will be invoked when a post activate action is received.
Set the component create service factory.
Remove entries from the context.
Accept a connection to the remote EJB.
Gets the service name of the given component.
Returns the service name of the given application and module.
Return the bind-info for an environment-Entry.
Find the bindInfo for the given JNDI name.
Gets the cache.
Returns the value members of this definition.
Returns the value members of the type.
Creates the root node of the subsystem.
Parses the configuration and adds it to the given node.
Start the naming context.
Gets the job operator service name.
Add a view component to the deployment.
Add a message destination.
Gets the set of view descriptions for the given view type and deployment root.
Searches for components with the given name in the given virtual file.
Searches for a view with the given name.
Resolve the message destination name.
This method builds the transformers in the EDB2 0 format.
Discards the given attribute from the given set of attributes if it has a default value.
Pop the identity information from the given state cache.
Load the ids of the modules.
Check the version of each component to make sure it is not missing.
Computes the slot name for the given jsf version.
Gets the constant type code for a class.
Adds a type code to the type map.
Ensures that the given package name exists in the given container.
Get the set of interfaces implemented by the container analysis.
Create an array of Strings containing the ids of the abstract base their values.
Adds the class to the set of known classes.
Add an interface for an analysis.
Adds a value definition to a value analysis.
Adds the exception to the list of exception objects for the given analysis.
Gets the class level injection type.
Start the service based naming store.
Stops the context.
Checks if the given method is allowed by the current context.
Checks transaction sync.
Gets all component classes.
Returns the map of waiting on transaction completion timers.
Gets extra parameters for a given set of allowed keys.
Gets the parameters from the given model node with the given mapping.
Converts a type to a class.
Converts the given value to the given class.
Get the value types from the given array of values.
Checks if the given types are simple or not.
Gets the next binding from the binding list.
Return true if there are more items in the bindingList.
Resolves the name of the binding and returns it.
Observes the annotated type of health check and adds it to the set of delegates.
Closes all registered health checks.
Obtains the handle for a component locator.
Converts a value to an enum.
Skips the specified amount of bytes from the stream.
Checks that the two elements are not in the set.
Add a component to this module.
Adds a set of class loaders to the deployment.
Unbinds the last component that matches the supplied name.
Lookup an object from the tree.
Get the class names for a given class name.
Gets a list of bindings for the given name.
Add a context handle factory.
Saves the context object properties in the given context service.
Create the io subsystem if it doesn't already exist.
Create the content handler.
Acquire an instance of T from the pool.
Calculates the operation analysis map.
Collect metrics on a resource.
Prepares the deployment.
Deploys the service in the given deployment unit.
This method publishes the deployment to the target.
Stops the web app.
Start the server.
Registers a new endpoint configuration.
Called when a retry timeout occurs.
Processes the given timer and updates the state of the timer.
Get declared methods from class.
Get declared fields.
Get the constructor with the given parameters.
Get a method from a class.
Adds the messaging active queue.
Check if a parameter is allowed for the given resource type.
Method for generic transport migration.
Cancels the current state.
Executes the state machine only if the state machine has not been cancelled.
Set the type internal.
Checks if the given operator can execute the given object using the given index.
Finds all classes in the given directory and its subdirectories using the given class loader.
Gets the classess of the given interface from the given package.
Gets the generic multivRuntimeException type.
Evaluate the record.
Derives the requested field type from the requested field.
Update the underlying record if the record has changed.
Finds the record with the specified ID.
Get the minimal set of nodes for sharded query.
Moves flatted equalities left.
Add order by projections if required.
Extract sub queries.
Check if the cluster is from a database.
Handles classes with index for sort only.
Checks if the class hierarchy is a diamond hierarchy.
Get order direction.
Checks if a key condition requires multiple index lookups.
Finds the best index for the given class.
Returns a list of index search descriptors that are the common factor of all index search descriptors.
Create a new strategy instance.
Allow access to a specific resource.
Check if a rule is defined.
Gets the compact server status.
Initialize the system database.
Loads the local databases.
Method that is invoked when a member is removed from the cluster.
Returns the name of the lock manager that is used to lock the Hazelcast instance.
Assign lock manager from cluster.
Commits the transaction.
Roll back the transaction.
Updates the identity in the transaction if the new record commit was successful.
Update the record cache after rollback.
Prepares the given path for creation or replacement.
Atomically moves the given source file to the given target file.
Gets the disjoint patterns.
Execute only locally.
Writes a character array to the buffer.
Returns true if the connection to the remote peer is not connected.
Merges the two buffers together and returns the merged short.
Split short to buffers.
Execute the query and return the result.
Puts a single value into the collection.
Removes a value from the map.
Run the command.
Executes the command with the specified arguments.
Initializes the channel with the current version and allocation mode.
Check the regions for a given offset and length.
Replaces the content in the specified file with the content from the specified file.
Execute a command.
Ends the current request and releases the write lock.
Adds the host part of the host name.
Start a request on a network.
Gets the database owner.
Get the connection for this channel.
Kills the session with the given connection.
Interrupt the connection associated with the requested channel.
Disconnects a channel from the server.
Pushes the information from the configuration to the clients.
Swaps the value at the specified index in this map with the new value.
Releases any locks held by this instance.
Synchronize the schema with the database owner.
Update the metadata for a metric.
Retrieve the record at the end of the list.
Returns the next character in the file.
Execute the query and return the result.
Set the callback to be informed of an async replication error.
Register a new compression.
Get the number of open files in the system.
Allow indexed function execution on target.
Moves the iFrom buffer to iPosition.
Fill the buffer with the requested number of bytes.
Execute all steps until a return value is encountered.
Execute the full script.
Evaluates a record.
Execute the query and return the result.
Loads the configuration from the storage.
Parse the IRequest into a Java representation.
Executes the specified request with the specified arguments.
Updates the schedule starting at the given node.
Adds a new index definition.
Applies the given split to the given aggregate split.
Determines the type of the given source.
Get the collate.
Gets the string value.
Advances the probe by adding a byte to it.
Execute the query.
Builds a JSON object out of a file.
Checks the hash of a password.
Create a SHA-256 hash of the input string using the given algorithm.
Checks if the given algorithm is supported.
Creates a new index with the given index definition and the given clusters to index.
Returns the list of vertices in the graph.
Returns the edges of the graph.
Gets the partition key.
Calculates the time in seconds to wait for the distributed event to complete.
Get the set of features supported by this operator.
Checks if changes have been filled up to the specified page index.
Parses the timeout.
Parses the lock.
Create a new cluster.
Frees the cluster with the specified cluster ID.
Start up the manager.
Stops the OLAP server.
Transforms a single entity instance into a single instance.
Grant access to a specific resource.
Revoke access to a specific resource.
Process the record and add it to the list of deleted records.
Resets the table to a clean state.
Returns the index of the item in the table.
Applies the spread operator to the given value.
Creates an index of the given type in the global schema.
Drops index.
Gets the global index.
Gets the linked class.
To stream.
Removes a listener from the list of listeners.
Register a database.
timeout a request.
Returns a deep copy of the user data structure.
Try to merge this value with another.
Replaces the content of the delegate object with a collection pointer.
Transform the given result object if it is an array or if it is a map.
Execute the query and add the cluster to the database.
Closes all the databases in the pool.
Invoked when a storage is unregistered.
Returns a set of all function names known to the system.
Returns a set of the names of all registered collate factories.
Returns a set of all command names known to the system.
Reads field size and type from current position.
Write the response with the http status code and reason.
Set the response headers.
Write the records.
Write a record to the response.
Send a response to the client.
Send a stream to the server.
Opens a database connection.
Closes the pool.
Listen for changes on objects of the given collection.
Complete the current component operation.
Pushes the given counters to the given map.
Push write cache counters.
Pushes a new StorageCounterHolder onto this snapshot.
This method will push the data from the snapshot into the passed in holder.
Pushes the counters for the specified component to the specified performance counters holder.
Stops the write cache flush timer.
Stop and increment timer for cancellation in time.
Stops the full checkpoint timer.
Stops the commit timer.
Marks the end of a log record for further processing.
Marks the last flush time as the last time it was called.
Parse the given SQL statement.
Initializes the receive messages thread.
Initializes the disconnect timer.
Removes the record from the attached graph.
Sets the value of a property on this record.
Removes the field with the given key from the graph.
Checks if a class exists in the schema.
Wrap a cursor into an O.
Define vertex attribute strategy.
Define an edge attribute strategy.
Gets the new record entries by class.
Get new record entries by cluster IDs.
Adds an operation to an index entry.
Merge set.
Check if the record is a record that should be compiled.
Check if a SQL function can be executed without an index.
Prepares the keys for the given index.
Writes a page to the buffer.
Reads the page at the given index.
Truncates the page to the given index.
Opens the log file.
Check if a replication is active.
Gets the new node strategy.
Checks if the cluster's execution mode is synchronous or not.
Checks if the cluster is read- your writes.
Get the server cluster map.
Get the list of active servers for a given set of cluster names.
Check if a server is containing all clusters.
Checks if the given server is in the cluster.
Get the list of master servers.
Gets the configured servers.
Get all the clusters on a server.
Return the set of clusters owned by the given server.
Get the cluster owner.
Gets the configured cluster owner.
Gets the configured servers.
Returns the set of registered servers.
Returns the data centers defined in the configuration.
Get the proper write-orum value for the given data center.
Is sharded boolean.
Gets server list from data center.
Get the data center of a given server.
Gets the global read quorum.
Gets the write quorum.
Get the configuration for a cluster.
Gets the data center configuration.
Clears out the initialization stack.
Gets an index of the specified index class.
Drop an existing index with the given name.
Adds a new vertex to this graph with the given id.
This method adds an edge to the graph.
Returns the vertex with the given ID, or creates a new one if none found.
Scans through the graph for vertices of the specified class.
Searches for edges of the specified class.
Returns the edge with the given ID, or creates a new one if none found.
Reuse the graph.
Shuts down the database.
Returns the base type of this vertex.
Returns the type of the vertex with the specified name.
Creates a new vertex type with the specified class name and number of clusters.
Drops a vertex type from the graph.
Returns the type of the edge with the specified name.
Creates an edge type with the specified class name and number of clusters.
Returns the element with the specified ID, or creates a new one if none found.
Drops a key index.
Removes the given listener from the list of listeners that should no longer be notified.
Fire an exception to all registered background exception listeners.
Stop monitoring.
Registers the mbean for the given storage.
Unregister MBean for given storage name and id.
Fetch write cache counters.
Fetch system counters.
Fetches the component counters for the given component name.
Get the value of a property by its name.
Detaches a single POJO from this instance.
Get the version number of the object.
Create a new OCommand instance.
Sets the record of the user object to a dirty state.
Unsets the dirty flag for the given POJO.
Returns the types of all index factories.
Returns the set of index engines.
Gets the list of missing nodes.
Returns a list of the responses that have been merged with each other.
Gets the index of the best response group.
Computes the response of the quorum operation.
Gets the received responses from the server.
Get the value of the given statement from the given database.
Allow indexed function execution on target.
Get the library for the given database and language.
Release a database engine.
Gets the next position.
Calculates and updates the size of the collection.
Returns the value at the given index in the array.
Checks if the index can be used by order by after a filter.
Find the first index of the outside strings of a character.
Jump white spaces.
Jump the character sequence starting at the current position to the next character.
Sets the fetch plan to use.
Enqueue repair record.
Cancels repair record.
Enqueues a repair cluster.
Get the matching aliases from the pattern.
Create a POJO instance.
Register a collection of entity classes.
Registers the entity classes.
Set the class handler.
Acquires a database.
Gets the available connections.
Acquire a database.
Execute the update.
Lookup a provider with the given class loader.
Checks the memory limit of the JVM.
Converts a JSON vertex object to a Java vertex object.
Convert an edge JSON object to an edge object.
Convert an Element to Json.
Convert an Element to an Object Node.
Imports the current configuration from the server into the database.
Get the current status of the job.
Get the active data center map.
Utility method to separate the algorithm name from the cipher transform.
Parses the given key config into an object.
Reads an object from a file.
Reads an OAuth key from an input stream.
Encrypt a byte array using the given transform.
Save the current state of the token to an output stream.
Saves a keystore to an output stream.
Set the node's child context.
Add an Object to the unique result set.
Gets the value as object or map.
Authenticates a database using the provided username and password.
Get the map entry by key.
Gets the record to be reused.
Read the current record.
Returns the database's TransactionGraph.
Gets the no-op graph from the database.
Sets up the connection pool.
Get a property by its name.
Stops a transaction.
Get the next token.
Returns the token at the specified index.
Returns an iterable over the vertices in this graph in the specified direction.
Removes the current record from the graph.
This method adds an edge to the edge set.
Adds an edge to the graph.
Returns the class name of the field in the given direction.
Get the connection to the given field name and class names.
Process the broken rids and add them to the set.
Get the console methods.
Execute a task on a local node.
Get the number of nodes that have the given status.
Wait for next retry.
Get the argument at this position.
Check if the request has any parameters with the requested names.
Connects to the server.
Get a list of all your databases.
Get server info.
Check if a database exists.
Drop a database.
Restores a database from a network.
Releases a database from the cluster.
Return the cluster configuration of this instance.
Get the current graph from the database.
Parse the retry.
Save the record.
Delete the record.
Gets the authentication header for the given database name.
Authenticates using the given username and password.
Check if a user has access to a specific resource.
Starts the server.
Adjust line and column numbers for the beginning of the token.
Sets the bucket pointer.
Gets the bucket pointer.
Ends an atomic operation.
Acquires the exclusive lock.
Changes the maximum amount of read cache memory.
Starts listening on the specified host.
Read the parameters from the request.
Shutdown the log manager.
Adds an item to the cache.
Removes a value from the cache.
Acquires an entry from the cache.
Returns the value associated with the given key, or null if there is no such key.
Clears the data and the read buffers.
Closes the file for the given key.
Drains the read buffers until there are no more entries to read.
Queues up a task to be run after a task has been added to the queue.
Drains the read buffers if needed.
Put entry in read buffer.
Returns the closest power of two greater than or equal to the given value.
Processes a push event.
Converts the value of the key into a value of the underlying enum.
Convert all of the values in this enum set to their string values.
Gets the object serializer.
Initialize the shutdown handlers.
Gets the engine with the given name.
Adds a new state to the set of readers.
Authenticate using the given authentication token.
Create the metadata for the database.
Try to acquire a read lock.
Returns the vertex of the current graph in the specified direction.
Gets the ID of the element.
Sets the value of a property on the current graph.
Removes a property from the graph.
Clears the cache entries from the disk.
Deletes the bucket's data.
Ends the batch processing.
Creates a new vertex in the buffer.
Parses the strategy word.
Gets positions from embedded collection.
Execute the sub-query.
Fixes the link.
Fill a record.
Set the version field of a record.
Get the record type.
Initializes the instance of the database.
Prints the stack trace of an exception.
Converts the key into a record.
Register a command instance.
Create server user object from user documentation.
Analyzes a query and returns a list of terms that match the given condition.
Create an indexed property for the given condition and item.
Attaches all fields and their values to this object.
Gets the index class.
Moves to the next record with the given current value.
Truncates all indexes on this instance.
Adds a base class to the set of base classes.
Add cluster ids to the cluster ids array.
Converts a linked object to a stream.
Releases an object from the pointer pool.
Check if there is enough memory in this map.
Clears all objects from the pointers pool.
Converts a byte array to an integer.
Opens a database.
Installs the clusters of the given class for the given database.
Dumps the current server status to the cluster.
Returns the index of the first occurrence of the given object in the given array.
Returns the index of the object in the array.
Return the set of involved clusters.
Handles the search result.
Gets the temporary id for this query.
Reports a tip that should be displayed to the user.
Parse the fetch plan.
Parse the no-cache option.
Optimize sort.
Get the current status of the operation.
Executes the command.
Handles the given error.
Puts a value into an index.
Rolls back a transaction.
Executes the specified command.
Registers a cluster with the cluster manager.
Sets the value of a property.
Execute the "class" command.
Execute the update.
Delete the record.
Push the hooks for a specific scope.
Delete the record.
Counts the number of instances of a view.
Counts the number of instances of the specified class.
Activates this service on the current thread.
Registers an instance for the specified encryption.
Gets the relative index of the file at the given position.
Parses the optional word.
Parses the next word.
Parses the next chars.
Parses the next word and returns true if it is an optional keyword.
Checks if the given character is a separator of the current parser.
Execute the query and return the result.
Clears the configuration files.
Returns the position of this buffer as a byte array.
Extracts the token from the given token type.
Acquires an access token from the OAuth2ClientContext.
Copy the token from the current Context to the current Context.
Check if there are no more characters.
Reads a line from an array of bytes.
Skips the specified number of bytes from the underlying stream.
Ensures that the given offset and length are within the given array length.
Swaps the elements of the given array.
MurmurHash3 64-bit variant.
MurmurHash3 64-bit variant.
Writes the contents of the given byte buffer to this output stream.
Truncates the file to the given max size.
Moves the buffer to a new position.
This method will refresh end metrics reporting, if any exception occurred.
Await successful completion of current tasks.
Returns a stream of matches for a given query.
Finds any compact targets that are dependent on this type.
Delete all the snapshots that are no longer needed.
Determines the hash code of a given field.
Removes any references that are referenced outside the closure of the given set of matches.
On announcement complete.
This method is called when a cycle is complete.
Read the header tags.
Extract primary key from given object.
Clears all the segments from the set.
Reads the ordinals from the given input stream.
Returns the size of this set in bytes.
Gets the field value for the given row.
Copies the given range of bytes from the source buffer to the destination buffer.
Copies length bytes from srcPos into destPos.
Returns true if the range of bytes equals the compare byte array.
Copies length bytes from src to dest.
Copies length bytes from srcPos into destPos.
Reads a number of bytes from the input stream.
Writes the given range to the given output stream.
Ensures that the segment at the given index has enough capacity to hold the given segments.
Returns the index of the field with the given name.
Calculate deduped sizes and total number of select buckets.
Checks if the given dataset has any collections in the data set.
Generates the documentation files for the given directory.
Generate the files for the h printStackTrace schemas.
Checks if the ordinal is one of the specified key fields.
Gets the record key for the ordinal.
Returns a field path for the primary key.
Returns a field path for the given hash index.
Puts the specified object into the dynamic table at the specified ordinal in the dynamic table.
This method initialises the field path.
Checks if a key exists in the dictionary.
Adds a field to the specified type.
Gets a list of ordered HStack schemas.
Initializes the class with the defaults for the next major version of the class.
Gets the bit at the given index.
Finds matching records for the given field name and value.
Returns a map of matching field values for a given type and field name.
Sets the element match paths.
Sets the element key paths.
Restores the data model from the last state.
Runs the cycle.
Exclude a key from the set of excluded ordinals.
Mark objects that are not referenced by any other object.
Writes the header for the blob to the given stream.
Calculates the heap footprint and populated ordinals.
Writes the field data to the given byte buffer.
Write a fixed-length integer into the given byte data buffer.
Writes a fixed-length long to the given byte data buffer.
Return an ordinal to the pool.
Sorts the set of free ordinals in ascending order.
Calculates a hash using the given key and field types.
hash int.
Resizes the storage to fit the current bucket size.
Finds the preferred ordinal in the set of free ordinals.
This method prepares storage for writing.
Compares the given key with the serialized representation.
Grow the key array.
Rehash previously added data.
Returns an empty key array.
Check if two HInfoList object have the same schema.
Find the unique type of a match.
Swaps the current read state with a new read state.
Calculates the size of a hash table.
Runs a cycle of compaction.
Writes the current state of the state engine to the specified output stream.
Writes the delta to the output stream.
Add to set if not primitive or collection.
Normalize field path to param name.
Reindex the hash index.
Finds matches of the given query.
Triggers an async refresh with a random delay in milliseconds.
Triggers a refresh using the specified delay in milliseconds.
Add a type diff.
Writes a 4-bit integer to the output stream.
Writes a v-bit int to the byte array starting at the given position.
Read a v-bit integer from the stream.
Read a v-bit integer from the stream.
Internal method to add the view.
refresh the loading views size.
Updates the UI.
Pulls the event based on the current scroll direction.
Adds a rule with the given name and value.
Define a rule with the given values.
Creates a new rule builder with the specified rule class and action type.
Creates a new rule.
Adds a rule with the given fact type.
Adds a rule with the result type set to the given result type.
Create a new rule with the specified name and value.
Create a new rule based on the given names.
Create a new thenRuleBuilder with the given action.
Gets the rule instance.
Returns the first field annotated with the given annotation from the given class.
Returns the first method annotated with the given annotation on the given class.
Gets annotation.
Registers a new rule.
Update rule status.
Gets the rule status map.
Set the result type.
Adds an action to the rule.
Adds an action to the rule.
Resets the value of the preference.
Adds a new rule with the specified fact type to the book.
Gets the POJO rules.
Reads an empty line or the end of a table.
Convert a list of service objects to an array.
Get the list of ports from the build configuration.
Extract the service ports from the configuration.
Parse the port mapping.
Add the port if it is not null.
Shift the first service port in the list or return null if none found.
Add missing service parts to the list of missing service parts.
Appends an image stream resource to a target file.
Check the servicePort against int or string.
Get the service port environment variable or the system property.
Get the service host and port.
Put if absent.
Merge map if absent.
Merge two maps into a new map.
Put all if not null.
Waits until the pod is ready.
Checks if the given value is a valid Kubernetes ID.
Converts the given entity to a list of hasMetadata objects.
Returns the resource version of the entity.
Checks if a pod is running or not.
Gets the current context from the given configuration.
Checks if a route with the given name exists in the given list.
Checks if the given classpath resource is found in the project's classpath.
Reads and enrichs a fragment of the given name and type from the given file
Converts a map of variable names to an env variable list.
Merges two resources into one.
This method merges all empty strings from an override map into the original map.
Checks to see if a pod is local or remote.
Reads configuration from a file.
Add the port if it is valid.
Get docker config string.
Returns the plugin configuration for the given system and id.
Gets the secret configuration for the given id.
Downloads the given URL and stores it in the given target.
Compare two versions.
Consumes the given profile and adds it to the given processor configuration.
Lookup the profile for the given name in the given directory.
Read profile from classpath.
Read all profile files from classpath.
Finds the profile YAML file in the given directory.
Get the list of profile paths for the given extension.
Parses the given YAML stream and returns the result as a list of profile objects.
Gets image pull policy.
Checks if is open shift mode.
Determines the number of deployments that should be included in the list.
Get the first child element with the given tag.
Installs a template.
Removes the tag with the given name from the given list of tags.
Apply the given namespace to the existing entity.
Attempts to apply a project to a project.
Apply the project request.
Return the namespace of the entity.
This method is called when an error is encountered during the apply phase.
Create the list.
Enrich the resource builder with the configured namespace.
Obtains the environment variables for the main class.
Converts a duration in seconds to an integer.
Calculates the number of decimal units from the string.
Scans the project's directory tree for files matching the specified pattern.
Disable the open shift feature in the apply service.
Check if the service has any of the requested filters.
Parses the given input stream and returns the mapping.
Determines the default icon ref.
Copies the app config files from the given directory.
Load properties from a resource.
Determines the spring boot version.
Runs the enricher on the given list of enrichers.
Get raw config map.
Gets the flattened map.
Gets the template for a singleton list of resources.
Get the build reference date for the project.
Gets the value of the generator property.
Gets a configuration map.
Prepares the processors for the named list.
Adds the from configuration to the builder.
Gets the fromMode default.
Gets the name of the image to use.
Gets the registry to be used.
Checks if is online.
Gets the external service URL for the given service name.
Gets a boolean from the global properties.
Create and configure an HTTP client for the given URI.
Creates an internal node.
Scans the plugins of the current class path.
Parses the rewards balance from a JSON string.
Gets the account rewards balance.
Parses a payment resource from its JSON representation.
Gets the requested resource.
This method will set the authorization fingerprint on the request.
Converts a JSON object to a Java object.
Collect device data.
Collect device data.
Collects the payBudget device data from the given fragment.
Gets the client metadata id from the given context.
Check to see if a signature is valid.
Get a property as a string or fallback if the property is null.
Parse payment method nonces.
Gets the checkout configuration of the current browser.
Gets the billing agreement information in the current request target.
Gets a resource from the server.
Submits a request to the server.
Sends a POST request to the server.
Approve a payment.
Adds a listener to the payment method's listeners.
Removes the given listener.
Requests billing agreement.
Called when the activity result is received from the server.
Parses the response of the request.
Adds a list of nouns to a dictionary.
Removes a word from a dictionary.
Transforms a sequence of Korean tokens into a list of Strings.
Extracts a complete Korean phrase from a tokenized sentence.
Converts a list of Strings into a Java String.
Reads from the given channel and returns it as a ByteBuffer.
Allocate a new nal buffer.
Concatenate nal units into the given byte buffer.
Returns the profile for a given integer.
Normalize and generate fixed precision.
Reads from the buffer to the next marker in the buffer.
Reads the data from the current position to the next marker buffer.
Gets the max available frame.
Modify a file.
Calculates the total duration of all edits in the given track.
Converts a frame number to the time value.
Converts a time to a frame.
Converts a media in the trak box to a edited media in the movie timescale
Calculates the time when the edit was edited by the given trak.
Calculates the number of times the frame was edited by the given media frame number.
Calculates the time when the video was edited by a particular media frame.
Converts a timevalue to a timecode frame.
Formats a timecode in the format required by the given trak box.
Gets a 7-bit integer from the given values.
set int.
Returns true if the given color space matches this color space.
Computes the size of the specified component in the specified size.
Create a raw m- object from the given input stream.
Read cache int.
Creates a wav header from a given audio format and a number of samples.
Calculates the wav header for a multi- channel wav file.
Parses the AAC data.
Encodes a symbol into the given context.
Split the track into two or more edit parts.
Decodes a frame from the buffer.
Sets this buffer's big endian flag.
Calculates the strength of each block.
Encodes the given picture in a native frame.
Encodes a length-bit long into a byte array.
Gets the bit length of a long.
Adds a packet to the packet buffer.
Reads the next reposition file from the current position.
Decode bin.
Decode bin bypass int.
This method goto a marker from the buffer.
Get the frequency for the i-th entry.
Predict the plane of a given reference.
Starts a block with a given amount of data.
Assumes that the level is one of the Levenshtein Levensht
Fills the block at the end of an integer array.
Concatenate the two bits in the same buffer.
Rewind to the beginning of a 32-bit int in reverse order.
Seeks to the key frame of the video.
Gets the picture taken from the first frame of the video codec's meta data.
Gets the gain of a change point.
Converts a byte array into an integer array.
Convert an integer into a byte array.
Compresses the content of a 4 byte float buffer into a 4 byte float buffer.
Decodes a float from the buffer.
Fill outb with the data from ins.
Given an input buffer and an output buffer array, this method deactivates the input buffer
Gets the coded size.
Build the wipe map.
Reads the unsigned bytes from the buffer into an array.
Read an int32 batch.
Calculates the value of the mv variable.
Encode a single frame.
Encode an IDR frame.
Encode a single frame.
Returns a list of supported codec IDs.
Get a list of supported tags.
Adds a reference to the reference table.
Deletes all the reference objects in the queue.
Flushes and collects all valid references.
Loads the requested library from the given string.
Unpack the library.
Delete any temporary files that might exist.
Returns the default layout for the specified number of channels.
Gets the channel from the specified layout at the specified index.
Returns a non-null media packet.
Get the version information as a string.
Gets the default time base.
Returns null if no such instance exists.
Plays the specified video.
Displays a video at the correct time.
Creates a new codec descriptor with the given ID.
Print the given option to the given stream.
Registers a custom URL factory for the given protocol prefix.
Generates a unique name for an object.
Make an audio resource resampler from the outLayout and inLayout.
Get the supported video frame rates.
Get the supported video pixel formats.
Get the supported audio sample rates.
A list of supported audio formats.
A list of supported audio channel layouts.
Sets the value of a given flag.
Sets the value of a given flag.
Gets a decoder for this bitset.
Gets a reference to the de-uxer.
Return a collection of available formats.
Returns a filter graph from the current position in the system.
Gets the type of this bit stream filter.
Gets a byte buffer from the buffer.
Make an audio frame from a given audio format.
Resampler the given media picture.
Checks if the given image is valid.
Validates the given picture.
Get the filter graph.
Gets the meta data associated with this keyvalue bag.
Gets the cpu.
Gets the CPU Core from the given string.
Determine the operating system from the operating system name.
Determine which operating system the user is using.
Plays the specified sound.
Loads a library using the specified library name and major version.
Set the library with the given name and major version.
Load a library with the given name and major version.
Initialize the search paths.
Check if a library with the given name has already been loaded.
Delete the record.
Gets a stream for the given position.
Gets an instance of the ExecutorService associated with this class, or null if this class is
Makes a new script transaction.
Decodes a base 64 encoded byte array.
Generate a random seed.
Gets a transaction by its id.
Gets address transactions for a specific address.
Get the transactions related to a specific address.
Get the header for a range of block headers.
Get a block by signature.
Send a transaction.
Sets a new script in this chain.
Compiles a JavaScript file.
Writes an array of primitive values to the stream.
Writes the buffer to the output stream.
Writes the given object to the given memory.
Read the class name from the configuration.
Serializes an object to a byte array.
Set the file and channel for the manager.
Gets the lineage specificity of a class.
Resizes the memory to a certain size.
Removes the given key from this map if it is present.
Writes a string to the output stream.
Sets the output stream.
Creates a new JSON configuration instance.
Creates an instance of the StructConfiguration.
Calculates the size of an object.
Clears all caches.
Returns an fst object input from the given input stream.
Returns an fst object input from a byte array.
Returns an fst object input that was previously read from the given byte array.
Gets the object output.
Register a mapping from keys to values.
Get the cp name for a given class.
Write an integer into the output stream.
Writes the data as a raw int.
Write an integer packed into the buffer.
Write the raw bytes from the buffer to the stream.
Gets a cached instance of an fst.
Called when the object has been written to the stream.
Called when an object has been written to the stream.
Get the serialization information for a particular class.
Writes the given array to the current codec.
Sets the length of this buffer to the length of the specified string.
Writes a primitive array to the underlying stream.
Stops tracking the current change tracking.
Takes a snapshot of the change offsets.
Register an object for a write.
Writes an object to a byte array.
Reads an object from the stream.
Reads a byte array from the buffer.
Read an integer from the buffer.
Sets the poll index back to the start of the buffer.
Sets whether the thread pool should be used.
Start embedded cassandra.
Clean data embedded cassandra.
Copies a resource from the classpath to the provided directory.
Checks to see if a remote port is taken.
Creates a new subscriber state with the empty parameters.
Returns a map with the names of the op descriptors.
Calculates the shape of the output array.
Computes whether or condition is satisfied.
Computes the logical AND of a vector.
Computes the logical AND of the given condition on the given dimension.
OR array.
Applies the given where condition to the given number.
Return first index matching given condition.
Returns the properties as a flat buffer builder.
Create function properties from flat properties.
Converts a collection of function properties into a flat buffer.
Set the result of this method.
Set the result of this method only if the exception was not null.
Merges two lists of doubles.
Partitions the array by the specified chunk.
Converts an onnx type to the proper nd4j type.
Shuts down the shutdown if it's not already running.
Get device architecture of current thread.
Returns the 2 dimensions of the given column.
Pooling 2d implementation.
Creates a new compression descriptor from the given byte buffer.
Splits a list of lists into multiple batches of the given partition size.
Checks that the dimensions of the concat vectors are the same as the dimension of the array
Sets the data type of this buffer.
Computes the parameterization matrix from given lower and upper values.
Convert a collection of matrices to a flattened matrix.
Computes the product of the rows and columns of the matrix curr to curr.
Create a complex ndarray with the given data.
Create a new complex number with the specified value.
Create a new complex ones matrix with the specified scalar value.
Determines if we should replication from the last synced time.
Subtracts a complex number from this complex number and places the result in the given result
Computes the angle of this complex number.
Computes the Euclidean norm of a complex number.
Negate a complex number.
Computes the absolute value of the complex number.
Calculates the power of a complex number.
binarizes the matrix to the given cutoff.
Sample a dataset.
This method returns the memory footprint of the model.
Formats a stack trace of an exception to a string.
Given a string representing a simple hostname, returns the full hostname.
Convert an array of Strings to a String.
Converts a range of bytes into a hexidecimal string.
Returns an array of Strings from a String collection using the given delimiter.
Splits the given string around matches of the given separator.
Splits the given string around matches of the given separator.
Finds the first occurrence of the given separator in the given string.
Escapes any special characters in the given string so that it can be used in an
Join an iterable of strings with the given separator.
Camelizes a string.
Gets the stack trace of the specified thread.
Inverts an array.
Get the n-th integer in this set.
Returns true if this node is on the host side.
Checks if the device is actual on the device side.
This method creates shape information.
This method creates shape information for given shape.
Check if the shape is a vector.
Get the order of the vector elements.
Get the offset for the given array and indexes.
Converts an array of indices to an array of indexes.
Gets the short value corresponding to the given long value.
This method reallocates a new data buffer.
Copies a buffer from one buffer to another.
Get the data buffer for a given array of float values.
Returns the URI to use for the Kafka consumer.
Element-wise power function.
Log an ndarray.
Max function with a scalar.
Element-wise max operation.
minimum function with a scalar.
Element-wise minimum function.
Stabilizes the given array.
Create an Expm1 array from the given array.
Log-Onep array.
Prepare the bounds for the given x.
Moves the iterator to the next data set and returns the next data set.
This method builds a allocation shape for the specified buffer.
Checks if a given name exists in the given path.
This method reads the data from the specified input stream.
This method will end up in a new run.
Create an ndarray with the given pointer.
Create an ndarray from an npy file.
This method allocates a new paged pointer.
Attaches an object to this shared object.
Indicates whether the server is started.
Execute the given operation.
Flushes the queue, blocking until it's complete.
Gets the input stream of this resource.
This method returns device id for current thread.
Attaches a thread to a device.
This method returns the next device for the specified thread.
Get OS name.
Calculates the architecture of the operating system.
Publishes an array to Amazon Pinpoint.
Creates a new buffer of the specified type.
Intercept the given operation to check for the data type.
Add another component of this complex number to result.
Process the incoming message.
Max pooling 3d operation.
Conv2d operation.
Resets the state of the manager.
This method returns the class of the operation.
Allocate a new array with the same shape as this one.
Get the shape of this variable.
Evaluates the SameDiff function.
This method compresses the given array using the given shape and order.
Converts a INDArray to an INDArray.
Return the center of the given vector.
Truncates a matrix to a specified dimension.
Pad with zeros.
Find the index of the element with maximum absolute value.
Broadcast an array to all registered devices.
Process the message.
Calculates the gamma decimal.
Calculate the Euclidean norm of a BigDecimal.
Cbrt a BigDecimal.
Converts the given MathContext to a BigDecimal.
Raises x to the power of y.
Round to an integer power.
Calculates the Euclidean norm of a BigDecimal.
Compute the Euclidean norm of a BigDecimal.
Calculates the Euclidean norm of a BigDecimal.
Scales x by d.
Scales the precision of a BigDecimal using the given context.
Computes the Euclidean norm of a BigDecimal.
Put a function instance for a given id.
Get the inputs corresponding to a differential function.
Update array for given variable name.
Put a new shape for a given variable name.
Associates an ndarray with a variable.
Gets property for function.
Adds a property for a differential function.
Adds a function to the list of outgoing functions for the given variable names.
Adds the arguments for a differential function.
Checks if the function has the specified arguments.
Evaluates the differential function for the given inputs.
Set one variable with the given shape.
Get the ones like operation.
Returns the zeros of the specified SDVariable as a SDVariable.
Remove arg from function.
Set the variable for a given variable name.
Average pooling 3d operation.
Get the gru output variables.
Execute a list of differential functions.
Create a continue statement with the given conditions and body.
Execute function.
Executes a function.
Execute backward and end result.
Adds a variable as a place holder.
Allocate a chunk of data.
Computes the length of a data buffer according to the data type.
Returns the allocation mode string corresponding to the given allocation mode.
Get the allocation mode from the context.
Get the int value of the operation with the given name.
This method destroys all workspaces associated with current thread.
This method prints the current allocation statistics for the current thread.
Computes the dot product of a vector by a vector.
Run the accumulation.
Decodes a threshold.
Get the node name for a given node name.
Invokes the given scalar operation on the given dimension.
Assert that no workspaces are open.
Computes the logarithm of the difference between the labels and the ones of the
Request a tick for the given time.
Try to schedule the request toe if the current state is toE.
Releases the current access toe.
Gets the current state of the manager.
This method is called when a new message is received from the remote endpoint.
Initializes the curr from a list of examples.
This method initialises the host collectors.
This method returns device pointer of given buffer.
This method synchronizes the host data to the data buffer.
Applies an update to the historical gradient.
This method wait till the host is enqueued.
Creates an array with the same shape as the specified index.
Gets properties for function.
Checks if there are any placeholder inputs that have been assigned to this variable.
Computes the difference between the two variables.
Format the given ndarray as a string.
This method returns import graph for given input.
This method converts a complex number to a blob.
Load a complex number from a blob.
Save the current object.
Copy the real part of the vector to the vector.
Copy the complex numbers to the array.
This method calculates the difference between two numbers.
Assigns the elements of this vector to the values of another vector.
Returns an ndarray of rows corresponding to the given row indices.
Put a new row in the table.
Put a column to a put.
Subtract another array from this one.
Add another ndarray to this one.
Subtract a vector from another vector.
Add another vector to this vector.
Assigns a scalar value to this matrix.
Return the complex numbers in the order of the first dimension.
Computes the eigenvalues of a complex vector.
generalized eigenvalues of a generalized matrix.
This will return the element of the vector that is the sum of all elements of the vector
Copies elements of x into y.
Computes the product of a vector by a scalar.
Process the incoming message.
Returns the sum of the set of labels for a given set of weights.
Do the reduction.
Gets the no-arg constructor.
Gets the constructor.
Invoke the given method handle with the given parameters.
Returns the first annotation of the given type that is assignable from the given annotations.
Gets the declared annotation.
Checks if a declared annotation is present.
Create a new instance of the given interface and put it in the given result.
Loads the given entity from the database.
Saves the given POJO.
Create a proxy for the given raw service.
Gets the metadata for the given kind, throwing an IllegalArgumentException if the metadata is null
Query keys only.
Queries the given key and returns the results of the query.
Executes the given query using the specified chunk size.
Query the entities using the provided query.
Runs the query and returns the count of results.
Partitions the input iterator by the specified chunk size.
Loads the result with the given keys.
Builds a message for a given path.
Creates a Key instance for the given POJO.
Compare two keys with their identity hash code.
Converts a raw Cloud Datastore Key into a Cloud Datastore Key.
Converts a typed key to a Google Cloud Datastore key.
Gets the kind here.
Checks if the type has missing type parameters.
Checks if the given type is a super type of the given type.
Get the direct super types of a type.
Captures the type if it is a parameterized type.
Returns the translator for the given type key and path.
Get an instance of the populator for the given class and path.
Checks if the index instruction is associated with the given class.
Checks if the method is of interest.
Return all declared properties of the given class.
Gets the key metadata.
Retrieve a value from the session.
Executes the request.
Fetches the pending entities.
Add indexed discriminators from the given class.
Register a class as a sub.
Gets the collection component type.
Gets map key type.
Constructs a new forward path from a given path.
Gets the final path.
Return the path as a string.
Returns the number of elements in this path.
Put all the objects in the cache.
Adds an empty entry to the cache.
Puts a cas object into the cache if the cas object is not cacheable.
Get all cache entries with the specified keys.
Gets the keys of the given buckets.
Sets the key in the given container.
Sets the id of the given POJO.
Gets the raw value of the parent key.
Register a subclass.
Checks if two types have a common subtype.
Transform given owner to given class.
Returns the annotation of the given type, or null if the annotation could not be found.
Add all session information from other session.
Loads an object from the data store.
Executes the operation.
Translates the given result into a result map.
Fetches a set of entities from the datastore.
Loads the given entity from the Cloud Datastore.
Creates a Key with the given parent key and kind and the given ID.
Returns the raw value of the given key, or null if the key is null.
Gets the id value of the given key.
Converts the given URL safe key to a Google Cloud Datastore key.
objectifyImplTransactionless.
Executes the work associated with this object.
Performs a single transaction operation.
Checks if the value matches one of the conditions.
Resolves the objectify of ofy.
Return an async datastore with the given enable global cache.
Gets the entity metadata for the given entity.
Allocate a key range.
Opens the objectify.
Closes the top-most object from the stack and removes the last object from the stack
Hogenizes the index values in the list if it is index homogeneous
Creates a new reference to the given value.
Throws a NotNotFoundException if the value is null.
Add a value to the list for the given key.
Indicates whether this task has been completed.
Generates if conditions for a field.
Executes all tasks in the queue.
Returns the value of the container at the given path from the given type.
Get the stat for a given kind.
Unwraps the given exception, if it is a RuntimeException or if it is an
Returns the translator for the given type key and path.
Gets the root entity of a persistence context.
Creates a new translator for the given type and path.
Tries to load the property from the given container.
Gets the value of a property from a container.
Sets the value of a single POJO.
Saves the current state of the given POJO.
Gets the value of a POJO.
Writes the extensions of the given message to the given generator.
Writes a content category.
Writes a list of content categories to the given generator.
Process a snippet.
Returns an iterator over all bidirectional builder objects in the given response.
Finds a builder with the given id in the given response.
Updates the bid builder list in the given response.
Removes all bids from the given response.
Reads extensions from the JSON stream.
Checks if the current token in the parser is null or empty.
Register an open rtb JSON factory.
Registers an open rtb json writer for a specific message type.
Processes the bid builder list and updates the fields of the bid builder.
Processes the fields of the snippet processor.
Updates all objects in the given iterable using the given updater.
Filter the given list of objects using the given filter.
Gets the current name.
Starts an object.
Starts an array.
Gets the next token from the parser.
Writes a boolean field to the given generator.
Writes a list of strings to the given generator.
Writes an array of Integer values to the given generator.
Writes the given list of longs to the given generator.
Writes the given list of enum fields to the given JSON generator.
Resolve a target URL.
Fixes a target URL that is a pure query.
Gets the host segments of the URL.
Gets the host.
Gets a page from a URL.
Load list from storm conf.
Extracts the configuration element if present.
Returns the protocol for the given URL.
Generates a new warc hash from a set of field names.
Extracts the refresh url from a value.
Get metadata for outlink.
Filter metadata by MD to transfer.
Adds a new URL to the queue.
Cleans a field name to remove any lowercase characters.
Gets the UTF-8 charset name from a byte array.
Gets the charset from text.
Gets the charset from meta data.
Determines if the given byte array starts from the beginning of the array.
Sets a new value for the given key.
Gets the first value for the given keys.
Gets a list of cookies from a list of cookies.
Checks if the cookie domain matches the URL host name.
Returns the cache key for the given URL.
Gets the robot rules set from cache.
Extracts the meta tags from the given fragment.
This method is called when the tuple has an error.
Filter the specified URL against the specified metadata.
Filter the URL string by removing any substitution.
Read rules from the rules file.
Process all the query elements from the URL.
Get a new instance of navigation filters from the given storm conf.
Adds a record format to the list of available formats.
Initializes the total number of queries that have been sent since the last query sent.
Triggers the next set of queries.
Parses the storm conf to extract filters.
Append the given node to the current one.
Process an attribute processing instruction.
This method is called for comments.
Starts a new DTD.
Gets the URL value for the given tuple.
This method will trim the text if it is longer than the supplied maxLengthText.
Checks if the given status is one of the custom intervals defined in the given metadata.
Gets the url from the given storm conf.
Set the item count.
Resolve size and state.
Set the empty item in the cache.
Set the new angle of the radar in degrees.
Update the position of the item, based on the selected angle.
Invalidates the wheel item drawable.
Calculates the raw position of the item in the middle of the item list.
Update the state of the system based on the given deltaTime.
Gets the background color of the map entry.
Clamp the value to the given limit.
Writes the coverage data to the given JSON writer.
Returns a byte buffer containing the data of this buffer.
Set the string representation of this matrix.
Returns a 1D array of the same length as this array.
Create an array char from a string.
Make an array char from a string array.
Create a new array char from a given array of Strings.
Gets an array with the time interval offset of the given grib2 record.
Shows this frame.
Show the frame if the frame is not iconified.
Makes a size estimate.
Runs the grib1 record scanner on the given file.
Creates a new unit name with the specified name and plural.
Creates a new unit name with the specified name, plural and symbol.
Generates a plural version of the given name.
Indicates whether the given date is included.
Returns a new date range that is the intersection of this date range with the clip date.
Extend the range with the start and end of the given date range.
Extend a date to the start and end of this time period.
Sets the start moment of the event.
Sets the end date of this duration to the given value.
Sets the duration of the line.
Add a map bean to the map bean menu.
Print an error message.
Get the name of the node.
Returns the parameters as a comma separated string.
Opens the dap stream for the given DAP document.
Computes and returns the bounds of the lat lon rect.
Synchronize the UI with the date range.
Computes the full chunking for a given set of dimensions.
Registers the directory with the watcher.
Process the events.
Wraps a feature dataset in a cancel task.
Check if a feature type is ok with another type.
Find a feature type from a file.
Writes the catalog to the output stream.
Converts catalog to HTML.
Gets the user css.
Get the user head tag.
Create a dynamic catalog for the given path.
Adds the global services to the catalog.
Initialize the HTTP client with a custom credentials provider.
Gets the response content from the given session and returns it as a string.
Convenience method to put a string into a database.
Gets the front page for the given request.
Create a catalog with the given match and request path.
Extracts the Gds Obtains coverage from a group.
Get single dataset or by type name.
Checks if two values are the same.
Creates a new unit identifier with the given name, plural and symbol.
Parses an attribute spec.
Reads the number of elements from a random access file.
Converts two shorts to int.
Converts a byte array to an int.
Gets a date in milliseconds from the julian days and the milliseconds to milliseconds.
Makes sure that the given name is a valid Java class name.
Tells whether or not the given name is a valid Java class name.
Reads record data from a structure.
Read a subset of records from a section.
Fill the non record variables.
Create a new Time struct with the specified time index.
Converts a calendar object to a time struct.
Checks if the given string is a time template.
Add a function to the list.
Get a boolean function.
Get a function by its name.
Loads a new function.
Get the level name of the grid record.
Gets the description of the current level of the given record.
Gets the level unit of the grid record.
Get the projection type of a given grid definition.
Checks if the given grid record is a vertical coordinate.
Indicates if the given record is a layer of this record.
Make a coordinate transform.
Make dummy transform variable.
Convert an coverage transform into a projection.
This is the main method for testing.
Saves the current state of the data table.
Returns a copy of this chronology with the same time zone.
Writes the specified number of bytes into the countbuffer.
Writes an atomic array out to the stream.
Writes the given bytes to the output stream.
Output the given bytes into the output stream.
This method is called at the end of the init method.
Returns a new DateRange instance.
Create an instance of Grib2Gds from a byte array.
Parse the given DDS text and return the correct DDSID.
Parse the given text using the DAS parser.
Swaps the grid header.
Reads a grid from the specified IDAS file.
Example of how to generate a grid index from an array of Strings.
Writes the definition of an attribute to the output file.
Writes the WFSXML headers and ss to the output file.
Writes the operations to the file.
Reads all files in a directory and passes them to the closure.
Scans a log file for statistics.
Get the type of grid packing the given grid number.
Finds a grid with a parameter.
Generate an array of float values for a given isword, nword and decimal scale.
Unpack data.
Calculates DGgrb for a given set of idata.
Unpack grib 1 data.
Unpack the grib2 data at the specified index.
Print all the grids in the current grid index to standard out.
Gets the next byte from the buffer.
Gets a date and time object from the fields of the given calendar.
Construct a CalendarDate from a.util.Date.
Gets the date of the given time in milliseconds.
Gets a Calendar date from the given Calendar using the given milliseconds as time stamp.
Parses a given units out of a given name.
Gets the time difference.
Method to create an atomic var from a cursor.
Setup the servlet.
Escapes a string so that it can be used as part of a URI.
This method converts a list of range objects to a list of slice objects.
Unwraps the dataset referenced by the given file.
Check if a set of dimensions contains variable length dimensions.
Computes the shape of the effective dimension.
Adds the given date to the current time.
Multiply this unit by another.
Divide by another.
Divide two units into a new one.
Calculates the power of the power of the scale.
Converts the given amount to a derived unit.
Converts an array of float values to its derived unit.
Converts this value to a derived unit value.
Gets the canonical string representation of this matrix.
Reads the data in the specified section and returns the array.
Read data from a collection.
Flatten a list of stations into a single point feature collection.
Find a service by its name.
Get the GateSize for the given data type.
Get the starting gate index for the given data type.
Get the gate count for the given data type.
Print an XML representation for a given dataset.
Calculates the preferred size of the given container.
Verifies that the given dataset is a descendant of the given one.
Generates a proxy dataset resolver catalog.
Returns the instance of the given calendar name with the given Dialect.
Returns a new CalendarDateTimeUnit using the given Calendar instance and string format.
Returns a new instance of CalendarDateUnit.
Get the quantity dimension.
Checks if the given file is a valid access file.
Reads the data for the second section of the given section from the given data.
Reads the int data from v2 and v2 into an array.
Reads data from a section in the KAM2 file.
Calculate the elevation angle.
Calculate the step value from the range first to the rangeEnd.
Calculate the angle between two points.
Calculate the data bits.
Calculates the NYquist of the specified wave.
Make a vertical Transform.
Sets the debug flags.
Sets whether the index should be extended or not.
Reads the xy.
Checks if the data point at the specified time is missing in a grid.
Get the bounding box of this shape.
Finalizes and resets the sequence offset and length to zero.
Print a tab delimited string.
Pads a string to the right of the specified width.
Pad the given integer to the given width and return the result as a string.
Pad the given long value to the given width and return the result as a string.
Formats a byte size in human readable format.
Shows the given double in the format specified in the constructor.
Show 2 digit decimal places.
Return the shape as a comma separated string.
End the current slice.
Return the constraint string.
Composes the given slice by copying the elements from the source slice to the target slice.
Map the element of the given slice to the value of the given index.
Dump the contents of a byte buffer.
Get an ellipsoid by name.
Returns the type of the given epsg ID.
Decodes Vlen data.
Extracts a list of URLs from the specified URL.
Get the text content from a URL.
Filter out the tag.
Reads data from a section into a byte channel.
Adds all attributes of the specified set of attributes to this set.
Removes the specified attribute.
Removes the given attribute from this element ignoring case.
Get the offsets in time units.
Adds a listener to the action source.
Parses the given text and returns the Date object.
Get the standard or iso date for the given text.
Gets the date's origin.
Get the date in seconds.
Converts a double value to a Date.
Gets the value of the date in seconds.
Converts a double value into a Date.
Gets the value of the grid spacing in a KM.
Adds the dimensions of the grid in the given file to the given vector in the net
Add a new coordinate axis.
Make the projection.
Add a variable to the set of variable names.
Add a coordinate system variable.
Make sure that the data structure is the right kind of data structure.
Make the position of the grid in PCA.
Make the mercator of the grid.
Set the horizontal and vertical dx parameters.
Reads a dataset.
Read the metadata content from a URL.
Gets the level type of the second one.
Checks if the file is a valid file.
Writes bytes to the output stream.
Sets the attribute's name.
Get the name of the coordinate axis.
Get the coordinate name for a given dimension.
Builds the response XML to be sent to the client.
Builds a dap exception.
Get the breakup levels for a given level.
Make a dimension with the given values and units from the given dataset.
Create new variables at a new level.
Make the time coord axis from a reference.
Shave the value with the given bit mask.
Converts an array of Strings to a GribToNetSecurityWriter.
Wraps the given file in the given mode.
Opens a file in the given location using the given cancelTask.
Clear the coordinate system of all variables.
Finds a coordinate axis of the specified type.
Find a coordinate axis by full name.
Find a coordinate system by its name.
Find a coordinate transform by its name.
Enhances the given set of Enhances.
Set the values of a variable.
Set the values of a variable.
Make an array from a list of string values.
Gets the index of the vector.
Gets an existing file.
Get the features that intersect the given bounding box.
Discretize an array.
Adds the specified thredds metadata to this thredds collection.
Adds documentation to the block.
Removes all documentation of a certain type from this type.
Gets the max bytes.
Checks if the file is a conventions file.
Gets a list of names to be used as breakup convention names.
Builds a naming convention attribute.
Builds the coordinate systems for the given dataset.
Find any coordinate axes in this dataset.
Finds the coordinate systems of the variables in the given dataset.
Make the coordinate system of each variable in this dataset.
Make coordinate systems maximal.
Is coordinate axis for variable.
Subtracts a dataset from this set.
Marks the top level dataset as having the given filter.
Marks the given dataset as read from the catalog.
This method init once.
Counts the given value.
Adds a new symbol with the given name and symbol and definition.
Compare the values in this row against the values in the given row.
Compare the two specified boolean values.
Pass all reserved attributes from the given node to the given dap node.
Checks to see if the given time range is valid.
Register a class.
Registers a new dsp class.
Indicates whether or not the given dsp class is registered in the registry.
Unregister a dsp class.
Gets the forecast time interval size in hours.
Gets the forecast time interval offset of the given grib2 record.
This method returns the Vert coord type corresponding to the supplied code.
Sorts the node list in ascending order.
Find a variable based on an attribute name.
Find a variable with a specific attribute value.
Find the name of a variable with an attribute value.
Find a variable based on an attribute value.
Finds a structure that contains a nested structure.
Checks to see if there is a netDX record structure in the given dataset.
Get a literal attribute value.
Get the feature type for a given key.
Get the name of a variable.
Get the value of a particular location.
Connect a value to a lon.
Get the coordinates of this point.
Adds two ranges to the end of the section.
Finds the index of the closest point to the target.
Gets the name of the resource.
Adds an action to the given menu.
Computes the best match for the given path.
Create a new projection manager and make it visible.
Returns the index of the first occurence of a byte array in an array.
Add a new image to the cache.
Reports the cache size to the console.
This method stops the background loading process.
Method to stop the background loading of the given URL.
Creates a GET request to the specified legal URL.
This method is used for testing purposes only.
Get next float array.
Returns the next count.
Reads the array data from the given section.
Get a file system provider.
Reads the station table from the classpath.
Gets the index of the column for the given gr.
Removes the data variable with the given name if it exists.
Get the cloud hgt2 meters.
Synchronously reads the grid.
Set the number of colors.
Calculates the transform from the screen to the world.
Converts a URI to an AuthenticationScope.
End the current scan.
Checks if this factor is reciprocal of the specified one.
Get the dir catalog.
Find the index of the first occurrence of want in this sequence.
Read metadata content from a URL.
Read the metadata content for a given dataset.
Adds the metadata content for the given element.
Check if metadata content is valid.
Reads the catalog gen configuration element.
Reads the dataset definition from a dataset element.
Reads the dataset namer element.
Read the dataset filter element.
Read the result service element.
Create an element that represents a new catalog gen configuration element.
Creates a DOM element that represents a dataset source.
Creates a JDOM element that represents the catalog generation of a dataset.
Creates an XML element representing the dataset filter.
Create the element that represents the result service.
Checks if the given flag is set.
Construct a new menu.
Adds the parameters from the specified parameter table.
Make the parameter from a string array.
Get a parameter by its name.
Reads the contents of the input stream as a string.
Reads a byte array from an input stream.
Replaces the file template for the ens template id with the one at the given index.
Set the values of the StnID and STNDesc.
This method is called when the value of the option has changed.
Gets a bitmap from a specific access file.
Change the file to be used by the netwoker process.
Get the set of debug flags.
Parses the given name to get the name pieces.
Determines if a dstruct is a group or not.
Get the net Dods dimension.
Get the shared dimension.
Construct a list of dimensions from the given dods array.
Returns true if the given type is unsigned.
Read the data from the DDP connection.
Get an icon from a resource.
Load an image from a file.
Creates a custom cursor.
Reads a fill from a file.
Read data from data input stream.
Reads a fill from the current position in the given layout.
Creates a primitive array of the given data type.
Converts a byte array to a UTF-8 encoded char array.
Convert char array to byte array.
Convert byte array to char array.
Reads a section and converts it to an array.
Returns the array structure of a section.
Get scalar string.
Gets the scalar structure at the given index.
Gets the array at the specified recno from this class.
Computes the cluster members of a variable.
Add a new dimension to a netaaa file.
Normalizes the given path.
Add an explicit dataset.
Adds a dataset scan.
Closes the scan and scans the dataset manager.
Make sure that the dataset names are valid.
Gets the typical dataset.
Make a dataset from a reader.
Put a resource control for a given dataset.
Add a point to the path.
Get the upper bound of the bounding box.
Get the lower bound of the bounding box.
Checks that the builder is valid.
Computes whether the given dataset is the same as this dataset.
Adds all feature features from the given feature dataset point.
Parses the constraint expression from the request URL.
Evaluate the clauses of this statement.
Print the constraint to the specified print writer.
Audits to the metadata for a structure.
Sets the shared dimensions of a variable.
Check if the given dimension is one of the given dimension's names.
Finds the nested group with the given name.
Read the Xlink content.
Get the standard URI for the catalog.
Set the projection.
Add a component to the layout.
Invalidates the layout of the given container.
Remove a component from the layout.
Get the minimum layout size.
This method will layout the given container.
Checks if the coordinate system is a radial coordinate system.
Gets the maximum radial value of this axis.
Converts the geographic coordinates to an angle in radians.
Converts a point in the Geomajas coordinate system from the Geomajas
Converts a goes angle to an array.
Convert scan geometry to the sweep angle axis.
Converts the sweep angle axis to a scan geom.
Set the coordinate runtime coords.
Writes a point obs dataset to a file.
Rewrite a feature dataset.
Returns the array sequence for the member with the given name.
Gets the full name of this class.
Returns the unique identifier for this token.
Get access to a given service.
Finds a dataset by its name.
Gets the parent catalog.
Get the metadata objects for a given metadata type.
Find a service by its name.
Get the list of variables associated with a vocabulary.
Finds all the cat refs in a dataset tree.
Escapes a path so that it can be used in an absolute URL.
Adds a stagger to an array.
Extrapates an array into a 1D array.
Computes the Euclidean distance from the location.
Get the detail information for this parse.
Returns a structure with the given part name and the given dimensions.
Make the missing variable.
Builds the parameter variable.
Add the global attributes.
Gets the size of a variable by name.
Get 1D array of given data type.
Returns the state of the cell at the specified position.
Report an error at the specified position in the parser.
Reduces the location of the symbol at the specified location.
Method to read the DMR data.
Reads an error from the input stream.
Reads a number of bytes from the input stream.
Reads the header of the file.
Converts a ISO8601 formatted string into a Date.
Reads the contents of a URL into a list of records.
Transfer group.
Returns the stn file in the given location.
Open a new file.
Get the beginning of the line for a given index.
Returns the end position of an integer.
Create all the runtime collections.
Sets the value of the edit button.
Returns the data type for the given data format.
Calculate the EC LLA coordinates of a point.
Cleans a unit to remove any unit-specific characters.
Clean the name by removing any whitespace characters from the beginning and the end of the name.
Checks if the given string is a unitless name.
Factory method to create notes from a given sort.
Gets the var id for the given note.
Parse the DAS file.
Find a dods by name.
Find the DataV for a given DDSV.
Find a child by its index.
Gets the parent group.
Get the dimension of the specified dimension.
Returns the index of the dimension with the given name.
Get the value of the units attribute.
Returns the shape as a section.
Get a slice of a variable.
Sets the value of the enumVar property.
Reads a list of ranges from the current position of the input stream.
Reads a scalar string.
Reads an array from the input stream.
Reads the array from the given section.
Write an cdl file.
Returns a string representation of this dataset in debug mode.
Set the element data type.
Set the dimensions of this shape.
Resets the shape to its initial state.
Sets the dimensions for this group.
Resets the dimensions of this group.
Sets the dimension of the specified index.
Sets the cache data.
Get a list of all dimensions in this query.
Set the bounding box of the image.
Finalizes the hash map and sorts the hash map.
Returns an iterator over all datasets managed by this dataset manager.
Checks to see if the given path is a DSP file.
Opens the DMR file and sets the context to the ncdfile.
Builds the DMR data structure.
Builds the seqtypes for a variable.
Checks the list of cdmdims and sets up the variable reference table for each dimension
Method to find the matching enum for a Varenum.
Method to get the core dimensions for a given set of dimensions.
Scans a bufr file and collects a number of messages.
Process bufr message as dataset.
Submits a POST request to the server.
Get the current transform.
Check if we want to rotate the map.
Get the map area.
Converts a world coordinate to a screen coordinate.
pan the map by the given amount.
Method that will zoom in to the given location.
Recompute the bounding box.
Adds an object to the list of listeners.
Removes an object from the list of listeners.
Sends an event to all registered listeners.
Sends an event to all registered listeners.
Print a command to a writer.
Print variable data.
Print a variable's data section.
Print a structure data structure to a PrintWriter.
Print each element of the given array to the given print writer.
Print an array to the given print writer.
Writes an CMSMML file to a writer.
Read an attribute as a double.
Add a parameter to a coordinate transform.
Reads a single element from a list of Segments.
Checks if the record is positive up.
Checks if the given unit is compatible with this one.
Create a label for the given quantity.
Sets the bit offset in the file.
Read a number of unsigned bits from the input stream.
Read the bits in big-endian format and return them as a long.
Opens a connection to the specified server using the specified command.
Get the DAS file and create a new DAS object from it.
Gets the complete ce.
Convert a world coordinate to a world coordinate.
Get the IDV dataset catalog from an XML string.
Returns a range that includes both start and end dates of the given idv range.
Checks if the given file is a random access file.
Handles the information from the SAT file.
Handles the sensor information.
Read the root element of the document.
This method cleans out any XML characters that are not allowed in the text.
Unescapes the given string using the given escape character.
Escapes a string so that it can be used in an URL.
Unescapes all the special characters in a URL.
backslash decodes a string.
backslash encode a string.
Add lightning global attributes to the given file.
Swaps a short from the given byte array at the given offset.
Swap an integer from the given byte array at the given offset.
Swap a double value from the specified byte array at the specified offset.
Swap two float values.
Swap two double values.
Converts a 16-bit short into a byte array.
Converts an integer to a byte array.
Converts a long to a byte array.
Create a new vertical subset.
Writes the last modified date as an XML document.
Copies the elements of an array.
Starts the wfs.xml file.
Writes the list of features to a file.
Adds new levels to the grid.
Add the dimensions of a group to a netCriteria file.
Adds the name of the feature file to a group.
Find a coordinate transform given a name starts with a level.
Gets the index of the specified record.
Terminates the timer.
Gets a file from the given location.
Gets the existing file or cache the file.
Show the list of files in the cache directory.
Cleans up the cache.
Calculate the bearing from two points.
Calculate the bearing from two points.
The entry point when the program is run as a stand-alone program.
Finds the location of a point.
Return a new location from pt1 with the same coordinates as pt1.
Returns the location of the specified point.
Loads the picture in a separate thread.
Loads a picture.
Loads the picture from the URL.
Stop loading the image.
If the URL of the image can not be loaded, this method will stop loading the image
Gets the size of the source picture in pixels.
Sets the source buffered image.
Get the standard URI for this dataset.
This method is used to transfer information from a list of data descriptors to another list of data
Counts the total number of bits per data descriptor.
Compares two DataDescriptor instances for order.
Loads the header of the file.
Loads the data from the file.
Get the data for the field with the given name.
Get a double array by its name.
Get a string array by field name.
Get an array of boolean values for a given field name.
Get the name of the i-th field.
Returns an array of the names of the fields in this record.
The main method to run the DbaseFile constructor.
Returns a copy of the attributes map.
Set the attribute of this attribute's parent.
Remove an attribute from this dap.
Gets the dap group.
Get the parent node of this node.
Gets the escaped short name.
Gets the path of the container of this node.
Returns the path of all dap groups in this node.
Computes the FQN for this node.
Builds the DAP data.
Put bean collection.
Get the value of the given key as a List.
Get a value from the key-value map.
Reads data from a file.
Print the dataset.
Print a compound instance.
Writes the Element to a String.
Write an Element to a file.
Write an Element to an OutputStream.
Write an Element to a Writer.
Create a dimension element.
Returns a coordinate Transform from an attribute container.
Get attribute int array.
Get the base unit with the given name and symbol.
Gets the unit definition of the given name and symbol.
Get the base unit db.
Get the singleton instance of SPI.
Finds the coord element.
Finds the closest point to the target.
Get subset of the axis values.
Open a feature dataset.
Open a feature dataset.
Annotate a dataset.
Reads a record from a file.
Assembles the given set of parts.
Returns the canonical version of the given string.
Normalize the units.
Finish initializing the parser with a valid Xlink href.
Returns the value associated with the given key, or null if there is no such key.
Associates the specified value with the specified key in this map.
Get the current date in the format "yyyyMMddThhmmssZ".
Print an XML fragment of a DAP node.
Print an attribute or a value with the given name and flags.
Determine if an attribute is special to this group or variable.
Print all dimensions that are used in a given variable.
Checks if the provided file is a valid area file.
Sets the area directory attributes.
Set the nav block attributes.
Get the correct Cal Type out of the given name.
Set the cal-type attributes for the variable image.
Finds the coordinates of the given dataset.
Finds the full name of the coordinate axis with the given type.
Find a coordinate axis based on the type.
Find a coordinate axis based on a predicate and a type.
Find dimension by type.
Finds the best coordinate system for the given dataset.
Finds the dependent axis of the given axis type.
Gets the type of the variable at the specified row.
Reads a marker from the given data input stream.
Writes the given marker to the given data output stream.
Main method to run the example.
Gets the string array.
Get the parameter list.
Defines the list of stations that will be rendered on the chart.
Sets the selected station.
Redraws the progress bar.
Populates the rectangular area from a stream.
Writes the x,y, width and height of this shape to the stream.
Adds a unit set to another unit set.
Add a unit to this set.
Adds a new symbol.
Gets a unit by its ID.
Adds a unit by its name.
Adds a unit by its symbol.
Adds the given unit to the given map, throwing an exception if the new unit is
Adds the currently installed look and feel to the given menu.
Find a record by drspos position.
Reads a dataset.
Serializes a dataset to a data output.
Constructs a new view with the same origin and height as the view's origin.
Open a feature dataset.
Open a feature dataset.
Open a dataset.
Annotate a dataset.
Adds a new partition to this gribCollection.
Make a grib collection.
Get instance to match on dataset name.
Gets a new instance to match on dataset path.
Write the query to a file.
Reads structure data from the given section.
Set a picture with the specified legend parameter and rotation.
Set the buffered image to be displayed.
zoom to fit.
Paint the component.
Convert an iftime to an integer array.
This function converts an integer array into an Erlang DateTime string.
Get the timeseries data stored in the idtarr.
Calculates the time in ms of the year and imon.
Liefert true zurueck, wenn die Anzahl als
Get an integer array from an integer array.
Get the packing name of a packing ID.
Gets the data type.
Reads data from an input stream.
This method will externalize the given output stream.
Get the TagEnum for the given short code.
Gets the next image.
Returns the size of a dap type.
Gets the sum of the elements of an integer array.
Set the location and size of the grid in pixels.
Set the overlap value.
Clears out all the elements from the grid.
Marks a point if it's clear.
Find the intersection of the specified rectangle.
Finds the intersection of the two grid points.
Find the closest point in the grid.
Calculate the squared Euclidean distance between two points.
Get or create a baseUnit.
Parse the fragment and return the corresponding service type.
Get the ServiceType search path from the URL.
Decodes the extension of a path.
Check the location for dods.
Sends the data from a variable to an output stream.
Get the suffix of a FQN name.
Get the prefix of a FQN.
Locates a file in the local system.
Locates a relative path to a file.
Extract bytes from buffer.
Returns the structure path for a given variable.
Returns null if the given path is null or empty.
Join an array of Strings.
Checks if the path contains any drive letter.
Get the list of supported protocols from the URL and breakpoint.
Convert an index to a list of Segments.
Converts an offset to a list of Segments.
Check whether this list is contiguous.
Returns true if one of the provided slice is a single point.
Converts a list of slice objects to an index.
Read data from an input stream.
Set the values of the StnInfo fields.
Read the feature collection configuration from the catalog.
Updates the list of DAP groups.
Finds a variable in the group with the given name.
Determine the type of the axis.
Gets the type of the data in the given time range indicator.
subset lon.
Returns a list of the ranges of the coordinates of this coordinate.
Sets the default values for the given properties.
Get the session id.
Set the maximum number of redirects.
Sets whether sessions should be cached.
Closes this session.
Sets the authentication and proxy.
Adds a session to the session list.
Set the given credentials provider in the given scope.
Checks if the given URL is valid.
Create an index factory for the given shape.
Computes the stride for the given shape.
Creates a new section from a list of ranges.
Reduces the number of elements in this vector.
Reduces the number of elements in the specified dimension.
Creates a new transpose of this array.
Returns a copy of this index with the given dimensions permuted.
Returns an IndexIterator for the given array.
Returns the index of the current element.
Set current index with the given integer array.
Set the dimension of this shape.
Sets the dimensions of this index to the specified values.
Get the name of the time interval.
Make a CalendarDateRange from the given Calendar.
Generates a list of the date names in the file.
Builds the parameter list from the given dm part.
Gets the list of Stations for the file.
Returns a list of all key names in the Station.
Returns a list of the dates in the order they where added.
Finds the index of a given stations.
Gets the file type.
Adds the given number of spaces to the current depth.
Set depth.
Reads or creates a grib index from a single file.
Add directory scan to the collection.
Returns true if a scan is needed.
Scans the table for the first time.
Sets the debug flags.
Add a variable to the model.
Write a cancel task to the file.
Checks that the given XML object is valid.
Return the string representation of this constraint.
Set the original variable of this structure.
Reads the array from the given section.
Check if convert needed.
Converts the given array structure into the given section.
Convert member information from the members wrapper to the corresponding member information.
Finds a variable by its original name.
Checks if a variable has data.
Enhances all variables in this model in the given mode.
Return true if the resource can be accessed.
Returns an empty sequence.
Converts an array of float values into a sequence.
Make a sequence from a parent structure and its member variables.
Adds the vertical coordinate attribute.
Read the catalog information from a URI.
Read an XML catalog from a string.
Read an XML catalog from a Reader.
Writes an XML catalog to an output stream.
Get a metadata converter.
Gets the dimensionless id.
Multiply by another unit.
Computes the divide-by relationship between this unit and another.
Converts the given input float array to the given output array.
Checks if the given unit is compatible with this one.
Write a feature from a geometry.
Writes the given point as an XML fragment.
Writes a line to an XML file.
Writes the polygon as an XML string.
Get the subnodes of a parent node.
This method pass all reserved attributes from the given node to the given dap.
Get subset string.
Convert an array structure to an ma factory.
Set the array value of a member.
Creates an array factory for the given structure.
Get a geometry type by name.
Make a new station.
Compiles the AST.
Compiles a filter out of a given dap sequence.
Dims a redef inside the given ceast.
Returns an array view of this type with the given index.
Determines if this region is contained within the specified region.
Extend the location p to the end of this location.
Extend the specified lat lon rect to this lat lon rect.
Intersects the clip location with the current location.
Add two arrays together.
Check if the arrays are conformable.
Check if the two arrays are conformable.
Convert an array to another one.
Copies the contents of an array.
Copies the elements of the specified array into the specified array.
Copies the elements of the specified array into the specified array.
Returns the minimum and maximum values of the specified array.
Sets the element of the given double array to the given value.
Creates a new catalog builder for this catalog.
Returns a projection factory for the given projection.
Unescapes an ID.
URL- decode a string.
Unescapes a URL so it can be used as a URL query.
Escapes a string for use with backslash.
Unescapes a string so that it can be used as an escape sequence.
Tokenize an escaped name.
Gets the index of the first character in a escaped name.
Converts a backslash-encoded string to a dap-encoded string.
Reads an atomic scalar from the current context.
Gets the path of the given cursor.
Gets the value of a UI property.
Gets the j class for the given component.
Compile the dataset and databuffer.
Compile a structure array.
Compile a structure.
Compile the sequence array.
Compile a sequence.
Reads a Little Endian integer from the stream.
Returns the field with the given name, or null if not found.
Returns the value of the field with the specified name.
Sets the value of the specified field.
Adds a Field to this cursor.
Adds a check box field.
Adds a date field to this record.
Adds a double field to this record.
Adds a int field to this record.
Adds a new password field.
Adds a text field to this record.
Adds a new text combo field.
Adds a text area field.
Adds a table row to the table.
Adds a component to the layout.
Adds an empty row to the end of the grid.
Finds the first frame that is visible.
Returns the cell spacing.
Gets the array of factors.
Returns an array containing the factor array for every dimension of the given array.
Perform an integer power operation on all the factors in this factor array.
Determines if the two dimensions are reciprocal.
Returns true if one of the factors is dimensionless.
Factory to create Grib1ParamTable instances.
Factory to create a Grib1ParamTable instance for a given element.
Adds a lookup table for the given filename.
Adds a parameter table to the lookup table.
Converts an integer power to a real integer power.
Convert an array of float values to a derived unit.
Initializes the unit table.
Creates a vertical variable with the given number of levels.
Peeks the name of the given file.
Extract a short from the specified byte array at the specified offset.
Read an integer from the specified byte array at the specified offset.
Grab a float from the given byte array at the given offset.
Grab a double from the specified byte array at the specified offset.
Audits an alias and name to the system.
Adds a new symbol to the system.
Creates a converter from two units.
Set the structure data.
Set the feature data from an obs data.
Draw the map.
Return an iterator of the shapes in the specified group.
Reads data from an input stream.
Read bytes from an input stream.
Reads more bytes into the buffer.
Read a number of bytes from the stream.
Skip n bytes.
Add the dimensions of a vector to a netCriteria file.
Get the coord index of the record.
Tells whether or not the given file is a valid access file.
Tries to open a random access file.
Reads the array data from the given section.
Read one row of data from a byte array.
Create the NCD from the given dataset.
Create the base type of a variable.
Set the map area projection.
Set the map area.
Set the location of the map area from the given lat and lon.
Set the projection.
Add actions to the menu.
redraw the table later.
New screen size.
Set the selected state of the dialog.
Gets the double value of the variable at the specified offset.
Read a double value from the data at the specified index.
Gets an object from the data at the specified index.
Gets the name of the gini ID for the given entId.
Reads a scaled integer.
Find parameter by name ignoring case.
Swaps the byte order with the byte order defined in the constructor.
Get the number of time steps per file for the given filename.
Gets the file name.
Gets a list of file names.
Gets the ddf.
Get the full path of the file.
Add a chsub to the ch sub list.
Converts a reference date to a time unit value.
Read in a random Wmo file.
Returns a byte array containing the uncompdata at the specified offset.
Generate code for 12n13n14 struct.
The pcode function used to generate the pcode.
Check the header for a random message.
returns the pcode for field 5 of this bitmap.
Generate code for 128 pcode.
Get the levels of a short array.
Gets an array containing the levels of each subsequence in the specified array.
Add a new variable with the given name and long name.
Adds a parameter to this netscope.
Uncompresses the uncompressed data.
Get a 16-bit unsigned integer from a byte array.
Get a signed integer from a byte array.
Convert the given byte array to the given type and byte order.
Process the DAP request.
Gets the current request state.
Send an error message to the response.
Determines if a point is an anchor point.
Stick the line with the given point.
Parses the given text as a date and returns the date in a format appropriate for the
Replace the data vars in the members.
Ensures that the given size and attribute to are both non-null and non-empty
Reads a two-byte integer from the specified access file.
Read an unsigned short from a file.
Reads a 3 byte integer from the specified access file.
Reads a two-byte unsigned integer from the specified access file.
Reads a 3 byte integer from the specified access file.
Reads a 4 byte float from a file.
Convert 4 bytes to a float.
Reads a 8-bit int from the given file.
Count the number of unsigned bytes in the given bitmap.
Constructs a deep copy of this Project.
Get the current wks information.
Escapes a string so that it can be used as an HTML entity.
Escapes escaped characters in a string.
Splits the given string around matches of the given separator character.
Builds the FMR inv.
Get the special characters in the path.
Returns the number of projected components.
Returns the time when this object was created as a reference.
Creates a new BioPAX object from the given BioPAX section.
The main method.
Reads a record from the given grib1 index.
Determine if the file is a DX file or not.
Makes a Geomajas Transform from the given dataset.
Reads the area file from the specified location.
Checks if the specified date is before the current date.
Is this date before the given date type.
Checks if the specified date is after the current date.
Set the value of an attribute.
Add a coordinate system.
Sets the units attribute value.
Get the value of the units attribute.
Initializes the component with the given preferences.
Read the catalog from the catalog file.
Processes all datasets of a given category.
Reads the information from the given directory.
Returns true if the given long value is between the given boundaries.
Converts a lat-value to a human-readable string.
Converts a long value into a human-readable textual representation.
Compares this quantity with the specified quantity.
Returns the selected dataset.
Set the selected dataset.
Make a tree path from node to parent.
Opens the catalog tree with all the items in the catalog.
Set the catalog.
Set the catalog.
Find the alias of a variable.
Writes a byte to the stream.
Writes a range of characters to the stream.
Reads a number of characters from the stream.
Sets the debug flags.
Adds a member to this set.
Returns the index of the member, or -1 if none found.
Returns a list of the names of the members of this class.
Find a member with the given name.
Gets a bitmap from the specified access file.
Restores the state of the table from a preferences object.
Returns an iterator over the selected rows in the table.
Get the model index of this table.
Gets the array for the given member.
Gets the scalar double.
Gets the double array representation of the members.
Gets the scalar float.
Gets the float array representation of the members in this structure.
Gets the byte value of a scalar field.
Gets the byte array representation of a member.
Gets the scalar int.
Gets the int array representation of the members.
Gets the scalar short.
Gets the short array representation of the members.
Gets the scalar long.
Gets the long array representation of this member.
Gets the scalar char.
Gets the char array.
Do one dataset.
Returns a deep copy of a dataset.
Transfer the metadata from one dataset to another.
Get or create if needed the threddsMetadata itself if it doesn't exist
Adds a record to the grid.
Show missing data.
Show the summary of missing records.
Find a record at a given time.
Dump the current state of the grid.
Make the long name of the first record, based on the lookup parameter.
subset by intervals.
Compare two byte arrays for equality.
Parses the given DAP document and returns a DataSet.
Processes dataset attributes.
Add the given coordinates to the given list.
Set the gaussian latencies.
Parse a variable selector.
Given a variable and a list of ranges, produce a string representing the section spec.
Checks to see if the map contains a box for the specified lat, lon.
Closes this session and releases any resources associated with it.
Execute the request and return the status code.
Identify the encoding station.
Match axis type and dimension.
Set the stream for this block.
Reads a character from the input stream.
Starts the task with the specified name and progress max count.
Parse the given string as a URI.
Excludes URI's that don't match any of the given exclude patterns.
Returns null if the specified string is null or empty.
Canonjoin canonjoin string.
Accepts a dataset if it has been modified since the last time it was checked.
Copies information from another grib collection to this one.
Returns a list of all the unique file names in the directory tree.
Set the index raf.
Gets the grib index filename in cache.
Returns the number of N counters in this set.
Add a global attribute.
Add a global attribute.
Delete the global attribute with the given name.
Rename the global attribute with the given name to the new name.
Adds a variable attribute.
Adds a variable attribute.
Deletes an attribute from a variable.
Rename an attribute from a variable name to a new name.
Make the sub-type of the file.
Write the WFS headers and bb.
Writes the members of this geometry to the gml file.
Serializes the OData file as an XML document.
Writes the XML representation of the station collection.
Writes the DSA data to the given DSA file.
Sends the dxr8 in the given byte array.
Send an error response to the client.
Closes the response stream.
Flushes the buffer.
Check if there is an element in the set.
Gets the element at the specified index.
Shifts the range from origin to the end of this range.
Reads the data from the file at the specified index into the specified data type.
Reads the data from the index into the given byte channel.
Returns a subset of this vector.
Set the values for this param.
Creates a new double array from the given array of ints.
Gets the dataset boundaries.
Checks that requested variables are present in the dataset.
Get the structure for a given name.
Gets the resource path from the request.
Make the vertical dimensions of the grid.
Reads the pib from an access file.
This method is called after all the work has been done so far.
Transfer the metadata of one dataset to another.
Transfer the metadata from one dataset to another.
Transfer inherited metadata from parent to target.
Set the projections in thredds metadata.
Adds a dataset to this set.
Remove a dataset from this catalog.
Replace a dataset in this catalog with another one.
Add a service to the set of registered services.
Remove a service from this manager.
A set of local and remote services.
Removes the given metadata from this dataset and all of its parent dataset's local metadata
Gets the user property.
Checks that the builder is valid.
Returns a list of the names of the descriptors of this annotation.
Construct the absolute path to the server.
Get the capabilities of the feature type and write them to the print writer.
Get the feature.
Check the parameters for an error.
Handle http servlet request.
Get the capabilities for the specified URL.
This method returns the length of the file in bytes.
Returns the last modified date of the S3 object.
Return a file with the given path and content type.
Return the contents of a string as a byte array.
Set the response content length.
Gets the request base, or null if the request doesn't exist.
Gets the request path.
Gets the request base.
Get parameter from request ignore case.
Saves the current settings.
Writes the given directory and its contents to the given file.
Create a new instance of the BitCounter uncompressed for a subkey.
Count the total number of bits between start bit and replication count.
Appends a new line to the buffer.
Make a document representing a collection of points.
Get the capabilities document.
Get the record at which coordinates are present in the subset.
Return the coordinate at the specified index in the group.
Adds a new item to the list box.
Handles the given exception.
Get the step index in the range [ firstPos, lastPos) where firstPos is
Gets the gen process map.
Checks to see if the endpoint is a cdmRF endpoint.
Set the value of this field.
Returns a grib1 factory for the given grid number and center.
Writes the contents of an input stream to an output stream.
Reads the contents of an input stream and returns them as a string using the given charset
Reads the contents of an input stream into a byte array.
Writes the contents of the given string to the given output stream.
Copies the contents of a file into an output stream.
Copies from a random access file to an output stream.
Copies all files from a directory to a new directory.
Reads the contents of a file into a byte array.
Reads the contents of a file into a single string.
Writes the contents of the given string to the given file.
Writes the contents of a string to a file.
Writes the contents of an input stream to a file.
Parses the exception handler.
Dap2 exception handler handler.
Reports an error URL that could not be parsed.
Get the catalog information.
Prints the catalog information to the given print writer.
Print the status of the request.
Print an error page to the given print writer.
Get the date reference.
Reads the Vlen data from the given section from the given data storage.
Reads a collection from the given string.
Open a collection reader.
Check if a string contains any characters that are allowed to be replaced by the given character.
Cleans an array of bytes to a String.
Filter a string for characters that are not valid numbers or letters or digits.
Filter the given string using the 7-bit prefix.
Makes sure that the given name is a valid cdm name.
Computes the match between two strings.
Pads the given string to the left, if it is at least desiredLength.
Pads the right part of a string to a given length.
Removes the first occurrence of the specified substring from the specified string.
Removes the character c from s if it is present.
Removes the given character from the end of a string.
Collapses all whitespace characters from the end of a string.
Replaces the first occurrence of 'out' in s with 'out'.
Replaces all occurrences of a character in a string with another string.
Replaces all occurrences of a pattern in a string with a replacement string.
Substitutes all occurrences of variables in a string with their matching values from another string.
Substitutes variables in a string.
Removes all non-printable characters from the given string builder.
Replaces all occurrences of a character in a String with a replacement string.
Replaces all occurrences of a character in a String in a StringBuilder with a new String.
Substitutes all occurrences of variables in sbuff.
Returns a copy of s if the first character in s is bad.
Process a collection update event.
Checks the state of the manager.
Updates the data in the given collection using the given update type.
Returns a list of dataset objects for this input format.
Release any resources held by this instance.
Make a deep copy of a structure.
Copies a ByteBuffer structure to a new ByteBuffer structure.
Copy a structure to a new structure.
Copy structure members to structure data.
Copy a structure into a ByteBuffer.
Gets the time interval size in hours.
Appends a range to the end of the section.
Returns a table analyzer for a given feature type.
Analyzes the given feature type.
Sync the reader with the mc grid.
Get a gaussian lat Creates an array of the given type of lat Creates an array of the
Swap a long value from the given byte array at the given offset.
Swap float from byte array.
Swap the character at the given offset in the given byte array.
Find coordinate axes for the given dataset.
Adds a parameter to a coordinate transform.
Get the common parent group of this group.
Test if this group is a parent group of another.
Sets the parent group.
Adds a dimension to the group.
Adds a dimension to the group if it does not already exist.
Adds a new group to this group.
Adds an enumeration to this group.
Adds a variable to the set.
Removes the dimension with the given name if it exists.
Make a group from a file that is a relative path to another file.
Convert DAS attribute to DAS attribute.
Print the das.
Get the base type of a variable.
Write a grid dataset to a file.
Replace missing values in an array.
Replace missing values and scale.
Get the xstart of an array by a given amount.
Write a Geo referenced array as a grid.
Writes the error to the output stream.
Finds the top index file from the config.
Gets the type of the Grib2Collection in the given file.
Updates the GribCollection instance based on the config.
Update leaf collection.
Opens a grib collection from a data file.
Open a GribCollection from a data file.
Checks if the given URL matches the given URL pattern.
Add a new key-value pair to the dictionary.
Find a key-value pair in the dictionary.
This method is used to set the well known triplestore in the system.
Inserts a new triple into the store.
Returns the set of datasets for this query.
Find a dataset by its name.
Set the projection of the feature set.
Returns an iterator over the possible shapes in the specified group.
Make a shape from an iterator of feature features.
Compares this id with the id of the given string.
Starts a new progress monitor task.
Check if a collection needs to be updated.
Normalize the data in the provided list to match the data in the provided list.
Set the value of a structure at a specific index.
Get the structure data at a certain index.
Copies the members of the given structure into the given index iterator.
Gets the scalar object at the given recno.
Converts a scalar field of the given data type to a double.
Converts a scalar int.
Gets the scalar float.
Gets the scalar byte.
Gets the scalar short.
Gets the char value of a scalar.
Get scalar string.
Gets the array structure at the given recnum.
Gets the array sequence.
Gets the array object at the given recnum.
Determines the minimum and maximum values for a given value.
Evaluates an expression.
Returns a string representation of the constraint.
Returns true if the given node is a reference to a redef.
Evaluates the filter and returns true if the filter evaluates to true.
Counts the expansion count of a dap structure.
Computes the set of enums.
Computes the computedegroups.
Compile the given SCE with the given DAP dataset.
Checks if the provided file is a valid file.
Make the action system.
Gets byte order.
Set the byte order to be used by the compiler.
Finds the key with the given name.
Searches for a header with the given name.
Get the header for a file.
Prints the current state of the model to stdout.
Get the data pointer of a part.
Get the XLSG value for a given word.
Get a string from the input stream.
Calculate the dm-unpk distance.
Get bits as a string.
Writes the given writable byte to the given channel.
Parse the base element.
Parse a grid element.
Parse aliases.
Decodes a list of key descriptors into a list of DataDescriptor objects.
Replicates a set of keys by replication factor.
Gets the dataset filename.
Gets the name of the feature as a string.
Checks if two float values are within an absolute value.
Determines if the node references a variable or group.
Parse a unit from the given string.
Checks to see if a variable is tiled.
Make the best coordinate in the time set.
Converts a latlon rectangular region to an projection rectangular region.
Show the time series.
Convert a list of Attribute objects to a map.
Returns the array of values for this preference.
Get the numeric value associated with the given index.
Writes an cdl value to the current output stream.
Sets the value of this property as a string.
Sets the values of this array.
Scans the file system.
Generates a proxy dataset resolver catalog.
Adds a message to the queue.
Set the dataset's data type to the one we're looking for.
Get and download the WMS data file for a given access.
Prepares the GUI for the current operating system.
Create the frame containing the tools.
Make a human readable name for the given list of coordinate axes.
Computes the lesser rank of the two axis.
Finds the axis with the specified type.
Get the projection of this coordinate.
Indicates if the request is for a Geo xy.
Check if the coordinate axis is regular.
Checks if a subset of a set is contained in a set.
Checks if the list of coordinate axes are contained in the want axes.
Check if the given axis name is contained in this coordinate set.
Indicates whether or not the given set of dimensions are part of this set.
Checks if the list of axis types is contained in the want axes.
Checks if the coordinate axis contains the specified axis type.
Returns a deep clone of this DAPNode.
Returns the selected bean in the jtable.
Returns the currently selected beans.
Returns the selected cells in the table as an array.
Set the selected bean in the table.
Restores the state from the store.
Creates a unit with the given name.
Closes this stream.
Checks if a variable is an extra.
Check if the given variable is a coordinate.
Find a coordinate axis.
Add data variables to a table.
Add a cursor to the parent table.
Make a new stn feature from a data structure.
Create a new node map.
Gets the simple unit factory with the given name.
Creates a new simple unit factory.
Checks if the given unit strings are compatible with exceptions.
Tells whether or not the given UGM is compatible with this UGM.
Tells whether or not the given string is a time unit.
Gets the conversion factor.
Converts the given value to the given output unit.
Returns true if this is an unknown unit.
Gets the value of this unit.
Create a new Rel Op clause.
New boolean clause.
Create a SubClause representing a function.
Makes an image of the given array of symbols.
Crawls all of the data in the catalog.
Decide whether a dataset should be released or not.
Crawls the direct datasets.
Gets the file or cache.
Get existing file or cache.
Set whether or not the file manager is running in debug mode.
Gets the list of all files.
Closes the cache.
Seeks to the specified position.
Flushes this buffer to the underlying file.
Reads a byte from the input stream.
Read n bytes in a short array.
Read an integer value from the buffer at the given position.
Read an int array from the stream.
Read an array of longs from the stream.
Read a float array from the stream.
Read a number of bits from the given double array.
Read a string from the stream.
Read the last N bytes of a string.
Write an array of boolean values to the stream.
Writes n bytes in a short array.
Writes a range of characters.
Writes an n-bit int array to the stream.
Writes n elements from the given long array starting from the given position.
Writes a float array to the stream.
Writes an array of doubles to the stream.
Writes a string of bytes.
Writes an array of bytes.
Search forward.
Appends the query part of the URL.
Creates a new index factory for the given feature collection.
Check if the index exists or not.
Checks if the given index reader represents a leaf.
Constructs the list of children from the given index reader.
Scans the directory for top-level top-level files.
Reads the files from index.
Gets the gridsets.
Acquire a file cacheable for a given dataset.
Removes the cache element from the list of files and directories.
Removes a key from the map.
Releases the file cache.
Convert 4 bytes to a 4-bit int.
Updates an element in the cache.
Clears the cache.
Converts a grid dataset into a vertical transform.
Determines if this region is a global region.
Checks if the axis is z.
Finds the coordinates of a point.
Gets the coordinates of a point.
Finds the x values of a given location in the world space.
Finds the x values of a given location in the world space.
Gets the item position.
Get the arrow item index for the given pixel.
Iterate over all basic file attributes of this directory.
Get the remote files.
Get the name of the subcenter.
Parses a unit string and returns the corresponding CalendarPeriod.
Creates a new CalendarPeriod instance for the specified value and field.
Creates a new instance of CalendarPeriod from the given string.
Subtract two dates.
Gets the conversion factor.
Gets the value in milliseconds.
Gets the offset.
Synchronously reads and parses the data from the file.
Initializes the parameter tables.
Put a new data root extension into the map.
Finds the longest path match.
Find the data root for the specified request path.
Converts a data root extension to a data root.
Get the DateRange for the given Calendar.
Reindex each coordinate in the coordinate list so that it can be used as index.
Factory method to create a file writer with the given version and location.
Add a new group with a given name to a parent group.
Add an enumeration to a group.
Delete an attribute from a group.
Rename an attribute from a group.
Add a record structure to the file.
Aborts and closes the SPIW file.
Writes the properties of this object to the specified output stream.
Extract the metadata for a given thredds dataset.
Divide two units together.
Converts this value to a derived unit with the given amount.
Converts this value to a derived unit with the given amount.
Convert a variable in a nested section to an array.
Convert a top level variable into an array.
Converts the given VData object into an array.
Closes all databases.
Open a new database.
Converts an integer to a period.
Ensures that the internal array capacity is at least the given capacity.
Get the string at the given index.
Make the catalog for a given directory.
Make a proxy ds resolver catalog.
Get the coordinate type of the outer dimension.
Creates a new instance of Grib2Pds from the given byte array.
Calculates the time from the octet at the specified index.
Applies the given scale factor to the given value.
Parses a local concept from the given file.
Adds a concept to a concept file.
Removes all whitespace characters from the beginning and end of a line.
Stores a concept into the parameter table.
Demonstrates how to write a single grib1 table to a file.
Writes the lookup table file.
Shows the local concepts.
Runs the ecmwf-local concepts command line tool.
Get a dataset type by name.
Expand the dataset.
Full expand the catalog.
Name the datasets.
Name the dataset list.
Name the dataset tree for the given dataset.
Method that will load a picture with an image and set its rotation.
Stop the loading of the given URL.
Change the source status.
Notification that the source file has been loaded.
Create a new scaled picture in thread.
Gets the size of the image in pixels.
Gets the scaled size string.
Gets the merged parts.
Builds the header for the header area.
Get the list of Snowflake types.
Checks to see if the part is a valid group.
Sets the root directory of the file system.
Creates the root directory of the file system.
Gets the cache file.
Cleans the cache for files that have been modified since cutoff.
Clean the cache.
Checks to see if the given byte is a bufr table.
Factory method to create a coordinate axis.
Returns a copy of this axis with the same properties as those in the parent axis.
Indicates if this field is a numeric field.
Serializes the description of this axis to the given formatter.
Gets the Calendar from attribute.
Sets the list of rows.
Get the selected row.
Increments the selected row.
Get the model index of this table.
Set the selected index of the slider.
Sorts the specified string array in ascending order using the quick sort algorithm.
Swaps the elements of the given array at positions i and j.
Checks if a file exists in the system.
Rotates an array around a given angle.
Create a new XML file from a file name.
Create an instance from two input streams.
Create an XML from a resource.
Makes a standard filename for the given app name and store name.
Saves the current settings to a file.
Saves the current state of the model to an output stream.
Writes an atomic variable out to the given stream.
This method writes a structure to a stream.
Write the structure1 part of the DAP.
This method writes the sequence.
This method writes a Record to the destination.
Checks if the given file is a valid access file.
Get the ID of the currently active Wmo.
Read a row of data from the data input stream.
Get the data at the specified index in this record.
Gets the data in the file specified by the first 4 bytes of the access file.
Gets the data from a file.
Create a file in the given location using the Gds in the given grid list.
Makes an estimate of the size of a grid file.
Create a file in the given location.
Sets the list of stations.
Set the selected station.
Transform the pick pt in world2 normal to the pick pt in world2 normal.
Picks a point from the world which is closest to this one.
Gets the currently selected station.
Get the name of the column for the given column type.
Get a list of the stations in the bounding box.
Gets the station of a given name.
Get the data iterator of a station.
Gets the data iterator.
Reads the data from the specified RPM file.
Computes the dot product of this vector with the vector v.
Computes the Euclidean norm of this vector.
Normalizes the vector in place.
Set the services from the given dataset iter.
Gets a parameter by its id.
Gets a local parameter by its id.
Adds a new name with a double value.
Adds a new symbol and its value.
Gets the prefix.
Checks if the email address is valid.
Get a parameter as a double.
Calculates the CRC32 data.
Returns true if the last octet is a thin version of the raw data.
Returns the index of the field with the given name.
Gets the time type name.
Get the time coord.
Set the next polygon in the iteration.
Set the previous polygon in the chain.
Finds a property by its name.
Set the current projection.
Get subset from time.
Registers an IOException with the given class name.
Registers an instance of the given class for reading and writing.
Indicates whether the given class is one of the registered SPIs.
Checks if the given class is one of the registered SPIs.
Check if the file can be opened.
Open a file in memory.
Open a file in memory.
Open a file in memory.
Open a file in memory.
Finds the global attribute with the given name ignoring case.
Converts this IDP to a CURI representation of the IDP.
Writes the cdl header to the specified output stream.
Write an cdl expression to the specified print writer.
Output cdl file.
Adds an attribute to a group.
Add an attribute to a group.
Add the given group as a child of the given parent group.
Adds a dimension to a group.
Removes the dimension with the given name from the given group.
Adds a variable to a group.
Adds a variable to the given group using the given name and dimensions.
Adds a string variable.
Removes a variable from a group.
Sends a message to SPI.
Makes a record structure for this SPI message.
Completes this group by clearing out the previous group's dimensions and gattributes.
Reads a variable section and converts it into an array.
Reads the data from the given section to the given byte channel.
Read a list of variables.
Reads an array from the given variable section.
Makes the full name of the node based on the node's parent group.
Makes the given full path name with the given name.
Returns true if the mfile should be included.
Check if mfile should be excluded.
Checks if the mfile passes the filters.
Appends a value to the end of the vector.
Checks that the given string is a valid value for the given type.
Checks if the given value is a valid value for the given type.
Checks if the given string is a valid UTF-8 encoded byte.
Check short.
Checks if the given string is an integer.
Checks if the given string is a valid U.
Checks if the given string is a valid float.
Checks if the given string is a valid double.
Gets the attribute data type.
Returns true if the given dataset is viewable.
Checks if the given string is a valid boolean string.
Checks if the given string is a valid alphanumeric string.
Checks if the given string is a valid constrained set of alphanumeric characters.
Checks if the path is a directory or a file path.
Converts a Unicode code point in a string to its corresponding hexadecimal equivalent.
Returns the value of the parameter with the specified key.
Compare two record instances.
Reads data from the specified input stream.
Processes the input stream.
Removes any quotes from a string.
Marks all stack variables in the given stack as stack unregisters all stack variables.
Writes the class definition to the file specified in the passed in location.
Gets the value from thredds config.
Output cdl file.
This method creates and returns a new StationHelper instance.
Checks that the builder is valid.
Gets the azimuth.
Gets the elevation of the message.
Get the latitude of all the rays of this day.
Get the coordinates of all the lons of this day.
Get the ALTS at this point in time.
Get the azimuths of this block.
Get the elevations of this entity.
Selects a subset of the variables in this structure.
Selects a variable from this data structure.
Adds a member variable to this structure.
Sets the member variables for this variable assignment.
Sets the parent group.
Calculates the size of this set.
Reads a structure from the given index.
Read an array structure.
Get the data category for a given category.
Get the name of the class.
Add a parameter to the list.
Get the name of the file header.
Converts a latlon rectangular region to an projection region.
This method returns the version number for a given convName.
Gets the zis positive.
Set the color scale params.
Render the plan view.
Returns true if the specified group is a child of the specified group.
Get a message type by its name.
Installs this table in all columns of the given table.
Sets the API key and secret to be used when building a Bitcoin API.
Creates a label with the given text.
Creates a label with the given lines for the given justification.
Creates an HTML label with the specified value.
Connects to the remote host using the given properties and path format.
Get a list of IP types from a cloud SQL type string.
Connects to the specified remote host and port number using the specified properties.
Purges a logger from the set of loggers.
Compiles a single class.
Adds the given source code to the compiler.
Read the graphic control extension.
Gets the next frame from the header.
The list of selectable person names.
Initializes the list events.
Searches for a person with the given id.
Adds validation messages.
Sets the person id.
Create a view model for the given view.
Load the list of country objects from the classpath.
Create a new step for the given view type and view model type.
Create a scene object for a scene object that represents a scene object of the given view type
Clears all elements from the given map and calls the consumer for each.
Creates the index events.
Attempts to access the given callable from the given member.
Loads the components of a scene-specific view.
Query for a style row.
Get the pixel value from the image.
Get the pixel values from the specified image.
Validate image type.
Create an image for the given tile width and height.
Set the tile data from a bitmap.
Executes the specified SQL with the specified arguments.
Wraps the given SQL with the given selection args.
Query for objects with previous result.
Queries the database.
Converts a cursor into a query and table.
Get the feature row for the given geometry index.
Register the table with the cursor wrapper.
Retrieve the tile row for the given tile coordinates and zoom.
Get the coverage data from the GeoPackage.
Get the coverage data from the GeoPackage.
Get the coverage data for the GeoPackage.
Get the coverage data tile matrix results.
Get the coverage data tile matrix for the requested tile matrix.
Get the coverage data tile matrix that contains the overlapping pixels in the bounding box.
Get the coverage data tile matrix that contains the overlapping pixels in the bounding box.
Get the tile matrix for the request.
Get the coverage data value at the given location in the tile row.
Sets the icon in the icon row for the geometry type.
Get the icon for a geometry type.
Gets a reference to the SQLite database used by this class.
Converts a byte array to a bitmap.
Compress the bitmap to a byte array.
Create the table in the table metadata.
Delete the GeoPackage and table.
Get or create the table metadata for the table.
Get the id of a GeoPackage.
Create the table metadata from a cursor.
Create the extensions for this feature.
Get the feature row for the user's custom cursor.
Execute raw query with selection args.
Query for rows within the bounding box in the provided projection.
Query for a custom cursor within an envelope.
Count the number of points within an envelope.
Executes a query that returns records that match the given min and max values.
Builds the where clause from the data set.
Query for feature results within the bounding box in the provided projection.
Query for feature count within the bounding box in the provided projection.
Query for features within an envelope.
Query for feature ids between the given min and max x and max y.
Counts the number of instances of a range.
Set the data of a bitmap.
Set the data of a bitmap.
Sets the compression configuration for the bitmap.
Get the total number of tiles in the map.
Adjust the bounding box by the zoom level.
Adjust the Google Maps API bounds to match the Google Maps API's bounds.
Adjust the GeoPackage bounds in WGS84 to match the zoom level.
Adjust the GeoPackage bounds in web mercator to match the zoom level.
Get the bounding box for the tile grid in the provided zoom level.
Get the tile grid for the given zoom level.
Query for the values of the specified tile column and row in the zoom level.
Query for the tile descending of the zoom level.
Get the closest zoom level for the given length.
Get the approximate zoom level for the given length.
Query for the tile grid at the specified zoom level.
Delete the tile at the specified zoom level from the table.
Get the count of rows for the zoom level.
Indicates if this tile request is for Google tiles.
Gets the pixel value from the image.
Get the pixel values from an image.
Validate the image type.
Creates a coverage data tiff image of the specified tile width and height.
Sets the pixel value in the coverage data tiff image.
Get or open a GeoPackage.
Retrieves the current row from the table.
Moves to the next invalid state.
Query by the base feature id.
Delete by id and geometry type.
Get the rectangle for the width, height, bounding box and the section.
Get the rounded float rectangle within the bounding box.
Delete missing databases.
Create and close a GeoPackage connection.
Check if the database is valid or not.
Validate database and close on error.
Check if the database is valid.
Check if the database is valid.
Check if the GeoPackage database is valid.
Check if the GeoPackage database header is valid.
Add the list of internal databases if they are not already in the context.
Adds a collection of external databases.
Import the GeoPackage.
Get the GeoPackageMetadata for the database.
Get the GeoPackageMetadata at the external path.
Create a new geometry row with the min and max values.
Populate a GeometryMetadata from a Geometry Envelope.
Delete the geometry with the primary key from the table.
Creates or updates a geometry with the given metadata.
Update the values of a geometry column.
Get the count of the geoPackage, table name within the bounding box.
Create a GeometryMetadata instance for a cursor.
Update rows matching the where clause.
Draw a tile with the given text.
Get rows of a list of ids.
Check for integrity checks.
Get the user mapping dao.
Get the simple attributes dao.
Gets the mappings for the base with the given id.
Gets the mappings for the given related id.
Check if there is a mapping between baseId and relatedId.
Counts the number of items in the custom cursor.
Register a custom cursor wrapper for the table in the GeoPackage.
Read table user custom dao.
Get the tile for the bounding box request.
Draw a tile using the provided tile matrix and bounding box.
Reproject the tile to the requested projection.
Retrieve the tile results using the provided tile matrix.
Calculate the width and height overlap with the point icon.
Set the density of the line and polygon paint.
Sets the line paint.
Sets the polygon paint.
Draw a tile as a byte array.
Draw a tile bitmap from the x, y, and zoom level.
Draw the query index for a tile query.
Query the number of indexed features for the given x, y, and zoom.
Query for indexed features count within the bounding box.
Query indexed features from the X, Y, and zoom level.
Query for indexed features within the bounding box.
Draw a tile query bitmap from the x, y and zoom level.
Simplifies a list of points using the given simplify tolerance.
Get the paint for the circle point.
Get the line paint for the feature style.
Get the polygon paint for the feature style.
Get the polygon fill paint for the feature style.
Get the paint for the feature style.
Get the style from the cache or create a new one if not cached.
Get the paint for the given style row and feature type.
Get the paint for the feature with the given style id.
Puts a bitmap for an icon row.
Wrap the provided values in a transaction so that they can be returned to the user.
Create a bitmap for all layers.
This method recycles the layered bitmap and removes it from the internal array.
Get the bitmap for the layer.
Get the canvas for a layer.
Create a bitmap and canvas for a given layer.
Get the style mapping dao.
Get a style DAO.
Get or create an icon dao.
Get the feature styles for the feature table.
Get the styles for the feature table.
Get the style row for the feature table.
Get the table icons for the feature table.
Get the icon row for the feature table.
Get the feature styles for a feature row.
Get the feature styles for the feature table and feature id.
Get the styles for the feature row.
Get the icons for the feature row.
Get the styles for the feature.
Get the icons for the feature.
Set the table feature styles.
Set the table style for the feature table.
Set the icons for the feature table.
Set the feature styles for the feature row.
Set the feature styles for the feature table and feature id.
Set the styles for a feature row.
Set the styles for a feature.
Set the style for the feature row.
Set the default style for the feature row.
Set the default style for a feature.
Set the icons for a feature row.
Set the icons for a feature.
Set the icon for the feature row.
Set the default icon for the feature row.
Set the default icon for the feature.
Get or insert a style.
Gets or inserts the icon id for the icon row.
Insert a style mapping row.
Delete the style for the feature table and geometry type.
Delete the icon for the feature table and geometry type.
Delete the feature table mappings.
Delete the feature table mapping.
Delete the mapping with the feature id and geometry type.
Get all style ids for feature table.
Get all icon ids for feature table.
Get all style ids.
Get all icon ids.
Gets the image bytes.
Flushes the output stream.
Get the pixel at the given x and y coordinates.
Reads the pixels from the reader.
Draw the feature.
Draw the line with the given path on the canvas.
Draw a polygon path.
Add a line string to the bounding box.
Add a polygon to the bounding box.
Get the feature cache for the given table.
Remove the specified feature row from the table.
Clears and resize all caches of the table.
Get the cached table feature styles.
Gets the cached table feature icons.
Get the feature table dao.
Set the value of the width property.
Set the value of the height property.
Get the derived width and height of the bitmap.
Get the density from the tile width and height.
Reads a blob value from the data store.
Read the custom table.
Gets the current color, or creates a new one if none exists.
Validate the color value.
Create a color with the given hex and opacity.
Get the manager.
Set the progress for the feature table and tree tables.
Get the index of the specified feature types.
Returns true if the given row index matches the given types.
Delete the index for the given feature types.
Delete the index for the row for the list of feature types.
Delete the index for the given geomId and list of feature index types.
Delete the feature index for the geometry id.
Is the feature set indexed.
Get the list of indexed feature types in the order of query order.
Query for feature index results.
Get the count of all features in this index.
Get the bounding box of the feature table.
Query for feature indices within the bounding box.
Gets the indexed type.
Gets the internal file.
Get internal file path.
Get the geometry type.
Sets the geometry type.
Check if the URL has a bounding box.
Replace the tile ids in the URL with the correct tile ids.
Checks if the given URL has more than one part of the URL.
Replaces the URL in the bounding box with the URL in the provided projection.
Replaces the URL in the bounding box with the URL in the request.
Get the Geometry data object from the table.
Index the feature row.
Update the last indexed time.
Delete the feature index.
Delete the feature index for the geometry id.
Indicates if the feature has been indexed or not.
Query by database and table name.
Query by the bounding box.
Query for feature count within the bounding box.
Query for objects within a GeometryCollection.
Get the count of GeometryMetadataSource in the database.
Query for features within the bounding box in the provided projection.
Query for feature bounding box count within the provided projection.
Get the feature bounding box in the provided projection.
Get a Geometry Metadata instance for the current cursor.
Get a feature row from a cursor.
Get the feature row for the given geometry metadata.
Get the tile daos for the feature table.
Get the feature daos for tile table.
Get the bounding box for the feature tiles.
Query by both baseId and relatedId.
Get a list of unique base ids.
Get a list of unique related ids.
Delete by base id.
Delete by related id.
Delete by ids.
Builds the where clause ids.
Create a new GeoPackage metadata.
Delete the database row.
Rename the metadata to the new name.
Rename the column name to new name.
Get all the GeoPackageMetadata objects.
Get the GeoPackageMetadata for the database.
Get the metadata for the given id.
Get or create the metadata for the specified GeoPackage.
Check if the database is external.
Get the external at path.
Get metadata column names like the like.
Get metadata column names that not like the sortColumn.
Get the metadata column names where the like.
Create a GeoPackageMetadata from a cursor.
Invokes all registered listeners on the created view.
Adds a view to the page with the given index.
Creates a view with the given name and set of attributes.
Internal method to create a custom view.
Appends an event to the given buffer.
Finds the configuration file from system properties.
Get a resource from the classpath.
Auto config the application.
Reports the status of a resource search.
Converts the given address to its string representation.
New executor service executor service.
Starts all converters in the given list.
This method is called at the end of the append method.
Adds a substitution property.
Gets a configuration property.
Compile the given node using the given converter map.
Advances the next token from the parse tree.
Obtains the regular expression for the given date.
Begin an event with a given name and attributes.
Ends the current context with the given string.
This method initialises this instance with the given key and the given value.
Creates an instance of the proper context selector class.
Set up the logging properties for this logger.
Gets the external storage directory path.
Gets the database directory path.
Gets the absolute file path.
Evaluates the event and returns true if the event was evaluated successfully.
Get the discriminate value of an event.
Updates the mask if necessary.
Convenience method to determine the chain decision.
Creates the key managers.
Creates the trust managers.
This method returns a key store factory bean based on the system properties.
Gets the location from the system property.
Obtains a URL for a resource.
Checks if the chain handles any throwable handling converter.
Stops the application.
Print in case of errors or warnings.
Print the error message if an error occurred.
Print the given context with the given threshold.
Gets an entry from either the map, or the lingerers map.
Marks the given key as complete and removes it from the live map.
Parses the given string and returns a format-info representation of it.
Renames a file.
Checks whether the given source and target files are on different volumes.
Gets the value of an environment variable.
Gets the system property.
Sets the MDC property map.
Output the MDC property map.
Extract the stack trace for a given exception.
Checks if the current class is in the framework space list.
Adds a new status to the set.
Add a new status listener.
Looks up the Action matching the given path and if found returns a list of implicit actions.
Returns a list of actions applicable to the given element path.
Set the class loader.
Gets a string from system properties.
Decapitalizes the given name.
Returns an array of MethodDescriptors for the given class.
Returns an array of PropertyDescriptors for the given class.
Start the output stream.
Add a console listener instance to the context.
End the current context with the given property name.
Gets the discriminate value for the given event.
Checks if the event should be discarded.
Starts the shutdown hook.
Ends the hook.
Get the list of enabled protocols.
Helper method to check if the enabled cipher is set and if so return the list of supported
Returns the included and excluded strings from the given array of strings.
Converts Java scope string to Java scope object.
Sets the given properties on the given scope in the given context.
Adds an appender to the end of the list.
Detaches the specified appender from the appender list.
Removes the appender with the specified name from the appender list.
Handles a parent level change.
Call the appenders of this logger.
Detaches the specified appender from this output stream.
Create child logger by last name part.
Calls turbo filters.
Log a SLF4J event.
Calls the method and waits for the socket to be created.
Create missing parent directories.
Get the integer representation of this log level.
Converts an integer to a level.
Returns a set of URLs representing the number of occurrences of a resource.
Gets a resource from the given class loader.
Gets the class loader of an object.
Gets the class loader as privileged.
Gets the class loader of the given class.
Start the output stream encoder.
Gets the tag of the event.
Marks the start of an event based on a set of attributes.
Gets the index of the first separator of the given name.
Evaluates if the given event is valid.
Returns the name of the client thread that is associated with the given socket.
Checks if two files are on the same file store.
Appends the given event object to the dynamic table using the event evaluator.
Send the buffer.
Adds a new mdc value level pair.
Create a dynamic converter instance.
Create a composite converter instance.
Determines the compression mode based on the file name pattern.
Convenience method to configure an URL.
Reads the configuration from a file.
Convenience method to set the configuration from an input stream.
Builds the interpreter.
This method configures the system time.
Configure the Joran interpreter.
Gets the value of a property.
Set the name of this widget.
Checks if the context has a status listener.
Gets the time when the last time this job was executed.
Starts parsing and applying converters to the parse tree.
Get the effective converter map.
Returns the header for the header of the file.
Gets the file footer.
Starts the session.
End the appender.
Returns a copy of the current collection of clients.
Adds a client to the set of clients.
Removes the client from the set of clients.
Get a copy of the current context map.
Gets value of method.
Calculates the chain of turbo filters.
Checks if the operating system is android.
Initialize the context.
Get the files in a folder that match a certain stem regex.
Print all status messages that are older than the given threshold.
Get the database file from the given filename.
Clear expired logs.
Check if the duration has expired.
Append long.
secondary append method for secondary event creation.
Binds the logging event to the statement.
Returns null if the given object is null or empty.
Compute reference mask.
Merges the property maps of an event into a map.
Method to insert an event.
Gets the prefix match length.
Get the effective level.
Returns true if the class is an instantiable interface or not.
Returns the child values of the given parent map.
Process an include URL.
Open a stream to the given URL.
This method removes head and tail events from the passed inRecorder.
Returns true if the appender should start.
Determines whether the exception is transient or not.
Sets the default hosts to be used.
Ensures that the local index is created.
Sync all data selection queries to the local build executor service.
If the last sync time is greater than the configured delay between syncs, this method will
Waits for a task to complete before returning.
Get the list of indexes that are offline synced.
Converts the contents of an input stream to a string array.
Converts the given stream to a byte array.
Attempts to consume quietly from the input stream and close the connection.
Return the list of hosts that are up or could be retried.
Set the type of places query.
Starts the index.
Puts the given value into the cache.
Get a value from the LRU cache.
Await completion.
This method reports the number of times a test failed.
Copies files from a directory to a target directory.
Reads the properties from a file.
Gets the static field value.
Finds a method by it's name.
Formats a percentage as a percentage.
Formats a double with the specified length to the left.
Format the given number as a number up to the specified length.
Writes a JSON string.
Writes a number as a JSON integer.
Writes a double to the current context.
Read JSON numeric chars.
Read a long value from the stream.
Read a JSON double.
Read the next json string and return it as a Base64 encoded byte.
Execute a method call.
Invokes a method call.
Enqueues a method call.
Gets the resource from the given location.
Updates the decoration of the current workbench.
refresh repository view.
Returns the resource history view.
Opens the given editor in the given window.
Reports an error to the user that the authentication process failed.
Executes an auth prompt for the given server.
Create the default page for the book.
Starts the animation thread.
Sets the keep-all alive flag.
Set whether or not this node is omitting.
Set the owner of this element.
Adds a condition factor to the set of condition factors.
Create a condition term from a stream.
Returns true if the condition term matches one of the condition factors.
Returns a DSL reader for a given rule.
Loads the DSL configuration from an input stream.
Reads the configuration from the given stream.
Gets the menu for the given parent control.
Add a response element to the document.
Adds the href attribute of the root element.
Inserts a new href before the specified new href.
Remove the specified href.
Adds the prop stat.
Gets the href attribute of the root element.
Retrieves the status of the element.
Get the current value of the current stack frame.
Checks if class1 is a subtype of class2.
Checks if the given Proposal string contains the new Proposal.
Resets the buffer to the beginning of the file.
Create the actions for the contentassist.
Adds a connection.
Returns the value of a given property.
Removes a connection from the source and target.
Sets the location of the gauge.
Set the location and size of a given property.
Sets the size of the gauge.
Print an array of constraints.
Adds a lock entry to the tree.
Adds the given vertex as a child of this vertex.
Removes the given vertex as a child of this vertex.
Initializes the cache of the preference, depending on whether or not the preference was parsed.
Stops the parser.
Gets a resource string from the default resource bundle.
Gets the resource bundle.
Returns the rule builder's form colors.
Set the date time.
Sets the date using the given pattern.
Creates an error status with the specified message and throwable.
Logs an error.
Add a field to the list of fields.
Adjusts the grid layout of the field editor.
Apply the font to all fields.
Calculates the maximum number of columns.
Initializes the field editor list.
Fire a property change event to all registered listeners.
Set the active editor of this widget.
Convenience method that adds the zoom item to the tool bar.
Determines the SQL Dialect to use based on the back text.
Create a new context.
Saves the current contents of the editor to the given file.
Create the table listeners.
Adds an entry to the cache for the given URL.
Puts a new URL into the cache.
Adds a new token to the token list.
Adds a child node to this node.
Set the file to read.
Adds a new condition.
Adds a state token condition.
Checks if the condition matches.
Gets the prop of the root element.
Get the status of the element.
Set the property of this Element as a child of the given Element.
Get the last line.
Get the last non dash line.
Binds the given id with the given binding.
Bind two string values.
Binds the given id with the given array of bindings.
Create a process for the given type.
Create the sample j project for the given example.
Returns the runtime id of this preference, as defined in the preference's key.
Visits an rete.
Visits all the nodes in the tree.
Computes the dot ID of the given object.
Adds the element with the given name to the end of the list.
Adds the set.
Creates a new locator for the specified resource URL and label.
Replies the presentation Reconciler for the given source viewer.
Returns true if the given status object is the same as this status object.
Indicates whether the given condition term is contained in this set.
Create a condition factor from a stream.
Adds the pages to the document.
Execute a http delete request.
Perform a HTTP POST request.
Gets the status of a job.
Executes the pull operation.
Handles results from a pull request.
Replaces the value at the given index in the array.
Adds an active lock.
This method filters the list of properties based on the given prefix.
Read backwards from a document.
Calculate the row list for a given base vertex.
Get the part for the given model element.
Get an image descriptor for the given path.
Declares the image registry.
Adds a new vertex at the specified depth.
Returns the row index for the given vertex.
Get the total width of all rows in the table.
Dumps the contents of this batch to stdout.
Optimize the query.
Initialize the graphical viewer.
Draw the given rete graph.
This method returns the DroolsLine breakpoint for the given source.
Set the href of the root element.
Check if the DAV file can be played.
Copy a collection of properties to a destination.
Examines the multi status response.
Extracts the prop stats.
Convenience method to get the response body as an InputStream.
Get the active locks.
Return the status of a property.
Sends a HEAD request to the DAV server.
Acquires a lock token.
Move names to destination.
Helper method to check in the dav response object.
Refreshes the lock with the given token.
Remove a collection of properties.
Remove a property.
Set the response content from an input stream.
Set collection of properties.
Set a property of this element.
Release the lock token.
Update the version in dav.
Convenience method to process the Version-Control request.
Delete the DAV file.
Examines the given status code.
Return true if the given property has a child with the given name.
Writes the request body to the specified output stream.
Converts a byte array into a hex string.
Convert an array of ints to a hex representation.
Sets if the property is all prop.
Sets whether or not the given property name is already set.
Set the property of the root node.
Strips the last word from a prefix.
Updates the tree viewer.
Writes the content to the specified output stream.
step over the current environment.
Marks parser errors.
Skip over any whitespace characters.
Adds a resource to guvnor.
Commits changes to a single file.
Gets the current age.
Returns the content length of the response.
Returns the maximum number of seconds from now on.
Determines if the file should be overwrite.
Checks if the Pas Ads field has been set.
Gets the current timeout.
Puts a value into the context.
Set the timeout value.
Open the DSL file.
Parses the content of the file and adds them to the map.
Gets the metadata string from the given text.
Strips the obj metadata from the given text.
Add tokens to a node.
This method returns an array with the children of the current condition.
Get the children of this node.
Adds all children of a node with a given prefix to a list.
Recursively prints out the tree.
Recursively prints a node and its children to System.out.
Print the given number of tabs to System.out.
Reads a JSON value from the given text.
Get an image descriptor by id.
Invokes the method specified by the given request.
Set the value of a request header.
Create the rule sample launcher project.
Create the rule files.
Creates the rule flow for the project.
Create the rule flow sample launcher.
Returns the selected IU.
Create an image from the data in the given format.
Returns the name of this constraint's field.
Returns the evaluator of this node.
Returns the value of this node's constraint, or null if this node has no value
Adds the guvor resource properties.
Add a baseline control to the current control set.
Bind the given member to the given source.
Gets the member with the given name.
Optimize the graph.
Initializes the controls for the dialog.
Checks if the page is valid.
Generates an entity tag based on the current thread's hash code.
Gets the opposite of the given vertex.
Validate the list of OTPs against the current user's public ID.
Checks if is right user.
Gets the username for a given public ID from a file.
Adds the yubikey to the user.
Verifies that the given user name is equal to the given OTP address.
Clears all the stored password in this instance.
Get the public ID for the given OTP string.
Checks if the given string is a valid OTP string.
Creates a new evaluation from the given node and source.
Create a new evaluation instance.
Clears all cache entries.
Checks if is JDK15 or not.
Get the package name of an object.
Get the package name of a class.
Returns a unique descriptor for an object.
Gets the class of the argument.
Checks if two arrays are more specific.
Returns the value of a property on a target object.
Returns a map of property descriptors for the given class.
Gets a PropertyDescriptor for the property of the given targetClass and property name.
Gets read method.
Reads a character from the input stream.
this is the main projection method.
this is the select part of the query.
Converts the given value to a long.
Converts the given value to a double.
Converts an object to a BigInteger.
Converts an object into a BigDecimal.
Converts the given value to a string.
Determines the numeric type of the given value.
Converts the given value to the given type.
Gets the integer value.
Gets the numeric type.
Determines the numeric type of two values.
Creates a Number of the specified type from the specified value.
Pop the evaluation stack from the current node and return it.
Generate OGNL getter method.
Generate OGNL setter method.
Recursively flatten the tree.
Initializes the tree with the given node and source.
Escapes the last character of an image.
Set the root context object.
Evaluates an OGNL expression and returns the value.
Set the value of an accessor.
Set the value of a tree.
Check if the expression is a constant expression.
Gets the default watch service id.
Reloads the current application class loader.
Get an archiver by name.
Check if the archiver has any problems.
Reads the content of a file and returns it as a string.
Create the project.
Adds a new system property.
Adds a new system property.
Change the directory list.
refresh the button state.
Creates a file observer.
Get the directory of the selected files.
Create the folder if it does not already exist.
Checks if the given file can be read or write.
Start the background job.
Starts the list.
Ends the list.
Handle the motion of the specified edge.
Get the crop rect.
Computes the layout of the crop rect.
Registers the listener with the specified media factory.
Adds the span watcher.
Returns the view, which is used to display the title of the spinner.
Gets the drop down view.
Converts the given spanned text into a formatted image.
This method is called within a paragraph.
Creates a new unique file for the given target folder.
Determine the original file for the given URI.
Gets the namespace from the given name.
Gets the local name of a class.
Sets the value of an attribute.
Set the value of an attribute.
Gets the font name from a file path.
Gets the name of the font from the specified file.
If there is enough room for a new buffer, we need to make sure that there is
Writes bytes to the output stream.
Writes a byte to the output stream.
Reads data from the specified input stream and returns the number of bytes read.
Writes the contents of this buffer to the given output stream.
Returns a copy of the internal byte array.
Set the font size.
Converts path separators to unix path separators.
Recompute the focus of the view.
Ensure that the highlight view is visible.
Moves the highlight view to the center of the rectangle based on the zoom factor.
Reset the document locator.
Checks if the given string is valid.
Create a new element type.
Set the value of an attribute on an element.
Sets the parent of the element with the given name.
Get the element type by name.
Gets the entity for a given name.
Cleans-up any additional objects that might have been added to the editor.
Apply the selected value to the editor.
Checks if the given domain name is a valid domain name.
Executes the given operation.
Redo the given editor.
Replaces all occurrences of a pattern in a source string with a replacement string.
Get or create the thread status.
Sets the decoding options for the specified thread.
Check if a thread can be decoded.
Decodes a bitmap from the given file descriptor.
Get a sorted set of all fonts.
Gets the asset fonts.
Gets the system fonts.
Sets up the internal data structures.
Get a reader for this source.
Get input stream from publicid and systemid.
Advances the attribute on the new element by setting the attribute name on the new element
Expands any special characters that may occur in the given string.
Lookup the entity in the buffer.
restart the stack with the given element.
Pop the value on the stack.
Pop an element from the stack, ensuring that it is a restart.
Gets the prefix of the name.
Checks whether the given prefix is foreign to the given namespace.
Removes any single or double quotes from the end of the string.
Splits the given string into an array of Strings.
Deal with all the parent elements of the given element.
On save instance state.
Release any resources held by this event bus.
Inserts the image if the current thread is not the active editor.
Dispatches the event to the main thread.
Get the proper base matrix for the bitmap.
Get the max zoom of the display area.
Checks if the selected text exists in the editor's selection.
Finds the spans in the paragraph and removes them from the given paragraph.
Picks up the directory that the user is looking at.
Rotate an image.
Sets the output stream.
Writes a character to the output stream.
Writes a string to the output stream.
Checks if the attribute is equal to the given value.
Writes out a UTF-8 encoded string.
Writes the namespace declaration to the output stream.
Writes a name to the current position of the element or attribute.
Create stream if not exists.
Method to wait until stream is created.
Complete store snapshot with missing instance snapshots.
Wait the minimal duration to execute the next query.
Get records.
Executes the given action with the given retry limit and duration in milliseconds.
Attempts to execute the given action with the given duration between requests.
Checks if a bucket is accessible.
Loads the entity stores from the snapshot store.
Triggers the given collection of files using the given wildcard expander.
Replaces all occurrences of a pattern in a string with a new string.
Delete any of the given characters from the given string.
Adds a new Report to the report.
Updates the given properties with the given key.
Gets the configuration properties.
Attempts to create an input stream from the given wroFile.
Converts a map of pre processors to a map of post processors.
Compile and return the given content as a JavaScript string.
Reloads the cache with a new value.
Reloads the model with the given new value.
Gets the wrapped servlet request.
Get a file name transformer for a base name suffix.
This method is called when an error occurs.
Sends a browser redirect to the specified location.
Process a resource.
Create expander handler function.
Locates the input stream for a given URI.
Create the WroConfiguration object.
Registers the change listeners for the cache update period change events.
Processes the request and updates the response headers.
Sets the WroConfiguration.
Identify duplicate group names.
Merge an imported model into this one.
Locates the stream for the specified URI.
Applies the specified post processors to the cache key.
Decorates a processor.
Process a request.
Splits a string of options into an array of strings.
Loads properties from an input stream.
Parses the properties from the given string.
Create a custom WroManagerFactory.
Saves the fingerprint of all the resources belonging to a group.
Checks if the given group is a target group.
Extend the plugin classpath.
Gets the resource as stream.
Initializes the WroManagerFactory instance based on the properties.
Set model transformers.
Compiles the given string using the given precompiled function.
Processes a list of resources and merges them together.
Process all resources matching the criteria and merge them into a single string.
Run the given list of resources in parallel with the given processing criteria.
Applies the specified processors to the content of the resource.
Decorates a pre-processor.
Persists the current state of the storage.
Gets all fields from the given object.
Rewrite a CSS URL into an image URL.
Computes the new location of an image.
Add a model transformer.
Serve the processed resource bundle.
Initialize the aggregated folder path.
Extracts the variables from the body.
Parses the given CSS into a single string.
Replaces all the variables found in the given CSS string with the given values.
Convert a resource post processor to a pre-processor.
Check if the searched resource is eligible to be included in the minimized clause.
Handles the gzip response.
Create an include pattern processor.
Create a PathPatternProcessor decorator that exclude files matching one of the given path patterns.
Creates a new resource change handler.
This method will remember a resource.
Processes the specified CSS import files.
Filter the collection and return the null free list.
Check if the given request is minimized or not.
Finds all imported resources that match the given CSS content.
Computes the absolute URL for the given resource.
Creates a comma separated list of string items.
Gets the alias list.
Creates the context object.
Evaluate the expression on the specified reader and return the result.
Evaluates the given script using the given source name.
Processes the input file.
Check if handler request.
Create handler request path.
Renames a group.
Computes the destination folder for the given resource type.
Process a group.
Check if a change is required for a given group.
Locates the given URI in the standalone context.
Creates an ObjectPool using the given object factory.
Locates the stream of the given URI in the given folder.
Open a jar file.
Extracts the path.
Determines if the request should be processed or not.
Adds the given locators to the set of locators for the current request.
Decorates the given WroModelFactory with the given list of transformers.
Adds a require to the list.
Process the given Wro content and return the result as a string.
Logs the summary of the errors.
Records a new resource processing event.
Returns the read-write lock for the given key.
Create a process for the given source file.
Parses a comma separated list of properties.
Gets the task info.
Gets the script compilation command.
Parses a header and adds it to the map.
Adds the no-cache headers to the given map.
Gets the path information from the given location.
Gets the servlet path from location.
Checks if the request URI matches the given path.
Loads a regular expression with a given key.
Copies the content from the specified reader to the specified writer.
Creates a new temporary file with the given extension.
Cleans an image url by removing any spaces from the beginning and end of the string.
Sets an attribute in the servlet context.
Generate the data uri.
Generate the data uri.
Sets the given context and the given WroConfiguration.
Declarative Services method for removing the CorrelationId.
Check if the given cache key has changed.
This method is called when an exception occurs.
Checks if the resource has changed.
Update hash for group.
Checks if a list of resources has a specific resource type.
Create a process for the given source file and destination file.
Parse the group definition.
Create a new group from an XML element.
Parse a resource and add it to the collection of resources.
Gets the resources for a given group.
Stops a named timer.
Get a named timer of the current thread.
Returns a timer with the given name for the given todo flags and thread.
Prints the statistics for this job.
Wake up the worker threads that are waiting for contexts to process.
Updates the total number of processed threads from the snapshot.
Updates the finished counters.
Atomically updates the counter if the given value is smaller than the given one.
Default visit method.
Instructs the property to instert into the taxonomy.
Makes sure that the input loading stage has been completed.
Restores the saturation state.
Returns true if the consistency check is consistent.
Restores the taxonomy from the original ontology.
Restores the instance taxonomy from the current state.
Gets evidence.
Gets the number of workers to execute.
Recursively invalidate all reasoner stage in this reasoner.
Gets the individuals to add.
Gets the individuals to remove.
Creates an UnsupportedOperationException with the given message.
Removes the element at the given position from the given array.
Removes a key-value pair from the given position in the given array.
Gets the position of the first non-null non-null non-null non-
Returns true if the given object is present in the given array.
Adds the given element at the specified position in the given array.
Checks the occurrence numbers.
Adds the given timer to this one.
Add the given timer to this set.
Puts a key-value pair into the given key-value pairs.
Removes the entry with the given key from the given array of keys.
Enlarges the map.
Reduces the size of the map.
Saves the current configuration on disk.
Print class declarations for a given taxonomy.
Gets all instance nodes.
Removes all of the elements from this set.
Combine an array of hashes into a hash.
Reads the contents from the input stream and writes them to the output stream.
Gets a reasoner-in state monitor.
Processes the taxomomy.
Submits an input to the queue.
Appends the given elk object to the given appendable.
Marks the given query as not computed.
Adds a new direct type node.
Checks the chain match.
Applies the given operation to the given set.
Adds an element to the set.
Removes the specified object from the set.
Adds the given counter to the set of counters.
Log the memory usage of the JVM.
Sets the configuration options for the reasoner.
Shuts down the server and waits for it to shut down.
Print the header.
Print values in debug mode.
Converts a character into a string.
Adds the rule counter to the rule counter.
Writes the given resource to the given writer.
Gets the value of an action input parameter.
Returns the property descriptor for the given property path and type.
Get the required parameters for this action.
Checks if the given class represents a single value type.
Adds a link relationship to the resource.
Sets the type of the link.
Adds the hreflang parameter to the link.
Add a rev.
Adds a link parameter to the list of values.
Expand the URI using the given arguments.
Get the list of link rels.
Get the list of revs that have been added to the rev.
Returns true if there are any unsatisfied required parameters for this action.
Returns the value of this property as a string.
Returns true if the given property is a hidden property.
Returns whether the property should be included in the annotation.
Returns true if there is an explicit or implicit property include value.
Returns true if the request is required.
Returns the default value of the request.
Gets the parameter name.
Gets the exposed property or param name.
Gets the vocab.
Gets the query.
Appends the given action to the current request.
Sends an input button with the given type and value.
Append an input or select with possible values.
Adds an affordance builder to be built.
Returns the URI template components in the form of a partial URI template.
Strips any optional variables from the given action descriptors.
Get the first node with the given name.
Get the first node with the specified rel.
Iterates over the nodes of this UberNodeSet.
Returns an immutable hash map containing the entries of the given map.
Creates a new map from the given map entries.
Returns an empty map with the given comparator.
Returns a sorted set of the entries in this map.
Returns the last key in this map, or throws an exception if there is no such key
Processes the first element of an array and applies the operation.
Drops elements that match the given predicate.
Folds the value of the first argument with the specified reducer.
Returns a tuple of the given entry.
Computes the relation with two functions.
Register an array of classes.
Get the i-th entry in the tree.
Appends the given value to this vector.
Concatenates the specified collection of items into a single persistent vector.
Returns a set containing the given elements in the order they appear in the array.
Create a new mutable list containing the given items.
Returns a set containing the given items.
Create a list from items.
Create an iterable from the given array.
Returns a new string builder with each indent of a given number of spaces.
Returns a string representation of the supplied array of items.
Creates a lazy ref from the given function.
Applies the operation to the result.
Inserts an item into an array at the specified index.
Returns a deep copy of an array.
Suspend if assoaciated with thread.
This method is called before an async operation has been completed.
Builds a list of components for a given service descriptor file.
Checks if the supplied directory exists and is readable.
Create a inheritance link between two classes.
Copy the methods from the source class to the destination class with the given exceptions.
Copy the methods from the given array to the given destination class with the given exceptions.
Removes the sbb entity with the current class loader.
Gets the value of the notifications parameter.
Return the names of the referenced Ra links of the given service component.
Install service.
Uninstalls the given service component.
Checks if the given link is already attached to the given ra-link name.
Gets a list of usage parameter sets for the specified sbb.
Resets all usage parameters to their default values.
Display the result.
Converts an array of objects into a string that can be placed in a property editor.
Executes the given event on the given activity.
Bind a name to the cache.
Unbind the given name.
Looks up the value of the node with the given name.
Returns a map with the name bindings for each node in the tree.
Moves to the next SLEE or SLEE container.
Checks if the given level is higher than this level.
Extracts the jar.
Tries to pipe the given input stream to the output stream.
Puts an object into the node specified by the given key.
Attaches a sbb entity to this context.
Removes the sbb entity with the given ID from the attached node.
Returns true if no sbb entities are attached.
Gets the set of sbb entities attached.
Attach a timer with the given id to the set of attached timers.
Detaches a timer from the attached timers node.
Returns true if there are no timers attached to this node.
Gets the set of attached timers.
Marks the name as bound to any child of the current node.
Checks to see if a name is bound.
Returns true if there are no names bound.
Gets the names bound copy.
Sets the value of a specified attribute on this object.
Gets the value of a specific attribute.
Returns a deep copy of the cmp attributes map.
Initializes the notification info.
Sends a notification to the user about the usage of a specific parameter.
Downloads the remote du.
Updates the deployed components.
Installs a deployable unit.
Uninstalls a deployable unit.
Die Methode permettant d'ajout d'ajout d
Show the status message.
Returns true if the given record should be logged, false otherwise.
Gets the Logger for the given LogRecord.
Return the set of sbb entities.
Gets the permissions from the current policy.
Gets the list of code sources used by policy holder entries.
Checks if a profile with the given name exists.
Remove the SLEE profile table.
Updates the configuration properties.
The SLEE must be running before calling this method.
Slee stopping the current transaction.
Activates this instance.
Deactivates this instance.
Schedule all activities end.
Remove this instance from the system.
This method returns the resource adaptor interface for the given type.
Inform the user that a service with the given id is active.
Derives the activity handle from the given activity handle.
This method is called when an activity is ended.
Update configuration properties.
Checks the configuration properties to make sure they are valid.
Method that is invoked when the instance is stopping.
This method is called when the resource manager is inactive.
This method ra un configures the object.
Unsets the resource adaptor context.
Method to unset the faultBuilderFactory context from the current object.
Builds the profile attribute map.
Resume the worker.
Gets the activity context handles.
Get the value of a usage parameter set by name.
Decorates the abstract class that is used by the component.
Sends an event to the activity context.
Fired event.
Gets the profile cmp.
Gets the abstract methods from the given class.
Gets the interface methods from the given interface class and adds them to the given map.
Create the Object Pool for the profile table.
Remove the object pool for the given profile table.
Determines whether or not the given notification source is the owner of the given alarm.
Propagate an exception to the alarm.
Gets the usage parameter set for the given name from the given profile object.
Gets the event type descriptor.
Checks if the given URL accepts the given deployable unit.
Initializes a new instance of the DeployableUnitWrapper class.
Starts a new deployable unit.
Stops a deployable unit.
Shows the current status of the deployment.
Execute actions after commit actions.
Executes actions after commit priority actions.
Execute after rollback actions.
Executes actions before commit actions.
Execute beforeCommit priority actions.
Get the names of all defined tracers.
Tries to create a tracer with the given name.
Removes replicated data from this instance.
Process the usage parameters interface of a component.
Returns the sbb object pool with the given id.
Create the object pool.
Executes the given activity.
Starts the activity identified by the given handle.
Ends the current activity.
Checks the preconditions to fire an event.
Fire an event to the given activity.
Generate the concrete class of the current sbb instance.
Makes the getter.
Convert the command line argument to an object of the field type.
Sets the profile ID and the name of the profile.
Extracts the message from the result.
Checks if the given object is a child of this one.
Checks if the given collection contains all elements from this collection.
Removes all elements from a collection.
Test if this level is higher than the given level.
Resolves the value for the current level.
Detach all classes from the pool.
Add a new profile call.
Gets the profile with the given name from the current context.
Passivate profile object on tx end.
Sets the value of this column as the specified text.
Generates a concrete class for an activity context interface.
Generate concrete methods for the given interface methods.
Sets the data attribute of the cache data object.
Adds a name binding.
Remove any bound naming bindings.
Removes a name binding from the cache.
Attach a timer to the cache.
Remove any timer from our timers.
Attaches a sbb entity to the cache.
Detaches a sbb entity from the cache.
Gets the sorted sbb attachment set.
Ends the activity.
Add a component instance to the registry.
Returns a collection of all external dependencies.
Returns true if any of the dependencies has been satisfied.
Returns true if there are multiple duplicates.
Gets the actions that can be performed on this node.
Gets the actions that can be uninstalled.
Checks if the system has at least one referring du.
Closes the given profile.
Gets the object name from the profile table and profile name.
This method checks if the profile is writeable or not.
Sets the cmp field of the profile table.
This method is called after the set cmp field has been set.
Gets the before non-set cmp field.
This method is called after the get cmp field has been set.
This method is invoked before the management method invocation.
This method is invoked after the management method invocation.
Delete a directory and its contents.
Creates the default constructor for the sbb concrete class.
Create the default usage parameter getter.
Create sbb entity getter and setter.
Create the fire event methods for the given set of event entries.
Create the method to add to the activity context interface.
Adds the given query expression to the set of expressions.
Bind an object to a key.
Binds the specified object to the specified name.
Dec decorate an Abstract sbb component.
Invokes the given method on the given concreteProxy and returns void.
Gets the real field name.
Sets the value of the given field.
Returns the value of the field with the given name and type.
Initializes the profile for the given name.
Method to unset the profile context.
Gets the profile local object.
Fire the addOrUpdateEvent if needed.
Gets the profile cmp slee10 wrapper.
Creates a new class with the specified name and interfaces.
Create a inheritance link for the given concrete class and its super class.
Add member values to annotation.
Gets the activity context for the given activity.
Gets the class pool.
Sets the deployable unit.
Clears the class pool and all permissions.
Executes the activity identified by the given handle.
Checks if the given class or interface has one of the given interfaces.
Get all abstract methods for all interfaces and declared methods of the given interface.
Checks if the tracer name is valid.
Gets a collection of profiles for the given query.
Tries to create a temporary du for the given deployment.
Gets the entity manager.
Starts the management server.
Switch the given profile object to a class loader using the security manager if available.
Makes a proxy call with a null return value.
Checks if the current transaction is the same as this one.
Converts the last access time to a TTL.
Returns true if profile class is visible.
Returns the profile object valid in current transaction.
Gets a list of all the logger names that match the given regex.
Resets the logger levels.
Clear the loggers for the given name.
Add a new logger.
Remove a handler for a given logger.
Convert tracer name to log4j log4j format.
Synchronize level with log4j.
Assign a log4j level to the current value.
Resets the cache flags to the specified state.
Sends a notification to the trace manager of the given level.
Checks if the tracer name is valid.
Writes the given object out to the output stream.
Reads an object from the given input stream.
Adds a direct dependency for the given domain.
Gets the all dependencies.
Finds the class with the given name on the local filesystem.
Finds the URL of a resource on the classpath.
Searches for resources using the given name.
Create and register profile m.
Resume the transaction.
Returns the set of sbb IDs for the given component repository.
Returns the link to all the resources of each sbb component in the given repository.
This method initialises the slee state.
Shuts down the slee.
Checks if the transition between two states is valid.
Generate the usage parameter getter for a concrete class.
Sets the value of a field in the update query.
Builds the connection manager.
Inserts a new value for the specified field.
Runs the given query in the context of a transaction.
Parses a region request from the given string.
Gets the region in which this box is located.
Get the name of the type that should be mapped to.
Set the storage engine's storage engine's storage engine's storage engine's
Add a parent resource's parent resource's parent resource's parent resource's
Set the renderings for the component.
Add a list of renderings to this resource.
Merge multiple profiles into a single profile.
Create a new rotation request from the given string.
Parses a size request from the given string.
Initializes the connection to the Azkaban server.
Get a dump of the current pc.
Handles the pop box command from the device.
Handles the GPS2 device push command.
Clean temporary temp files.
Pulls a dump from the device to the device's pc.
Gets the crash log file name.
Detabifies the columns in the given width and replaces them with spaces with the given tab
Returns a text editor indent with the given number of spaces.
Gets a collection of HTML tokens.
Marks text as Markdown.
Escapes special characters in tag attributes.
Adds an exception to the list.
Closes the statement cache.
Finds the fully qualified class name of the parent type.
Writes the code to the given filer.
Demonstrates how to write a bit vector01 divider.
Appends the given bit vector to the given string array.
Reads the data from the specified input stream.
Gets a list of type from the path.
This method sets the instance of the KlovReport object.
Add a screen capture to the current step.
Sets the system info.
Create a Selector to select properties from a single row.
Create a Selector that matches rows that match the given property name and alias.
Extract validation annotation data.
Extracts all annotations for a property of a class and its superclass.
Finds the annotations of a property.
Returns the property descriptor for the given property name from the given type.
Converts a map to an object of a given type.
From map t.
Converts the given object to a map with the given ignore option set to true.
Converts an object to a map.
Get the values for the annotation.
Creates a composite validator for the given validation meta data.
lookup the list of validators and initialize them with meta data properties.
Lookup a validator in the registry.
Apply validation meta data properties to a validator.
Removes the specified property from the map if it exists.
Tick the time and update the internal variables.
Returns the size of this cache.
Hashes the given object using the SHA-256 algorithm.
Opens a database.
Puts multiple values into the database.
Removes the given set of keys from the database.
Searches the database for keys starting at the given index.
Load all by keys.
Closes the underlying database.
Performs a reduction on an array of doubles.
Reduces the long values in the array.
Calculates the variance of a set of values.
Returns the mean double value of the array.
Invokes a method from an object.
Performs a reduction on the elements of an array.
Gets the time in UTC as a string.
Checks if the given object matches any of the provided criteria.
criterion to check that a field value is not one of the supplied values.
Create a criteria from a list of objects.
Converts a JSON-encoded query to a Criteria.
Add an array of doubles to the end of the list.
Returns the maximum element of an array.
Returns the first N items of the given list.
Gets the last element of the given list.
Returns the last N elements of the given list.
Returns the least number of items from the given list.
Returns the minimum element of the given list.
Returns the minimum element of the array.
Process an array of maps.
Handles collection of maps.
Creates an instance of the class represented by the given map.
Returns the value associated with the given key.
Create a tool tip with the appropriate name space.
Adds a decoded hex to the buffer.
Process write operations from the queue.
Starts processing queue.
Support the subscript operator for a string at a specific index.
Gets a slc string from the specified string, starting at the specified index.
Test if any character in the given string.
Add a char to a String.
Add the given objects to a string.
Returns a compact version of the given string.
Splits a string into an array of Strings.
Splits a string by space.
Splits a string by its pipe.
Converts an array of Strings into a string array.
Converts a string to CamelCase.
Checks if the given string is inside of the given string.
under bar case.
Converts a number into its string representation.
Sorts the specified array of sorts.
Sort the given List according to the comparator.
Returns a comparator for this field set.
Get the list of child comparators for the specified fields.
Checks if the given value exists in the given map.
Checks if two ints are equal or die if not.
Checks that two arrays are the same.
Sums the values in an integer array.
Rounds the given number up to the nearest power of two.
Sorts the given List according to the given sortBy.
Sorts the given list according to the given sort-by.
Set the field value from map.
Converts the given object to a list.
Create the SQL for loading the version table.
Deep copy of list.
Checks if value1 has a field with specified name.
Checks if class has a field with name that is not a static field.
Checks if the class has a field with the given name.
Gets first comparable or primitive from class.
Gets the sortable field.
Compares two CacheEntry objects on the basis of their type.
Compare the time of this cache entry with the time of the given cache entry.
Sorts a list of sorts.
Sorts the given list according to the given sort by.
Sorts map entries of a given type in ascending order.
Sorts the values of the given map according to the component type.
Sorts the keys of the given map in ascending or ascending order.
Sorts the array using the given sort by.
Compares two field accessors in ascending order.
Compares two objects on the basis of nulls.
Gets a value from the cache by key.
Retrieves a value from the cache by key.
Evicts all entries from the cache if it is no longer needed.
dynamically init the min and max values if needed.
Allocate a buffer of the given size.
Determines if we should exit.
Reads the data from the input channel and writes it to the file.
If we are in a flush queue, we need to make sure that we are in a
Start the monitor.
Start the receiver thread.
Gets an object from the map.
Get the main query plan.
Filter the given group and add the results to the given results.
Tick the file's duration in milliseconds.
Synchronously writes to disk.
Cleans up the output stream if it is not null.
Writes the next buffer out to the output stream.
Writes the data to the output stream.
Initializes the output stream.
Puts all the values in the given map into the store.
Gets the byte array for the given key from the key cache.
Reads validation data from a property on a bean class.
Extracts the MetaData from a String.
Reads validator meta data.
Extracts validator meta data.
Extracts validator meta data from annotations.
Convert annotation data to validator meta data.
Splits the given string with the given character and returns the array of strings after splitting.
Splits the given string by white space.
Splits a string into an array of strings using the specified delimiters.
Removes the specified characters from the specified string using the specified delimiters.
Splits the given string by the specified delimiters, ignoring empty parts.
Parses a double from a buffer.
Parses an integer from a buffer.
Parses a long from a buffer.
Gets the property by path.
Gets the fields from object.
Returns the type of a property.
Injects a value into a property of an object.
Set class idx property value.
Gets the value of a collection property.
Gets the value of a property.
Gets the int value of a property.
Initializes the summary message.
Creates a message from a key and a list of arguments.
Creates a message with the given subject and actual args.
Converts a list of key-value pairs into an array of message objects.
Gets the subject.
Parses a JSON string into a Java object.
Send http request.
Delete a database.
Create a new DB connection.
Get a list of UUIDs from the given count.
Triggers a replication.
Reads the query and parses the result as a JSON object.
Sets whether this view is descending or ascending.
Synchronize all design documents in the database with the current one.
Get design document from db.
Gets all design docs from desk.
Gets a design document from a desk.
Saves the current state of the replicator into the database.
Finds a replicator document from the database.
Finds all the documents in the database.
Remove a replication document from the database.
Find by id.
Finds a list of objects from a JSON query.
Checks if a document exists for the given id.
Performs a bulk get operation on the given objects.
Sends an http put request to the server.
Execute a PUT against the given URI and an InputStream of the given content type.
Execute a POST request.
Execute a DELETE request against the given URI.
Check the status line of the response to make sure it is valid.
Sets the entity to the request.
Adds an attachment.
Gets the changes from the database.
Reads the next row from the file.
Converts a money value into a string.
Shuts down the system.
Writes the given byte array to the given servlet output stream.
Add tags to a metric.
Verifies that temporary tables should be created.
Gets the project ID for the given namespace.
Checks if the request is a query.
Sends the authentication request to the client.
Gets the verb.
Generate the subject access review.
Handles a request result.
Handles client request failure.
Initializes this instance with the given session.
Find all scheduled jobs.
Gets a list of bucket points from the given buckets using the given factory.
Ends the exchange by setting the response status code and the reason phrase.
Finds all data from the given bucket with the given timestamp and page size.
Creates a new histogram with buckets from [start, end).
Send a message.
Send one way.
Sends a message to a queue.
Scans through the given cursor for rows that match the given parameters.
Adds a file to the zip.
Replaces the text in the given file.
Builds the zip file.
Generates a set of metrics for a given component and product.
Fetches the given content.
Fetch order content.
Upload a new export transformation to the container.
Gets the file generation metrics for the given set of components.
Creates a random file in the specified parent directory.
Ends the tree.
Registers an instance of the given type in the given STGroup.
Registers a renderer for the given group and type.
Prepare the template for the given prototype.
Adds a new SIP domain object to the list of SIP domain objects.
Sets a property.
Adds a child object to the configuration.
Creates a supplier that reads files from a directory using the given prefix and suffix.
Copies the contents of the given input stream to the given output stream using the given
Parse the content of a file into a Document.
Parse the XML from the specified reader.
Gets the elements in the parent.
Gets the nodes in the parent element.
Gets the first child element with the specified names.
Gets named elements in.
Validates the given XML against the given XML schema.
The main method that can be used to invoke SIP from the given command line arguments.
Return the content as a content builder.
Load a content builder from a classpath resource.
Processes a zip file entry and applies the given processor to each entry.
Encodes the given string using ASCII encoding.
Sets the signature for this request.
Removes the white space from the data.
Sign the request with the given handler.
Sets the data for the upload in the given object.
Completes the multipart upload.
This method is invoked when a notification is received from the server.
Adds the notification state for an entry.
Returns true if the session has expired.
Get notification by id.
Gets the list of addressees for the given id.
Adds a new notification.
Gets the events by notification.
Return the event for a given notification id.
Gets the REST endpoint for a single notification.
Retrieves an entry by its id.
Get the authentication token for SSP client.
Get the total number of notification categories.
Adds a list of notification categories to the notification.
Fetches a user's profile.
Create a notification error notification response object.
Maps the response entity to a notification response.
Creates a notification entry from the given read context.
Attaches the completed notification actions to the given notification entry.
Normalize a link so it can be used in a Content Specification.
Returns the notification category for the user.
Returns the default notification source for the user.
This method is invoked when a notification is received from the peer.
Read a notification response from a file.
This method gets the ID of the portlet that the user is associated with.
Extracts the user ID from the response.
This method is invoked when the target notification is snoozed.
Get the attributes map.
Normalizes the vector p.
Checks to see if two box are contained within each other.
Finds the closest point on the line.
Computes the sign of the vector p.
Set the values of this object to the same values as the specified object.
Sets this quaternion to the given rotation.
Converts the 3D coordinates of the input matrix into the output matrix.
Converts the input data to the output quadrilateral.
Calculates the bounding box of a quadrilateral.
Bounds the polygon to the rectangle.
Returns the center of a quadrilateral.
Computes the average of all vertices in the given graph.
Calculates the convex hull.
Removes from the polygon only the vertices with an angle less than the given tolerance.
Calculate the average point error across the line and the target.
Computes the area between two points.
Returns true if the quadrilateral contains the given point.
Checks to see if a triangle contain a point.
Intersect two points.
Calculates the intersection of the two points.
Computes the intersection of two lines.
Computes the intersection between the two points.
Computes the intersection of two points.
Indicates whether the given ellipse is within the range of the given x and y coordinates.
Calculates the intersection area of two points.
Gets the value at the specified index.
Converts a F64 matrix to a quaternion.
Performs an SVD rotation on the x axis.
Sets the rotation matrix to the given angle in radians.
Performs an SVD rot on the Y component of a 3x3 matrix.
Performs an SVD rot on a 3x3 matrix.
Sets the rotation angle in radians.
Converts an EDBObject to a matrix.
Performs a rotation of the specified angle along the specified axis.
Sets the slope angle.
Convert a motion to a twist coordinate.
Sets the rotation and magnitude of the line between the initial and end.
Computes the translation and rotation of the object based on a where clause.
Decomposes a list of points and returns true if the points are sorted.
Solve a set of points on a plane.
Gets the length of a side from the given index.
Indicates if the point is inside a convex point.
Converts a conic general F64 image into a conic general one.
Converts a conic general F64 object into a conic general object.
Converts a conic general to a parabOffsets general.
Converts a parabRuntimeException into a conic general.
Divide p by v.
Converts the matrix in to a matrix out.
Converts a Double3D object to a Tuple3D object.
Sets the rotation vector of this quaternion to the given values.
Calculates the distant half of the distance between the given angA and angB
Checks if two lines intersect.
Checks if the given plane is contained in the output.
Checks if two lines intersect.
Computes the interpolation between two Se2F64 objects.
Extracts the quaternion from a Q matrix.
Computes the hull for a given array of input data.
Sets the identity of the given Se3F64 object to 0 with no motion.
Converts a Se3F64 object into a homogeneous object.
Converts a Se2F64 object into a homogeneous object.
Creates a new Se3F64 object from the given rotations.
Checks to see if two se3F64 instances are identical within a given tolerance.
Converts a lat long to a unit vector.
Checks to see if the given circle is a circle.
Returns the square of the circle's radius.
Computes the closest point to l0 and l1.
Return the closest point on the line to the given point.
Get the closest point on the plane.
Gets the closest point on the line.
Computes the closest point to a triangle.
Transform an Se2F64 object to a result.
Transform the se onto a set of points.
Returns true if the quadrilateral is within the given tolerance.
Calculates the angle between two points.
Converts an angle in radians to an angle in radians.
Converts a complex number to an angle in radians.
Converts a Bayesian product to a local Bayesian product.
Convert from src to ret.
Converts the coordinates of two points.
Converts a vector to a vector.
Convert an image to an image.
Converts one d to another.
Converts an image to a new one.
Converts the input matrix into the output matrix.
Converts the input data to the output data.
Converts the given Se3F64 plane to world coordinates.
Converts a point in the 3D space to a DTO.
Convert a plane in world space into a Se3F64 plane in world space.
Checks to see if t has the same dimension and tolerance.
Returns a copy of this matrix.
Computes the Euclidean norm of this matrix.
Computes the t.
Is the feature uncountable.
Checks to see if the parab variable is within the given tolerance.
Moves the location of the given point to the center of this point.
Computes the acute angle between lines.
Returns true if p has an infinite value.
Returns a random number of elements from the given center, with a standard deviation from the given
Converts the HComponent to E.
Subtracts two points.
Checks to see if two points are identical within a given tolerance.
Sets the location and size of this rectangle to be equal to the supplied values.
Convert an elliptical rotated F64 image into an elliptical quadratic
Computes the point at which the given ellipse is rotated.
Computes the angle of where the given ellipse is rotated.
Computes the tangent of an ellipse.
Returns true if there are no more lines in the line.
Gets the corner of a point.
Computes the Euclidean distance between the given points.
Computes the Euclidean distance between two points.
Computes the Euclidean distance between two points.
Calculates the Euclidean distance between the plane and the point.
Calculates the Euclidean distance between a line and a point.
Calculates the Euclidean distance between two segments.
Calculates the squared Euclidean distance between two segments.
Returns the Euclidean distance between a quadrilateral and a point.
Returns the squared Euclidean distance between the two quadrilateral.
Compute the Euclidean distance between two points.
Compute and return the squared Euclidean distance between two points.
Computes the distance from the line to the origin.
Computes the Euclidean distance between an ellipse and its parent.
Computes the Euclidean distance between an ellipse and another.
Add a node to the path.
Calculates the closest point from the line to the point p.
Gets the closest point of an ellipse.
Computes the linear equation for a given set of polynomials.
Creates a random number in the given range.
Gets the canonical version of the given data.
Returns true if the two points are identical within a specific tolerance.
Normalizes a vector in place.
Creates a matrix with the specified elements set to null.
Converts a 3D double matrix to a 3D double matrix.
Computes the Euclidean distance between two points.
Sets the ellipse in degrees.
Normalizes the values in this quaternion.
Computes the square of a triangle from three points.
Returns the distance from the triangle to the quadrilateral.
Calculates the simple area of a polygon.
Computes the mean for an array.
Sorts a list of points in ascending order.
Computes the normal of a list of points.
Checks to see if a polygon is convex.
Multiplies this vector by the given scalar.
Gets the maximum absolute value.
Computes the Euclidean distance between the given points.
Returns the Euclidean distance between the given points.
Returns a random number of points along the plane.
Returns a list of random points.
Returns a list of objects where each entry is a gaussian distribution from 0 to num.
Calculates mean of points.
Calculates mean of points in a list of points.
Invalidates all JWT tokens from cache.
Invalidates all JWT tokens that match the given predicate.
Combines several collections into a set.
Get the feature set for the dropins on the server.
Gets the config dropins features.
Get the features that should be used in the parsed xml files.
Parse an include node.
Parse the feature manager node.
Downloads the JSONs for the specified product.
Get a set of OpenEngSB feature names from a set of JSON files.
Checks to see if there are only open liberty features that need to be installed.
Checks if the reference collection contains all elements of the target collection ignoring case.
Get the next product version from the version string.
Extracts the symbolic name of the jar.
Gets the jar of the install kernel that is used to install the map files.
Checks if is replacement jar.
Extracts the version from the install map prefix.
Compare two version strings.
Get the product info from the specified install directory and action.
Checks if the given artifact is a Spring Boot Uber jar.
Gets the value of an arquillian property.
Determines if a file is working in the given environment.
Moves the position of the tortoise to the center of the specified length.
Compare two object for equality.
Load an integer from a string.
Returns an array of tortoise objects that can be used to throw an exception.
Verifies that the current state of an image is valid.
Swaps all the blank cells in the given array with the given value.
Calculates and returns the distance from this cell to the goal cell.
Prints a formatted message to the standard output stream.
Prints a formatted message to the standard output stream.
Make a random array with the given number of elements.
Variable time stamp.
Returns a uniform random number between 0 and 1.
Returns a uniform random number between 0 and 1.
Calculates the number of non-zero entries for a given lambda.
Computes the discrete version of the given array of doubles.
Capitalizes the first character of the specified word.
Un capitalize the first character of the given word.
Fixes the path.
Converts criteria join to string.
Gets the token sentence.
Extracts the token from the cookie list and stores it in the response context.
Extracts the auth token from cookie list.
Registers the given injector with the given environment.
Recursively gets all role permissions for the given parent and role group.
Adds a projection with the given alias to the end of the list.
Converts a JobInfo to a JobDetail.
Convert a trigger info to a trigger.
This method sets the interval values in the given trigger info.
Sets the start and end time of the given trigger info.
Sends an item to the e-mail.
Writes the content to the output stream.
Initializes the scheduler with the given properties.
Return a sorted collection of all the fields of the given class.
Returns the field map for the given class.
Configure encryptor with given configuration.
Generate the attributes hash.
Generates a token string.
Sends an item to the e-mail server.
Generates a new strong password for the specified user.
Gets the user with the specified name.
Hashes the given password with the given account name.
Verifies that the given account name matches the regular expression.
Commits the transaction if the transaction is active.
Marks the transaction as failed.
Starts the transaction.
Checks if the access token is authorized.
Parses the given field as a Date.
Gets the response.
Applies the equals operator to the given attribute name and value.
Applies the logical NOT equals operator to the given attribute name and value.
Create a "less than" restriction.
Applies the less than or equals to the given value.
Create a restriction that is greater than the given value.
Applies the greater than or equals to the given value.
Constructs an ORC restriction.
Create a "In" restriction.
Returns a new namespace manager with the given namespace and href.
Create a new resource representation with content.
Sets the relationship between the resource and this node.
Returns a resource representation with the given value.
Replaces the value of this resource with the value of the given namespace.
Checks if the given byte array can be decoded.
Encodes a string into a byte array.
Checks if two reader are equal.
Create file if it does not already exist.
Checks if any file in the given files has been modified since the current time.
Gets the base name of the given file.
Add padding to the block.
Gets the short name of a class.
Gets the set of all super types of a class and any of its super interfaces.
Verifies that the given password matches the given hash.
Reads the contents of the system input stream and returns the result as a string.
Appends a byte to the buffer.
Append bytes to the end of the buffer.
Returns a deep copy of the given array.
Computes the product of this fraction with another fraction.
Subtract another fraction.
Multiply this fraction by another fraction.
Get the result of f divided by this.
Get the maximum of the set of long values.
Get the smallest of the set of long values.
Throws IllegalArgumentException with the given message if the given condition is false.
Fetch the Meteo data for a given location.
Fetch the Meteo data for a given location.
Fetches the Meteo data for a given location.
Returns a list of meteo extras corresponding to the given now date.
Finds the closest forecast for the given date.
Fetch meteo content by query.
Returns a new meteo extras long term.
Create a long term forecast for the location.
Parses the given coordinates as a string and returns the corresponding location object.
Fetch meteo content.
Return the name of the region symbol to be used as the region's ID.
Return the best beaufort level for the given forecast point.
Create a new URI from a string.
Indicates if the current date is a known sun.
Obtains a point forecast for the given zoned date.
Gets the best fit period forecast.
Fetch content for a given longitude and latitude.
Fetch content from Meteo by longitude and latitude.
Updates the db.
Calls a method on the given object.
Acquires an object from the given data source.
Gets a referenced object from the given class and reference.
Gets the wrapped object.
Reads the configuration from the service path.
Determines if a substitutor is enabled in the given bootstrap configuration.
Create class iterator.
Attempts to find a decoder for the given bootstrap.
Get a list of service implementations that implement the supplied interface.
Get the module for the implemented interface.
Acquires an input stream from the given source.
Gets the size of the data in bytes from the given source.
Gets the wrapped data.
Gets the component at the specified index.
Gets the prefix.
Returns true if the type is'plain' or'behind'.
Runs the hsrePattern with the given set of execFlags.
Find the first column of the tree.
Checks if there is a subset of the given subexpression.
Checks whether a subexpression is disjoint from a set of subexpression's elements
Clones the given states from the old state to the new state.
Adds the right-most subre to the left or right-most subre.
Marks the subre or null if no subre exists.
Return the number of NFA for a subre.
Parse a subre of the given type.
Deltraverse a state from left to right.
Adds a nonword to the nfa.
Performs a single word clone.
Scans the next two numbers up to and including the first digit.
Parse a bracket.
Scans the plain part of the regex.
Checks if there is a new LLA con in the given state.
Processes a single state.
Do the vectors.
Gets the color for a given character.
Get the color of this line as a short short.
Subrange a range from a given state to a new state.
color depends on the state of the arc.
Set the colorchain for an arc.
Un colorchain a given arc.
Dumps the names of the colors.
Starts parsing rules.
Gets the lexnest set of variables for this parse.
Get the color for a given codepoint.
Set the initial state of the manager.
Returns the last known state.
Returns a set containing the classes of the specified character.
Gets a class for a given name.
Performs an SVD algorithm on the state machine.
Adds a new state with the given flag.
Move all the states from old state to new state.
Move allins from oldState to newState.
Copyins from old state to new state.
Copy all outputs from old state to new state.
Free the state for a given state.
Begins a new state.
Create an arc with the given start state and end state.
Copies the empty chain from an empty state to an empty state.
The state of this instance is the same as the parent instance.
Dumps the NFA information.
Dumps the state of an arc.
Interprets a state and appends the result to the given string builder.
Encodes an arc into an empty string.
Processes the input and computes the optimize result.
Analyzes the arc chain.
Combine an arc with an arc.
Removes all states from the pre state and the next state from the post state.
Marks an empty chain as reachable from a given okay state.
Mark canreach from an okay state to a mark.
Assumes that all of the states are empty, i.e.
Marks the given arc as empty.
Returns the rule parameters.
Get the rule interpreter plugins.
Get report plugins.
Gets the rule selection.
Executes the specified command line arguments.
Get the error message for the given execution exception.
Gathers standard options.
Gathers the tasks options from the task factory.
Gathers task names from a task factory.
Interprets the command line.
Gets the command line from the given arguments.
Executes the given task using the given command line and plugin repository.
Reads properties from the given command line.
Print the usage message for the given options.
Gets the home directory from the system environment.
Creates a class loader that can be used to load the plugins.
Returns the set of cell ids that contain the given coordinates.
Returns the set of cell ids intersecting the given min longitude and max latitude.
Returns the URI for the given HTTP method and target.
Adds a new route to the router.
Returns the total number of routes across all segments.
Add a new route to the routing table.
Add a route to the routing table.
Add route to last routing.
Determines if the request path tokens match at least one of the requestPathTokens's
Returns a criterion to check if the given property is equal to the given value.
Gets the name of the file to store the given data.
Compare two folders.
Compare two entries.
Compare two bookmark objects.
Set the servlet class last modified time.
Returns a list of dependants defined in this context.
Finds the class with the given name.
Parses the authorization header.
Get instance of function mapper.
Maps a Java function to a Java method.
Gets the map for function.
Resolves a function for the given prefix and local name.
Sets the value of this array as a character array.
Resolve the value of the given variable.
Parses a node.xml from the given file name.
Parse an XML file.
Parse directives from a tag file.
Create the JSP compiler.
Get a resource as a stream.
Calculates the last modification timestamp of the channel.
Finds the class loaders that are available in the current class loader.
Checks if the given classloader is a parent of this classloader.
Starts loading the given resource.
Reads the stream header.
Creates a pagination result from the given full data set.
Converts a string to a metadata key.
Fill the requirements list.
Get the TagFileInfo for a given short name.
Parses an implicit TLD from the given URL.
Gets the checksum for the specified file.
Gets the size of a file.
Validates the channel name.
Seeks to the specified block.
Locates a block by its position.
Gets a list of maven artifacts from the supplied supplier.
Updates the state of the optState and the internal state and the internal state.
Computes the price of one byte.
Computes the price of a long match.
Calculates the normal match price.
Throws an expected byte exception.
Throws an exception for invalid byte.
Scan for TLDs.
Scans for TLDs from an input stream.
Add a JSP servlet wrapper.
Get the parent class loader.
Sets the bytecode for a given name.
Gets the bytecode bytecode of a given name.
Saves the bytecode of a class to a file.
Check if there are any JSP tag files that need to be compiled.
Initialize the classpath to be used by the servlet invocation.
Starts the background thread.
Stops the current thread.
Starts the server.
Finds a channel by its name.
Finds a channel by its name.
Updates the deploy group cache.
Copy bytes from the input stream to the output stream.
Parses the given URL and returns a Node.
Parses the given reader and returns the attributes.
Adds the list of files to the include list.
Parses the body of the page.
Adds an attribute.
Add the node as child of this node.
Returns an iterator of all attribute names found in the attributes map.
Returns an iterator over the children of this node.
Finds all children with a given name.
Converts the Maven coordinates to the base Maven coordinates.
Finds the alias for a variable.
Set up a thread to read and write the data and streams.
Unsets the current thread.
Finds a stream for the wrapped print stream.
Write an optional field to the writer.
Writes the given field name and value to the given writer.
Add an element to a parent element.
Adds an element to the parent with the specified name.
Writes the current state of the buffer to the given output stream.
Sets the output writer.
Allocate the buffer.
Map an XML page to a node's data source and ss.
Gets the same parent state for the given key.
Registers a new model.
Processes a stream with the given key using the given consumer.
Monitor a job.
Check if the request is authenticated.
Finishes writing and closes the output stream.
Creates a new Gson object.
Encodes the Huffman tree into a Huffman tree.
Computes the union of provided meta data and extracted meta data.
Get the exception in the request.
Check the extension of a checksum.
Finishes the writing process.
Get the exception that caused this request.
Evaluates an EL expression.
This method creates a unique prefix from the OSGi properties.
Checks if a file is an XML file.
Parses a tag file directive list.
Loads the tag file from the given parent page info.
Remove all generated proto files with the given name.
Set the URI root.
Scans a directory tree for files.
Locates the root directory of a file.
Moves the cursor to the next available position in the chain.
Checks if the next characters in the string match the regular expression.
Checks if the given string starts with any of the specified spaces followed by any of the
Skips characters until the end of the limit string.
Skip forward until the end of the string is reached.
Skips over the first space on the end of line and returns the tag.
Parses the next token.
Pops a file from the head of the file list.
Make the coordinates unclassified.
Filter ids list.
Gets missing ids.
Sets the schema resource prefix.
Sets the DTD resource prefix.
Converts a node from the given parent to the given node.
Merges the errors of a bindingResult and all of its children into the result.
Initializes the binder with the methods that are annotated with the annotation.
Scan for channel aspect informations.
Removes the qualifier from the path.
Invokes the tag plugin for the given node.
Get a byte array from the byte cache, fill with zeros if requested.
Returns an integer array with the specified size from this set.
Creates an AetherResult from a collection of artifact results.
Gets the resource as stream.
Get the validation messages for the specified page.
Pushes a new stream.
Gets the encoding of a file.
Report a fatal error.
Gets the real path of the resource.
Gets the resource at the given path.
Gets the resource as stream.
Get the paths of all files and sub-directories of a given path.
Log a message and exception.
Adds a filter.
Calculates the size of a buffer for a given dictSize.
Calculates the memory usage in bytes of a given dictSize.
Set a preset dict.
Moves the window to the top of the screen.
Fill the current window with bytes from the given buffer.
Process pending bytes.
Return the length of the next match.
Computes the length of a match in the buffer.
Verify that the length of this instance is the same as the length of the given instance.
Moves the cursor to the given position in the buffer.
Recycle the response.
Flushes the buffer to the underlying stream.
Clears the buffer.
Flushes the output stream.
Closes the response stream.
Write a string to the buffer.
Throws an exception with the given error report.
Make a key from the given meta data.
Generates the class for the servlet.
Compile the class.
Initializes the Java compiler.
Checks to see if the system jar is included in the web.xml.
Escapes a character so that it can be used in a script.
This method generates the declarations for a page.
Compile the tag handler pool list.
This method will generate the XML prolog for the specified page.
Generate the common postamble.
This method will generate the postamble of the node.
Writes the given Node.Nodes page to the given servlet writer.
Generate the tag handler attributes.
Reads the properties from the given stream.
Export a channel to a zip file.
Checks that the xml view is valid.
Gets the specified JSP tag handler.
Parse the given expression.
Determines which property to select.
Checks if the given URI is a valid JSP page.
Print a set of comments.
Print the specified string in the current line.
Print a string as a line break.
Print a multiln.
Get the expression in XML.
Checks that the scope attribute is valid.
Escapes a string so that it is valid XML.
Validate expressions.
Get the name of the tag handler class from the given path.
Generates a Java class name from a given path.
Splits a string into a list of strings using the given path separator.
Makes a valid Java identifier from the given Java identifier.
Converts the specified character to an array of characters.
Checks if the given key is a known key.
Adds a property to a map.
Adds a modifier to a string.
Returns a sorted set of metadata for a given key and namespace.
Runs the read-write query on all users in the system.
Gets the basename of a file name.
Put a new value into cache.
Loads the metadata for a locator from the database.
Build a collection of metrics from a payload.
Resolve a number.
Writes the object to the output stream.
Determines the TTL for a given locator and granularity.
Creates the prepared statements.
Track delayed metrics for the given tenant.
Track delayed aggregated metrics tenant.
Reads an unversioned double or long from the stream.
Puts an unversioned double or long into the given output stream.
Returns an immutable map of all the properties in this instance.
Create the container in the blob store.
Schedules eligible slots for rollup.
Clears the slot from running.
Registers a listener for a given event.
Register a listener for a single event.
Remove an event from the E emitter.
Emit a single event.
Returns a list of listeners for the given event.
Gets the remote name.
Appends a rollup to the end of the file.
Gets the timestamp from the given file name.
Starts the server.
Gets the rollup computer of the given rollup type.
Gets the instance of this class from the configuration.
Puts a new value into the TTL map.
Computes the maximums.
Formats the response headers with the given maximums and headers.
Formats the results of the given outputs.
Register the required metrics.
Set the name of the thread pool to be used.
Add the given metric index with the given doc count.
Get the set of complete metric names from metricIndexMap.
Gets the tokens that match the given locator.
Sends a put request to the rollup server for the specified locator.
Determines if the requested granularity is less than or equal to the given points.
Set the current server time.
Gets a list of unique host names in Cassandra.
Gets the maximum number of Cassandra connections per host.
Returns an iterator over the metric column families in this set.
Inserts a collection of metrics.
Inserts the given metrics at the given granularity.
Return a set of locators for the given rollup context.
Gets the regex to use for the current and next level of the query.
Starts the file executor.
Stops the upload process.
Determines if the specified locator is currently in a batch layer.
Determines if the specified locator is currently in a discovery layer.
Determines if the specified locator is currently in token discovery layer.
Determines whether the specified locator is delayed for a particular slot.
Set the locator for a new slot.
This method maps the slot ranges of the given range to the slot ranges of the given range
Return an iterator over the ranges of the given interval.
Insert a set of metrics.
Insert a collection of metrics into the given column family.
Determines if the given metric has been delayed or not.
Gets a bound statement for the given metric if it is delayed.
Gets metadata values.
Checks if the Content-Type header is valid.
Checks if the accept header is valid.
Indexes a batch of indices.
Determines if the data is valid.
Runs the check.
Gets a new instance of the extractor based on the configuration.
Checks if the OS name and version prefix match the OS name and version prefix.
Starts the extract process.
Stops the shut down process.
Creates a default instance of SignalingParams.
Adds the Ice servers to the list of Ice servers to be searched for.
Adds an IPE servers to the list of IPE servers to try.
Dispatches a message to the pc.
Dispatches a message to all peers.
Gets the value of the weitereAdresse property.
Gets the value of the user defined simplefield property.
Gets the value of the userDefinedAnyfield property.
Sets the api suchfelder.
Gets the value of the multimedia anhang property.
Get the status of the error.
Get the status of the error.
Get the status of the document.
Get the importmodus.
Gets the adressdruck property.
Liefert die Begebenen Waehrung typ.
Gets the BodenCol typ of the BodenCol term.
Sets the value of the region property.
Sets the value of the area property.
Sets the value of the address property.
Sets the value of the description property.
Sets the value of the rentCollectionPeriod property.
Sets the value of the furnished property.
Sets the value of the phone1 property.
Sets the phone number.
Sets the value of the contact property.
Sets the phone number.
set the value of the mainEmail property.
Sets the value of the ccEmail property.
Sets the value of the externalId property.
Sets the value of the user agent.
Sets the value of the epart property.
Sets the value of the Jah Bang property.
Sets the value of the gebaaaart property.
Sets the value of the Buero typ property.
Checks if the given value is numeric.
Sets the value of the gebiete property.
Sets the value of the gruppe property.
Sets the value of the user agent.
Gets the value of the property property property property property.
Set the stand for the status.
Gets the value of the user defined extend property.
Sets the value of thezeiteinaaa property.
Gets the value of the zimmer property.
Gets the value of the haus property.
Gets the value of the budes property.
Gets the value of the gastgewerbe property.
Gets the value of the Lambert und forstwirts Aud
Gets the value of thesonstige property.
Gets the value of the zin VisiteObjekt property.
Gets the value of the sourceFile property.
Sets the value of the umfang property.
Sets the value of the wCtxungtyp property.
Determines if the given country is a known country.
Determines if the specified country code is equal to thespecified country code.
Determines if the given country is supported by this library.
This method returns the ISO 639 country code.
Get the name of the country in the requested language.
Tries to find a name for the given country and language.
Gets the value of the anbieter property.
Sets the value of the category property.
Gets the value of the pdf property.
Sets the value of the aktionart property.
Sets the real_items property of the container.
Sets the value of the pacht property.
Upgrades an open immo document from the previous version to the new version.
Gets the value of the content property.
Gets the field names.
Set the value of the blick property.
Sets the value of the pauschalmiete property.
Sets the value of the monatsmiete property.
Gets the enum value of the park Betragz identifier.
Liefert den Wert in einen Hebeanlage typ fuer den
Sets the value of the zustand art property.
Gets the value of the feld property.
Dump the current state of the table to a writer.
Returns the value of the field at the given position, or the given default value if the
Print the table.
Set the value of a specific field.
Sets the value of this property.
Sets the value of the horizontalustyp property.
Gets the value of the energiepass property.
Sets the value of the kcommunity property.
Sets the value of the grundst typ property.
Sets the value of the geschl attr property.
Sets the value of the hCtxType property.
Gets the wiederholungstermin.
Gets the value of the teilungsversteVarung property.
Upgrades from the previous version of the document to the new version of the document.
Gets the value of the bezugt property.
Gets the value of the wunQName property.
Sets the value of the art property.
Sets the value of the modus property.
Gets the value of the emailsonstige property.
Gets the value of thetelsonstige property.
Sets the value of the handel handel typ property.
Sets the value of the api suchfeld1 property.
Sets the value of the api suchfeld2 property.
Sets the value of the api suchfeld3 property.
Gets the value of the row property.
Sets the value of the distanzzuSport property.
Gets the value of the anhang property.
Returns the type of objectekt.
Gets the objekt zustand typ.
Returns the HAusKCartie object that is used to visualize the HAus
Gets the value of the ausstattungsqualitaet.
Gets the value of the vermarktungsart property.
Gets the value of the interessent property.
Sets the value of the wert property.
Setter for the value of the aarameter = "aarameter"
Sets the value of the bauerwartungsland property.
Sets the value of the bootsstaende property.
Sets the BuInformation in XML.
Sets the Calculations for the output.
Sets the value of the doppelInformation property.
Sets the value of the EW-AMilienInformation property.
Sets the einzel handel gross.
Sets the einzel handel klein.
Sets the value of the garCollapsible property.
Sets the value of the garten property.
Sets the value of the gastronomie property.
Sets the value of the gewerbe property.
Set the value of the hotel property.
Sets the industrie.
Sets the value of the keine bebauung property.
Sets the value of the kleingewerbe property.
Set the value of theager property.
Sets the value of the mehEngSBType property.
Sets the Darzung wird der uebergebene Wert.
Sets the park identified by the value.
Sets the value of the produktion property.
Sets the value of the reihenInformation property.
Sets the value of the stellplaetze property.
Sets the v."Date" value for the current date and time.
Sets the JCRD.
Sets the value of the anbieter property.
Gets the value of the wAnnotung property.
Gets the value of the grundstueck property.
Gets the value of the einzel handel property.
Gets the value of the hInfoListLagerSpec property.
Gets the value of the parken property.
Gets the value of the freizeitimText field.
Gets the value of the objektart zusatz property.
Gets the value of the stellarshzart property.
Sets the value of the max dauer property.
Gets the value of the feature property.
Sets the value of the zimertyp property.
Upgrades an open immo document to the previous version.
Sets the value of the KeineEngSBUnit property.
Sets the value of the erdwaerme property.
Sets the value of the solarheizung property.
Sets the value of the pelletheizung property.
Sets the value of this object.
Set the value of the oel property.
Sets the value of the fernwaerme property.
Sets the value of the strom property.
Sets the value of the KHINLE property.
Generates a random string with the specified length.
Returns a random letters within the specified length.
Returns a random numeric string.
Liefert die Kalender-Objekt in die Kalender-Obj
Sets the value of the benutTimestamp property.
Sets the value of the objekte property.
Gets the value of the feed property.
Sets the value of the moebliert.
Gets the value of the serviceleistungen property.
Sets the subAdministrativeArea.
Set the value of the centroid property.
Sets the locality of the location.
Downgrades from the open immo document to the previous version.
Upgrades an open immo document to the previous version.
Sets the value of the Lambert typ property.
Gets the value of the field property.
Upgrades an open immo document to the previous version.
Gets the value of the ad property.
Sets the value of the gastgew typ property.
Sets the value of the Ezart property.
Gets the daten verkKindKindKindKindKindKindKindKindKindKindKind
Gets the Ja nein vereinbarung typ.
Gets the value of the image property.
Sets the value of the priceType property.
Sets the value of the new development availability property.
Sets the directions property.
Sets the value of the co2 rating property.
Sets the value of the rating property.
Sets the value of the crawl details property.
Sets the value of the propertyStatus property.
Sets the value of this ad type.
Sets the attribute value of the be Updatesetions of the current instance.
Upgrades from the previous open immo version to the new open immo version.
Set the parken typ.
Sets the value of the alter attribute.
Sets the value of the freizeit typ property.
Sets thetelefonart value.
Sets the value of the emailart property.
Sets the value of the overseasVar property.
Sets the value of the overseas rental property.
Create a user defined simplefield element.
Gets the value of the fehler property.
Sets the value of the erCancellationToken property.
Gets the value of the stpsonstige property.
Gets the value of this object.
Sets the minimum dauer.
Sets the value of the zins typ property.
Gets the value of the photo property.
Sets the metadata for the feed.
Sets the value of the projects property.
Sets the feed properties.
This method upgrade the document from the previous version.
Gets the value of the imLimitilie property.
Gets the value of the objekt property.
Returns the value of the fehlerliste property.
Gets the value of the status property.
Sets thesonstige typ.
Sets the value of the distanzu property.
Gets the value of the distanText property.
Gets the value of the distanGrammarSport property.
Checks if the given exception is compatible with the given declared exceptions.
Sets the namespace bindings.
Binds the given prefix to the given namespace uri.
Removes a namespace binding.
Checks if the given string has an opening tag.
Consumes tokens that start with a comment.
Reads the next token from the line.
Returns the index of a comment token, or -1 if none found.
Initialize logging from a location.
Binds the given prefix to the namespace context and sets the changed flag to true.
Adds an iterator to the end of the iterator list.
Adds an option.
Adds a string option.
Adds an integer option.
Adds a long option.
Adds a double option.
Adds a boolean option.
Parse the command line arguments.
Returns a new instance of the class.
Call after access.
Set the target object.
Prepare the target class for method invocation.
Finds a matching method for the target method and arguments.
Converts an integer into an unsigned string.
Serializes an object to a byte array.
Deserializes an object from a byte array.
Get the child element by tag name.
Get the text value of the child element with the given tag name.
Get the child elements of the given element.
Checks if the node's name matches the desired name.
Checks if the node name matches the desired names.
Set the length of a string.
Record the release state of the given handle with the given listener if debug logging is enabled.
Adds a new release listener entry to the given reference.
Check if we should keep the monitoring thread alive.
Calculates the JSON for a given mobile number.
Starts the prefix mapping.
Ends a prefix mapping.
Adds the given callback to this future.
Parse the jar and return the tree.
Gets the text color of the specified item.
Sets the values for this item.
helper method to calculate the color for the item.
Sets the text size of the TextView.
Gets the x location in the view bounds.
Read the intro intro from the classpath and return it as a string.
Get the list of available keyword names.
Get the command line arguments for the given keyword.
Get the documentation for a given keyword.
Starts the remote server.
Stop the server and wait for it to stop.
Starts the server.
Convert properties from a file to a JSON string.
Converts properties from a file to a JSON string.
Converts the given input stream to a JSON string.
Converts a properties object to a JSON string.
Converts a map of properties into a JSON string.
Converts a map of properties into a JSON string.
Converts properties from a map of values to a map of key-value pairs.
Converts properties to JSON.
Get the radius of the shadow, which is visualized by the circle.
Returns a builder for the ocspFetcher contained in the configuration.
Gets the intermediate certificate of the given certificate.
Executes the plugin.
Determines if the directory containing Markdown files should be processed.
Substitutes the variables in the given template.
Gets the title.
Adds the title to the HTML file.
Replaces the variables in the initial content with the new values from the variables map.
Updates the relative paths in the HTML.
Copies files from a directory to another directory.
Check the path to make sure it is valid.
Wraps the content of the slider.
Fade up the device for the specified duration.
Fade this out out to the top of the screen.
Calculate the percentage of the view in pixels.
Check if the width of the view overlap the other views.
Gets the launch intent.
Launches the activity.
Get a list of fact sheets.
Downloads the file from the given response.
Builds the HTTP client.
Create an access control entity.
Update a data model.
Create a new full export.
Specify the host to connect to.
Specify the client credentials to be used to connect to the API.
Process a graph ql file.
Get a group's bookmark list.
Adds a permissions to a named graph.
Writes the permissions for a named graph.
Define rulesets to be applied to the data set.
Closes the channel and releases any resources.
Executes a select query using the specified parameters.
Create a MarkLogic dataset graph.
Limit the number of threads in the process.
Resizes the geometry to the specified width and height.
Rotates the specified degrees clockwise with the specified rotation annotation.
Sets the gravity value.
Strip any profiles from the command line.
Set a style, size and color to a given values.
Adds an image to the list.
Adds an image to the command line.
Parses the given target object and returns a list of String arguments.
Print the usage information for the given target object.
Extracts the time unit from the given string.
Parses the given target object using the given properties.
Execute the given URL and return the result.
Executes the given file as XML.
Interprets the given file as a list of actions.
Sorts by size.
Renders the given template text.
Get the XML file of the slide with the given slide number.
Determines if the given mouse event is within the screen range.
Check if the given element overlap vertically with the given one.
Executes an outbound operation.
Executes the outbound operation.
Finds or creates a file with the given name, using the given options.
Gets or creates the temporary directory.
Returns a log value map for the given key-value pairs.
Log a message object at the TRACE level.
Logs a message and stack trace if DEBUG logging is enabledor a formatted message and exception description
Log a message at the DEBUG level.
Logs a message and stack trace if DEBUG logging is enabledor a formatted message and exception description
Log a message at the INFO level.
Logs a message and stack trace if INFO logging is enabledor a formatted message and exception description
Record an info event with the specified message, data key1 datakey2 and datavalue
Log a message at the WARN level.
Logs a warning event.
Log a message at the error level.
Logs a message and stack trace if ERROR logging is enabledor a formatted message and exception description
Adds the to context line and method.
Starts the steno wrapper.
Write key value pairs.
Serializes the throwable proxy to JSON.
Returns a log representation of the duration and last log time.
Get the caller data for the given logging event.
Create a new database in Hive.
Checks if the array position is valid.
Parses the save attribute for the given cell and returns it as a string.
Save the data in the context.
Refresh the sheet row from the given context.
Parse the save attr string.
Gets the save attr list from row.
Gets the save attr from list.
Sets the save objects in the hidden column of the given row.
Sets the save attrs for the sheet.
Sets the save attributes of a row.
Prepare context and attrs for cell.
Formats a double as a number.
Put shift attrs.
Set the workbook to be displayed.
Get the XSSF wrapper.
Gets the formula evaluator.
Re calc the max col counts.
Loads a web sheet from an input stream.
Loads a web sheet using the given data context.
Loads a work sheet by tab name.
Exports the file to a new file.
Save the current form data.
Submits the form for execution.
Populates the given component with the data from the event.
Gets the current sheet configuration.
Reads an encrypted document from the stream.
Gets the locale for the given component.
Gets the picture content of the current phase.
Gets the cell helper.
This method returns the parent node of this node, or creates a new one if this node
Gets the validation handler.
Gets the chart helper.
Takes an array of ptgs and converts them into a new array.
Converts a ptg instance into a new array of ptgs.
Convert the given ptg array for the watch list.
Returns a new array containing a single ptg instance with the given formula changed.
Assemble rows list from rows mapping.
Assemble rows list from rows mapping.
Builds a dynamic row for the given ptg base.
Get an automatic fill color for a given plot.
Get the x geolatte color from the given sp pr.
Finds an automatic fill color for the given themes table.
Gets the X component of the given CTS color and table.
Extract the X color from the passed color.
Gets the X for a given index in a given theme.
Convert an XSSF clr color to a clr color.
Convert an XSSF color to a short array.
Gets the borrowed color from cell.
Finds the component name from the class of the given component.
Populates the default control map for the given component.
Checks if the given object has a method with the given name.
Sets the value of a property on an object.
Gets the value of an object property.
Sets the custom control attributes for the specified cell.
Returns a list of cell validate attributes for the specified cell.
Sets up a faces cell picture and cell id based on the parent sheet's parent cell
Sets up the appropriate faces for the cell.
Sets the value of the pictureId property of the given faces cell.
Initializes the XSSFMap from the parent XSSF instance.
Get the title of the chart.
Sets the style of a series in the chart.
Creates a JCalendar3D instance for the given chart data.
Setup the style of the bar.
Initializes the XSSF chart elements.
Gets the chart ID from parent.
This method initialises the chart using the supplied XSSF instance.
Generates a single XSSF chart.
Transform a collection object into a collection object.
Gets the full name from the given row.
Recursively builds the upper-level formula.
Sets up an upper level formula based on the supplied information.
Adds a new cell to the shift formula.
Gathers rows mapping by full name.
Change index number in shift map.
Change the upper level of the final length.
Change the index number of a cell in a hidden column.
Sets the full name in the hidden column of the given row.
Gets the original row number in the hidden column.
Sets the original row number in the hidden column.
Find parent rows mapping from shift map.
Find child row mapping from shift map.
Finds an item in a collection.
This method builds the current config range from the source config range and the insert position.
Checks if the row at the given row index is a static row.
Checks if a row is a static row reference.
Replace expression with cell value.
Index the merged region of the sheet.
Returns a list of the cells in the given sheet that need to be skipped.
Adds the skip cell to list in the region.
Builds the sheet comment based on the tieCommandAliasList.
Builds and inserts a comment based on the given tieCommandAliasList.
Builds the sheet configuration.
Gets the sheet configuration.
Builds the form command from the sheet configuration.
Verify if the last cell of the row has a non blank cell.
Builds the sheet.
Checks and repairs the last row.
Builds the command list from the sheet comment.
Sets the parent for a child command.
Checks if each command is in the commandList.
Match command to sheet config form.
Copy the template for tie commands.
Builds the command list.
Process a line that represents a method.
Process a command line.
This method moves the comment from the cell to the map.
Creates a new config command instance.
Build a map of attributes from command line.
Gets the sheet configuration from the config command.
Sets the footer of the sheet.
Sets the body of the sheet.
Sets the header of the sheet.
Delete a row from the sheet.
Removes the ranges from the shift map.
Searches the specified range of the sheet for a full name list.
Gets each command from command index map for the command parts name.
Insert empty object in context.
Deletes an object from the data context.
Prepare collection data in context int.
Index all commands in the given source config range.
Check if a row is allowed to be added.
Inserts each template in the sourceConfigRange at the given index.
Evaluates the given value using the given context and engine.
Evaluates the user's formula.
Checks if the given string is a user formula.
Creates a new comment for the specified cell using the supplied comment map.
Evaluates a boolean expression.
Removes rows from the sheet starting from rowIndexStart and ending from rowIndexEnd.
Removes a single row from the sheet.
Removes the cached cell for the row at rowIndexStart from the sheet.
Removes rows from the specified body rows.
Loads the picture.
Loads the chart.
Assembles a new value.
Gets the cell value with the format.
Gets the cell value without the format.
Gets the cell string value with type.
Gets the cell string with number type.
Sets the value of a cell.
Sets the cell value as a String.
Sets the cell value in the given cell to the given value.
Sets the value of the cell c to the given date.
Sets the cell value as a numeric.
Copies rows from srcRowStart to destRow.
Copies a single row from the source sheet to the destination sheet.
Copies a cell from the source sheet to the destination sheet.
Copies the value of a cell from the source cell to the new cell.
Copies the specified cell from the source sheet to the destination sheet.
Clones the comment from the given cell to the given cell.
Creates a client anchor for a comment.
Creates or inserts a comment in the specified cell.
Match comment settings.
Get the VML drawing from a cell.
Extracts the ct shape from a VML cell.
Gets the cell style from source cell.
Convert a cell into a cell range.
Gets the row and column index of the component attributes.
Gets the initial rows from the sheet configuration.
Gets the faces row from body row.
Gets the faces cell from body row.
Gets the cell from sheet.
Gets the skey from cell.
Get or add a tie cell in map.
Gets the name of the current data context.
Evaluates the given expression using the given context.
Evaluate Jexl expression.
Writes the current row to the given output stream.
Removes a row from the table.
Merges the rows of the given Map into this one.
This method recovers all the serial rows in the specified sheet.
Gets the chart type for the given chart.
Convert a string style to a stroke.
Initializes a chart data object from a XSSF chart.
Sets chart data.
Initialize XSSF for a given set of chart data.
Initializes the XSSF drawing.
Gets the chart ID associated with a chart.
Gets the chart id from child node attributes.
Iterate over all objects of the given class name.
Saves the data in context.
Recalculate the formula evaluator.
Gets the cell with row col from tab.
Gets the faces cell with row col from current page.
Restores the current data context.
Gets the last collect.
Checks to see if the given name needs to be restoreed.
Start restore data context collection.
Shifts the row ref of the first row and the last row.
Sets the first row ref.
Sets the last row plus ref of this cell.
Add all cells for a given row and set the full name in the hidden column.
Evaluate and build single cell.
Reads the object.
Builds the category list.
Builds a series list from a chart object.
Builds a chart series from a chart object.
Gets the color list from dpt and cells.
Returns the dpt at the specified index.
Sets the command index map.
Gets the pictrues map.
Get a list of picture from the XSSF.
Index a picture in the map.
Generate the style of the picture.
Generate the chart style.
Gets the pattern.
Gets the chart data.
Recovers this sheet from the cell of the current row and column.
Gets the row style.
Gets the cell font style.
Get the cell font color.
Get the cell font decoration.
Gets the cell style.
Get the column style for the given cell.
Gets the alignment from cell.
Gets the vertical alignment from cell.
Calculate the total height of the sheet.
Sets up a cell style for the given workbook and cell and row height.
Determines the input type from the cell type.
Gets the resource paths.
Gets the resource as stream.
Removes the prefix path from a resource.
Eval input type boolean.
Finds a bean by its name.
Join an array of shorts with a separator.
Rounds the specified number to the specified decimal places.
Gets the tab type.
Gets the style of the tab of the form.
Gets the default date pattern.
Gets the decimal separator by default locale.
Gets the decimal separator by default locale.
Sets the tie command alias list.
Builds the list of watchers that can be used to watch the sheet.
Builds a list of ptgs for a given cell.
Adds a row to a watch list.
Checks if the given string is a command prefix.
Parse the widget attributes from the new comment.
Gets the attribute key in map by cell.
Parses the new comment and updates the cell attributes map.
Find the position of the first pair.
Parses attributes from a command line.
Parses a list of cell form attributes and adds them to a list of ControlFormAttributes
Parses the given list of form control attributes and validates each of them against the given
Split the attribute name into the parts of the attribute value separated by the Eual sign.
Parse the special attributes of a form.
Process calendar attributes.
Process select item attributes.
Gathers special attributes for a form.
Parses a comment and converts it to a map.
Finds the first non-cell-name position.
Removes the chars from string.
Gets the Excel column name for the given PNumber.
Converts a column name into an integer.
Gets a cell by its reference.
Converts a height units to a pixel.
Checks if the given string is a valid date.
Parses an entry to get the date.
Checks if the given string is numeric.
Should continue given parameter.
Sets the value of a property on an object.
Compare two Cells.
Returns true if the child range is inside the parent range.
Removes all hidden columns in the sheet.
Delete all hidden columns in the given row.
Deletes the cell at the given cell number from the given row.
This method logs the current build version of the application.
Refreshes the cell in the table after the status has changed.
Validates that the given row and col are within the current page.
Check if the row and column values are valid by using the tieWeb sheet validation bean.
Check if the error message should be shown in the row and column of the cell.
Validates all rules for a single cell.
Do the validation.
Validates that the given cell is within the current page.
Check to see if there are any rows in the current page.
Validates a row in the current page.
Checks to see if the row is valid for the current page.
Refreshes the cached cells in the current page.
Recursively refresh cached cells in a row.
set submitMode in view.
Checks to see if the current tab name is valid.
Clears out all of the variables used in this comment map.
Load the rows for the header of the sheet.
Loads the header row without the configuration tab.
Fill in the first column of the parent table with the maximum number of columns.
Gets the column style of the header of the given cell.
Get the column width style.
Gets the column width style.
Initializes the tabs.
Loads the serial data.
Refresh the data for a specific row.
Refresh the data for a cell.
Finds the tab with the given name.
Loads the work sheet.
Prepares the work shee.
Set the first page of the data table.
Setup the row information for the given row.
Load body rows.
Refreshes a cell using the specified name from the specified cell.
Processes the refresh cell.
Create dynamic table columns for a tab.
Adds a new row to the repeat table.
refresh body rows in range.
Sets the status of the user in the given request context to the given boolean value.
Indicates whether the application is un Returns true if the application is un Returns false otherwise.
Gets the common constructor of the given type.
Writes an input stream to an output stream.
Writes the given long to the given writer.
Writes a line of data to a writer.
Sets the tag that should be used for the traffic stats.
Adds a bitmap to the result.
Adds a binary data to an asset file descriptor.
Removes the parameter with the given name from the result.
Adds a header to the current request.
Clear the content of this request.
Call this method to start playing the streaming track.
Bind the service.
Unbind the streaming playback service.
This method is called by the media player when it is no longer being used by the media
Stores the remote image to disk.
Transfers data from an input stream to a string buffer pool.
Converts the given input stream to a string using the given buffers pool.
Sends the data to the client.
Returns the number of bytes available to read from the input stream.
Closes this input stream and releases the local input stream.
Reads a byte from the input stream.
Resets the file to its initial state.
Send start.
Send the Content-Disposition header.
Sends the Content-Type header if present.
Sends the Content-Type header to the specified output stream.
Send end of file header.
Send end.
Sends multiple parts to the output stream.
Gets the length of parts.
Determines if the given URI is a redirect.
Sends the "not-modified" header to the client.
Sets the date header for the HTTP response.
Sets the date and cache headers.
Sets the content-type header for the given file.
Writes the empty buffer to the given channel and then adds a listener to close the channel
Overrides the default sendDispositionHeader to add filename and quote bytes.
Sends the data to the client.
Installs the cache.
Ensures that the working directory exists.
Gets the cache response for the given request.
Return an input stream to read the body of the cache entry.
Resets the view to a new state.
Get an instance of SSL Context.
Validates a keystore using the given password and key password.
Replaces the current scale type with a new one.
Gets a pending intent.
Disconnects from the given connection.
Bind the service object to the context.
Unbind the service.
Notify about view changes.
Opens the channel for reading.
On accept data.
On reset.
Waits for the loader to complete before returning.
Set text or hide the given view.
Hides the soft input window.
Show soft input.
Toggles the soft input of the given view.
Computes the width of a dips map.
This method is called when an exception occurs.
Clears an image from cache.
Populates an image from a view.
Cancel image loading.
Creates an image consumer for the given view.
Decorates the result image.
Set the loading image from the consumer.
Start an image loader task.
Add a bitmap to the mem cache.
Releases a buffer to the pool.
Adds the common headers to the URL connection.
Adds a parameter to the request.
Connect with workaround.
Computes the MD5 hash of the given string.
Returns the String identifying the given dimension.
Returns the String identifying the given cublasStatus.
Checks the result.
Checks the result of a query.
Adds a lexServiceExceptionId to the lexServiceException frequency table.
Adds a ending.
Return an estimate for a given attribute set.
Print the description of this token to the specified output stream.
Verify and set kamols attribute.
Removes Kamols markup formating.
Gets metric data from appd.
Gets the query string.
Process the json node to create a list of MetricData objects.
Parse the application information from a JSON string.
Returns the connection configuration.
Perform the given apps using the given TimeParams.
Gets a reader for the GCodeList.
Gets a reader for the GCodeListSet.
Gets a reader that reads in columns.
Gets a reader that reads the list of generated code document objects.
Gets a reader for the GCodeListSet.
Gets a new column set reader.
Get the column ID of the passed element.
Get the value of the row's column with the passed ID.
Get the column with the specified ID from the passed column set.
Get all key I ids of the passed column set.
Get the key with the specified ID in the passed column set.
Check if the passed column ID is equal to the passed key column.
Create a column with the specified primary key and data.
Create a new key with a short name and long name.
Set the line number to skip.
Add a new column.
Gets an instance of the Writer class for the GCodeList type.
Gets a writer for the GCodeListSet.
Gets a new column set writer.
Gets a writer for the GCodeList type.
Gets a writer for the GCodeListSet.
Gets a new column set writer.
Gets a validator for the GCodeList elements.
Gets a validator for the GCodeListSet.
Gets a new column set validator.
Gets a validator for the GCodeList.
Gets a validator for the GCodeListSet.
Gets a new column set validator.
Send logs back to the server.
Set the application context.
Get the current log level.
Gets the capture.
Set max log store size.
Prepend the metadata to the message.
Appends the stack metadata to the given additional metadata.
Creates a JSON representation of the package information.
Sets the user identity.
Gets the byte array from the given file.
Start location updates.
Size the given region with the given number of entries.
Dumps the size of the partition data in the given region.
Size replicated or local region.
Reads a snapshot record from the data stream.
Dumps the current time stamps to the given stream.
Get the timestamp values since the given index.
Converts the given file into a chart.
Get the pool for a given server.
Get the pool for a JMX locator.
Checks if a region is already on the server.
Returns the MBean member for the given name.
Returns a list of host names contained in the specified jmx object.
Lookup a network host.
Checks if is error and send exception.
Executes the given function and returns the result of the function.
Flatten a collection of objects into a collection of objects.
Query the given query with the given parameters.
Creates a new CacheListener bridge that executes a consumer after an entry is added to the cache
Creates a new cache listener bridge that executes the given consumer after the entry has been removed.
Handles exceptions that occurred while handling this request.
Gets the onRegionFilterKeyBuilderFactory.
Execute the function.
Get the list of host names from the specified jmx.
Execute the function.
Get the application name from a list of resources.
This method sets the security properties.
Returns the region with the given name.
Get the region with the given name from the given client cache.
Construct comparison of source and target map.
Determines if the given value time stamps must be inserted into the table.
Close the resource.
Dumps the stats files in the given directory.
This is the main method for testing.
Attempts to reconnect to the server.
Stop any currently registered members on the host.
Shuts down the given member.
Shuts down the JMX system.
Shut down state variables in the given state.
Stores a page of data with pagination.
Read results by page.
Imports a region.
Checks if the remote locators and locators match.
Execute the check sum map.
Builds the check sum map.
Gets the value of the given column from the given value.
Returns true if the given type mirror is one of integer and boolean.
Serializes the given object to a byte array.
Deserializes the given byte array into a K object.
Creates an instance of the given class.
Check if the element has a table id.
Check for fields.
Checks if the given element is a super type of the given class.
Demonstrates how to write an instance of this class to a writer.
Emit the id of the target class.
Converts the table to an Observable.
Checks if the given column name exists in the table.
Returns the default string if the given string is null or empty.
Capitalizes the first character of the given string.
Returns true if the given type mirror is one of the real types.
Return a builder for the descending order of the query.
Read the temperature from the device file.
Returns the value corresponding to a given type.
Sends an error to the Messenger.
Gets the icon fonts.
Gets the list of all the icons available in the system.
Get the background decoration of the element.
Raises a value to a power of 1.
Sets this matrix from a new array of values.
Calculate the power of a number using the given power and scale.
Get the root of the specified number using the specified scale.
Taylor function.
Rounds a BigDecimal up to the specified scale.
Calculates the Newton BigDecimal for a given scale.
Convert the passed BigDecimal to an arbitrary scale using arctan.
Taylor function.
Calculate the Euclidean norm of a BigDecimal.
This method prints the pi out to System.out.
Generates a timestamp for the given time.
Sets the limits of the gauge.
Puts the given float value into the cache.
Print the current state of the system.
Adds two complex numbers.
Subtracts two complex numbers.
Multiply this complex by another complex.
Divide this complex by another.
Sets this matrix to a new matrix.
Get a row of this matrix.
Get a column of this matrix.
Sets this matrix from a 2D array of values.
Returns the transpose of this matrix.
Add another matrix to this one.
Subtract another matrix from this matrix.
Multiply this matrix by a constant.
Multiply this matrix by another.
Print this matrix to the specified print stream using the specified width.
Sets the resource used to display the image.
Check if the coefficients are valid.
Compute the next position.
Clears all cached SLDs.
Convert an SLDI layer descriptor to an XML representation.
Convert a raw SLD object to an SLD object.
Check that the given SLD is valid.
Check whether the given SLD is valid.
Computes the area of the area defined by the x1 and h.
Set this matrix from a matrix.
Set this matrix from a 2D array of values.
Returns the matrix inverse.
Computes the determinant of this matrix.
Computes the Euclidean norm of this matrix.
Solve Q = b for x using the improve parameter.
Print the matrix decomposed to the specified output stream.
Performs forward elimination on the provided array.
Performs forward substitution on a column vector.
Get back substitution from the original matrix.
Iteratively improve the matrix b by a column vector x.
Converts a square matrix into an integer matrix.
Returns the next Von neElementException.
Do the iteration procedure.
Compute and set the next position.
Check position.
Compute the next position.
Checks if the two points are within the valid interval defined by the x1 and x
Adds the given float to the end of the list.
Multiply two integers and return the result as an integer.
Raises an integer to a power of 1.
Do the iteration procedure.
Get the SLDManager singleton instance.
Converts the given long value into an array of characters.
Decomposes the given number of bytes into the given number of bytes.
Print the current state of the current state to the specified print stream.
Validate float exponent.
Checks that the input float exponent is valid.
Validates the double biased exponent.
Checks that the double exponent is valid.
Returns the number of standard deviations from the beginning of the document.
Returns the next random value.
Compute the next ratio.
Generate an array of boolean values representing a prime number.
Returns an integer array containing the factors of the given integer.
Do the iteration procedure.
Compute the next position.
Check position.
Set the Application instance to be used by the SDK.
Sets the configuration.
Sets the default configuration.
Initializes the given EJB loader with the given parameters.
Set the lat, longitude as reverse geolatte point.
Gets the host port pair.
Searches for an attribute definition that matches the specified uuid.
Evaluates a filter on an attribute definition.
Sanitizes a tag.
Sets the address to send to the server.
Query for names.
Query for instances.
Get all to by logged in.
Gets the meta data for decimal as.
Change the password of a logged in user.
Get all users.
Get the Gravatar for the given email address and size param.
Get the gravatar for a user.
Populate from elasticSearch json.
Gets the enum value of the field type for the ES search.
Create flow step flow step.
Update flow step.
Get flow step by id.
Get flow step by step.
Gets steps by flow.
Delete flow step.
Force delete flow step.
Populate table fields.
This method closes the connection.
Override handleMessage in order to perform processing specific to this interceptor.
Called by the connection manager to let us know when a connection has been closed.
Get the list of message ids from the return value.
Gets the personal inventory items.
Create a new TableRecord.
Delete a form container.
Get the list of form flow Billing data for this item.
Gets the form and field data.
Get the most recent form and field data.
Lock the given job in the form, with the given parameters.
Unlock the given form param.
Unlock the given form container.
Map the definition and title parameters to the current form.
Converts a comma separated list of role names to a list of Role objects.
Create a new form definition.
Update a form definition.
Get a form definition by id.
Get a form definition by name.
Get all by logged in user list.
Delete a form definition.
Gets the storage key from the given parameters.
Initializes the XCache client.
Shuts down the memcached client.
Converts a string to a long, safe to be used for parsing.
Converts a document to a PDF file.
Gets the field values for a form from cache.
Create flow step entry rule.
Create flow step exit rule.
Create flow step view rule.
Update flow step rule.
Update flow step exit rule.
Update flow step view rule.
Move flow step entry rule up.
Move flow step entry rule down.
Delete flow step entry rule.
Delete flow step exit rule.
Delete flow step view rule.
Initializes the session with the given password and response.
Gets all user queries.
Get all roles.
Get the service ticket as hex upper case.
Create a field in the form with a text mask.
Create a Field in the Document with text values.
Create a field with a decimal spinner.
Create a field that represents a decimal slider.
Create a new field in the table.
Update the field text masked with the given value.
This function updates the service ticket in the given form field with the given type.
Update a field's decimal spinner.
Update the field slider.
Update a field.
Get a field by name.
Gets the fields by form name and logged in user.
Get all the fields for a given form type ID and logged in user.
Delete a field.
Force delete field.
Gets the meta data for a table field.
Update the value of a field.
Gets or creates a new index.
Create a flow.
Update flow.
Get a flow by flowId.
Get flow by name.
Delete flow.
Force delete flow.
Update the field value.
Gets all global field values.
Gets the form definition id and title.
Decrypt init packet.
Closes the connection and cleans up any resources.
Initializes a new request.
Gets the exception message verbose.
Create admin user.
Get an access token.
Gets user profile information from an access token.
Execute JSON.
Execute a form.
Get JSON response handler.
Returns true if the connection is valid.
Get the client to use.
Gets the path of the system property, or null if the system property is not set
Closes the connection to the database.
Get a listing of the items that are visible to the user for a given view.
Send a form to a flow.
On close.
Processes a message.
Send this message to the server using the supplied JSON object.
Sends a message to the remote endpoint.
Close the user session.
Execute native SQL.
Request a license.
Apply a new license.
Create a new field in plain text format.
Create a new field in the paragraph text format.
Create a new paragraph text field.
Create a field in Multi choice select many.
Create a new Date-Time field in the map.
Update the text in the given field.
Update the paragraph text in html format.
Update field date time and time.
Update field decimal plain.
Update field value.
Create field value.
Get configuration by key.
Get all configurations.
Create a new attachment.
Gets the attachment by attachment id.
Delete an attachment.
Force delete attachment.
Parses the jar file.
Sets the classloader for the given jar.
Checks that the parent is a xsd schema and throws an exception if it isn't
Checks that the parent is a xsd schema and throws an exception if it isn't
Check to see if there is an attribute in the map.
Gets the schema node.
Checks that the parent element is a schema element.
Test for an attribute in a rule.
Converts the specified value to the correct value type.
Creates a CLI interface from the given class.
Creates a CLI instance using an instance of the specified options.
Parses an array of arguments from the command line.
Parses command line arguments using instance.
Returns a URL builder for the given path.
Removes the view from the footer.
Returns the value of the point p.
Returns the value noise of 3D int values.
Returns the 3d value of a 3d value using the given seed.
Returns the value smoothed by a cubic spline interpolation function.
Computes the S curve for five membership function values.
Sets the bounds of this vector.
Process the event.
Process a cloud trail event.
Gets the account ID of the event.
Checks if the given violation entity matches any of the whitelist rules.
Gets the event serializer.
Creates a new file with the given name in the root folder.
Creates the directory with the given name if it does not already exist.
Restores the state of the instance from a previous state.
Creates the implementation of this map.
Adds the given object to the queue.
Set a string property.
Gets a String array property.
Get the next state of the transition.
Process the queue and remove entries from the map.
Gets the instance for the given type.
Gets the parameterized type.
Gets the type variable for the given type variable.
Print the stack trace of this exception to the given stream.
Print the stack trace of this exception to the specified writer.
Replaces the object if it is a remote stub.
Starts the server.
Sets the task to be executed.
Determines whether the task was accepted.
Determines whether the task was rejected due to an exception.
Indicates whether the task has started.
Determines whether the task has completed successfully.
Stops the task.
Gets the job implementation.
Adds a new job to the queue.
Converts a blocking mode name to a blocking mode.
Resolves the object for this stream.
Copies all readers from the given catalog to this catalog.
Creates a new catalog instance.
Loads the system catalog information from the catalog manager.
Parse the catalog from the supplied URL.
Parses the current catalog files to find and add them to the local catalog files.
Parse the catalog file.
Log an unknown entry.
Resolve the publicId and systemId.
Resolve the document.
Resolve the system.
Resolves a local URI.
Make the given sysid absolute.
Normalize the URI.
Converts an integer into a hex encoded byte.
Adds a delegate to this catalog.
Creates a new soft-value reference.
Fires an exception to all listeners.
Adds the given exception to the set.
Creates the implementation of this list.
Compare two timer task execution time.
Get the value of this property.
Gets the value at the given index as an object.
Set an object in the queue.
Counts the number of elements in the queue and removes them from the list.
Adds an entry type and number of arguments.
Retrieves the value of the given entry type.
Get the count of entries of a given type.
Gets the entry argument at the given index.
Set the Thread's context class loader.
Swaps two positions.
Removes the node at the specified index.
cleanup timeout ext impl.
Loads a class from the classpath.
Preload the protocol list.
Creates a new URL for the specified protocol.
Checks the system property to see if the handler is already in use.
Gets the value of this property.
Creates the implementation of this set.
Make synchronized long counter.
Make the given counter into a directional counter.
Determines if this extension is currently in the extension namespace.
Check the notification status.
Get an object instance by name and context.
Substitutes a string in the buffer.
Splits the given string around matches of the given delimiter.
Joins the given byte array with the null terminated string.
Default to string.
Gets the value of this property.
Creates a new cache with the current time.
Get the value associated with a key.
Returns the value stored for the given key, or null if there is no such key.
Removes the entry with the specified key from this map if it is present.
Flushes the state of the map.
Returns a list of the keys that have expired.
Set the current resolution of the device.
Returns the entry for the given key, or null if there is no such key.
Gets children by tag name.
Get unique child by tag name.
Get the optional child element with the given tag name.
Return the content of the given element.
Retrieves the unique child content of the given element.
Get the content of an optional child element.
Set the maximum queue size.
Sets the blocking mode of the operation.
Sets the name of the blocking mode.
Execute the given task.
Resolve the external system.
Resolve an external public by using the publicId.
Query the resolver.
Appends a vector to an existing vector.
Resolve all system in reverse.
Resolve system reverse.
Resolves the local system.
Reads the contents of a catalog from a file.
Reads catalog information from an input stream.
Connects to the remote server.
Gets the output stream.
help delete a node f in b.
Returns the value of this header, or null if this is not a valid header.
Creates a snapshot of the entries in this map.
Returns the Logger instance for the given class, creating one if it doesn't exist yet
Writes a list of objects to a buffer.
Returns the class name without the package prefix.
Returns a string representation of the implementation.
Returns an iterator over the names of the system security manager.
Get the property group for the given basename.
Gets the compatible constructor.
Copy an object from the input stream to the output stream.
Derefer casts an object to an expected class.
This method initialises the context manager.
Update JNDI cache.
Returns a set containing all keys in this object, including defaults if specified.
Returns a set containing all entries in this set, including entries that don't correspond to
Removes a property listener from the set of listeners.
Fires a property added event to each of the listeners in the list.
Fires a property event to all registered listeners in the list.
Notify listeners that a property has changed.
Fire the given property change event.
Returns the property name for the given base and prefix.
Loads properties from the specified property reader.
Loads the class with the given name.
Returns the property group for the given basename and index.
Checks if the entity is resolved.
Resolve the system ID.
Resolves the system URL.
Resolve the classpath name.
Sets the value of this Element as a Document.
Normalizes the public ID.
Encodes the URN in the public ID.
Decodes the passed in URN and returns the public ID.
Replaces all occurrences of a given string with a new string.
Starts the server.
Stop the timer.
Make synchronized.
Compares the hash code of this object with the hash code of the given object.
Generate a hashcode from a byte array.
Generate a hashcode for an array.
Creates the list and sets its capacity.
Sets the field value.
Gets the next token from the token stack.
Initialize the system properties.
Adds a vertex to the set of verticies.
Set the root vertex of the graph.
Removes a vertex from the graph.
Starts a depth-first search starting at a given vertex.
dfs spanning tree.
Finds a vertex with the given data, using the given comparator.
Returns an array of all cycles in the graph.
Normalize a string.
Parse the given XML string and return the root Element.
Parse the given XML and return the root Element.
Parse the given input source and return the root Element.
Create an Element for a given name.
Resolve a qualified name into a QName.
Copy the attributes from the source element to the destination element.
Checks to see if a node has any child elements.
Return an iterator over all child nodes of the given node.
Get the text content of a node.
Get the child elements of the given node.
Gets the parent element.
Adds a resource to the waiting list.
Reads the contents of a catalog from a URL.
Get the local host address.
Set system property class value.
Display the class information.
Provide a human readable description for the given class.
Strip package name from class name.
Gets the package name of a class.
Force the class to load the given type.
Gets the primitive wrapper for the given type.
Gets all interfaces of a class and all superclasses.
Returns all of the unique interfaces of this class and any of its super classes.
Checks if the given type is a primitive wrapper.
Instantiates an instance of the specified class.
Method to get the getter for an attribute.
Method to get the setter for an attribute.
Converts a Java class name to a Java class name.
Gets a system property.
Gets the file names for a given property name.
Removes all weak objects from the set.
Returns an iterator over this set.
Create a URL for the given protocol.
Returns an immutable set containing all of the elements in this set.
Adds a listener to the bound property.
Removes a bound property listener from the list of listeners.
Checks if the given string is null or empty.
Finds a property editor for the given type name.
Registers an editor with the given type and name.
Converts the given value to the given type.
Get the context class loader of the specified thread.
Determines if the given exception is an Application deadlock exception.
Schedules the given timeout to be run at the given time.
Executes the work on the queue.
Create a subcontext.
Lookup an object from the given name using the given class.
Checks that an object is of a certain class.
Append the information about the class and interfaces to the given buffer.
Get a allowed transition.
Read the properties from the classpath.
Get the verb of the process to run.
Query the resources to see if they are relative to each other.
Queries the system property to get the list of catalog files.
Gets the catalog files.
Queries the system property to see if there is a public preference.
Checks to see if a static catalog is specified in the system properties.
Resolves an entity using the public ID and system ID.
Resolve a base URL for an href.
Converts the given URI to an absolute one.
Resolve the class for the given class object.
Invokes the setter for the given value.
Gets the local name of the element.
Gets the namespace URI of the given node.
Gets the namespace URI of the given element.
Returns a list containing all the elements of the given enumeration.
Returns an input stream to read the contents of the given file.
Loads properties from a file.
Read the properties from the file.
Adds an edge to the graph.
Adds an outgoing edge to the graph with the given cost.
Add an incoming edge to the graph with the given cost.
Checks if the given edge is part of this node.
Removes the edge from the graph.
Finds the edge of a given vertex.
Finds the edge in the graph.
Returns the total cost of a node from this node to dest.
Adds a jar to the given directory if it's not already there.
Returns true if there are more elements in this batch.
Tries to fire an event to the task queue.
Installs the JVM type provider.
Dispatches an action to the current thread.
Gets action stream.
Returns a stream that contains exactly one element.
Convert a collection of rights to a stream where only one element is allowed.
Determines whether or not the specified page should be allowable.
Checks if the instruction has been generated.
Gets the sum degree.
Obtains the command line arguments for the superclasses.
Inform the resource manager that the caller has read access to.
Checks if the datasource is valid.
Gets a list of objects of the specified type.
Connect driver on with url and driver class name.
Run in the sql.
Executes a SQL query in a database.
Filter by example.
On upgrade.
Dump the current table to a new file.
Restores the table from a csv file.
Set the empty text of the list view.
Dump the table to a csv file.
Unescapes the given string so that it can be used in a CSV file.
Read a csv line and return a list of String values.
Converts a comma separated string into a map.
Convert map to csv.
Joins a list of Strings into a single one.
Join an array of Strings into a single one.
Reads a database model from an index.
Output to an index.
Inspect the id field of the entity.
Returns the base dao class for the given entity.
Gets the name of the type that this field is bound to.
Import data from a csv file.
Backup all tables to csv.
Restores all tables from a csv file.
Writes the index from the given filer to the given location.
Create a query from the given entity manager.
Creates a query of the given type using the given manager.
Renders the query.
Delete the record with the given ID.
Saves the given object in the database.
Update an object in the table.
Add a constraint to the query that requires an IN expression.
Appends a Subquery of this query to the end of the current query.
Get the next active stack.
Gets an empty intention stack.
Adds the plan with the given set of bindings to the plan.
Selects a plan for the given policy.
Select a random plan.
Sets the plan variables for an agent.
Gets the result at the specified index.
Returns the byte array containing the parents of the node.
Returns a copy of the children array.
Increments the specified number of bytes in the specified array by the specified amount.
Creates a new logger.
Starts a new step.
Set the information about the Goals in the given byte array.
Pause for user input.
Initialize the selection pools.
Initialize the intention selection threads.
Start the intention selection threads.
Shuts down the intention selection threads.
Register extension.
Resets the extension to default values.
Loads an agent.
Process the set of planes for a given goal type.
This method creates the agents in the catalog.
Loads a class from the classpath.
Load extension by class name.
Checks if two objects have the same name.
Gets the usage string.
Parse the command line arguments.
Parse an argument.
Evaluates the given query in the given belief.
Returns the value of the object at the specified index.
Find the object with the given name.
Pushes a new object onto the stack.
Returns the value of the idx-th entry.
Pushes an object onto the stack.
Removes the value from the front of the stack.
Gets the type of the given object.
Checks if the given query matches the given belief.
The main entry point for this application.
Converts the specified string to a byte array using the specified charset.
Post the given goal to the given stack.
Send a message to all registered agents.
Send a message to all registered agents.
Returns an array of bytes representing the Goals in this buffer.
Creates a new belief set.
Adds a new belief.
Evaluates the given query on the given belief.
Suspends the agent.
Returns the field with the given name from this belief set.
Registers a number of neighbours for this belief.
Builds a random name.
Runs the event loop.
Checks if the agent execution stack is valid.
Removes all active agents from the given set.
Checks if the agent can manage the goal.
Shuts down the pool.
Marks the given agent as idle.
Move the bits from the specified pin A to the specified pin B.
Initializes the instance.
Waits until idle.
Finishes writing data to the output stream.
Returns true if any pools are idle.
Get the poolid of the given agent.
Picks the current expression from the pipeline.
Sets the expression that will be used to evaluate the expression.
Joins the given attribute with the given from.
Recursive join.
Find or create join.
Checks if the end has been reached.
Gets the upload stream from the request.
Handles the http request.
Check if there is a parameter with the given name and value.
Get a parameter by its name.
Parse the parameters for the given expression.
Configures the transaction manager with the given configuration.
Gets the target file for the given artifact.
Writes the artifact data to the temporary file.
This method is called after the instance has been processed.
Gets the declared constructor from the implementation class.
Builds a string representation of the descriptor.
Gets the interface method for the given method.
Returns the type of the given field.
Gets the value of a dependency.
Persists the current state of the model.
Sets the default links for the resource.
Sets the default link template for the given rel and href.
Handles the links in the HTTP response.
Handles the header links.
Handles the body links.
Parse a link object.
Get or add.
Handles the capabilities from the response.
Checks if a method is allowed.
Registers all the instance processors.
Registers an instance factory for the given type.
Registers an instance processor.
Registers a class processor.
Adds an argument to the list.
This method creates the list of target files to be processed.
Returns the XML representation of this object.
Initialize the context.
Checks if the given template file exists in the given directory.
Creates a parameterized template model from a reader.
Creates a parameterized template model from a file.
Sets the request path.
Gets an observable from the given index, starting from the given startIndex.
Create an instance scope for the given string using the given value type.
Set the value of a field.
Adds a capture appender to the specified Logger.
Removes the specified appender from the specified Logger.
Clears the appenders for the specified name from the specified Logger.
Parses the model.
Resolves all the proxies found in the resource set.
Get the files in the given directory.
Parse a directory and its contents.
Checks if the model is fully resolved.
Finds all E objects in the given ResourceSet.
Sets the model dirs.
Sets the file extensions.
Sets the model resources.
Advances to the next record.
Set the value of a string parameter.
Converts the given string to a value of the given type.
Merges a template into the project.
Get the model directory.
Gets the directory where the templates are stored.
Writes the given document to the given HTTP response.
Start the application.
Configures the window with the given web window.
Print the view.
Writes the data from the given input stream to the given output stream.
Invokes the method on the proxy instance.
Attaches the given request to the given response.
Detaches the object from the session.
Get the value of the response cookies.
Dump the HTTP request to the console.
Get the invocation meter for all managed methods.
Configures the event stream with the given configuration.
Sets the remote host for this stream.
Get parameter value converted to requested type.
Removes the prefix from the path.
Gets the common dir.
Converts an absolute path to a relative path.
Converts a relative path to a absolute path.
Gets the directory depth.
Dumps error information to the log.
Sends a JSON object to the client.
Adds a parameter template.
Adds a list of parameterized template models to the end of the list.
Initializes the context with the given variables.
Finds references to a template.
Enables or disables the save button.
Deletes the dialog.
Deletes the file.
Create new instance of SPI managed class.
Get the files that were added to the results.
Get the summary of the results.
Get the summary row for the given directory.
Get the summary row for the given file.
Creates an instance of SPIService using the given arguments.
Gets the setup class.
Gets the model dirs.
Gets the model resources.
Sets the collection of entities to be added to the select.
Loads the configuration from the specified input stream.
Called when an error occurs.
Determines whether the given array of formal parameters is an object or not.
Parses the given request for the given parameters.
Reads a JSON object from the given input stream.
Extracts the cell parameter from the cell.
Gets the value of the q.
Checks if the request contains an X-Requested-With header.
Check if the request is for an android browser.
This method updates the endpoint if the entity type is the same as the endpoint type.
Gets properties with an annotation.
Returns the annotation of the given type on the given property.
Logs a message with the given arguments.
Lookup the whois instance for a given domain.
Determines whether a parser is available for a given whois host.
Get the managed class for the given interface name and request uri.
Get a method from the given managed class.
Process not contains exception.
Checks if the last event in the cell matches the given parameters.
Serializes the servlet response.
Get cookie value by cookie name.
Adds a cookie to the response.
Removes a cookie by name.
Returns an iterator over the cookies in this request.
Gets the target file list producer.
Adds a field to the class.
Compiles the class.
Verify response.
Gets the value of the file.
Ensure that the given URI has a trailing slash.
Get the HTTP servlet request.
Invokes the given managed method.
Executes an immutable transaction.
Executes an immutable transaction.
Get the files that match the filter.
Gets the last file from the directory.
Gets the concrete config.
Checks if the request path starts with the path component.
Returns a list of artifact factories of a given type.
Get a session for the given instance key.
Serializes the servlet response.
Reads the meta data from the file specified by the uri.
Override handleRequest in order to perform processing specific to this interceptor.
Tear down the statement.
This method is called before any event streams are created.
Handles allowed HTTP methods.
Uploads the blob to the blob store.
Invoked when the user clicks on the delete button of the dialog.
Extracts column parameters from a row.
Gets the argument names.
Adds a new periodic task to the scheduler.
Schedules a timeout task for execution.
Loads the config from the config file.
Gets the next file.
This method configures the application.
Prints the banner to the console.
Prints out information about the stopped banner.
Create an instance of the appropriate component based on the arguments.
Register the shutdown hook.
Triggers the notification.
Trigger the event.
Inserts a new row into the fit table replacing the old row with the new row.
Get the counts of all files in the directory.
setter for score - sets.
getter for variants - gets the list of variants associated with this summary.
setter for variants - sets the list of variants associated with this summary.
getter for question_type - gets.
setter for question_type - sets.
getter for token - gets.
getter for depLabel - gets.
setter for depLabel - sets.
getter for semantic_type - gets.
setter for semantic_type - sets.
getter for sections - gets array of sections of the document.
setter for sections - sets the sections of the document.
indexed getter for sections - gets an indexed value -.
indexed setter for sections - sets an indexed value -.
getter for uris - gets.
setter for uris - sets.
getter for types - gets.
setter for types - sets.
getter for targetType - gets.
setter for targetType - sets.
getter for rank - gets.
setter for rank - sets.
getter for queryString - gets.
setter for queryString - sets.
getter for candidate answers - gets.
setter for candidate answers - sets.
indexed getter for candidate answers - gets an indexed value -.
indexed setter for candidate answers - sets an indexed value -.
getter for query - gets.
setter for query - sets.
getter for hitList - gets.
setter for hitList - sets A collection of objects of type uima.jul
indexed getter for hitList - gets an indexed value -.
indexed setter for hitList - sets an indexed value -.
getter for abstractQuery - gets.
setter for abstractQuery - sets.
getter for searchId - gets.
setter for searchId - sets.
setter for docId - sets.
getter for offsetInBeginSection - gets.
setter for offsetInBeginSection - sets.
getter for offsetInEndSection - gets.
setter for offsetInEndSection - sets.
getter for beginSection - gets.
setter for beginSection - sets.
getter for endSection - gets.
setter for endSection - sets the end section of the passage.
getter for prototype - gets.
setter for prototype - sets.
getter for triple - gets.
setter for triple - sets.
getter for sourceRelation - gets.
setter for sourceRelation - sets.
getter for subject - gets.
setter for subject - sets.
getter for predicate - gets.
setter for predicate - sets.
getter for isObjURI - gets.
setter for isObjURI - sets.
getter for operator - gets O.
setter for operator - sets O.
getter for operator_args - gets.
setter for operator_args - sets.
getter for concept - gets.
getter for score - gets.
getter for text - gets.
setter for text - sets.
getter for id - gets.
setter for id - sets.
getter for name - gets.
getter for abbreviation - gets.
setter for abbreviation - sets.
setter for concept - sets.
getter for variants - gets.
setter for variants - sets.
getter for namedEntityTypes - gets.
setter for namedEntityTypes - sets.
getter for concept_type - gets.
setter for concept_type - sets.
getter for occurrences - gets.
setter for occurrences - sets.
getter for concepts - gets.
setter for concepts - sets.
getter for originalText - gets.
setter for originalText - sets.
getter for args - gets.
setter for args - sets The list of arguments of the operator.
getter for label - gets.
setter for label - sets.
Returns the index of the first clear bit, or -1 if there is no clear bit.
Sets the bit at the specified index.
Free the given buffer.
Returns a new cache value with the specified directory and file name.
Recompute an array with a new size.
method to generate the HELM notation.
Checks if the brackets are the same.
Method to add the details from the given string.
Returns a human-readable representation of this annotation instance.
Method to add a new element to the group.
Checks if the given polymerId is valid.
Check if the polymer id is valid.
Checks to see if the connection is valid.
Checks if the group ID is valid.
Checks if the given string is a repeat.
Checks if the current polymer section is a peptide or rna.
Return the notation container as a JSON string.
Gets a simple PolymerNotation by it's ID.
Returns the current grouping notation.
Returns a string representation of this annotation.
method to generate the HELM notation for the current polymers.
method to get the HELM connection.
method to get the HELM notation for the grouping.
Return the annotation section as a HEL string.
Gets the polymer and grouping I.
Returns the PolymerNotation for a given polymers id.
Sets the polymer-element list or single polymer-element.
Do the actual conversion.
Sets the value of the annotation property.
Sets the count.
Decide which MonomerNotation should be used.
Decide which MonomerNotation in a group.
Decide which entity the given string should be.
Gets the value of this option.
Parse a test string.
method to set the rna for a given string.
Define the ambiguity.
Gets the statistics for this job.
Creates a new graph from a collection of edges.
Creates a new graph from a collection of nodes and a collection of edges.
Initializes the internal list of paths that should be processed.
Get a list of nodes sorted by reachability.
Subscribes to a method.
Send a subscribe count query to the server.
Helper method to unsubscribe from a pattern.
Synchronously sends a response to the server.
Synchronously sends a request to the remote server.
Poll for a request, and return true if the request was successful.
Send a shutdown request to the remote peer.
Throws an unchecked exception if th has no local handling.
Unlock the given runState and swap the steal counter if needed.
Tries to create and start a worker.
Try to add one worker to the set.
Registers a worker.
De-register a worker from the system.
Takes all of the work in the given array and signal all of them to be processed
Runs a worker.
Awaits work on a queue.
Returns the common submitter queue.
Completes the given task for an external help.
Submits a task to the system.
Makes the common pool of threads.
Gets the response.
Builds a string from the given code.
This method returns a snapshot of the worker queue's statistics.
Creates a new array with the given elements.
Reverses this list.
Applies the pred to each element of an iterable.
Folds all items in the supplied collection into the supplied start value.
Folds the elements of a list starting from startValue to the end of the list
Pushes a task to the pool.
Converts null into an object or returns empty object if conversion is not possible.
Creates a new map from the given keys and values.
Create an empty object with the same key and value as the given equality.
Creates a new object from the given equality with the elements of the given collection.
Creates a new object with the same keys and values, but with the same key and value
Returns a set view of the keys contained in this set.
Normalize the resource name.
Marshals the value as a string.
Returns a subsequence of this sequence.
Searches for the first element in the list.
Searches for the elements in the given list using the given comparator.
Sends a message to the e-mail server.
Bind a route binding handler.
Binds the handler to a filter binding.
Shows the body of the tag.
Gets the integer value of the given long.
Removes duplicate Strings from a String array.
Returns a string like the given value.
Do not call this method directly.
Login for a given user with a password.
Gets the user that was logged in.
Check a password against a plain password.
Saves the member in the user's cookie.
Gets the login key.
Create a cookie user for the given uuid.
Sends the http request to the given context.
Gets the value of a request parameter and converts it to a long.
Log a message at debug level.
Get the caller informations for the given level.
Converts an array of characters to a byte array.
Converts a char sequence into a byte array.
Converts an array of bytes to an array of characters.
Converts the specified character sequence to a byte array.
Lookup a LocaleData for the given locale code.
Invokes the callable in the given seconds.
Crops an image and places it at the specified positions.
Schedules the given invocation for the given number of milliseconds.
Invokes the specified method in the current thread.
Get the REST operations.
Render the ajax error.
Render the ajax forbidden message.
Processes the given view string.
Parse the path to get the action.
Renders the data tables of the specified class.
Renders empty data tables.
Sets the list of items in the combo box.
Sends the redirect to the given context.
Obtains a list of T instances from the given injector.
Gets the current method name.
Compacts memory from the system.
Propagate the given metrics to the current collection.
Encodes the given string in Base64 format.
Copies the content from the given input stream to the given output stream.
Copies the given number of bytes from the input stream to the output stream.
Writes the contents of the given input stream to the given output stream using the default encoding
Copies the contents of a reader to a writer.
Copies the specified number of characters from the specified reader to the specified writer.
Copies the content from a reader to an output stream using the default encoding.
Copies the content of a reader to an output stream.
Compare two input streams.
Compare two reader.
Applies the IO to all registered stages.
Return SQL string from group name and sql id.
Converts the contents of a string to an object of a given type.
Unzips a zip file into a destination directory.
Get the instance of the PermissionDialogFragment from the given bean and request code.
Called when the resume button is pressed.
Register a custom converter for the given type.
Checks if the given value matches the given regular expression.
Checks if value is a mobile value.
Checks if the value is a phone number.
Checks if the given value is a year, month, or day.
Checks if the given value is a valid URL.
Apply the web context to the pipeline.
Encodes the given string as base-64.
Decodes the given base-64 string into a byte array.
Converts a hexadecimal string to a byte array.
Reads properties from an input stream.
Reads the content of an input stream and returns it as a string.
Reads the content of a file and returns it as a string.
Writes the given data to the given file.
Copies all files from the given source directory to the given target directory.
Serializes a DOM to a String.
Parse a XML document from a file.
Parses an XML document from a String.
Parses an XML document from an input stream.
Checks that the signature of the document is valid.
Sign a Document using the public key and private key.
Checks if the given class is cache-safe.
Checks if the given class is an array or a primitive.
Checks if a class is an array or a primitive wrapper.
Resolve primitive if necessary.
Determines whether the given class is assignable from the given class.
Checks if the given value is assignable from the given type.
Get all interfaces that the instance implements.
Gets all interfaces that the given instance implements.
Writes the configuration to a temporary file.
Get the variables for a given URI.
Adds a permission to the set of permissions for this bean.
Binds the specified implementation to the specified extension point.
Gets the object for the given type.
Obtains the primitive value of the given type.
Converts the given object to the given type.
Converts the user defined value type.
Performs a query on the request.
Adds a cookie to the request.
Sets a session attribute.
Initializes the data source.
Sets the parameter for the given field and condition.
Sets the value of the parameter.
Shows the dialogue with the specified perm bean.
Checks if all values are granted.
Check if any of the values are denied in the result map.
Find by id.
Find first record.
Is new boolean.
Checks if the given method declared an exception of the given type.
Process the queue.
Puts a new key-value pair into the queue.
Checks if the given string matches the given regular expression.
Read the command line arguments for the given interface.
Gets the protobuf entity.
Checks if the entity is a protobuf entity.
Get all proto buf fields for a class.
Returns the getter name for proto field.
Gets the POJO setter.
Returns the object mapper for the current thread.
Returns the JSONFactory for the current thread.
Converts the given object to a JSON string.
Set the borders of the dialog.
Gets a user record for the given domain and user name.
Copy out attributes.
Copies the attribute values to the target object.
Add this application to a frame.
Saves the current token in the token store.
Gets a token from either the current token or the current secret.
Get the default classloader.
Gets a resource from the given class loader or the system class loader.
Gets a resource as stream.
Gets the class as stream.
Initializes this URI with the data from another one.
Initialize the scheme.
Initialize the path part of a URI.
Sets the scheme.
Set the userinfo field of the request.
Sets the host.
Set the port for this request.
Appends the given string to the end of the current path.
Set the query string.
Sets the fragment.
Get the URI of this part.
Creates a prepared statement with the given SQL and the given parameters.
Initialize the Service.
Get the data for this param.
Set the value of this param.
Gets the clipboard contents.
Set the clipboard contents.
Load services by type.
Sets the operation parameters in the given map.
Gets service params.
Finds a parmetrized service by id.
Finds an instance of a class from a collection of services.
Parse query response.
Returns an iterator over the elements in this buffer.
Get the encoding from an XML string.
Returns a Connection proxy for the given connection.
Retrieves the authorization of the given URL.
Visits package declaration.
Visits all declared fields, methods, and nested types of this class.
Visit an executable declaration. This is the primary focus of the visitation. From here interesting
Gets a configuration option.
Return a declarationFilter that matches any of the provided modifiers.
Returns a filter that matches declaration instances of the given type.
Filter the DeclarationFilter against both DeclarationFilter objects.
Filter the DeclarationFilter against this one.
Gets the current value as a Map.
Make the given constructor accessible.
Prepare an object query.
Replace slash with hyphen.
Converts a byte array into a hex string.
Get a list of indexes for a given name.
Parse the SQL for a named query.
Convert collection of non protobufs to one object.
Sets the protobuf field value.
Sets the POJO field value.
Check if this file is accepted by this filter.
Create a new result set instance.
Helper method to map the expected labels to the index of any unused labels.
Gets the generic supertype.
Polls from the head of the queue and removes it from the queue.
Checks if there are more polled objects to process.
Returns the field with the given name from the given class or any of its super classes.
Returns all declared methods on the given class and its super classes recursively.
Gets a method from a class or any of it's super classes.
Gets annotated methods of a class that are annotated with a specific annotation.
Gets annotated declared constructors.
Dumps a single byte from the system out.
Returns the index of the first occurrence of a substring ignoring case.
Removes all non-printable characters from the specified string.
This method cleans out any state that may have changed since the last run.
Initialize audit.
Initialize message queue.
Initializes the pw validator.
Initializes the pw authenticator from the common properties.
Resolve the locale code.
Lookup the LocaleInfo for the given locale code.
Creates a statement proxy for the given statement instance.
Clears the set.
Pop an element from the front of the stack.
Returns an input stream to read the contents of the file.
Parse the command line arguments.
Test whether the given tokens match against the given set of patterns.
Moves the line to the given positions.
Determines whether this rectangular object encloses another rectangular object.
Returns whether the line contains the given point.
Calculates the intersection of this rectangular object and another rectangular object.
Calculates the union of this rectangular object and another rectangular object.
Replaces the X component of this rectangular object with the X component of another rectangular
Replaces the y values of this rectangular object with the y values of the given rect
Gets the absolute value of the column.
Gets the absolute value of a specific row.
Calculates the cell bounds relative to the cell's location.
Calculate the columns for the table.
Calculates the number of rows in the table.
Unwraps the given throwable.
Starts the JVM with the given command line arguments.
This method is called when the wam code view is updated.
Copy and resize the code buffer.
This method initialises the system.
Create a new instance of QueryParameter.
Add the given node as a child of this node.
Clear the children of this node.
Gets the next internal.
Adds a list of instructions to the end of the document.
Adds the instructions and this to parent.
This method gets called when a bound property is changed.
Register a work panel.
Update the flags for the present component map.
Create a new instance of a decimal type.
Evaluates if the given term is a variable.
Takes a list of WAMs and returns a list of wams that match
Compare two collections.
Process request and response.
Render the beginning of the form.
Render the button.
Resets the machine to its initial state.
This method initialises the learning algorithm.
Get the value associated with the given key.
Returns the index of the specified key in this map.
Replaces the value at the specified position in this vector with the specified value.
Removes the value associated with the given key from this set.
Removes the element at the specified index from this set.
Checks if the given property exists.
Sets the value of a property on this object.
Gets the value of a property.
Checks if the given primitive type is assignable from the given primitive wrapper type.
This method initialises the object.
Decide the decision tree for the given state.
Initializes the lookups for the given decision tree.
Unify the set of variables for a given query and statement.
unifies the left and right term.
Compiles a query.
Finds the maximum number of arguments in the given clause.
Allocate the permanent query registers for the given query.
Gathers the position and occurrence information from the given clause.
Display a compiled predicate.
Display a compiled query.
This method converts a buffer to a string.
Get the value of this property as a String.
Set the value of this attribute as a String.
Reads the term from the content handler.
Checks if the class exists and is an instance of the given class name.
Checks if the given class is a sub-type of the given class.
Checks if the given parent type is a sub-type of the given child type.
Checks if the given class is a sub-type of the given class.
Gets the class for the class name.
Creates a new instance of a class.
Creates a new instance of the class using the constructor and the arguments.
Call a method by reflection, overriding illegal access.
Calls a method.
Call a static method.
Gets the constructor.
Finds the classes that match the name of a property on an object.
Gets the transactional queue.
Gets the transactional re queue.
Gets the type from the given object.
Resets the manager to its initial state.
Creates a new instance of the type with the given name, with the given min and max
Adds the given timezone name to the set of supported timezone names.
Adds the given timezone to the list of supported tables and alternate dimensions.
Adds a table's dimension.
Returns a set of free variables for a given query.
Returns a set of free non anonymous variables in the given query.
Compare two search nodes.
Writes an object to a file.
Reads the contents of an input stream and converts them to a string.
Creates a new search node.
Generate a new trace indent.
Returns true if the body term is in the current argument position.
Choose the best property to decide on.
Returns a new instance of the given task's task's task's task'
Gets the variable for the given name.
Executes the action with the given error handling.
Returns the element at the specified index in this list.
Set the texture to use.
Paint the component immediately without checking if it's in the double buffered mode.
Creates a buffered image of the specified type.
Creates a binary image of the given number of pixels.
Create the sgi image.
Sets the queue search algorithm.
Runs the prolog parser on the given input stream.
Returns a copy of the given clause.
Gets terms from the current token set.
Gets a new ASTor from the current position in the token stream.
Reads a variable declaration.
Parses an integer literal.
Parses a floating point literal.
Parses a string literal.
Returns the directive that has been peeked up in the stream.
Adds a new operator to the table.
Initializes the built ins.
Gets the next token of a given kind from the token source.
Returns true if the next token is of the given kind, else false.
Binds the resource manager to the resource manager.
Roll back the transaction.
Collect iterator to target collection.
Gets the time of day to ticks.
Convert a number of tickers to the number of years in the year.
Sets the number of ticks in milliseconds to the number of hours set to the specified time.
Sets the number of ticks in the clock to the number of minutes specified.
Sets the number of ticks in milliseconds to the number of seconds specified.
Returns the amount of ticks in milliseconds since the epoch to the beginning of the year.
Returns the amount of ticks in the current year, plus one month for a given month.
Adds ticks from the specified date to the current date.
Converts milliseconds to milliseconds representing the beginning of a year.
Reads a byte block from the underlying input stream.
Returns the entry for the given key, or null if no such key exists.
Converts an entry to a cuckoo entry.
Recreates the hash using the rehash algorithm.
Called when an action is performed.
Marks the next available state.
Marks the previous available flag as true.
Indicate that the task has finished.
Get an instance of the WAM library.
Returns an iterator over the variables in this sequence.
Computes the expected value of an array of probabilities.
Given an array of counts, return an array of probabilities corresponding to the counts.
Sets the year, month, day, and year of the year and month fields of the
Makes the forward to the requested action.
Creates a new URL from a spec.
Gets the request's information.
Get the request headers.
Get the list of request cookies.
Get the parameters from the request.
Get the current request scope.
Gets the page scope information.
Get the current session scope.
Get the application scope.
Gets the user principal.
Render the start of the form.
Generates the HTML representation of a map.
Set the current screen state.
Traverses the given term.
Compare two search nodes.
Updates the property's changes with the given registers.
Notify listeners that a property has changed.
Called when we leave a clause.
Checks if the given context is in a top-level sense.
Sets the arguments for this command.
Get the fixity of this node.
Returns whether this node is an infix.
Compares the priority of this operator with the given operator.
This method gets called when a bound property is changed.
Register work flow controller.
Get an AttributeFactory for the given class.
Creates a component factory for the given class name.
Gets the storage cell for the given variable.
Indicates whether this variable is a bound variable.
Sets the column attribute for the given column index.
Sets the row attribute for the given row index.
Gets the column attribute or null.
Gets the row attribute or null.
Internal insert.
Create a new instance of the type with the given name.
Creates a new instance of StringPatternType.
Checks if the given char sequence is an instance of this character sequence.
Creates the initial context.
Updates the registers for the given layout.
Returns the value of this group.
Find a path from the current node to the goal.
Caches the given block.
Get the properties for a given resource name.
Set the rate in pixels per hour.
Reads a byte array from the source stream.
Skips the specified number of bytes from the source stream.
Gathers disjunctions from a list of expressions.
Reads an integer from the given byte array starting at the given offset.
Writes the given 32-bit integer to the given byte array at the given offset.
Writes the given 24 bit integer to the given byte array at the given offset.
Reads a 24 bit integer from the buffer starting at the given offset.
Reads a 16-bit short from the given byte array at the given offset.
Writes the given 16-bit Short to the given byte array at the given offset.
Get the search state of the first node that matches the given operator.
Returns an iterator of all valid operators in the tree.
Gets the id of the node.
Gets the value of this property.
Set the attribute value.
Converts a comma separated string into an array.
Converts a string array to a comma separated list.
Converts a name to CamelCase.
Builds the list of handlers.
Resolve a call point in the symbol table.
Sets the code address for a given unregistered unregistered unregistered unregistered unregistered unregister
Returns true if the given hierarchy attribute is a sub category of this one.
Gets the id of the node.
Returns the value of the attribute at the specified level.
Gets the last value.
Writes the object to the output stream.
Reads this object from the given input stream.
Computes the h-tree h-tree h-tree h-tree h-
Gets the mod value of the given long in the given bucket size.
Adds a user readable error message.
Writes a string to the output stream.
Classifies the attributes of a state.
Compares two objects for orderings.
Returns an iterator over the elements in this list.
Log base 2 int.
Log base 2 v2 int.
Log base 10v2 int.
Log base 10v3 int.
Returns the base 10 of a long value.
Log base 10v2 int.
Gets the character count int32.
Gets the character count int64.
Gets the character count decimal.
Sets the head of the list of instructions.
emmit the code for the call point.
Set the current screen.
Evaluates if the given value is true.
Gets the key iterator.
Create the array properties.
Set the rate in pixels per hour.
Evaluates and returns the type of the first number.
Finds the properties.
Gets the system properties.
Gets the properties using the classpath.
Gets the properties using the OLAP application's OLAP application's
Removes a new Parses an existing Parses an existing Parses an Parses an
Gets the value of this term.
Sets the substitution term.
Returns a priority queue containing all the nodes in the tree.
Clean up any resources used by this class.
Append a logging event to this handler.
Fire a connector to the server.
Initialize the list of printers.
Commits the transaction.
Rollbacks the transaction.
Requests that the specified TransactionOperation be sent to the Transaction.
Adds a cached Operation to the cache if it doesn't exist yet.
Acquires a global write lock.
Releases the global write lock.
Enlist the transaction with the current session.
Checks to see if we should enter a new rule set.
Inserts the specified element into this queue waiting up to the specified wait time if necessary.
Retrieves and removes the head of the queue, waiting up to the specified wait time if
Puts the given element into the cache.
Returns the next object from the source.
Get the value of a property identified by name as a boolean.
Gets the value of a property identified by name as an integer.
Get the value of a long property.
Calls a child expression group mixin with the given name and arguments.
Sets the node visitor that adds the parameter definitions to the node tree.
Go back through the tree until we find the right hand side.
Retrieves the code for a given call point.
Execute and extract bindings.
Decodes the heap.
Captures the current state of the system.
Restores this field from the given object.
Get the value of a specific attribute.
Set the value of an attribute on a class.
Get all field names.
Executes the plugin.
Inserts the specified element into this queue.
Creates a new search node.
Create the priority queue.
Gets the simple walker.
Gets the goal walker.
Walks through the TermWalker tree starting at the given visitor.
Gets the BufferedWriter that will be used to derive the MojoResult from a unary predicate.
Gets the BufferedWriter that will be applied to the BufferedWriter that will be passed to the visitor
Reads properties from an input stream.
Reads properties from a file.
Get the properties for an URL.
Gets the properties for the given file.
Computes the size of the grid in pixels.
Initializes the font metrics.
Adds a PropertyChangeListener to the listener list.
Add a PropertyChangeListener for a specific property.
Removes a PropertyChangeListener for a specific property.
Fires a property change event to all registered listeners.
Create a new instance of the type with the given name.
Fade the specified image from the specified group to the specified target color.
Shows the horizontal bar.
Shows the left bar.
Shows the right bar.
Sanitizes the radio buttons in the given form by their name.
Waits for the given value.
Waits for the given object to be ready to be run.
Executes the plugin.
Appends the classpath to the command line.
Creates a new instance of the type.
Demonstrates how to print out the information in the System.out.
Initialize the command line reader.
Evaluates the query if the sentence is a query.
Evaluates the query.
Get a multi-type data structure.
Get a multi-type data from the given byte.
Get the multi type data for a given character.
Get the multi-type data for a given short.
Get the multi type data for the given index.
Get a multi type data structure from a long.
Get the multi-type data for a given float.
Get the multi type data for a given double.
Converts a string into a multi-type data structure.
Get a multi-type data structure from the given object.
Sets a new value for the given name in the page context.
Clears up to the specified key.
Expands the given key.
Internal insert.
Compare two search nodes.
Parses the given terms for operators.
Get a operators matching a fixity name.
Checks if the candidate symbol is one of the fixities and returns it.
Makes a new node from the given successor.
Get the error messages.
Get the options in force.
Get the command line usage.
Adds any trailing key-value pairs found in the given properties.
Adds the options to a set of properties.
Adds an option to the command line.
Check argument format.
Compares the iterators against the expected iterator using the mapping function.
Get the list of available tags.
Get the options.
Set the instance of the selected tag.
Gets the actual stemmer.
Snowm a word.
The main method.
Create a new instance of the type with the given name.
Resets the manager to its initial state.
Return the information in the trace env frame.
Trace the frame of a choice.
Call the given function with the given number of arguments.
Returns the index of the next stack frame.
Check to see if we need to backtrack.
Propagate a record to the end of the time series.
Converts the positions of the trail to the corresponding positions of the original data.
Tidy trail.
Computes whether the two int values should be unifyable.
Dereferences a const on a field.
Print a slot in the given mode.
Get a random start state.
Checks if the given state is a solvable state.
Gets the state for the child of the given operator.
Returns an iterator over the valid operators.
Prints the current board in a pretty format.
Swaps the specified tiles.
Convert the given string to a character list.
Converts a character list to a state.
Converts a log record into a log4j message.
Converts a log4j Level to an apache log4j Level.
Requeuees the given element in the queue.
Requeuees the given element with the given owner.
Increments the size and count of the record.
Decrements the size and count of a record.
Signals that the given size should be crossing.
Get the naming enumeration list for a given name.
Get a list of bindings for a given name.
Add a property to the environment.
Remove a property from the environment.
Runs the GC.
Return a literal of the current dimensions.
Resolves a named mixin reference.
Pushes a variable reference to the current context.
Sets the maximum height for a given row.
Updates the max column width.
Makes a new node in the tree.
Execute the action.
Substitute any built-in terms in the clause with the actual built-in terms
This method initialises the symbol table.
Performs a top-level check on the symbol table.
Gets the string representation of the arguments.
Evaluates if two numbers are equal.
Signals that the controller is running.
Terminate the process.
Signals that the task has been terminated.
Inserts the specified element into this queue.
Compare two nodes.
Inserts a new node into the tree.
This method restarts the server.
Returns a set of objects that match the specified search method.
Find a collection of objects that match the given search method.
Iterates over all solutions of the given search method and adds them to the given collection.
Returns the next element in the sequence.
Restores the values of an object from a map.
Get the value of a property on a class.
Sets the value of a property on a multi-type converter.
Sets the value of a property on a class.
Captures the current state of the system.
Pops the first element from the front of the list.
Convert modifiers to a comma separated string.
Converts a string to an integer.
Converts a string to a date.
Checks if the given string is a valid date.
Check if the given string is a time.
Checks if a string is a valid date time.
Get a new instance of TokenSource for given String.
Gets a token source for the given file.
Get token source for input stream.
Checks if the instruction is a constant.
This method determines if the instruction is a variable.
Checks if the given instruction is a non-arg instruction.
Get the children of this term.
Returns the argument term at the given index.
Returns an iterator over all the children of this node.
Returns a string representation of the arguments.
Retrieves a summary for a given schema.
Get the records that match the query.
Execute query.
Emits the linkage code.
Determines the basic type of the given class.
Convenience method to consult an input stream.
Prints a variable binding.
Expand result set to map.
Runs the parser on the input stream.
Reads the document from the input stream.
Gets the current time in milliseconds.
Get the current time in milliseconds.
Update the track information in the playlist.
Update the play info of the playlist.
Render the output.
Handles a resource request.
Handles an event request.
Fire the start music request event.
Initializes the reader thread.
Starts the reader thread.
Shuts down the server and releases resources.
Resets the parser.
Parse the packets.
Processes a packet.
Sets the cli option.
Creates a chat with the specified user.
Sets the content manager.
Resets the content of this response object to a new map.
Sets the value of a property.
Adds a packet filter to the packet.
Process a single request.
Clears all stored properties of this parameter type.
Initializes the writer thread.
Sends a packet to the client.
Returns the next packet.
Opens the output stream.
Obtains a list of all possible descriptors of this type.
Returns true if the descriptor is contained in the descriptor list.
Adds an event life cycle listener.
Shuts down the executor and cancels the timer.
Checks if the entry is valid.
Removes the key from the map, if the key is null.
Test if two objects are equal.
Returns the entry with the given key in this map.
Resizes the contents of this array to the given capacity.
Puts all of the mappings from the specified map into this map.
Removes the value associated with the given key.
Removes the entry with the given key from the table if it is present.
Removes a mapping from the table if it is present.
Adds a new entry to the table.
Create delegate map.
Encodes a value for use in an XML attribute.
Encodes the given byte array as a hex string.
Encodes the given string as a base-64 string.
Encodes a sequence of bytes into a Base64 string.
Iterate over a collection of Filterable objects.
Sets the track selector controller.
Defines the controller that will be used to jump the current view.
Sets a controller that will be invoked when the playback changes.
Set a controller that will be notified when the volume changes.
Broadcasts the available playlists to the name function.
Handle command resources.
Handles the volume event.
Handles the jump event.
Handle select track event.
Get the thread cache.
Gets the request cache.
Returns the field name for an alternative field name and stream ID.
Get the shard path for the given id.
Get session from adaptable.
Safely invoke a method on the target object using reflection.
Deletes the content of the given path from the given content manager.
Updates one entity by its properties.
Sets the ping interval in milliseconds.
Schedules the ping server task to run.
Adds all application options.
Checks if the given option exists.
Parses the given command line and returns a parse exception.
Prints the usage information for the given application.
Parse the command line arguments and return the status.
Initializes the connection to the server.
Starts the TLS.
Returns the compression handler for the supported methods.
Sends compression request to the client.
Starts the stream compression.
This method is called when a connection error occurs.
Notify listeners that the connection has been closed.
Register an SASL class.
Gets the SASL components that are implemented by the SASL system.
Get the output plugin behaviour map.
Log a message at INFO level.
Log a message and throwable with error level.
Prints a message and stack trace to the given printStream.
Create start event optional.
Returns the start event for the given source.
Notify listeners that a new line has been written.
Checks if a resource exists in the list of resources.
Checks if there are resources from the given source id.
Checks if a list of resources provides a resource.
Provide a resource.
Gets a cached object from the given key space for the given column family.
Gets the cache key from the key space and column family.
Removes a cache entry from the given key space and column family.
Caches the given key for the given column family.
Replies the location map.
Includes a file or directory.
Includes a jar file if it is a directory.
Adds an SASL token to the set of default tokens.
Adds a collection of SASL components to the session.
Create the debug log.
Activates the policy.
Registers the standard events.
Registers an EventListener.
Register an event id with the given description and key.
Do with lock.
Checks if the user has permission to run the event.
Creates a new dse session with the given keyspace.
Create a music player error optional.
Start playing the specified track.
Stops the music that is currently playing.
Execute a player command.
Creates a request to create a playlist.
Create an answer to a playlist.
Appends the given post fix to the URL.
Adds a query parameter to the URL.
Adds a query parameter to the URL.
Adds a query parameter to the URL.
Adds a query parameter to the URL.
Get a playlist.
Launches the button action performed by the user.
Checks to see if the server has started the browser.
Checks if the given url exists.
This method is invoked when a browser button is pressed.
Create an Image icon from a resource.
The main method to launch the nakamura.
Replaces all the values in the specified array with the specified values.
Export the current level descriptor into a hash map.
Get the value at the given index as a JSON object.
Gets a value from the map, or throws an exception if not found.
Returns the integer value of this property, or the given default if the property value is null
Gets the double.
Returns the value as a string or null if the value is null.
Creates a command resource.
Verifies if the given command is a supported command.
Verifies the capabilities of the specified command.
Verifies that the given command matches the given capabilities.
Execute batch async.
Gets the subclasses of the specified class.
Returns a set of all subclasses of the specified class.
Searches for classes in the given location.
Searches the given directory for classes in the given package.
Returns a resource list.
Returns the number of elements in the set.
Processes a packet.
Get the volume of an event.
Sends an error response to a connection.
Create an error response.
Checks if the EventModel is a target.
Sets the value of the enabledPeriod property.
Decorates the given set.
Set the name of this widget.
Set the name, subscription, and set the ask status.
Get a collection of all the groups in the system.
Appends the given rsm element to the given query element.
Parses the rsm element.
Creates a new leaving event.
Reloads the currently authenticated user.
Create a new entry in the server.
Retrieves a collection of all entries in the system.
Get the presence of a user.
Updates the presence map with the most recent offline presence requests.
Fires a roster changed event.
Sets the SHA-256 hash of the given connection ID and password.
Adds a new resource to the list of playlists to generate.
Create a player request.
Gets the time passed.
Registers a listener for changes in properties.
Initializes the properties.
Reload the properties from a file.
Parse an XML error.
Parses the mechanism elements out of the given element.
Parse the compression methods.
Parses a packet extension.
Decodes a string value into an object of the given type.
Verifies whether an event belongs to a player.
Return the playback state for a given resource.
Gets the secret key from the given string.
Determines if the given ColumnFamily is allowed.
Sets the value for the given key.
Returns a key set containing all the keys in this map.
Returns a collection of the values contained in this map.
Purges the given reference from this manager.
Returns the entry for the given key, or null if no such entry exists.
Returns the entry hash code for the given key and value.
Create a new reference entry.
Called when a control event occurs.
Set the presence of the element in the system.
Updates the most recently added presence resource.
Delivers a message to the listener.
Generates the Java script for the given class.
Initialize the output dir.
Loads properties from a file.
Writes the given st into the given file.
Get the progress for an event.
Decorates a collection.
Scans a range of InetAddresses, and collects a collection of ServiceResolver found.
Resolves the configuration.
Gets the thread pool.
Create a stop music from an Identification and its target.
Verifies that the event belongs to the stop music.
Gets a cluster with the specified hosts and ports.
Add a connection listener.
Adds a packet listener to the receive queue.
Adds a packet listener to the list of sending listeners.
Fires listeners to packet sending events.
Adds a packet interceptor.
Fires the interceptors of the given packet.
Parses the given value and converts it to the requested type.
Indicates that the connection has lost.
Gets the current thread id.
Checks if the node is valid.
Gets the key for the given value.
Gets the value associated with the given key at the given index.
Lookup a valid node.
Lookup a value in the tree.
Compare two objects.
Determines the least child of the given node starting at the given index.
Returns the node with the most key in the subtree rooted at index.
Returns the first node greater than or equal to the given node.
Finds the node that is not valid for the given thread.
Checks if the node at the given index is one that is not valid for the given
Copies the color from the node to the node at the specified index.
Checks if the node is red.
Returns true if the node is black.
Gets the grand parent.
Returns the parent of the given node at the given index.
Gets the right child of a node.
Returns the left child of the given node at the given index.
Rotates the right child of the given node.
Rotates the right child of the given node.
Do the red- black insert.
Performs a red- black delete.
Checks that the given object is non-null and has a non-null comparable
Insert a new value into the tree.
Checks if a key exists in the cache.
Checks if the given value is contained within the current thread id.
Get the value associated with the given key.
Removes the value with the given key from this cache.
Clears all entries from the tree.
Copies the entries of the given map into the given map.
Delete expired entries.
Cull the cache.
Activates this component.
Gets a player request.
Initializes the default roster store.
Opens the default roster store.
Scans a range of InetAddresses.
Converts a subnet address into an IPv4 address.
Export the data from this object to a hash map.
Import the track information from hash map.
Adds all applications.
Executes the given application.
Print the list.
Prints the usage of this tool.
The entry point when the program is run from the command line.
Create an MuteEvent from an Identification and a target Identification.
Create an MuteEvent from an Identification.
Get a known Schemata by name.
Writes the given lines to the given file.
Determines if this class is in the exec jar.
Adds the given option to the set of options for this command line.
Return the schema sorted by ID.
Get a field by its name.
Returns the name of the package from a jar entry.
content-to-value map.
Create an EventListener.
Sets the current state of the internal state and returns the old state.
Iterate over a collection of Filterable objects.
Do the actual iteration of the given iterator.
Get the track information of an event.
Export the current length and time stamp into a hash map.
Imports a resource.
Get an image with the given error lines in it.
Get an image from a URL.
Get a JSON object from a URL.
Reverse the order of elements in the source map to the position in the target map.
Calculates the multiplication of this matrix.
Starts the background thread.
Return this object to the pool.
Create and return a new ended event.
Gets the current track information from the queue.
Update playlist position.
Randomly shuffle the queue.
Verifies whether the given capabilities are supported by this playback.
Export the queue data into a hash map.
Escapes a string so that it can be used in an XML document.
Processes the challenge received from the server.
Converts the current object to a JSON byte array.
Runs the event loop.
Handles an event.
Join all queues.
Set the value of a property.
Remove a property.
Adds a principal to the set of principals.
Removes a principal from the set of principals.
Called when the root window is closing.
Notifies the presence of the user that the session has been encountered.
Called when an event occurs.
Returns true if the resource is permanent.
Set the name of the group.
Returns true if the map contains the given key.
Returns true if the set contains the given value.
Associates the specified value with the specified key in this map.
Removes all elements from this set.
Hashes the given key.
Test if two keys are equal.
Checks if two values are equal.
Checks whether there is enough room in the array to contain the given capacity.
Calculates the new capacity based on the proposed capacity.
Creates an iterator for the entries in this map.
Loads a map from the given input stream and writes it to the given output stream.
Initializes the add-on.
Notifies all connection listeners that a reconnection has failed.
Notifies the connection listeners of the attempt to reconnect in.